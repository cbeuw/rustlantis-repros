#![recursion_limit = "1024"]
    #![feature(custom_mir, core_intrinsics, const_hash)]
    #![allow(unused_parens, unused_assignments, overflowing_literals)]
    extern crate core;
    use core::intrinsics::mir::*;

    use std::fmt::Debug;

    #[inline(never)]
    fn dump_var(
        f: usize,
        var0: usize, val0: impl Debug,
        var1: usize, val1: impl Debug,
        var2: usize, val2: impl Debug,
        var3: usize, val3: impl Debug,
    ) {
        println!("fn{f}:_{var0} = {val0:?}\n_{var1} = {val1:?}\n_{var2} = {val2:?}\n_{var3} = {val3:?}");
    }
    #[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn0(mut _1: bool,mut _2: char,mut _3: isize,mut _4: i8,mut _5: u128,mut _6: u64,mut _7: i64,mut _8: i128,mut _9: usize,mut _10: u8,mut _11: u16,mut _12: u32) -> ((*const i32, u32, usize), Adt31) {
mir! {
type RET = ((*const i32, u32, usize), Adt31);
let _13: *const u64;
let _14: isize;
let _15: ((f64,), (i128, usize), f32, (f64,));
let _16: i16;
let _17: Adt39;
let _18: [char; 6];
let _19: i64;
let _20: [i128; 3];
let _21: *const *const u64;
let _22: &'static [usize; 1];
let _23: Adt35;
let _24: ([usize; 1], i8, &'static mut i32, &'static mut &'static *const u64);
let _25: f32;
let _26: [isize; 2];
let _27: isize;
let _28: u8;
let _29: *mut (bool, usize);
let _30: &'static mut Adt35;
let _31: char;
let _32: isize;
let _33: u64;
let _34: i16;
let _35: Adt22;
let _36: i8;
let _37: ((char, &'static mut isize), (char, &'static mut isize), *mut *mut isize);
let _38: u8;
let _39: &'static mut Adt35;
let _40: isize;
let _41: *const isize;
let _42: char;
let _43: char;
let _44: isize;
let _45: f32;
let _46: &'static mut &'static *const u64;
let _47: isize;
let _48: *mut [isize; 2];
let _49: [i128; 3];
let _50: ((f64,), (i128, usize), f32, (f64,));
let _51: (i16, (bool, usize), (i128, usize));
let _52: usize;
let _53: (usize,);
let _54: *mut *mut isize;
let _55: ((f64,), (i128, usize), f32, (f64,));
let _56: isize;
let _57: &'static mut *const isize;
let _58: &'static char;
let _59: char;
let _60: f64;
let _61: ((*const i32, u32, usize), Adt31);
let _62: &'static i64;
let _63: &'static mut i32;
let _64: (&'static [usize; 1], u64, [i32; 3], ([i32; 3], i16, (i128, usize)));
let _65: ();
let _66: ();
{
_5 = !48624841337703456904056753420391237159_u128;
_1 = !false;
RET.1 = Adt31 { fld0: 2283982593336315606_u64,fld1: '\u{ba677}' };
_10 = 87_u8;
_9 = !11461957305376987085_usize;
_4 = 25_i8 - 0_i8;
Goto(bb1)
}
bb1 = {
RET.0.1 = 17579_u16 as u32;
_15.0.0 = (-37_isize) as f64;
_15.2 = 8366465219748034653_i64 as f32;
_14 = (-9223372036854775808_isize) ^ 9223372036854775807_isize;
RET.1.fld1 = '\u{e3e16}';
Call(RET.0.2 = fn1(RET.0.1, _4, _9, RET.1, _14), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_11 = 64928_u16 * 64546_u16;
RET.1.fld0 = 9650727910718669003_u64 - 7520730650575961289_u64;
_15.0.0 = _10 as f64;
_15.1 = ((-148513681673751651455207538955168289196_i128), RET.0.2);
RET.0.2 = _4 as usize;
RET.1.fld0 = 970828323090132226_u64;
_8 = _15.1.0 << _10;
_12 = !RET.0.1;
_15.0.0 = _4 as f64;
_15.3.0 = _15.0.0;
RET.0.1 = !_12;
_12 = RET.0.1 | RET.0.1;
_18 = [RET.1.fld1,RET.1.fld1,RET.1.fld1,RET.1.fld1,RET.1.fld1,RET.1.fld1];
Goto(bb3)
}
bb3 = {
RET.1.fld1 = '\u{da52e}';
RET.1.fld1 = '\u{3ecc}';
Goto(bb4)
}
bb4 = {
RET.1 = Adt31 { fld0: 646417227676217312_u64,fld1: '\u{e4eca}' };
RET.1 = Adt31 { fld0: 169831288579700377_u64,fld1: '\u{c4157}' };
_7 = _12 as i64;
_7 = (-759550123624971805_i64) ^ (-6061903984555982207_i64);
_15.1 = (_8, RET.0.2);
RET.0.1 = !_12;
_20 = [_8,_15.1.0,_15.1.0];
_13 = core::ptr::addr_of!(RET.1.fld0);
RET.1 = Adt31 { fld0: 3833697581319041147_u64,fld1: '\u{104da}' };
Goto(bb5)
}
bb5 = {
_15.1.1 = RET.0.2;
_9 = RET.0.2;
_18 = [RET.1.fld1,RET.1.fld1,RET.1.fld1,RET.1.fld1,RET.1.fld1,RET.1.fld1];
_21 = core::ptr::addr_of!(_13);
_15.0.0 = _15.3.0 * _15.3.0;
_14 = -36_isize;
_2 = RET.1.fld1;
_9 = RET.0.2;
(*_13) = 12225055869316447942_u64;
RET.1.fld0 = !2311245949258009375_u64;
RET.1 = Adt31 { fld0: 18314734478509661428_u64,fld1: _2 };
_6 = RET.1.fld0;
_15.3 = _15.0;
_10 = !22_u8;
RET.1.fld1 = _2;
_14 = -(-9223372036854775808_isize);
_15.1.0 = !_8;
_24.0 = [_9];
_3 = _14;
_21 = core::ptr::addr_of!((*_21));
_27 = _14 | _3;
_5 = _15.0.0 as u128;
RET.1.fld0 = !_6;
_24.1 = _4;
RET.1 = Adt31 { fld0: _6,fld1: _2 };
Goto(bb6)
}
bb6 = {
_27 = _1 as isize;
_28 = _10;
_5 = 336169118759258883179516723315345495704_u128 | 75656108983075800695145152899444130169_u128;
RET.0.2 = !_15.1.1;
_19 = _7;
_24.1 = _4;
RET.1.fld1 = _2;
(*_21) = core::ptr::addr_of!((*_13));
_21 = core::ptr::addr_of!((*_21));
_6 = RET.1.fld0 / RET.1.fld0;
_22 = &_24.0;
_10 = _28;
match RET.1.fld0 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb7,
18314734478509661428 => bb9,
_ => bb8
}
}
bb7 = {
_15.1.1 = RET.0.2;
_9 = RET.0.2;
_18 = [RET.1.fld1,RET.1.fld1,RET.1.fld1,RET.1.fld1,RET.1.fld1,RET.1.fld1];
_21 = core::ptr::addr_of!(_13);
_15.0.0 = _15.3.0 * _15.3.0;
_14 = -36_isize;
_2 = RET.1.fld1;
_9 = RET.0.2;
(*_13) = 12225055869316447942_u64;
RET.1.fld0 = !2311245949258009375_u64;
RET.1 = Adt31 { fld0: 18314734478509661428_u64,fld1: _2 };
_6 = RET.1.fld0;
_15.3 = _15.0;
_10 = !22_u8;
RET.1.fld1 = _2;
_14 = -(-9223372036854775808_isize);
_15.1.0 = !_8;
_24.0 = [_9];
_3 = _14;
_21 = core::ptr::addr_of!((*_21));
_27 = _14 | _3;
_5 = _15.0.0 as u128;
RET.1.fld0 = !_6;
_24.1 = _4;
RET.1 = Adt31 { fld0: _6,fld1: _2 };
Goto(bb6)
}
bb8 = {
_11 = 64928_u16 * 64546_u16;
RET.1.fld0 = 9650727910718669003_u64 - 7520730650575961289_u64;
_15.0.0 = _10 as f64;
_15.1 = ((-148513681673751651455207538955168289196_i128), RET.0.2);
RET.0.2 = _4 as usize;
RET.1.fld0 = 970828323090132226_u64;
_8 = _15.1.0 << _10;
_12 = !RET.0.1;
_15.0.0 = _4 as f64;
_15.3.0 = _15.0.0;
RET.0.1 = !_12;
_12 = RET.0.1 | RET.0.1;
_18 = [RET.1.fld1,RET.1.fld1,RET.1.fld1,RET.1.fld1,RET.1.fld1,RET.1.fld1];
Goto(bb3)
}
bb9 = {
_24.0 = [_15.1.1];
_22 = &_24.0;
RET.1 = Adt31 { fld0: _6,fld1: _2 };
_28 = _10;
_21 = core::ptr::addr_of!(_13);
_14 = _27;
_3 = _27 + _27;
RET.0.1 = _9 as u32;
_25 = -_15.2;
(*_21) = core::ptr::addr_of!(_6);
_6 = _28 as u64;
(*_21) = core::ptr::addr_of!(_33);
_18 = [RET.1.fld1,RET.1.fld1,RET.1.fld1,RET.1.fld1,_2,_2];
_31 = RET.1.fld1;
_4 = _24.1 | _24.1;
_15.3.0 = _10 as f64;
_22 = &(*_22);
(*_13) = _5 as u64;
_34 = 24108_i16;
_15.3.0 = _12 as f64;
_3 = _27 ^ _27;
_24.1 = _4 & _4;
RET.1.fld0 = (*_13) | (*_13);
(*_21) = core::ptr::addr_of!((*_13));
_15.1.1 = !RET.0.2;
RET.1.fld0 = (*_13);
_19 = _7 & _7;
match _34 {
0 => bb7,
1 => bb2,
2 => bb3,
3 => bb6,
24108 => bb10,
_ => bb5
}
}
bb10 = {
_24.0 = [RET.0.2];
_32 = _27 << _9;
_15.0 = (_15.3.0,);
_27 = _14 - _14;
RET.1.fld1 = _2;
RET.1 = Adt31 { fld0: (*_13),fld1: _2 };
_5 = _2 as u128;
_15.3 = _15.0;
_15.1 = (_8, RET.0.2);
_15.2 = -_25;
_24.0 = [RET.0.2];
(*_21) = core::ptr::addr_of!(_33);
_20 = [_15.1.0,_15.1.0,_15.1.0];
_4 = _24.1 & _24.1;
_15.0 = _15.3;
_37.1.1 = &mut _14;
_8 = _19 as i128;
_21 = core::ptr::addr_of!((*_21));
_20 = [_15.1.0,_15.1.0,_15.1.0];
_25 = _15.2 - _15.2;
_34 = RET.0.1 as i16;
RET.1.fld1 = _2;
RET.0.2 = RET.0.1 as usize;
_3 = _14 >> _4;
_33 = RET.1.fld0 & _6;
_34 = -24032_i16;
(*_21) = core::ptr::addr_of!(RET.1.fld0);
Goto(bb11)
}
bb11 = {
_13 = core::ptr::addr_of!((*_13));
Goto(bb12)
}
bb12 = {
_17 = Adt39::Variant0 { fld0: _7,fld1: _12,fld2: _10 };
_25 = _15.2 + _15.2;
_8 = -_15.1.0;
_12 = !RET.0.1;
(*_21) = core::ptr::addr_of!(_33);
_15.0.0 = -_15.3.0;
_37.1.0 = _31;
_37.0.0 = RET.1.fld1;
RET.0.1 = Field::<u32>(Variant(_17, 0), 1) >> RET.0.2;
RET.1 = Adt31 { fld0: (*_13),fld1: _2 };
Goto(bb13)
}
bb13 = {
_8 = !_15.1.0;
place!(Field::<i64>(Variant(_17, 0), 0)) = _7 - _7;
place!(Field::<u32>(Variant(_17, 0), 1)) = _12;
_40 = _32;
_20 = [_15.1.0,_8,_8];
_36 = _5 as i8;
_11 = 44460_u16;
(*_21) = core::ptr::addr_of!((*_13));
(*_13) = _6 >> _27;
_5 = 267548888963757463418803234452207713849_u128;
_19 = !Field::<i64>(Variant(_17, 0), 0);
_1 = true ^ false;
_16 = _25 as i16;
(*_13) = 2012727848_i32 as u64;
_42 = RET.1.fld1;
_37.0.1 = Move(_37.1.1);
_37.1.1 = &mut _14;
_2 = _37.0.0;
RET.1.fld1 = _37.1.0;
_26 = [_3,_3];
_31 = _37.1.0;
place!(Field::<i64>(Variant(_17, 0), 0)) = _7;
Goto(bb14)
}
bb14 = {
SetDiscriminant(_17, 2);
_42 = _37.1.0;
_28 = _10;
_41 = core::ptr::addr_of!(_27);
_38 = _28;
_24.0 = [RET.0.2];
RET.1 = Adt31 { fld0: _33,fld1: _37.0.0 };
match _11 {
0 => bb15,
44460 => bb17,
_ => bb16
}
}
bb15 = {
_11 = 64928_u16 * 64546_u16;
RET.1.fld0 = 9650727910718669003_u64 - 7520730650575961289_u64;
_15.0.0 = _10 as f64;
_15.1 = ((-148513681673751651455207538955168289196_i128), RET.0.2);
RET.0.2 = _4 as usize;
RET.1.fld0 = 970828323090132226_u64;
_8 = _15.1.0 << _10;
_12 = !RET.0.1;
_15.0.0 = _4 as f64;
_15.3.0 = _15.0.0;
RET.0.1 = !_12;
_12 = RET.0.1 | RET.0.1;
_18 = [RET.1.fld1,RET.1.fld1,RET.1.fld1,RET.1.fld1,RET.1.fld1,RET.1.fld1];
Goto(bb3)
}
bb16 = {
_17 = Adt39::Variant0 { fld0: _7,fld1: _12,fld2: _10 };
_25 = _15.2 + _15.2;
_8 = -_15.1.0;
_12 = !RET.0.1;
(*_21) = core::ptr::addr_of!(_33);
_15.0.0 = -_15.3.0;
_37.1.0 = _31;
_37.0.0 = RET.1.fld1;
RET.0.1 = Field::<u32>(Variant(_17, 0), 1) >> RET.0.2;
RET.1 = Adt31 { fld0: (*_13),fld1: _2 };
Goto(bb13)
}
bb17 = {
_43 = _37.0.0;
_15.3.0 = -_15.0.0;
_9 = _15.1.1;
place!(Field::<((bool, usize), u8)>(Variant(_17, 2), 2)).0.0 = _1;
_10 = !_38;
_15.2 = _36 as f32;
_48 = core::ptr::addr_of_mut!(_26);
_32 = _3 - _40;
place!(Field::<((bool, usize), u8)>(Variant(_17, 2), 2)).0 = (_1, RET.0.2);
_24.1 = !_4;
_7 = _8 as i64;
_15.3 = _15.0;
_50.3.0 = _15.3.0;
Call(_49 = core::intrinsics::transmute(_20), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
_37.0.1 = &mut (*_41);
_14 = _32;
_24.1 = !_4;
_42 = RET.1.fld1;
(*_13) = _10 as u64;
RET.1 = Adt31 { fld0: _6,fld1: _2 };
place!(Field::<(usize,)>(Variant(_17, 2), 5)) = (RET.0.2,);
_4 = (*_13) as i8;
RET.1.fld1 = _31;
_31 = _37.0.0;
(*_21) = core::ptr::addr_of!(_6);
_50 = (_15.3, _15.1, _25, _15.3);
_51.1.0 = _1 ^ Field::<((bool, usize), u8)>(Variant(_17, 2), 2).0.0;
_34 = !_16;
_14 = _5 as isize;
_16 = _11 as i16;
_35 = Adt22::Variant0 { fld0: _33,fld1: _7,fld2: _11 };
_51.2.1 = !RET.0.2;
_15.2 = -_25;
_51.2.0 = _34 as i128;
_11 = Field::<u16>(Variant(_35, 0), 2) & Field::<u16>(Variant(_35, 0), 2);
place!(Field::<(usize,)>(Variant(_17, 2), 5)).0 = _25 as usize;
(*_21) = core::ptr::addr_of!((*_13));
(*_48) = [_3,_32];
_51 = (_16, Field::<((bool, usize), u8)>(Variant(_17, 2), 2).0, _15.1);
Goto(bb19)
}
bb19 = {
_38 = _10 + _28;
RET.0.1 = _12;
_2 = _42;
place!(Field::<((bool, usize), u8)>(Variant(_17, 2), 2)).1 = _8 as u8;
_55.1.1 = _24.1 as usize;
RET.0.1 = _12;
place!(Field::<(usize,)>(Variant(_17, 2), 5)).0 = 1504075598_i32 as usize;
_50.2 = _25 * _25;
_38 = !Field::<((bool, usize), u8)>(Variant(_17, 2), 2).1;
(*_21) = core::ptr::addr_of!(_33);
RET.1.fld1 = _31;
_24.1 = -_36;
_50.1.1 = _19 as usize;
_55.0.0 = Field::<((bool, usize), u8)>(Variant(_17, 2), 2).1 as f64;
_50.2 = _16 as f32;
RET.1.fld1 = _37.1.0;
_14 = _3 | _32;
_15.3.0 = -_50.3.0;
_15.3 = (_55.0.0,);
_18 = [_37.0.0,RET.1.fld1,_2,_37.1.0,_2,_31];
_56 = _14 | _14;
_47 = _14 ^ _56;
match Field::<u16>(Variant(_35, 0), 2) {
0 => bb11,
1 => bb6,
2 => bb9,
3 => bb20,
4 => bb21,
5 => bb22,
6 => bb23,
44460 => bb25,
_ => bb24
}
}
bb20 = {
_37.0.1 = &mut (*_41);
_14 = _32;
_24.1 = !_4;
_42 = RET.1.fld1;
(*_13) = _10 as u64;
RET.1 = Adt31 { fld0: _6,fld1: _2 };
place!(Field::<(usize,)>(Variant(_17, 2), 5)) = (RET.0.2,);
_4 = (*_13) as i8;
RET.1.fld1 = _31;
_31 = _37.0.0;
(*_21) = core::ptr::addr_of!(_6);
_50 = (_15.3, _15.1, _25, _15.3);
_51.1.0 = _1 ^ Field::<((bool, usize), u8)>(Variant(_17, 2), 2).0.0;
_34 = !_16;
_14 = _5 as isize;
_16 = _11 as i16;
_35 = Adt22::Variant0 { fld0: _33,fld1: _7,fld2: _11 };
_51.2.1 = !RET.0.2;
_15.2 = -_25;
_51.2.0 = _34 as i128;
_11 = Field::<u16>(Variant(_35, 0), 2) & Field::<u16>(Variant(_35, 0), 2);
place!(Field::<(usize,)>(Variant(_17, 2), 5)).0 = _25 as usize;
(*_21) = core::ptr::addr_of!((*_13));
(*_48) = [_3,_32];
_51 = (_16, Field::<((bool, usize), u8)>(Variant(_17, 2), 2).0, _15.1);
Goto(bb19)
}
bb21 = {
_43 = _37.0.0;
_15.3.0 = -_15.0.0;
_9 = _15.1.1;
place!(Field::<((bool, usize), u8)>(Variant(_17, 2), 2)).0.0 = _1;
_10 = !_38;
_15.2 = _36 as f32;
_48 = core::ptr::addr_of_mut!(_26);
_32 = _3 - _40;
place!(Field::<((bool, usize), u8)>(Variant(_17, 2), 2)).0 = (_1, RET.0.2);
_24.1 = !_4;
_7 = _8 as i64;
_15.3 = _15.0;
_50.3.0 = _15.3.0;
Call(_49 = core::intrinsics::transmute(_20), ReturnTo(bb18), UnwindUnreachable())
}
bb22 = {
RET.1.fld1 = '\u{da52e}';
RET.1.fld1 = '\u{3ecc}';
Goto(bb4)
}
bb23 = {
_8 = !_15.1.0;
place!(Field::<i64>(Variant(_17, 0), 0)) = _7 - _7;
place!(Field::<u32>(Variant(_17, 0), 1)) = _12;
_40 = _32;
_20 = [_15.1.0,_8,_8];
_36 = _5 as i8;
_11 = 44460_u16;
(*_21) = core::ptr::addr_of!((*_13));
(*_13) = _6 >> _27;
_5 = 267548888963757463418803234452207713849_u128;
_19 = !Field::<i64>(Variant(_17, 0), 0);
_1 = true ^ false;
_16 = _25 as i16;
(*_13) = 2012727848_i32 as u64;
_42 = RET.1.fld1;
_37.0.1 = Move(_37.1.1);
_37.1.1 = &mut _14;
_2 = _37.0.0;
RET.1.fld1 = _37.1.0;
_26 = [_3,_3];
_31 = _37.1.0;
place!(Field::<i64>(Variant(_17, 0), 0)) = _7;
Goto(bb14)
}
bb24 = {
_17 = Adt39::Variant0 { fld0: _7,fld1: _12,fld2: _10 };
_25 = _15.2 + _15.2;
_8 = -_15.1.0;
_12 = !RET.0.1;
(*_21) = core::ptr::addr_of!(_33);
_15.0.0 = -_15.3.0;
_37.1.0 = _31;
_37.0.0 = RET.1.fld1;
RET.0.1 = Field::<u32>(Variant(_17, 0), 1) >> RET.0.2;
RET.1 = Adt31 { fld0: (*_13),fld1: _2 };
Goto(bb13)
}
bb25 = {
_35 = Adt22::Variant1 { fld0: RET.0.1,fld1: (*_48),fld2: _15.3.0,fld3: _5,fld4: _34,fld5: _50.1.0 };
match _5 {
0 => bb22,
267548888963757463418803234452207713849 => bb26,
_ => bb15
}
}
bb26 = {
place!(Field::<usize>(Variant(_17, 2), 0)) = _51.1.1;
_37.0 = (_2, Move(_37.1.1));
place!(Field::<*const u64>(Variant(_17, 2), 4)) = Move((*_21));
_7 = _6 as i64;
_51.2 = (_15.1.0, Field::<((bool, usize), u8)>(Variant(_17, 2), 2).0.1);
place!(Field::<i64>(Variant(_17, 2), 6)) = _19 ^ _19;
place!(Field::<i8>(Variant(_17, 2), 3)) = _4;
_24.0 = [_55.1.1];
_50.3.0 = _50.0.0;
_56 = _47 | _32;
match _5 {
0 => bb1,
1 => bb13,
2 => bb23,
3 => bb24,
267548888963757463418803234452207713849 => bb28,
_ => bb27
}
}
bb27 = {
_11 = 64928_u16 * 64546_u16;
RET.1.fld0 = 9650727910718669003_u64 - 7520730650575961289_u64;
_15.0.0 = _10 as f64;
_15.1 = ((-148513681673751651455207538955168289196_i128), RET.0.2);
RET.0.2 = _4 as usize;
RET.1.fld0 = 970828323090132226_u64;
_8 = _15.1.0 << _10;
_12 = !RET.0.1;
_15.0.0 = _4 as f64;
_15.3.0 = _15.0.0;
RET.0.1 = !_12;
_12 = RET.0.1 | RET.0.1;
_18 = [RET.1.fld1,RET.1.fld1,RET.1.fld1,RET.1.fld1,RET.1.fld1,RET.1.fld1];
Goto(bb3)
}
bb28 = {
place!(Field::<i64>(Variant(_17, 2), 6)) = _19 - _19;
_22 = &_24.0;
(*_21) = Move(Field::<*const u64>(Variant(_17, 2), 4));
_18 = [_42,_31,_2,_31,_37.1.0,_2];
_24.1 = _4 + _4;
_29 = core::ptr::addr_of_mut!(place!(Field::<((bool, usize), u8)>(Variant(_17, 2), 2)).0);
RET.0.2 = Field::<((bool, usize), u8)>(Variant(_17, 2), 2).0.1;
_10 = !_28;
RET.1 = Adt31 { fld0: _6,fld1: _37.1.0 };
_28 = _1 as u8;
match _5 {
0 => bb25,
267548888963757463418803234452207713849 => bb29,
_ => bb22
}
}
bb29 = {
_52 = _9;
_43 = _42;
place!(Field::<i8>(Variant(_17, 2), 3)) = !_36;
_55.3.0 = RET.1.fld0 as f64;
Goto(bb30)
}
bb30 = {
(*_21) = core::ptr::addr_of!(_33);
RET.1 = Adt31 { fld0: _33,fld1: _37.0.0 };
_37.1.1 = &mut _27;
_60 = _16 as f64;
_15.0.0 = Field::<f64>(Variant(_35, 1), 2);
_15.1.0 = _8 + _51.2.0;
_58 = &RET.1.fld1;
_36 = Field::<i8>(Variant(_17, 2), 3);
_55.1 = (_15.1.0, _9);
_53.0 = _51.1.1 + _51.2.1;
match Field::<u128>(Variant(_35, 1), 3) {
0 => bb19,
1 => bb6,
2 => bb18,
267548888963757463418803234452207713849 => bb32,
_ => bb31
}
}
bb31 = {
SetDiscriminant(_17, 2);
_42 = _37.1.0;
_28 = _10;
_41 = core::ptr::addr_of!(_27);
_38 = _28;
_24.0 = [RET.0.2];
RET.1 = Adt31 { fld0: _33,fld1: _37.0.0 };
match _11 {
0 => bb15,
44460 => bb17,
_ => bb16
}
}
bb32 = {
_15.3 = _55.0;
_18 = [_42,RET.1.fld1,_37.0.0,RET.1.fld1,_42,_43];
(*_29).0 = _2 != _42;
_11 = 11912_u16 * 5357_u16;
_55.1 = (_8, _52);
_51.2.0 = -_50.1.0;
_50 = (_15.3, _51.2, _25, _55.0);
_14 = !_56;
SetDiscriminant(_35, 2);
place!(Field::<((bool, usize), u8)>(Variant(_17, 2), 2)).1 = _38;
_51.0 = !_16;
place!(Field::<((bool, usize), u8)>(Variant(_17, 2), 2)).0.0 = _1 & _1;
_51.2 = (_8, Field::<(usize,)>(Variant(_17, 2), 5).0);
_6 = (*_13) & (*_13);
RET.0.0 = core::ptr::addr_of!(place!(Field::<i32>(Variant(_35, 2), 5)));
_25 = _15.2 + _50.2;
place!(Field::<*const u64>(Variant(_17, 2), 4)) = Move(_13);
Goto(bb33)
}
bb33 = {
Call(_65 = dump_var(0_usize, 10_usize, Move(_10), 38_usize, Move(_38), 12_usize, Move(_12), 56_usize, Move(_56)), ReturnTo(bb34), UnwindUnreachable())
}
bb34 = {
Call(_65 = dump_var(0_usize, 8_usize, Move(_8), 32_usize, Move(_32), 43_usize, Move(_43), 4_usize, Move(_4)), ReturnTo(bb35), UnwindUnreachable())
}
bb35 = {
Call(_65 = dump_var(0_usize, 18_usize, Move(_18), 2_usize, Move(_2), 47_usize, Move(_47), 9_usize, Move(_9)), ReturnTo(bb36), UnwindUnreachable())
}
bb36 = {
Call(_65 = dump_var(0_usize, 33_usize, Move(_33), 27_usize, Move(_27), 1_usize, Move(_1), 28_usize, Move(_28)), ReturnTo(bb37), UnwindUnreachable())
}
bb37 = {
Call(_65 = dump_var(0_usize, 34_usize, Move(_34), 66_usize, _66, 66_usize, _66, 66_usize, _66), ReturnTo(bb38), UnwindUnreachable())
}
bb38 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn1(mut _1: u32,mut _2: i8,mut _3: usize,mut _4: Adt31,mut _5: isize) -> usize {
mir! {
type RET = usize;
let _6: [i128; 3];
let _7: u32;
let _8: i64;
let _9: &'static [usize; 1];
let _10: *const *mut u8;
let _11: char;
let _12: u32;
let _13: *const *const u64;
let _14: (i16, (bool, usize), (i128, usize));
let _15: i32;
let _16: f64;
let _17: Adt39;
let _18: char;
let _19: ();
let _20: ();
{
_1 = 3667171803_u32;
_1 = 412390202_u32 * 1900484084_u32;
_3 = 232_u8 as usize;
_1 = 2928870727_u32 & 3441588972_u32;
RET = _3;
_1 = RET as u32;
_2 = 68_i8;
_2 = 55_i8 | (-57_i8);
RET = 125_u8 as usize;
_5 = 162_u8 as isize;
_4.fld0 = _1 as u64;
_6 = [378409966670505711825997770359672133_i128,(-66022180399473300747591430293644766026_i128),(-131384085470526576954078628083243371207_i128)];
_4.fld1 = '\u{7d038}';
_1 = 1196532574_u32 ^ 1742549024_u32;
Goto(bb1)
}
bb1 = {
_4 = Adt31 { fld0: 4583498326450077134_u64,fld1: '\u{16bf1}' };
_6 = [(-15192761835963006737850266920972260043_i128),63857070373978232849963991612641828486_i128,(-81724607544449933873401344930382960218_i128)];
_2 = 8189044759020603325_i64 as i8;
_2 = (-22443_i16) as i8;
_2 = (-34_i8) >> _4.fld0;
RET = (-1387503649_i32) as usize;
_2 = (-77_i8);
RET = !_3;
_4.fld1 = '\u{e3a00}';
_4.fld0 = 8752360607681752358_u64 | 5384514607184893787_u64;
Call(_3 = fn2(_6, _2, _2, _4.fld0, RET, _1, _4, _1, _4.fld0, _4), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
RET = _3 - _3;
_3 = !RET;
_2 = (-97_i8) * (-7_i8);
_4 = Adt31 { fld0: 1458643687058150850_u64,fld1: '\u{dcacd}' };
_1 = 1604730034_u32 ^ 2460559024_u32;
_8 = 25596_u16 as i64;
RET = _3 | _3;
_4.fld0 = 18400325393191392830_u64;
_7 = _4.fld1 as u32;
Goto(bb3)
}
bb3 = {
_11 = _4.fld1;
_1 = 27955_i16 as u32;
_5 = (-102_isize) << _2;
RET = _3;
_4 = Adt31 { fld0: 14012597387606823029_u64,fld1: _11 };
_5 = 9223372036854775807_isize;
_2 = -(-34_i8);
Goto(bb4)
}
bb4 = {
_8 = 5971481656006383904_i64;
_5 = !9223372036854775807_isize;
_4.fld1 = _11;
_4.fld0 = 4870748064043112564_u64 + 7217337132219248442_u64;
_12 = (-17725_i16) as u32;
_8 = (-2823096606762344251_i64);
_3 = RET;
RET = (-388319871_i32) as usize;
RET = _3 + _3;
_12 = _7;
_1 = !_7;
_3 = _4.fld1 as usize;
_2 = -43_i8;
_2 = !62_i8;
match _8 {
340282366920938463460551510825005867205 => bb6,
_ => bb5
}
}
bb5 = {
RET = _3 - _3;
_3 = !RET;
_2 = (-97_i8) * (-7_i8);
_4 = Adt31 { fld0: 1458643687058150850_u64,fld1: '\u{dcacd}' };
_1 = 1604730034_u32 ^ 2460559024_u32;
_8 = 25596_u16 as i64;
RET = _3 | _3;
_4.fld0 = 18400325393191392830_u64;
_7 = _4.fld1 as u32;
Goto(bb3)
}
bb6 = {
_7 = !_1;
_4.fld0 = 55352072636801736_u64 - 17535030045230947814_u64;
RET = _3;
_4.fld1 = _11;
_7 = _12;
match _8 {
0 => bb4,
1 => bb2,
2 => bb5,
3 => bb7,
340282366920938463460551510825005867205 => bb9,
_ => bb8
}
}
bb7 = {
_11 = _4.fld1;
_1 = 27955_i16 as u32;
_5 = (-102_isize) << _2;
RET = _3;
_4 = Adt31 { fld0: 14012597387606823029_u64,fld1: _11 };
_5 = 9223372036854775807_isize;
_2 = -(-34_i8);
Goto(bb4)
}
bb8 = {
_4 = Adt31 { fld0: 4583498326450077134_u64,fld1: '\u{16bf1}' };
_6 = [(-15192761835963006737850266920972260043_i128),63857070373978232849963991612641828486_i128,(-81724607544449933873401344930382960218_i128)];
_2 = 8189044759020603325_i64 as i8;
_2 = (-22443_i16) as i8;
_2 = (-34_i8) >> _4.fld0;
RET = (-1387503649_i32) as usize;
_2 = (-77_i8);
RET = !_3;
_4.fld1 = '\u{e3a00}';
_4.fld0 = 8752360607681752358_u64 | 5384514607184893787_u64;
Call(_3 = fn2(_6, _2, _2, _4.fld0, RET, _1, _4, _1, _4.fld0, _4), ReturnTo(bb2), UnwindUnreachable())
}
bb9 = {
_1 = _2 as u32;
_11 = _4.fld1;
_2 = _8 as i8;
_4.fld1 = _11;
_7 = _12;
_1 = !_7;
_2 = 11_i8;
_14.1.0 = RET > RET;
_14.1 = (true, _3);
_12 = _1;
RET = _14.1.1 * _14.1.1;
_1 = _4.fld0 as u32;
_12 = _1;
RET = _4.fld1 as usize;
Goto(bb10)
}
bb10 = {
_4.fld0 = !5229108565581764797_u64;
_2 = (-101_i8);
_12 = _7 << RET;
_4.fld1 = _11;
_2 = 91_i8 * (-127_i8);
_7 = _12;
_14.2 = ((-7706459920599273077517440644872705322_i128), _3);
_14.1 = (true, _3);
_2 = 36_i8;
_12 = _1 << _14.1.1;
RET = _3;
_2 = _4.fld0 as i8;
_4.fld0 = 15549528796624105745_u64;
_4.fld1 = _11;
_6 = [_14.2.0,_14.2.0,_14.2.0];
match _4.fld0 {
0 => bb5,
1 => bb2,
2 => bb3,
3 => bb9,
4 => bb11,
5 => bb12,
15549528796624105745 => bb14,
_ => bb13
}
}
bb11 = {
_1 = _2 as u32;
_11 = _4.fld1;
_2 = _8 as i8;
_4.fld1 = _11;
_7 = _12;
_1 = !_7;
_2 = 11_i8;
_14.1.0 = RET > RET;
_14.1 = (true, _3);
_12 = _1;
RET = _14.1.1 * _14.1.1;
_1 = _4.fld0 as u32;
_12 = _1;
RET = _4.fld1 as usize;
Goto(bb10)
}
bb12 = {
_4 = Adt31 { fld0: 4583498326450077134_u64,fld1: '\u{16bf1}' };
_6 = [(-15192761835963006737850266920972260043_i128),63857070373978232849963991612641828486_i128,(-81724607544449933873401344930382960218_i128)];
_2 = 8189044759020603325_i64 as i8;
_2 = (-22443_i16) as i8;
_2 = (-34_i8) >> _4.fld0;
RET = (-1387503649_i32) as usize;
_2 = (-77_i8);
RET = !_3;
_4.fld1 = '\u{e3a00}';
_4.fld0 = 8752360607681752358_u64 | 5384514607184893787_u64;
Call(_3 = fn2(_6, _2, _2, _4.fld0, RET, _1, _4, _1, _4.fld0, _4), ReturnTo(bb2), UnwindUnreachable())
}
bb13 = {
RET = _3 - _3;
_3 = !RET;
_2 = (-97_i8) * (-7_i8);
_4 = Adt31 { fld0: 1458643687058150850_u64,fld1: '\u{dcacd}' };
_1 = 1604730034_u32 ^ 2460559024_u32;
_8 = 25596_u16 as i64;
RET = _3 | _3;
_4.fld0 = 18400325393191392830_u64;
_7 = _4.fld1 as u32;
Goto(bb3)
}
bb14 = {
_11 = _4.fld1;
_8 = _14.1.1 as i64;
RET = _14.1.1 - _3;
_4.fld0 = 8173401289163078055_u64 + 15692073941158435804_u64;
_4 = Adt31 { fld0: 4483596470835857276_u64,fld1: _11 };
Goto(bb15)
}
bb15 = {
Call(_19 = dump_var(1_usize, 7_usize, Move(_7), 3_usize, Move(_3), 5_usize, Move(_5), 1_usize, Move(_1)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn2(mut _1: [i128; 3],mut _2: i8,mut _3: i8,mut _4: u64,mut _5: usize,mut _6: u32,mut _7: Adt31,mut _8: u32,mut _9: u64,mut _10: Adt31) -> usize {
mir! {
type RET = usize;
let _11: f64;
let _12: &'static mut Adt22;
let _13: [char; 6];
let _14: i32;
let _15: isize;
let _16: ((f64,), (i128, usize), f32, (f64,));
let _17: &'static mut &'static *const u64;
let _18: *const isize;
let _19: &'static mut &'static *const u64;
let _20: f32;
let _21: *mut (bool, usize);
let _22: *const isize;
let _23: ();
let _24: ();
{
_10.fld1 = _7.fld1;
Goto(bb1)
}
bb1 = {
_7 = _10;
_10.fld0 = false as u64;
_6 = !_8;
_7.fld0 = !_9;
_6 = _5 as u32;
_7.fld0 = !_10.fld0;
_9 = !_10.fld0;
_8 = _10.fld1 as u32;
_10.fld1 = _7.fld1;
_10 = _7;
_13 = [_10.fld1,_7.fld1,_10.fld1,_7.fld1,_10.fld1,_7.fld1];
RET = 800564847_i32 as usize;
match _3 {
340282366920938463463374607431768211379 => bb3,
_ => bb2
}
}
bb2 = {
Return()
}
bb3 = {
_16.0.0 = _5 as f64;
_16.3.0 = -_16.0.0;
_16.1.0 = 92096348943735417384339584379380709920_i128;
_10.fld1 = _7.fld1;
_2 = !_3;
_16.0.0 = _16.3.0 * _16.3.0;
_10.fld1 = _7.fld1;
RET = 30372_u16 as usize;
_1 = [_16.1.0,_16.1.0,_16.1.0];
_14 = _10.fld1 as i32;
_8 = _6;
Call(_2 = fn3(_3, _4, _3, _1, _16.3.0), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_7 = Adt31 { fld0: _10.fld0,fld1: _10.fld1 };
match _16.1.0 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb5,
4 => bb6,
5 => bb7,
92096348943735417384339584379380709920 => bb9,
_ => bb8
}
}
bb5 = {
_16.0.0 = _5 as f64;
_16.3.0 = -_16.0.0;
_16.1.0 = 92096348943735417384339584379380709920_i128;
_10.fld1 = _7.fld1;
_2 = !_3;
_16.0.0 = _16.3.0 * _16.3.0;
_10.fld1 = _7.fld1;
RET = 30372_u16 as usize;
_1 = [_16.1.0,_16.1.0,_16.1.0];
_14 = _10.fld1 as i32;
_8 = _6;
Call(_2 = fn3(_3, _4, _3, _1, _16.3.0), ReturnTo(bb4), UnwindUnreachable())
}
bb6 = {
Return()
}
bb7 = {
_7 = _10;
_10.fld0 = false as u64;
_6 = !_8;
_7.fld0 = !_9;
_6 = _5 as u32;
_7.fld0 = !_10.fld0;
_9 = !_10.fld0;
_8 = _10.fld1 as u32;
_10.fld1 = _7.fld1;
_10 = _7;
_13 = [_10.fld1,_7.fld1,_10.fld1,_7.fld1,_10.fld1,_7.fld1];
RET = 800564847_i32 as usize;
match _3 {
340282366920938463463374607431768211379 => bb3,
_ => bb2
}
}
bb8 = {
Return()
}
bb9 = {
_16.2 = 21010325600144462190063289134550058833_u128 as f32;
_1 = [_16.1.0,_16.1.0,_16.1.0];
_15 = (-9223372036854775808_isize);
_1 = [_16.1.0,_16.1.0,_16.1.0];
_16.3 = (_16.0.0,);
_3 = -_2;
_7.fld0 = _2 as u64;
_16.0 = (_16.3.0,);
_4 = _14 as u64;
RET = _5;
_16.2 = _3 as f32;
_7.fld1 = _10.fld1;
_7 = Adt31 { fld0: _4,fld1: _10.fld1 };
_4 = _10.fld0 << _14;
_18 = core::ptr::addr_of!(_15);
_16.2 = 191_u8 as f32;
_10.fld1 = _7.fld1;
_1 = [_16.1.0,_16.1.0,_16.1.0];
_18 = core::ptr::addr_of!((*_18));
_3 = _2;
_16.1.1 = _5;
_14 = 53583_u16 as i32;
_9 = _7.fld0 - _10.fld0;
_16.2 = _3 as f32;
_15 = 130_u8 as isize;
match _16.1.0 {
0 => bb5,
1 => bb10,
2 => bb11,
3 => bb12,
4 => bb13,
5 => bb14,
92096348943735417384339584379380709920 => bb16,
_ => bb15
}
}
bb10 = {
Return()
}
bb11 = {
Return()
}
bb12 = {
Return()
}
bb13 = {
_7 = _10;
_10.fld0 = false as u64;
_6 = !_8;
_7.fld0 = !_9;
_6 = _5 as u32;
_7.fld0 = !_10.fld0;
_9 = !_10.fld0;
_8 = _10.fld1 as u32;
_10.fld1 = _7.fld1;
_10 = _7;
_13 = [_10.fld1,_7.fld1,_10.fld1,_7.fld1,_10.fld1,_7.fld1];
RET = 800564847_i32 as usize;
match _3 {
340282366920938463463374607431768211379 => bb3,
_ => bb2
}
}
bb14 = {
_7 = Adt31 { fld0: _10.fld0,fld1: _10.fld1 };
match _16.1.0 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb5,
4 => bb6,
5 => bb7,
92096348943735417384339584379380709920 => bb9,
_ => bb8
}
}
bb15 = {
_16.0.0 = _5 as f64;
_16.3.0 = -_16.0.0;
_16.1.0 = 92096348943735417384339584379380709920_i128;
_10.fld1 = _7.fld1;
_2 = !_3;
_16.0.0 = _16.3.0 * _16.3.0;
_10.fld1 = _7.fld1;
RET = 30372_u16 as usize;
_1 = [_16.1.0,_16.1.0,_16.1.0];
_14 = _10.fld1 as i32;
_8 = _6;
Call(_2 = fn3(_3, _4, _3, _1, _16.3.0), ReturnTo(bb4), UnwindUnreachable())
}
bb16 = {
RET = _5;
_16.0 = (_16.3.0,);
_3 = _2 ^ _2;
_16.1 = (20605843067266198377573265761022593032_i128, RET);
_7.fld0 = _16.2 as u64;
_16.1.0 = 119406223470842840352935972212441400755_i128;
_16.1 = ((-74392839461181430500688168865978717696_i128), _5);
Goto(bb17)
}
bb17 = {
Call(_23 = dump_var(2_usize, 5_usize, Move(_5), 1_usize, Move(_1), 2_usize, Move(_2), 3_usize, Move(_3)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_23 = dump_var(2_usize, 9_usize, Move(_9), 24_usize, _24, 24_usize, _24, 24_usize, _24), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn3(mut _1: i8,mut _2: u64,mut _3: i8,mut _4: [i128; 3],mut _5: f64) -> i8 {
mir! {
type RET = i8;
let _6: *mut isize;
let _7: ([usize; 1], i8, &'static mut i32, &'static mut &'static *const u64);
let _8: &'static *const u64;
let _9: isize;
let _10: bool;
let _11: u64;
let _12: u8;
let _13: (*const i32, u32, usize);
let _14: &'static mut &'static *const u64;
let _15: &'static mut (bool, usize);
let _16: [usize; 1];
let _17: i32;
let _18: char;
let _19: isize;
let _20: char;
let _21: isize;
let _22: *mut [isize; 2];
let _23: i16;
let _24: char;
let _25: [isize; 2];
let _26: *const *const u64;
let _27: Adt22;
let _28: (Adt31, i64, Adt39, *const u64);
let _29: u128;
let _30: ();
let _31: ();
{
_1 = _3 + _3;
RET = -_3;
RET = _5 as i8;
_3 = _1 * _1;
_2 = 18026424206038223804_u64;
_5 = 4420780380369025781_i64 as f64;
_2 = 15489447834671303738_u64 - 16979090637617981683_u64;
RET = _1 << _3;
_7.1 = RET;
_4 = [(-135480856640904614394038616198278821713_i128),(-118212973631637529719213921814284270159_i128),(-13840033724341006627872083726254963123_i128)];
_2 = '\u{dedc1}' as u64;
_7.0 = [0_usize];
_7.1 = _1 - RET;
_2 = !2059988595050866603_u64;
_2 = 9737322570615953510_u64;
_1 = !_3;
_7.0 = [2102828508851265828_usize];
_7.0 = [7_usize];
Goto(bb1)
}
bb1 = {
_1 = -_7.1;
_9 = -9223372036854775807_isize;
_6 = core::ptr::addr_of_mut!(_9);
_4 = [(-112758690283150126627967059201652648807_i128),48384433441527553435084769961152492869_i128,(-18993227264473237927372244238992551392_i128)];
_7.0 = [3_usize];
_2 = 8594538769780346663_u64;
_13.2 = !7_usize;
(*_6) = true as isize;
RET = _2 as i8;
_1 = (-1267_i16) as i8;
_5 = _3 as f64;
Call(RET = core::intrinsics::bswap(_7.1), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_13.1 = 34887_u16 as u32;
_10 = _5 == _5;
_12 = 333078370828321398707844982312746132010_u128 as u8;
_11 = 10280_i16 as u64;
_13.2 = 5343097694653395964_usize << _11;
_2 = !_11;
_9 = 150812181346923988066216741804109813292_u128 as isize;
_10 = false | true;
RET = _5 as i8;
_3 = RET;
_6 = core::ptr::addr_of_mut!((*_6));
_2 = _11 & _11;
_3 = !RET;
_2 = _11 - _11;
_16 = [_13.2];
_1 = _7.1;
_3 = _7.1 ^ _7.1;
Call(_3 = core::intrinsics::bswap(_1), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
(*_6) = (-112_isize) ^ 9223372036854775807_isize;
RET = 244455872747980127247862194624276009858_u128 as i8;
_4 = [151245505920241382356239281458495832856_i128,(-102526019437410090346513539221142326313_i128),50076278855109127991010984883231628648_i128];
_3 = -_7.1;
_12 = !217_u8;
RET = (-7929285190946389040_i64) as i8;
_17 = (-2109162252_i32) + 317581534_i32;
_12 = 158_u8 * 236_u8;
_4 = [40138128250841428852800365957674452622_i128,147904132764413831869277430626275902306_i128,(-90731367460655421883549456777780566595_i128)];
_4 = [(-73925818106385362010114353892564866074_i128),13468408673081862386705935924924082338_i128,146362473405313593813356104647010939205_i128];
(*_6) = 118_isize << _17;
_13.0 = core::ptr::addr_of!(_17);
_7.1 = !_1;
_13.2 = !1_usize;
_3 = -_1;
_4 = [(-29256223812164705509587315387101668486_i128),(-145296544319317737183906238028428646920_i128),11241757933912478488160638338010742238_i128];
_13.2 = 5_usize;
(*_6) = (-111_isize);
_1 = 38519209214563291033432285142234663493_i128 as i8;
_17 = (-1763111670_i32) << _11;
_17 = (-1747029253_i32) << _2;
_11 = 67333856413408151941759438454507228568_i128 as u64;
_10 = _17 < _17;
RET = _7.1;
Call(_2 = fn4(_7.1, Move(_6), (*_6), (*_6), _13.2, (*_6), _4, RET, _4, Move(_13)), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_6 = core::ptr::addr_of_mut!(_9);
Goto(bb5)
}
bb5 = {
match (*_6) {
0 => bb3,
340282366920938463463374607431768211345 => bb7,
_ => bb6
}
}
bb6 = {
(*_6) = (-112_isize) ^ 9223372036854775807_isize;
RET = 244455872747980127247862194624276009858_u128 as i8;
_4 = [151245505920241382356239281458495832856_i128,(-102526019437410090346513539221142326313_i128),50076278855109127991010984883231628648_i128];
_3 = -_7.1;
_12 = !217_u8;
RET = (-7929285190946389040_i64) as i8;
_17 = (-2109162252_i32) + 317581534_i32;
_12 = 158_u8 * 236_u8;
_4 = [40138128250841428852800365957674452622_i128,147904132764413831869277430626275902306_i128,(-90731367460655421883549456777780566595_i128)];
_4 = [(-73925818106385362010114353892564866074_i128),13468408673081862386705935924924082338_i128,146362473405313593813356104647010939205_i128];
(*_6) = 118_isize << _17;
_13.0 = core::ptr::addr_of!(_17);
_7.1 = !_1;
_13.2 = !1_usize;
_3 = -_1;
_4 = [(-29256223812164705509587315387101668486_i128),(-145296544319317737183906238028428646920_i128),11241757933912478488160638338010742238_i128];
_13.2 = 5_usize;
(*_6) = (-111_isize);
_1 = 38519209214563291033432285142234663493_i128 as i8;
_17 = (-1763111670_i32) << _11;
_17 = (-1747029253_i32) << _2;
_11 = 67333856413408151941759438454507228568_i128 as u64;
_10 = _17 < _17;
RET = _7.1;
Call(_2 = fn4(_7.1, Move(_6), (*_6), (*_6), _13.2, (*_6), _4, RET, _4, Move(_13)), ReturnTo(bb4), UnwindUnreachable())
}
bb7 = {
_7.2 = &mut _17;
_20 = '\u{3b4f2}';
_10 = true;
_1 = _7.1;
match (*_6) {
0 => bb4,
1 => bb8,
2 => bb9,
3 => bb10,
4 => bb11,
5 => bb12,
340282366920938463463374607431768211345 => bb14,
_ => bb13
}
}
bb8 = {
(*_6) = (-112_isize) ^ 9223372036854775807_isize;
RET = 244455872747980127247862194624276009858_u128 as i8;
_4 = [151245505920241382356239281458495832856_i128,(-102526019437410090346513539221142326313_i128),50076278855109127991010984883231628648_i128];
_3 = -_7.1;
_12 = !217_u8;
RET = (-7929285190946389040_i64) as i8;
_17 = (-2109162252_i32) + 317581534_i32;
_12 = 158_u8 * 236_u8;
_4 = [40138128250841428852800365957674452622_i128,147904132764413831869277430626275902306_i128,(-90731367460655421883549456777780566595_i128)];
_4 = [(-73925818106385362010114353892564866074_i128),13468408673081862386705935924924082338_i128,146362473405313593813356104647010939205_i128];
(*_6) = 118_isize << _17;
_13.0 = core::ptr::addr_of!(_17);
_7.1 = !_1;
_13.2 = !1_usize;
_3 = -_1;
_4 = [(-29256223812164705509587315387101668486_i128),(-145296544319317737183906238028428646920_i128),11241757933912478488160638338010742238_i128];
_13.2 = 5_usize;
(*_6) = (-111_isize);
_1 = 38519209214563291033432285142234663493_i128 as i8;
_17 = (-1763111670_i32) << _11;
_17 = (-1747029253_i32) << _2;
_11 = 67333856413408151941759438454507228568_i128 as u64;
_10 = _17 < _17;
RET = _7.1;
Call(_2 = fn4(_7.1, Move(_6), (*_6), (*_6), _13.2, (*_6), _4, RET, _4, Move(_13)), ReturnTo(bb4), UnwindUnreachable())
}
bb9 = {
match (*_6) {
0 => bb3,
340282366920938463463374607431768211345 => bb7,
_ => bb6
}
}
bb10 = {
_6 = core::ptr::addr_of_mut!(_9);
Goto(bb5)
}
bb11 = {
(*_6) = (-112_isize) ^ 9223372036854775807_isize;
RET = 244455872747980127247862194624276009858_u128 as i8;
_4 = [151245505920241382356239281458495832856_i128,(-102526019437410090346513539221142326313_i128),50076278855109127991010984883231628648_i128];
_3 = -_7.1;
_12 = !217_u8;
RET = (-7929285190946389040_i64) as i8;
_17 = (-2109162252_i32) + 317581534_i32;
_12 = 158_u8 * 236_u8;
_4 = [40138128250841428852800365957674452622_i128,147904132764413831869277430626275902306_i128,(-90731367460655421883549456777780566595_i128)];
_4 = [(-73925818106385362010114353892564866074_i128),13468408673081862386705935924924082338_i128,146362473405313593813356104647010939205_i128];
(*_6) = 118_isize << _17;
_13.0 = core::ptr::addr_of!(_17);
_7.1 = !_1;
_13.2 = !1_usize;
_3 = -_1;
_4 = [(-29256223812164705509587315387101668486_i128),(-145296544319317737183906238028428646920_i128),11241757933912478488160638338010742238_i128];
_13.2 = 5_usize;
(*_6) = (-111_isize);
_1 = 38519209214563291033432285142234663493_i128 as i8;
_17 = (-1763111670_i32) << _11;
_17 = (-1747029253_i32) << _2;
_11 = 67333856413408151941759438454507228568_i128 as u64;
_10 = _17 < _17;
RET = _7.1;
Call(_2 = fn4(_7.1, Move(_6), (*_6), (*_6), _13.2, (*_6), _4, RET, _4, Move(_13)), ReturnTo(bb4), UnwindUnreachable())
}
bb12 = {
_13.1 = 34887_u16 as u32;
_10 = _5 == _5;
_12 = 333078370828321398707844982312746132010_u128 as u8;
_11 = 10280_i16 as u64;
_13.2 = 5343097694653395964_usize << _11;
_2 = !_11;
_9 = 150812181346923988066216741804109813292_u128 as isize;
_10 = false | true;
RET = _5 as i8;
_3 = RET;
_6 = core::ptr::addr_of_mut!((*_6));
_2 = _11 & _11;
_3 = !RET;
_2 = _11 - _11;
_16 = [_13.2];
_1 = _7.1;
_3 = _7.1 ^ _7.1;
Call(_3 = core::intrinsics::bswap(_1), ReturnTo(bb3), UnwindUnreachable())
}
bb13 = {
_1 = -_7.1;
_9 = -9223372036854775807_isize;
_6 = core::ptr::addr_of_mut!(_9);
_4 = [(-112758690283150126627967059201652648807_i128),48384433441527553435084769961152492869_i128,(-18993227264473237927372244238992551392_i128)];
_7.0 = [3_usize];
_2 = 8594538769780346663_u64;
_13.2 = !7_usize;
(*_6) = true as isize;
RET = _2 as i8;
_1 = (-1267_i16) as i8;
_5 = _3 as f64;
Call(RET = core::intrinsics::bswap(_7.1), ReturnTo(bb2), UnwindUnreachable())
}
bb14 = {
_19 = (*_6) + _9;
_7.1 = !_1;
_21 = _12 as isize;
_1 = _7.1;
_6 = core::ptr::addr_of_mut!(_21);
_10 = !false;
_13.0 = core::ptr::addr_of!(_17);
_13.2 = 15017313690309665272_usize;
_5 = _17 as f64;
_13.2 = 12301077444306580758_usize;
_5 = (-2770782388138098597_i64) as f64;
_7.2 = &mut _17;
_7.2 = &mut _17;
_12 = 47_u8 >> _2;
_2 = _19 as u64;
_22 = core::ptr::addr_of_mut!(_25);
_12 = _5 as u8;
_4 = [152964025942886342458669148126380130692_i128,(-120775383847348359337815961764827254038_i128),(-57836803439366905974337536124877344397_i128)];
Goto(bb15)
}
bb15 = {
Call(_30 = dump_var(3_usize, 4_usize, Move(_4), 3_usize, Move(_3), 11_usize, Move(_11), 1_usize, Move(_1)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_30 = dump_var(3_usize, 17_usize, Move(_17), 9_usize, Move(_9), 31_usize, _31, 31_usize, _31), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn4(mut _1: i8,mut _2: *mut isize,mut _3: isize,mut _4: isize,mut _5: usize,mut _6: isize,mut _7: [i128; 3],mut _8: i8,mut _9: [i128; 3],mut _10: (*const i32, u32, usize)) -> u64 {
mir! {
type RET = u64;
let _11: [usize; 8];
let _12: &'static [usize; 1];
let _13: u32;
let _14: [usize; 1];
let _15: u64;
let _16: u64;
let _17: char;
let _18: f32;
let _19: u32;
let _20: char;
let _21: (&'static [usize; 1], u64, [i32; 3], ([i32; 3], i16, (i128, usize)));
let _22: i32;
let _23: isize;
let _24: isize;
let _25: bool;
let _26: &'static mut Adt22;
let _27: *const *mut u8;
let _28: [usize; 1];
let _29: ();
let _30: ();
{
_7 = [156169127870928573547722512686928399920_i128,(-25163962851890959755708539858579834710_i128),(-21665084466632345665167749255678926358_i128)];
_9 = [(-54978476904515984182158227454861863783_i128),135728422251623089903281854233241138524_i128,42443259841660003385036766268562709540_i128];
_7 = [31185207774858026508388270917807740759_i128,(-43392054221001680009128389080871970538_i128),(-67656438615712808813554229480144024914_i128)];
_6 = _3;
_2 = core::ptr::addr_of_mut!(_6);
_3 = _10.1 as isize;
_7 = _9;
RET = 5612183973738746503_u64 * 6648899687729174510_u64;
_13 = !_10.1;
_11 = [_10.2,_10.2,_10.2,_10.2,_5,_10.2,_10.2,_5];
_7 = _9;
_7 = [(-69588619687792764580632513447427156329_i128),75291207107207286360743854964946557383_i128,2457392051060939693550746574616775828_i128];
_11[_5] = !_5;
_14 = [_5];
_4 = _6 - _6;
_9 = [88950591428555207373210215780434201525_i128,156087315138252897091275079999890701393_i128,(-11356233724395111415236148973468222538_i128)];
_12 = &_14;
_8 = RET as i8;
_10.2 = !_5;
_1 = _8;
_8 = -_1;
RET = (-107518127504968702698163593903030686471_i128) as u64;
_4 = (*_2) - (*_2);
match _5 {
0 => bb1,
5 => bb3,
_ => bb2
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
_11 = [_5,_5,_5,_5,_5,_10.2,_5,_5];
_11 = [_5,_10.2,_5,_5,_10.2,_10.2,_5,_5];
_2 = core::ptr::addr_of_mut!(_4);
_17 = '\u{af288}';
_13 = _10.1 ^ _10.1;
_11[_5] = _5 << _13;
_18 = 31084408848163538667960383995289231575_i128 as f32;
(*_2) = !_3;
(*_2) = _3;
_14 = [_11[_5]];
_9 = [48403208171284233328590941017406230536_i128,992367742999359130779312199782909465_i128,36708182497725382254321210679399151575_i128];
(*_2) = -_6;
(*_2) = _3;
_9 = _7;
match _5 {
0 => bb4,
1 => bb5,
5 => bb7,
_ => bb6
}
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
RET = _5 as u64;
_19 = !_10.1;
_16 = RET & RET;
_19 = _10.1 & _13;
_17 = '\u{a7c5f}';
_7 = [(-15052962875358191282486754727575878604_i128),116758543778372145383634221156920014805_i128,3104680813206851124113025858289044555_i128];
_17 = '\u{8cf29}';
_18 = 181_u8 as f32;
_15 = _16;
_12 = &_14;
_13 = _10.1;
_11 = [_5,_10.2,_5,_10.2,_5,_10.2,_10.2,_5];
_7 = [33398850655634348909685912443434952986_i128,44904003445518121708059677026072132749_i128,(-166740954386396572977521065482221190754_i128)];
_2 = core::ptr::addr_of_mut!(_3);
_19 = 41618_u16 as u32;
_21.3.2 = ((-142003751031842520359194615105738361964_i128), _10.2);
_4 = 32702688538397043697518161589587184078_u128 as isize;
RET = _16 << (*_2);
_11 = [_5,_10.2,_21.3.2.1,_21.3.2.1,_5,_21.3.2.1,_5,_5];
_21.0 = Move(_12);
_10.2 = _17 as usize;
_12 = &_14;
_14 = [_10.2];
_21.3.0 = [1673787650_i32,(-962948180_i32),(-1543251261_i32)];
_21.3.2.1 = _10.2;
(*_2) = _4;
_21.3.1 = (-24706_i16) - 11926_i16;
_16 = !RET;
Call((*_2) = fn5(Move(_10), _19, _8, _7, _15, _1, _17), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
_7 = [_21.3.2.0,_21.3.2.0,_21.3.2.0];
_2 = core::ptr::addr_of_mut!(_3);
_8 = _18 as i8;
_6 = -(*_2);
_4 = _3;
(*_2) = _6;
_10.2 = !_21.3.2.1;
_20 = _17;
_21.2 = [(-1356772580_i32),778215141_i32,1695163227_i32];
_13 = _18 as u32;
(*_2) = _6;
RET = !_16;
_21.3.2.1 = _5 - _10.2;
_19 = !_13;
_19 = _13;
_16 = !RET;
_21.2 = [(-477282378_i32),(-1442937934_i32),221316830_i32];
_17 = _20;
_16 = 20327_u16 as u64;
_20 = _17;
(*_2) = 64420_u16 as isize;
_10.1 = !_19;
Goto(bb9)
}
bb9 = {
_5 = !_10.2;
_10.2 = !_21.3.2.1;
_10.2 = _18 as usize;
_10.2 = _5;
_21.3.1 = -17148_i16;
match _21.3.2.0 {
0 => bb1,
1 => bb2,
2 => bb7,
3 => bb4,
4 => bb5,
5 => bb8,
198278615889095943104179992326029849492 => bb11,
_ => bb10
}
}
bb10 = {
_11 = [_5,_5,_5,_5,_5,_10.2,_5,_5];
_11 = [_5,_10.2,_5,_5,_10.2,_10.2,_5,_5];
_2 = core::ptr::addr_of_mut!(_4);
_17 = '\u{af288}';
_13 = _10.1 ^ _10.1;
_11[_5] = _5 << _13;
_18 = 31084408848163538667960383995289231575_i128 as f32;
(*_2) = !_3;
(*_2) = _3;
_14 = [_11[_5]];
_9 = [48403208171284233328590941017406230536_i128,992367742999359130779312199782909465_i128,36708182497725382254321210679399151575_i128];
(*_2) = -_6;
(*_2) = _3;
_9 = _7;
match _5 {
0 => bb4,
1 => bb5,
5 => bb7,
_ => bb6
}
}
bb11 = {
_19 = _13 << _21.3.1;
_10.1 = _13 & _13;
RET = _15 << _4;
_22 = 864145555_i32 & (-241084738_i32);
match _21.3.2.0 {
0 => bb12,
198278615889095943104179992326029849492 => bb14,
_ => bb13
}
}
bb12 = {
Return()
}
bb13 = {
RET = _5 as u64;
_19 = !_10.1;
_16 = RET & RET;
_19 = _10.1 & _13;
_17 = '\u{a7c5f}';
_7 = [(-15052962875358191282486754727575878604_i128),116758543778372145383634221156920014805_i128,3104680813206851124113025858289044555_i128];
_17 = '\u{8cf29}';
_18 = 181_u8 as f32;
_15 = _16;
_12 = &_14;
_13 = _10.1;
_11 = [_5,_10.2,_5,_10.2,_5,_10.2,_10.2,_5];
_7 = [33398850655634348909685912443434952986_i128,44904003445518121708059677026072132749_i128,(-166740954386396572977521065482221190754_i128)];
_2 = core::ptr::addr_of_mut!(_3);
_19 = 41618_u16 as u32;
_21.3.2 = ((-142003751031842520359194615105738361964_i128), _10.2);
_4 = 32702688538397043697518161589587184078_u128 as isize;
RET = _16 << (*_2);
_11 = [_5,_10.2,_21.3.2.1,_21.3.2.1,_5,_21.3.2.1,_5,_5];
_21.0 = Move(_12);
_10.2 = _17 as usize;
_12 = &_14;
_14 = [_10.2];
_21.3.0 = [1673787650_i32,(-962948180_i32),(-1543251261_i32)];
_21.3.2.1 = _10.2;
(*_2) = _4;
_21.3.1 = (-24706_i16) - 11926_i16;
_16 = !RET;
Call((*_2) = fn5(Move(_10), _19, _8, _7, _15, _1, _17), ReturnTo(bb8), UnwindUnreachable())
}
bb14 = {
_23 = _6 >> _22;
_21.3.2 = (76447628330721347106931868370048698114_i128, _5);
_25 = true;
_5 = _10.2 + _10.2;
_5 = _21.3.2.1;
_19 = _17 as u32;
_24 = _6;
_21.3.2.0 = (-84946926560855463427167706362183041371_i128);
RET = !_16;
_21.1 = RET | RET;
_21.3.2 = ((-5931086742875671920488720948338424919_i128), _5);
_15 = 39_u8 as u64;
_11 = [_5,_21.3.2.1,_5,_10.2,_10.2,_5,_21.3.2.1,_5];
Goto(bb15)
}
bb15 = {
Call(_29 = dump_var(4_usize, 3_usize, Move(_3), 15_usize, Move(_15), 16_usize, Move(_16), 22_usize, Move(_22)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_29 = dump_var(4_usize, 13_usize, Move(_13), 11_usize, Move(_11), 19_usize, Move(_19), 6_usize, Move(_6)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_29 = dump_var(4_usize, 9_usize, Move(_9), 17_usize, Move(_17), 30_usize, _30, 30_usize, _30), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn5(mut _1: (*const i32, u32, usize),mut _2: u32,mut _3: i8,mut _4: [i128; 3],mut _5: u64,mut _6: i8,mut _7: char) -> isize {
mir! {
type RET = isize;
let _8: f64;
let _9: ((bool, usize), u8);
let _10: Adt35;
let _11: bool;
let _12: (i128, usize);
let _13: ((i128, usize), &'static u128, *const u64);
let _14: isize;
let _15: [isize; 2];
let _16: [i32; 3];
let _17: (bool, usize);
let _18: isize;
let _19: &'static u16;
let _20: [i32; 3];
let _21: u32;
let _22: u32;
let _23: i64;
let _24: &'static u16;
let _25: (i16, (bool, usize), (i128, usize));
let _26: f32;
let _27: f64;
let _28: char;
let _29: *const i32;
let _30: f64;
let _31: u32;
let _32: u16;
let _33: i64;
let _34: Adt39;
let _35: u16;
let _36: [char; 6];
let _37: f64;
let _38: ();
let _39: ();
{
_1.1 = !_2;
_1.1 = _2;
_5 = 11395854012074476329_u64;
_1.1 = _2;
_8 = 8639028792068882935_i64 as f64;
_9.1 = (-31772_i16) as u8;
_5 = (-31230_i16) as u64;
RET = (-39_isize);
_6 = _3 - _3;
_7 = '\u{dd67f}';
_6 = _3 + _3;
_8 = (-15294_i16) as f64;
_8 = (-38868186202669087590758731870421562658_i128) as f64;
_8 = 268279763060694940608043052467372248900_u128 as f64;
RET = -(-26_isize);
_5 = 10839882787470696263_u64 * 10502414349892618651_u64;
_12 = ((-97076988946174948053822118582895772035_i128), _1.2);
_9.0.0 = !true;
_3 = _6;
_2 = !_1.1;
_12.1 = _1.2 + _1.2;
Call(_1 = fn6(_2, _3, _9.1, _9.1), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_15 = [RET,RET];
_9.0.1 = _1.2 * _1.2;
_16 = [1158112799_i32,890240039_i32,(-1970081484_i32)];
_11 = !_9.0.0;
_13.0.0 = _12.0;
_13.0 = (_12.0, _12.1);
_9.0 = (_11, _13.0.1);
_6 = _3;
_1.2 = !_13.0.1;
_13.0 = _12;
_15 = [RET,RET];
_15 = [RET,RET];
RET = -9223372036854775807_isize;
_18 = RET;
_18 = RET;
RET = _18 + _18;
_13.2 = core::ptr::addr_of!(_5);
Goto(bb2)
}
bb2 = {
_17.1 = 19800_i16 as usize;
_20 = [(-1968100986_i32),18135581_i32,258064343_i32];
_17.0 = !_9.0.0;
_21 = !_1.1;
_6 = _3;
_1.1 = _21;
_12.0 = _3 as i128;
RET = _18 >> _18;
_7 = '\u{64067}';
_17.1 = _13.0.1;
_14 = _21 as isize;
_13.0 = (_12.0, _17.1);
_12 = _13.0;
_9 = (_17, 185_u8);
_12 = (_13.0.0, _17.1);
_12.0 = _7 as i128;
_14 = RET + RET;
_7 = '\u{91e30}';
match _9.1 {
0 => bb3,
1 => bb4,
185 => bb6,
_ => bb5
}
}
bb3 = {
_15 = [RET,RET];
_9.0.1 = _1.2 * _1.2;
_16 = [1158112799_i32,890240039_i32,(-1970081484_i32)];
_11 = !_9.0.0;
_13.0.0 = _12.0;
_13.0 = (_12.0, _12.1);
_9.0 = (_11, _13.0.1);
_6 = _3;
_1.2 = !_13.0.1;
_13.0 = _12;
_15 = [RET,RET];
_15 = [RET,RET];
RET = -9223372036854775807_isize;
_18 = RET;
_18 = RET;
RET = _18 + _18;
_13.2 = core::ptr::addr_of!(_5);
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
_1.1 = !_21;
_23 = (-6797123697260053150_i64) * 4117329888309715627_i64;
_25.0 = _17.1 as i16;
_25.1.0 = _11 & _9.0.0;
_13.2 = core::ptr::addr_of!(_5);
_17.0 = _11;
_9 = (_17, 121_u8);
_17.0 = _9.0.0 ^ _9.0.0;
_13.0.1 = _14 as usize;
_12.1 = _13.0.1 - _9.0.1;
_13.0.0 = _8 as i128;
_25.1.0 = _17.0;
_4 = [_12.0,_12.0,_12.0];
_25 = ((-31643_i16), _17, _13.0);
RET = _14;
_18 = 41671_u16 as isize;
match _25.0 {
0 => bb3,
1 => bb2,
2 => bb7,
3 => bb8,
4 => bb9,
5 => bb10,
6 => bb11,
340282366920938463463374607431768179813 => bb13,
_ => bb12
}
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
_15 = [RET,RET];
_9.0.1 = _1.2 * _1.2;
_16 = [1158112799_i32,890240039_i32,(-1970081484_i32)];
_11 = !_9.0.0;
_13.0.0 = _12.0;
_13.0 = (_12.0, _12.1);
_9.0 = (_11, _13.0.1);
_6 = _3;
_1.2 = !_13.0.1;
_13.0 = _12;
_15 = [RET,RET];
_15 = [RET,RET];
RET = -9223372036854775807_isize;
_18 = RET;
_18 = RET;
RET = _18 + _18;
_13.2 = core::ptr::addr_of!(_5);
Goto(bb2)
}
bb10 = {
_17.1 = 19800_i16 as usize;
_20 = [(-1968100986_i32),18135581_i32,258064343_i32];
_17.0 = !_9.0.0;
_21 = !_1.1;
_6 = _3;
_1.1 = _21;
_12.0 = _3 as i128;
RET = _18 >> _18;
_7 = '\u{64067}';
_17.1 = _13.0.1;
_14 = _21 as isize;
_13.0 = (_12.0, _17.1);
_12 = _13.0;
_9 = (_17, 185_u8);
_12 = (_13.0.0, _17.1);
_12.0 = _7 as i128;
_14 = RET + RET;
_7 = '\u{91e30}';
match _9.1 {
0 => bb3,
1 => bb4,
185 => bb6,
_ => bb5
}
}
bb11 = {
_15 = [RET,RET];
_9.0.1 = _1.2 * _1.2;
_16 = [1158112799_i32,890240039_i32,(-1970081484_i32)];
_11 = !_9.0.0;
_13.0.0 = _12.0;
_13.0 = (_12.0, _12.1);
_9.0 = (_11, _13.0.1);
_6 = _3;
_1.2 = !_13.0.1;
_13.0 = _12;
_15 = [RET,RET];
_15 = [RET,RET];
RET = -9223372036854775807_isize;
_18 = RET;
_18 = RET;
RET = _18 + _18;
_13.2 = core::ptr::addr_of!(_5);
Goto(bb2)
}
bb12 = {
Return()
}
bb13 = {
RET = _14 | _14;
_13.0.0 = _12.0 - _12.0;
_5 = _6 as u64;
_16 = [(-354908519_i32),(-1308044588_i32),1267788061_i32];
_14 = RET;
_15 = [_14,RET];
_4 = [_12.0,_12.0,_12.0];
_25.1.0 = _17.0;
_5 = 5713910855805596510_u64 >> RET;
_25 = (29781_i16, _9.0, _13.0);
_22 = _21 - _2;
_8 = _12.1 as f64;
RET = _3 as isize;
_2 = _21;
_21 = _22 << _1.2;
_12.1 = !_25.2.1;
_12.0 = _25.2.0;
_5 = 806354289331353717_u64;
RET = _9.0.0 as isize;
_2 = !_1.1;
_1.2 = _25.2.1;
_25 = ((-17645_i16), _17, _12);
_25 = ((-3349_i16), _17, _12);
_9.0.0 = _17.0;
_2 = _5 as u32;
_29 = Move(_1.0);
_9 = (_17, 21_u8);
_25.2.0 = -_13.0.0;
Goto(bb14)
}
bb14 = {
_20 = _16;
_1.0 = Move(_29);
_21 = _22 >> _13.0.0;
_21 = _3 as u32;
_21 = _2;
_1.1 = _22 ^ _22;
RET = !_14;
_12 = _13.0;
_20 = [(-1480496_i32),(-1387372158_i32),1258507038_i32];
_9.0.1 = _9.0.0 as usize;
RET = _9.1 as isize;
_12.1 = _17.1 & _9.0.1;
_16 = [(-438457069_i32),(-1644915683_i32),(-1926637496_i32)];
_1.2 = _1.1 as usize;
_32 = 5778_u16 >> _6;
_22 = _1.1 + _1.1;
Goto(bb15)
}
bb15 = {
Call(_38 = dump_var(5_usize, 14_usize, Move(_14), 25_usize, Move(_25), 18_usize, Move(_18), 2_usize, Move(_2)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_38 = dump_var(5_usize, 15_usize, Move(_15), 32_usize, Move(_32), 12_usize, Move(_12), 11_usize, Move(_11)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_38 = dump_var(5_usize, 17_usize, Move(_17), 20_usize, Move(_20), 39_usize, _39, 39_usize, _39), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn6(mut _1: u32,mut _2: i8,mut _3: u8,mut _4: u8) -> (*const i32, u32, usize) {
mir! {
type RET = (*const i32, u32, usize);
let _5: isize;
let _6: (char, &'static mut isize);
let _7: isize;
let _8: ([usize; 1], i8, &'static mut i32, &'static mut &'static *const u64);
let _9: bool;
let _10: Adt81;
let _11: u8;
let _12: *const isize;
let _13: ((i128, usize), &'static u128, *const u64);
let _14: (i128, i16, (bool, usize), &'static char);
let _15: i16;
let _16: f32;
let _17: &'static mut Adt22;
let _18: Adt22;
let _19: bool;
let _20: f32;
let _21: (*const i32, u32, usize);
let _22: &'static u64;
let _23: &'static mut &'static u16;
let _24: u32;
let _25: *const &'static mut u16;
let _26: isize;
let _27: isize;
let _28: bool;
let _29: ((*const i32, u32, usize), *const *mut u8, &'static mut i32);
let _30: ((*const i32, u32, usize), *const *mut u8, &'static mut i32);
let _31: ((f64,), (i128, usize), f32, (f64,));
let _32: ((f64,), (i128, usize), f32, (f64,));
let _33: i16;
let _34: ();
let _35: ();
{
_3 = _4;
Goto(bb1)
}
bb1 = {
RET.2 = !1_usize;
RET.1 = _1 * _1;
RET.2 = 2_usize;
Goto(bb2)
}
bb2 = {
RET.2 = 6494245837434097084_usize;
_1 = (-28077_i16) as u32;
RET.2 = 6_usize;
_5 = !(-43_isize);
_5 = -9223372036854775807_isize;
RET.1 = _1;
_1 = !RET.1;
_5 = !(-9223372036854775808_isize);
_2 = (-69_i8);
_3 = 101299247098668426699188197848229521203_u128 as u8;
Call(RET.0 = fn7(_2, _2, _5, _4, _2, _2, _1, _2), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
RET.1 = _1;
_6.1 = &mut _5;
_5 = (-104_isize);
RET.2 = !7_usize;
_1 = !RET.1;
_5 = (-9223372036854775808_isize) ^ (-9223372036854775808_isize);
_8.0 = [RET.2];
RET.1 = _5 as u32;
_6.0 = '\u{b9f56}';
_8.1 = _2;
_7 = _5 << _2;
RET.1 = 35754_u16 as u32;
RET.2 = 162301396174166485865468276205053903924_i128 as usize;
_8.1 = !_2;
_5 = _7 & _7;
_2 = _8.1;
_6.1 = &mut _7;
_7 = !_5;
_10.fld3.0.2 = RET.2 & RET.2;
_8.0 = [_10.fld3.0.2];
Goto(bb4)
}
bb4 = {
_11 = RET.2 as u8;
_10.fld2 = 12243_u16 - 9823_u16;
_11 = _3;
_10.fld3.0 = Move(RET);
_2 = _8.1;
RET.1 = !_10.fld3.0.1;
_7 = _5;
_12 = core::ptr::addr_of!(_7);
RET.2 = _10.fld2 as usize;
RET = Move(_10.fld3.0);
_10.fld3.0.0 = Move(RET.0);
_13.2 = core::ptr::addr_of!(_10.fld3.1.fld0);
_5 = !_7;
_10.fld3.0.2 = !RET.2;
RET.0 = Move(_10.fld3.0.0);
_10.fld2 = !17544_u16;
RET.2 = _10.fld3.0.2;
(*_12) = _5 * _5;
Goto(bb5)
}
bb5 = {
_6.0 = '\u{f20b8}';
_11 = _3;
(*_12) = -_5;
_6.0 = '\u{a3ad6}';
_10.fld3.0 = (Move(RET.0), RET.1, RET.2);
RET = (Move(_10.fld3.0.0), _10.fld3.0.1, _10.fld3.0.2);
_13.0.1 = RET.2 ^ RET.2;
_10.fld0 = core::ptr::addr_of!(_10.fld3.1.fld0);
_5 = _13.0.1 as isize;
_13.0 = (38843924472771247649790276089041460302_i128, RET.2);
match _13.0.0 {
0 => bb4,
1 => bb6,
38843924472771247649790276089041460302 => bb8,
_ => bb7
}
}
bb6 = {
RET.2 = 6494245837434097084_usize;
_1 = (-28077_i16) as u32;
RET.2 = 6_usize;
_5 = !(-43_isize);
_5 = -9223372036854775807_isize;
RET.1 = _1;
_1 = !RET.1;
_5 = !(-9223372036854775808_isize);
_2 = (-69_i8);
_3 = 101299247098668426699188197848229521203_u128 as u8;
Call(RET.0 = fn7(_2, _2, _5, _4, _2, _2, _1, _2), ReturnTo(bb3), UnwindUnreachable())
}
bb7 = {
RET.1 = _1;
_6.1 = &mut _5;
_5 = (-104_isize);
RET.2 = !7_usize;
_1 = !RET.1;
_5 = (-9223372036854775808_isize) ^ (-9223372036854775808_isize);
_8.0 = [RET.2];
RET.1 = _5 as u32;
_6.0 = '\u{b9f56}';
_8.1 = _2;
_7 = _5 << _2;
RET.1 = 35754_u16 as u32;
RET.2 = 162301396174166485865468276205053903924_i128 as usize;
_8.1 = !_2;
_5 = _7 & _7;
_2 = _8.1;
_6.1 = &mut _7;
_7 = !_5;
_10.fld3.0.2 = RET.2 & RET.2;
_8.0 = [_10.fld3.0.2];
Goto(bb4)
}
bb8 = {
_1 = _10.fld3.0.1 ^ _10.fld3.0.1;
_8.0 = [RET.2];
_10.fld3.0.0 = Move(RET.0);
RET.0 = Move(_10.fld3.0.0);
_10.fld3.0.0 = Move(RET.0);
RET.0 = Move(_10.fld3.0.0);
_11 = _1 as u8;
_10.fld3.1 = Adt31 { fld0: 14779194339639351241_u64,fld1: _6.0 };
_1 = RET.1;
Goto(bb9)
}
bb9 = {
_8.0 = [_13.0.1];
_11 = _4;
_14.2.1 = RET.2;
_10.fld3.1.fld0 = 11730628367927646374_u64 << _13.0.0;
_14.1 = (-10824_i16) | 10855_i16;
_12 = core::ptr::addr_of!(_5);
_10.fld2 = true as u16;
_13.0 = ((-123232827005633473941109049960609735699_i128), RET.2);
_9 = !false;
match _13.0.0 {
0 => bb2,
217049539915304989522265557471158475757 => bb11,
_ => bb10
}
}
bb10 = {
RET.2 = !1_usize;
RET.1 = _1 * _1;
RET.2 = 2_usize;
Goto(bb2)
}
bb11 = {
_13.0.0 = !(-162559140759783146395093098610811839748_i128);
_13.0.1 = _14.2.1;
(*_12) = !_7;
_10.fld2 = _14.1 as u16;
_6.0 = _10.fld3.1.fld1;
_16 = _10.fld3.1.fld0 as f32;
RET.1 = _16 as u32;
_13.2 = Move(_10.fld0);
_13.2 = core::ptr::addr_of!(_10.fld3.1.fld0);
_20 = _16 - _16;
_13.0 = ((-144135135872894862837139980551696177291_i128), RET.2);
_10.fld3.0.1 = RET.1;
_10.fld3.0.2 = RET.2;
_9 = _16 <= _20;
RET.2 = _14.2.1;
_8.0 = [RET.2];
_10.fld3.0.1 = !RET.1;
_13.0.0 = (-7469502417961689707097764376761899853_i128);
_20 = _16 - _16;
_11 = _4;
_10.fld3.1 = Adt31 { fld0: 7107133951857579510_u64,fld1: _6.0 };
_11 = _10.fld3.0.2 as u8;
_14.2.0 = !_9;
_5 = _9 as isize;
_10.fld3.1.fld1 = _6.0;
(*_12) = _7;
Goto(bb12)
}
bb12 = {
_13.0 = (118119155515636557155686902817802270105_i128, _10.fld3.0.2);
RET.2 = (-7209396404022833088_i64) as usize;
_1 = (*_12) as u32;
_10.fld3.0.0 = Move(RET.0);
_13.2 = core::ptr::addr_of!(_10.fld3.1.fld0);
_12 = core::ptr::addr_of!((*_12));
_13.0 = ((-17536861098419062682656931910511509870_i128), _14.2.1);
_10.fld2 = !33638_u16;
RET.0 = Move(_10.fld3.0.0);
_12 = core::ptr::addr_of!(_7);
_14.2.0 = _9 >= _9;
_19 = !_9;
Goto(bb13)
}
bb13 = {
_4 = _11;
RET.2 = _14.2.1 - _13.0.1;
_13.0 = ((-33773806338153753516149528249352341829_i128), _10.fld3.0.2);
_16 = _20 - _20;
_14.0 = 1414133832_i32 as i128;
_21.0 = Move(RET.0);
RET.0 = Move(_21.0);
_14.3 = &_10.fld3.1.fld1;
(*_12) = _5;
match _13.0.0 {
0 => bb14,
1 => bb15,
2 => bb16,
3 => bb17,
4 => bb18,
5 => bb19,
306508560582784709947225079182415869627 => bb21,
_ => bb20
}
}
bb14 = {
_13.0 = (118119155515636557155686902817802270105_i128, _10.fld3.0.2);
RET.2 = (-7209396404022833088_i64) as usize;
_1 = (*_12) as u32;
_10.fld3.0.0 = Move(RET.0);
_13.2 = core::ptr::addr_of!(_10.fld3.1.fld0);
_12 = core::ptr::addr_of!((*_12));
_13.0 = ((-17536861098419062682656931910511509870_i128), _14.2.1);
_10.fld2 = !33638_u16;
RET.0 = Move(_10.fld3.0.0);
_12 = core::ptr::addr_of!(_7);
_14.2.0 = _9 >= _9;
_19 = !_9;
Goto(bb13)
}
bb15 = {
_13.0.0 = !(-162559140759783146395093098610811839748_i128);
_13.0.1 = _14.2.1;
(*_12) = !_7;
_10.fld2 = _14.1 as u16;
_6.0 = _10.fld3.1.fld1;
_16 = _10.fld3.1.fld0 as f32;
RET.1 = _16 as u32;
_13.2 = Move(_10.fld0);
_13.2 = core::ptr::addr_of!(_10.fld3.1.fld0);
_20 = _16 - _16;
_13.0 = ((-144135135872894862837139980551696177291_i128), RET.2);
_10.fld3.0.1 = RET.1;
_10.fld3.0.2 = RET.2;
_9 = _16 <= _20;
RET.2 = _14.2.1;
_8.0 = [RET.2];
_10.fld3.0.1 = !RET.1;
_13.0.0 = (-7469502417961689707097764376761899853_i128);
_20 = _16 - _16;
_11 = _4;
_10.fld3.1 = Adt31 { fld0: 7107133951857579510_u64,fld1: _6.0 };
_11 = _10.fld3.0.2 as u8;
_14.2.0 = !_9;
_5 = _9 as isize;
_10.fld3.1.fld1 = _6.0;
(*_12) = _7;
Goto(bb12)
}
bb16 = {
RET.2 = !1_usize;
RET.1 = _1 * _1;
RET.2 = 2_usize;
Goto(bb2)
}
bb17 = {
_8.0 = [_13.0.1];
_11 = _4;
_14.2.1 = RET.2;
_10.fld3.1.fld0 = 11730628367927646374_u64 << _13.0.0;
_14.1 = (-10824_i16) | 10855_i16;
_12 = core::ptr::addr_of!(_5);
_10.fld2 = true as u16;
_13.0 = ((-123232827005633473941109049960609735699_i128), RET.2);
_9 = !false;
match _13.0.0 {
0 => bb2,
217049539915304989522265557471158475757 => bb11,
_ => bb10
}
}
bb18 = {
_6.0 = '\u{f20b8}';
_11 = _3;
(*_12) = -_5;
_6.0 = '\u{a3ad6}';
_10.fld3.0 = (Move(RET.0), RET.1, RET.2);
RET = (Move(_10.fld3.0.0), _10.fld3.0.1, _10.fld3.0.2);
_13.0.1 = RET.2 ^ RET.2;
_10.fld0 = core::ptr::addr_of!(_10.fld3.1.fld0);
_5 = _13.0.1 as isize;
_13.0 = (38843924472771247649790276089041460302_i128, RET.2);
match _13.0.0 {
0 => bb4,
1 => bb6,
38843924472771247649790276089041460302 => bb8,
_ => bb7
}
}
bb19 = {
RET.1 = _1;
_6.1 = &mut _5;
_5 = (-104_isize);
RET.2 = !7_usize;
_1 = !RET.1;
_5 = (-9223372036854775808_isize) ^ (-9223372036854775808_isize);
_8.0 = [RET.2];
RET.1 = _5 as u32;
_6.0 = '\u{b9f56}';
_8.1 = _2;
_7 = _5 << _2;
RET.1 = 35754_u16 as u32;
RET.2 = 162301396174166485865468276205053903924_i128 as usize;
_8.1 = !_2;
_5 = _7 & _7;
_2 = _8.1;
_6.1 = &mut _7;
_7 = !_5;
_10.fld3.0.2 = RET.2 & RET.2;
_8.0 = [_10.fld3.0.2];
Goto(bb4)
}
bb20 = {
RET.2 = 6494245837434097084_usize;
_1 = (-28077_i16) as u32;
RET.2 = 6_usize;
_5 = !(-43_isize);
_5 = -9223372036854775807_isize;
RET.1 = _1;
_1 = !RET.1;
_5 = !(-9223372036854775808_isize);
_2 = (-69_i8);
_3 = 101299247098668426699188197848229521203_u128 as u8;
Call(RET.0 = fn7(_2, _2, _5, _4, _2, _2, _1, _2), ReturnTo(bb3), UnwindUnreachable())
}
bb21 = {
_10.fld3.0.0 = Move(RET.0);
_21.0 = Move(_10.fld3.0.0);
_13.0.0 = _14.0 * _14.0;
_26 = !_5;
_29.0.0 = Move(_21.0);
_14.2.1 = !RET.2;
_21.1 = _9 as u32;
_18 = Adt22::Variant0 { fld0: _10.fld3.1.fld0,fld1: 6054570584744518784_i64,fld2: _10.fld2 };
_13.0.1 = RET.2;
_21.0 = Move(_29.0.0);
_28 = _14.2.0;
_10.fld2 = (-1060284294_i32) as u16;
_31.0.0 = _7 as f64;
RET.0 = Move(_21.0);
_15 = _14.1;
_14.3 = &_6.0;
Goto(bb22)
}
bb22 = {
Call(_34 = dump_var(6_usize, 2_usize, Move(_2), 28_usize, Move(_28), 7_usize, Move(_7), 19_usize, Move(_19)), ReturnTo(bb23), UnwindUnreachable())
}
bb23 = {
Call(_34 = dump_var(6_usize, 4_usize, Move(_4), 11_usize, Move(_11), 35_usize, _35, 35_usize, _35), ReturnTo(bb24), UnwindUnreachable())
}
bb24 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn7(mut _1: i8,mut _2: i8,mut _3: isize,mut _4: u8,mut _5: i8,mut _6: i8,mut _7: u32,mut _8: i8) -> *const i32 {
mir! {
type RET = *const i32;
let _9: u16;
let _10: [usize; 8];
let _11: u8;
let _12: (i128, i16, (bool, usize), &'static char);
let _13: i16;
let _14: isize;
let _15: &'static *const u64;
let _16: (i16, (bool, usize), (i128, usize));
let _17: &'static [usize; 1];
let _18: *const *const u64;
let _19: (*const i32, u32, usize);
let _20: char;
let _21: *const *const u64;
let _22: &'static mut &'static *const u64;
let _23: Adt22;
let _24: [i8; 3];
let _25: Adt35;
let _26: &'static mut *const isize;
let _27: bool;
let _28: u32;
let _29: bool;
let _30: [i128; 3];
let _31: Adt35;
let _32: char;
let _33: &'static *const u64;
let _34: f64;
let _35: ((i128, usize), &'static u128, *const u64);
let _36: Adt22;
let _37: *mut isize;
let _38: u16;
let _39: u32;
let _40: u128;
let _41: char;
let _42: u64;
let _43: char;
let _44: u8;
let _45: bool;
let _46: [usize; 8];
let _47: &'static mut i32;
let _48: u32;
let _49: isize;
let _50: [i8; 3];
let _51: f64;
let _52: bool;
let _53: u16;
let _54: char;
let _55: Adt22;
let _56: char;
let _57: ();
let _58: ();
{
_5 = _1;
_7 = 3754941346_u32 - 934821616_u32;
_1 = -_5;
_4 = !21_u8;
_5 = -_1;
_2 = (-31598691286321791806218948961865969595_i128) as i8;
_6 = !_2;
_4 = 86_u8;
_7 = 3903770624_u32 & 1469812941_u32;
match _8 {
0 => bb1,
340282366920938463463374607431768211387 => bb3,
_ => bb2
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
_7 = !2353721352_u32;
_6 = -_5;
_2 = _5 << _5;
_5 = 1587798139_i32 as i8;
_1 = _6 | _8;
Call(_1 = fn8(_6, _2, _4, _4), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_6 = _5;
_6 = _2 >> _2;
_3 = !9223372036854775807_isize;
_8 = _6 * _6;
_7 = 412820606_u32;
_4 = 175_u8 | 171_u8;
_4 = 128_u8;
_1 = _6 - _8;
_8 = _1 - _1;
Goto(bb5)
}
bb5 = {
_8 = _2;
_5 = _2;
_1 = (-7538731133890279076_i64) as i8;
_5 = _2;
_11 = _4;
_11 = _2 as u8;
_4 = _11;
Call(_9 = core::intrinsics::bswap(14143_u16), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
_9 = 710_u16 >> _3;
_11 = _4;
_12.1 = (-20845_i16) & (-17462_i16);
_12.2 = (false, 10791246133521572583_usize);
_13 = _12.1 ^ _12.1;
_11 = _4 ^ _4;
_14 = _3 >> _4;
_8 = !_5;
_7 = 2140238624_u32 << _11;
_12.2.1 = !5_usize;
_9 = _7 as u16;
_3 = _14 & _14;
_9 = 1772928294_i32 as u16;
_12.1 = !_13;
_4 = !_11;
_16.1.0 = !_12.2.0;
_10 = [_12.2.1,_12.2.1,_12.2.1,_12.2.1,_12.2.1,_12.2.1,_12.2.1,_12.2.1];
_16.1.1 = _12.2.1;
Goto(bb7)
}
bb7 = {
_16.2 = (166651773636483008285717591340585951863_i128, _16.1.1);
_16.2 = (20704652495759097162373299664359181861_i128, _12.2.1);
_10 = [_16.1.1,_12.2.1,_12.2.1,_12.2.1,_12.2.1,_16.2.1,_16.2.1,_16.2.1];
_8 = 15155199108823289259_u64 as i8;
_12.2.0 = _7 > _7;
_12.0 = _16.2.1 as i128;
_16.1.1 = _16.2.1 & _16.2.1;
_16.2.0 = '\u{6fbab}' as i128;
_16.2.0 = _12.0;
Goto(bb8)
}
bb8 = {
_16.1.1 = '\u{473ff}' as usize;
_12.2.0 = _16.1.0;
_16.1.0 = !_12.2.0;
_16.1 = (_12.2.0, _12.2.1);
_9 = 11619_u16 ^ 58479_u16;
_19.2 = _12.2.1 & _16.2.1;
_16.0 = _16.1.0 as i16;
_5 = _6;
_12.2 = (_16.1.0, _19.2);
_5 = _2;
_20 = '\u{b0b45}';
_12.3 = &_20;
_16.1.1 = 149929901_i32 as usize;
_9 = 37276_u16;
_19.1 = _7 * _7;
_12.0 = 10372761482914357456_u64 as i128;
_12.2.0 = _16.1.0 & _16.1.0;
_4 = 635802608_i32 as u8;
_12.2 = _16.1;
_9 = 6335_u16 - 15765_u16;
_10 = [_19.2,_12.2.1,_16.1.1,_19.2,_16.1.1,_16.2.1,_16.2.1,_19.2];
_3 = _14 << _12.2.1;
_12.3 = &_20;
_5 = _11 as i8;
_16.1 = (_12.2.0, _19.2);
Goto(bb9)
}
bb9 = {
_19.2 = !_12.2.1;
_12.2.1 = !_19.2;
Goto(bb10)
}
bb10 = {
_8 = _12.2.0 as i8;
_16.0 = !_13;
_10 = [_16.1.1,_16.1.1,_12.2.1,_19.2,_19.2,_19.2,_16.2.1,_16.1.1];
_24 = [_2,_2,_2];
_9 = 9630_u16 + 7443_u16;
_3 = _5 as isize;
_12.3 = &_20;
_24 = [_8,_6,_6];
_11 = _16.1.1 as u8;
_12.0 = 16772922013035953345_u64 as i128;
_16.1.0 = _19.1 > _19.1;
_16.1.0 = !_12.2.0;
_16.2.0 = _12.0;
_12.1 = _12.2.0 as i16;
Goto(bb11)
}
bb11 = {
_12.3 = &_20;
_16.1.0 = _19.1 <= _7;
_19.1 = !_7;
_16.1 = (_12.2.0, _12.2.1);
_16.2.1 = !_12.2.1;
_19.2 = 14500892209779848200_u64 as usize;
_19.1 = _7 - _7;
_11 = !_4;
_9 = _12.2.0 as u16;
_12.0 = -_16.2.0;
_14 = _19.1 as isize;
_28 = !_19.1;
_10 = [_19.2,_12.2.1,_16.1.1,_16.2.1,_16.2.1,_12.2.1,_16.1.1,_16.2.1];
_16.1.1 = _12.2.1 >> _12.1;
Goto(bb12)
}
bb12 = {
_29 = _13 > _13;
_16.1.0 = _29;
_10 = [_16.2.1,_16.1.1,_16.2.1,_16.2.1,_19.2,_16.1.1,_16.1.1,_16.1.1];
_16.1.0 = _29 ^ _29;
_29 = _16.1.0;
_30 = [_16.2.0,_12.0,_16.2.0];
_2 = _20 as i8;
_19.2 = 298299533594281851655594123531200289333_u128 as usize;
_19.2 = !_16.1.1;
_32 = _20;
_12.2 = _16.1;
_12.0 = _6 as i128;
_34 = _3 as f64;
_16.0 = _12.1 + _13;
_8 = _6 >> _6;
_13 = _7 as i16;
_8 = !_2;
_16.0 = _13 + _13;
_12.2.1 = _16.1.1;
_12.2 = (_29, _16.1.1);
_20 = _32;
Goto(bb13)
}
bb13 = {
_35.0 = (_12.0, _16.1.1);
_6 = _5 & _5;
_35.0 = (_12.0, _19.2);
_24 = [_6,_5,_2];
_12.3 = &_20;
_35.0 = (_12.0, _19.2);
_16.2 = (_35.0.0, _35.0.1);
_4 = _13 as u8;
_12.3 = &_20;
_12.2 = _16.1;
_20 = _32;
_2 = !_6;
_2 = _5 - _1;
_20 = _32;
_37 = core::ptr::addr_of_mut!(_14);
_6 = -_2;
_27 = _29;
_35.0.0 = _16.2.0 >> _16.0;
_9 = !51237_u16;
_27 = !_12.2.0;
_12.2.1 = _2 as usize;
_16.2 = (_35.0.0, _12.2.1);
_14 = _16.2.0 as isize;
_16.2.1 = _4 as usize;
(*_37) = _3;
_11 = _9 as u8;
_18 = core::ptr::addr_of!(_35.2);
_16.2.1 = _19.1 as usize;
Goto(bb14)
}
bb14 = {
(*_37) = _3;
_2 = !_5;
_5 = _2 - _6;
_29 = _4 < _4;
_39 = _7;
_32 = _20;
_18 = core::ptr::addr_of!((*_18));
_29 = !_12.2.0;
_2 = _5;
_12.1 = _9 as i16;
_16.1.0 = _29;
Call(_3 = core::intrinsics::transmute((*_37)), ReturnTo(bb15), UnwindUnreachable())
}
bb15 = {
_27 = !_29;
_5 = _2 & _6;
_16.1 = _12.2;
_20 = _32;
_42 = !7289398789845979001_u64;
_34 = (-8017783375450113194_i64) as f64;
_29 = _27;
_12.0 = _35.0.0 ^ _16.2.0;
_5 = _39 as i8;
_14 = _3 ^ _3;
_40 = 299093311399339222467637034280267042994_u128 - 157170242282940837769857219418790684933_u128;
_1 = _2 * _5;
_16.2 = (_12.0, _16.1.1);
(*_37) = _3 - _3;
_16.0 = !_13;
_12.0 = _16.2.0 - _16.2.0;
_16.2.1 = _28 as usize;
_5 = _1;
_16.1 = (_12.2.0, _35.0.1);
_40 = !132473212354717039241945868991654098051_u128;
_13 = !_16.0;
_35.0.0 = _40 as i128;
_35.0.1 = _4 as usize;
_12.2 = (_16.1.0, _16.2.1);
_16.1.1 = !_12.2.1;
Goto(bb16)
}
bb16 = {
_35.1 = &_40;
(*_18) = core::ptr::addr_of!(_42);
_6 = _2;
_19.1 = !_39;
_18 = core::ptr::addr_of!((*_18));
_7 = _19.1;
_16.1 = (_12.2.0, _35.0.1);
_13 = _12.0 as i16;
_2 = _5 << _13;
_38 = _9 & _9;
_33 = &(*_18);
_38 = _32 as u16;
_38 = _9 + _9;
_12.1 = _13;
_12.2.1 = _40 as usize;
_20 = _32;
_35.2 = core::ptr::addr_of!(_42);
_42 = !14779135063183736062_u64;
(*_37) = _3 | _3;
_44 = _4;
_30 = [_12.0,_12.0,_12.0];
_14 = _35.0.1 as isize;
_21 = Move(_18);
_16.2.1 = _39 as usize;
_16.2.1 = !_12.2.1;
Goto(bb17)
}
bb17 = {
_43 = _20;
_16.1.1 = _12.0 as usize;
_2 = _12.1 as i8;
_5 = _2 + _2;
_5 = _2;
(*_37) = _1 as isize;
_4 = _27 as u8;
_46 = [_16.1.1,_16.1.1,_16.1.1,_19.2,_16.1.1,_16.1.1,_16.1.1,_16.1.1];
_3 = (*_37) * (*_37);
_43 = _32;
_13 = _12.1;
_37 = core::ptr::addr_of_mut!((*_37));
_3 = -(*_37);
_38 = _9;
_49 = _13 as isize;
_29 = !_12.2.0;
_19.1 = _28 + _28;
_24 = [_2,_2,_1];
_42 = _32 as u64;
(*_37) = _49;
_35.0 = _16.2;
Goto(bb18)
}
bb18 = {
_12.0 = _35.0.0;
_35.0.0 = _16.2.0;
_2 = _16.2.1 as i8;
_36 = Adt22::Variant0 { fld0: _42,fld1: (-6652484358578300775_i64),fld2: _38 };
_1 = -_5;
_16 = (_13, _12.2, _35.0);
_3 = _9 as isize;
place!(Field::<u64>(Variant(_36, 0), 0)) = _28 as u64;
_41 = _43;
_3 = _19.1 as isize;
_10 = [_12.2.1,_35.0.1,_35.0.1,_16.2.1,_16.2.1,_12.2.1,_19.2,_35.0.1];
Goto(bb19)
}
bb19 = {
_7 = !_28;
_46 = [_16.2.1,_19.2,_35.0.1,_19.2,_35.0.1,_19.2,_12.2.1,_16.2.1];
_18 = core::ptr::addr_of!(_35.2);
_35.0.1 = !_19.2;
_21 = Move(_18);
_49 = _3 - _3;
_2 = Field::<u64>(Variant(_36, 0), 0) as i8;
_12.3 = &_20;
_32 = _43;
_22 = &mut _33;
_42 = 217622227_i32 as u64;
_20 = _41;
_44 = _4 >> _14;
_12.2.0 = !_16.1.0;
(*_37) = _3 & _49;
(*_37) = _3;
_12.2.0 = _29;
_4 = !_44;
_48 = !_28;
_32 = _20;
_14 = _3;
_33 = &_35.2;
_37 = core::ptr::addr_of_mut!((*_37));
_32 = _20;
_18 = Move(_21);
_33 = &(*_33);
place!(Field::<i64>(Variant(_36, 0), 1)) = (-3572292695365260423_i64);
Goto(bb20)
}
bb20 = {
_19.2 = Field::<i64>(Variant(_36, 0), 1) as usize;
_30 = [_12.0,_16.2.0,_35.0.0];
_24 = [_5,_2,_1];
_16.1 = (_27, _35.0.1);
_45 = !_29;
SetDiscriminant(_36, 2);
_51 = -_34;
RET = core::ptr::addr_of!(place!(Field::<i32>(Variant(_36, 2), 5)));
place!(Field::<f64>(Variant(_36, 2), 3)) = _34;
_35.0.1 = _40 as usize;
_40 = _51 as u128;
_44 = _13 as u8;
_16.1.1 = _4 as usize;
_12.3 = &_20;
_46 = _10;
_44 = !_4;
_39 = _28 ^ _19.1;
place!(Field::<[i32; 3]>(Variant(_36, 2), 0)) = [169947822_i32,(-1449772133_i32),328716088_i32];
_45 = _29;
Goto(bb21)
}
bb21 = {
Call(_57 = dump_var(7_usize, 24_usize, Move(_24), 45_usize, Move(_45), 9_usize, Move(_9), 29_usize, Move(_29)), ReturnTo(bb22), UnwindUnreachable())
}
bb22 = {
Call(_57 = dump_var(7_usize, 43_usize, Move(_43), 1_usize, Move(_1), 32_usize, Move(_32), 20_usize, Move(_20)), ReturnTo(bb23), UnwindUnreachable())
}
bb23 = {
Call(_57 = dump_var(7_usize, 30_usize, Move(_30), 44_usize, Move(_44), 5_usize, Move(_5), 40_usize, Move(_40)), ReturnTo(bb24), UnwindUnreachable())
}
bb24 = {
Call(_57 = dump_var(7_usize, 16_usize, Move(_16), 41_usize, Move(_41), 46_usize, Move(_46), 48_usize, Move(_48)), ReturnTo(bb25), UnwindUnreachable())
}
bb25 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn8(mut _1: i8,mut _2: i8,mut _3: u8,mut _4: u8) -> i8 {
mir! {
type RET = i8;
let _5: &'static mut Adt22;
let _6: [i32; 3];
let _7: u16;
let _8: Adt22;
let _9: bool;
let _10: i64;
let _11: isize;
let _12: u64;
let _13: [i8; 3];
let _14: f32;
let _15: f64;
let _16: Adt59;
let _17: u8;
let _18: &'static *const u64;
let _19: [i32; 3];
let _20: *const i32;
let _21: *const u64;
let _22: Adt31;
let _23: (Adt31, i64, Adt39, *const u64);
let _24: *const &'static mut u16;
let _25: isize;
let _26: isize;
let _27: *const i32;
let _28: *mut u8;
let _29: ((*const i32, u32, usize), Adt31);
let _30: &'static mut (bool, usize);
let _31: (i16, (bool, usize), (i128, usize));
let _32: ([i32; 3], i16, (i128, usize));
let _33: [usize; 8];
let _34: ();
let _35: ();
{
RET = 14615_i16 as i8;
RET = -_1;
_3 = !_4;
_3 = _4 & _4;
_4 = _3;
RET = -_2;
_4 = !_3;
_6 = [(-1815233455_i32),677926294_i32,(-65619353_i32)];
_4 = _3 + _3;
_2 = !_1;
_1 = 7611_i16 as i8;
_3 = true as u8;
_6 = [1824376949_i32,1573952615_i32,(-1301995145_i32)];
_7 = 15395_i16 as u16;
_4 = 97661881938129665737999851867822806000_i128 as u8;
RET = _2;
_2 = (-7766077357995714877_i64) as i8;
_3 = _4 & _4;
RET = _1 << _2;
_3 = _4 + _4;
_3 = _4;
Goto(bb1)
}
bb1 = {
RET = _2 * _1;
_1 = !RET;
_6 = [1243934899_i32,103664916_i32,1538039589_i32];
Goto(bb2)
}
bb2 = {
_4 = 9223372036854775807_isize as u8;
_7 = 22491_i16 as u16;
RET = _1;
_7 = 3546_u16;
_2 = !RET;
_3 = !_4;
_10 = (-5814895555694819281_i64);
_7 = 5828_u16;
RET = '\u{a45c1}' as i8;
_6 = [926061273_i32,(-274983223_i32),239819699_i32];
_1 = _2;
_4 = !_3;
_13 = [_1,RET,RET];
_13 = [RET,RET,_1];
_12 = 10067055553904322535_u64;
_10 = -(-7785513720407388694_i64);
Call(_3 = fn9(_1, _7, _6, _2, _6, _12, _6, _10, _1, _2, _2), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_14 = _10 as f32;
_1 = (-1476498556_i32) as i8;
_10 = !(-108574656273710663_i64);
RET = 4230581303980845760_usize as i8;
_9 = false;
_15 = _12 as f64;
_1 = _9 as i8;
_8 = Adt22::Variant0 { fld0: _12,fld1: _10,fld2: _7 };
_10 = '\u{d52c9}' as i64;
_1 = -RET;
place!(Field::<i64>(Variant(_8, 0), 1)) = _10;
_11 = 9223372036854775807_isize & (-9223372036854775808_isize);
_13 = [_1,_2,_1];
place!(Field::<i64>(Variant(_8, 0), 1)) = _12 as i64;
_14 = Field::<i64>(Variant(_8, 0), 1) as f32;
Call(_14 = fn10(_1, _13, _8, _10), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_4 = Field::<u16>(Variant(_8, 0), 2) as u8;
_5 = &mut _8;
_14 = 2906851277_u32 as f32;
place!(Field::<u64>(Variant(_8, 0), 0)) = _12 & _12;
_6 = [268372309_i32,1460333729_i32,(-1067687389_i32)];
_6 = [333220372_i32,(-802392463_i32),(-541648853_i32)];
_11 = !(-9223372036854775808_isize);
place!(Field::<i64>(Variant(_8, 0), 1)) = -_10;
_5 = &mut _8;
place!(Field::<u16>(Variant((*_5), 0), 2)) = _7;
SetDiscriminant(_8, 2);
place!(Field::<f64>(Variant(_8, 2), 3)) = 1871024844_u32 as f64;
_17 = _3 | _3;
place!(Field::<u16>(Variant(_8, 2), 2)) = _7 - _7;
match _12 {
0 => bb2,
1 => bb5,
2 => bb6,
3 => bb7,
10067055553904322535 => bb9,
_ => bb8
}
}
bb5 = {
_14 = _10 as f32;
_1 = (-1476498556_i32) as i8;
_10 = !(-108574656273710663_i64);
RET = 4230581303980845760_usize as i8;
_9 = false;
_15 = _12 as f64;
_1 = _9 as i8;
_8 = Adt22::Variant0 { fld0: _12,fld1: _10,fld2: _7 };
_10 = '\u{d52c9}' as i64;
_1 = -RET;
place!(Field::<i64>(Variant(_8, 0), 1)) = _10;
_11 = 9223372036854775807_isize & (-9223372036854775808_isize);
_13 = [_1,_2,_1];
place!(Field::<i64>(Variant(_8, 0), 1)) = _12 as i64;
_14 = Field::<i64>(Variant(_8, 0), 1) as f32;
Call(_14 = fn10(_1, _13, _8, _10), ReturnTo(bb4), UnwindUnreachable())
}
bb6 = {
_4 = 9223372036854775807_isize as u8;
_7 = 22491_i16 as u16;
RET = _1;
_7 = 3546_u16;
_2 = !RET;
_3 = !_4;
_10 = (-5814895555694819281_i64);
_7 = 5828_u16;
RET = '\u{a45c1}' as i8;
_6 = [926061273_i32,(-274983223_i32),239819699_i32];
_1 = _2;
_4 = !_3;
_13 = [_1,RET,RET];
_13 = [RET,RET,_1];
_12 = 10067055553904322535_u64;
_10 = -(-7785513720407388694_i64);
Call(_3 = fn9(_1, _7, _6, _2, _6, _12, _6, _10, _1, _2, _2), ReturnTo(bb3), UnwindUnreachable())
}
bb7 = {
RET = _2 * _1;
_1 = !RET;
_6 = [1243934899_i32,103664916_i32,1538039589_i32];
Goto(bb2)
}
bb8 = {
Return()
}
bb9 = {
place!(Field::<[i32; 3]>(Variant(_8, 2), 0)) = [(-1277500129_i32),1195558720_i32,(-504540396_i32)];
_8 = Adt22::Variant0 { fld0: _12,fld1: _10,fld2: _7 };
RET = 2520947712_u32 as i8;
_22 = Adt31 { fld0: Field::<u64>(Variant(_8, 0), 0),fld1: '\u{b0fdf}' };
_23.1 = Field::<i64>(Variant(_8, 0), 1) >> _12;
RET = _1 * _2;
_19 = [946449358_i32,1679262013_i32,(-136839995_i32)];
_2 = _10 as i8;
_21 = core::ptr::addr_of!(_12);
RET = _1 | _2;
_23.0.fld1 = _22.fld1;
_18 = &_21;
_23.0.fld0 = !(*_21);
(*_21) = Field::<u64>(Variant(_8, 0), 0) ^ _22.fld0;
_3 = !_17;
_23.0 = Adt31 { fld0: (*_21),fld1: _22.fld1 };
_7 = Field::<u16>(Variant(_8, 0), 2);
_22 = Adt31 { fld0: _12,fld1: _23.0.fld1 };
_2 = !RET;
Call(_10 = fn12(_22.fld1, Move(_5), _7, _3, Field::<i64>(Variant(_8, 0), 1), _17, _23.0, (*_21), _3, Move(_18), _17, _23.0.fld1), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_23.1 = _17 as i64;
_12 = !_23.0.fld0;
(*_21) = !_23.0.fld0;
_25 = -_11;
_22 = Adt31 { fld0: _12,fld1: _23.0.fld1 };
_23.1 = Field::<i64>(Variant(_8, 0), 1) - Field::<i64>(Variant(_8, 0), 1);
_5 = &mut _8;
_26 = _14 as isize;
place!(Field::<i64>(Variant(_8, 0), 1)) = -_23.1;
_23.3 = core::ptr::addr_of!(_22.fld0);
_21 = Move(_23.3);
match Field::<u64>(Variant((*_5), 0), 0) {
0 => bb4,
1 => bb11,
2 => bb12,
3 => bb13,
4 => bb14,
5 => bb15,
10067055553904322535 => bb17,
_ => bb16
}
}
bb11 = {
place!(Field::<[i32; 3]>(Variant(_8, 2), 0)) = [(-1277500129_i32),1195558720_i32,(-504540396_i32)];
_8 = Adt22::Variant0 { fld0: _12,fld1: _10,fld2: _7 };
RET = 2520947712_u32 as i8;
_22 = Adt31 { fld0: Field::<u64>(Variant(_8, 0), 0),fld1: '\u{b0fdf}' };
_23.1 = Field::<i64>(Variant(_8, 0), 1) >> _12;
RET = _1 * _2;
_19 = [946449358_i32,1679262013_i32,(-136839995_i32)];
_2 = _10 as i8;
_21 = core::ptr::addr_of!(_12);
RET = _1 | _2;
_23.0.fld1 = _22.fld1;
_18 = &_21;
_23.0.fld0 = !(*_21);
(*_21) = Field::<u64>(Variant(_8, 0), 0) ^ _22.fld0;
_3 = !_17;
_23.0 = Adt31 { fld0: (*_21),fld1: _22.fld1 };
_7 = Field::<u16>(Variant(_8, 0), 2);
_22 = Adt31 { fld0: _12,fld1: _23.0.fld1 };
_2 = !RET;
Call(_10 = fn12(_22.fld1, Move(_5), _7, _3, Field::<i64>(Variant(_8, 0), 1), _17, _23.0, (*_21), _3, Move(_18), _17, _23.0.fld1), ReturnTo(bb10), UnwindUnreachable())
}
bb12 = {
Return()
}
bb13 = {
RET = _2 * _1;
_1 = !RET;
_6 = [1243934899_i32,103664916_i32,1538039589_i32];
Goto(bb2)
}
bb14 = {
RET = _2 * _1;
_1 = !RET;
_6 = [1243934899_i32,103664916_i32,1538039589_i32];
Goto(bb2)
}
bb15 = {
_14 = _10 as f32;
_1 = (-1476498556_i32) as i8;
_10 = !(-108574656273710663_i64);
RET = 4230581303980845760_usize as i8;
_9 = false;
_15 = _12 as f64;
_1 = _9 as i8;
_8 = Adt22::Variant0 { fld0: _12,fld1: _10,fld2: _7 };
_10 = '\u{d52c9}' as i64;
_1 = -RET;
place!(Field::<i64>(Variant(_8, 0), 1)) = _10;
_11 = 9223372036854775807_isize & (-9223372036854775808_isize);
_13 = [_1,_2,_1];
place!(Field::<i64>(Variant(_8, 0), 1)) = _12 as i64;
_14 = Field::<i64>(Variant(_8, 0), 1) as f32;
Call(_14 = fn10(_1, _13, _8, _10), ReturnTo(bb4), UnwindUnreachable())
}
bb16 = {
_4 = Field::<u16>(Variant(_8, 0), 2) as u8;
_5 = &mut _8;
_14 = 2906851277_u32 as f32;
place!(Field::<u64>(Variant(_8, 0), 0)) = _12 & _12;
_6 = [268372309_i32,1460333729_i32,(-1067687389_i32)];
_6 = [333220372_i32,(-802392463_i32),(-541648853_i32)];
_11 = !(-9223372036854775808_isize);
place!(Field::<i64>(Variant(_8, 0), 1)) = -_10;
_5 = &mut _8;
place!(Field::<u16>(Variant((*_5), 0), 2)) = _7;
SetDiscriminant(_8, 2);
place!(Field::<f64>(Variant(_8, 2), 3)) = 1871024844_u32 as f64;
_17 = _3 | _3;
place!(Field::<u16>(Variant(_8, 2), 2)) = _7 - _7;
match _12 {
0 => bb2,
1 => bb5,
2 => bb6,
3 => bb7,
10067055553904322535 => bb9,
_ => bb8
}
}
bb17 = {
RET = _1 - _2;
_9 = Field::<u64>(Variant((*_5), 0), 0) <= _22.fld0;
place!(Field::<u64>(Variant((*_5), 0), 0)) = !_23.0.fld0;
_29.0.1 = 3537219643_u32 + 1238757190_u32;
place!(Field::<u16>(Variant(_8, 0), 2)) = _7 * _7;
_1 = -_2;
_28 = core::ptr::addr_of_mut!(_17);
_11 = _25 | _26;
_22.fld0 = _23.0.fld1 as u64;
_22.fld0 = !_12;
(*_28) = (-1905843195_i32) as u8;
_26 = _25;
place!(Field::<u16>(Variant(_8, 0), 2)) = _9 as u16;
_18 = &_21;
_31.2.0 = (-35170389163675631159518182084080315126_i128) | (-141218095991428082856815065250505263285_i128);
_31.1.0 = _22.fld1 > _22.fld1;
_29.1.fld1 = _22.fld1;
RET = _2 | _1;
_31.2.0 = !(-105980682133514639412427773390839539022_i128);
_1 = Field::<i64>(Variant(_8, 0), 1) as i8;
_31.1.1 = 4_usize;
_33 = [_31.1.1,_31.1.1,_31.1.1,_31.1.1,_31.1.1,_31.1.1,_31.1.1,_31.1.1];
_22.fld1 = _23.0.fld1;
_12 = Field::<u64>(Variant(_8, 0), 0) * _22.fld0;
_19 = [418986623_i32,1775276743_i32,1502418420_i32];
Goto(bb18)
}
bb18 = {
Call(_34 = dump_var(8_usize, 9_usize, Move(_9), 17_usize, Move(_17), 3_usize, Move(_3), 12_usize, Move(_12)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_34 = dump_var(8_usize, 7_usize, Move(_7), 4_usize, Move(_4), 2_usize, Move(_2), 11_usize, Move(_11)), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn9(mut _1: i8,mut _2: u16,mut _3: [i32; 3],mut _4: i8,mut _5: [i32; 3],mut _6: u64,mut _7: [i32; 3],mut _8: i64,mut _9: i8,mut _10: i8,mut _11: i8) -> u8 {
mir! {
type RET = u8;
let _12: &'static mut &'static u16;
let _13: (i128, usize);
let _14: usize;
let _15: Adt48;
let _16: bool;
let _17: *const u64;
let _18: isize;
let _19: bool;
let _20: isize;
let _21: i64;
let _22: bool;
let _23: u32;
let _24: i64;
let _25: (i128, usize);
let _26: [usize; 1];
let _27: &'static mut &'static u16;
let _28: &'static Adt39;
let _29: &'static mut &'static mut (bool, usize);
let _30: char;
let _31: isize;
let _32: (usize,);
let _33: (usize,);
let _34: isize;
let _35: (f64,);
let _36: &'static mut u16;
let _37: ((f64,), (i128, usize), f32, (f64,));
let _38: [i8; 3];
let _39: usize;
let _40: isize;
let _41: f64;
let _42: f64;
let _43: &'static mut Adt22;
let _44: ();
let _45: ();
{
RET = 251_u8 - 72_u8;
_5 = [(-29415851_i32),654241318_i32,(-646008124_i32)];
_4 = (-378234689_i32) as i8;
RET = 227_u8 ^ 99_u8;
_8 = 2370026111375327944_i64;
_6 = 3858032522174016191_u64;
_7 = [930494775_i32,70615206_i32,1558227241_i32];
_9 = RET as i8;
RET = !243_u8;
RET = 233_u8;
_2 = 59295_u16;
_5 = [1215553727_i32,(-515042064_i32),(-332757684_i32)];
_9 = _11;
_9 = !_10;
RET = !52_u8;
_6 = !8821338163655953133_u64;
_4 = true as i8;
_7 = _3;
_13 = ((-103374339549310473046367418551856713556_i128), 9110762243344775846_usize);
_8 = _1 as i64;
_4 = _10;
_13 = ((-67296932156165307379895947185750065961_i128), 1_usize);
_13 = ((-7314641595347727274382917212253466760_i128), 1_usize);
_13.0 = !10625164348712457308900615374840808778_i128;
_13 = (45220790326298134878445757414080817326_i128, 10422488964692300604_usize);
RET = 202_u8 << _4;
match _13.0 {
0 => bb1,
1 => bb2,
45220790326298134878445757414080817326 => bb4,
_ => bb3
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
_1 = _11;
_14 = !_13.1;
_13.1 = _14;
_13 = (100009912246853330725843521823808929349_i128, _14);
_13 = (54883210389599793766146126005103337537_i128, _14);
_5 = [(-1573155906_i32),(-837319068_i32),1116167128_i32];
RET = 213_u8;
_7 = [(-196119393_i32),2097052993_i32,575710604_i32];
_13.1 = _4 as usize;
_13 = (57075730962711755746907093382938054670_i128, _14);
_13 = (156993151756676791086186980719466342463_i128, _14);
_13 = (78959435249890406128845325149636372177_i128, _14);
_2 = RET as u16;
RET = 208_u8;
_16 = !true;
_13.0 = -(-42713376142806014802701521259574841580_i128);
_17 = core::ptr::addr_of!(_6);
(*_17) = 823916280722674677_u64;
Call(_9 = core::intrinsics::bswap(_11), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
(*_17) = _2 as u64;
_17 = core::ptr::addr_of!((*_17));
_17 = core::ptr::addr_of!((*_17));
_13.1 = !_14;
_7 = [(-1411002642_i32),(-2010495188_i32),1822589166_i32];
_9 = (-9223372036854775808_isize) as i8;
_5 = [968118316_i32,(-1799592266_i32),1505771269_i32];
_18 = 9223372036854775807_isize * 9223372036854775807_isize;
_8 = -904946719794472231_i64;
_13 = (126866907806141237156384627140802934126_i128, _14);
Goto(bb6)
}
bb6 = {
_6 = 11042590224009815555_u64 ^ 2499567032472549964_u64;
_9 = _16 as i8;
_13.0 = 26262199501870990779278988137339949068_i128;
_13.0 = !84971570491483056602143911001049181829_i128;
_13.1 = !_14;
_13.0 = RET as i128;
_20 = -_18;
_20 = (-1473864202_i32) as isize;
_7 = [(-2128095170_i32),9854953_i32,1576145378_i32];
_4 = _20 as i8;
_14 = _13.1;
_22 = !_16;
_19 = _22;
_19 = !_22;
_9 = '\u{14c00}' as i8;
_20 = _18 - _18;
_17 = core::ptr::addr_of!((*_17));
(*_17) = _14 as u64;
RET = 133_u8;
_4 = _11;
RET = 120_u8 >> _1;
_1 = _11 >> _11;
_11 = _16 as i8;
_8 = _4 as i64;
_16 = !_19;
_4 = _10;
Goto(bb7)
}
bb7 = {
_17 = core::ptr::addr_of!((*_17));
_19 = _16;
_23 = (-21280_i16) as u32;
_5 = [(-1318463739_i32),(-1431750764_i32),(-3663216_i32)];
(*_17) = 11553381299776166508_u64 | 10286955163976851724_u64;
_21 = RET as i64;
_24 = !_21;
_5 = _3;
_22 = RET < RET;
RET = (*_17) as u8;
_5 = [310771256_i32,(-642933779_i32),7931153_i32];
_16 = _22;
_13.1 = _23 as usize;
_25.1 = _14 - _14;
RET = !87_u8;
_13 = (161934534304759455067698112449485749103_i128, _14);
RET = 64_u8 - 38_u8;
_16 = _22;
_22 = _16;
_2 = _10 as u16;
RET = 224_u8 & 251_u8;
_24 = -_21;
_4 = _1 + _10;
_17 = core::ptr::addr_of!((*_17));
_8 = _24 << _10;
match _13.0 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb5,
161934534304759455067698112449485749103 => bb8,
_ => bb6
}
}
bb8 = {
_25.0 = _10 as i128;
_19 = _22 <= _16;
_16 = _22 | _19;
_14 = (*_17) as usize;
_31 = -_18;
_30 = '\u{d0eab}';
_18 = _23 as isize;
RET = 219_u8 & 249_u8;
(*_17) = !15078647641590862974_u64;
match _13.0 {
0 => bb1,
1 => bb6,
2 => bb9,
3 => bb10,
161934534304759455067698112449485749103 => bb12,
_ => bb11
}
}
bb9 = {
_1 = _11;
_14 = !_13.1;
_13.1 = _14;
_13 = (100009912246853330725843521823808929349_i128, _14);
_13 = (54883210389599793766146126005103337537_i128, _14);
_5 = [(-1573155906_i32),(-837319068_i32),1116167128_i32];
RET = 213_u8;
_7 = [(-196119393_i32),2097052993_i32,575710604_i32];
_13.1 = _4 as usize;
_13 = (57075730962711755746907093382938054670_i128, _14);
_13 = (156993151756676791086186980719466342463_i128, _14);
_13 = (78959435249890406128845325149636372177_i128, _14);
_2 = RET as u16;
RET = 208_u8;
_16 = !true;
_13.0 = -(-42713376142806014802701521259574841580_i128);
_17 = core::ptr::addr_of!(_6);
(*_17) = 823916280722674677_u64;
Call(_9 = core::intrinsics::bswap(_11), ReturnTo(bb5), UnwindUnreachable())
}
bb10 = {
_6 = 11042590224009815555_u64 ^ 2499567032472549964_u64;
_9 = _16 as i8;
_13.0 = 26262199501870990779278988137339949068_i128;
_13.0 = !84971570491483056602143911001049181829_i128;
_13.1 = !_14;
_13.0 = RET as i128;
_20 = -_18;
_20 = (-1473864202_i32) as isize;
_7 = [(-2128095170_i32),9854953_i32,1576145378_i32];
_4 = _20 as i8;
_14 = _13.1;
_22 = !_16;
_19 = _22;
_19 = !_22;
_9 = '\u{14c00}' as i8;
_20 = _18 - _18;
_17 = core::ptr::addr_of!((*_17));
(*_17) = _14 as u64;
RET = 133_u8;
_4 = _11;
RET = 120_u8 >> _1;
_1 = _11 >> _11;
_11 = _16 as i8;
_8 = _4 as i64;
_16 = !_19;
_4 = _10;
Goto(bb7)
}
bb11 = {
(*_17) = _2 as u64;
_17 = core::ptr::addr_of!((*_17));
_17 = core::ptr::addr_of!((*_17));
_13.1 = !_14;
_7 = [(-1411002642_i32),(-2010495188_i32),1822589166_i32];
_9 = (-9223372036854775808_isize) as i8;
_5 = [968118316_i32,(-1799592266_i32),1505771269_i32];
_18 = 9223372036854775807_isize * 9223372036854775807_isize;
_8 = -904946719794472231_i64;
_13 = (126866907806141237156384627140802934126_i128, _14);
Goto(bb6)
}
bb12 = {
_32.0 = _25.1;
_25.1 = _32.0;
_22 = _19;
_16 = !_19;
_19 = _22 | _16;
_9 = RET as i8;
_2 = _8 as u16;
_26 = [_25.1];
RET = !237_u8;
_2 = 30062_u16;
_25 = _13;
(*_17) = _20 as u64;
_9 = _32.0 as i8;
_3 = _5;
_33.0 = !_25.1;
_4 = 299025295079356105697176886506690054702_u128 as i8;
_33 = (_14,);
_13.1 = _33.0 | _14;
_37.1 = (_25.0, _13.1);
_21 = _20 as i64;
_33 = (_37.1.1,);
_37.3.0 = _25.0 as f64;
_9 = _10;
match _2 {
0 => bb11,
1 => bb9,
2 => bb3,
3 => bb8,
4 => bb5,
5 => bb13,
30062 => bb15,
_ => bb14
}
}
bb13 = {
(*_17) = _2 as u64;
_17 = core::ptr::addr_of!((*_17));
_17 = core::ptr::addr_of!((*_17));
_13.1 = !_14;
_7 = [(-1411002642_i32),(-2010495188_i32),1822589166_i32];
_9 = (-9223372036854775808_isize) as i8;
_5 = [968118316_i32,(-1799592266_i32),1505771269_i32];
_18 = 9223372036854775807_isize * 9223372036854775807_isize;
_8 = -904946719794472231_i64;
_13 = (126866907806141237156384627140802934126_i128, _14);
Goto(bb6)
}
bb14 = {
_6 = 11042590224009815555_u64 ^ 2499567032472549964_u64;
_9 = _16 as i8;
_13.0 = 26262199501870990779278988137339949068_i128;
_13.0 = !84971570491483056602143911001049181829_i128;
_13.1 = !_14;
_13.0 = RET as i128;
_20 = -_18;
_20 = (-1473864202_i32) as isize;
_7 = [(-2128095170_i32),9854953_i32,1576145378_i32];
_4 = _20 as i8;
_14 = _13.1;
_22 = !_16;
_19 = _22;
_19 = !_22;
_9 = '\u{14c00}' as i8;
_20 = _18 - _18;
_17 = core::ptr::addr_of!((*_17));
(*_17) = _14 as u64;
RET = 133_u8;
_4 = _11;
RET = 120_u8 >> _1;
_1 = _11 >> _11;
_11 = _16 as i8;
_8 = _4 as i64;
_16 = !_19;
_4 = _10;
Goto(bb7)
}
bb15 = {
_32 = _33;
_20 = _31;
_15 = Adt48::Variant1 { fld0: RET,fld1: _37.3,fld2: _31,fld3: _2,fld4: _37.1.1 };
_21 = _24 - _24;
_6 = 12961883766961972839_u64;
RET = Field::<u8>(Variant(_15, 1), 0) * Field::<u8>(Variant(_15, 1), 0);
_34 = _31;
_19 = !_22;
_9 = _13.0 as i8;
_37.1.1 = _2 as usize;
_37.0.0 = Field::<(f64,)>(Variant(_15, 1), 1).0;
_41 = -Field::<(f64,)>(Variant(_15, 1), 1).0;
place!(Field::<u8>(Variant(_15, 1), 0)) = RET | RET;
_8 = _6 as i64;
_33.0 = _32.0 & _14;
_21 = _24 | _24;
_23 = 603501054_u32;
_23 = Field::<u16>(Variant(_15, 1), 3) as u32;
_37.3.0 = _41 - _37.0.0;
_4 = _30 as i8;
_26 = [_37.1.1];
_26 = [_32.0];
_11 = _9;
_33.0 = _32.0 << _14;
_8 = _31 as i64;
_39 = _33.0 ^ _33.0;
Goto(bb16)
}
bb16 = {
Call(_44 = dump_var(9_usize, 20_usize, Move(_20), 9_usize, Move(_9), 16_usize, Move(_16), 33_usize, Move(_33)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_44 = dump_var(9_usize, 22_usize, Move(_22), 23_usize, Move(_23), 34_usize, Move(_34), 31_usize, Move(_31)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_44 = dump_var(9_usize, 25_usize, Move(_25), 2_usize, Move(_2), 21_usize, Move(_21), 6_usize, Move(_6)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_44 = dump_var(9_usize, 10_usize, Move(_10), 26_usize, Move(_26), 45_usize, _45, 45_usize, _45), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn10(mut _1: i8,mut _2: [i8; 3],mut _3: Adt22,mut _4: i64) -> f32 {
mir! {
type RET = f32;
let _5: Adt35;
let _6: [isize; 2];
let _7: &'static mut i32;
let _8: isize;
let _9: (i16, (bool, usize), (i128, usize));
let _10: i8;
let _11: (Adt31, i64, Adt39, *const u64);
let _12: &'static mut Adt22;
let _13: *const &'static mut u16;
let _14: &'static mut *const isize;
let _15: *mut (bool, usize);
let _16: &'static mut u16;
let _17: isize;
let _18: isize;
let _19: f64;
let _20: &'static mut (bool, usize);
let _21: (i16, (bool, usize), (i128, usize));
let _22: f32;
let _23: u8;
let _24: f64;
let _25: u32;
let _26: f32;
let _27: ((bool, usize), u8);
let _28: (bool, usize);
let _29: &'static [usize; 1];
let _30: bool;
let _31: &'static *const u64;
let _32: i32;
let _33: u16;
let _34: isize;
let _35: bool;
let _36: [usize; 8];
let _37: i16;
let _38: ();
let _39: ();
{
place!(Field::<u64>(Variant(_3, 0), 0)) = 9813755495215086134_u64;
SetDiscriminant(_3, 2);
place!(Field::<[isize; 2]>(Variant(_3, 2), 1)) = [(-9223372036854775808_isize),9223372036854775807_isize];
RET = 110807296549836586543021113590731801416_i128 as f32;
place!(Field::<[i32; 3]>(Variant(_3, 2), 0)) = [1072415383_i32,(-1938381046_i32),412644691_i32];
place!(Field::<i64>(Variant(_3, 2), 6)) = !_4;
place!(Field::<f64>(Variant(_3, 2), 3)) = 23065_i16 as f64;
_1 = Field::<f64>(Variant(_3, 2), 3) as i8;
_4 = '\u{8425}' as i64;
RET = (-14606_i16) as f32;
place!(Field::<i32>(Variant(_3, 2), 5)) = -867050690_i32;
place!(Field::<u16>(Variant(_3, 2), 2)) = 11113_u16;
place!(Field::<[i32; 3]>(Variant(_3, 2), 0)) = [Field::<i32>(Variant(_3, 2), 5),Field::<i32>(Variant(_3, 2), 5),Field::<i32>(Variant(_3, 2), 5)];
place!(Field::<u16>(Variant(_3, 2), 2)) = !31626_u16;
_1 = -(-99_i8);
place!(Field::<u16>(Variant(_3, 2), 2)) = 13082_u16;
place!(Field::<u8>(Variant(_3, 2), 4)) = _1 as u8;
place!(Field::<i32>(Variant(_3, 2), 5)) = (-584843292_i32) + 684324077_i32;
place!(Field::<i64>(Variant(_3, 2), 6)) = _4 - _4;
place!(Field::<u16>(Variant(_3, 2), 2)) = 8629_u16;
place!(Field::<[i32; 3]>(Variant(_3, 2), 0)) = [Field::<i32>(Variant(_3, 2), 5),Field::<i32>(Variant(_3, 2), 5),Field::<i32>(Variant(_3, 2), 5)];
RET = _4 as f32;
place!(Field::<[i32; 3]>(Variant(_3, 2), 0)) = [Field::<i32>(Variant(_3, 2), 5),Field::<i32>(Variant(_3, 2), 5),Field::<i32>(Variant(_3, 2), 5)];
place!(Field::<[isize; 2]>(Variant(_3, 2), 1)) = [(-69_isize),(-56_isize)];
_7 = &mut place!(Field::<i32>(Variant(_3, 2), 5));
match Field::<u16>(Variant(_3, 2), 2) {
0 => bb1,
1 => bb2,
2 => bb3,
8629 => bb5,
_ => bb4
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
_6 = [9223372036854775807_isize,(-9223372036854775808_isize)];
place!(Field::<u8>(Variant(_3, 2), 4)) = Field::<i64>(Variant(_3, 2), 6) as u8;
_7 = &mut place!(Field::<i32>(Variant(_3, 2), 5));
_3 = Adt22::Variant0 { fld0: 13459473438276469463_u64,fld1: _4,fld2: 20343_u16 };
RET = 318852670336298731427445624840998794193_u128 as f32;
RET = _4 as f32;
place!(Field::<i64>(Variant(_3, 0), 1)) = 1332912209_u32 as i64;
Goto(bb6)
}
bb6 = {
_9.1.0 = false;
place!(Field::<u16>(Variant(_3, 0), 2)) = 9428202186044015488_usize as u16;
_9.2 = ((-5440107464711019612196317379624107570_i128), 4778829349669413541_usize);
_9.1 = (true, _9.2.1);
_10 = _1 & _1;
_6 = [(-32_isize),(-9223372036854775808_isize)];
match _9.2.1 {
0 => bb1,
4778829349669413541 => bb8,
_ => bb7
}
}
bb7 = {
_6 = [9223372036854775807_isize,(-9223372036854775808_isize)];
place!(Field::<u8>(Variant(_3, 2), 4)) = Field::<i64>(Variant(_3, 2), 6) as u8;
_7 = &mut place!(Field::<i32>(Variant(_3, 2), 5));
_3 = Adt22::Variant0 { fld0: 13459473438276469463_u64,fld1: _4,fld2: 20343_u16 };
RET = 318852670336298731427445624840998794193_u128 as f32;
RET = _4 as f32;
place!(Field::<i64>(Variant(_3, 0), 1)) = 1332912209_u32 as i64;
Goto(bb6)
}
bb8 = {
_10 = _1;
_11.0.fld1 = '\u{10a31e}';
_9.0 = (-16686_i16) | 31215_i16;
_9.0 = (-16445_i16);
_9.1.1 = _9.2.1 << _9.0;
_11.1 = _4;
_11.3 = core::ptr::addr_of!(_11.0.fld0);
place!(Field::<u64>(Variant(_3, 0), 0)) = 8485928709026759477_u64;
_9.2 = (72548857851220813904988909536733214278_i128, _9.1.1);
_11.0 = Adt31 { fld0: Field::<u64>(Variant(_3, 0), 0),fld1: '\u{5c111}' };
_15 = core::ptr::addr_of_mut!(_9.1);
_8 = 9223372036854775807_isize;
place!(Field::<u64>(Variant(_3, 0), 0)) = !_11.0.fld0;
_8 = 60_isize;
SetDiscriminant(_3, 1);
_9.2.0 = 249_u8 as i128;
_11.3 = core::ptr::addr_of!(_11.0.fld0);
place!(Field::<u32>(Variant(_3, 1), 0)) = !460124596_u32;
_9.1.1 = _9.2.1;
_17 = _8;
Call((*_15) = fn11(_9.2.1, Move(_15), _2, Field::<u32>(Variant(_3, 1), 0), _11.0.fld1, _9.2, _6, _6, Move(_11.3), _8), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
place!(Field::<[isize; 2]>(Variant(_3, 1), 1)) = [_8,_17];
_11.0.fld1 = '\u{5a434}';
_8 = _17 ^ _17;
_9.2.0 = 86498034130303653106947327197394158697_i128 | (-41613655077690740847570213936527235419_i128);
_8 = _17 >> _4;
_11.1 = 46_u8 as i64;
_18 = -_8;
_10 = _1;
_11.1 = RET as i64;
_15 = core::ptr::addr_of_mut!(_9.1);
_9.2.0 = (-117037658065125395636241429903654949495_i128);
_9.2 = (84597199983857202025166012361422994041_i128, _9.1.1);
_9.1.1 = !_9.2.1;
_11.3 = core::ptr::addr_of!(_11.0.fld0);
(*_15) = (false, _9.2.1);
_9.0 = _8 as i16;
_2 = [_1,_1,_10];
_4 = -_11.1;
place!(Field::<i16>(Variant(_3, 1), 4)) = -_9.0;
(*_15).1 = _9.2.0 as usize;
Goto(bb10)
}
bb10 = {
place!(Field::<i128>(Variant(_3, 1), 5)) = _9.2.1 as i128;
_19 = _9.2.0 as f64;
place!(Field::<i128>(Variant(_3, 1), 5)) = !_9.2.0;
(*_15) = (true, _9.2.1);
_11.0 = Adt31 { fld0: 2250492563561291285_u64,fld1: '\u{60046}' };
RET = _11.0.fld0 as f32;
_21.2.0 = Field::<i128>(Variant(_3, 1), 5);
place!(Field::<u32>(Variant(_3, 1), 0)) = (*_15).0 as u32;
_3 = Adt22::Variant0 { fld0: _11.0.fld0,fld1: _11.1,fld2: 22397_u16 };
_21.1 = ((*_15).0, _9.2.1);
(*_15).0 = (*_15).1 == _9.1.1;
_9.1 = (_21.1.0, _9.2.1);
_11.3 = core::ptr::addr_of!(place!(Field::<u64>(Variant(_3, 0), 0)));
place!(Field::<u16>(Variant(_3, 0), 2)) = _19 as u16;
_21.1.0 = (*_15).1 < (*_15).1;
_10 = Field::<u64>(Variant(_3, 0), 0) as i8;
_12 = &mut _3;
place!(Field::<i64>(Variant(_3, 0), 1)) = _4 + _11.1;
_4 = Field::<i64>(Variant(_3, 0), 1) ^ Field::<i64>(Variant(_3, 0), 1);
_25 = 3176290967_u32;
_9.0 = -19646_i16;
_21 = (_9.0, (*_15), _9.2);
(*_15).0 = _25 < _25;
Goto(bb11)
}
bb11 = {
_26 = Field::<u64>(Variant((*_12), 0), 0) as f32;
_21.2.0 = -_9.2.0;
_9.2.0 = _9.1.0 as i128;
_4 = -Field::<i64>(Variant(_3, 0), 1);
_17 = _8;
Goto(bb12)
}
bb12 = {
_21.2 = (_9.2.0, (*_15).1);
_9 = (_21.0, _21.1, _21.2);
_8 = !_18;
_27.0 = ((*_15).0, _9.1.1);
_27.1 = 105298939911005052632177789480364211678_u128 as u8;
_9.1 = (_27.0.0, _9.2.1);
SetDiscriminant(_3, 0);
_27.0 = _9.1;
_28.0 = !_27.0.0;
_28 = (_9.1.0, _21.1.1);
_20 = &mut (*_15);
_11.3 = core::ptr::addr_of!(_11.0.fld0);
_4 = _9.1.1 as i64;
_32 = 1064708855_i32 << _27.1;
_9.1.0 = !_28.0;
(*_20).1 = !_9.2.1;
place!(Field::<u16>(Variant(_3, 0), 2)) = 54367_u16 * 7955_u16;
place!(Field::<u64>(Variant(_3, 0), 0)) = _11.0.fld0 - _11.0.fld0;
place!(Field::<i64>(Variant(_3, 0), 1)) = _4 << (*_15).1;
_4 = Field::<i64>(Variant(_3, 0), 1);
_9.2.1 = (*_15).1;
_11.1 = -Field::<i64>(Variant(_3, 0), 1);
_24 = _10 as f64;
_21 = _9;
_11.3 = core::ptr::addr_of!(_11.0.fld0);
(*_15).0 = (*_15).1 == _28.1;
_27.0.0 = _9.1.0;
Goto(bb13)
}
bb13 = {
_22 = -RET;
_9.1.1 = _27.0.1 & _21.2.1;
_9.2.0 = _21.2.0 << (*_15).1;
_27.0.0 = _21.1.0 ^ _21.1.0;
_11.0.fld1 = '\u{10d2fe}';
_21.2.1 = _27.0.1;
_4 = _11.1;
Goto(bb14)
}
bb14 = {
_9.2.0 = !_21.2.0;
_11.3 = core::ptr::addr_of!(_11.0.fld0);
_15 = core::ptr::addr_of_mut!((*_15));
_20 = &mut _9.1;
RET = _22 * _22;
_11.0.fld1 = '\u{8293a}';
_2 = [_10,_1,_10];
(*_20).1 = 133438279399404815583319221168427021504_u128 as usize;
_9.2.1 = _17 as usize;
_20 = &mut _28;
_9.1.1 = (*_20).1;
_27.0 = (_9.1.0, (*_15).1);
_2 = [_1,_10,_10];
_30 = !_27.0.0;
_30 = _9.1.0 ^ _9.1.0;
_15 = core::ptr::addr_of_mut!(_27.0);
_35 = _11.1 != _4;
Goto(bb15)
}
bb15 = {
Call(_38 = dump_var(10_usize, 35_usize, Move(_35), 6_usize, Move(_6), 25_usize, Move(_25), 32_usize, Move(_32)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_38 = dump_var(10_usize, 17_usize, Move(_17), 30_usize, Move(_30), 28_usize, Move(_28), 21_usize, Move(_21)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn11(mut _1: usize,mut _2: *mut (bool, usize),mut _3: [i8; 3],mut _4: u32,mut _5: char,mut _6: (i128, usize),mut _7: [isize; 2],mut _8: [isize; 2],mut _9: *const u64,mut _10: isize) -> (bool, usize) {
mir! {
type RET = (bool, usize);
let _11: isize;
let _12: ((bool, usize), u8);
let _13: usize;
let _14: [char; 6];
let _15: i64;
let _16: char;
let _17: bool;
let _18: f32;
let _19: (&'static mut (bool, usize),);
let _20: ((*const i32, u32, usize), Adt31);
let _21: Adt22;
let _22: [i128; 3];
let _23: [isize; 2];
let _24: [i128; 3];
let _25: char;
let _26: ();
let _27: ();
{
RET.1 = _1 * _6.1;
_1 = RET.1;
_6.0 = -45827099433630262825204579939261445635_i128;
match _10 {
0 => bb1,
1 => bb2,
60 => bb4,
_ => bb3
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
match _10 {
0 => bb5,
60 => bb7,
_ => bb6
}
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
RET = (false, _6.1);
_7 = [_10,_10];
_2 = core::ptr::addr_of_mut!(RET);
_10 = 9223372036854775807_isize << RET.1;
_3 = [18_i8,(-4_i8),64_i8];
_7 = _8;
_11 = _10;
_12 = ((*_2), 5_u8);
(*_2).0 = _12.0.0;
_3 = [(-6_i8),(-79_i8),(-33_i8)];
(*_2).1 = _4 as usize;
_8 = [_10,_11];
_8 = _7;
Call(_13 = core::intrinsics::transmute(_1), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
_7 = [_11,_11];
RET = (_12.0.0, _13);
_12.0 = (RET.0, _13);
_5 = '\u{238c1}';
RET.0 = !_12.0.0;
RET.0 = _12.0.0;
_12.1 = !203_u8;
_14 = [_5,_5,_5,_5,_5,_5];
RET = _12.0;
RET = _12.0;
RET = (_12.0.0, _1);
_5 = '\u{44ec3}';
(*_2).1 = !_13;
RET.1 = !_12.0.1;
_4 = 140226219354788022125945502158402043737_u128 as u32;
_12.0.1 = _6.1 | (*_2).1;
RET = (_12.0.0, _1);
RET.1 = 278937222981684384436819865408894765132_u128 as usize;
_8 = _7;
_8 = [_10,_11];
_12 = ((*_2), 30_u8);
_6 = ((-109191312038679543076466237629942367040_i128), RET.1);
_13 = _1;
_14 = [_5,_5,_5,_5,_5,_5];
Goto(bb9)
}
bb9 = {
_12.1 = 79_u8;
_4 = 1022273312_u32;
RET.0 = _12.0.0;
_18 = _11 as f32;
_3 = [29_i8,(-103_i8),(-54_i8)];
RET.0 = _13 >= _1;
_6 = ((-46324098229104171685491075140982283119_i128), _1);
_12.0 = ((*_2).0, _13);
_20.1.fld1 = _5;
_3 = [109_i8,49_i8,8_i8];
_19.0 = &mut RET;
_8 = [_11,_11];
RET = _12.0;
(*_2).0 = !_12.0.0;
_12 = ((*_2), 90_u8);
_17 = _12.1 != _12.1;
RET = _12.0;
_12.0.0 = !RET.0;
_16 = _5;
_20.0.1 = _6.0 as u32;
_2 = core::ptr::addr_of_mut!(RET);
_12.0.0 = _17 != _17;
RET.0 = _6.1 >= (*_2).1;
_20.1.fld0 = 12683111722854032784_u64;
Goto(bb10)
}
bb10 = {
Call(_26 = dump_var(11_usize, 14_usize, Move(_14), 10_usize, Move(_10), 17_usize, Move(_17), 12_usize, Move(_12)), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
Call(_26 = dump_var(11_usize, 3_usize, Move(_3), 16_usize, Move(_16), 8_usize, Move(_8), 27_usize, _27), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn12(mut _1: char,mut _2: &'static mut Adt22,mut _3: u16,mut _4: u8,mut _5: i64,mut _6: u8,mut _7: Adt31,mut _8: u64,mut _9: u8,mut _10: &'static *const u64,mut _11: u8,mut _12: char) -> i64 {
mir! {
type RET = i64;
let _13: &'static mut i32;
let _14: f64;
let _15: [char; 6];
let _16: char;
let _17: ((f64,), (i128, usize), f32, (f64,));
let _18: f32;
let _19: u16;
let _20: *mut (bool, usize);
let _21: (char, &'static mut isize);
let _22: (i16, (bool, usize), (i128, usize));
let _23: f64;
let _24: [usize; 1];
let _25: (char, &'static mut isize);
let _26: bool;
let _27: &'static &'static *const u64;
let _28: bool;
let _29: [i32; 3];
let _30: f64;
let _31: u8;
let _32: [usize; 1];
let _33: char;
let _34: [i8; 3];
let _35: &'static mut Adt35;
let _36: (i128, usize);
let _37: u32;
let _38: isize;
let _39: &'static i64;
let _40: ((f64,), (i128, usize), f32, (f64,));
let _41: *mut (bool, usize);
let _42: ([i32; 3], i16, (i128, usize));
let _43: [char; 6];
let _44: &'static mut &'static *const u64;
let _45: u16;
let _46: (&'static mut (bool, usize),);
let _47: ((*const i32, u32, usize), *const *mut u8, &'static mut i32);
let _48: f64;
let _49: char;
let _50: ();
let _51: ();
{
_3 = 47893_u16;
_9 = 1469390022_i32 as u8;
_5 = (-1573922502282715863_i64);
_8 = _3 as u64;
RET = 2054763059_u32 as i64;
_8 = 331932645172442273826295653707229681802_u128 as u64;
_8 = _7.fld0 ^ _7.fld0;
_4 = !_6;
_12 = _7.fld1;
_5 = !RET;
_7 = Adt31 { fld0: _8,fld1: _1 };
_1 = _7.fld1;
_8 = _7.fld0 - _7.fld0;
RET = _5 << _6;
_14 = 333441366307138154746730825024580657971_u128 as f64;
RET = _5 + _5;
_3 = !18602_u16;
_7.fld0 = _8 ^ _8;
_5 = RET;
_9 = _4 * _11;
Call(_11 = core::intrinsics::bswap(_9), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_1 = _12;
_11 = (-9223372036854775808_isize) as u8;
RET = _5 - _5;
_11 = _4 + _9;
_8 = _7.fld0 ^ _7.fld0;
_15 = [_7.fld1,_1,_1,_12,_1,_1];
_15 = [_7.fld1,_1,_7.fld1,_7.fld1,_1,_1];
_1 = _7.fld1;
_14 = 66_i8 as f64;
_6 = !_9;
_1 = _7.fld1;
_9 = !_6;
_4 = _9;
_11 = _4 & _4;
_11 = _8 as u8;
_15 = [_12,_7.fld1,_12,_1,_7.fld1,_12];
_14 = 306971392_i32 as f64;
_15 = [_7.fld1,_12,_7.fld1,_1,_7.fld1,_1];
_5 = !RET;
_7.fld1 = _12;
_8 = !_7.fld0;
_15 = [_1,_1,_12,_7.fld1,_7.fld1,_7.fld1];
Goto(bb2)
}
bb2 = {
RET = _5 & _5;
_7.fld0 = !_8;
_14 = 106_i8 as f64;
_8 = 16227_i16 as u64;
_17.2 = _14 as f32;
_17.0 = (_14,);
Call(_17.3 = fn13(_11, _11, _5, _7, _4, _4, _11, _17.2), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_17.1.1 = _17.2 as usize;
_17.1.0 = (-135500213857133686625965185768328160960_i128) - 76919119219945754665372620716899600716_i128;
_17.0 = (_17.3.0,);
_16 = _7.fld1;
RET = _5;
_15 = [_1,_16,_12,_7.fld1,_1,_16];
_16 = _1;
_15 = [_12,_16,_16,_7.fld1,_12,_7.fld1];
_4 = _11 * _11;
_14 = _17.0.0 - _17.0.0;
_8 = _7.fld0;
RET = _5 ^ _5;
_9 = !_11;
_4 = _9;
_15 = [_12,_16,_1,_7.fld1,_12,_16];
_17.3 = (_17.0.0,);
_17.2 = 1879388698_u32 as f32;
_7.fld0 = !_8;
_18 = _17.2 * _17.2;
_18 = _17.2;
_17.0.0 = _14;
_17.3 = (_14,);
_5 = _17.1.1 as i64;
_17.3.0 = 122_isize as f64;
_19 = !_3;
_7.fld0 = _8 * _8;
_18 = _17.2 * _17.2;
_3 = _19;
_17.3.0 = _14 - _17.0.0;
Goto(bb4)
}
bb4 = {
_17.0.0 = 50_isize as f64;
_18 = -_17.2;
_12 = _1;
_3 = _19;
_7.fld0 = !_8;
_5 = !RET;
_3 = 26_i8 as u16;
_16 = _7.fld1;
_4 = _9;
_14 = -_17.3.0;
_17.1.0 = 19731819676441303318675617723793660399_i128 << _11;
_19 = _3 | _3;
_22.1.1 = _17.1.1 & _17.1.1;
_7.fld1 = _1;
RET = _18 as i64;
_23 = -_14;
_22.0 = true as i16;
_19 = _17.1.0 as u16;
_7.fld1 = _1;
_17.2 = _18;
_22.1.1 = _17.1.1;
Goto(bb5)
}
bb5 = {
_17.1.0 = !(-118015148777122854995187252412230266062_i128);
Goto(bb6)
}
bb6 = {
_22.1 = (true, _17.1.1);
_22.0 = (-96071333_i32) as i16;
_26 = _23 <= _17.3.0;
_17.0 = (_14,);
_22.1.0 = !_26;
_7.fld1 = _16;
RET = _5 + _5;
_17.1 = (126124559108299564907527305331793637095_i128, _22.1.1);
RET = _5;
_5 = _22.0 as i64;
Goto(bb7)
}
bb7 = {
_21.0 = _12;
_11 = !_4;
_7.fld1 = _16;
_17.3 = (_17.0.0,);
_24 = [_17.1.1];
_23 = _17.0.0 - _17.3.0;
_25.0 = _1;
_22.1.1 = !_17.1.1;
_20 = core::ptr::addr_of_mut!(_22.1);
Goto(bb8)
}
bb8 = {
_12 = _1;
(*_20).1 = _17.1.1;
(*_20).1 = RET as usize;
_22.1.0 = !_26;
_24 = [(*_20).1];
_9 = 2540878067_u32 as u8;
_17.3.0 = _11 as f64;
_3 = _19 & _19;
RET = _5;
_22.2.1 = !(*_20).1;
_17.3 = (_17.0.0,);
_23 = _14 * _17.3.0;
(*_20) = (_26, _22.2.1);
_7.fld0 = _8 & _8;
_22.2.1 = (*_20).1 ^ (*_20).1;
(*_20).0 = !_26;
_19 = _3;
_20 = core::ptr::addr_of_mut!((*_20));
Goto(bb9)
}
bb9 = {
_16 = _12;
_18 = _22.1.1 as f32;
Goto(bb10)
}
bb10 = {
_22.1.0 = !_26;
_17.3 = (_17.0.0,);
_28 = _26 < _26;
_33 = _25.0;
_22.1 = (_28, _22.2.1);
_32 = [_22.1.1];
_22.1.0 = _26 & _28;
_32 = [(*_20).1];
_17.2 = _19 as f32;
_12 = _21.0;
_22.2 = _17.1;
_40.0 = (_23,);
_18 = -_17.2;
(*_20).1 = _17.1.1 & _17.1.1;
_16 = _1;
match _22.2.0 {
126124559108299564907527305331793637095 => bb11,
_ => bb7
}
}
bb11 = {
_40.0 = (_17.3.0,);
_18 = _17.2;
_34 = [(-45_i8),120_i8,99_i8];
(*_20).1 = !_22.2.1;
_40.0.0 = _5 as f64;
_36.1 = _7.fld0 as usize;
_25.0 = _12;
_19 = _4 as u16;
_38 = 9223372036854775807_isize ^ (-9223372036854775808_isize);
_37 = 3523182324_u32;
_16 = _25.0;
_17 = (_40.0, _22.2, _18, _40.0);
RET = !_5;
_40.3.0 = 95_i8 as f64;
_40.1.1 = !_36.1;
(*_20).1 = !_40.1.1;
_4 = _23 as u8;
_40.1.0 = _22.2.0;
match _17.1.0 {
0 => bb7,
1 => bb12,
126124559108299564907527305331793637095 => bb14,
_ => bb13
}
}
bb12 = {
_17.1.1 = _17.2 as usize;
_17.1.0 = (-135500213857133686625965185768328160960_i128) - 76919119219945754665372620716899600716_i128;
_17.0 = (_17.3.0,);
_16 = _7.fld1;
RET = _5;
_15 = [_1,_16,_12,_7.fld1,_1,_16];
_16 = _1;
_15 = [_12,_16,_16,_7.fld1,_12,_7.fld1];
_4 = _11 * _11;
_14 = _17.0.0 - _17.0.0;
_8 = _7.fld0;
RET = _5 ^ _5;
_9 = !_11;
_4 = _9;
_15 = [_12,_16,_1,_7.fld1,_12,_16];
_17.3 = (_17.0.0,);
_17.2 = 1879388698_u32 as f32;
_7.fld0 = !_8;
_18 = _17.2 * _17.2;
_18 = _17.2;
_17.0.0 = _14;
_17.3 = (_14,);
_5 = _17.1.1 as i64;
_17.3.0 = 122_isize as f64;
_19 = !_3;
_7.fld0 = _8 * _8;
_18 = _17.2 * _17.2;
_3 = _19;
_17.3.0 = _14 - _17.0.0;
Goto(bb4)
}
bb13 = {
_1 = _12;
_11 = (-9223372036854775808_isize) as u8;
RET = _5 - _5;
_11 = _4 + _9;
_8 = _7.fld0 ^ _7.fld0;
_15 = [_7.fld1,_1,_1,_12,_1,_1];
_15 = [_7.fld1,_1,_7.fld1,_7.fld1,_1,_1];
_1 = _7.fld1;
_14 = 66_i8 as f64;
_6 = !_9;
_1 = _7.fld1;
_9 = !_6;
_4 = _9;
_11 = _4 & _4;
_11 = _8 as u8;
_15 = [_12,_7.fld1,_12,_1,_7.fld1,_12];
_14 = 306971392_i32 as f64;
_15 = [_7.fld1,_12,_7.fld1,_1,_7.fld1,_1];
_5 = !RET;
_7.fld1 = _12;
_8 = !_7.fld0;
_15 = [_1,_1,_12,_7.fld1,_7.fld1,_7.fld1];
Goto(bb2)
}
bb14 = {
_36.1 = !(*_20).1;
_40.2 = -_17.2;
RET = _22.0 as i64;
_41 = Move(_20);
_22.2 = (_17.1.0, _22.1.1);
_31 = _4 >> _4;
_39 = &_5;
_11 = _28 as u8;
_17.0 = (_14,);
_47.0.2 = _22.2.1;
Goto(bb15)
}
bb15 = {
Call(_50 = dump_var(12_usize, 19_usize, Move(_19), 12_usize, Move(_12), 28_usize, Move(_28), 38_usize, Move(_38)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_50 = dump_var(12_usize, 26_usize, Move(_26), 1_usize, Move(_1), 16_usize, Move(_16), 8_usize, Move(_8)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_50 = dump_var(12_usize, 9_usize, Move(_9), 31_usize, Move(_31), 33_usize, Move(_33), 51_usize, _51), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn13(mut _1: u8,mut _2: u8,mut _3: i64,mut _4: Adt31,mut _5: u8,mut _6: u8,mut _7: u8,mut _8: f32) -> (f64,) {
mir! {
type RET = (f64,);
let _9: (f64,);
let _10: (Adt31, i64, Adt39, *const u64);
let _11: u16;
let _12: f32;
let _13: &'static u128;
let _14: f64;
let _15: [usize; 8];
let _16: ((bool, usize), u8);
let _17: [i8; 3];
let _18: i64;
let _19: f64;
let _20: bool;
let _21: ((f64,), (i128, usize), f32, (f64,));
let _22: ([i32; 3], i16, (i128, usize));
let _23: [usize; 1];
let _24: i64;
let _25: usize;
let _26: isize;
let _27: i32;
let _28: f32;
let _29: char;
let _30: bool;
let _31: f32;
let _32: isize;
let _33: u8;
let _34: bool;
let _35: ((i128, usize), &'static u128, *const u64);
let _36: f32;
let _37: ();
let _38: ();
{
_4.fld1 = '\u{4a4bb}';
_2 = _7 >> _7;
_3 = (-6195661611852890539_i64);
_4 = Adt31 { fld0: 7670069238625334347_u64,fld1: '\u{27b59}' };
RET.0 = 2214003139_u32 as f64;
_6 = !_1;
RET.0 = _4.fld0 as f64;
_1 = _5;
_4.fld1 = '\u{8d096}';
_4 = Adt31 { fld0: 2597016675691605838_u64,fld1: '\u{8cba}' };
_4 = Adt31 { fld0: 13432171477077970975_u64,fld1: '\u{d2dc9}' };
_6 = true as u8;
_8 = 80_i8 as f32;
RET.0 = 26296_u16 as f64;
_10.1 = _7 as i64;
_9 = (RET.0,);
_1 = _2;
_10.0.fld1 = _4.fld1;
RET.0 = _9.0;
_10.0.fld1 = _4.fld1;
match _4.fld0 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb5,
5 => bb6,
6 => bb7,
13432171477077970975 => bb9,
_ => bb8
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
_1 = _7;
_7 = _1 - _5;
_9.0 = 15481392932454954584_usize as f64;
_10.0 = Adt31 { fld0: _4.fld0,fld1: _4.fld1 };
_5 = !_7;
_11 = 18044_u16 & 24046_u16;
_3 = _10.1;
_6 = _2;
_4.fld1 = _10.0.fld1;
_12 = 1773_i16 as f32;
Call(_4.fld0 = fn14(_2, _2, _7, _6, _5, _5, RET.0), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_10.0 = _4;
RET.0 = -_9.0;
_8 = _12 * _12;
_9.0 = -RET.0;
_10.1 = 14524_i16 as i64;
_8 = -_12;
_3 = _10.1;
_4.fld0 = _10.0.fld0 - _10.0.fld0;
_16.0.0 = !false;
_3 = _11 as i64;
_10.3 = core::ptr::addr_of!(_4.fld0);
_7 = 9223372036854775807_isize as u8;
_16.1 = _5 & _1;
_15 = [2_usize,8124809933834982027_usize,0_usize,2_usize,0_usize,2398961975882054528_usize,16969705087513783298_usize,9337681885438116489_usize];
_2 = _6 & _16.1;
Goto(bb11)
}
bb11 = {
_16.0 = (false, 7_usize);
_1 = _16.1 >> _10.0.fld0;
_17 = [50_i8,(-11_i8),(-72_i8)];
RET = (_9.0,);
_3 = _10.1;
_16.0 = (true, 1_usize);
_2 = _8 as u8;
RET = (_9.0,);
_1 = !_5;
RET.0 = _9.0 * _9.0;
RET = (_9.0,);
_1 = !_6;
_21.1.1 = _16.0.1;
match _16.0.1 {
0 => bb1,
2 => bb7,
1 => bb12,
_ => bb10
}
}
bb12 = {
_21.3 = (_9.0,);
_7 = 9223372036854775807_isize as u8;
_21.0 = (_9.0,);
_22.2.1 = _16.0.1 - _21.1.1;
_10.3 = core::ptr::addr_of!(_4.fld0);
_21.1 = ((-126543821481709029255864452469645971771_i128), _22.2.1);
_16.0.0 = true;
_21.2 = -_8;
_16.0 = (true, _22.2.1);
_14 = -RET.0;
_2 = _16.1 + _1;
_16.0 = (false, _21.1.1);
_4.fld0 = _10.0.fld0;
RET.0 = _9.0 + _9.0;
match _21.1.0 {
0 => bb7,
1 => bb2,
213738545439229434207510154962122239685 => bb13,
_ => bb10
}
}
bb13 = {
RET.0 = (-41_i8) as f64;
_18 = -_10.1;
_22.2 = (_21.1.0, _21.1.1);
_9.0 = _6 as f64;
_20 = _1 <= _16.1;
_21 = (_9, _22.2, _12, _9);
_22.2.0 = _21.1.0 + _21.1.0;
_29 = _4.fld1;
_21.0.0 = _9.0 + _21.3.0;
_9.0 = _11 as f64;
_8 = _12 + _12;
_19 = _21.3.0;
_9.0 = _10.0.fld0 as f64;
_28 = _21.2;
_26 = (-92_isize);
_4 = _10.0;
_27 = _11 as i32;
_10.1 = _3 << _2;
_27 = 87032742_i32 | 250276351_i32;
_24 = _10.1;
_27 = !638863141_i32;
_22.0 = [_27,_27,_27];
_22.0 = [_27,_27,_27];
_25 = !_16.0.1;
match _21.1.0 {
0 => bb8,
1 => bb2,
213738545439229434207510154962122239685 => bb14,
_ => bb7
}
}
bb14 = {
_16.0.1 = _22.2.1;
_21.3.0 = _21.0.0;
_4.fld0 = !_10.0.fld0;
_16.0.1 = _22.2.1;
_21.0 = _21.3;
_10.0.fld0 = !_4.fld0;
_20 = _16.0.0;
_9 = _21.3;
_2 = (-125_i8) as u8;
_3 = _10.1;
_20 = !_16.0.0;
_15 = [_16.0.1,_22.2.1,_16.0.1,_16.0.1,_25,_21.1.1,_21.1.1,_25];
_8 = -_12;
_22.0 = [_27,_27,_27];
_33 = _1;
_16.0.1 = _3 as usize;
RET.0 = _21.3.0;
_22.2 = (_21.1.0, _16.0.1);
_4.fld1 = _10.0.fld1;
_34 = _16.1 == _1;
_30 = _34;
Goto(bb15)
}
bb15 = {
Call(_37 = dump_var(13_usize, 25_usize, Move(_25), 24_usize, Move(_24), 11_usize, Move(_11), 27_usize, Move(_27)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_37 = dump_var(13_usize, 18_usize, Move(_18), 26_usize, Move(_26), 16_usize, Move(_16), 30_usize, Move(_30)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_37 = dump_var(13_usize, 1_usize, Move(_1), 20_usize, Move(_20), 38_usize, _38, 38_usize, _38), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn14(mut _1: u8,mut _2: u8,mut _3: u8,mut _4: u8,mut _5: u8,mut _6: u8,mut _7: f64) -> u64 {
mir! {
type RET = u64;
let _8: Adt35;
let _9: &'static mut Adt22;
let _10: isize;
let _11: Adt22;
let _12: ((char, &'static mut isize), (char, &'static mut isize), *mut *mut isize);
let _13: i64;
let _14: char;
let _15: &'static mut &'static *const u64;
let _16: *const u64;
let _17: *const isize;
let _18: (&'static mut (bool, usize),);
let _19: Adt59;
let _20: [i8; 3];
let _21: ();
let _22: ();
{
_1 = !_2;
RET = '\u{c1443}' as u64;
RET = 7589882699225852090_usize as u64;
_5 = _1 ^ _4;
_4 = _6;
_4 = _3;
_4 = _2;
_4 = !_5;
RET = 5836320070265421243_u64 >> _2;
_4 = 1151653654_u32 as u8;
_6 = _1 * _5;
_4 = !_6;
_7 = (-9223372036854775808_isize) as f64;
RET = !3456306585503646713_u64;
_7 = 14437696036772832823_usize as f64;
_4 = _5;
_3 = RET as u8;
_5 = !_2;
RET = _5 as u64;
_7 = 649414629_u32 as f64;
_1 = 131464914913166336864267959795427833490_i128 as u8;
RET = 949735579422664365_u64;
_6 = !_4;
_1 = _4 << _4;
_7 = 74880661937968755321827915899806352147_i128 as f64;
_3 = 1138305175_i32 as u8;
RET = 17046183184421530922_u64 & 14623808597804244987_u64;
_1 = !_6;
_6 = _5;
Call(_7 = fn15(_6, _2, _1, _2, _4), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_10 = 9223372036854775807_isize;
_7 = 1_i8 as f64;
_10 = (-14665_i16) as isize;
RET = (-56800591697632885442643021070078634695_i128) as u64;
RET = 1552273583321070281_u64;
RET = (-23460_i16) as u64;
RET = !1321805528152915073_u64;
_1 = _5;
_3 = !_4;
RET = !11543148282570239178_u64;
_4 = !_2;
_2 = _10 as u8;
_12.0.1 = &mut _10;
RET = 14897953506105254952_u64 & 17572368721513694789_u64;
_11 = Adt22::Variant0 { fld0: RET,fld1: (-5965512988723103960_i64),fld2: 40264_u16 };
_12.1.1 = Move(_12.0.1);
_12.1.0 = '\u{ad01f}';
Call(_12.0.0 = fn16(_1, _4, _4), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
place!(Field::<i64>(Variant(_11, 0), 1)) = 831284821_u32 as i64;
place!(Field::<u64>(Variant(_11, 0), 0)) = RET;
_12.0.0 = _12.1.0;
_12.1.1 = &mut _10;
_13 = Field::<i64>(Variant(_11, 0), 1);
_14 = _12.0.0;
_7 = (-41979557378742576865617846437812079871_i128) as f64;
_3 = _5;
Goto(bb3)
}
bb3 = {
_12.1.1 = &mut _10;
Goto(bb4)
}
bb4 = {
RET = !Field::<u64>(Variant(_11, 0), 0);
_6 = _3;
_14 = _12.0.0;
_17 = core::ptr::addr_of!(_10);
_4 = true as u8;
place!(Field::<u16>(Variant(_11, 0), 2)) = 22932_u16 + 3788_u16;
_4 = !_6;
(*_17) = _13 as isize;
_12.0.1 = Move(_12.1.1);
place!(Field::<u64>(Variant(_11, 0), 0)) = RET << _4;
_2 = 5_usize as u8;
_14 = _12.1.0;
RET = Field::<u64>(Variant(_11, 0), 0);
_7 = Field::<i64>(Variant(_11, 0), 1) as f64;
_12.1.1 = &mut _10;
place!(Field::<i64>(Variant(_11, 0), 1)) = _13;
_9 = &mut _11;
Goto(bb5)
}
bb5 = {
Call(_21 = dump_var(14_usize, 5_usize, Move(_5), 3_usize, Move(_3), 14_usize, Move(_14), 4_usize, Move(_4)), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn15(mut _1: u8,mut _2: u8,mut _3: u8,mut _4: u8,mut _5: u8) -> f64 {
mir! {
type RET = f64;
let _6: f64;
let _7: f64;
let _8: &'static &'static *const u64;
let _9: isize;
let _10: bool;
let _11: &'static *const isize;
let _12: Adt35;
let _13: isize;
let _14: (&'static [usize; 1], u64, [i32; 3], ([i32; 3], i16, (i128, usize)));
let _15: [usize; 8];
let _16: *mut [isize; 2];
let _17: bool;
let _18: (i128, i16, (bool, usize), &'static char);
let _19: *const &'static mut u16;
let _20: ([usize; 1], i8, &'static mut i32, &'static mut &'static *const u64);
let _21: *mut *mut isize;
let _22: ((f64,), (i128, usize), f32, (f64,));
let _23: u64;
let _24: f32;
let _25: i32;
let _26: ();
let _27: ();
{
RET = (-39746455681091562_i64) as f64;
RET = _3 as f64;
RET = 9223372036854775807_isize as f64;
RET = 56356_u16 as f64;
_5 = _1;
_4 = true as u8;
_4 = _3;
_4 = !_3;
_2 = !_4;
RET = (-4251_i16) as f64;
_2 = !_3;
RET = 3408436365867257845_usize as f64;
_5 = 20092_i16 as u8;
RET = 5788967450924514421_i64 as f64;
RET = 435493088_u32 as f64;
_2 = (-7811_i16) as u8;
RET = 2574514086_u32 as f64;
_6 = RET - RET;
_2 = _3 * _1;
_5 = _3 - _2;
_7 = -_6;
_4 = _3;
_7 = _6 - _6;
RET = _7;
_1 = _2;
_7 = -RET;
RET = 17678712625654471767_usize as f64;
RET = _6;
_4 = _3 >> _1;
Call(_5 = core::intrinsics::transmute(_4), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_7 = 5561652537561433577_usize as f64;
_2 = !_3;
RET = -_7;
_9 = -(-25_isize);
_2 = _1 << _4;
RET = _9 as f64;
_3 = !_4;
_7 = RET;
_9 = (-9223372036854775808_isize);
RET = _6 - _6;
_5 = _1;
_4 = _2 | _3;
_10 = true;
_6 = RET + RET;
_9 = (-6_isize);
_9 = 1_usize as isize;
_4 = _2 - _2;
RET = _6;
_3 = _1;
_6 = 2129014858709222032_u64 as f64;
_5 = 2179286444346527460_usize as u8;
_14.3.2.0 = 2024202321_u32 as i128;
Goto(bb2)
}
bb2 = {
_7 = RET - RET;
_14.2 = [(-1022489500_i32),1179327283_i32,87547825_i32];
_14.1 = 8238949278084213160_u64;
RET = 193476995_i32 as f64;
_2 = (-6748215640547851950_i64) as u8;
_1 = _3;
_15 = [2863943320959571865_usize,7_usize,6_usize,1960184021902845564_usize,1213060104024051879_usize,10070129324005665382_usize,14576791205430924399_usize,3998343966492792948_usize];
_5 = _3;
_15 = [12595597580926330518_usize,7206822214975197076_usize,7_usize,12603173503472540936_usize,8135520859163366816_usize,4967337685073176675_usize,11546082228487192517_usize,10788593029372209087_usize];
Goto(bb3)
}
bb3 = {
_6 = 33_i8 as f64;
_14.3.1 = !(-24906_i16);
_18.2.1 = !6_usize;
_18.2.0 = !_10;
_14.3.2 = (55867507109115270734528471643628489877_i128, _18.2.1);
_13 = _9 - _9;
_18.0 = _14.3.2.0;
_14.3.0 = _14.2;
_20.1 = !18_i8;
_14.3.2.1 = _13 as usize;
_14.1 = (-1448929425_i32) as u64;
Goto(bb4)
}
bb4 = {
_2 = _4;
_3 = '\u{fffe9}' as u8;
_18.1 = _14.3.1;
_7 = -RET;
Goto(bb5)
}
bb5 = {
_14.3.0 = [911458883_i32,(-982924642_i32),(-329942434_i32)];
_10 = _1 <= _5;
_15 = [_18.2.1,_14.3.2.1,_14.3.2.1,_18.2.1,_18.2.1,_14.3.2.1,_18.2.1,_14.3.2.1];
_22.1.1 = _14.3.2.1;
_14.3.1 = _18.1 - _18.1;
_20.1 = 102_i8 ^ 39_i8;
_7 = -RET;
_22.1.1 = _14.3.2.1 | _18.2.1;
_14.1 = 3158967367937701859_u64;
_10 = !_18.2.0;
_13 = _9 + _9;
_22.1 = (_18.0, _18.2.1);
_14.3.1 = _18.1;
_20.0 = [_22.1.1];
_22.1.0 = _18.0;
_14.3.2.1 = _18.2.1 | _22.1.1;
_20.0 = [_18.2.1];
_14.3 = (_14.2, _18.1, _22.1);
_22.1.1 = _14.3.2.1;
_22.3.0 = _6;
_14.0 = &_20.0;
match _18.0 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb6,
55867507109115270734528471643628489877 => bb8,
_ => bb7
}
}
bb6 = {
_2 = _4;
_3 = '\u{fffe9}' as u8;
_18.1 = _14.3.1;
_7 = -RET;
Goto(bb5)
}
bb7 = {
_6 = 33_i8 as f64;
_14.3.1 = !(-24906_i16);
_18.2.1 = !6_usize;
_18.2.0 = !_10;
_14.3.2 = (55867507109115270734528471643628489877_i128, _18.2.1);
_13 = _9 - _9;
_18.0 = _14.3.2.0;
_14.3.0 = _14.2;
_20.1 = !18_i8;
_14.3.2.1 = _13 as usize;
_14.1 = (-1448929425_i32) as u64;
Goto(bb4)
}
bb8 = {
_24 = (-1939060763_i32) as f32;
_22.0.0 = RET;
_14.3 = (_14.2, _18.1, _22.1);
_4 = _5 | _2;
_22.0.0 = _18.0 as f64;
_22.2 = _24 * _24;
_3 = _20.1 as u8;
_14.3 = (_14.2, _18.1, _22.1);
RET = -_7;
match _22.1.0 {
0 => bb3,
1 => bb9,
2 => bb10,
3 => bb11,
4 => bb12,
55867507109115270734528471643628489877 => bb14,
_ => bb13
}
}
bb9 = {
_6 = 33_i8 as f64;
_14.3.1 = !(-24906_i16);
_18.2.1 = !6_usize;
_18.2.0 = !_10;
_14.3.2 = (55867507109115270734528471643628489877_i128, _18.2.1);
_13 = _9 - _9;
_18.0 = _14.3.2.0;
_14.3.0 = _14.2;
_20.1 = !18_i8;
_14.3.2.1 = _13 as usize;
_14.1 = (-1448929425_i32) as u64;
Goto(bb4)
}
bb10 = {
_2 = _4;
_3 = '\u{fffe9}' as u8;
_18.1 = _14.3.1;
_7 = -RET;
Goto(bb5)
}
bb11 = {
_7 = 5561652537561433577_usize as f64;
_2 = !_3;
RET = -_7;
_9 = -(-25_isize);
_2 = _1 << _4;
RET = _9 as f64;
_3 = !_4;
_7 = RET;
_9 = (-9223372036854775808_isize);
RET = _6 - _6;
_5 = _1;
_4 = _2 | _3;
_10 = true;
_6 = RET + RET;
_9 = (-6_isize);
_9 = 1_usize as isize;
_4 = _2 - _2;
RET = _6;
_3 = _1;
_6 = 2129014858709222032_u64 as f64;
_5 = 2179286444346527460_usize as u8;
_14.3.2.0 = 2024202321_u32 as i128;
Goto(bb2)
}
bb12 = {
_2 = _4;
_3 = '\u{fffe9}' as u8;
_18.1 = _14.3.1;
_7 = -RET;
Goto(bb5)
}
bb13 = {
_7 = RET - RET;
_14.2 = [(-1022489500_i32),1179327283_i32,87547825_i32];
_14.1 = 8238949278084213160_u64;
RET = 193476995_i32 as f64;
_2 = (-6748215640547851950_i64) as u8;
_1 = _3;
_15 = [2863943320959571865_usize,7_usize,6_usize,1960184021902845564_usize,1213060104024051879_usize,10070129324005665382_usize,14576791205430924399_usize,3998343966492792948_usize];
_5 = _3;
_15 = [12595597580926330518_usize,7206822214975197076_usize,7_usize,12603173503472540936_usize,8135520859163366816_usize,4967337685073176675_usize,11546082228487192517_usize,10788593029372209087_usize];
Goto(bb3)
}
bb14 = {
_14.3.2.1 = _22.1.1 >> _1;
_18.2 = (_10, _14.3.2.1);
_14.1 = _20.1 as u64;
_25 = (-1363111694_i32);
_6 = -_22.3.0;
_22.1.0 = 175230731613090884317602914457110311498_u128 as i128;
_23 = _10 as u64;
_14.0 = &_20.0;
_6 = -_22.0.0;
_4 = _1 & _2;
_14.2 = _14.3.0;
_14.3.1 = _18.1;
Goto(bb15)
}
bb15 = {
Call(_26 = dump_var(15_usize, 13_usize, Move(_13), 1_usize, Move(_1), 23_usize, Move(_23), 2_usize, Move(_2)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_26 = dump_var(15_usize, 5_usize, Move(_5), 27_usize, _27, 27_usize, _27, 27_usize, _27), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn16(mut _1: u8,mut _2: u8,mut _3: u8) -> char {
mir! {
type RET = char;
let _4: u32;
let _5: f32;
let _6: bool;
let _7: *const isize;
let _8: i16;
let _9: bool;
let _10: *const u64;
let _11: (&'static [usize; 1], u64, [i32; 3], ([i32; 3], i16, (i128, usize)));
let _12: &'static mut *const isize;
let _13: u64;
let _14: *mut u8;
let _15: isize;
let _16: isize;
let _17: i16;
let _18: i64;
let _19: f64;
let _20: *const &'static char;
let _21: usize;
let _22: &'static u64;
let _23: bool;
let _24: char;
let _25: (Adt31, i64, Adt39, *const u64);
let _26: (bool, usize);
let _27: &'static mut Adt22;
let _28: ((char, &'static mut isize), (char, &'static mut isize), *mut *mut isize);
let _29: (i128, usize);
let _30: isize;
let _31: f32;
let _32: [i32; 3];
let _33: char;
let _34: ();
let _35: ();
{
RET = '\u{86f0f}';
RET = '\u{97d92}';
_1 = _2 * _3;
RET = '\u{3910e}';
_1 = _3;
RET = '\u{cf901}';
_2 = !_1;
_3 = 31027_i16 as u8;
_3 = !_1;
RET = '\u{8b4ed}';
RET = '\u{8c13}';
RET = '\u{a266b}';
_1 = 1_usize as u8;
_1 = !_2;
RET = '\u{2c001}';
_3 = _1 | _2;
RET = '\u{63df9}';
RET = '\u{85883}';
RET = '\u{e804b}';
RET = '\u{7eeb9}';
_2 = _3;
RET = '\u{e132c}';
RET = '\u{c0c25}';
_2 = _1;
Goto(bb1)
}
bb1 = {
_1 = !_3;
_1 = _2;
_4 = 246147075_u32 | 1408361917_u32;
_1 = _3;
RET = '\u{1c0ec}';
_1 = 2_usize as u8;
_4 = 162113380_u32 + 338530813_u32;
RET = '\u{ec6a2}';
_3 = _2;
_1 = _2 >> _3;
_3 = _1;
_6 = _3 != _3;
_2 = _1;
_3 = _2;
RET = '\u{f847c}';
RET = '\u{edde2}';
_3 = _1;
_3 = RET as u8;
_1 = _2 * _2;
Goto(bb2)
}
bb2 = {
_2 = _1 & _1;
Goto(bb3)
}
bb3 = {
_5 = 24374013419265079633305255373632014585_i128 as f32;
RET = '\u{34268}';
_8 = 6044_i16 * (-30596_i16);
RET = '\u{cbd1f}';
_3 = _2;
_2 = _1 - _3;
_5 = (-124_i8) as f32;
Goto(bb4)
}
bb4 = {
RET = '\u{2990a}';
_2 = !_3;
_6 = _1 >= _2;
_9 = _6 ^ _6;
_4 = RET as u32;
_3 = _2;
RET = '\u{b9bd0}';
RET = '\u{805f3}';
_3 = _1;
_1 = _2 * _2;
_8 = 59114779467731936699433436842706233921_i128 as i16;
_3 = _1;
_9 = _6;
_6 = !_9;
_11.3.1 = _8;
_11.1 = 10974127037999895694_u64;
_11.3.2 = ((-157022808997780370349707303641315631609_i128), 4_usize);
_11.3.1 = (-653632155_i32) as i16;
match _11.3.2.0 {
0 => bb1,
183259557923158093113667303790452579847 => bb5,
_ => bb3
}
}
bb5 = {
Goto(bb6)
}
bb6 = {
_11.2 = [(-1155487622_i32),1870942013_i32,1767421500_i32];
_11.1 = 15370124914165690637_u64;
_2 = !_1;
_13 = !_11.1;
_2 = !_1;
_11.3.1 = _8 - _8;
_13 = _11.1;
_11.3.2 = ((-21699268263193341087020202791308228828_i128), 10176238479977412918_usize);
_4 = 4111301139_u32;
_15 = !(-9223372036854775808_isize);
_2 = _3;
RET = '\u{4d91c}';
_11.3.0 = _11.2;
_11.3.1 = -_8;
_11.2 = [(-1027825143_i32),1994859831_i32,(-261031966_i32)];
_5 = 60664974462024856618802549209093084323_u128 as f32;
_10 = core::ptr::addr_of!(_11.1);
_2 = _1 * _1;
Call(_5 = fn17(_1, (*_10)), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
_4 = (-5529116988694322859_i64) as u32;
_11.1 = _13 + _13;
Goto(bb8)
}
bb8 = {
(*_10) = !_13;
_7 = core::ptr::addr_of!(_15);
_13 = !(*_10);
RET = '\u{6d43c}';
_11.1 = _13 * _13;
_8 = _11.3.1;
_10 = core::ptr::addr_of!((*_10));
_1 = 16914_u16 as u8;
_6 = !_9;
_11.3.1 = _8 >> _3;
_18 = !(-9168400605697158412_i64);
(*_10) = !_13;
_11.3.2 = ((-23609294937273742500656569583605214341_i128), 6_usize);
_10 = core::ptr::addr_of!(_13);
RET = '\u{2b6c2}';
_11.3.0 = [(-227152852_i32),968047038_i32,957519758_i32];
_15 = -9223372036854775807_isize;
_4 = !3128533409_u32;
Goto(bb9)
}
bb9 = {
_7 = core::ptr::addr_of!(_15);
_12 = &mut _7;
_15 = 9223372036854775807_isize;
_11.1 = !(*_10);
_6 = _9;
_5 = (*_10) as f32;
_22 = &_11.1;
Goto(bb10)
}
bb10 = {
_9 = _6;
_6 = !_9;
_11.3.2.0 = _18 as i128;
(*_10) = (*_22) + _11.1;
_12 = &mut (*_12);
_21 = _15 as usize;
_18 = (-3472679589148868774_i64);
(*_7) = 9223372036854775807_isize ^ (-124_isize);
_11.3.0 = [(-848544735_i32),(-735578590_i32),202391426_i32];
_11.3.1 = _8;
_17 = RET as i16;
_11.1 = _17 as u64;
(*_12) = core::ptr::addr_of!((*_7));
_17 = 390691123_i32 as i16;
_5 = _11.3.2.0 as f32;
RET = '\u{17e30}';
_11.3.1 = _8;
_4 = !3136107307_u32;
_16 = -(*_7);
_11.3.0 = [1801563336_i32,2099975120_i32,(-1094544403_i32)];
_24 = RET;
_8 = _18 as i16;
Goto(bb11)
}
bb11 = {
_23 = _6;
(*_10) = (-2126782052_i32) as u64;
_26.0 = !_9;
_26.0 = !_6;
_26.1 = 1675006337_i32 as usize;
_9 = _26.0;
_24 = RET;
_24 = RET;
_25.3 = Move(_10);
Call((*_7) = fn18(_2, _26, _23, _3, _26, _26.0, _9, _23, _3), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
_14 = core::ptr::addr_of_mut!(_2);
_23 = _6;
_25.0 = Adt31 { fld0: _11.1,fld1: RET };
_25.3 = core::ptr::addr_of!(_25.0.fld0);
_11.2 = [1635991344_i32,117633086_i32,679138959_i32];
_3 = (*_14);
_12 = &mut _7;
_25.2 = Adt39::Variant0 { fld0: _18,fld1: _4,fld2: _3 };
_26.1 = _11.3.2.1;
_25.1 = Field::<i64>(Variant(_25.2, 0), 0);
_11.2 = [361118746_i32,147732152_i32,(-711322600_i32)];
SetDiscriminant(_25.2, 0);
_11.3.2.0 = (-144205275479039935498611512833357164730_i128);
(*_12) = core::ptr::addr_of!((*_7));
Goto(bb13)
}
bb13 = {
place!(Field::<i64>(Variant(_25.2, 0), 0)) = _13 as i64;
_1 = !_2;
(*_7) = _26.0 as isize;
_11.3.2 = (167089668159966293012760149862347400302_i128, _21);
(*_7) = _4 as isize;
place!(Field::<u8>(Variant(_25.2, 0), 2)) = !_1;
_3 = Field::<u8>(Variant(_25.2, 0), 2) & (*_14);
_1 = !_2;
_7 = core::ptr::addr_of!(_16);
RET = _25.0.fld1;
_19 = 8246187302665852660315527522737945341_u128 as f64;
_13 = !_25.0.fld0;
RET = _24;
_28.1.0 = _24;
place!(Field::<u32>(Variant(_25.2, 0), 1)) = !_4;
_24 = RET;
_30 = _15;
SetDiscriminant(_25.2, 0);
_29.1 = !_26.1;
_29.0 = _5 as i128;
_15 = _30 - (*_7);
_21 = _5 as usize;
(*_7) = 37744286891938041024132162964165130987_u128 as isize;
_28.1.1 = &mut (*_7);
place!(Field::<u8>(Variant(_25.2, 0), 2)) = _1 << (*_14);
Call(place!(Field::<u32>(Variant(_25.2, 0), 1)) = core::intrinsics::transmute(_24), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
_25.1 = _13 as i64;
_28.1.0 = _25.0.fld1;
_8 = (-657454737_i32) as i16;
_5 = (-549582281_i32) as f32;
_9 = Field::<u8>(Variant(_25.2, 0), 2) != (*_14);
Goto(bb15)
}
bb15 = {
Call(_34 = dump_var(16_usize, 13_usize, Move(_13), 29_usize, Move(_29), 24_usize, Move(_24), 30_usize, Move(_30)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_34 = dump_var(16_usize, 2_usize, Move(_2), 26_usize, Move(_26), 9_usize, Move(_9), 23_usize, Move(_23)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_34 = dump_var(16_usize, 21_usize, Move(_21), 35_usize, _35, 35_usize, _35, 35_usize, _35), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn17(mut _1: u8,mut _2: u64) -> f32 {
mir! {
type RET = f32;
let _3: Adt81;
let _4: &'static mut u16;
let _5: &'static mut &'static u16;
let _6: f64;
let _7: bool;
let _8: &'static Adt39;
let _9: Adt57;
let _10: [i128; 3];
let _11: [isize; 2];
let _12: i32;
let _13: &'static mut Adt35;
let _14: Adt81;
let _15: ([usize; 1], i8, &'static mut i32, &'static mut &'static *const u64);
let _16: ([i32; 3], i16, (i128, usize));
let _17: &'static mut *const isize;
let _18: isize;
let _19: bool;
let _20: (f64,);
let _21: u8;
let _22: [isize; 2];
let _23: (char, &'static mut isize);
let _24: (f64,);
let _25: (i128, usize);
let _26: u32;
let _27: isize;
let _28: &'static mut &'static u16;
let _29: i32;
let _30: f32;
let _31: i16;
let _32: f64;
let _33: ([i32; 3], i16, (i128, usize));
let _34: i16;
let _35: *const *mut u8;
let _36: bool;
let _37: u16;
let _38: *const i32;
let _39: i8;
let _40: *const i32;
let _41: [i32; 3];
let _42: *const i32;
let _43: bool;
let _44: ((f64,), (i128, usize), f32, (f64,));
let _45: &'static *const u64;
let _46: i64;
let _47: bool;
let _48: ();
let _49: ();
{
_3.fld3.0.2 = 4_usize;
_3.fld3.1.fld1 = '\u{9d83a}';
RET = (-9223372036854775808_isize) as f32;
_3.fld2 = 9115_u16;
_4 = &mut _3.fld2;
RET = _3.fld3.0.2 as f32;
_3.fld0 = core::ptr::addr_of!(_3.fld3.1.fld0);
_6 = _1 as f64;
_3.fld3.1 = Adt31 { fld0: _2,fld1: '\u{b71c7}' };
_3.fld2 = !26838_u16;
_4 = &mut _3.fld2;
_6 = RET as f64;
Goto(bb1)
}
bb1 = {
_3.fld2 = 10869_u16;
_3.fld2 = 59799_u16;
_3.fld3.0.1 = 890446126_u32 | 480726489_u32;
RET = 151451260149258905101827663174109753804_i128 as f32;
_10 = [11828486798968698518388039246007968553_i128,59223652927724725201933627353283192909_i128,(-127005805126814169222026032642083801513_i128)];
_7 = false ^ false;
_6 = (-76_i8) as f64;
_1 = 30_u8 | 54_u8;
_4 = &mut _3.fld2;
_1 = 24019460335560449795851202326495629720_i128 as u8;
_3.fld3.1.fld1 = '\u{107c84}';
_6 = _3.fld3.0.2 as f64;
_14.fld3.0.2 = !_3.fld3.0.2;
_3.fld0 = core::ptr::addr_of!(_2);
Goto(bb2)
}
bb2 = {
_14.fld3.0.2 = _3.fld3.0.2;
_14.fld3.0.1 = _3.fld3.0.1;
_15.1 = (-44_i8);
_6 = (-31504_i16) as f64;
_7 = !true;
_15.1 = (-50_i8);
RET = _3.fld2 as f32;
_15.0 = [_3.fld3.0.2];
_16.2.0 = (-9223372036854775808_isize) as i128;
_7 = _3.fld3.0.1 == _3.fld3.0.1;
_14.fld3.0.0 = core::ptr::addr_of!(_12);
_3.fld3.0.0 = core::ptr::addr_of!(_12);
_16.0 = [1702034778_i32,(-3115005_i32),(-513527428_i32)];
_6 = 3783845399113351309_i64 as f64;
_14.fld3.1.fld0 = _3.fld3.1.fld0 << _3.fld3.0.1;
_16.2.1 = !_3.fld3.0.2;
_14.fld2 = _3.fld2 * (*_4);
_14.fld3.1.fld0 = _3.fld3.1.fld0 - _2;
_12 = _15.1 as i32;
_14.fld3 = (Move(_3.fld3.0), _3.fld3.1);
_15.2 = &mut _12;
Goto(bb3)
}
bb3 = {
_15.2 = &mut _12;
_15.0 = [_14.fld3.0.2];
_18 = 9223372036854775807_isize << _15.1;
_14.fld3.0.1 = 3083715238_u32 ^ 1155031806_u32;
_19 = _7;
_3.fld3.0 = (Move(_14.fld3.0.0), _14.fld3.0.1, _14.fld3.0.2);
_14.fld1 = core::ptr::addr_of!(_18);
_14.fld3.1.fld0 = !_2;
_20 = (_6,);
_3.fld3.1 = _14.fld3.1;
_12 = !772705957_i32;
_10 = [_16.2.0,_16.2.0,_16.2.0];
_14.fld2 = _14.fld3.0.2 as u16;
_3.fld0 = core::ptr::addr_of!(_14.fld3.1.fld0);
_21 = !_1;
_16.1 = _3.fld3.0.1 as i16;
_22 = [_18,_18];
_3.fld3.0.1 = !_14.fld3.0.1;
_6 = _20.0 * _20.0;
_14.fld3.1.fld0 = _3.fld3.1.fld0 + _2;
_14.fld3.0.1 = _3.fld3.0.1 + _3.fld3.0.1;
_16.0 = [_12,_12,_12];
_14.fld1 = core::ptr::addr_of!(_18);
_14.fld3.0.2 = !_16.2.1;
match _2 {
0 => bb2,
15370124914165690637 => bb5,
_ => bb4
}
}
bb4 = {
_3.fld2 = 10869_u16;
_3.fld2 = 59799_u16;
_3.fld3.0.1 = 890446126_u32 | 480726489_u32;
RET = 151451260149258905101827663174109753804_i128 as f32;
_10 = [11828486798968698518388039246007968553_i128,59223652927724725201933627353283192909_i128,(-127005805126814169222026032642083801513_i128)];
_7 = false ^ false;
_6 = (-76_i8) as f64;
_1 = 30_u8 | 54_u8;
_4 = &mut _3.fld2;
_1 = 24019460335560449795851202326495629720_i128 as u8;
_3.fld3.1.fld1 = '\u{107c84}';
_6 = _3.fld3.0.2 as f64;
_14.fld3.0.2 = !_3.fld3.0.2;
_3.fld0 = core::ptr::addr_of!(_2);
Goto(bb2)
}
bb5 = {
_1 = _21;
_3.fld3.1.fld1 = _14.fld3.1.fld1;
_14.fld3 = (Move(_3.fld3.0), _3.fld3.1);
_3.fld3.0.2 = _14.fld3.0.2 >> _3.fld3.1.fld0;
_23.0 = _14.fld3.1.fld1;
_21 = _1 + _1;
_15.0 = [_16.2.1];
_16.0 = [_12,_12,_12];
_15.1 = (-15_i8);
_14.fld2 = (*_4) >> _16.2.0;
Call(_16.1 = core::intrinsics::bswap((-1650_i16)), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
_25 = (_16.2.0, _3.fld3.0.2);
_14.fld0 = core::ptr::addr_of!(_2);
_10 = [_16.2.0,_16.2.0,_16.2.0];
_17 = &mut _14.fld1;
_21 = _3.fld3.1.fld0 as u8;
_31 = 88062853733575815547426610643128376554_u128 as i16;
_3.fld3 = (Move(_14.fld3.0), _14.fld3.1);
_14.fld3.1.fld1 = _3.fld3.1.fld1;
_14.fld3.0 = Move(_3.fld3.0);
_23.1 = &mut _18;
_3.fld3.0 = Move(_14.fld3.0);
_14.fld3.0.0 = core::ptr::addr_of!(_12);
_25.1 = !_16.2.1;
match _2 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb5,
4 => bb7,
15370124914165690637 => bb9,
_ => bb8
}
}
bb7 = {
_14.fld3.0.2 = _3.fld3.0.2;
_14.fld3.0.1 = _3.fld3.0.1;
_15.1 = (-44_i8);
_6 = (-31504_i16) as f64;
_7 = !true;
_15.1 = (-50_i8);
RET = _3.fld2 as f32;
_15.0 = [_3.fld3.0.2];
_16.2.0 = (-9223372036854775808_isize) as i128;
_7 = _3.fld3.0.1 == _3.fld3.0.1;
_14.fld3.0.0 = core::ptr::addr_of!(_12);
_3.fld3.0.0 = core::ptr::addr_of!(_12);
_16.0 = [1702034778_i32,(-3115005_i32),(-513527428_i32)];
_6 = 3783845399113351309_i64 as f64;
_14.fld3.1.fld0 = _3.fld3.1.fld0 << _3.fld3.0.1;
_16.2.1 = !_3.fld3.0.2;
_14.fld2 = _3.fld2 * (*_4);
_14.fld3.1.fld0 = _3.fld3.1.fld0 - _2;
_12 = _15.1 as i32;
_14.fld3 = (Move(_3.fld3.0), _3.fld3.1);
_15.2 = &mut _12;
Goto(bb3)
}
bb8 = {
_15.2 = &mut _12;
_15.0 = [_14.fld3.0.2];
_18 = 9223372036854775807_isize << _15.1;
_14.fld3.0.1 = 3083715238_u32 ^ 1155031806_u32;
_19 = _7;
_3.fld3.0 = (Move(_14.fld3.0.0), _14.fld3.0.1, _14.fld3.0.2);
_14.fld1 = core::ptr::addr_of!(_18);
_14.fld3.1.fld0 = !_2;
_20 = (_6,);
_3.fld3.1 = _14.fld3.1;
_12 = !772705957_i32;
_10 = [_16.2.0,_16.2.0,_16.2.0];
_14.fld2 = _14.fld3.0.2 as u16;
_3.fld0 = core::ptr::addr_of!(_14.fld3.1.fld0);
_21 = !_1;
_16.1 = _3.fld3.0.1 as i16;
_22 = [_18,_18];
_3.fld3.0.1 = !_14.fld3.0.1;
_6 = _20.0 * _20.0;
_14.fld3.1.fld0 = _3.fld3.1.fld0 + _2;
_14.fld3.0.1 = _3.fld3.0.1 + _3.fld3.0.1;
_16.0 = [_12,_12,_12];
_14.fld1 = core::ptr::addr_of!(_18);
_14.fld3.0.2 = !_16.2.1;
match _2 {
0 => bb2,
15370124914165690637 => bb5,
_ => bb4
}
}
bb9 = {
_14.fld3.0.0 = Move(_3.fld3.0.0);
_9 = Adt57::Variant1 { fld0: _20.0,fld1: RET,fld2: _15.0,fld3: _22,fld4: _21,fld5: _12,fld6: Move(_14.fld3.0.0) };
_15.0 = [_25.1];
_2 = _3.fld3.1.fld0 | _3.fld3.1.fld0;
_3.fld3.0 = (Move(Field::<*const i32>(Variant(_9, 1), 6)), 2777910335_u32, _16.2.1);
_17 = &mut (*_17);
place!(Field::<f64>(Variant(_9, 1), 0)) = _6 + _20.0;
place!(Field::<*const i32>(Variant(_9, 1), 6)) = Move(_3.fld3.0.0);
_33.2.0 = _18 as i128;
SetDiscriminant(_9, 0);
_25 = (_33.2.0, _3.fld3.0.2);
RET = _3.fld3.1.fld0 as f32;
_14.fld3.0.0 = core::ptr::addr_of!(_12);
_27 = _18;
place!(Field::<Adt22>(Variant(_9, 0), 4)) = Adt22::Variant1 { fld0: _3.fld3.0.1,fld1: _22,fld2: _20.0,fld3: 128804535158014040485361355035531864284_u128,fld4: _16.1,fld5: _25.0 };
match (*_4) {
0 => bb4,
59799 => bb11,
_ => bb10
}
}
bb10 = {
_3.fld2 = 10869_u16;
_3.fld2 = 59799_u16;
_3.fld3.0.1 = 890446126_u32 | 480726489_u32;
RET = 151451260149258905101827663174109753804_i128 as f32;
_10 = [11828486798968698518388039246007968553_i128,59223652927724725201933627353283192909_i128,(-127005805126814169222026032642083801513_i128)];
_7 = false ^ false;
_6 = (-76_i8) as f64;
_1 = 30_u8 | 54_u8;
_4 = &mut _3.fld2;
_1 = 24019460335560449795851202326495629720_i128 as u8;
_3.fld3.1.fld1 = '\u{107c84}';
_6 = _3.fld3.0.2 as f64;
_14.fld3.0.2 = !_3.fld3.0.2;
_3.fld0 = core::ptr::addr_of!(_2);
Goto(bb2)
}
bb11 = {
place!(Field::<u8>(Variant(_9, 0), 3)) = !_21;
place!(Field::<f32>(Variant(_9, 0), 1)) = -RET;
place!(Field::<f32>(Variant(_9, 0), 1)) = -RET;
(*_4) = _14.fld2 & _14.fld2;
_11 = _22;
_33.0 = [_12,_12,_12];
_21 = _23.0 as u8;
_3.fld3.0 = (Move(_14.fld3.0.0), Field::<u32>(Variant(Field::<Adt22>(Variant(_9, 0), 4), 1), 0), _16.2.1);
place!(Field::<u128>(Variant(place!(Field::<Adt22>(Variant(_9, 0), 4)), 1), 3)) = Field::<i128>(Variant(Field::<Adt22>(Variant(_9, 0), 4), 1), 5) as u128;
_33.1 = Field::<i16>(Variant(Field::<Adt22>(Variant(_9, 0), 4), 1), 4) | Field::<i16>(Variant(Field::<Adt22>(Variant(_9, 0), 4), 1), 4);
_30 = RET - RET;
_30 = RET - Field::<f32>(Variant(_9, 0), 1);
_34 = _16.1 - _33.1;
place!(Field::<(i128, usize)>(Variant(_9, 0), 5)) = _16.2;
_33.2.1 = _3.fld3.0.2 & _16.2.1;
place!(Field::<f64>(Variant(_9, 0), 6)) = -_6;
_4 = &mut _14.fld2;
place!(Field::<u32>(Variant(place!(Field::<Adt22>(Variant(_9, 0), 4)), 1), 0)) = _3.fld3.0.1;
SetDiscriminant(Field::<Adt22>(Variant(_9, 0), 4), 0);
place!(Field::<u64>(Variant(place!(Field::<Adt22>(Variant(_9, 0), 4)), 0), 0)) = _3.fld3.1.fld0;
match _15.1 {
0 => bb10,
340282366920938463463374607431768211441 => bb13,
_ => bb12
}
}
bb12 = {
_1 = _21;
_3.fld3.1.fld1 = _14.fld3.1.fld1;
_14.fld3 = (Move(_3.fld3.0), _3.fld3.1);
_3.fld3.0.2 = _14.fld3.0.2 >> _3.fld3.1.fld0;
_23.0 = _14.fld3.1.fld1;
_21 = _1 + _1;
_15.0 = [_16.2.1];
_16.0 = [_12,_12,_12];
_15.1 = (-15_i8);
_14.fld2 = (*_4) >> _16.2.0;
Call(_16.1 = core::intrinsics::bswap((-1650_i16)), ReturnTo(bb6), UnwindUnreachable())
}
bb13 = {
place!(Field::<Adt22>(Variant(_9, 0), 4)) = Adt22::Variant0 { fld0: _2,fld1: 2391898021645505121_i64,fld2: _3.fld2 };
place!(Field::<u128>(Variant(_9, 0), 0)) = 28242304927106556948807611325504105798_u128;
(*_17) = core::ptr::addr_of!(_27);
_9 = Adt57::Variant1 { fld0: _20.0,fld1: _30,fld2: _15.0,fld3: _11,fld4: _1,fld5: _12,fld6: Move(_3.fld3.0.0) };
_27 = _18;
_24.0 = -_20.0;
_3.fld1 = Move(_14.fld1);
(*_4) = _25.1 as u16;
_3.fld1 = core::ptr::addr_of!(_27);
_14.fld3.1.fld1 = _3.fld3.1.fld1;
_3.fld3.0.2 = _16.2.1 >> _15.1;
_20 = _24;
_15.0 = [_25.1];
_33.2.0 = _25.0 + _25.0;
_14.fld3.1 = _3.fld3.1;
_17 = &mut _3.fld1;
_14.fld3.1.fld1 = _3.fld3.1.fld1;
_33 = (_16.0, _34, _25);
Goto(bb14)
}
bb14 = {
SetDiscriminant(_9, 1);
place!(Field::<f64>(Variant(_9, 1), 0)) = -_20.0;
_6 = Field::<f64>(Variant(_9, 1), 0);
_16.2.1 = !_3.fld3.0.2;
place!(Field::<[isize; 2]>(Variant(_9, 1), 3)) = _11;
_15.2 = &mut _12;
_32 = _24.0;
_40 = core::ptr::addr_of!(place!(Field::<i32>(Variant(_9, 1), 5)));
_15.1 = _14.fld3.1.fld0 as i8;
_14.fld3.1.fld1 = _23.0;
_14.fld3.0.1 = _3.fld3.0.1;
_16.2.0 = !_33.2.0;
(*_17) = core::ptr::addr_of!(_18);
_3.fld0 = Move(_14.fld0);
_44.1 = _33.2;
_14.fld3.0 = (Move(_40), _3.fld3.0.1, _3.fld3.0.2);
Goto(bb15)
}
bb15 = {
Call(_48 = dump_var(17_usize, 11_usize, Move(_11), 12_usize, Move(_12), 21_usize, Move(_21), 22_usize, Move(_22)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_48 = dump_var(17_usize, 1_usize, Move(_1), 19_usize, Move(_19), 10_usize, Move(_10), 7_usize, Move(_7)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn18(mut _1: u8,mut _2: (bool, usize),mut _3: bool,mut _4: u8,mut _5: (bool, usize),mut _6: bool,mut _7: bool,mut _8: bool,mut _9: u8) -> isize {
mir! {
type RET = isize;
let _10: &'static mut Adt22;
let _11: ([i32; 3], i16, (i128, usize));
let _12: i16;
let _13: u16;
let _14: isize;
let _15: [i32; 3];
let _16: &'static i64;
let _17: char;
let _18: isize;
let _19: *const &'static mut *const isize;
let _20: *const &'static mut *const isize;
let _21: *const *const u64;
let _22: char;
let _23: Adt48;
let _24: i32;
let _25: bool;
let _26: (usize,);
let _27: Adt22;
let _28: i8;
let _29: ();
let _30: ();
{
RET = 114_isize >> _1;
_8 = !_6;
_8 = _6;
RET = 73_isize ^ (-9223372036854775808_isize);
_5 = (_8, _2.1);
_4 = 316735918282567342462695310841792871291_u128 as u8;
RET = (-127_isize) | (-9223372036854775808_isize);
_2.0 = !_7;
_3 = !_6;
_11.2 = ((-32516572461874869830179425066010285892_i128), _2.1);
match _11.2.0 {
0 => bb1,
307765794459063593633195182365757925564 => bb3,
_ => bb2
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
_11.1 = 12027_i16;
_6 = _3;
_11.0 = [1491881720_i32,2112864807_i32,(-1678665913_i32)];
_5.1 = _2.1;
_1 = _8 as u8;
_11.2.0 = (-16034464029059311731315236773371916456_i128) << _1;
_11.1 = (-17480_i16);
_4 = _1;
_11.1 = 3980468919_u32 as i16;
_12 = _11.2.1 as i16;
_8 = !_6;
_5.1 = !_2.1;
_2 = (_6, _5.1);
_11.2 = ((-70481148231009887929448397016632408474_i128), _5.1);
_11.1 = _12;
Call(_5.0 = fn19(_6, _3, _2, _2.0, _8, _3, _4, _2.0), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_13 = 31960_u16 << _9;
_8 = _4 <= _4;
_5 = (_8, _2.1);
_12 = _11.1;
_2 = (_3, _11.2.1);
_9 = _1 * _1;
_2.0 = _6 >= _6;
_6 = _3;
_2 = _5;
_14 = _13 as isize;
_7 = !_8;
_11.0 = [(-1383613228_i32),(-667609475_i32),424082607_i32];
_11.0 = [(-1951633486_i32),(-673004735_i32),(-1005317570_i32)];
_3 = _8 & _6;
_5.1 = _11.2.1;
_15 = [(-498893131_i32),1507124736_i32,(-1725537239_i32)];
_4 = _1;
_11.2 = ((-17229664489008067252569544312471972537_i128), _5.1);
_11.2.1 = _2.1 | _2.1;
_12 = _11.1 * _11.1;
_2.1 = _11.2.1 | _11.2.1;
_3 = !_5.0;
_7 = !_6;
_8 = !_3;
_5.0 = _6;
_7 = _6;
_11.0 = [266041430_i32,732388698_i32,(-102984985_i32)];
_5.1 = _11.2.0 as usize;
Goto(bb5)
}
bb5 = {
_13 = 2751308016_u32 as u16;
_11.2 = ((-2898619692065129198986858454469102354_i128), _5.1);
_11.1 = _12;
_12 = _14 as i16;
_11.2.0 = 163999891216486973151873123010825061205_i128;
_1 = !_9;
_2.0 = !_6;
_2.1 = _11.2.1 - _11.2.1;
RET = -_14;
_2.1 = _5.1 ^ _11.2.1;
_2.0 = _6 & _8;
_8 = !_2.0;
_6 = _5.0;
_12 = 1414260493_i32 as i16;
_5 = (_6, _2.1);
_5 = (_3, _2.1);
_11.1 = _12;
_26 = (_5.1,);
_2.0 = !_6;
Goto(bb6)
}
bb6 = {
Call(_29 = dump_var(18_usize, 15_usize, Move(_15), 1_usize, Move(_1), 26_usize, Move(_26), 8_usize, Move(_8)), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
Call(_29 = dump_var(18_usize, 3_usize, Move(_3), 2_usize, Move(_2), 6_usize, Move(_6), 30_usize, _30), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn19(mut _1: bool,mut _2: bool,mut _3: (bool, usize),mut _4: bool,mut _5: bool,mut _6: bool,mut _7: u8,mut _8: bool) -> bool {
mir! {
type RET = bool;
let _9: bool;
let _10: char;
let _11: ();
let _12: ();
{
_1 = _2;
_2 = !_3.0;
RET = !_6;
_3.1 = 20806_i16 as usize;
_3 = (_2, 8257278495047442576_usize);
RET = !_1;
_7 = 227_u8 * 25_u8;
_3 = (_2, 4423639014135236606_usize);
_3.0 = _4 != _6;
_4 = _2;
_1 = RET & _5;
_8 = _1 > _1;
_5 = _1 >= _2;
RET = !_3.0;
_1 = _4 != _6;
_7 = '\u{dcec7}' as u8;
_6 = _3.1 < _3.1;
_7 = 148_u8 >> _3.1;
_10 = '\u{96c98}';
Goto(bb1)
}
bb1 = {
Call(_11 = dump_var(19_usize, 2_usize, Move(_2), 7_usize, Move(_7), 10_usize, Move(_10), 6_usize, Move(_6)), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
pub fn main() {
                fn0(std::hint::black_box(true), std::hint::black_box('\u{5ea3d}'), std::hint::black_box((-32_isize)), std::hint::black_box(4_i8), std::hint::black_box(310065181503829305379333365522212613165_u128), std::hint::black_box(10856485153008031994_u64), std::hint::black_box(7755785831623624274_i64), std::hint::black_box(32066976686032196767580360883990463620_i128), std::hint::black_box(1_usize), std::hint::black_box(107_u8), std::hint::black_box(38480_u16), std::hint::black_box(4260445758_u32));
                
            }
#[derive(Debug,Copy,Clone)]
pub enum Adt22 {
Variant0{
fld0: u64,
fld1: i64,
fld2: u16,

},
Variant1{
fld0: u32,
fld1: [isize; 2],
fld2: f64,
fld3: u128,
fld4: i16,
fld5: i128,

},
Variant2{
fld0: [i32; 3],
fld1: [isize; 2],
fld2: u16,
fld3: f64,
fld4: u8,
fld5: i32,
fld6: i64,

}}
#[derive(Debug,Copy,Clone)]
pub struct Adt31 {
fld0: u64,
fld1: char,
}
#[derive(Debug)]
pub enum Adt35 {
Variant0{
fld0: bool,
fld1: (i128, usize),
fld2: *const isize,
fld3: usize,
fld4: i16,
fld5: [i8; 3],
fld6: i64,
fld7: u32,

},
Variant1{
fld0: [i32; 3],
fld1: u32,
fld2: [isize; 2],
fld3: *const u64,
fld4: f32,
fld5: *mut isize,

}}
#[derive(Debug)]
pub enum Adt39 {
Variant0{
fld0: i64,
fld1: u32,
fld2: u8,

},
Variant1{
fld0: *const *mut u8,
fld1: char,
fld2: *mut isize,
fld3: ([i32; 3], i16, (i128, usize)),
fld4: u8,
fld5: i32,
fld6: [i32; 3],
fld7: *const isize,

},
Variant2{
fld0: usize,
fld1: char,
fld2: ((bool, usize), u8),
fld3: i8,
fld4: *const u64,
fld5: (usize,),
fld6: i64,
fld7: i128,

}}
#[derive(Debug)]
pub enum Adt48 {
Variant0{
fld0: [i32; 3],
fld1: *mut u8,
fld2: (i128, usize),

},
Variant1{
fld0: u8,
fld1: (f64,),
fld2: isize,
fld3: u16,
fld4: usize,

},
Variant2{
fld0: ((bool, usize), u8),
fld1: [isize; 2],
fld2: (i128, usize),
fld3: i8,
fld4: Adt35,

}}
#[derive(Debug)]
pub enum Adt57 {
Variant0{
fld0: u128,
fld1: f32,
fld2: Adt35,
fld3: u8,
fld4: Adt22,
fld5: (i128, usize),
fld6: f64,

},
Variant1{
fld0: f64,
fld1: f32,
fld2: [usize; 1],
fld3: [isize; 2],
fld4: u8,
fld5: i32,
fld6: *const i32,

}}
#[derive(Debug)]
pub enum Adt59 {
Variant0{
fld0: Adt39,

},
Variant1{
fld0: ((f64,), (i128, usize), f32, (f64,)),
fld1: *mut *mut isize,
fld2: (Adt31, i64, Adt39, *const u64),
fld3: i128,
fld4: *const u64,
fld5: i32,
fld6: (bool, usize),

},
Variant2{
fld0: [usize; 1],

},
Variant3{
fld0: i32,
fld1: *mut u8,
fld2: *const isize,
fld3: i64,
fld4: i16,

}}
#[derive(Debug)]
pub struct Adt81 {
fld0: *const u64,
fld1: *const isize,
fld2: u16,
fld3: ((*const i32, u32, usize), Adt31),
fld4: *mut *mut isize,
}

