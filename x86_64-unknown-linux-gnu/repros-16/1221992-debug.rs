#![recursion_limit = "1024"]
    #![feature(custom_mir, core_intrinsics, const_hash)]
    #![allow(unused_parens, unused_assignments, overflowing_literals)]
    extern crate core;
    use core::intrinsics::mir::*;

    use std::fmt::Debug;

    #[inline(never)]
    fn dump_var(
        f: usize,
        var0: usize, val0: impl Debug,
        var1: usize, val1: impl Debug,
        var2: usize, val2: impl Debug,
        var3: usize, val3: impl Debug,
    ) {
        println!("fn{f}:_{var0} = {val0:?}\n_{var1} = {val1:?}\n_{var2} = {val2:?}\n_{var3} = {val3:?}");
    }
    #[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn0(mut _1: bool,mut _2: u32,mut _3: isize,mut _4: u128,mut _5: i16) -> i128 {
mir! {
type RET = i128;
let _6: Adt43;
let _7: Adt41;
let _8: f32;
let _9: i128;
let _10: Adt50;
let _11: ([i128; 3],);
let _12: isize;
let _13: Adt48;
let _14: (usize, i128);
let _15: [i64; 5];
let _16: isize;
let _17: [i128; 3];
let _18: i8;
let _19: f64;
let _20: char;
let _21: Adt49;
let _22: *mut i32;
let _23: u16;
let _24: (f32,);
let _25: isize;
let _26: Adt48;
let _27: Adt44;
let _28: Adt39;
let _29: [u64; 6];
let _30: (i16, [u8; 7], [i64; 5]);
let _31: char;
let _32: f64;
let _33: [isize; 2];
let _34: [bool; 5];
let _35: isize;
let _36: isize;
let _37: *mut i32;
let _38: usize;
let _39: ([i128; 3],);
let _40: bool;
let _41: isize;
let _42: i128;
let _43: [isize; 2];
let _44: [i64; 5];
let _45: ();
let _46: ();
{
_3 = 7488292532981923413_usize as isize;
_5 = -(-30186_i16);
_4 = (-8_i8) as u128;
_1 = !true;
RET = !(-7329508989823555346227356724838606209_i128);
_3 = (-22_isize) | 9223372036854775807_isize;
_2 = 2808436850_u32 * 2942449418_u32;
_2 = !2962556819_u32;
_2 = 4929708935227868180_u64 as u32;
_2 = '\u{d701d}' as u32;
_1 = false;
_4 = 1046965609927684259_usize as u128;
Goto(bb1)
}
bb1 = {
_4 = 28976942284801110350566150991525016245_u128 + 194440486908699884691668038993983203738_u128;
_1 = _2 < _2;
RET = !150205354788030301216578756623542545124_i128;
RET = 29666552846510720656187366949017408168_i128 - (-36024138484668828349354555790403807406_i128);
_8 = (-103_i8) as f32;
RET = !167879920941254964774700536734966254121_i128;
_9 = RET;
_1 = false;
_4 = _3 as u128;
RET = _8 as i128;
_5 = 6144_i16 - (-3469_i16);
Call(_8 = core::intrinsics::transmute(_2), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Goto(bb3)
}
bb3 = {
_10.fld0.fld0.0 = _4 as f64;
_10.fld1 = 173_u8 as f64;
RET = -_9;
RET = _10.fld1 as i128;
RET = _9;
_2 = !1085741640_u32;
Goto(bb4)
}
bb4 = {
_10.fld0.fld0 = (_10.fld1, 5608909233727382171_i64);
_10.fld0.fld1 = '\u{757e2}';
_10.fld0.fld0 = (_10.fld1, 4339687484487743700_i64);
RET = _9 >> _9;
_8 = _5 as f32;
_10.fld0.fld1 = '\u{918bb}';
_8 = _5 as f32;
_13.fld0.1 = _10.fld0.fld0.1;
_10.fld0.fld0 = (_10.fld1, _13.fld0.1);
_13 = Adt48 { fld0: _10.fld0.fld0,fld1: _10.fld0.fld1 };
_10.fld0 = Adt48 { fld0: _13.fld0,fld1: _13.fld1 };
_2 = _8 as u32;
_10.fld0.fld1 = _13.fld1;
_10.fld0 = Adt48 { fld0: _13.fld0,fld1: _13.fld1 };
_13 = Adt48 { fld0: _10.fld0.fld0,fld1: _10.fld0.fld1 };
_13.fld0.1 = _10.fld0.fld0.1 * _10.fld0.fld0.1;
_10 = Adt50 { fld0: _13,fld1: _13.fld0.0 };
_1 = _5 != _5;
_9 = _13.fld1 as i128;
RET = 19247_u16 as i128;
_13.fld0 = (_10.fld0.fld0.0, _10.fld0.fld0.1);
_10 = Adt50 { fld0: _13,fld1: _13.fld0.0 };
_3 = (-9223372036854775808_isize);
_14.0 = 14161725467688595944_usize;
_5 = !(-2486_i16);
_1 = false;
_14.1 = !_9;
_13.fld0.0 = _13.fld0.1 as f64;
Goto(bb5)
}
bb5 = {
_14.0 = 3_usize;
_14.1 = _9 + _9;
_4 = 295894348413999349194486631069732770077_u128 - 93914460547218154816108485031640737375_u128;
_4 = !230559937433426025778908464027225306995_u128;
RET = !_9;
_12 = _3;
_13 = Adt48 { fld0: _10.fld0.fld0,fld1: _10.fld0.fld1 };
_3 = !_12;
Goto(bb6)
}
bb6 = {
_5 = 72_u8 as i16;
_13 = Adt48 { fld0: _10.fld0.fld0,fld1: _10.fld0.fld1 };
_17 = [RET,_9,RET];
_5 = -(-4288_i16);
_13.fld0.1 = _10.fld0.fld0.1 & _10.fld0.fld0.1;
_13.fld0.1 = _10.fld0.fld0.1 | _10.fld0.fld0.1;
_13.fld1 = _10.fld0.fld1;
_10.fld0.fld0.1 = _13.fld0.1;
_15 = [_13.fld0.1,_10.fld0.fld0.1,_13.fld0.1,_10.fld0.fld0.1,_10.fld0.fld0.1];
_10.fld1 = -_13.fld0.0;
_5 = (-8246_i16);
Goto(bb7)
}
bb7 = {
_14.0 = _13.fld0.0 as usize;
_13 = Adt48 { fld0: _10.fld0.fld0,fld1: _10.fld0.fld1 };
_19 = _10.fld1;
_14 = (2_usize, RET);
_17 = [_9,_9,_9];
_3 = _12;
_16 = _3 + _12;
_14 = (2_usize, RET);
Call(_11 = fn1(_13.fld0.1, _9), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
_13.fld0 = (_19, _10.fld0.fld0.1);
_14 = (1_usize, _9);
_2 = _13.fld1 as u32;
_9 = 167_u8 as i128;
_10.fld0.fld1 = _13.fld1;
_14.0 = 452531958923396410_usize * 17381665246338127018_usize;
_18 = (-80_i8) & (-53_i8);
_20 = _13.fld1;
_10.fld0 = _13;
_8 = _16 as f32;
_10.fld1 = _10.fld0.fld0.0;
_13.fld0.0 = -_10.fld1;
RET = !_9;
_13.fld1 = _20;
_1 = !false;
_18 = 32_i8 & 91_i8;
_13.fld0.1 = _10.fld0.fld0.1;
_15 = [_13.fld0.1,_10.fld0.fld0.1,_10.fld0.fld0.1,_13.fld0.1,_10.fld0.fld0.1];
_10.fld0.fld1 = _13.fld1;
_14.0 = !0_usize;
_13 = Adt48 { fld0: _10.fld0.fld0,fld1: _10.fld0.fld1 };
_10.fld0 = Adt48 { fld0: _13.fld0,fld1: _13.fld1 };
_10.fld0.fld1 = _20;
_10.fld0.fld0 = (_13.fld0.0, _13.fld0.1);
_12 = _9 as isize;
Goto(bb9)
}
bb9 = {
_23 = 20582_u16;
_1 = true;
_10.fld0.fld1 = _13.fld1;
_13.fld1 = _10.fld0.fld1;
_9 = _8 as i128;
_14.1 = _9 << _5;
_13 = Adt48 { fld0: _10.fld0.fld0,fld1: _20 };
_14 = (18034217265291105125_usize, _9);
_15 = [_13.fld0.1,_10.fld0.fld0.1,_13.fld0.1,_13.fld0.1,_10.fld0.fld0.1];
_14 = (14330968895995348911_usize, _9);
_10.fld0.fld0.0 = _8 as f64;
_13.fld0.0 = -_19;
_1 = !true;
_13.fld0.1 = _10.fld0.fld0.1 & _10.fld0.fld0.1;
_15 = [_10.fld0.fld0.1,_13.fld0.1,_10.fld0.fld0.1,_13.fld0.1,_10.fld0.fld0.1];
_26.fld1 = _10.fld0.fld1;
_10.fld0.fld0.0 = _13.fld0.1 as f64;
_13.fld0 = (_10.fld0.fld0.0, _10.fld0.fld0.1);
_18 = _14.0 as i8;
_26.fld0.0 = -_13.fld0.0;
_19 = _23 as f64;
match _14.0 {
0 => bb1,
1 => bb8,
2 => bb3,
3 => bb7,
4 => bb5,
14330968895995348911 => bb11,
_ => bb10
}
}
bb10 = {
Goto(bb3)
}
bb11 = {
_20 = _26.fld1;
_12 = _13.fld1 as isize;
_4 = 136983375980860753402079250806319399825_u128;
_13.fld0 = _10.fld0.fld0;
_26.fld0 = (_10.fld0.fld0.0, _13.fld0.1);
_26.fld1 = _13.fld1;
_10.fld0.fld1 = _20;
_8 = _14.1 as f32;
_13 = _26;
match _4 {
136983375980860753402079250806319399825 => bb12,
_ => bb9
}
}
bb12 = {
RET = _9;
_14.0 = !7_usize;
_28.fld0 = (_8,);
_10.fld0.fld0 = (_26.fld0.0, _26.fld0.1);
_13.fld1 = _20;
_25 = _16;
_14.0 = 1963223526117959065_usize ^ 7_usize;
_12 = -_3;
_10.fld0.fld1 = _20;
_5 = 26378_i16;
_17 = [_14.1,_9,_14.1];
_13.fld0.0 = _26.fld0.0;
_14 = (7_usize, _9);
_11 = (_17,);
_26.fld1 = _10.fld0.fld1;
_30.1 = [116_u8,244_u8,219_u8,140_u8,82_u8,13_u8,216_u8];
_13.fld1 = _10.fld0.fld1;
_17 = [_14.1,_14.1,_9];
Call(_4 = core::intrinsics::bswap(62336377917295732028443052517409871341_u128), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
_28.fld0 = (_8,);
_13.fld0.0 = _26.fld0.0 - _26.fld0.0;
_14.1 = _9;
RET = _14.1 - _9;
_28.fld1 = _8 * _8;
_10.fld1 = _16 as f64;
_30.0 = -_5;
_34 = [_1,_1,_1,_1,_1];
_29 = [17435641921862071098_u64,8525535576575114436_u64,15661137282577642601_u64,11919767831887318228_u64,310151455876639339_u64,13946663612062865003_u64];
_24 = _28.fld0;
_15 = [_26.fld0.1,_13.fld0.1,_26.fld0.1,_10.fld0.fld0.1,_10.fld0.fld0.1];
_30.0 = -_5;
_20 = _13.fld1;
_3 = _25 << _9;
_10.fld0.fld0.0 = _26.fld0.0;
_31 = _10.fld0.fld1;
match _14.0 {
7 => bb14,
_ => bb3
}
}
bb14 = {
_23 = (-1931930568_i32) as u16;
_2 = 2281383890_u32;
_28.fld1 = _8 - _24.0;
_13 = Adt48 { fld0: _10.fld0.fld0,fld1: _26.fld1 };
_10.fld0 = Adt48 { fld0: _13.fld0,fld1: _31 };
_3 = _12 | _12;
_24 = (_8,);
_33 = [_25,_16];
_26.fld0.1 = _13.fld0.1;
_19 = _10.fld0.fld0.0 - _13.fld0.0;
_11 = (_17,);
_7 = Adt41::Variant0 { fld0: _28,fld1: _4,fld2: 1626651929_i32 };
_13.fld0.0 = -_19;
_30.1 = [39_u8,85_u8,163_u8,78_u8,143_u8,110_u8,148_u8];
_10 = Adt50 { fld0: _13,fld1: _19 };
_14.1 = RET >> _13.fld0.1;
_4 = Field::<u128>(Variant(_7, 0), 1);
place!(Field::<i32>(Variant(_7, 0), 2)) = Field::<u128>(Variant(_7, 0), 1) as i32;
Goto(bb15)
}
bb15 = {
Call(_45 = dump_var(0_usize, 18_usize, Move(_18), 17_usize, Move(_17), 4_usize, Move(_4), 3_usize, Move(_3)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_45 = dump_var(0_usize, 25_usize, Move(_25), 9_usize, Move(_9), 1_usize, Move(_1), 15_usize, Move(_15)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_45 = dump_var(0_usize, 12_usize, Move(_12), 23_usize, Move(_23), 46_usize, _46, 46_usize, _46), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn1(mut _1: i64,mut _2: i128) -> ([i128; 3],) {
mir! {
type RET = ([i128; 3],);
let _3: isize;
let _4: *mut i32;
let _5: u8;
let _6: (f64, i64);
let _7: Adt37;
let _8: [u8; 7];
let _9: [u8; 7];
let _10: i32;
let _11: char;
let _12: [u64; 6];
let _13: isize;
let _14: [isize; 2];
let _15: [bool; 5];
let _16: [i128; 3];
let _17: isize;
let _18: Adt41;
let _19: [bool; 1];
let _20: Adt50;
let _21: Adt50;
let _22: [i64; 5];
let _23: isize;
let _24: ();
let _25: ();
{
RET.0 = [_2,_2,_2];
RET.0 = [_2,_2,_2];
RET.0 = [_2,_2,_2];
_2 = 165673651008193439857881728166303524582_i128 ^ 132958114397983293598141894246400372150_i128;
RET.0 = [_2,_2,_2];
RET.0 = [_2,_2,_2];
RET.0 = [_2,_2,_2];
RET.0 = [_2,_2,_2];
RET.0 = [_2,_2,_2];
RET.0 = [_2,_2,_2];
_1 = (-7835003123512391989_i64);
_1 = 5200566271822804269_i64;
_3 = 9223372036854775807_isize;
RET.0 = [_2,_2,_2];
RET.0 = [_2,_2,_2];
_2 = 38941085718445672611417171298030701397_i128;
_2 = (-162897064555732423413535459341426639881_i128);
RET.0 = [_2,_2,_2];
RET.0 = [_2,_2,_2];
_5 = !20_u8;
Goto(bb1)
}
bb1 = {
_2 = (-147956498699929652601081787441011698875_i128) ^ (-147306335958471284313096789471886275839_i128);
_2 = 101604548243293716558404954186810621841_i128 & 132389125979122967808228108491694274528_i128;
RET.0 = [_2,_2,_2];
RET.0 = [_2,_2,_2];
_6.1 = _1 & _1;
_2 = (-122259827944152160076436518763485392498_i128);
_6.0 = 43597_u16 as f64;
Goto(bb2)
}
bb2 = {
_2 = _1 as i128;
_2 = (-110551205840890335274506919402650166958_i128) * 39964022775680373827349400288936066438_i128;
_9 = [_5,_5,_5,_5,_5,_5,_5];
_6.0 = _5 as f64;
_8 = [_5,_5,_5,_5,_5,_5,_5];
_9 = [_5,_5,_5,_5,_5,_5,_5];
_9 = [_5,_5,_5,_5,_5,_5,_5];
RET.0 = [_2,_2,_2];
_5 = 137_u8 | 49_u8;
_1 = 100_i8 as i64;
_1 = -_6.1;
_6.0 = (-1063521493_i32) as f64;
RET.0 = [_2,_2,_2];
_8 = [_5,_5,_5,_5,_5,_5,_5];
_4 = core::ptr::addr_of_mut!(_10);
_11 = '\u{a4301}';
_1 = !_6.1;
_3 = !(-9223372036854775808_isize);
_3 = _5 as isize;
_5 = 196972838733708020816016674249204595797_u128 as u8;
_12 = [13351737054616905494_u64,10330455140661960073_u64,1279641657381374029_u64,13270293827681783840_u64,7275215058504299341_u64,10570005282915847258_u64];
_6.0 = 3650314338_u32 as f64;
_9 = [_5,_5,_5,_5,_5,_5,_5];
_5 = !6_u8;
_4 = core::ptr::addr_of_mut!((*_4));
Call(RET.0 = fn2(_12, _1, _12, _6, _3, _6.1, _3, _12, _1, _12), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_6.1 = _1;
_1 = _6.1 * _6.1;
_8 = [_5,_5,_5,_5,_5,_5,_5];
_6.1 = _1 & _1;
_11 = '\u{5d3e9}';
_13 = _3;
_3 = _13 + _13;
_10 = 1116804329_i32;
_4 = core::ptr::addr_of_mut!(_10);
_15 = [true,true,false,true,false];
Goto(bb4)
}
bb4 = {
_6.0 = _3 as f64;
_6.0 = 67_i8 as f64;
match _10 {
0 => bb1,
1 => bb2,
2 => bb5,
3 => bb6,
4 => bb7,
5 => bb8,
1116804329 => bb10,
_ => bb9
}
}
bb5 = {
_6.1 = _1;
_1 = _6.1 * _6.1;
_8 = [_5,_5,_5,_5,_5,_5,_5];
_6.1 = _1 & _1;
_11 = '\u{5d3e9}';
_13 = _3;
_3 = _13 + _13;
_10 = 1116804329_i32;
_4 = core::ptr::addr_of_mut!(_10);
_15 = [true,true,false,true,false];
Goto(bb4)
}
bb6 = {
_2 = _1 as i128;
_2 = (-110551205840890335274506919402650166958_i128) * 39964022775680373827349400288936066438_i128;
_9 = [_5,_5,_5,_5,_5,_5,_5];
_6.0 = _5 as f64;
_8 = [_5,_5,_5,_5,_5,_5,_5];
_9 = [_5,_5,_5,_5,_5,_5,_5];
_9 = [_5,_5,_5,_5,_5,_5,_5];
RET.0 = [_2,_2,_2];
_5 = 137_u8 | 49_u8;
_1 = 100_i8 as i64;
_1 = -_6.1;
_6.0 = (-1063521493_i32) as f64;
RET.0 = [_2,_2,_2];
_8 = [_5,_5,_5,_5,_5,_5,_5];
_4 = core::ptr::addr_of_mut!(_10);
_11 = '\u{a4301}';
_1 = !_6.1;
_3 = !(-9223372036854775808_isize);
_3 = _5 as isize;
_5 = 196972838733708020816016674249204595797_u128 as u8;
_12 = [13351737054616905494_u64,10330455140661960073_u64,1279641657381374029_u64,13270293827681783840_u64,7275215058504299341_u64,10570005282915847258_u64];
_6.0 = 3650314338_u32 as f64;
_9 = [_5,_5,_5,_5,_5,_5,_5];
_5 = !6_u8;
_4 = core::ptr::addr_of_mut!((*_4));
Call(RET.0 = fn2(_12, _1, _12, _6, _3, _6.1, _3, _12, _1, _12), ReturnTo(bb3), UnwindUnreachable())
}
bb7 = {
_2 = (-147956498699929652601081787441011698875_i128) ^ (-147306335958471284313096789471886275839_i128);
_2 = 101604548243293716558404954186810621841_i128 & 132389125979122967808228108491694274528_i128;
RET.0 = [_2,_2,_2];
RET.0 = [_2,_2,_2];
_6.1 = _1 & _1;
_2 = (-122259827944152160076436518763485392498_i128);
_6.0 = 43597_u16 as f64;
Goto(bb2)
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_15 = [false,false,false,false,true];
_13 = _3;
_12 = [1218224570232205751_u64,15907302105257443415_u64,12883487075640261873_u64,10126417728967131954_u64,12969135766721318206_u64,2329947414320090881_u64];
_14 = [_3,_3];
_10 = (-1164024173_i32);
_1 = _6.1 * _6.1;
_4 = core::ptr::addr_of_mut!((*_4));
RET.0 = [_2,_2,_2];
_3 = _11 as isize;
_6.0 = 297906681876051402938740336459741987719_u128 as f64;
_4 = core::ptr::addr_of_mut!((*_4));
RET.0 = [_2,_2,_2];
_1 = _6.1 ^ _6.1;
_6.1 = _11 as i64;
_4 = core::ptr::addr_of_mut!((*_4));
_15 = [false,true,false,false,false];
_9 = _8;
_11 = '\u{d7efe}';
match (*_4) {
0 => bb6,
1 => bb4,
2 => bb3,
3 => bb11,
4 => bb12,
5 => bb13,
6 => bb14,
340282366920938463463374607430604187283 => bb16,
_ => bb15
}
}
bb11 = {
_2 = _1 as i128;
_2 = (-110551205840890335274506919402650166958_i128) * 39964022775680373827349400288936066438_i128;
_9 = [_5,_5,_5,_5,_5,_5,_5];
_6.0 = _5 as f64;
_8 = [_5,_5,_5,_5,_5,_5,_5];
_9 = [_5,_5,_5,_5,_5,_5,_5];
_9 = [_5,_5,_5,_5,_5,_5,_5];
RET.0 = [_2,_2,_2];
_5 = 137_u8 | 49_u8;
_1 = 100_i8 as i64;
_1 = -_6.1;
_6.0 = (-1063521493_i32) as f64;
RET.0 = [_2,_2,_2];
_8 = [_5,_5,_5,_5,_5,_5,_5];
_4 = core::ptr::addr_of_mut!(_10);
_11 = '\u{a4301}';
_1 = !_6.1;
_3 = !(-9223372036854775808_isize);
_3 = _5 as isize;
_5 = 196972838733708020816016674249204595797_u128 as u8;
_12 = [13351737054616905494_u64,10330455140661960073_u64,1279641657381374029_u64,13270293827681783840_u64,7275215058504299341_u64,10570005282915847258_u64];
_6.0 = 3650314338_u32 as f64;
_9 = [_5,_5,_5,_5,_5,_5,_5];
_5 = !6_u8;
_4 = core::ptr::addr_of_mut!((*_4));
Call(RET.0 = fn2(_12, _1, _12, _6, _3, _6.1, _3, _12, _1, _12), ReturnTo(bb3), UnwindUnreachable())
}
bb12 = {
_2 = (-147956498699929652601081787441011698875_i128) ^ (-147306335958471284313096789471886275839_i128);
_2 = 101604548243293716558404954186810621841_i128 & 132389125979122967808228108491694274528_i128;
RET.0 = [_2,_2,_2];
RET.0 = [_2,_2,_2];
_6.1 = _1 & _1;
_2 = (-122259827944152160076436518763485392498_i128);
_6.0 = 43597_u16 as f64;
Goto(bb2)
}
bb13 = {
_6.0 = _3 as f64;
_6.0 = 67_i8 as f64;
match _10 {
0 => bb1,
1 => bb2,
2 => bb5,
3 => bb6,
4 => bb7,
5 => bb8,
1116804329 => bb10,
_ => bb9
}
}
bb14 = {
_2 = _1 as i128;
_2 = (-110551205840890335274506919402650166958_i128) * 39964022775680373827349400288936066438_i128;
_9 = [_5,_5,_5,_5,_5,_5,_5];
_6.0 = _5 as f64;
_8 = [_5,_5,_5,_5,_5,_5,_5];
_9 = [_5,_5,_5,_5,_5,_5,_5];
_9 = [_5,_5,_5,_5,_5,_5,_5];
RET.0 = [_2,_2,_2];
_5 = 137_u8 | 49_u8;
_1 = 100_i8 as i64;
_1 = -_6.1;
_6.0 = (-1063521493_i32) as f64;
RET.0 = [_2,_2,_2];
_8 = [_5,_5,_5,_5,_5,_5,_5];
_4 = core::ptr::addr_of_mut!(_10);
_11 = '\u{a4301}';
_1 = !_6.1;
_3 = !(-9223372036854775808_isize);
_3 = _5 as isize;
_5 = 196972838733708020816016674249204595797_u128 as u8;
_12 = [13351737054616905494_u64,10330455140661960073_u64,1279641657381374029_u64,13270293827681783840_u64,7275215058504299341_u64,10570005282915847258_u64];
_6.0 = 3650314338_u32 as f64;
_9 = [_5,_5,_5,_5,_5,_5,_5];
_5 = !6_u8;
_4 = core::ptr::addr_of_mut!((*_4));
Call(RET.0 = fn2(_12, _1, _12, _6, _3, _6.1, _3, _12, _1, _12), ReturnTo(bb3), UnwindUnreachable())
}
bb15 = {
_6.1 = _1;
_1 = _6.1 * _6.1;
_8 = [_5,_5,_5,_5,_5,_5,_5];
_6.1 = _1 & _1;
_11 = '\u{5d3e9}';
_13 = _3;
_3 = _13 + _13;
_10 = 1116804329_i32;
_4 = core::ptr::addr_of_mut!(_10);
_15 = [true,true,false,true,false];
Goto(bb4)
}
bb16 = {
_1 = !_6.1;
_16 = [_2,_2,_2];
_17 = _11 as isize;
_1 = _13 as i64;
_12 = [321857252475451090_u64,2756571467654894721_u64,2341324646556677906_u64,3319322793314866050_u64,16764171367247396404_u64,4820909523149438584_u64];
_20.fld0 = Adt48 { fld0: _6,fld1: _11 };
_10 = 657303990_i32;
_19 = [false];
_20.fld0.fld1 = _11;
_9 = [_5,_5,_5,_5,_5,_5,_5];
_20.fld0.fld0.0 = _6.0;
_5 = 89_u8 ^ 172_u8;
_23 = 295467240534769261555221037461007081391_u128 as isize;
_19 = [true];
_22 = [_1,_1,_6.1,_1,_6.1];
_2 = false as i128;
_6.1 = false as i64;
_18 = Adt41::Variant2 { fld0: _15 };
_3 = _13;
SetDiscriminant(_18, 0);
place!(Field::<u128>(Variant(_18, 0), 1)) = (*_4) as u128;
_20.fld0 = Adt48 { fld0: _6,fld1: _11 };
_15 = [true,true,true,true,true];
place!(Field::<Adt39>(Variant(_18, 0), 0)).fld0.0 = _5 as f32;
_1 = _6.1;
Goto(bb17)
}
bb17 = {
Call(_24 = dump_var(1_usize, 10_usize, Move(_10), 12_usize, Move(_12), 17_usize, Move(_17), 11_usize, Move(_11)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_24 = dump_var(1_usize, 22_usize, Move(_22), 14_usize, Move(_14), 3_usize, Move(_3), 13_usize, Move(_13)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn2(mut _1: [u64; 6],mut _2: i64,mut _3: [u64; 6],mut _4: (f64, i64),mut _5: isize,mut _6: i64,mut _7: isize,mut _8: [u64; 6],mut _9: i64,mut _10: [u64; 6]) -> [i128; 3] {
mir! {
type RET = [i128; 3];
let _11: f32;
let _12: f64;
let _13: isize;
let _14: u32;
let _15: usize;
let _16: f64;
let _17: u128;
let _18: *mut i32;
let _19: [u32; 2];
let _20: i128;
let _21: u32;
let _22: Adt41;
let _23: isize;
let _24: f32;
let _25: f64;
let _26: Adt50;
let _27: ();
let _28: ();
{
_1 = [6312861187282173435_u64,3673481037265923169_u64,16062675141774669465_u64,13164149007166436692_u64,14110340591099433671_u64,13746223759304201935_u64];
Goto(bb1)
}
bb1 = {
_2 = (-57359537901902577776585355609429115851_i128) as i64;
_8 = [17752694212243030934_u64,13204159655336863937_u64,6178769011624765180_u64,9543515110837841924_u64,7851020913592516432_u64,10179386318802331704_u64];
_1 = [9602775578600731613_u64,7254131391388711128_u64,10700352913900442163_u64,4437740022482587207_u64,10317547081196154080_u64,9722918418259207985_u64];
_3 = [1125732272515602105_u64,8665974135051840120_u64,17356852747866094410_u64,13215754657459984046_u64,8181728012145808126_u64,14408676915285363376_u64];
_3 = [10245535311306938275_u64,6454503193101537416_u64,2455395112458044481_u64,11873153195865653955_u64,11431142580508956422_u64,15038090735081862471_u64];
_9 = _4.1;
_4.1 = _6;
_1 = [4285030818603533698_u64,7268539934946159153_u64,10332797327081668286_u64,4226554364398106330_u64,10986873861300151557_u64,8797271282305284696_u64];
_12 = _4.0;
RET = [53591646797281143106567183811228000168_i128,52636064065704942078645245267539828222_i128,160416522295714200027702482510066975295_i128];
_11 = _2 as f32;
_3 = _10;
_9 = _4.1 >> _7;
_10 = _3;
RET = [(-24858709019266439175457665543258031931_i128),(-32506815082074561444208052591818493196_i128),110955634278242137476225515343459147147_i128];
_5 = _9 as isize;
_13 = !_7;
_8 = [9093833341094889661_u64,12657947250739727694_u64,13049294500469481991_u64,7623584118243428634_u64,14761696395143172416_u64,17390940023841816197_u64];
_2 = _4.1 + _9;
_13 = !_5;
_12 = _4.0;
_4 = (_12, _9);
_10 = [11229231719238783737_u64,17813353643568936133_u64,4627858107510857664_u64,3859214146618723125_u64,14489859220071944801_u64,7864908426066816010_u64];
_10 = [11239251633589318311_u64,13858263898869970564_u64,14322891222934448447_u64,14575344995423864146_u64,10549917895006499099_u64,11145153105863123327_u64];
_14 = 326132957_u32;
match _14 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
6 => bb8,
326132957 => bb10,
_ => bb9
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_13 = -_7;
_15 = 1904571420974124974_usize;
_5 = _13;
_6 = '\u{763e7}' as i64;
_13 = -_7;
_16 = _12 * _12;
_16 = _12 * _12;
_2 = _6 + _9;
_7 = true as isize;
_14 = 1023376032_u32 - 2305725670_u32;
_9 = (-27797_i16) as i64;
_8 = [12680822973109789130_u64,12181142900054186502_u64,12310375375674036911_u64,9102342141635899967_u64,5790449278015143994_u64,2408737070817940284_u64];
_4 = (_16, _2);
_14 = 3472646990_u32;
_4.0 = (-1785984469_i32) as f64;
_4 = (_16, _2);
_4 = (_12, _9);
Call(_1 = fn3(_4.1, _11, _15, _3, _9, _2, _6, _5, _16, _12, _10, _10), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
RET = [(-141771106383932763232396129852754206346_i128),23457609787534787907999991778743215702_i128,72684490172786790501481816394086554066_i128];
RET = [62903645489951721173492722476224296014_i128,37228372313681209751621825972171211608_i128,58576801576075036499229734776012300222_i128];
_4 = (_12, _2);
_12 = -_16;
_11 = 19978_i16 as f32;
_10 = [4620788870189906840_u64,16759557034467539216_u64,2281502491534444123_u64,1023503011014894538_u64,1785599342643112146_u64,13836192969115674990_u64];
_6 = !_9;
_4.0 = _12;
RET = [(-129338245037485923755825742392514339889_i128),131784535179896476417661013000703369046_i128,72229640782881702161952477431702078636_i128];
_2 = _4.1;
_17 = 206221609444760680457234646762936520029_u128 ^ 283754272844046569833361354503211182775_u128;
_4.0 = _17 as f64;
_17 = !11214569181208880432278469195362095985_u128;
_9 = _4.1 & _4.1;
_19 = [_14,_14];
RET = [(-156957026349094297811345140239664871840_i128),33747932200246963585190465881471595611_i128,(-137251106167957396599887199949906524825_i128)];
_7 = (-22355_i16) as isize;
_19 = [_14,_14];
_15 = (-61_i8) as usize;
_1 = [13048916545854674164_u64,18169109566846276026_u64,4662917024849153195_u64,4092914364343822407_u64,7368916484602734169_u64,4077508505812005024_u64];
_16 = -_12;
match _14 {
3472646990 => bb12,
_ => bb3
}
}
bb12 = {
_5 = -_13;
_21 = _14;
_12 = 654215442_i32 as f64;
_4.0 = _16;
_3 = _8;
_14 = !_21;
RET = [163880235940047842861230568899206024688_i128,(-35357607569487132063884028284007702844_i128),157153426901537250761348255524422506691_i128];
_7 = _5 | _13;
_19 = [_21,_14];
_17 = 177665393966707540777436300096650292905_u128 | 258153049343535186716014185681979908045_u128;
_3 = [9490569913088347021_u64,8231573988785200236_u64,829153786871056175_u64,13301518990952937404_u64,12795238220261307555_u64,5375531674852775215_u64];
_10 = [11719198787722386149_u64,567800675404554646_u64,9127119467908889695_u64,3527557507536340115_u64,6143133027898917343_u64,645818941481964833_u64];
_13 = 16378_i16 as isize;
_17 = (-887023890_i32) as u128;
_3 = _8;
_4.1 = _9;
_21 = _4.0 as u32;
_17 = 1339164377_i32 as u128;
_7 = !_5;
_14 = _21;
_9 = _2 & _4.1;
_15 = 7998135635389063180_usize >> _6;
_5 = !_7;
_12 = _4.0 + _16;
Goto(bb13)
}
bb13 = {
_11 = 12865002585387595323_u64 as f32;
_26.fld0.fld0 = (_12, _4.1);
Call(_2 = core::intrinsics::transmute(_7), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
_19 = [_14,_14];
_2 = _26.fld0.fld0.1;
_23 = _17 as isize;
_19 = [_14,_14];
_15 = 3218791758145410005_usize << _13;
_19 = [_21,_14];
Goto(bb15)
}
bb15 = {
Call(_27 = dump_var(2_usize, 3_usize, Move(_3), 23_usize, Move(_23), 2_usize, Move(_2), 6_usize, Move(_6)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_27 = dump_var(2_usize, 5_usize, Move(_5), 8_usize, Move(_8), 9_usize, Move(_9), 14_usize, Move(_14)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn3(mut _1: i64,mut _2: f32,mut _3: usize,mut _4: [u64; 6],mut _5: i64,mut _6: i64,mut _7: i64,mut _8: isize,mut _9: f64,mut _10: f64,mut _11: [u64; 6],mut _12: [u64; 6]) -> [u64; 6] {
mir! {
type RET = [u64; 6];
let _13: [i64; 5];
let _14: char;
let _15: [i64; 5];
let _16: usize;
let _17: [i64; 5];
let _18: *mut i64;
let _19: i8;
let _20: Adt51;
let _21: Adt39;
let _22: (usize, i128);
let _23: Adt42;
let _24: isize;
let _25: char;
let _26: [u32; 2];
let _27: ();
let _28: ();
{
_2 = _8 as f32;
_6 = _5 ^ _7;
_8 = (-9223372036854775808_isize);
_9 = _10 * _10;
_10 = -_9;
_3 = _8 as usize;
_3 = 18220099409901317933_usize * 10466267796060517715_usize;
_4 = [1417572049860033494_u64,10425656444547200896_u64,9096208551471392249_u64,8147025485253434289_u64,994674993701160534_u64,8058014362861758799_u64];
_14 = '\u{83d08}';
_12 = [17639186713477363104_u64,12998376924019915259_u64,10911075681681416297_u64,3927585167187637089_u64,16599550836569288583_u64,2226745452153172002_u64];
_5 = -_6;
_4 = _12;
_15 = [_6,_6,_5,_5,_6];
_15 = [_5,_5,_5,_5,_5];
RET = [10003515512896457053_u64,356501960306063696_u64,9188779561136363293_u64,320527688289755805_u64,17491395177493316148_u64,16613650778560161019_u64];
_5 = -_7;
match _8 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb5,
5 => bb6,
340282366920938463454151235394913435648 => bb8,
_ => bb7
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_16 = _2 as usize;
_15 = [_6,_5,_5,_7,_6];
_5 = _6 | _6;
_16 = !_3;
_11 = RET;
_18 = core::ptr::addr_of_mut!(_6);
_19 = (-78_i8);
_5 = 3957931427_u32 as i64;
_10 = _9;
_18 = core::ptr::addr_of_mut!(_1);
RET = [3122095314816676433_u64,10194976617034977344_u64,1599246022955733056_u64,14981183879423938639_u64,8055381455322674344_u64,9772860027122798683_u64];
_20 = Adt51::Variant0 { fld0: (-157979911321290212448752506728583925401_i128) };
match _8 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb6,
340282366920938463454151235394913435648 => bb9,
_ => bb7
}
}
bb9 = {
_6 = !_5;
_6 = (*_18) & _5;
_11 = [4278482440541874890_u64,10684732418669410747_u64,12957656848188867905_u64,14220590419608757758_u64,1982020866959753978_u64,14948448891189089857_u64];
_1 = _16 as i64;
_7 = -_1;
Call(_8 = fn4((*_18), _12, _2, _11, _9, _6, _9, _4, RET, _10), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_1 = _8 as i64;
_18 = core::ptr::addr_of_mut!(_7);
_6 = -_7;
_21.fld0 = (_2,);
_21.fld1 = _16 as f32;
Goto(bb11)
}
bb11 = {
_21.fld1 = _9 as f32;
_14 = '\u{e90d5}';
_16 = _2 as usize;
_12 = [14418476850686932784_u64,3560135303289776425_u64,3943116542718758661_u64,3343669449559339080_u64,8657719772563164153_u64,6887034677460381563_u64];
_23 = Adt42 { fld0: _7,fld1: _21.fld0,fld2: _18 };
RET = [6608160400930541966_u64,5351344526215892149_u64,13083754814813919581_u64,10699654890556589126_u64,13059452540114412651_u64,16083868504773761943_u64];
_23.fld0 = false as i64;
_17 = [_6,_7,_1,_6,_6];
Call(_2 = fn8(_23.fld1.0, _7, _23.fld2, _8, _8, _21.fld1, _9), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
_23.fld2 = core::ptr::addr_of_mut!((*_18));
_3 = 2862463246_u32 as usize;
_22 = (_16, (-84595802199023448991558942217333159223_i128));
_16 = _3 & _22.0;
RET = [719697065214873334_u64,11912107626841296739_u64,9540350576980362581_u64,15698908281150296924_u64,183294916476520791_u64,13689263525025735441_u64];
_24 = _8;
match _22.1 {
0 => bb1,
1 => bb2,
2 => bb7,
3 => bb4,
4 => bb11,
5 => bb8,
255686564721915014471815665214435052233 => bb14,
_ => bb13
}
}
bb13 = {
Return()
}
bb14 = {
place!(Field::<i128>(Variant(_20, 0), 0)) = -_22.1;
_13 = [(*_18),_6,_6,_1,_1];
_17 = _13;
_23.fld2 = core::ptr::addr_of_mut!(_5);
_18 = core::ptr::addr_of_mut!(_23.fld0);
_25 = _14;
_2 = _23.fld1.0 + _21.fld1;
RET = [16799089266560465916_u64,13569701913612797282_u64,6492064097100105308_u64,16329325013525296450_u64,4391319499083585033_u64,14781656864133294146_u64];
_21.fld0.0 = _21.fld1 * _23.fld1.0;
_19 = (-92_i8) + 55_i8;
_22.0 = 270251942492862540881428660063446035922_u128 as usize;
_16 = _3;
_22 = (_16, Field::<i128>(Variant(_20, 0), 0));
_16 = !_22.0;
_17 = [(*_18),_23.fld0,_6,_7,_1];
Goto(bb15)
}
bb15 = {
Call(_27 = dump_var(3_usize, 1_usize, Move(_1), 6_usize, Move(_6), 11_usize, Move(_11), 17_usize, Move(_17)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_27 = dump_var(3_usize, 16_usize, Move(_16), 13_usize, Move(_13), 8_usize, Move(_8), 4_usize, Move(_4)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_27 = dump_var(3_usize, 24_usize, Move(_24), 28_usize, _28, 28_usize, _28, 28_usize, _28), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn4(mut _1: i64,mut _2: [u64; 6],mut _3: f32,mut _4: [u64; 6],mut _5: f64,mut _6: i64,mut _7: f64,mut _8: [u64; 6],mut _9: [u64; 6],mut _10: f64) -> isize {
mir! {
type RET = isize;
let _11: f64;
let _12: bool;
let _13: u128;
let _14: (f32,);
let _15: [bool; 5];
let _16: isize;
let _17: [u8; 7];
let _18: Adt53;
let _19: char;
let _20: u8;
let _21: [u32; 2];
let _22: f32;
let _23: f64;
let _24: Adt46;
let _25: isize;
let _26: [bool; 5];
let _27: char;
let _28: u32;
let _29: Adt41;
let _30: isize;
let _31: isize;
let _32: *mut i64;
let _33: ((usize, i128),);
let _34: [u64; 6];
let _35: char;
let _36: f32;
let _37: char;
let _38: [bool; 5];
let _39: *const i64;
let _40: *mut i64;
let _41: [i64; 5];
let _42: ();
let _43: ();
{
_11 = _7 * _10;
RET = 9223372036854775807_isize;
_6 = 178153935906174035362009114954840191508_u128 as i64;
_10 = _11 * _7;
_6 = 34938_u16 as i64;
_5 = -_7;
_10 = _6 as f64;
_3 = _11 as f32;
_5 = -_10;
_1 = _6 >> RET;
_8 = [5552271831292914619_u64,4613254940978334457_u64,16045762137033135970_u64,4430091100319223833_u64,15943385133971193646_u64,13928082669471226286_u64];
_6 = 7_usize as i64;
_3 = (-340258546_i32) as f32;
_9 = [12011360122017957793_u64,13274035981358116676_u64,11619979755589783043_u64,7695646200815973321_u64,8128289979726529419_u64,574020836170388908_u64];
RET = 134_u8 as isize;
RET = 44_isize & (-9223372036854775808_isize);
_9 = _8;
_9 = _4;
_2 = [8644050424326603989_u64,6771273935489043030_u64,6483959724245804392_u64,1292903204715962441_u64,7195785972137358395_u64,10988323168750617308_u64];
_3 = _7 as f32;
_10 = -_11;
_7 = -_11;
_3 = (-344962361_i32) as f32;
_11 = _1 as f64;
Call(_5 = core::intrinsics::transmute(_1), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_9 = _8;
_5 = 15407781640313906882_u64 as f64;
_8 = [11685543789381093421_u64,8904782487485209057_u64,10029133805242278152_u64,17324545751407534005_u64,18299482198373996230_u64,3058036846860829948_u64];
RET = (-116_isize) >> _1;
_3 = (-97_i8) as f32;
RET = (-9223372036854775808_isize);
_5 = _10 + _10;
_11 = _5 * _10;
_7 = -_11;
_6 = -_1;
_13 = !248999975688765969359655141152475320087_u128;
_2 = [17408913061463913795_u64,16294271228741447354_u64,3391693309765348009_u64,13044182924356242672_u64,9116262719897426643_u64,10741023824332350250_u64];
_5 = _11;
_7 = _11;
_13 = !287509630008613782888092946097223758458_u128;
_10 = 1183727342_u32 as f64;
RET = 9223372036854775807_isize;
_2 = [15927051352731896891_u64,11038116075852126279_u64,15030709456355215093_u64,13483172278221937796_u64,12528860157580284407_u64,3754603628094503526_u64];
_7 = _11 + _11;
RET = 83_isize;
_2 = [4986763023670724137_u64,12437820234845645085_u64,10535888896756809993_u64,12499883778489190352_u64,15507484862917194662_u64,10988497677782395910_u64];
match RET {
0 => bb2,
83 => bb4,
_ => bb3
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
_6 = -_1;
RET = (-9223372036854775808_isize) + 116_isize;
_2 = _9;
_14 = (_3,);
_13 = '\u{fffa3}' as u128;
_8 = [5826436964553424264_u64,3128108492277271362_u64,10771867169074160133_u64,10845797039292420711_u64,9004902678520346993_u64,11046638358757629259_u64];
_10 = -_7;
_10 = _7;
_8 = [13371219140334269687_u64,1739911775050731612_u64,11031371841062296008_u64,2553962521344593964_u64,14744776652919007704_u64,11478934030301885209_u64];
_1 = 139590426360083601551630789385882955169_i128 as i64;
_6 = !_1;
_6 = _1;
_2 = [13346622089839868733_u64,4985033919104741062_u64,7558699442935344733_u64,6559173473552624682_u64,17269991528650761620_u64,17830332864106677366_u64];
_3 = _14.0;
_14.0 = _3;
_13 = 12698939694498251703782631030096981178_u128 - 222501280177673053888531966134671982403_u128;
Goto(bb5)
}
bb5 = {
RET = 9223372036854775807_isize;
_4 = [11622903641100397630_u64,3207009073889677282_u64,5961335010558711083_u64,12024735226195368220_u64,18371179703233504904_u64,17558436585066079396_u64];
_11 = _1 as f64;
_14.0 = -_3;
_3 = _14.0 * _14.0;
_6 = !_1;
RET = (-9223372036854775808_isize);
_12 = _10 >= _10;
_14 = (_3,);
_10 = RET as f64;
_4 = [1041126495550666395_u64,8426361071091990308_u64,8358347038438662767_u64,3776613015052532211_u64,12330663893375992508_u64,6496197502213971695_u64];
_15 = [_12,_12,_12,_12,_12];
_9 = _4;
_11 = _7;
_11 = _5 - _7;
_9 = _4;
Call(_7 = core::intrinsics::transmute(RET), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
_5 = _11;
_5 = _11;
_11 = _5;
_15 = [_12,_12,_12,_12,_12];
_10 = _5 * _11;
_11 = _5;
_15 = [_12,_12,_12,_12,_12];
_12 = !false;
_16 = -RET;
_13 = 13511167580136856669_u64 as u128;
_3 = _14.0;
_17 = [172_u8,144_u8,32_u8,103_u8,85_u8,57_u8,53_u8];
_2 = _4;
_1 = _6 + _6;
Goto(bb7)
}
bb7 = {
_14 = (_3,);
RET = !_16;
Call(_15 = fn5(_11, _10, _11, _11, _10, _11, _11, _9, _11, _11, _8, _10, _10, _11, _5), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
_7 = (-46_i8) as f64;
_11 = (-3806531147836977281657885764067168626_i128) as f64;
_3 = _14.0;
_14 = (_3,);
_19 = '\u{b164b}';
_11 = 18527_i16 as f64;
_2 = _9;
RET = 68_u8 as isize;
_12 = !true;
_21 = [74767094_u32,3064481702_u32];
_15 = [_12,_12,_12,_12,_12];
RET = -_16;
_7 = _10;
_8 = _4;
_14 = (_3,);
_4 = _9;
_23 = _5 - _10;
_15 = [_12,_12,_12,_12,_12];
_16 = 25502_u16 as isize;
_22 = -_3;
_17 = [198_u8,39_u8,152_u8,158_u8,228_u8,251_u8,58_u8];
Goto(bb9)
}
bb9 = {
_17 = [98_u8,70_u8,111_u8,208_u8,223_u8,0_u8,13_u8];
_15 = [_12,_12,_12,_12,_12];
_14 = (_22,);
_13 = 199241002113764417840831376815727569790_u128 & 43878713046397938446876089811952031934_u128;
RET = (-157847223291162776433970652427511847208_i128) as isize;
_3 = _14.0 + _14.0;
_14.0 = -_22;
_16 = -RET;
_2 = [18370302249318586011_u64,3904375373316908522_u64,16132976661154637164_u64,8664087736574988015_u64,8299261808918081705_u64,12184336964246013262_u64];
_26 = _15;
_5 = _23 - _10;
_21 = [344435528_u32,675641255_u32];
_23 = -_7;
_7 = -_5;
_27 = _19;
_15 = [_12,_12,_12,_12,_12];
_14.0 = -_3;
_6 = _1 ^ _1;
_16 = 102_i8 as isize;
_16 = RET;
_31 = _16;
Call(_10 = core::intrinsics::fmaf64(_23, _7, _5), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_2 = [10971248479990499803_u64,2218817758490738112_u64,4651291180630085692_u64,6946899373477110893_u64,5790338498205668790_u64,12098525880440833945_u64];
_11 = -_7;
_28 = 2148438279_u32;
_32 = core::ptr::addr_of_mut!(_1);
_12 = !true;
_21 = [_28,_28];
_5 = _23 * _11;
Goto(bb11)
}
bb11 = {
_26 = [_12,_12,_12,_12,_12];
_22 = _14.0;
_33.0 = (8948702641798600574_usize, 151612109926187074149569929992935929458_i128);
_20 = !142_u8;
_30 = _33.0.0 as isize;
_2 = [13465886916784490072_u64,7568594902755171490_u64,1256567680813163209_u64,12552977968546481514_u64,11584014450966496432_u64,7693068158387255950_u64];
_26 = _15;
_1 = -_6;
_27 = _19;
_25 = _31;
_2 = [3530647475215851351_u64,18274368966273679282_u64,567536045859786941_u64,9426303092600895293_u64,14046581311988303509_u64,17512869735995550124_u64];
_9 = [10038695845602064537_u64,17776002939375227419_u64,13055082909051574019_u64,5575107622967513303_u64,10317350961113308681_u64,10700452916554578378_u64];
_34 = [11227839357879226154_u64,2589918857609692927_u64,14225563835996825063_u64,1328120840469160227_u64,10989808451690436077_u64,720652380102913763_u64];
_15 = [_12,_12,_12,_12,_12];
Call(_30 = core::intrinsics::bswap(_31), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
_7 = 487434015_i32 as f64;
_21 = [_28,_28];
_31 = _30;
_33.0 = (5_usize, 86679380155691473642239849459529451084_i128);
_16 = -_31;
_37 = _19;
_23 = -_10;
_39 = core::ptr::addr_of!((*_32));
_3 = _14.0;
_8 = _4;
_26 = [_12,_12,_12,_12,_12];
RET = _31 + _16;
_39 = core::ptr::addr_of!(_6);
_6 = _13 as i64;
_23 = -_11;
_15 = [_12,_12,_12,_12,_12];
_5 = _11;
_25 = _16 + _16;
_32 = core::ptr::addr_of_mut!((*_32));
_4 = [1688484761658968359_u64,11155532174531150606_u64,8530509466471246993_u64,1543142029754650846_u64,11613862596766336966_u64,15624543013716762689_u64];
_28 = _3 as u32;
_12 = false;
_3 = -_22;
_35 = _27;
_31 = _13 as isize;
match _33.0.0 {
0 => bb13,
1 => bb14,
2 => bb15,
5 => bb17,
_ => bb16
}
}
bb13 = {
_6 = -_1;
RET = (-9223372036854775808_isize) + 116_isize;
_2 = _9;
_14 = (_3,);
_13 = '\u{fffa3}' as u128;
_8 = [5826436964553424264_u64,3128108492277271362_u64,10771867169074160133_u64,10845797039292420711_u64,9004902678520346993_u64,11046638358757629259_u64];
_10 = -_7;
_10 = _7;
_8 = [13371219140334269687_u64,1739911775050731612_u64,11031371841062296008_u64,2553962521344593964_u64,14744776652919007704_u64,11478934030301885209_u64];
_1 = 139590426360083601551630789385882955169_i128 as i64;
_6 = !_1;
_6 = _1;
_2 = [13346622089839868733_u64,4985033919104741062_u64,7558699442935344733_u64,6559173473552624682_u64,17269991528650761620_u64,17830332864106677366_u64];
_3 = _14.0;
_14.0 = _3;
_13 = 12698939694498251703782631030096981178_u128 - 222501280177673053888531966134671982403_u128;
Goto(bb5)
}
bb14 = {
_9 = _8;
_5 = 15407781640313906882_u64 as f64;
_8 = [11685543789381093421_u64,8904782487485209057_u64,10029133805242278152_u64,17324545751407534005_u64,18299482198373996230_u64,3058036846860829948_u64];
RET = (-116_isize) >> _1;
_3 = (-97_i8) as f32;
RET = (-9223372036854775808_isize);
_5 = _10 + _10;
_11 = _5 * _10;
_7 = -_11;
_6 = -_1;
_13 = !248999975688765969359655141152475320087_u128;
_2 = [17408913061463913795_u64,16294271228741447354_u64,3391693309765348009_u64,13044182924356242672_u64,9116262719897426643_u64,10741023824332350250_u64];
_5 = _11;
_7 = _11;
_13 = !287509630008613782888092946097223758458_u128;
_10 = 1183727342_u32 as f64;
RET = 9223372036854775807_isize;
_2 = [15927051352731896891_u64,11038116075852126279_u64,15030709456355215093_u64,13483172278221937796_u64,12528860157580284407_u64,3754603628094503526_u64];
_7 = _11 + _11;
RET = 83_isize;
_2 = [4986763023670724137_u64,12437820234845645085_u64,10535888896756809993_u64,12499883778489190352_u64,15507484862917194662_u64,10988497677782395910_u64];
match RET {
0 => bb2,
83 => bb4,
_ => bb3
}
}
bb15 = {
_17 = [98_u8,70_u8,111_u8,208_u8,223_u8,0_u8,13_u8];
_15 = [_12,_12,_12,_12,_12];
_14 = (_22,);
_13 = 199241002113764417840831376815727569790_u128 & 43878713046397938446876089811952031934_u128;
RET = (-157847223291162776433970652427511847208_i128) as isize;
_3 = _14.0 + _14.0;
_14.0 = -_22;
_16 = -RET;
_2 = [18370302249318586011_u64,3904375373316908522_u64,16132976661154637164_u64,8664087736574988015_u64,8299261808918081705_u64,12184336964246013262_u64];
_26 = _15;
_5 = _23 - _10;
_21 = [344435528_u32,675641255_u32];
_23 = -_7;
_7 = -_5;
_27 = _19;
_15 = [_12,_12,_12,_12,_12];
_14.0 = -_3;
_6 = _1 ^ _1;
_16 = 102_i8 as isize;
_16 = RET;
_31 = _16;
Call(_10 = core::intrinsics::fmaf64(_23, _7, _5), ReturnTo(bb10), UnwindUnreachable())
}
bb16 = {
Return()
}
bb17 = {
_4 = _34;
_21 = [_28,_28];
_20 = 161_u8;
_33.0 = (7_usize, (-128937666280322109020928062992305130101_i128));
_6 = -_1;
_40 = core::ptr::addr_of_mut!((*_39));
_41 = [(*_40),(*_32),(*_40),(*_39),(*_39)];
_10 = _11 - _5;
_30 = -_25;
_28 = 4087135159_u32;
_5 = _10 * _23;
_25 = _30;
_1 = _6 - (*_39);
_29 = Adt41::Variant2 { fld0: _15 };
RET = _16 | _30;
_16 = _14.0 as isize;
_33.0 = (1_usize, 25226597383430482682609003455634980844_i128);
_40 = _32;
_36 = _10 as f32;
_10 = _23;
_25 = RET + RET;
_23 = _33.0.1 as f64;
_30 = _25;
_38 = [_12,_12,_12,_12,_12];
_33.0.1 = (-54980478363058838776719390984798716130_i128);
_33.0 = (1_usize, (-152155947593018895029310811690231319852_i128));
_33.0.1 = 161600009455742383595054401505005950562_i128 >> _6;
_41 = [(*_39),_1,(*_32),_1,(*_39)];
_27 = _19;
Goto(bb18)
}
bb18 = {
Call(_42 = dump_var(4_usize, 21_usize, Move(_21), 2_usize, Move(_2), 12_usize, Move(_12), 31_usize, Move(_31)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_42 = dump_var(4_usize, 25_usize, Move(_25), 33_usize, Move(_33), 19_usize, Move(_19), 37_usize, Move(_37)), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Call(_42 = dump_var(4_usize, 13_usize, Move(_13), 35_usize, Move(_35), 26_usize, Move(_26), 38_usize, Move(_38)), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
Call(_42 = dump_var(4_usize, 28_usize, Move(_28), 43_usize, _43, 43_usize, _43, 43_usize, _43), ReturnTo(bb22), UnwindUnreachable())
}
bb22 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn5(mut _1: f64,mut _2: f64,mut _3: f64,mut _4: f64,mut _5: f64,mut _6: f64,mut _7: f64,mut _8: [u64; 6],mut _9: f64,mut _10: f64,mut _11: [u64; 6],mut _12: f64,mut _13: f64,mut _14: f64,mut _15: f64) -> [bool; 5] {
mir! {
type RET = [bool; 5];
let _16: [bool; 1];
let _17: u128;
let _18: usize;
let _19: isize;
let _20: Adt50;
let _21: *mut i32;
let _22: (f32,);
let _23: *const f64;
let _24: (i16, [u8; 7], [i64; 5]);
let _25: &'static i32;
let _26: (i16, [u8; 7], [i64; 5]);
let _27: *const f64;
let _28: ();
let _29: ();
{
RET = [false,true,false,false,false];
_10 = 440_u16 as f64;
_9 = _15 - _12;
RET = [false,true,false,true,true];
_7 = -_13;
_12 = (-547795661_i32) as f64;
_11 = [11964107373124052564_u64,17967391854049832789_u64,11149240470245720111_u64,2318288621283275446_u64,2761651298703195557_u64,14432014911312659895_u64];
_15 = 241446742724687888298968983052987009413_u128 as f64;
_17 = false as u128;
_16 = [false];
RET = [false,false,false,true,false];
_20.fld1 = _2 + _9;
_8 = _11;
_13 = _14;
_20.fld0.fld0.0 = 5_usize as f64;
_20.fld0.fld0.1 = (-3182426331452569982_i64) >> _17;
_20.fld0.fld0.1 = (-7190516421993043211_i64);
_8 = [13926169758910561485_u64,253873530707087352_u64,9949269933841965932_u64,1526181086990984114_u64,72598081302123154_u64,8232878886906640033_u64];
_20.fld0.fld0.0 = _5 - _1;
_20.fld0.fld0.0 = _5 + _9;
_20.fld0.fld0.0 = _17 as f64;
_18 = 5693028756403407303_usize - 1583971726994681138_usize;
Call(_1 = fn6(_9, _7, _20.fld1, _5, _4, _14, _6, _6, _20.fld1, _6, _9), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_15 = 1923116192_u32 as f64;
_8 = [5295279782617269920_u64,9764899790918514287_u64,3946794739153752860_u64,12182633382295273021_u64,1927640444347128029_u64,10023242189061022216_u64];
RET = [false,false,true,true,false];
RET = [true,false,true,false,true];
_20.fld1 = (-80_i8) as f64;
_4 = 42324_u16 as f64;
_19 = !9223372036854775807_isize;
_20.fld0.fld1 = '\u{5c216}';
_14 = _1;
_16 = [true];
_10 = 21_i8 as f64;
_12 = -_9;
_10 = _7;
_24.0 = 5366_i16;
_8 = [15623361441121206396_u64,5355549647209610185_u64,8982616681957080069_u64,6447270488130638192_u64,3223525656958793215_u64,10655592413242362114_u64];
_12 = 5935245565153940833_u64 as f64;
_12 = -_9;
Call(_2 = fn7(_6, _11, _9, _12, _6, _1, _7, _5, _5, _9, _6, _12, _14, _1), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_19 = !(-9223372036854775808_isize);
_19 = -45_isize;
_20.fld0.fld0.0 = _14;
_24.1 = [51_u8,146_u8,28_u8,99_u8,196_u8,107_u8,81_u8];
_15 = _20.fld0.fld0.0 - _14;
_24.1 = [87_u8,120_u8,151_u8,160_u8,34_u8,18_u8,157_u8];
_18 = 0_usize;
_24.1[_18] = 218_u8;
RET = [_16[_18],_16[_18],_16[_18],_16[_18],_16[_18]];
_23 = core::ptr::addr_of!(_13);
RET[_18] = _7 == _5;
_26.2 = [_20.fld0.fld0.1,_20.fld0.fld0.1,_20.fld0.fld0.1,_20.fld0.fld0.1,_20.fld0.fld0.1];
_22.0 = 1895956613_u32 as f32;
_9 = _15 * _10;
_7 = _13 + _1;
_14 = 90806477_i32 as f64;
_8[_18] = !_11[_18];
_13 = -_1;
_26.0 = 1193142351_i32 as i16;
_26.2[_18] = !_20.fld0.fld0.1;
_11 = _8;
_8 = _11;
_24.2 = _26.2;
Goto(bb3)
}
bb3 = {
Call(_28 = dump_var(5_usize, 24_usize, Move(_24), 11_usize, Move(_11), 19_usize, Move(_19), 29_usize, _29), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn6(mut _1: f64,mut _2: f64,mut _3: f64,mut _4: f64,mut _5: f64,mut _6: f64,mut _7: f64,mut _8: f64,mut _9: f64,mut _10: f64,mut _11: f64) -> f64 {
mir! {
type RET = f64;
let _12: Adt50;
let _13: ((usize, i128),);
let _14: f32;
let _15: ();
let _16: ();
{
_4 = _10;
_11 = _8;
_7 = _9 + _10;
_1 = -_7;
_6 = _7 * _2;
_9 = _10;
_4 = _11;
_10 = _7;
RET = -_8;
_5 = 1874739709374832894_u64 as f64;
_10 = _1 - _7;
_4 = _1 + _3;
_6 = 31_isize as f64;
_11 = (-12477636_i32) as f64;
_1 = (-7970017315098881545_i64) as f64;
_12.fld0.fld0.1 = (-6650491962744617485_i64) >> 17_i8;
_12.fld0.fld1 = '\u{6de40}';
RET = 263056183404393274966617431148149066889_u128 as f64;
RET = (-6_i8) as f64;
_2 = -_3;
_7 = -_4;
_4 = _7;
_12.fld0.fld1 = '\u{2de19}';
RET = -_4;
Goto(bb1)
}
bb1 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn7(mut _1: f64,mut _2: [u64; 6],mut _3: f64,mut _4: f64,mut _5: f64,mut _6: f64,mut _7: f64,mut _8: f64,mut _9: f64,mut _10: f64,mut _11: f64,mut _12: f64,mut _13: f64,mut _14: f64) -> f64 {
mir! {
type RET = f64;
let _15: Adt50;
let _16: ();
let _17: ();
{
_1 = -_4;
_1 = _12 * _5;
_15.fld0.fld0 = (_12, (-4224933090137260074_i64));
_9 = _15.fld0.fld0.0;
RET = -_13;
_6 = _10;
_15.fld0.fld1 = '\u{aa455}';
_14 = _4;
_15.fld0.fld0.0 = _12 * _12;
_15.fld0.fld1 = '\u{8fbbd}';
_6 = _13 - _4;
Goto(bb1)
}
bb1 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn8(mut _1: f32,mut _2: i64,mut _3: *mut i64,mut _4: isize,mut _5: isize,mut _6: f32,mut _7: f64) -> f32 {
mir! {
type RET = f32;
let _8: Adt42;
let _9: *const i64;
let _10: f64;
let _11: char;
let _12: [bool; 1];
let _13: isize;
let _14: Adt38;
let _15: char;
let _16: isize;
let _17: *const f64;
let _18: (i16, [u8; 7], [i64; 5]);
let _19: bool;
let _20: (i16, [u8; 7], [i64; 5]);
let _21: [u64; 6];
let _22: [i128; 3];
let _23: Adt53;
let _24: char;
let _25: f32;
let _26: *mut i32;
let _27: i64;
let _28: [bool; 1];
let _29: *const *mut i64;
let _30: isize;
let _31: (f32,);
let _32: char;
let _33: Adt40;
let _34: Adt51;
let _35: char;
let _36: f64;
let _37: Adt48;
let _38: f32;
let _39: Adt45;
let _40: Adt52;
let _41: u8;
let _42: [u64; 6];
let _43: usize;
let _44: [isize; 2];
let _45: isize;
let _46: Adt46;
let _47: Adt41;
let _48: i16;
let _49: i8;
let _50: isize;
let _51: ();
let _52: ();
{
RET = -_1;
RET = _6 + _1;
RET = -_1;
RET = -_1;
RET = -_6;
_1 = -_6;
_7 = 4497_u16 as f64;
RET = -_1;
RET = 686626812_i32 as f32;
_3 = core::ptr::addr_of_mut!(_2);
_2 = (-5045931248609736747_i64) * (-5826303276571973925_i64);
_5 = !_4;
_5 = (-108154929052462113967248720521802830799_i128) as isize;
_4 = 4_usize as isize;
_8.fld1.0 = -_6;
Call(_9 = fn9(_1, _3, _1, _1, _4, RET, _6, _8.fld1, (*_3), _8.fld1, _8.fld1, (*_3)), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_8.fld2 = core::ptr::addr_of_mut!(_8.fld0);
RET = (-138964141581569803264356467781334189654_i128) as f32;
_7 = 2731_u16 as f64;
_8.fld1 = (_1,);
_6 = _8.fld1.0 * _8.fld1.0;
_11 = '\u{ec9e6}';
_3 = core::ptr::addr_of_mut!(_8.fld0);
_2 = (-5298699593678237461_i64) * 5840224640956249589_i64;
_2 = !(-8052677937318203473_i64);
_8.fld0 = _2;
_9 = core::ptr::addr_of!((*_3));
_4 = _5;
_8.fld1.0 = -_6;
_8.fld1.0 = _6;
_13 = !_5;
_16 = _4;
_9 = core::ptr::addr_of!((*_3));
Call(_17 = fn12(_5, _11, _5, Move(_8), _6), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_18.0 = 29450_i16 + 20202_i16;
_8.fld1 = (_1,);
_18.1 = [139_u8,25_u8,117_u8,97_u8,143_u8,191_u8,119_u8];
_7 = 32_i8 as f64;
_18.2 = [_2,_2,_2,_2,_2];
_6 = _8.fld1.0;
_5 = 2768019990_u32 as isize;
Goto(bb3)
}
bb3 = {
_15 = _11;
_1 = _6;
_10 = -_7;
_19 = !true;
_7 = _10;
_20.2 = [_2,_2,_2,_2,_2];
_15 = _11;
_3 = core::ptr::addr_of_mut!((*_9));
_13 = -_5;
Goto(bb4)
}
bb4 = {
_18.0 = -9978_i16;
_20.0 = _18.0;
_2 = 6033746982241599788_i64;
_3 = core::ptr::addr_of_mut!((*_3));
Goto(bb5)
}
bb5 = {
_10 = 7507962708644731626_u64 as f64;
_4 = _13;
_12 = [_19];
_15 = _11;
_18.2 = [_2,_2,_2,_2,_2];
_8.fld0 = !_2;
_15 = _11;
_5 = -_13;
_4 = !_5;
_9 = core::ptr::addr_of!((*_3));
_5 = _16;
_11 = _15;
_12 = [_19];
_20 = (_18.0, _18.1, _18.2);
_2 = (*_3);
_3 = core::ptr::addr_of_mut!((*_9));
_3 = core::ptr::addr_of_mut!(_2);
_19 = false | true;
_18.1 = _20.1;
_18 = (_20.0, _20.1, _20.2);
_20.0 = _18.0;
_25 = _6;
_16 = _4;
_24 = _11;
_20.2 = [(*_3),_8.fld0,_2,(*_9),_2];
_27 = !(*_3);
Call(_11 = fn17(_8.fld1, _13), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
_27 = _8.fld0;
_24 = _11;
_9 = core::ptr::addr_of!((*_3));
_16 = _5;
_8.fld1 = (_25,);
_3 = core::ptr::addr_of_mut!((*_3));
_27 = _2;
_8.fld2 = _3;
_20.2 = [_8.fld0,(*_3),(*_3),_27,(*_9)];
_18.0 = 276001895930163496489332509358930274342_u128 as i16;
_1 = 2133613638291661555_u64 as f32;
_3 = _8.fld2;
_20.2 = [(*_9),_8.fld0,_27,_8.fld0,(*_9)];
_1 = _25;
_20.2 = _18.2;
_21 = [15916035769053940782_u64,6058139478485237795_u64,15020450766494721165_u64,12132161166959948672_u64,14362109657579414957_u64,16133325981484774322_u64];
_11 = _24;
_11 = _24;
_11 = _15;
RET = -_1;
_28 = [_19];
_9 = core::ptr::addr_of!(_8.fld0);
_15 = _11;
_21 = [8164444097148255639_u64,17829799926236907183_u64,9344976707922682446_u64,13457325125726434958_u64,195313733741742172_u64,14868447929608721926_u64];
_2 = (*_9) + (*_9);
_8.fld1 = (_25,);
_6 = -_8.fld1.0;
Goto(bb7)
}
bb7 = {
_8.fld0 = 71_u8 as i64;
_31 = (_1,);
_18.2 = _20.2;
_30 = _13;
_24 = _15;
_17 = core::ptr::addr_of!(_10);
_31 = (_1,);
_18.0 = -_20.0;
_29 = core::ptr::addr_of!(_3);
_18.0 = _20.0;
_13 = _31.0 as isize;
_32 = _15;
_20 = (_18.0, _18.1, _18.2);
_7 = _31.0 as f64;
_6 = -RET;
_22 = [(-26930696109561731872000571526602551374_i128),(-84499834552262453328317144127694522782_i128),(-106563097329977148083088409527178910048_i128)];
_8 = Adt42 { fld0: _27,fld1: _31,fld2: _3 };
_32 = _15;
_8 = Adt42 { fld0: _2,fld1: _31,fld2: (*_29) };
_3 = _8.fld2;
_27 = 0_usize as i64;
Goto(bb8)
}
bb8 = {
RET = -_31.0;
_20.0 = -_18.0;
_1 = 2624_u16 as f32;
_18 = (_20.0, _20.1, _20.2);
_8.fld0 = !_2;
_31 = (_8.fld1.0,);
_16 = -_5;
_28 = [_19];
_29 = core::ptr::addr_of!((*_29));
_31.0 = _1 - _8.fld1.0;
_15 = _24;
_35 = _32;
Goto(bb9)
}
bb9 = {
_8 = Adt42 { fld0: _27,fld1: _31,fld2: (*_29) };
RET = 5_u8 as f32;
_10 = -_7;
RET = _8.fld1.0 + _31.0;
_18.1 = _20.1;
_32 = _11;
_20.2 = [_2,_8.fld0,(*_9),_8.fld0,(*_9)];
_31 = (_8.fld1.0,);
_18.1 = [168_u8,68_u8,253_u8,216_u8,155_u8,71_u8,19_u8];
Goto(bb10)
}
bb10 = {
_18.1 = [34_u8,199_u8,109_u8,63_u8,204_u8,248_u8,39_u8];
_11 = _24;
_37.fld0.0 = _10;
Call(_20.2 = core::intrinsics::transmute(_18.2), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_37.fld0.0 = -(*_17);
_21 = [17578862533128678085_u64,17237997641466381392_u64,2630875439171762647_u64,2140499698019100259_u64,10433132036214479251_u64,8795165613642467614_u64];
_8.fld0 = _37.fld0.0 as i64;
_22 = [114111833977894132497272778537467473761_i128,(-43712948951716264483752311861648030518_i128),103164164803530438454408827771448918589_i128];
_11 = _24;
_35 = _24;
_7 = -_37.fld0.0;
_30 = _35 as isize;
_2 = (*_9) - _8.fld0;
Goto(bb12)
}
bb12 = {
_11 = _15;
_32 = _11;
_36 = (*_17);
_31 = (RET,);
RET = _31.0;
_7 = -_10;
Goto(bb13)
}
bb13 = {
_37.fld0 = (_10, _2);
_2 = _8.fld0 << _4;
_19 = !false;
_20.1 = [16_u8,212_u8,135_u8,63_u8,108_u8,10_u8,9_u8];
_18.1 = [208_u8,26_u8,196_u8,138_u8,40_u8,85_u8,244_u8];
RET = _8.fld1.0;
_11 = _24;
_25 = -_8.fld1.0;
_39 = Adt45::Variant0 { fld0: 7491451591796881036_usize };
_39 = Adt45::Variant0 { fld0: 12820942908041978356_usize };
_41 = !233_u8;
_9 = core::ptr::addr_of!(_27);
_35 = _32;
_20.2 = [_2,_37.fld0.1,_8.fld0,_2,_8.fld0];
_8.fld1 = _31;
_20.1 = [_41,_41,_41,_41,_41,_41,_41];
_4 = !_5;
_18.2 = [_37.fld0.1,_37.fld0.1,_2,_37.fld0.1,_2];
_15 = _24;
_43 = 6819606153186450443_usize >> _2;
_17 = core::ptr::addr_of!(_37.fld0.0);
_42 = [11661879335772000749_u64,9537969135247303587_u64,17878205750951885833_u64,7867927325097227335_u64,13949253319848285795_u64,17907246452347749124_u64];
_43 = (*_17) as usize;
_21 = [5077312151508853032_u64,13947134473283758339_u64,9750626052790720655_u64,430697341096283382_u64,15667009102354247204_u64,3377031266533787663_u64];
RET = 6118284114028391062_u64 as f32;
_1 = -_8.fld1.0;
Goto(bb14)
}
bb14 = {
_20.1 = [_41,_41,_41,_41,_41,_41,_41];
_6 = _25;
_6 = _31.0 * _31.0;
_41 = !149_u8;
_5 = _13 - _4;
_44 = [_30,_16];
_13 = _5 & _5;
_1 = _31.0;
_17 = core::ptr::addr_of!((*_17));
_30 = _41 as isize;
_18.1 = _20.1;
_3 = _8.fld2;
_21 = [7746617243983677616_u64,1082439925461218461_u64,14118649598324873190_u64,12818762793139594631_u64,7545283589921083139_u64,1918449045116439974_u64];
_27 = _37.fld0.1 - _2;
_18.0 = !_20.0;
_10 = _7 - _37.fld0.0;
_31.0 = _13 as f32;
place!(Field::<usize>(Variant(_39, 0), 0)) = !_43;
_18 = (_20.0, _20.1, _20.2);
_30 = _13;
_45 = !_5;
_22 = [133665994710037639348704231405894733058_i128,116086828049374435752369882872911075601_i128,82897971700819685968082579320415835174_i128];
_49 = (-83_i8) & 17_i8;
_29 = core::ptr::addr_of!(_8.fld2);
_42 = [2786603794611503400_u64,13089548002129811931_u64,11084359116364586723_u64,199304560807681542_u64,14111343540914290251_u64,8855970125751367296_u64];
Goto(bb15)
}
bb15 = {
Call(_51 = dump_var(8_usize, 22_usize, Move(_22), 5_usize, Move(_5), 12_usize, Move(_12), 21_usize, Move(_21)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_51 = dump_var(8_usize, 2_usize, Move(_2), 16_usize, Move(_16), 13_usize, Move(_13), 27_usize, Move(_27)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_51 = dump_var(8_usize, 28_usize, Move(_28), 4_usize, Move(_4), 19_usize, Move(_19), 32_usize, Move(_32)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn9(mut _1: f32,mut _2: *mut i64,mut _3: f32,mut _4: f32,mut _5: isize,mut _6: f32,mut _7: f32,mut _8: (f32,),mut _9: i64,mut _10: (f32,),mut _11: (f32,),mut _12: i64) -> *const i64 {
mir! {
type RET = *const i64;
let _13: isize;
let _14: [i64; 5];
let _15: f32;
let _16: usize;
let _17: *const i64;
let _18: (f32,);
let _19: [bool; 5];
let _20: (usize, i128);
let _21: i128;
let _22: ([i128; 3],);
let _23: *const *mut i64;
let _24: (f64, i64);
let _25: u16;
let _26: Adt48;
let _27: [bool; 1];
let _28: isize;
let _29: ([i128; 3],);
let _30: *const *mut i64;
let _31: isize;
let _32: i16;
let _33: [bool; 5];
let _34: Adt47;
let _35: ([i128; 3],);
let _36: isize;
let _37: isize;
let _38: [u64; 6];
let _39: Adt39;
let _40: Adt51;
let _41: f64;
let _42: Adt52;
let _43: char;
let _44: bool;
let _45: ();
let _46: ();
{
_6 = -_3;
_10.0 = 160_u8 as f32;
_10.0 = -_6;
_3 = 2444_i16 as f32;
_11.0 = 13302565149495058111_usize as f32;
_5 = (-9223372036854775808_isize);
RET = core::ptr::addr_of!(_12);
_5 = -9223372036854775807_isize;
_2 = core::ptr::addr_of_mut!((*RET));
_1 = _10.0 + _10.0;
_11.0 = _1;
_3 = _1 + _1;
_4 = (-15506171871702324677295775437167114605_i128) as f32;
_9 = (*_2) | (*_2);
_12 = _9 & _9;
_11.0 = 1193339518_i32 as f32;
Goto(bb1)
}
bb1 = {
_7 = _1;
RET = core::ptr::addr_of!((*RET));
_5 = 69_isize + (-9223372036854775808_isize);
_15 = -_6;
_5 = 1637548210_u32 as isize;
_9 = -(*RET);
_5 = 614467357_u32 as isize;
_11.0 = 35442_u16 as f32;
RET = core::ptr::addr_of!((*_2));
RET = core::ptr::addr_of!((*RET));
_2 = core::ptr::addr_of_mut!((*RET));
Goto(bb2)
}
bb2 = {
_2 = core::ptr::addr_of_mut!((*RET));
_14 = [(*RET),(*RET),(*_2),(*RET),(*_2)];
_13 = (*_2) as isize;
RET = core::ptr::addr_of!((*RET));
_8 = (_6,);
_7 = -_6;
_1 = -_6;
_5 = _13 - _13;
_11.0 = _3 + _3;
_14 = [(*RET),(*RET),(*RET),(*_2),_12];
_18 = (_11.0,);
_6 = _12 as f32;
_17 = core::ptr::addr_of!((*_2));
_16 = 4_usize * 5_usize;
_12 = _9;
_14 = [_9,(*_2),(*RET),(*RET),(*_2)];
_4 = _6;
_5 = !_13;
_4 = _10.0;
_16 = 4_usize;
_20 = (_16, (-141530267515339053684337812132692886378_i128));
_4 = _3 - _11.0;
Goto(bb3)
}
bb3 = {
_2 = core::ptr::addr_of_mut!(_14[_16]);
_9 = -(*_17);
_12 = 3400994081_u32 as i64;
RET = core::ptr::addr_of!((*_2));
_22.0 = [_20.1,_20.1,_20.1];
_10.0 = 50_u8 as f32;
_22.0 = [_20.1,_20.1,_20.1];
RET = core::ptr::addr_of!((*RET));
match _20.0 {
0 => bb1,
1 => bb4,
2 => bb5,
4 => bb7,
_ => bb6
}
}
bb4 = {
_2 = core::ptr::addr_of_mut!((*RET));
_14 = [(*RET),(*RET),(*_2),(*RET),(*_2)];
_13 = (*_2) as isize;
RET = core::ptr::addr_of!((*RET));
_8 = (_6,);
_7 = -_6;
_1 = -_6;
_5 = _13 - _13;
_11.0 = _3 + _3;
_14 = [(*RET),(*RET),(*RET),(*_2),_12];
_18 = (_11.0,);
_6 = _12 as f32;
_17 = core::ptr::addr_of!((*_2));
_16 = 4_usize * 5_usize;
_12 = _9;
_14 = [_9,(*_2),(*RET),(*RET),(*_2)];
_4 = _6;
_5 = !_13;
_4 = _10.0;
_16 = 4_usize;
_20 = (_16, (-141530267515339053684337812132692886378_i128));
_4 = _3 - _11.0;
Goto(bb3)
}
bb5 = {
_7 = _1;
RET = core::ptr::addr_of!((*RET));
_5 = 69_isize + (-9223372036854775808_isize);
_15 = -_6;
_5 = 1637548210_u32 as isize;
_9 = -(*RET);
_5 = 614467357_u32 as isize;
_11.0 = 35442_u16 as f32;
RET = core::ptr::addr_of!((*_2));
RET = core::ptr::addr_of!((*RET));
_2 = core::ptr::addr_of_mut!((*RET));
Goto(bb2)
}
bb6 = {
Return()
}
bb7 = {
_19 = [true,false,true,false,false];
_3 = _15 + _11.0;
_10 = (_6,);
_11.0 = -_6;
_6 = -_11.0;
_24.0 = (*_2) as f64;
_14[_16] = -_9;
_23 = core::ptr::addr_of!(_2);
_20.0 = _16 + _16;
_3 = -_4;
_16 = 2925_u16 as usize;
Goto(bb8)
}
bb8 = {
_22.0 = [_20.1,_20.1,_20.1];
_5 = -_13;
_21 = _3 as i128;
_14 = [_9,(*_17),_9,_9,(*_17)];
_7 = _18.0 + _6;
_4 = _11.0 + _3;
_8 = (_4,);
_22.0 = [_21,_21,_21];
_8.0 = _11.0 + _11.0;
_12 = 108_i8 as i64;
Goto(bb9)
}
bb9 = {
_26.fld0.0 = _24.0 - _24.0;
_15 = _4 + _7;
_29 = (_22.0,);
_32 = -26535_i16;
_13 = _5;
RET = core::ptr::addr_of!((*RET));
_26.fld0 = (_24.0, (*_17));
_19 = [false,false,false,false,false];
_24.1 = !_9;
match _20.1 {
0 => bb1,
198752099405599409779036795299075325078 => bb10,
_ => bb2
}
}
bb10 = {
_25 = 40_u8 as u16;
_10 = (_4,);
RET = core::ptr::addr_of!((*RET));
_12 = 84_u8 as i64;
_22.0 = [_21,_21,_21];
_27 = [true];
_13 = 724450733_i32 as isize;
_26 = Adt48 { fld0: _24,fld1: '\u{4edd4}' };
_4 = (-79_i8) as f32;
_15 = 476296589_u32 as f32;
_29 = _22;
_35 = _29;
_16 = !_20.0;
_25 = 1157540382829034203_u64 as u16;
_25 = 62685_u16 & 28782_u16;
_19 = [true,true,false,false,false];
_18.0 = _24.1 as f32;
_10 = _18;
_33 = [false,false,true,false,true];
_19 = [true,true,true,false,true];
Call(_28 = fn10(_33, _8.0, _24.1, _29.0, _6, _14, _35, _35.0, _9, _29), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
RET = _17;
_18.0 = _11.0;
_6 = _3 - _8.0;
_18.0 = _6 * _1;
_26.fld1 = '\u{59203}';
_31 = !_5;
match _20.1 {
0 => bb12,
1 => bb13,
198752099405599409779036795299075325078 => bb15,
_ => bb14
}
}
bb12 = {
_2 = core::ptr::addr_of_mut!((*RET));
_14 = [(*RET),(*RET),(*_2),(*RET),(*_2)];
_13 = (*_2) as isize;
RET = core::ptr::addr_of!((*RET));
_8 = (_6,);
_7 = -_6;
_1 = -_6;
_5 = _13 - _13;
_11.0 = _3 + _3;
_14 = [(*RET),(*RET),(*RET),(*_2),_12];
_18 = (_11.0,);
_6 = _12 as f32;
_17 = core::ptr::addr_of!((*_2));
_16 = 4_usize * 5_usize;
_12 = _9;
_14 = [_9,(*_2),(*RET),(*RET),(*_2)];
_4 = _6;
_5 = !_13;
_4 = _10.0;
_16 = 4_usize;
_20 = (_16, (-141530267515339053684337812132692886378_i128));
_4 = _3 - _11.0;
Goto(bb3)
}
bb13 = {
_2 = core::ptr::addr_of_mut!(_14[_16]);
_9 = -(*_17);
_12 = 3400994081_u32 as i64;
RET = core::ptr::addr_of!((*_2));
_22.0 = [_20.1,_20.1,_20.1];
_10.0 = 50_u8 as f32;
_22.0 = [_20.1,_20.1,_20.1];
RET = core::ptr::addr_of!((*RET));
match _20.0 {
0 => bb1,
1 => bb4,
2 => bb5,
4 => bb7,
_ => bb6
}
}
bb14 = {
_19 = [true,false,true,false,false];
_3 = _15 + _11.0;
_10 = (_6,);
_11.0 = -_6;
_6 = -_11.0;
_24.0 = (*_2) as f64;
_14[_16] = -_9;
_23 = core::ptr::addr_of!(_2);
_20.0 = _16 + _16;
_3 = -_4;
_16 = 2925_u16 as usize;
Goto(bb8)
}
bb15 = {
_38 = [1879972464656811563_u64,11428804712508670890_u64,17655397540295895028_u64,14700677503145809710_u64,15359770135329061899_u64,10707672083666217130_u64];
_35.0 = [_21,_21,_20.1];
_27 = [false];
_17 = core::ptr::addr_of!(_24.1);
_9 = 1866458905601879340_u64 as i64;
_29 = _22;
_37 = _28 + _28;
_16 = !_20.0;
_39.fld1 = _18.0 + _11.0;
_19 = [true,false,false,true,false];
_23 = core::ptr::addr_of!(_2);
_6 = 16031153004320216092_u64 as f32;
_26.fld0.0 = 102106195138999699525957722698906949421_u128 as f64;
_24 = _26.fld0;
_5 = !_37;
_22.0 = [_21,_21,_21];
_1 = _7;
_36 = -_5;
_41 = -_24.0;
_32 = 15906_i16 * (-22238_i16);
_14 = [_9,_26.fld0.1,(*_17),_26.fld0.1,(*_17)];
_33 = [true,true,false,false,false];
_26 = Adt48 { fld0: _24,fld1: '\u{d1789}' };
Goto(bb16)
}
bb16 = {
Call(_45 = dump_var(9_usize, 38_usize, Move(_38), 5_usize, Move(_5), 37_usize, Move(_37), 13_usize, Move(_13)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_45 = dump_var(9_usize, 33_usize, Move(_33), 25_usize, Move(_25), 9_usize, Move(_9), 12_usize, Move(_12)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_45 = dump_var(9_usize, 16_usize, Move(_16), 32_usize, Move(_32), 46_usize, _46, 46_usize, _46), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn10(mut _1: [bool; 5],mut _2: f32,mut _3: i64,mut _4: [i128; 3],mut _5: f32,mut _6: [i64; 5],mut _7: ([i128; 3],),mut _8: [i128; 3],mut _9: i64,mut _10: ([i128; 3],)) -> isize {
mir! {
type RET = isize;
let _11: Adt45;
let _12: isize;
let _13: Adt47;
let _14: Adt48;
let _15: u128;
let _16: Adt52;
let _17: isize;
let _18: [u32; 2];
let _19: f32;
let _20: [u32; 2];
let _21: [i128; 3];
let _22: usize;
let _23: isize;
let _24: (f32,);
let _25: *const i64;
let _26: isize;
let _27: ();
let _28: ();
{
RET = -125_isize;
Goto(bb1)
}
bb1 = {
_3 = 62790517316683523732909236479324375251_u128 as i64;
RET = (-51_isize) ^ (-9223372036854775808_isize);
_9 = !_3;
_5 = -_2;
_7 = (_10.0,);
_9 = _3;
_1 = [false,false,false,false,true];
RET = -9223372036854775807_isize;
_6 = [_9,_9,_9,_3,_9];
_10.0 = _7.0;
_8 = _7.0;
Goto(bb2)
}
bb2 = {
_4 = [(-72501549907166596834648598322752489451_i128),(-73452544855067764352754261085325528933_i128),(-122086963919664129845560016208899316069_i128)];
Call(_3 = fn11(_2, _10.0, _7, _10, _10), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_6 = [_3,_3,_9,_9,_9];
_9 = _3;
_9 = _3;
RET = !33_isize;
_3 = _9 ^ _9;
RET = -(-9223372036854775808_isize);
_10.0 = _8;
_3 = _9;
_12 = false as isize;
_3 = _12 as i64;
_1 = [false,false,true,false,false];
_6 = [_3,_9,_9,_9,_9];
_10 = (_8,);
_13 = Adt47::Variant0 { fld0: _9 };
_3 = Field::<i64>(Variant(_13, 0), 0) | Field::<i64>(Variant(_13, 0), 0);
_1 = [false,true,true,true,true];
_12 = 29520_u16 as isize;
_14.fld0.0 = 14520945776863787006_usize as f64;
place!(Field::<i64>(Variant(_13, 0), 0)) = _3 & _3;
Goto(bb4)
}
bb4 = {
_3 = Field::<i64>(Variant(_13, 0), 0) + Field::<i64>(Variant(_13, 0), 0);
_6 = [_3,_3,_3,Field::<i64>(Variant(_13, 0), 0),_3];
_15 = 34212_u16 as u128;
_6 = [_3,_3,Field::<i64>(Variant(_13, 0), 0),_3,_3];
_8 = [92548030180807203173636740253648164425_i128,86712264483749320796922946871767123471_i128,135275761817899588264591603750280541053_i128];
_13 = Adt47::Variant0 { fld0: _3 };
_12 = -RET;
_7 = (_10.0,);
_18 = [288815089_u32,3214779565_u32];
_12 = 1313686799_i32 as isize;
_1 = [true,true,true,false,false];
_2 = -_5;
SetDiscriminant(_13, 3);
_12 = _3 as isize;
RET = _12;
_5 = _2 * _2;
match _9 {
0 => bb2,
1 => bb5,
1407047919644342347 => bb7,
_ => bb6
}
}
bb5 = {
_6 = [_3,_3,_9,_9,_9];
_9 = _3;
_9 = _3;
RET = !33_isize;
_3 = _9 ^ _9;
RET = -(-9223372036854775808_isize);
_10.0 = _8;
_3 = _9;
_12 = false as isize;
_3 = _12 as i64;
_1 = [false,false,true,false,false];
_6 = [_3,_9,_9,_9,_9];
_10 = (_8,);
_13 = Adt47::Variant0 { fld0: _9 };
_3 = Field::<i64>(Variant(_13, 0), 0) | Field::<i64>(Variant(_13, 0), 0);
_1 = [false,true,true,true,true];
_12 = 29520_u16 as isize;
_14.fld0.0 = 14520945776863787006_usize as f64;
place!(Field::<i64>(Variant(_13, 0), 0)) = _3 & _3;
Goto(bb4)
}
bb6 = {
_4 = [(-72501549907166596834648598322752489451_i128),(-73452544855067764352754261085325528933_i128),(-122086963919664129845560016208899316069_i128)];
Call(_3 = fn11(_2, _10.0, _7, _10, _10), ReturnTo(bb3), UnwindUnreachable())
}
bb7 = {
RET = _12;
_7 = (_10.0,);
_12 = RET - RET;
_4 = [86825373960131412518888672531497385480_i128,(-80346504842227319969426508624202478550_i128),50842964850364150483821854820281502189_i128];
place!(Field::<[bool; 5]>(Variant(_13, 3), 3)) = [false,false,true,false,false];
_7.0 = _10.0;
place!(Field::<usize>(Variant(_13, 3), 1)) = 7_usize;
place!(Field::<*const f64>(Variant(_13, 3), 7)) = core::ptr::addr_of!(place!(Field::<f64>(Variant(_13, 3), 0)));
_4 = [(-82774105763026928384761593935859545782_i128),17500741474645379861792041659540775678_i128,160567345194761206403602365490226494101_i128];
_21 = _7.0;
_1 = Field::<[bool; 5]>(Variant(_13, 3), 3);
_7.0 = _21;
_8 = [(-138009113740429317024275900628997206535_i128),164072727080936204853356604048834995225_i128,82903202776863438309503336764894900556_i128];
_20 = _18;
_4 = [155920456195832115943631718391424058158_i128,(-115158642700318879861359643316005738168_i128),70929271604509414807970426600736852207_i128];
Goto(bb8)
}
bb8 = {
_19 = -_5;
_7.0 = [(-8325606438076124068580295288896259847_i128),133633544320963015133565813226679171732_i128,(-155482675611195697834866017082528132448_i128)];
_14.fld0.1 = _3 | _3;
Goto(bb9)
}
bb9 = {
_10 = (_8,);
place!(Field::<*const f64>(Variant(_13, 3), 7)) = core::ptr::addr_of!(_14.fld0.0);
_2 = -_5;
_7.0 = [126962993520862799589959184523005088007_i128,169479811342842083967430013292784500917_i128,(-9641560475216396340669958649649299950_i128)];
_10 = _7;
_5 = _14.fld0.0 as f32;
place!(Field::<[bool; 5]>(Variant(_13, 3), 3)) = [false,false,false,false,true];
_17 = _12;
match Field::<usize>(Variant(_13, 3), 1) {
0 => bb4,
1 => bb10,
2 => bb11,
7 => bb13,
_ => bb12
}
}
bb10 = {
_3 = 62790517316683523732909236479324375251_u128 as i64;
RET = (-51_isize) ^ (-9223372036854775808_isize);
_9 = !_3;
_5 = -_2;
_7 = (_10.0,);
_9 = _3;
_1 = [false,false,false,false,true];
RET = -9223372036854775807_isize;
_6 = [_9,_9,_9,_3,_9];
_10.0 = _7.0;
_8 = _7.0;
Goto(bb2)
}
bb11 = {
_6 = [_3,_3,_9,_9,_9];
_9 = _3;
_9 = _3;
RET = !33_isize;
_3 = _9 ^ _9;
RET = -(-9223372036854775808_isize);
_10.0 = _8;
_3 = _9;
_12 = false as isize;
_3 = _12 as i64;
_1 = [false,false,true,false,false];
_6 = [_3,_9,_9,_9,_9];
_10 = (_8,);
_13 = Adt47::Variant0 { fld0: _9 };
_3 = Field::<i64>(Variant(_13, 0), 0) | Field::<i64>(Variant(_13, 0), 0);
_1 = [false,true,true,true,true];
_12 = 29520_u16 as isize;
_14.fld0.0 = 14520945776863787006_usize as f64;
place!(Field::<i64>(Variant(_13, 0), 0)) = _3 & _3;
Goto(bb4)
}
bb12 = {
_4 = [(-72501549907166596834648598322752489451_i128),(-73452544855067764352754261085325528933_i128),(-122086963919664129845560016208899316069_i128)];
Call(_3 = fn11(_2, _10.0, _7, _10, _10), ReturnTo(bb3), UnwindUnreachable())
}
bb13 = {
_9 = _14.fld0.1;
place!(Field::<Adt41>(Variant(_13, 3), 6)) = Adt41::Variant2 { fld0: _1 };
_12 = _17 - _17;
_6 = [_9,_14.fld0.1,_14.fld0.1,_9,_14.fld0.1];
_9 = _14.fld0.1 & _14.fld0.1;
place!(Field::<[u32; 2]>(Variant(_13, 3), 2)) = [4131199119_u32,674230701_u32];
match Field::<usize>(Variant(_13, 3), 1) {
0 => bb1,
1 => bb10,
2 => bb11,
3 => bb14,
4 => bb15,
7 => bb17,
_ => bb16
}
}
bb14 = {
_4 = [(-72501549907166596834648598322752489451_i128),(-73452544855067764352754261085325528933_i128),(-122086963919664129845560016208899316069_i128)];
Call(_3 = fn11(_2, _10.0, _7, _10, _10), ReturnTo(bb3), UnwindUnreachable())
}
bb15 = {
_3 = Field::<i64>(Variant(_13, 0), 0) + Field::<i64>(Variant(_13, 0), 0);
_6 = [_3,_3,_3,Field::<i64>(Variant(_13, 0), 0),_3];
_15 = 34212_u16 as u128;
_6 = [_3,_3,Field::<i64>(Variant(_13, 0), 0),_3,_3];
_8 = [92548030180807203173636740253648164425_i128,86712264483749320796922946871767123471_i128,135275761817899588264591603750280541053_i128];
_13 = Adt47::Variant0 { fld0: _3 };
_12 = -RET;
_7 = (_10.0,);
_18 = [288815089_u32,3214779565_u32];
_12 = 1313686799_i32 as isize;
_1 = [true,true,true,false,false];
_2 = -_5;
SetDiscriminant(_13, 3);
_12 = _3 as isize;
RET = _12;
_5 = _2 * _2;
match _9 {
0 => bb2,
1 => bb5,
1407047919644342347 => bb7,
_ => bb6
}
}
bb16 = {
_3 = 62790517316683523732909236479324375251_u128 as i64;
RET = (-51_isize) ^ (-9223372036854775808_isize);
_9 = !_3;
_5 = -_2;
_7 = (_10.0,);
_9 = _3;
_1 = [false,false,false,false,true];
RET = -9223372036854775807_isize;
_6 = [_9,_9,_9,_3,_9];
_10.0 = _7.0;
_8 = _7.0;
Goto(bb2)
}
bb17 = {
place!(Field::<[bool; 1]>(Variant(_13, 3), 5)) = [false];
_16 = Adt52::Variant0 { fld0: 110965465550989290777975232958828731841_i128,fld1: _7 };
place!(Field::<[u32; 2]>(Variant(_13, 3), 2)) = _20;
_9 = _14.fld0.1;
_4 = _21;
place!(Field::<[bool; 1]>(Variant(_13, 3), 5)) = [true];
_16 = Adt52::Variant0 { fld0: 20450243281711362259678167333116096672_i128,fld1: _7 };
_7.0 = _4;
_12 = -_17;
_10 = (_7.0,);
_12 = RET;
_3 = _15 as i64;
Goto(bb18)
}
bb18 = {
Call(_27 = dump_var(10_usize, 3_usize, Move(_3), 10_usize, Move(_10), 9_usize, Move(_9), 1_usize, Move(_1)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_27 = dump_var(10_usize, 20_usize, Move(_20), 8_usize, Move(_8), 17_usize, Move(_17), 28_usize, _28), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn11(mut _1: f32,mut _2: [i128; 3],mut _3: ([i128; 3],),mut _4: ([i128; 3],),mut _5: ([i128; 3],)) -> i64 {
mir! {
type RET = i64;
let _6: i16;
let _7: char;
let _8: [u64; 6];
let _9: char;
let _10: *mut i64;
let _11: isize;
let _12: f32;
let _13: i8;
let _14: [i128; 3];
let _15: ([i128; 3],);
let _16: i32;
let _17: (f32,);
let _18: &'static i32;
let _19: ((usize, i128),);
let _20: *mut i32;
let _21: (f32,);
let _22: f32;
let _23: Adt53;
let _24: isize;
let _25: [isize; 2];
let _26: [u8; 7];
let _27: [bool; 5];
let _28: Adt43;
let _29: ();
let _30: ();
{
_3 = (_2,);
_6 = 28752_i16;
_5 = (_3.0,);
RET = -1664075723687728289_i64;
_2 = [(-18240516739895760799443846809968597269_i128),(-30331005756947226765706998450024847148_i128),(-154628913504272113076626724125470701837_i128)];
_6 = 53328288538305051179514907204994945239_i128 as i16;
_8 = [6224859456334205789_u64,17815588367358006889_u64,8481393819885988740_u64,6700410097852166075_u64,7877172443831947524_u64,13450610668766820367_u64];
_8 = [9860288711177195134_u64,6704424847126405810_u64,4653399672413272426_u64,1122489636691174345_u64,18203442576769365201_u64,9670662686716666306_u64];
_2 = [157175426848399237704147155149325205760_i128,(-62390082033220806700365102712164580018_i128),100764693853655617419094771990831552777_i128];
_4 = _3;
RET = (-4081526035592526078_i64) >> _6;
_1 = (-85712744963487452953222015818239456664_i128) as f32;
_5 = _4;
_10 = core::ptr::addr_of_mut!(RET);
_5.0 = _4.0;
_4.0 = _3.0;
_6 = -26569_i16;
_4 = _3;
RET = false as i64;
_1 = 18235554357545708150_u64 as f32;
_11 = 103_isize + 67_isize;
_11 = 221080115634038261_u64 as isize;
Goto(bb1)
}
bb1 = {
_2 = _4.0;
_13 = !(-29_i8);
Call(RET = core::intrinsics::bswap((-926281811817729981_i64)), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_12 = _1 - _1;
_7 = '\u{76473}';
_9 = _7;
_4.0 = [(-158942454024705708821042428562461591289_i128),(-132416360058558892789882232107146784585_i128),24530686996883416264672281787543692414_i128];
_9 = _7;
_8 = [16560534774652620790_u64,7584094052240451954_u64,1459727789558370805_u64,13382716412965797656_u64,5461680174835353752_u64,7681837125119060677_u64];
_3 = (_2,);
_7 = _9;
RET = (-134356836057490489_i64);
_4 = (_2,);
RET = (-9009941406706757557_i64) & (-286990197485647445_i64);
_5 = _3;
_4 = (_5.0,);
_6 = 31257_i16;
_3.0 = [74086617772252500747338256420708110145_i128,(-25074410724627390754811185458636909970_i128),118668586883334290265606213206120609743_i128];
_5.0 = [(-33153301060476535166817547280669597376_i128),72415477912655058470532473556647868366_i128,149485666294308695166033767586342332048_i128];
_3.0 = [63610733572230472182848931795756948285_i128,(-83991768851242711822100118488244220049_i128),(-96173853111362154045757966257035760226_i128)];
_2 = [157326123338403336128932447257523857211_i128,(-116766451257061910334195175475568664831_i128),96952912130713735571158508345341236117_i128];
_4 = (_5.0,);
_5 = (_4.0,);
_3.0 = _5.0;
_11 = 9223372036854775807_isize;
_9 = _7;
_11 = !9223372036854775807_isize;
_8 = [1163403975900148585_u64,2988288369121425426_u64,2672728897741419852_u64,3319639780905828106_u64,6141827037403412642_u64,2581159694498063164_u64];
_10 = core::ptr::addr_of_mut!((*_10));
Goto(bb3)
}
bb3 = {
_15 = _5;
_14 = [36326897452178885681018060552156619563_i128,135010712311944608304913446914177865355_i128,(-32847347843974365511478420990075156305_i128)];
RET = -3050988969288306488_i64;
_7 = _9;
_13 = _12 as i8;
_4 = (_3.0,);
_8 = [9886426825204925161_u64,17807099721188219142_u64,7811701385725357416_u64,3785127741811135724_u64,4797503428447468733_u64,3151816974344969081_u64];
_16 = 1048473088_i32;
_8 = [1899659005214994588_u64,2233949646981588798_u64,3554240427850291727_u64,17904891481041933143_u64,229679295551942029_u64,13000381669699596692_u64];
_9 = _7;
_4.0 = _3.0;
RET = (-7303166126659968845_i64) << _13;
_10 = core::ptr::addr_of_mut!(RET);
_14 = _3.0;
_13 = !17_i8;
_8 = [4317202865850584231_u64,18377760106626132378_u64,16404894478005755935_u64,14061019377122658062_u64,6124441213207883063_u64,12362258050230999312_u64];
_14 = _2;
_3 = (_15.0,);
_13 = (-97_i8);
_3 = (_5.0,);
_7 = _9;
_12 = -_1;
_1 = _12 - _12;
_13 = 8_i8 * (-4_i8);
_12 = _1 + _1;
_1 = _12 * _12;
_2 = _4.0;
_17.0 = _1;
_1 = _17.0;
Goto(bb4)
}
bb4 = {
_2 = [15274749386122904680585101030699691179_i128,(-150812454933648234876518220296770422853_i128),85536417368665646500457468825805630452_i128];
_11 = (-9223372036854775808_isize) - 9223372036854775807_isize;
match _16 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb5,
4 => bb6,
5 => bb7,
6 => bb8,
1048473088 => bb10,
_ => bb9
}
}
bb5 = {
_15 = _5;
_14 = [36326897452178885681018060552156619563_i128,135010712311944608304913446914177865355_i128,(-32847347843974365511478420990075156305_i128)];
RET = -3050988969288306488_i64;
_7 = _9;
_13 = _12 as i8;
_4 = (_3.0,);
_8 = [9886426825204925161_u64,17807099721188219142_u64,7811701385725357416_u64,3785127741811135724_u64,4797503428447468733_u64,3151816974344969081_u64];
_16 = 1048473088_i32;
_8 = [1899659005214994588_u64,2233949646981588798_u64,3554240427850291727_u64,17904891481041933143_u64,229679295551942029_u64,13000381669699596692_u64];
_9 = _7;
_4.0 = _3.0;
RET = (-7303166126659968845_i64) << _13;
_10 = core::ptr::addr_of_mut!(RET);
_14 = _3.0;
_13 = !17_i8;
_8 = [4317202865850584231_u64,18377760106626132378_u64,16404894478005755935_u64,14061019377122658062_u64,6124441213207883063_u64,12362258050230999312_u64];
_14 = _2;
_3 = (_15.0,);
_13 = (-97_i8);
_3 = (_5.0,);
_7 = _9;
_12 = -_1;
_1 = _12 - _12;
_13 = 8_i8 * (-4_i8);
_12 = _1 + _1;
_1 = _12 * _12;
_2 = _4.0;
_17.0 = _1;
_1 = _17.0;
Goto(bb4)
}
bb6 = {
_12 = _1 - _1;
_7 = '\u{76473}';
_9 = _7;
_4.0 = [(-158942454024705708821042428562461591289_i128),(-132416360058558892789882232107146784585_i128),24530686996883416264672281787543692414_i128];
_9 = _7;
_8 = [16560534774652620790_u64,7584094052240451954_u64,1459727789558370805_u64,13382716412965797656_u64,5461680174835353752_u64,7681837125119060677_u64];
_3 = (_2,);
_7 = _9;
RET = (-134356836057490489_i64);
_4 = (_2,);
RET = (-9009941406706757557_i64) & (-286990197485647445_i64);
_5 = _3;
_4 = (_5.0,);
_6 = 31257_i16;
_3.0 = [74086617772252500747338256420708110145_i128,(-25074410724627390754811185458636909970_i128),118668586883334290265606213206120609743_i128];
_5.0 = [(-33153301060476535166817547280669597376_i128),72415477912655058470532473556647868366_i128,149485666294308695166033767586342332048_i128];
_3.0 = [63610733572230472182848931795756948285_i128,(-83991768851242711822100118488244220049_i128),(-96173853111362154045757966257035760226_i128)];
_2 = [157326123338403336128932447257523857211_i128,(-116766451257061910334195175475568664831_i128),96952912130713735571158508345341236117_i128];
_4 = (_5.0,);
_5 = (_4.0,);
_3.0 = _5.0;
_11 = 9223372036854775807_isize;
_9 = _7;
_11 = !9223372036854775807_isize;
_8 = [1163403975900148585_u64,2988288369121425426_u64,2672728897741419852_u64,3319639780905828106_u64,6141827037403412642_u64,2581159694498063164_u64];
_10 = core::ptr::addr_of_mut!((*_10));
Goto(bb3)
}
bb7 = {
_2 = _4.0;
_13 = !(-29_i8);
Call(RET = core::intrinsics::bswap((-926281811817729981_i64)), ReturnTo(bb2), UnwindUnreachable())
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_17.0 = _12 - _12;
_4 = _15;
_21 = (_12,);
_21.0 = -_12;
_19.0.1 = !(-153299039985167303164288186269249482767_i128);
_21 = (_17.0,);
_15.0 = [_19.0.1,_19.0.1,_19.0.1];
_22 = 73_u8 as f32;
_17.0 = _1 * _21.0;
_4.0 = [_19.0.1,_19.0.1,_19.0.1];
_3.0 = _14;
_22 = _17.0 * _21.0;
_15.0 = [_19.0.1,_19.0.1,_19.0.1];
_3 = (_4.0,);
_2 = [_19.0.1,_19.0.1,_19.0.1];
_4.0 = [_19.0.1,_19.0.1,_19.0.1];
_15.0 = [_19.0.1,_19.0.1,_19.0.1];
_15 = _5;
_25 = [_11,_11];
RET = 1734069047905036178_i64;
_19.0.0 = 0_usize;
_3 = _15;
RET = 1407047919644342347_i64;
Call(_22 = core::intrinsics::transmute(_9), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_6 = 11655_i16;
_27 = [true,true,false,false,false];
_17 = _21;
match _19.0.0 {
1 => bb10,
2 => bb6,
3 => bb4,
4 => bb8,
5 => bb12,
0 => bb14,
_ => bb13
}
}
bb12 = {
_15 = _5;
_14 = [36326897452178885681018060552156619563_i128,135010712311944608304913446914177865355_i128,(-32847347843974365511478420990075156305_i128)];
RET = -3050988969288306488_i64;
_7 = _9;
_13 = _12 as i8;
_4 = (_3.0,);
_8 = [9886426825204925161_u64,17807099721188219142_u64,7811701385725357416_u64,3785127741811135724_u64,4797503428447468733_u64,3151816974344969081_u64];
_16 = 1048473088_i32;
_8 = [1899659005214994588_u64,2233949646981588798_u64,3554240427850291727_u64,17904891481041933143_u64,229679295551942029_u64,13000381669699596692_u64];
_9 = _7;
_4.0 = _3.0;
RET = (-7303166126659968845_i64) << _13;
_10 = core::ptr::addr_of_mut!(RET);
_14 = _3.0;
_13 = !17_i8;
_8 = [4317202865850584231_u64,18377760106626132378_u64,16404894478005755935_u64,14061019377122658062_u64,6124441213207883063_u64,12362258050230999312_u64];
_14 = _2;
_3 = (_15.0,);
_13 = (-97_i8);
_3 = (_5.0,);
_7 = _9;
_12 = -_1;
_1 = _12 - _12;
_13 = 8_i8 * (-4_i8);
_12 = _1 + _1;
_1 = _12 * _12;
_2 = _4.0;
_17.0 = _1;
_1 = _17.0;
Goto(bb4)
}
bb13 = {
_12 = _1 - _1;
_7 = '\u{76473}';
_9 = _7;
_4.0 = [(-158942454024705708821042428562461591289_i128),(-132416360058558892789882232107146784585_i128),24530686996883416264672281787543692414_i128];
_9 = _7;
_8 = [16560534774652620790_u64,7584094052240451954_u64,1459727789558370805_u64,13382716412965797656_u64,5461680174835353752_u64,7681837125119060677_u64];
_3 = (_2,);
_7 = _9;
RET = (-134356836057490489_i64);
_4 = (_2,);
RET = (-9009941406706757557_i64) & (-286990197485647445_i64);
_5 = _3;
_4 = (_5.0,);
_6 = 31257_i16;
_3.0 = [74086617772252500747338256420708110145_i128,(-25074410724627390754811185458636909970_i128),118668586883334290265606213206120609743_i128];
_5.0 = [(-33153301060476535166817547280669597376_i128),72415477912655058470532473556647868366_i128,149485666294308695166033767586342332048_i128];
_3.0 = [63610733572230472182848931795756948285_i128,(-83991768851242711822100118488244220049_i128),(-96173853111362154045757966257035760226_i128)];
_2 = [157326123338403336128932447257523857211_i128,(-116766451257061910334195175475568664831_i128),96952912130713735571158508345341236117_i128];
_4 = (_5.0,);
_5 = (_4.0,);
_3.0 = _5.0;
_11 = 9223372036854775807_isize;
_9 = _7;
_11 = !9223372036854775807_isize;
_8 = [1163403975900148585_u64,2988288369121425426_u64,2672728897741419852_u64,3319639780905828106_u64,6141827037403412642_u64,2581159694498063164_u64];
_10 = core::ptr::addr_of_mut!((*_10));
Goto(bb3)
}
bb14 = {
_25 = [_11,_11];
_24 = !_11;
Goto(bb15)
}
bb15 = {
Call(_29 = dump_var(11_usize, 3_usize, Move(_3), 11_usize, Move(_11), 15_usize, Move(_15), 27_usize, Move(_27)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_29 = dump_var(11_usize, 24_usize, Move(_24), 13_usize, Move(_13), 25_usize, Move(_25), 9_usize, Move(_9)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn12(mut _1: isize,mut _2: char,mut _3: isize,mut _4: Adt42,mut _5: f32) -> *const f64 {
mir! {
type RET = *const f64;
let _6: Adt52;
let _7: Adt50;
let _8: ((usize, i128),);
let _9: ((usize, i128),);
let _10: bool;
let _11: [u64; 6];
let _12: Adt39;
let _13: f32;
let _14: *mut i32;
let _15: Adt42;
let _16: Adt41;
let _17: Adt40;
let _18: (usize, i128);
let _19: i128;
let _20: Adt50;
let _21: (i16, [u8; 7], [i64; 5]);
let _22: char;
let _23: f64;
let _24: f32;
let _25: isize;
let _26: (i16, [u8; 7], [i64; 5]);
let _27: [u64; 6];
let _28: [u32; 2];
let _29: ();
let _30: ();
{
_5 = _4.fld1.0 + _4.fld1.0;
_1 = 12909_i16 as isize;
_4.fld1 = (_5,);
_2 = '\u{37abb}';
_4.fld1.0 = _1 as f32;
_1 = 204_u8 as isize;
_4.fld1 = (_5,);
_2 = '\u{94bef}';
_4.fld1 = (_5,);
_1 = _4.fld0 as isize;
_2 = '\u{a17d6}';
_2 = '\u{97db4}';
_4.fld2 = core::ptr::addr_of_mut!(_4.fld0);
_1 = _3;
_4.fld0 = !(-1171033060184164131_i64);
RET = core::ptr::addr_of!(_7.fld1);
_7.fld1 = 238964228118653534808551776504451830501_u128 as f64;
_7.fld0.fld0.0 = (*RET);
_4.fld2 = core::ptr::addr_of_mut!(_7.fld0.fld0.1);
_7.fld0.fld1 = _2;
RET = core::ptr::addr_of!(_7.fld1);
_5 = _4.fld1.0;
RET = core::ptr::addr_of!(_7.fld0.fld0.0);
_7.fld0.fld0.0 = 3673610204_u32 as f64;
_5 = _4.fld1.0;
Goto(bb1)
}
bb1 = {
_7.fld0.fld0.1 = -_4.fld0;
_8.0.0 = !5041379770212375471_usize;
_4.fld2 = core::ptr::addr_of_mut!(_7.fld0.fld0.1);
_3 = _1;
_7.fld0.fld1 = _2;
_7.fld1 = _8.0.0 as f64;
_10 = true;
_8.0.1 = (-65853254104123015094037606516502690026_i128) << _8.0.0;
_7.fld0.fld1 = _2;
Call(_9.0.1 = fn13(_5, _4.fld1.0, _4.fld1.0, _4.fld1, _10, _10, _4.fld1, Move(_4), _8.0, _1, _7.fld0, RET, _7, _5, _8.0.0), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_2 = _7.fld0.fld1;
_4.fld2 = core::ptr::addr_of_mut!(_7.fld0.fld0.1);
_9 = (_8.0,);
_7.fld0.fld0.1 = 4947789720854078092_i64 + (-6281268101629191625_i64);
Call(_11 = fn14(_9.0.0, (*RET), _7.fld0.fld0.1, _8.0, _7.fld0.fld0, _3, _5, _7.fld0.fld0.0, _8.0, _7.fld0.fld0, _5), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_10 = !true;
_7.fld0.fld0 = (_7.fld1, (-1999566759634755402_i64));
_11 = [3323253884457395368_u64,11341971243371668271_u64,16699097189120007345_u64,10354159059782063162_u64,8355961866475736110_u64,952500909464631278_u64];
_4.fld1 = (_5,);
_8.0.1 = _9.0.1 ^ _9.0.1;
Goto(bb4)
}
bb4 = {
_8 = _9;
_8.0.1 = !_9.0.1;
_7.fld1 = -_7.fld0.fld0.0;
RET = core::ptr::addr_of!((*RET));
_7.fld0.fld0 = (_7.fld1, 1158819503667405854_i64);
_1 = _3 & _3;
_12.fld0 = _4.fld1;
_8.0.0 = _9.0.0;
_1 = _3;
_12 = Adt39 { fld0: _4.fld1,fld1: _4.fld1.0 };
_7.fld1 = _7.fld0.fld0.0;
_7.fld0.fld0.0 = 98_i8 as f64;
_15.fld0 = _7.fld0.fld0.1;
_4.fld2 = core::ptr::addr_of_mut!(_7.fld0.fld0.1);
_4.fld1 = (_5,);
_9 = (_8.0,);
_16 = Adt41::Variant0 { fld0: _12,fld1: 75645464907944959798126743811830517706_u128,fld2: (-1463131560_i32) };
_12 = Field::<Adt39>(Variant(_16, 0), 0);
place!(Field::<i32>(Variant(_16, 0), 2)) = (-753183248_i32);
_12.fld1 = -_12.fld0.0;
Goto(bb5)
}
bb5 = {
_14 = core::ptr::addr_of_mut!(place!(Field::<i32>(Variant(_16, 0), 2)));
place!(Field::<Adt39>(Variant(_16, 0), 0)).fld0.0 = -_4.fld1.0;
_4.fld0 = _7.fld0.fld0.1;
place!(Field::<Adt39>(Variant(_16, 0), 0)) = _12;
_9.0.1 = _8.0.1;
_18 = (_8.0.0, _8.0.1);
_18 = (_9.0.0, _9.0.1);
_8.0 = _18;
_9 = _8;
_8.0.0 = _9.0.0;
_12.fld0 = (Field::<Adt39>(Variant(_16, 0), 0).fld0.0,);
_20.fld0.fld0 = _7.fld0.fld0;
match (*_14) {
0 => bb6,
1 => bb7,
2 => bb8,
3 => bb9,
340282366920938463463374607431015028208 => bb11,
_ => bb10
}
}
bb6 = {
_8 = _9;
_8.0.1 = !_9.0.1;
_7.fld1 = -_7.fld0.fld0.0;
RET = core::ptr::addr_of!((*RET));
_7.fld0.fld0 = (_7.fld1, 1158819503667405854_i64);
_1 = _3 & _3;
_12.fld0 = _4.fld1;
_8.0.0 = _9.0.0;
_1 = _3;
_12 = Adt39 { fld0: _4.fld1,fld1: _4.fld1.0 };
_7.fld1 = _7.fld0.fld0.0;
_7.fld0.fld0.0 = 98_i8 as f64;
_15.fld0 = _7.fld0.fld0.1;
_4.fld2 = core::ptr::addr_of_mut!(_7.fld0.fld0.1);
_4.fld1 = (_5,);
_9 = (_8.0,);
_16 = Adt41::Variant0 { fld0: _12,fld1: 75645464907944959798126743811830517706_u128,fld2: (-1463131560_i32) };
_12 = Field::<Adt39>(Variant(_16, 0), 0);
place!(Field::<i32>(Variant(_16, 0), 2)) = (-753183248_i32);
_12.fld1 = -_12.fld0.0;
Goto(bb5)
}
bb7 = {
_10 = !true;
_7.fld0.fld0 = (_7.fld1, (-1999566759634755402_i64));
_11 = [3323253884457395368_u64,11341971243371668271_u64,16699097189120007345_u64,10354159059782063162_u64,8355961866475736110_u64,952500909464631278_u64];
_4.fld1 = (_5,);
_8.0.1 = _9.0.1 ^ _9.0.1;
Goto(bb4)
}
bb8 = {
_2 = _7.fld0.fld1;
_4.fld2 = core::ptr::addr_of_mut!(_7.fld0.fld0.1);
_9 = (_8.0,);
_7.fld0.fld0.1 = 4947789720854078092_i64 + (-6281268101629191625_i64);
Call(_11 = fn14(_9.0.0, (*RET), _7.fld0.fld0.1, _8.0, _7.fld0.fld0, _3, _5, _7.fld0.fld0.0, _8.0, _7.fld0.fld0, _5), ReturnTo(bb3), UnwindUnreachable())
}
bb9 = {
_7.fld0.fld0.1 = -_4.fld0;
_8.0.0 = !5041379770212375471_usize;
_4.fld2 = core::ptr::addr_of_mut!(_7.fld0.fld0.1);
_3 = _1;
_7.fld0.fld1 = _2;
_7.fld1 = _8.0.0 as f64;
_10 = true;
_8.0.1 = (-65853254104123015094037606516502690026_i128) << _8.0.0;
_7.fld0.fld1 = _2;
Call(_9.0.1 = fn13(_5, _4.fld1.0, _4.fld1.0, _4.fld1, _10, _10, _4.fld1, Move(_4), _8.0, _1, _7.fld0, RET, _7, _5, _8.0.0), ReturnTo(bb2), UnwindUnreachable())
}
bb10 = {
Return()
}
bb11 = {
_3 = _1;
_9.0 = (_18.0, _8.0.1);
_21.2 = [_20.fld0.fld0.1,_4.fld0,_20.fld0.fld0.1,_20.fld0.fld0.1,_15.fld0];
_21.1 = [56_u8,152_u8,79_u8,181_u8,79_u8,166_u8,111_u8];
_23 = _9.0.1 as f64;
_4.fld0 = -_20.fld0.fld0.1;
_15.fld1.0 = -_12.fld1;
_15 = Adt42 { fld0: _7.fld0.fld0.1,fld1: Field::<Adt39>(Variant(_16, 0), 0).fld0,fld2: _4.fld2 };
_20.fld0.fld0.0 = (-12_i8) as f64;
_21.1 = [147_u8,155_u8,118_u8,54_u8,112_u8,255_u8,153_u8];
_23 = -(*RET);
_20.fld0.fld1 = _7.fld0.fld1;
_18.1 = _9.0.1 & _9.0.1;
_13 = _15.fld1.0 + _15.fld1.0;
match _7.fld0.fld0.1 {
0 => bb9,
1 => bb6,
2 => bb3,
3 => bb4,
4 => bb12,
5 => bb13,
6 => bb14,
1158819503667405854 => bb16,
_ => bb15
}
}
bb12 = {
_10 = !true;
_7.fld0.fld0 = (_7.fld1, (-1999566759634755402_i64));
_11 = [3323253884457395368_u64,11341971243371668271_u64,16699097189120007345_u64,10354159059782063162_u64,8355961866475736110_u64,952500909464631278_u64];
_4.fld1 = (_5,);
_8.0.1 = _9.0.1 ^ _9.0.1;
Goto(bb4)
}
bb13 = {
_7.fld0.fld0.1 = -_4.fld0;
_8.0.0 = !5041379770212375471_usize;
_4.fld2 = core::ptr::addr_of_mut!(_7.fld0.fld0.1);
_3 = _1;
_7.fld0.fld1 = _2;
_7.fld1 = _8.0.0 as f64;
_10 = true;
_8.0.1 = (-65853254104123015094037606516502690026_i128) << _8.0.0;
_7.fld0.fld1 = _2;
Call(_9.0.1 = fn13(_5, _4.fld1.0, _4.fld1.0, _4.fld1, _10, _10, _4.fld1, Move(_4), _8.0, _1, _7.fld0, RET, _7, _5, _8.0.0), ReturnTo(bb2), UnwindUnreachable())
}
bb14 = {
_8 = _9;
_8.0.1 = !_9.0.1;
_7.fld1 = -_7.fld0.fld0.0;
RET = core::ptr::addr_of!((*RET));
_7.fld0.fld0 = (_7.fld1, 1158819503667405854_i64);
_1 = _3 & _3;
_12.fld0 = _4.fld1;
_8.0.0 = _9.0.0;
_1 = _3;
_12 = Adt39 { fld0: _4.fld1,fld1: _4.fld1.0 };
_7.fld1 = _7.fld0.fld0.0;
_7.fld0.fld0.0 = 98_i8 as f64;
_15.fld0 = _7.fld0.fld0.1;
_4.fld2 = core::ptr::addr_of_mut!(_7.fld0.fld0.1);
_4.fld1 = (_5,);
_9 = (_8.0,);
_16 = Adt41::Variant0 { fld0: _12,fld1: 75645464907944959798126743811830517706_u128,fld2: (-1463131560_i32) };
_12 = Field::<Adt39>(Variant(_16, 0), 0);
place!(Field::<i32>(Variant(_16, 0), 2)) = (-753183248_i32);
_12.fld1 = -_12.fld0.0;
Goto(bb5)
}
bb15 = {
_10 = !true;
_7.fld0.fld0 = (_7.fld1, (-1999566759634755402_i64));
_11 = [3323253884457395368_u64,11341971243371668271_u64,16699097189120007345_u64,10354159059782063162_u64,8355961866475736110_u64,952500909464631278_u64];
_4.fld1 = (_5,);
_8.0.1 = _9.0.1 ^ _9.0.1;
Goto(bb4)
}
bb16 = {
_9.0 = (_18.0, _8.0.1);
_21.0 = -(-18602_i16);
_7.fld0 = _20.fld0;
_4 = Adt42 { fld0: _15.fld0,fld1: _15.fld1,fld2: _15.fld2 };
_10 = false;
Goto(bb17)
}
bb17 = {
Call(_29 = dump_var(12_usize, 9_usize, Move(_9), 2_usize, Move(_2), 10_usize, Move(_10), 8_usize, Move(_8)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn13(mut _1: f32,mut _2: f32,mut _3: f32,mut _4: (f32,),mut _5: bool,mut _6: bool,mut _7: (f32,),mut _8: Adt42,mut _9: (usize, i128),mut _10: isize,mut _11: Adt48,mut _12: *const f64,mut _13: Adt50,mut _14: f32,mut _15: usize) -> i128 {
mir! {
type RET = i128;
let _16: f64;
let _17: [bool; 5];
let _18: i32;
let _19: u32;
let _20: i128;
let _21: [u8; 7];
let _22: (i16, [u8; 7], [i64; 5]);
let _23: isize;
let _24: [u8; 7];
let _25: (usize, i128);
let _26: [i64; 5];
let _27: ((usize, i128),);
let _28: i64;
let _29: f64;
let _30: f64;
let _31: i32;
let _32: bool;
let _33: (f32,);
let _34: u16;
let _35: i16;
let _36: Adt39;
let _37: [u8; 7];
let _38: i16;
let _39: i128;
let _40: isize;
let _41: bool;
let _42: u32;
let _43: isize;
let _44: u32;
let _45: Adt51;
let _46: [i64; 5];
let _47: &'static i32;
let _48: ([i128; 3],);
let _49: f32;
let _50: ();
let _51: ();
{
RET = _9.1 + _9.1;
_11.fld1 = _13.fld0.fld1;
_11 = _13.fld0;
_14 = _7.0 * _2;
_13.fld0.fld0.0 = _13.fld1 + _13.fld1;
_13 = Adt50 { fld0: _11,fld1: _11.fld0.0 };
RET = _11.fld1 as i128;
_13.fld0.fld1 = _11.fld1;
_11.fld0 = _13.fld0.fld0;
_16 = 31556_i16 as f64;
_15 = !_9.0;
_13.fld0.fld0.0 = _13.fld1;
_13 = Adt50 { fld0: _11,fld1: _11.fld0.0 };
_20 = 331_u16 as i128;
_2 = (-113_i8) as f32;
_11 = Adt48 { fld0: _13.fld0.fld0,fld1: _13.fld0.fld1 };
_13.fld0.fld0 = (_13.fld1, _11.fld0.1);
_22.2 = [_8.fld0,_13.fld0.fld0.1,_13.fld0.fld0.1,_13.fld0.fld0.1,_11.fld0.1];
_8.fld0 = _11.fld0.1 ^ _13.fld0.fld0.1;
_4.0 = 13666427553139052086_u64 as f32;
_18 = 777610573_i32 << _15;
Goto(bb1)
}
bb1 = {
_21 = [97_u8,112_u8,35_u8,2_u8,117_u8,223_u8,250_u8];
RET = _20 ^ _9.1;
_7.0 = _14 + _3;
_7 = (_8.fld1.0,);
_4.0 = 84_i8 as f32;
_17 = [_6,_5,_5,_6,_6];
_18 = !(-578308288_i32);
_8.fld1 = _7;
_22.0 = 30261_i16 & (-4769_i16);
_11 = _13.fld0;
_9.1 = _18 as i128;
_8.fld0 = _11.fld0.1 << RET;
_14 = _7.0;
RET = _22.0 as i128;
_7 = (_14,);
_19 = _13.fld0.fld1 as u32;
RET = _9.1;
_23 = _22.0 as isize;
_21 = [156_u8,41_u8,154_u8,4_u8,241_u8,218_u8,198_u8];
_21 = [95_u8,170_u8,17_u8,81_u8,212_u8,59_u8,7_u8];
_24 = [234_u8,233_u8,193_u8,134_u8,24_u8,67_u8,25_u8];
_25.1 = 5604193314350002747_u64 as i128;
Goto(bb2)
}
bb2 = {
_6 = _5;
_17 = [_6,_5,_6,_6,_6];
_4.0 = _1 * _8.fld1.0;
_22.0 = (-2186_i16);
_11.fld1 = _13.fld0.fld1;
_10 = 293221600061905065511454734738043214732_u128 as isize;
_25 = (_9.0, RET);
_27.0.0 = _25.0;
_11.fld0.1 = _8.fld0;
_7 = _8.fld1;
_13.fld0.fld0.0 = _16 + _13.fld1;
_11.fld0.1 = _8.fld0 >> _8.fld0;
_15 = 8_u8 as usize;
_8.fld1 = (_7.0,);
_8.fld1 = (_4.0,);
_13.fld0.fld1 = _11.fld1;
_20 = RET - _9.1;
_25.1 = RET;
RET = _3 as i128;
_13 = Adt50 { fld0: _11,fld1: _16 };
_25.1 = 10551118263025069912_u64 as i128;
_25.0 = (-101_i8) as usize;
_22.0 = (-21536_i16);
_6 = _5;
_30 = _13.fld0.fld0.0 * _13.fld1;
Goto(bb3)
}
bb3 = {
_29 = _16;
RET = _20 - _20;
_10 = _23;
_20 = _22.0 as i128;
_21 = [180_u8,173_u8,132_u8,202_u8,198_u8,160_u8,163_u8];
_7.0 = 42_i8 as f32;
_11.fld0.1 = !_13.fld0.fld0.1;
RET = !_9.1;
_13.fld0.fld0.0 = _29 - _16;
_34 = !49833_u16;
_13.fld0 = _11;
_35 = !_22.0;
Goto(bb4)
}
bb4 = {
_10 = 12239307432474026668_u64 as isize;
_7 = (_4.0,);
_13.fld0 = _11;
_21 = [110_u8,32_u8,179_u8,85_u8,117_u8,177_u8,63_u8];
_35 = !_22.0;
_3 = _1 + _1;
_32 = !_6;
_31 = _9.0 as i32;
_11.fld0.0 = 523373695734759014_u64 as f64;
_7 = _8.fld1;
_36.fld1 = _4.0 * _7.0;
_27.0.1 = _20;
_11 = _13.fld0;
_27.0 = _9;
_33 = (_1,);
_16 = -_29;
_18 = _11.fld0.1 as i32;
_25.0 = _9.0;
_7.0 = -_4.0;
_13.fld0.fld0 = _11.fld0;
_36 = Adt39 { fld0: _7,fld1: _3 };
RET = _20;
_23 = 64_i8 as isize;
_22.1 = [72_u8,130_u8,63_u8,121_u8,87_u8,1_u8,110_u8];
match _22.0 {
0 => bb5,
1 => bb6,
2 => bb7,
3 => bb8,
4 => bb9,
340282366920938463463374607431768189920 => bb11,
_ => bb10
}
}
bb5 = {
_29 = _16;
RET = _20 - _20;
_10 = _23;
_20 = _22.0 as i128;
_21 = [180_u8,173_u8,132_u8,202_u8,198_u8,160_u8,163_u8];
_7.0 = 42_i8 as f32;
_11.fld0.1 = !_13.fld0.fld0.1;
RET = !_9.1;
_13.fld0.fld0.0 = _29 - _16;
_34 = !49833_u16;
_13.fld0 = _11;
_35 = !_22.0;
Goto(bb4)
}
bb6 = {
_6 = _5;
_17 = [_6,_5,_6,_6,_6];
_4.0 = _1 * _8.fld1.0;
_22.0 = (-2186_i16);
_11.fld1 = _13.fld0.fld1;
_10 = 293221600061905065511454734738043214732_u128 as isize;
_25 = (_9.0, RET);
_27.0.0 = _25.0;
_11.fld0.1 = _8.fld0;
_7 = _8.fld1;
_13.fld0.fld0.0 = _16 + _13.fld1;
_11.fld0.1 = _8.fld0 >> _8.fld0;
_15 = 8_u8 as usize;
_8.fld1 = (_7.0,);
_8.fld1 = (_4.0,);
_13.fld0.fld1 = _11.fld1;
_20 = RET - _9.1;
_25.1 = RET;
RET = _3 as i128;
_13 = Adt50 { fld0: _11,fld1: _16 };
_25.1 = 10551118263025069912_u64 as i128;
_25.0 = (-101_i8) as usize;
_22.0 = (-21536_i16);
_6 = _5;
_30 = _13.fld0.fld0.0 * _13.fld1;
Goto(bb3)
}
bb7 = {
_21 = [97_u8,112_u8,35_u8,2_u8,117_u8,223_u8,250_u8];
RET = _20 ^ _9.1;
_7.0 = _14 + _3;
_7 = (_8.fld1.0,);
_4.0 = 84_i8 as f32;
_17 = [_6,_5,_5,_6,_6];
_18 = !(-578308288_i32);
_8.fld1 = _7;
_22.0 = 30261_i16 & (-4769_i16);
_11 = _13.fld0;
_9.1 = _18 as i128;
_8.fld0 = _11.fld0.1 << RET;
_14 = _7.0;
RET = _22.0 as i128;
_7 = (_14,);
_19 = _13.fld0.fld1 as u32;
RET = _9.1;
_23 = _22.0 as isize;
_21 = [156_u8,41_u8,154_u8,4_u8,241_u8,218_u8,198_u8];
_21 = [95_u8,170_u8,17_u8,81_u8,212_u8,59_u8,7_u8];
_24 = [234_u8,233_u8,193_u8,134_u8,24_u8,67_u8,25_u8];
_25.1 = 5604193314350002747_u64 as i128;
Goto(bb2)
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
_28 = !_13.fld0.fld0.1;
_12 = core::ptr::addr_of!(_11.fld0.0);
RET = _9.1 << _8.fld0;
_29 = _28 as f64;
_27.0 = (_15, RET);
_17 = [_32,_5,_32,_6,_5];
_25.0 = _15 - _15;
_14 = -_7.0;
Goto(bb12)
}
bb12 = {
_25.0 = !_9.0;
_31 = _18;
_15 = _9.0 << _11.fld0.1;
_35 = _22.0 & _22.0;
_20 = (-106_i8) as i128;
_33 = (_36.fld1,);
_11 = _13.fld0;
match _22.0 {
0 => bb1,
1 => bb5,
2 => bb7,
340282366920938463463374607431768189920 => bb13,
_ => bb4
}
}
bb13 = {
_11.fld0.1 = _13.fld0.fld0.1;
_13.fld0 = _11;
_13.fld0.fld0 = _11.fld0;
_6 = _32 ^ _5;
_4.0 = 30_u8 as f32;
_2 = _36.fld1;
_18 = -_31;
_22.2 = [_13.fld0.fld0.1,_28,_13.fld0.fld0.1,_28,_11.fld0.1];
_22.0 = _11.fld1 as i16;
_14 = _20 as f32;
_11.fld0.1 = _28 * _13.fld0.fld0.1;
_21 = [80_u8,146_u8,95_u8,159_u8,224_u8,7_u8,82_u8];
_34 = !44538_u16;
_10 = _23 >> _28;
RET = !_27.0.1;
_11.fld0.1 = !_13.fld0.fld0.1;
_4.0 = -_3;
_36.fld1 = _7.0;
_33.0 = _4.0 + _8.fld1.0;
_22.2 = [_28,_28,_28,_13.fld0.fld0.1,_13.fld0.fld0.1];
_34 = !36495_u16;
_32 = _6;
Goto(bb14)
}
bb14 = {
_23 = _10 << _18;
_34 = 62100_u16;
_24 = [153_u8,84_u8,64_u8,186_u8,235_u8,63_u8,84_u8];
_11 = _13.fld0;
_13.fld1 = _29;
_20 = RET >> _18;
_42 = 228_u8 as u32;
_41 = _10 < _23;
_13.fld0 = _11;
_22.0 = !_35;
_25.0 = _18 as usize;
_8.fld1 = (_4.0,);
_33.0 = -_36.fld1;
_1 = 13408795214476903432_u64 as f32;
_43 = _23;
_3 = _36.fld1;
_27.0 = (_15, _20);
Goto(bb15)
}
bb15 = {
Call(_50 = dump_var(13_usize, 31_usize, Move(_31), 43_usize, Move(_43), 25_usize, Move(_25), 9_usize, Move(_9)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_50 = dump_var(13_usize, 17_usize, Move(_17), 28_usize, Move(_28), 42_usize, Move(_42), 27_usize, Move(_27)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_50 = dump_var(13_usize, 22_usize, Move(_22), 18_usize, Move(_18), 6_usize, Move(_6), 51_usize, _51), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn14(mut _1: usize,mut _2: f64,mut _3: i64,mut _4: (usize, i128),mut _5: (f64, i64),mut _6: isize,mut _7: f32,mut _8: f64,mut _9: (usize, i128),mut _10: (f64, i64),mut _11: f32) -> [u64; 6] {
mir! {
type RET = [u64; 6];
let _12: [i64; 5];
let _13: Adt40;
let _14: (f32,);
let _15: Adt38;
let _16: (f32,);
let _17: u64;
let _18: Adt38;
let _19: [bool; 1];
let _20: (f64, i64);
let _21: f64;
let _22: [isize; 2];
let _23: [bool; 5];
let _24: *const i64;
let _25: u8;
let _26: [u32; 2];
let _27: Adt39;
let _28: (f64, i64);
let _29: char;
let _30: [isize; 2];
let _31: char;
let _32: f64;
let _33: *mut i64;
let _34: isize;
let _35: ([i128; 3],);
let _36: *const f64;
let _37: ([i128; 3],);
let _38: [u8; 7];
let _39: u16;
let _40: ();
let _41: ();
{
_2 = _5.0;
_9.0 = !_1;
_6 = 9223372036854775807_isize << _4.1;
_2 = _8;
_11 = _7;
_10 = (_2, _3);
_8 = _2;
_5.0 = 9928344341543280089_u64 as f64;
RET = [7273969364142800860_u64,9928901792837800999_u64,13482514142231461556_u64,13472198985532786742_u64,5020243467600540687_u64,4817609396573545363_u64];
_5.1 = _10.1;
_10.1 = 17275245041647021252_u64 as i64;
_2 = _10.0;
_5 = (_8, _3);
_1 = !_4.0;
_8 = 1025046683_u32 as f64;
_9 = (_4.0, _4.1);
_4 = (_9.0, _9.1);
_10.1 = _5.1 << _1;
_7 = 63916_u16 as f32;
_16 = (_11,);
_17 = 3516486823911667025_u64;
_12 = [_5.1,_10.1,_5.1,_10.1,_3];
_11 = -_16.0;
_7 = -_16.0;
_10 = (_2, _5.1);
Goto(bb1)
}
bb1 = {
_4 = (_9.0, _9.1);
_13 = Adt40::Variant2 { fld0: _9,fld1: '\u{881a8}',fld2: _16,fld3: _2 };
_17 = !14109486136395945412_u64;
_9.1 = -Field::<(usize, i128)>(Variant(_13, 2), 0).1;
RET = [_17,_17,_17,_17,_17,_17];
_5.1 = _10.1 - _3;
Call(_15 = fn15(_16, _5, _5.1, _16, _7, Field::<(f32,)>(Variant(_13, 2), 2).0, _7, _10.0, _7, _5), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_4 = (Field::<(usize, i128)>(Variant(_13, 2), 0).0, Field::<(usize, i128)>(Variant(_15, 1), 1).1);
place!(Field::<f64>(Variant(_13, 2), 3)) = -Field::<f64>(Variant(_15, 1), 3);
_16.0 = Field::<(f32,)>(Variant(_13, 2), 2).0 - _11;
_17 = 6130368564443273933_u64 << Field::<(usize, i128)>(Variant(_13, 2), 0).1;
_10 = (_2, _5.1);
_14 = (_16.0,);
_12 = [_3,_5.1,_10.1,_5.1,_5.1];
_4 = _9;
_10 = _5;
place!(Field::<(usize, i128)>(Variant(_13, 2), 0)) = Field::<(usize, i128)>(Variant(_15, 1), 1);
_6 = (-9223372036854775808_isize) - (-9223372036854775808_isize);
_16 = (Field::<(f32,)>(Variant(_13, 2), 2).0,);
Call(_22 = core::intrinsics::transmute(Field::<(usize, i128)>(Variant(_15, 1), 1).1), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
place!(Field::<(usize, i128)>(Variant(_15, 1), 1)).1 = !Field::<(usize, i128)>(Variant(_13, 2), 0).1;
place!(Field::<(usize, i128)>(Variant(_13, 2), 0)).0 = (-57_i8) as usize;
place!(Field::<char>(Variant(_13, 2), 1)) = '\u{f6749}';
_5.0 = -_2;
_2 = _8;
place!(Field::<(usize, i128)>(Variant(_13, 2), 0)) = (Field::<(usize, i128)>(Variant(_15, 1), 1).0, _9.1);
_18 = Move(_15);
RET = [_17,_17,_17,_17,_17,_17];
_5.0 = -Field::<f64>(Variant(_18, 1), 3);
_19 = [Field::<bool>(Variant(_18, 1), 0)];
_10.1 = _5.1 << _9.1;
_11 = _14.0;
_16 = (_7,);
_20.1 = _3 ^ _10.1;
_1 = _4.0;
place!(Field::<(usize, i128)>(Variant(_18, 1), 1)).1 = !Field::<(usize, i128)>(Variant(_13, 2), 0).1;
place!(Field::<(usize, i128)>(Variant(_13, 2), 0)) = (_9.0, Field::<(usize, i128)>(Variant(_18, 1), 1).1);
match Field::<(usize, i128)>(Variant(_18, 1), 1).0 {
1 => bb2,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
0 => bb9,
_ => bb8
}
}
bb4 = {
_4 = (Field::<(usize, i128)>(Variant(_13, 2), 0).0, Field::<(usize, i128)>(Variant(_15, 1), 1).1);
place!(Field::<f64>(Variant(_13, 2), 3)) = -Field::<f64>(Variant(_15, 1), 3);
_16.0 = Field::<(f32,)>(Variant(_13, 2), 2).0 - _11;
_17 = 6130368564443273933_u64 << Field::<(usize, i128)>(Variant(_13, 2), 0).1;
_10 = (_2, _5.1);
_14 = (_16.0,);
_12 = [_3,_5.1,_10.1,_5.1,_5.1];
_4 = _9;
_10 = _5;
place!(Field::<(usize, i128)>(Variant(_13, 2), 0)) = Field::<(usize, i128)>(Variant(_15, 1), 1);
_6 = (-9223372036854775808_isize) - (-9223372036854775808_isize);
_16 = (Field::<(f32,)>(Variant(_13, 2), 2).0,);
Call(_22 = core::intrinsics::transmute(Field::<(usize, i128)>(Variant(_15, 1), 1).1), ReturnTo(bb3), UnwindUnreachable())
}
bb5 = {
_4 = (_9.0, _9.1);
_13 = Adt40::Variant2 { fld0: _9,fld1: '\u{881a8}',fld2: _16,fld3: _2 };
_17 = !14109486136395945412_u64;
_9.1 = -Field::<(usize, i128)>(Variant(_13, 2), 0).1;
RET = [_17,_17,_17,_17,_17,_17];
_5.1 = _10.1 - _3;
Call(_15 = fn15(_16, _5, _5.1, _16, _7, Field::<(f32,)>(Variant(_13, 2), 2).0, _7, _10.0, _7, _5), ReturnTo(bb2), UnwindUnreachable())
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
_20.0 = Field::<f64>(Variant(_13, 2), 3);
place!(Field::<(usize, i128)>(Variant(_13, 2), 0)) = _4;
_19 = [Field::<bool>(Variant(_18, 1), 0)];
_26 = [3912844359_u32,1387620822_u32];
SetDiscriminant(_13, 0);
place!(Field::<Adt39>(Variant(_13, 0), 0)) = Adt39 { fld0: _14,fld1: _14.0 };
SetDiscriminant(_18, 3);
_25 = 40_u8;
_2 = (-12915_i16) as f64;
place!(Field::<*mut i32>(Variant(_13, 0), 2)) = core::ptr::addr_of_mut!(place!(Field::<i32>(Variant(_13, 0), 5)));
_1 = false as usize;
place!(Field::<Adt39>(Variant(_13, 0), 0)).fld0.0 = _11;
_19 = [true];
place!(Field::<*mut i32>(Variant(_13, 0), 2)) = core::ptr::addr_of_mut!(place!(Field::<i32>(Variant(_13, 0), 5)));
_25 = _1 as u8;
_6 = (-81_isize) | (-9223372036854775808_isize);
_30 = [_6,_6];
_24 = core::ptr::addr_of!(_28.1);
_19 = [false];
_9 = (_4.0, _4.1);
_27 = Field::<Adt39>(Variant(_13, 0), 0);
_5.0 = _2;
_6 = !9223372036854775807_isize;
Goto(bb10)
}
bb10 = {
_19 = [true];
_15 = Adt38::Variant2 { fld0: Field::<*mut i32>(Variant(_13, 0), 2),fld1: 318039051802243927452744111831651703284_u128 };
_14.0 = _16.0;
_13 = Adt40::Variant2 { fld0: _4,fld1: '\u{9f1e6}',fld2: _16,fld3: _2 };
_23 = [false,false,false,true,true];
_6 = (-90_isize) + (-15_isize);
place!(Field::<(usize, i128)>(Variant(_13, 2), 0)) = (_4.0, _4.1);
_13 = Adt40::Variant2 { fld0: _9,fld1: '\u{8a9fc}',fld2: _27.fld0,fld3: _10.0 };
_10.0 = -Field::<f64>(Variant(_13, 2), 3);
_7 = 1003467301_u32 as f32;
_14.0 = _2 as f32;
_29 = '\u{1b1ec}';
place!(Field::<(usize, i128)>(Variant(_13, 2), 0)) = (_9.0, _9.1);
_28.0 = 1621080101_i32 as f64;
Call(_9 = fn16(Field::<(f32,)>(Variant(_13, 2), 2), RET, _16.0, _11, _30, _27.fld0.0, _27.fld1, _27.fld0, _10), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_4 = (_1, _9.1);
_23 = [true,false,false,true,true];
_10 = (_28.0, _20.1);
_33 = core::ptr::addr_of_mut!(_3);
_10.1 = (*_33);
_6 = 9223372036854775807_isize;
_28.1 = _5.1;
place!(Field::<(usize, i128)>(Variant(_13, 2), 0)) = (_4.0, _9.1);
_11 = _27.fld1;
_9.0 = _1 * _1;
place!(Field::<(usize, i128)>(Variant(_13, 2), 0)).1 = _9.1;
place!(Field::<*mut i64>(Variant(_18, 3), 0)) = core::ptr::addr_of_mut!((*_24));
_22 = _30;
_23 = [true,true,false,true,false];
_16 = (Field::<(f32,)>(Variant(_13, 2), 2).0,);
_3 = -_5.1;
place!(Field::<(usize, i128)>(Variant(_13, 2), 0)).1 = _9.1;
Goto(bb12)
}
bb12 = {
place!(Field::<(f32,)>(Variant(_13, 2), 2)) = _16;
_18 = Adt38::Variant2 { fld0: Field::<*mut i32>(Variant(_15, 2), 0),fld1: 278875375615754779050155158155567429616_u128 };
_34 = 48154_u16 as isize;
_22 = _30;
_25 = !255_u8;
_8 = _20.0;
_17 = !8564364802880200812_u64;
_37.0 = [_9.1,_9.1,_4.1];
_31 = _29;
_9.0 = _1;
_31 = _29;
Goto(bb13)
}
bb13 = {
_20 = _5;
_21 = -_5.0;
_30 = [_6,_34];
_29 = _31;
_17 = 16986214903627519661_u64 << _4.1;
place!(Field::<(usize, i128)>(Variant(_13, 2), 0)).1 = _9.1 >> Field::<(usize, i128)>(Variant(_13, 2), 0).0;
match _6 {
0 => bb1,
1 => bb8,
2 => bb14,
3 => bb15,
9223372036854775807 => bb17,
_ => bb16
}
}
bb14 = {
Return()
}
bb15 = {
Return()
}
bb16 = {
_4 = (_9.0, _9.1);
_13 = Adt40::Variant2 { fld0: _9,fld1: '\u{881a8}',fld2: _16,fld3: _2 };
_17 = !14109486136395945412_u64;
_9.1 = -Field::<(usize, i128)>(Variant(_13, 2), 0).1;
RET = [_17,_17,_17,_17,_17,_17];
_5.1 = _10.1 - _3;
Call(_15 = fn15(_16, _5, _5.1, _16, _7, Field::<(f32,)>(Variant(_13, 2), 2).0, _7, _10.0, _7, _5), ReturnTo(bb2), UnwindUnreachable())
}
bb17 = {
_10.1 = (*_24) * _20.1;
_16.0 = _25 as f32;
_14.0 = _11;
_5 = (_20.0, _10.1);
place!(Field::<u128>(Variant(_15, 2), 1)) = 1803717089_u32 as u128;
_7 = _14.0 * _14.0;
_7 = _27.fld0.0 * _11;
SetDiscriminant(_15, 1);
_24 = core::ptr::addr_of!(_3);
place!(Field::<char>(Variant(_13, 2), 1)) = _31;
_17 = 16214709749085911475_u64 >> _28.1;
place!(Field::<bool>(Variant(_15, 1), 0)) = _11 != Field::<(f32,)>(Variant(_13, 2), 2).0;
Goto(bb18)
}
bb18 = {
Call(_40 = dump_var(14_usize, 31_usize, Move(_31), 4_usize, Move(_4), 34_usize, Move(_34), 6_usize, Move(_6)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_40 = dump_var(14_usize, 23_usize, Move(_23), 3_usize, Move(_3), 37_usize, Move(_37), 19_usize, Move(_19)), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn15(mut _1: (f32,),mut _2: (f64, i64),mut _3: i64,mut _4: (f32,),mut _5: f32,mut _6: f32,mut _7: f32,mut _8: f64,mut _9: f32,mut _10: (f64, i64)) -> Adt38 {
mir! {
type RET = Adt38;
let _11: isize;
let _12: u8;
let _13: isize;
let _14: Adt43;
let _15: [bool; 5];
let _16: (usize, i128);
let _17: [isize; 2];
let _18: [u8; 7];
let _19: isize;
let _20: char;
let _21: f32;
let _22: isize;
let _23: [i64; 5];
let _24: (f32,);
let _25: Adt47;
let _26: isize;
let _27: i128;
let _28: [bool; 1];
let _29: ();
let _30: ();
{
_2.1 = !_3;
_5 = -_7;
_10.1 = _4.0 as i64;
Call(_3 = core::intrinsics::transmute(_2.1), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_9 = _4.0;
_2 = _10;
_9 = (-162800553376101329706748144661418617892_i128) as f32;
_11 = 9223372036854775807_isize + (-9223372036854775808_isize);
_13 = _7 as isize;
_5 = _4.0 - _7;
_5 = -_7;
_4.0 = _1.0;
_2.1 = _3 * _10.1;
_10 = (_8, _2.1);
_10.1 = (-24574_i16) as i64;
_7 = _4.0 - _5;
_9 = _7;
_10 = _2;
_4 = (_5,);
Goto(bb2)
}
bb2 = {
_6 = _7 + _1.0;
_10.0 = _8;
_10 = (_8, _2.1);
_10 = (_8, _2.1);
_4 = _1;
_18 = [44_u8,31_u8,20_u8,68_u8,49_u8,9_u8,11_u8];
_16 = (0_usize, (-12444103086525795484007566728764900029_i128));
_17 = [_13,_13];
RET = Adt38::Variant1 { fld0: true,fld1: _16,fld2: _18,fld3: _10.0 };
Goto(bb3)
}
bb3 = {
_5 = -_6;
_16.1 = Field::<(usize, i128)>(Variant(RET, 1), 1).1 | Field::<(usize, i128)>(Variant(RET, 1), 1).1;
_1.0 = _7;
_13 = _11;
_17 = [_11,_11];
match _16.0 {
1 => bb4,
2 => bb5,
3 => bb6,
0 => bb8,
_ => bb7
}
}
bb4 = {
_6 = _7 + _1.0;
_10.0 = _8;
_10 = (_8, _2.1);
_10 = (_8, _2.1);
_4 = _1;
_18 = [44_u8,31_u8,20_u8,68_u8,49_u8,9_u8,11_u8];
_16 = (0_usize, (-12444103086525795484007566728764900029_i128));
_17 = [_13,_13];
RET = Adt38::Variant1 { fld0: true,fld1: _16,fld2: _18,fld3: _10.0 };
Goto(bb3)
}
bb5 = {
_9 = _4.0;
_2 = _10;
_9 = (-162800553376101329706748144661418617892_i128) as f32;
_11 = 9223372036854775807_isize + (-9223372036854775808_isize);
_13 = _7 as isize;
_5 = _4.0 - _7;
_5 = -_7;
_4.0 = _1.0;
_2.1 = _3 * _10.1;
_10 = (_8, _2.1);
_10.1 = (-24574_i16) as i64;
_7 = _4.0 - _5;
_9 = _7;
_10 = _2;
_4 = (_5,);
Goto(bb2)
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_12 = !238_u8;
RET = Adt38::Variant1 { fld0: true,fld1: _16,fld2: _18,fld3: _8 };
_2 = (_8, _10.1);
RET = Adt38::Variant1 { fld0: true,fld1: _16,fld2: _18,fld3: _8 };
_20 = '\u{8b527}';
_18 = [_12,_12,_12,_12,_12,_12,_12];
_4.0 = _1.0;
_17 = [_11,_11];
_18 = Field::<[u8; 7]>(Variant(RET, 1), 2);
place!(Field::<[u8; 7]>(Variant(RET, 1), 2)) = [_12,_12,_12,_12,_12,_12,_12];
_22 = _13 + _13;
_1 = (_6,);
_6 = _4.0 - _1.0;
_16.1 = Field::<(usize, i128)>(Variant(RET, 1), 1).1;
_16.1 = -Field::<(usize, i128)>(Variant(RET, 1), 1).1;
_24 = (_9,);
place!(Field::<[u8; 7]>(Variant(RET, 1), 2)) = _18;
_16.0 = Field::<(usize, i128)>(Variant(RET, 1), 1).0;
_4.0 = _9;
_24.0 = -_5;
Call(_13 = core::intrinsics::bswap(_22), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
_20 = '\u{254f9}';
place!(Field::<f64>(Variant(RET, 1), 3)) = _10.0 * _8;
place!(Field::<bool>(Variant(RET, 1), 0)) = false;
_7 = _5 + _5;
place!(Field::<(usize, i128)>(Variant(RET, 1), 1)) = _16;
_3 = _2.1;
_9 = 53214_u16 as f32;
_2 = (Field::<f64>(Variant(RET, 1), 3), _10.1);
_20 = '\u{b1aae}';
_19 = (-1472929036_i32) as isize;
_10.0 = Field::<f64>(Variant(RET, 1), 3);
_10.0 = _8;
_23 = [_2.1,_10.1,_2.1,_10.1,_2.1];
_24 = (_7,);
_21 = 40494_u16 as f32;
Goto(bb10)
}
bb10 = {
Call(_29 = dump_var(15_usize, 23_usize, Move(_23), 16_usize, Move(_16), 18_usize, Move(_18), 19_usize, Move(_19)), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
Call(_29 = dump_var(15_usize, 20_usize, Move(_20), 30_usize, _30, 30_usize, _30, 30_usize, _30), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn16(mut _1: (f32,),mut _2: [u64; 6],mut _3: f32,mut _4: f32,mut _5: [isize; 2],mut _6: f32,mut _7: f32,mut _8: (f32,),mut _9: (f64, i64)) -> (usize, i128) {
mir! {
type RET = (usize, i128);
let _10: *const *mut i64;
let _11: usize;
let _12: Adt53;
let _13: Adt53;
let _14: isize;
let _15: bool;
let _16: bool;
let _17: u8;
let _18: (usize, i128);
let _19: (f32,);
let _20: ([i128; 3],);
let _21: f32;
let _22: ((usize, i128),);
let _23: isize;
let _24: i16;
let _25: f64;
let _26: f32;
let _27: isize;
let _28: char;
let _29: (f32,);
let _30: [u8; 7];
let _31: char;
let _32: isize;
let _33: i128;
let _34: Adt45;
let _35: &'static i32;
let _36: f32;
let _37: Adt51;
let _38: Adt48;
let _39: Adt40;
let _40: isize;
let _41: i8;
let _42: Adt43;
let _43: ();
let _44: ();
{
_3 = 33217_u16 as f32;
_9.0 = 2724505012392382484_u64 as f64;
RET = (11463577145588494248_usize, (-53007544176645409582763276380362972097_i128));
_1.0 = _9.1 as f32;
_4 = _7;
RET.0 = !16560047448296127784_usize;
_11 = RET.0 ^ RET.0;
RET.0 = _11 | _11;
RET.0 = 2069787548_u32 as usize;
_6 = _7;
_4 = _11 as f32;
RET = (_11, 75912081144520426677536594905285208674_i128);
RET = (_11, (-39261459639017851139295195545338434300_i128));
_9.1 = (-9189523242100773316_i64);
_11 = 110408036550667525197313518272543425607_u128 as usize;
_2 = [13643280978821357189_u64,9469999115955386246_u64,16440841152926166182_u64,5832474239674430172_u64,16809368883857500507_u64,8440880443360072121_u64];
Goto(bb1)
}
bb1 = {
_11 = (-9223372036854775808_isize) as usize;
_9.1 = -552076556889561418_i64;
_7 = _9.1 as f32;
_8.0 = -_6;
_17 = 92_u8 << _9.1;
_18.1 = false as i128;
_14 = !(-9223372036854775808_isize);
_1 = (_6,);
_2 = [21603169450003874_u64,4075423346934535890_u64,17535833017979560424_u64,5977353463027997662_u64,472668776517349771_u64,12907379618560631867_u64];
_14 = 9223372036854775807_isize | (-102_isize);
_5 = [_14,_14];
match RET.1 {
301020907281920612324079411886429777156 => bb3,
_ => bb2
}
}
bb2 = {
Return()
}
bb3 = {
_20.0 = [RET.1,RET.1,_18.1];
_16 = false;
_19.0 = -_1.0;
_15 = _16 ^ _16;
_3 = _19.0;
_2 = [11058410284776698845_u64,554800154625653819_u64,8323708415342600606_u64,5693114159494424425_u64,18094702830716246142_u64,16263022395179268285_u64];
_5 = [_14,_14];
_18 = (RET.0, RET.1);
RET = (_18.0, _18.1);
_18.0 = RET.0 << RET.0;
_23 = 1161415692_u32 as isize;
_8.0 = _3;
_9.0 = 40_i8 as f64;
_6 = 2029686449_u32 as f32;
_18 = RET;
RET = (_11, _18.1);
RET = _18;
_19.0 = _1.0;
Goto(bb4)
}
bb4 = {
_22.0.1 = _18.1;
Goto(bb5)
}
bb5 = {
_18 = (RET.0, _22.0.1);
_15 = !_16;
_21 = _19.0;
_4 = _21 * _8.0;
_22.0 = (_18.0, _18.1);
_6 = _19.0 - _19.0;
_22 = (RET,);
_8 = (_6,);
_18.0 = _22.0.0 ^ RET.0;
_25 = _9.0 - _9.0;
_1 = _19;
_8 = _19;
_22.0.1 = _18.1;
_6 = -_4;
_17 = 129_u8 - 233_u8;
_2 = [14350284605508292963_u64,7322505529857793539_u64,12380515688813296604_u64,13422488133192942340_u64,1536963025055502502_u64,3709902059768015769_u64];
_28 = '\u{c07cc}';
RET.0 = (-26479_i16) as usize;
_29 = (_6,);
_4 = _19.0 + _8.0;
_30 = [_17,_17,_17,_17,_17,_17,_17];
_17 = !230_u8;
_25 = -_9.0;
Goto(bb6)
}
bb6 = {
_3 = _8.0;
_1.0 = -_29.0;
_9.1 = _14 as i64;
_14 = -_23;
_18.0 = _22.0.0 + _11;
_26 = _7;
RET.1 = -_22.0.1;
_17 = !104_u8;
_27 = _19.0 as isize;
_15 = _16;
_15 = !_16;
_9 = (_25, 6529197852265439175_i64);
_2 = [16104392262743381230_u64,10208725386279132481_u64,4346886634339187652_u64,7723256290228451874_u64,12880407720379144463_u64,13664044404434740956_u64];
_30 = [_17,_17,_17,_17,_17,_17,_17];
_15 = _16 | _16;
_16 = !_15;
_29 = (_4,);
_21 = -_4;
_33 = -_22.0.1;
RET.0 = !_22.0.0;
_7 = _29.0;
_8.0 = _7;
_18 = (_22.0.0, RET.1);
_14 = _27;
_14 = _27;
match _9.1 {
0 => bb7,
1 => bb8,
2 => bb9,
6529197852265439175 => bb11,
_ => bb10
}
}
bb7 = {
_18 = (RET.0, _22.0.1);
_15 = !_16;
_21 = _19.0;
_4 = _21 * _8.0;
_22.0 = (_18.0, _18.1);
_6 = _19.0 - _19.0;
_22 = (RET,);
_8 = (_6,);
_18.0 = _22.0.0 ^ RET.0;
_25 = _9.0 - _9.0;
_1 = _19;
_8 = _19;
_22.0.1 = _18.1;
_6 = -_4;
_17 = 129_u8 - 233_u8;
_2 = [14350284605508292963_u64,7322505529857793539_u64,12380515688813296604_u64,13422488133192942340_u64,1536963025055502502_u64,3709902059768015769_u64];
_28 = '\u{c07cc}';
RET.0 = (-26479_i16) as usize;
_29 = (_6,);
_4 = _19.0 + _8.0;
_30 = [_17,_17,_17,_17,_17,_17,_17];
_17 = !230_u8;
_25 = -_9.0;
Goto(bb6)
}
bb8 = {
_11 = (-9223372036854775808_isize) as usize;
_9.1 = -552076556889561418_i64;
_7 = _9.1 as f32;
_8.0 = -_6;
_17 = 92_u8 << _9.1;
_18.1 = false as i128;
_14 = !(-9223372036854775808_isize);
_1 = (_6,);
_2 = [21603169450003874_u64,4075423346934535890_u64,17535833017979560424_u64,5977353463027997662_u64,472668776517349771_u64,12907379618560631867_u64];
_14 = 9223372036854775807_isize | (-102_isize);
_5 = [_14,_14];
match RET.1 {
301020907281920612324079411886429777156 => bb3,
_ => bb2
}
}
bb9 = {
_20.0 = [RET.1,RET.1,_18.1];
_16 = false;
_19.0 = -_1.0;
_15 = _16 ^ _16;
_3 = _19.0;
_2 = [11058410284776698845_u64,554800154625653819_u64,8323708415342600606_u64,5693114159494424425_u64,18094702830716246142_u64,16263022395179268285_u64];
_5 = [_14,_14];
_18 = (RET.0, RET.1);
RET = (_18.0, _18.1);
_18.0 = RET.0 << RET.0;
_23 = 1161415692_u32 as isize;
_8.0 = _3;
_9.0 = 40_i8 as f64;
_6 = 2029686449_u32 as f32;
_18 = RET;
RET = (_11, _18.1);
RET = _18;
_19.0 = _1.0;
Goto(bb4)
}
bb10 = {
Return()
}
bb11 = {
_1 = (_4,);
_24 = !(-4998_i16);
_17 = 11_u8 ^ 217_u8;
_36 = 11201264442905711580_u64 as f32;
_36 = _29.0;
_8.0 = -_29.0;
_5 = [_14,_14];
_24 = !14374_i16;
_22 = (_18,);
_38.fld1 = _28;
_32 = !_27;
_31 = _38.fld1;
_22.0.1 = _33;
_5 = [_14,_27];
match _9.1 {
0 => bb8,
1 => bb5,
6529197852265439175 => bb13,
_ => bb12
}
}
bb12 = {
_18 = (RET.0, _22.0.1);
_15 = !_16;
_21 = _19.0;
_4 = _21 * _8.0;
_22.0 = (_18.0, _18.1);
_6 = _19.0 - _19.0;
_22 = (RET,);
_8 = (_6,);
_18.0 = _22.0.0 ^ RET.0;
_25 = _9.0 - _9.0;
_1 = _19;
_8 = _19;
_22.0.1 = _18.1;
_6 = -_4;
_17 = 129_u8 - 233_u8;
_2 = [14350284605508292963_u64,7322505529857793539_u64,12380515688813296604_u64,13422488133192942340_u64,1536963025055502502_u64,3709902059768015769_u64];
_28 = '\u{c07cc}';
RET.0 = (-26479_i16) as usize;
_29 = (_6,);
_4 = _19.0 + _8.0;
_30 = [_17,_17,_17,_17,_17,_17,_17];
_17 = !230_u8;
_25 = -_9.0;
Goto(bb6)
}
bb13 = {
_22 = (_18,);
_38.fld0 = (_9.0, _9.1);
_29.0 = _8.0;
_40 = _14;
_22.0 = RET;
_16 = _15;
RET.0 = _11;
_11 = _22.0.0;
_6 = -_36;
_28 = _38.fld1;
_29.0 = _7 * _36;
RET.1 = _38.fld1 as i128;
_22.0 = (_11, _18.1);
_18.0 = _38.fld0.0 as usize;
_22 = (_18,);
_18 = (_11, _22.0.1);
_22.0.0 = _27 as usize;
_15 = _16;
_33 = _18.1 & _18.1;
_16 = !_15;
_2 = [9916872080580633353_u64,8225397842844080588_u64,8648089425783830692_u64,3239851817925772723_u64,13030554154813386075_u64,561782292969072380_u64];
_28 = _38.fld1;
Goto(bb14)
}
bb14 = {
_1 = (_36,);
_19.0 = _24 as f32;
_5 = [_27,_32];
_38.fld0 = (_9.0, _9.1);
Goto(bb15)
}
bb15 = {
Call(_43 = dump_var(16_usize, 30_usize, Move(_30), 18_usize, Move(_18), 20_usize, Move(_20), 2_usize, Move(_2)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_43 = dump_var(16_usize, 33_usize, Move(_33), 40_usize, Move(_40), 17_usize, Move(_17), 15_usize, Move(_15)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_43 = dump_var(16_usize, 24_usize, Move(_24), 44_usize, _44, 44_usize, _44, 44_usize, _44), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn17(mut _1: (f32,),mut _2: isize) -> char {
mir! {
type RET = char;
let _3: Adt52;
let _4: Adt48;
let _5: u16;
let _6: i32;
let _7: usize;
let _8: (f64, i64);
let _9: f64;
let _10: u32;
let _11: u32;
let _12: usize;
let _13: Adt43;
let _14: [bool; 1];
let _15: i64;
let _16: char;
let _17: Adt42;
let _18: u8;
let _19: [u8; 7];
let _20: [u8; 7];
let _21: bool;
let _22: Adt39;
let _23: isize;
let _24: isize;
let _25: [u32; 2];
let _26: char;
let _27: Adt50;
let _28: *const f64;
let _29: bool;
let _30: char;
let _31: i16;
let _32: [u32; 2];
let _33: ();
let _34: ();
{
RET = '\u{5265f}';
RET = '\u{5a46c}';
RET = '\u{9d8a7}';
_2 = 9223372036854775807_isize + (-9223372036854775808_isize);
RET = '\u{df5af}';
_2 = 9223372036854775807_isize;
RET = '\u{34467}';
_4.fld0.1 = !3173975544919067773_i64;
RET = '\u{6da8f}';
_1.0 = 2711271429_u32 as f32;
_6 = _4.fld0.1 as i32;
RET = '\u{b01ca}';
_5 = !35918_u16;
_4.fld0.1 = false as i64;
_2 = (-9223372036854775808_isize);
_4.fld0.0 = _2 as f64;
_4.fld1 = RET;
_8.1 = -_4.fld0.1;
_8.0 = (-61_i8) as f64;
_4.fld0 = (_8.0, _8.1);
_6 = _8.0 as i32;
_2 = -38_isize;
_7 = 9479258850822923302_usize;
Goto(bb1)
}
bb1 = {
_6 = -(-631473314_i32);
_5 = 19139_u16;
_4.fld0 = (_8.0, _8.1);
_7 = 32_i8 as usize;
RET = _4.fld1;
RET = _4.fld1;
RET = _4.fld1;
_4.fld0.1 = -_8.1;
_9 = _4.fld0.0;
_8 = (_4.fld0.0, _4.fld0.1);
_9 = _4.fld0.0;
_8.1 = _4.fld0.1 & _4.fld0.1;
_8.0 = _9;
match _5 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
19139 => bb7,
_ => bb6
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
_8.1 = -_4.fld0.1;
_10 = 193035225_u32;
_4.fld0 = (_8.0, _8.1);
_7 = (-79_i8) as usize;
_4 = Adt48 { fld0: _8,fld1: RET };
_1.0 = 29_u8 as f32;
_4.fld0 = _8;
RET = _4.fld1;
_7 = 15601_i16 as usize;
_4 = Adt48 { fld0: _8,fld1: RET };
_7 = 1_usize;
_6 = -(-1093712647_i32);
_4.fld1 = RET;
_4.fld1 = RET;
_12 = !_7;
_4.fld1 = RET;
_4 = Adt48 { fld0: _8,fld1: RET };
_12 = !_7;
_8.1 = _4.fld0.1 + _4.fld0.1;
_8.0 = -_4.fld0.0;
Goto(bb8)
}
bb8 = {
_6 = 504483404_i32;
_1.0 = _8.1 as f32;
_1.0 = _2 as f32;
_14 = [false];
_11 = (-16870_i16) as u32;
_16 = RET;
RET = _16;
Goto(bb9)
}
bb9 = {
_4 = Adt48 { fld0: _8,fld1: _16 };
_8.1 = _4.fld0.1 << _6;
_17.fld1.0 = _12 as f32;
_4 = Adt48 { fld0: _8,fld1: _16 };
_1.0 = _17.fld1.0;
_2 = !(-9223372036854775808_isize);
_12 = !_7;
_8.0 = -_9;
_15 = !_4.fld0.1;
RET = _4.fld1;
RET = _4.fld1;
_17.fld1.0 = _1.0;
_19[_7] = !240_u8;
_17.fld1.0 = -_1.0;
_5 = 41930_u16 | 56770_u16;
match _7 {
0 => bb7,
2 => bb8,
3 => bb10,
1 => bb12,
_ => bb11
}
}
bb10 = {
_6 = -(-631473314_i32);
_5 = 19139_u16;
_4.fld0 = (_8.0, _8.1);
_7 = 32_i8 as usize;
RET = _4.fld1;
RET = _4.fld1;
RET = _4.fld1;
_4.fld0.1 = -_8.1;
_9 = _4.fld0.0;
_8 = (_4.fld0.0, _4.fld0.1);
_9 = _4.fld0.0;
_8.1 = _4.fld0.1 & _4.fld0.1;
_8.0 = _9;
match _5 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
19139 => bb7,
_ => bb6
}
}
bb11 = {
_8.1 = -_4.fld0.1;
_10 = 193035225_u32;
_4.fld0 = (_8.0, _8.1);
_7 = (-79_i8) as usize;
_4 = Adt48 { fld0: _8,fld1: RET };
_1.0 = 29_u8 as f32;
_4.fld0 = _8;
RET = _4.fld1;
_7 = 15601_i16 as usize;
_4 = Adt48 { fld0: _8,fld1: RET };
_7 = 1_usize;
_6 = -(-1093712647_i32);
_4.fld1 = RET;
_4.fld1 = RET;
_12 = !_7;
_4.fld1 = RET;
_4 = Adt48 { fld0: _8,fld1: RET };
_12 = !_7;
_8.1 = _4.fld0.1 + _4.fld0.1;
_8.0 = -_4.fld0.0;
Goto(bb8)
}
bb12 = {
_17.fld2 = core::ptr::addr_of_mut!(_15);
_8 = (_9, _15);
_19[_7] = !96_u8;
_20 = [_19[_7],_19[_7],_19[_7],_19[_7],_19[_7],_19[_7],_19[_7]];
_5 = _11 as u16;
_12 = _1.0 as usize;
_8 = (_9, _4.fld0.1);
_4.fld0.1 = _8.1 | _15;
_4.fld0.0 = _2 as f64;
_22.fld0 = _1;
_4.fld0.0 = -_8.0;
_24 = _2 - _2;
_22.fld0 = (_1.0,);
_4.fld1 = _16;
_17.fld2 = core::ptr::addr_of_mut!(_15);
_17.fld0 = true as i64;
_4.fld0.0 = _5 as f64;
_12 = _7 ^ _7;
RET = _16;
_8.1 = _15;
_4.fld1 = _16;
Goto(bb13)
}
bb13 = {
_11 = _10 + _10;
_18 = _19[_7];
_22.fld1 = _1.0;
_22.fld0 = (_1.0,);
_4.fld0.1 = _15;
_20 = [_18,_19[_7],_18,_18,_18,_19[_7],_19[_7]];
_4 = Adt48 { fld0: _8,fld1: _16 };
_1 = (_22.fld0.0,);
_17.fld2 = core::ptr::addr_of_mut!(_4.fld0.1);
_21 = false;
match _7 {
0 => bb7,
2 => bb11,
3 => bb14,
4 => bb15,
5 => bb16,
6 => bb17,
1 => bb19,
_ => bb18
}
}
bb14 = {
_17.fld2 = core::ptr::addr_of_mut!(_15);
_8 = (_9, _15);
_19[_7] = !96_u8;
_20 = [_19[_7],_19[_7],_19[_7],_19[_7],_19[_7],_19[_7],_19[_7]];
_5 = _11 as u16;
_12 = _1.0 as usize;
_8 = (_9, _4.fld0.1);
_4.fld0.1 = _8.1 | _15;
_4.fld0.0 = _2 as f64;
_22.fld0 = _1;
_4.fld0.0 = -_8.0;
_24 = _2 - _2;
_22.fld0 = (_1.0,);
_4.fld1 = _16;
_17.fld2 = core::ptr::addr_of_mut!(_15);
_17.fld0 = true as i64;
_4.fld0.0 = _5 as f64;
_12 = _7 ^ _7;
RET = _16;
_8.1 = _15;
_4.fld1 = _16;
Goto(bb13)
}
bb15 = {
Return()
}
bb16 = {
Return()
}
bb17 = {
_4 = Adt48 { fld0: _8,fld1: _16 };
_8.1 = _4.fld0.1 << _6;
_17.fld1.0 = _12 as f32;
_4 = Adt48 { fld0: _8,fld1: _16 };
_1.0 = _17.fld1.0;
_2 = !(-9223372036854775808_isize);
_12 = !_7;
_8.0 = -_9;
_15 = !_4.fld0.1;
RET = _4.fld1;
RET = _4.fld1;
_17.fld1.0 = _1.0;
_19[_7] = !240_u8;
_17.fld1.0 = -_1.0;
_5 = 41930_u16 | 56770_u16;
match _7 {
0 => bb7,
2 => bb8,
3 => bb10,
1 => bb12,
_ => bb11
}
}
bb18 = {
_6 = 504483404_i32;
_1.0 = _8.1 as f32;
_1.0 = _2 as f32;
_14 = [false];
_11 = (-16870_i16) as u32;
_16 = RET;
RET = _16;
Goto(bb9)
}
bb19 = {
_1 = (_22.fld1,);
_26 = _4.fld1;
_23 = _24;
_16 = _4.fld1;
_26 = RET;
_7 = !_12;
_25 = [_11,_10];
RET = _16;
_22 = Adt39 { fld0: _17.fld1,fld1: _17.fld1.0 };
_27.fld1 = _8.0 + _8.0;
_22.fld1 = -_1.0;
_1 = (_22.fld0.0,);
_12 = !_7;
_6 = -(-2085361562_i32);
_27.fld0.fld0 = (_8.0, _8.1);
_27.fld0.fld1 = _26;
_22.fld0.0 = -_1.0;
_11 = _27.fld1 as u32;
_27.fld0.fld0 = _8;
_30 = _4.fld1;
_22.fld0.0 = -_22.fld1;
_1.0 = (-23517_i16) as f32;
_16 = _26;
_30 = _26;
_24 = _23;
_27.fld0.fld1 = RET;
Goto(bb20)
}
bb20 = {
Call(_33 = dump_var(17_usize, 11_usize, Move(_11), 7_usize, Move(_7), 2_usize, Move(_2), 20_usize, Move(_20)), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
Call(_33 = dump_var(17_usize, 25_usize, Move(_25), 30_usize, Move(_30), 16_usize, Move(_16), 23_usize, Move(_23)), ReturnTo(bb22), UnwindUnreachable())
}
bb22 = {
Call(_33 = dump_var(17_usize, 5_usize, Move(_5), 34_usize, _34, 34_usize, _34, 34_usize, _34), ReturnTo(bb23), UnwindUnreachable())
}
bb23 = {
Return()
}

}
}
pub fn main() {
                fn0(std::hint::black_box(true), std::hint::black_box(2347393202_u32), std::hint::black_box(9223372036854775807_isize), std::hint::black_box(298453061767070271389208233027016072111_u128), std::hint::black_box((-27272_i16)));
                
            }
#[derive(Debug)]
pub enum Adt37 {
Variant0{
fld0: f32,
fld1: *mut i32,
fld2: (f64, i64),

},
Variant1{
fld0: i32,
fld1: (usize, i128),
fld2: u64,

}}
#[derive(Debug)]
pub enum Adt38 {
Variant0{
fld0: u8,
fld1: u128,
fld2: [bool; 5],

},
Variant1{
fld0: bool,
fld1: (usize, i128),
fld2: [u8; 7],
fld3: f64,

},
Variant2{
fld0: *mut i32,
fld1: u128,

},
Variant3{
fld0: *mut i64,
fld1: i64,

}}
#[derive(Debug,Copy,Clone)]
pub struct Adt39 {
fld0: (f32,),
fld1: f32,
}
#[derive(Debug,Copy,Clone)]
pub enum Adt40 {
Variant0{
fld0: Adt39,
fld1: f64,
fld2: *mut i32,
fld3: i8,
fld4: *const *mut i64,
fld5: i32,
fld6: (i16, [u8; 7], [i64; 5]),
fld7: u128,

},
Variant1{
fld0: (f64, i64),
fld1: u16,
fld2: ([i128; 3],),
fld3: [bool; 5],
fld4: u8,

},
Variant2{
fld0: (usize, i128),
fld1: char,
fld2: (f32,),
fld3: f64,

}}
#[derive(Debug)]
pub enum Adt41 {
Variant0{
fld0: Adt39,
fld1: u128,
fld2: i32,

},
Variant1{
fld0: Adt40,
fld1: u64,
fld2: Adt38,
fld3: u32,
fld4: [i64; 5],
fld5: *const f64,
fld6: i64,

},
Variant2{
fld0: [bool; 5],

}}
#[derive(Debug)]
pub struct Adt42 {
fld0: i64,
fld1: (f32,),
fld2: *mut i64,
}
#[derive(Debug)]
pub enum Adt43 {
Variant0{
fld0: Adt41,
fld1: u16,
fld2: Adt40,
fld3: Adt42,
fld4: u64,
fld5: usize,
fld6: f32,

},
Variant1{
fld0: Adt42,
fld1: *const f64,
fld2: [u32; 2],
fld3: f32,
fld4: Adt41,

}}
#[derive(Debug)]
pub enum Adt44 {
Variant0{
fld0: Adt41,
fld1: Adt40,
fld2: [i64; 5],
fld3: u64,
fld4: (usize, i128),
fld5: [u8; 7],
fld6: i64,
fld7: i128,

},
Variant1{
fld0: (f64, i64),
fld1: [u64; 6],
fld2: Adt40,
fld3: f64,
fld4: Adt38,
fld5: [isize; 2],
fld6: [u8; 7],
fld7: *const i64,

}}
#[derive(Debug)]
pub enum Adt45 {
Variant0{
fld0: usize,

},
Variant1{
fld0: bool,
fld1: Adt43,
fld2: [bool; 5],
fld3: i8,
fld4: (i16, [u8; 7], [i64; 5]),
fld5: [u32; 2],
fld6: (usize, i128),
fld7: (f32,),

}}
#[derive(Debug)]
pub enum Adt46 {
Variant0{
fld0: Adt37,
fld1: (i16, [u8; 7], [i64; 5]),
fld2: [i64; 5],
fld3: [u32; 2],

},
Variant1{
fld0: u16,
fld1: (usize, i128),
fld2: [i128; 3],
fld3: u32,
fld4: i16,
fld5: *mut i32,
fld6: Adt43,

},
Variant2{
fld0: bool,
fld1: *const f64,
fld2: i64,

},
Variant3{
fld0: Adt45,
fld1: i64,
fld2: Adt39,
fld3: Adt44,
fld4: [u64; 6],

}}
#[derive(Debug)]
pub enum Adt47 {
Variant0{
fld0: i64,

},
Variant1{
fld0: *mut i32,
fld1: u128,
fld2: isize,
fld3: [u32; 2],
fld4: i16,

},
Variant2{
fld0: *const *mut i64,
fld1: [bool; 1],
fld2: [u32; 2],
fld3: u8,

},
Variant3{
fld0: f64,
fld1: usize,
fld2: [u32; 2],
fld3: [bool; 5],
fld4: u16,
fld5: [bool; 1],
fld6: Adt41,
fld7: *const f64,

}}
#[derive(Debug,Copy,Clone)]
pub struct Adt48 {
fld0: (f64, i64),
fld1: char,
}
#[derive(Debug)]
pub enum Adt49 {
Variant0{
fld0: [bool; 5],
fld1: u16,
fld2: u8,
fld3: [bool; 1],

},
Variant1{
fld0: u8,
fld1: [bool; 1],
fld2: (i16, [u8; 7], [i64; 5]),
fld3: Adt46,
fld4: Adt39,
fld5: i32,

},
Variant2{
fld0: u128,
fld1: ([i128; 3],),
fld2: usize,

},
Variant3{
fld0: Adt39,
fld1: [u64; 6],
fld2: u128,
fld3: i32,
fld4: [u32; 2],

}}
#[derive(Debug,Copy,Clone)]
pub struct Adt50 {
fld0: Adt48,
fld1: f64,
}
#[derive(Debug)]
pub enum Adt51 {
Variant0{
fld0: i128,

},
Variant1{
fld0: [u32; 2],
fld1: u64,
fld2: isize,

},
Variant2{
fld0: bool,
fld1: [isize; 2],
fld2: Adt45,
fld3: *const f64,
fld4: i16,
fld5: i32,

},
Variant3{
fld0: Adt44,
fld1: u8,
fld2: Adt38,
fld3: u128,
fld4: Adt49,
fld5: (usize, i128),
fld6: u16,
fld7: (f64, i64),

}}
#[derive(Debug)]
pub enum Adt52 {
Variant0{
fld0: i128,
fld1: ([i128; 3],),

},
Variant1{
fld0: Adt41,
fld1: u64,
fld2: [bool; 5],

},
Variant2{
fld0: *mut i64,
fld1: *mut i32,
fld2: ([i128; 3],),
fld3: *const f64,
fld4: u32,
fld5: u8,
fld6: *const i64,
fld7: *const *mut i64,

},
Variant3{
fld0: (i16, [u8; 7], [i64; 5]),
fld1: Adt38,
fld2: Adt47,
fld3: Adt45,
fld4: *const i64,

}}
#[derive(Debug)]
pub enum Adt53 {
Variant0{
fld0: [bool; 1],
fld1: (usize, i128),
fld2: isize,
fld3: i64,
fld4: [isize; 2],

},
Variant1{
fld0: Adt48,
fld1: (f32,),
fld2: [i64; 5],
fld3: (usize, i128),
fld4: Adt51,

}}

