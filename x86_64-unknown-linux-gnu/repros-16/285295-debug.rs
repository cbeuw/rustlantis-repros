#![recursion_limit = "1024"]
    #![feature(custom_mir, core_intrinsics, const_hash)]
    #![allow(unused_parens, unused_assignments, overflowing_literals)]
    extern crate core;
    use core::intrinsics::mir::*;

    use std::fmt::Debug;

    #[inline(never)]
    fn dump_var(
        f: usize,
        var0: usize, val0: impl Debug,
        var1: usize, val1: impl Debug,
        var2: usize, val2: impl Debug,
        var3: usize, val3: impl Debug,
    ) {
        println!("fn{f}:_{var0} = {val0:?}\n_{var1} = {val1:?}\n_{var2} = {val2:?}\n_{var3} = {val3:?}");
    }
    #[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn0(mut _1: bool,mut _2: char,mut _3: isize,mut _4: i8,mut _5: i16,mut _6: i32,mut _7: i64,mut _8: i128,mut _9: usize,mut _10: u8,mut _11: u16,mut _12: u32,mut _13: u64,mut _14: u128) -> u128 {
mir! {
type RET = u128;
let _15: bool;
let _16: bool;
let _17: u64;
let _18: [i16; 7];
let _19: [i16; 7];
let _20: (i16,);
let _21: i32;
let _22: bool;
let _23: i32;
let _24: (f32, u32);
let _25: [char; 7];
let _26: Adt42;
let _27: usize;
let _28: u16;
let _29: u32;
let _30: (i128, char, i64);
let _31: u64;
let _32: Adt50;
let _33: [i64; 2];
let _34: Adt49;
let _35: ([i16; 7],);
let _36: i16;
let _37: bool;
let _38: Adt54;
let _39: Adt48;
let _40: *mut (i16, f32, [i16; 5]);
let _41: bool;
let _42: *const i16;
let _43: bool;
let _44: Adt40;
let _45: u32;
let _46: bool;
let _47: *const u8;
let _48: ();
let _49: ();
{
_7 = (-1491491458693309786_i64);
RET = 762488315155949806967074640722823455_u128 >> _7;
_1 = false;
_7 = RET as i64;
RET = !58129011627794221667198942982219214092_u128;
_8 = (-14608476726771867765581481757193142610_i128);
_13 = 16962433139671943796_u64 >> _7;
_3 = (-9223372036854775808_isize) | 9223372036854775807_isize;
_16 = _3 == _3;
_2 = '\u{4c3b6}';
_11 = 159_u16 | 50747_u16;
RET = (-16025_i16) as u128;
_10 = 135_u8;
_15 = _7 != _7;
_5 = !(-21302_i16);
_8 = (-137889586177897539456733523840702599469_i128) - 87277832801456490459247905316428658898_i128;
_2 = '\u{5dbd4}';
RET = _2 as u128;
RET = !146376885063640796424812213023340751495_u128;
_17 = (-18_i8) as u64;
_17 = !_13;
RET = 94737308129877332112068072543556858154_u128;
Goto(bb1)
}
bb1 = {
_12 = _8 as u32;
_4 = _1 as i8;
_5 = _7 as i16;
_1 = !_15;
_20.0 = 2001596350_i32 as i16;
_14 = RET;
_19 = [_20.0,_20.0,_5,_20.0,_5,_20.0,_5];
_13 = _17 | _17;
_18 = [_5,_5,_5,_20.0,_20.0,_5,_5];
_3 = _4 as isize;
_10 = 150_u8;
_21 = (-53890822_i32) * 1400910622_i32;
_13 = !_17;
_22 = !_15;
RET = _14;
_9 = !8531504310789655452_usize;
_6 = _7 as i32;
_23 = RET as i32;
_4 = (-4_i8);
_9 = 8208942794991489273_usize & 6_usize;
_24.0 = _7 as f32;
match _10 {
0 => bb2,
150 => bb4,
_ => bb3
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
_24.0 = _17 as f32;
_23 = _6 >> _11;
_6 = _21 * _23;
_10 = _8 as u8;
_9 = !8273102255561587899_usize;
_20 = (_5,);
_1 = !_15;
_25 = [_2,_2,_2,_2,_2,_2,_2];
_9 = 0_usize << _20.0;
Goto(bb5)
}
bb5 = {
_2 = '\u{2a75e}';
_9 = _20.0 as usize;
_8 = (-64408200081924062917096548719661546893_i128) + (-137842836292508526019054591924257086460_i128);
RET = _10 as u128;
_22 = _16;
_13 = _11 as u64;
_12 = 4106649238_u32;
Goto(bb6)
}
bb6 = {
RET = _14;
_14 = _10 as u128;
RET = _14 & _14;
_25 = [_2,_2,_2,_2,_2,_2,_2];
_21 = -_6;
_29 = !_12;
RET = !_14;
_24.1 = _20.0 as u32;
_28 = _11;
_30 = (_8, _2, _7);
_15 = _1 & _1;
_5 = _20.0;
_18 = [_5,_5,_20.0,_5,_5,_5,_5];
_15 = _1;
Goto(bb7)
}
bb7 = {
_9 = _4 as usize;
_30.0 = !_8;
_13 = _10 as u64;
_24.0 = RET as f32;
_20 = (_5,);
match _4 {
0 => bb1,
1 => bb6,
340282366920938463463374607431768211452 => bb9,
_ => bb8
}
}
bb8 = {
_12 = _8 as u32;
_4 = _1 as i8;
_5 = _7 as i16;
_1 = !_15;
_20.0 = 2001596350_i32 as i16;
_14 = RET;
_19 = [_20.0,_20.0,_5,_20.0,_5,_20.0,_5];
_13 = _17 | _17;
_18 = [_5,_5,_5,_20.0,_20.0,_5,_5];
_3 = _4 as isize;
_10 = 150_u8;
_21 = (-53890822_i32) * 1400910622_i32;
_13 = !_17;
_22 = !_15;
RET = _14;
_9 = !8531504310789655452_usize;
_6 = _7 as i32;
_23 = RET as i32;
_4 = (-4_i8);
_9 = 8208942794991489273_usize & 6_usize;
_24.0 = _7 as f32;
match _10 {
0 => bb2,
150 => bb4,
_ => bb3
}
}
bb9 = {
_20 = (_5,);
_11 = _28;
_13 = _17;
_12 = !_29;
_10 = 104_u8;
_25 = [_2,_30.1,_2,_2,_30.1,_2,_30.1];
_16 = _15;
_33 = [_7,_7];
_19 = [_5,_5,_5,_20.0,_5,_20.0,_5];
_30.1 = _2;
_24.1 = _29;
_27 = _9 >> _5;
_17 = _13 | _13;
_22 = _1 ^ _16;
_23 = _21;
_6 = _21;
_10 = !215_u8;
_14 = !RET;
_24.1 = _29;
_11 = _28 * _28;
_5 = _20.0;
_30 = (_8, _2, _7);
_7 = _30.2 << _10;
_29 = _10 as u32;
_5 = _20.0;
Call(_24.1 = fn1(_6, _27, _10, _30.0, _29, _27, _23, _19, _17, _21, _1, _33), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_8 = !_30.0;
_15 = !_16;
_36 = _20.0;
_24.1 = _12 & _12;
_35.0 = [_36,_36,_36,_20.0,_36,_20.0,_5];
_38.fld1.0 = !_8;
_20.0 = _5 * _36;
_38.fld3 = Adt50::Variant1 { fld0: _35 };
_17 = _13;
_17 = _13;
Goto(bb11)
}
bb11 = {
_14 = RET;
_38.fld1.1 = _2;
_38.fld5.0 = [_36,_36,_20.0,_36,_5,_20.0,_5];
_2 = _30.1;
_38.fld0.1 = _24.1 << _20.0;
_30.2 = _30.1 as i64;
_38.fld0 = (_24.0, _29);
_35.0 = [_36,_36,_20.0,_5,_5,_20.0,_20.0];
_25 = [_2,_30.1,_30.1,_2,_38.fld1.1,_38.fld1.1,_2];
SetDiscriminant(_38.fld3, 1);
_38.fld5 = _35;
_42 = core::ptr::addr_of!(_20.0);
_38.fld1.2 = _7;
_38.fld5.0 = [(*_42),_20.0,(*_42),(*_42),_20.0,_36,(*_42)];
RET = _10 as u128;
match _4 {
0 => bb3,
1 => bb4,
2 => bb12,
340282366920938463463374607431768211452 => bb14,
_ => bb13
}
}
bb12 = {
_12 = _8 as u32;
_4 = _1 as i8;
_5 = _7 as i16;
_1 = !_15;
_20.0 = 2001596350_i32 as i16;
_14 = RET;
_19 = [_20.0,_20.0,_5,_20.0,_5,_20.0,_5];
_13 = _17 | _17;
_18 = [_5,_5,_5,_20.0,_20.0,_5,_5];
_3 = _4 as isize;
_10 = 150_u8;
_21 = (-53890822_i32) * 1400910622_i32;
_13 = !_17;
_22 = !_15;
RET = _14;
_9 = !8531504310789655452_usize;
_6 = _7 as i32;
_23 = RET as i32;
_4 = (-4_i8);
_9 = 8208942794991489273_usize & 6_usize;
_24.0 = _7 as f32;
match _10 {
0 => bb2,
150 => bb4,
_ => bb3
}
}
bb13 = {
Return()
}
bb14 = {
_16 = _22 | _1;
place!(Field::<([i16; 7],)>(Variant(_38.fld3, 1), 0)) = _38.fld5;
_13 = !_17;
_43 = !_22;
_5 = _24.0 as i16;
_37 = _1;
_7 = _30.2 & _38.fld1.2;
_5 = _20.0 >> _17;
_41 = !_43;
_13 = _17 << _5;
_38.fld6 = [_20.0,_20.0,_5,_5,(*_42)];
_44.fld1 = core::ptr::addr_of!(_16);
_39.fld0 = core::ptr::addr_of!(_4);
_25 = [_2,_30.1,_30.1,_2,_38.fld1.1,_38.fld1.1,_30.1];
_16 = _24.0 == _38.fld0.0;
Goto(bb15)
}
bb15 = {
Call(_48 = dump_var(0_usize, 8_usize, Move(_8), 18_usize, Move(_18), 5_usize, Move(_5), 10_usize, Move(_10)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_48 = dump_var(0_usize, 6_usize, Move(_6), 4_usize, Move(_4), 25_usize, Move(_25), 19_usize, Move(_19)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_48 = dump_var(0_usize, 13_usize, Move(_13), 21_usize, Move(_21), 15_usize, Move(_15), 41_usize, Move(_41)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_48 = dump_var(0_usize, 30_usize, Move(_30), 36_usize, Move(_36), 17_usize, Move(_17), 27_usize, Move(_27)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_48 = dump_var(0_usize, 9_usize, Move(_9), 49_usize, _49, 49_usize, _49, 49_usize, _49), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn1(mut _1: i32,mut _2: usize,mut _3: u8,mut _4: i128,mut _5: u32,mut _6: usize,mut _7: i32,mut _8: [i16; 7],mut _9: u64,mut _10: i32,mut _11: bool,mut _12: [i64; 2]) -> u32 {
mir! {
type RET = u32;
let _13: u8;
let _14: f64;
let _15: [u8; 4];
let _16: [i16; 8];
let _17: isize;
let _18: [i16; 7];
let _19: char;
let _20: [i64; 2];
let _21: *const bool;
let _22: [char; 7];
let _23: Adt42;
let _24: u32;
let _25: (i16, f32, [i16; 5]);
let _26: f64;
let _27: [u8; 4];
let _28: char;
let _29: *const &'static i64;
let _30: u8;
let _31: f32;
let _32: isize;
let _33: i64;
let _34: f32;
let _35: *const i8;
let _36: char;
let _37: [i16; 7];
let _38: [i64; 2];
let _39: Adt55;
let _40: u64;
let _41: usize;
let _42: ();
let _43: ();
{
_13 = _3 << _9;
_14 = _9 as f64;
_2 = !_6;
_11 = !false;
_1 = !_7;
_10 = _1 * _1;
_10 = 115636373313662403762346158416992284426_u128 as i32;
RET = !_5;
_12 = [9031087801964737755_i64,(-7851400986322519947_i64)];
_5 = RET ^ RET;
_4 = 18869_u16 as i128;
_11 = false;
_16 = [9451_i16,11254_i16,3561_i16,(-19526_i16),(-22901_i16),5239_i16,19562_i16,12196_i16];
_5 = RET;
Goto(bb1)
}
bb1 = {
_2 = !_6;
Goto(bb2)
}
bb2 = {
_13 = _3;
_10 = !_1;
RET = (-9223372036854775808_isize) as u32;
_10 = _1 | _1;
_1 = !_7;
_9 = 5132864857277548200_u64;
_9 = !8332144590547190966_u64;
_17 = -9223372036854775807_isize;
_7 = -_10;
_9 = 16788002214965685514_u64;
_15 = [_3,_3,_3,_13];
_19 = '\u{8238}';
_3 = _13;
_10 = _7;
_10 = _11 as i32;
_5 = !RET;
_17 = 110853946738865982529884692006068245690_u128 as isize;
_14 = _1 as f64;
_18 = _8;
Goto(bb3)
}
bb3 = {
_13 = !_3;
_10 = _1;
_6 = !_2;
_10 = _7;
_2 = !_6;
_5 = !RET;
_14 = 46627_u16 as f64;
_16 = [(-15110_i16),23262_i16,(-12279_i16),4882_i16,27683_i16,29683_i16,7790_i16,(-15708_i16)];
_18 = _8;
_20 = _12;
Call(_16 = fn2(_10, _9, _6, _3, _10), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_11 = false & false;
_13 = _3;
_19 = '\u{607ac}';
_14 = _6 as f64;
_8 = _18;
_8 = [22977_i16,(-21580_i16),20009_i16,(-8206_i16),(-8439_i16),16635_i16,11637_i16];
_15 = [_13,_13,_3,_13];
_20 = [1093638123842315351_i64,869584018268107637_i64];
_22 = [_19,_19,_19,_19,_19,_19,_19];
_15 = [_13,_3,_3,_13];
_9 = 9348447658408724183_u64;
_10 = _17 as i32;
_6 = _2 >> _7;
_9 = _4 as u64;
_25.0 = (-4061_i16) | 27824_i16;
_18 = [_25.0,_25.0,_25.0,_25.0,_25.0,_25.0,_25.0];
Goto(bb5)
}
bb5 = {
_18 = _8;
_17 = 9223372036854775807_isize;
_1 = _7 << _7;
_11 = !false;
_25.1 = _13 as f32;
_24 = _14 as u32;
_3 = !_13;
_25.0 = _9 as i16;
_1 = _7 - _7;
_25.2 = [_25.0,_25.0,_25.0,_25.0,_25.0];
_1 = _7;
_4 = !163228064824856246876222602651362114964_i128;
_20 = [8651716232601445791_i64,8214882044610370515_i64];
_2 = _6 | _6;
_4 = (-166915656824461551299050479271404085770_i128) & 1250184760614002395453421293998220088_i128;
_25.2 = [_25.0,_25.0,_25.0,_25.0,_25.0];
_4 = -141771545348288119883994825899983020668_i128;
_26 = _14 * _14;
_14 = _26 - _26;
_25.0 = (-1636_i16) - (-17359_i16);
_13 = _3 & _3;
Goto(bb6)
}
bb6 = {
_7 = _1;
_24 = !_5;
RET = _4 as u32;
_13 = _25.1 as u8;
_31 = _5 as f32;
_5 = 5855404751850901131_i64 as u32;
_25.1 = _31 + _31;
_12 = [(-7386414893966576174_i64),(-1058122031440008623_i64)];
_12 = [(-6624987511781900653_i64),3827763906592548853_i64];
_4 = _17 as i128;
_25.1 = 324713481749784421154371555305682400442_u128 as f32;
RET = _5;
_4 = _19 as i128;
_22 = [_19,_19,_19,_19,_19,_19,_19];
Goto(bb7)
}
bb7 = {
RET = _24 + _5;
_6 = !_2;
_27 = _15;
_25.0 = _17 as i16;
Goto(bb8)
}
bb8 = {
_19 = '\u{a582}';
_30 = !_13;
_20 = [1685832208356612398_i64,(-4225755941387466481_i64)];
_25.2 = [_25.0,_25.0,_25.0,_25.0,_25.0];
_22 = [_19,_19,_19,_19,_19,_19,_19];
_26 = -_14;
_20 = _12;
_31 = _25.1;
_15 = [_3,_30,_30,_3];
_31 = _25.1;
_28 = _19;
_21 = core::ptr::addr_of!(_11);
_27 = _15;
_28 = _19;
_22 = [_19,_28,_28,_19,_19,_19,_28];
_19 = _28;
_15 = [_30,_30,_30,_3];
_21 = core::ptr::addr_of!((*_21));
_28 = _19;
_2 = 12939_u16 as usize;
_24 = RET << _6;
_10 = !_7;
Call(_20 = core::intrinsics::transmute(_12), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
_14 = _26 + _26;
_21 = core::ptr::addr_of!((*_21));
_11 = false;
_13 = !_30;
_2 = (-53_i8) as usize;
_30 = _13 >> _10;
Call(_24 = fn19(_14, _19), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_18 = [_25.0,_25.0,_25.0,_25.0,_25.0,_25.0,_25.0];
_12 = _20;
_36 = _28;
_38 = [(-1502646742588303422_i64),(-7434973681737495760_i64)];
_7 = -_10;
_25.0 = (-16391_i16) | (-8749_i16);
_39.fld3.fld0 = (_25.0,);
_27 = _15;
_39.fld4 = !_39.fld3.fld0.0;
_24 = !RET;
Goto(bb11)
}
bb11 = {
_39.fld2 = [_30,_13,_30,_3];
_39.fld3.fld0.0 = !_25.0;
match _17 {
0 => bb10,
1 => bb12,
2 => bb13,
3 => bb14,
9223372036854775807 => bb16,
_ => bb15
}
}
bb12 = {
_13 = !_3;
_10 = _1;
_6 = !_2;
_10 = _7;
_2 = !_6;
_5 = !RET;
_14 = 46627_u16 as f64;
_16 = [(-15110_i16),23262_i16,(-12279_i16),4882_i16,27683_i16,29683_i16,7790_i16,(-15708_i16)];
_18 = _8;
_20 = _12;
Call(_16 = fn2(_10, _9, _6, _3, _10), ReturnTo(bb4), UnwindUnreachable())
}
bb13 = {
_18 = _8;
_17 = 9223372036854775807_isize;
_1 = _7 << _7;
_11 = !false;
_25.1 = _13 as f32;
_24 = _14 as u32;
_3 = !_13;
_25.0 = _9 as i16;
_1 = _7 - _7;
_25.2 = [_25.0,_25.0,_25.0,_25.0,_25.0];
_1 = _7;
_4 = !163228064824856246876222602651362114964_i128;
_20 = [8651716232601445791_i64,8214882044610370515_i64];
_2 = _6 | _6;
_4 = (-166915656824461551299050479271404085770_i128) & 1250184760614002395453421293998220088_i128;
_25.2 = [_25.0,_25.0,_25.0,_25.0,_25.0];
_4 = -141771545348288119883994825899983020668_i128;
_26 = _14 * _14;
_14 = _26 - _26;
_25.0 = (-1636_i16) - (-17359_i16);
_13 = _3 & _3;
Goto(bb6)
}
bb14 = {
_19 = '\u{a582}';
_30 = !_13;
_20 = [1685832208356612398_i64,(-4225755941387466481_i64)];
_25.2 = [_25.0,_25.0,_25.0,_25.0,_25.0];
_22 = [_19,_19,_19,_19,_19,_19,_19];
_26 = -_14;
_20 = _12;
_31 = _25.1;
_15 = [_3,_30,_30,_3];
_31 = _25.1;
_28 = _19;
_21 = core::ptr::addr_of!(_11);
_27 = _15;
_28 = _19;
_22 = [_19,_28,_28,_19,_19,_19,_28];
_19 = _28;
_15 = [_30,_30,_30,_3];
_21 = core::ptr::addr_of!((*_21));
_28 = _19;
_2 = 12939_u16 as usize;
_24 = RET << _6;
_10 = !_7;
Call(_20 = core::intrinsics::transmute(_12), ReturnTo(bb9), UnwindUnreachable())
}
bb15 = {
RET = _24 + _5;
_6 = !_2;
_27 = _15;
_25.0 = _17 as i16;
Goto(bb8)
}
bb16 = {
_30 = _9 as u8;
_39.fld1.fld1.1 = _36;
_12 = _20;
_25.1 = _31;
_33 = 147069814996428121003770572460832724154_u128 as i64;
_39.fld1.fld0 = (_25.1, _5);
_41 = _1 as usize;
_39.fld1.fld6 = _25.2;
_3 = _17 as u8;
_39.fld1.fld0 = (_25.1, RET);
_26 = 12699_u16 as f64;
_4 = (-73_i8) as i128;
_15 = _39.fld2;
_39.fld1.fld5.0 = _8;
Goto(bb17)
}
bb17 = {
Call(_42 = dump_var(1_usize, 28_usize, Move(_28), 27_usize, Move(_27), 24_usize, Move(_24), 22_usize, Move(_22)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_42 = dump_var(1_usize, 2_usize, Move(_2), 5_usize, Move(_5), 18_usize, Move(_18), 17_usize, Move(_17)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_42 = dump_var(1_usize, 30_usize, Move(_30), 15_usize, Move(_15), 19_usize, Move(_19), 6_usize, Move(_6)), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Call(_42 = dump_var(1_usize, 11_usize, Move(_11), 13_usize, Move(_13), 43_usize, _43, 43_usize, _43), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn2(mut _1: i32,mut _2: u64,mut _3: usize,mut _4: u8,mut _5: i32) -> [i16; 8] {
mir! {
type RET = [i16; 8];
let _6: bool;
let _7: isize;
let _8: i128;
let _9: u64;
let _10: [char; 7];
let _11: Adt40;
let _12: (i16, f32, [i16; 5]);
let _13: &'static i64;
let _14: [char; 7];
let _15: (f32, u32);
let _16: Adt51;
let _17: u128;
let _18: char;
let _19: [i16; 8];
let _20: f64;
let _21: ();
let _22: ();
{
_3 = 3_usize | 1_usize;
RET = [(-19438_i16),14900_i16,15043_i16,(-7876_i16),(-21902_i16),10815_i16,(-3012_i16),(-7827_i16)];
_4 = !118_u8;
RET = [(-14381_i16),25267_i16,15482_i16,26454_i16,(-9104_i16),(-25192_i16),898_i16,(-6846_i16)];
_2 = 9630678948895634203_u64 >> _1;
_1 = !_5;
_2 = !442328516932887569_u64;
_4 = 114639777230778985792254091181207118681_u128 as u8;
_1 = _5 + _5;
RET = [21823_i16,(-10346_i16),19889_i16,(-18457_i16),28284_i16,(-14373_i16),(-24960_i16),(-32549_i16)];
_6 = !true;
RET = [(-22152_i16),12337_i16,(-19723_i16),18726_i16,11601_i16,24410_i16,31715_i16,9328_i16];
RET = [27575_i16,6686_i16,3948_i16,18264_i16,(-10623_i16),2179_i16,(-18007_i16),(-27054_i16)];
RET = [31368_i16,(-10972_i16),1167_i16,(-6852_i16),(-13093_i16),(-6939_i16),(-13767_i16),(-1882_i16)];
_5 = -_1;
_6 = false;
_10 = ['\u{780b2}','\u{9fca0}','\u{2aef3}','\u{54e1e}','\u{dd2c0}','\u{78b6e}','\u{27ecc}'];
RET = [(-23528_i16),(-26956_i16),(-15060_i16),(-10130_i16),(-8794_i16),(-6875_i16),(-25742_i16),24985_i16];
_1 = _6 as i32;
Goto(bb1)
}
bb1 = {
_7 = (-75_i8) as isize;
_11.fld2 = 710469235_u32;
_7 = _4 as isize;
_9 = _2;
_6 = !false;
_11.fld0 = ((-12571_i16),);
_10 = ['\u{b2677}','\u{566f0}','\u{f8098}','\u{7af7e}','\u{9e703}','\u{10559d}','\u{6ad86}'];
RET = [_11.fld0.0,_11.fld0.0,_11.fld0.0,_11.fld0.0,_11.fld0.0,_11.fld0.0,_11.fld0.0,_11.fld0.0];
match _11.fld0.0 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
6 => bb8,
340282366920938463463374607431768198885 => bb10,
_ => bb9
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_4 = 124_u8 << _5;
_8 = _4 as i128;
_2 = _9 ^ _9;
_11.fld1 = core::ptr::addr_of!(_6);
Goto(bb11)
}
bb11 = {
_12.1 = 77320833472986787453166403922647176407_u128 as f32;
_11.fld0.0 = 14480_i16;
_5 = _1 | _1;
_3 = 2088873776589944369204490208419044552_u128 as usize;
_15.0 = _7 as f32;
Goto(bb12)
}
bb12 = {
_5 = _1 | _1;
_7 = -(-9223372036854775808_isize);
_10 = ['\u{cf137}','\u{22216}','\u{cccd5}','\u{f8663}','\u{7764d}','\u{3bc7e}','\u{e2725}'];
_17 = 54929943006035117173935313640696550385_u128;
_11.fld1 = core::ptr::addr_of!(_6);
Call(_4 = fn3(_10, _8, _12.1, _8, _2, _8, _15.0, Move(_11), _8, _8, _8), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
_8 = '\u{75114}' as i128;
_14 = ['\u{849db}','\u{382a8}','\u{f467a}','\u{dbef2}','\u{5c710}','\u{5808f}','\u{6bd3d}'];
_11.fld0 = (27210_i16,);
_12.0 = !_11.fld0.0;
_11.fld0 = (_12.0,);
RET = [_12.0,_12.0,_11.fld0.0,_12.0,_12.0,_12.0,_12.0,_12.0];
match _17 {
0 => bb10,
1 => bb11,
2 => bb3,
3 => bb7,
54929943006035117173935313640696550385 => bb15,
_ => bb14
}
}
bb14 = {
Return()
}
bb15 = {
_4 = _2 as u8;
_4 = 167_u8 * 14_u8;
_17 = _4 as u128;
_9 = _2 & _2;
_7 = -(-9223372036854775808_isize);
_8 = (-89036663290442839980389522754662511884_i128);
_20 = _4 as f64;
_19 = [_12.0,_12.0,_12.0,_11.fld0.0,_12.0,_11.fld0.0,_11.fld0.0,_11.fld0.0];
_11.fld0.0 = _5 as i16;
_14 = ['\u{b8ae4}','\u{104dce}','\u{83dca}','\u{8c52}','\u{d68f6}','\u{bcb92}','\u{6c854}'];
_17 = _8 as u128;
_5 = _1;
Goto(bb16)
}
bb16 = {
Call(_21 = dump_var(2_usize, 2_usize, Move(_2), 5_usize, Move(_5), 3_usize, Move(_3), 10_usize, Move(_10)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_21 = dump_var(2_usize, 1_usize, Move(_1), 9_usize, Move(_9), 22_usize, _22, 22_usize, _22), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn3(mut _1: [char; 7],mut _2: i128,mut _3: f32,mut _4: i128,mut _5: u64,mut _6: i128,mut _7: f32,mut _8: Adt40,mut _9: i128,mut _10: i128,mut _11: i128) -> u8 {
mir! {
type RET = u8;
let _12: isize;
let _13: f64;
let _14: *mut [i16; 8];
let _15: Adt44;
let _16: f64;
let _17: (i16,);
let _18: i8;
let _19: f32;
let _20: f32;
let _21: u8;
let _22: [u8; 4];
let _23: Adt44;
let _24: Adt41;
let _25: usize;
let _26: ();
let _27: ();
{
_7 = _3;
_5 = 8034019522962977849_u64;
Call(RET = fn4(_2, _11, _4, _8.fld1, _11, _6, _10, _10, _10, _9, _10, _10, _4, _6, _11, _4), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_6 = _9 * _11;
RET = !99_u8;
_3 = _7;
_5 = 6395897783543519340_u64;
_4 = _10 + _10;
_9 = _4 | _10;
match _8.fld0.0 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
6 => bb8,
14480 => bb10,
_ => bb9
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_1 = ['\u{3c110}','\u{44ff2}','\u{1545f}','\u{aeefb}','\u{26b94}','\u{ad259}','\u{d4834}'];
_2 = _10 * _9;
_2 = _9 | _11;
RET = 83_u8;
RET = 210_u8 & 251_u8;
_12 = 17676703158222522763_usize as isize;
_4 = RET as i128;
_8.fld2 = !677262558_u32;
RET = 137_u8;
_8.fld2 = !1331661894_u32;
_8.fld0.0 = -29529_i16;
_8.fld2 = 2924358976_u32 >> _9;
_9 = _10 | _2;
_2 = _9 - _6;
_6 = _2 * _2;
_5 = !7492851609893149406_u64;
RET = !173_u8;
_3 = (-7947517385114340002_i64) as f32;
_5 = !304630711104079124_u64;
_4 = _2 | _6;
_6 = -_4;
RET = !201_u8;
RET = 73_u8 * 44_u8;
Goto(bb11)
}
bb11 = {
_17 = (_8.fld0.0,);
_17 = _8.fld0;
Goto(bb12)
}
bb12 = {
RET = 233_u8 * 144_u8;
_16 = RET as f64;
_13 = _16 - _16;
_17.0 = _8.fld0.0;
_7 = -_3;
RET = 195_u8;
_4 = _6 ^ _2;
RET = !235_u8;
_13 = -_16;
Goto(bb13)
}
bb13 = {
RET = !219_u8;
_2 = _9 ^ _9;
_8.fld0 = _17;
_16 = _13 + _13;
_8.fld0 = _17;
_12 = !(-65_isize);
_1 = ['\u{187e4}','\u{10954f}','\u{16a5a}','\u{c8610}','\u{cd556}','\u{d3591}','\u{1e56e}'];
_18 = 10237_u16 as i8;
_16 = -_13;
_16 = RET as f64;
_6 = _2;
RET = 209_u8;
_10 = _2 | _4;
_5 = 50196318438698553_i64 as u64;
_17.0 = !_8.fld0.0;
_21 = RET * RET;
_8.fld0 = _17;
_9 = !_4;
RET = _21;
_8.fld0 = _17;
_18 = _5 as i8;
_22 = [_21,_21,RET,_21];
_10 = -_6;
_13 = -_16;
Goto(bb14)
}
bb14 = {
_16 = _13 + _13;
_13 = -_16;
_10 = !_4;
_24.fld0.1 = _3;
_20 = -_24.fld0.1;
_22 = [RET,_21,_21,_21];
_11 = _10;
_20 = _7 - _24.fld0.1;
Goto(bb15)
}
bb15 = {
Call(_26 = dump_var(3_usize, 5_usize, Move(_5), 18_usize, Move(_18), 6_usize, Move(_6), 22_usize, Move(_22)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_26 = dump_var(3_usize, 17_usize, Move(_17), 11_usize, Move(_11), 27_usize, _27, 27_usize, _27), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn4(mut _1: i128,mut _2: i128,mut _3: i128,mut _4: *const bool,mut _5: i128,mut _6: i128,mut _7: i128,mut _8: i128,mut _9: i128,mut _10: i128,mut _11: i128,mut _12: i128,mut _13: i128,mut _14: i128,mut _15: i128,mut _16: i128) -> u8 {
mir! {
type RET = u8;
let _17: isize;
let _18: (i16,);
let _19: (i16,);
let _20: bool;
let _21: i32;
let _22: char;
let _23: [i16; 8];
let _24: [u8; 4];
let _25: *const i8;
let _26: (i16, f32, [i16; 5]);
let _27: i16;
let _28: Adt41;
let _29: bool;
let _30: [char; 7];
let _31: isize;
let _32: [i16; 5];
let _33: u128;
let _34: Adt55;
let _35: f64;
let _36: (f32, u32);
let _37: ();
let _38: ();
{
_2 = -_8;
_3 = _16;
RET = '\u{2d19e}' as u8;
_13 = !_9;
_3 = -_15;
RET = 219_u8 ^ 27_u8;
_17 = !9223372036854775807_isize;
_9 = _14 << _6;
_8 = _6;
_3 = _8;
_15 = !_9;
_9 = _10 ^ _14;
Call(_19.0 = fn5(_9, _15, _3, _9, _3, _9, _3, _5, _14, _15, _7, _2, _9), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_1 = _15 - _12;
_13 = !_9;
_14 = '\u{50c7f}' as i128;
_20 = !false;
_18 = (_19.0,);
_21 = 1704905918_i32;
_9 = _10 - _1;
_14 = _15;
_22 = '\u{106e2e}';
_22 = '\u{58446}';
_4 = core::ptr::addr_of!(_20);
_10 = _17 as i128;
match _21 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
1704905918 => bb7,
_ => bb6
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
_18.0 = -_19.0;
_18 = _19;
_5 = 482065073199771740_i64 as i128;
_9 = _21 as i128;
_7 = _14;
Call(_4 = fn6(_8, _1, _1, _13, _1, _3, _15), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
_14 = _12 + _3;
_13 = _1 & _7;
match _21 {
0 => bb6,
1704905918 => bb10,
_ => bb9
}
}
bb9 = {
_1 = _15 - _12;
_13 = !_9;
_14 = '\u{50c7f}' as i128;
_20 = !false;
_18 = (_19.0,);
_21 = 1704905918_i32;
_9 = _10 - _1;
_14 = _15;
_22 = '\u{106e2e}';
_22 = '\u{58446}';
_4 = core::ptr::addr_of!(_20);
_10 = _17 as i128;
match _21 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
1704905918 => bb7,
_ => bb6
}
}
bb10 = {
_7 = _14 + _15;
_7 = !_1;
_18 = (_19.0,);
_18.0 = _19.0 * _19.0;
_3 = !_1;
_3 = _16 << _6;
RET = 42_i8 as u8;
_18.0 = _19.0;
_9 = _20 as i128;
_9 = -_12;
_11 = !_1;
_5 = _7 << _7;
_16 = _5 - _5;
_17 = 9223372036854775807_isize;
_22 = '\u{1a601}';
_3 = RET as i128;
_20 = true;
_23 = [_19.0,_18.0,_18.0,_18.0,_19.0,_18.0,_18.0,_19.0];
_16 = !_13;
_18.0 = _21 as i16;
_20 = _15 < _5;
_23 = [_19.0,_19.0,_19.0,_19.0,_19.0,_18.0,_19.0,_18.0];
_10 = !_6;
_8 = (-1216677068053875665_i64) as i128;
_23 = [_18.0,_19.0,_19.0,_19.0,_19.0,_18.0,_19.0,_19.0];
_18 = _19;
match _21 {
0 => bb11,
1 => bb12,
2 => bb13,
3 => bb14,
1704905918 => bb16,
_ => bb15
}
}
bb11 = {
_1 = _15 - _12;
_13 = !_9;
_14 = '\u{50c7f}' as i128;
_20 = !false;
_18 = (_19.0,);
_21 = 1704905918_i32;
_9 = _10 - _1;
_14 = _15;
_22 = '\u{106e2e}';
_22 = '\u{58446}';
_4 = core::ptr::addr_of!(_20);
_10 = _17 as i128;
match _21 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
1704905918 => bb7,
_ => bb6
}
}
bb12 = {
_14 = _12 + _3;
_13 = _1 & _7;
match _21 {
0 => bb6,
1704905918 => bb10,
_ => bb9
}
}
bb13 = {
_18.0 = -_19.0;
_18 = _19;
_5 = 482065073199771740_i64 as i128;
_9 = _21 as i128;
_7 = _14;
Call(_4 = fn6(_8, _1, _1, _13, _1, _3, _15), ReturnTo(bb8), UnwindUnreachable())
}
bb14 = {
Return()
}
bb15 = {
Return()
}
bb16 = {
_26.1 = RET as f32;
_26.0 = _1 as i16;
_19 = _18;
_5 = !_12;
_27 = _26.0;
_27 = _26.0;
_7 = _12 >> _14;
_15 = _17 as i128;
_6 = _16 - _16;
_3 = _7;
_28.fld0.0 = _26.0 >> _1;
_26.2 = [_28.fld0.0,_26.0,_28.fld0.0,_28.fld0.0,_28.fld0.0];
_19 = _18;
_29 = !_20;
_34.fld3.fld1 = core::ptr::addr_of!(_29);
_28.fld0.0 = _26.0;
_34.fld5 = _21 + _21;
_20 = !_29;
Goto(bb17)
}
bb17 = {
Call(_37 = dump_var(4_usize, 2_usize, Move(_2), 27_usize, Move(_27), 12_usize, Move(_12), 14_usize, Move(_14)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_37 = dump_var(4_usize, 13_usize, Move(_13), 23_usize, Move(_23), 17_usize, Move(_17), 15_usize, Move(_15)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_37 = dump_var(4_usize, 7_usize, Move(_7), 9_usize, Move(_9), 3_usize, Move(_3), 8_usize, Move(_8)), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn5(mut _1: i128,mut _2: i128,mut _3: i128,mut _4: i128,mut _5: i128,mut _6: i128,mut _7: i128,mut _8: i128,mut _9: i128,mut _10: i128,mut _11: i128,mut _12: i128,mut _13: i128) -> i16 {
mir! {
type RET = i16;
let _14: [char; 2];
let _15: (i16,);
let _16: f64;
let _17: bool;
let _18: char;
let _19: usize;
let _20: [i16; 5];
let _21: isize;
let _22: [char; 7];
let _23: Adt53;
let _24: isize;
let _25: (i128, char, i64);
let _26: u32;
let _27: char;
let _28: *mut &'static i64;
let _29: u16;
let _30: [u8; 4];
let _31: [i16; 7];
let _32: Adt45;
let _33: ([u8; 4], *const u8, usize, i8);
let _34: i64;
let _35: ();
let _36: ();
{
_6 = _4;
_10 = -_13;
_3 = _2;
_10 = !_2;
_14 = ['\u{61a2a}','\u{92b0b}'];
_15 = (28438_i16,);
_5 = _2 + _8;
_6 = !_5;
_2 = _6 >> _3;
_15 = ((-15300_i16),);
_6 = _1;
match _15.0 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb5,
340282366920938463463374607431768196156 => bb7,
_ => bb6
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
_5 = _4;
_9 = (-2117124001_i32) as i128;
_7 = _6;
_16 = (-2117629565_i32) as f64;
_15.0 = (-611_i16) | 25097_i16;
_4 = _7 & _13;
_8 = 73_u8 as i128;
_1 = _13;
_4 = _3;
RET = -_15.0;
_1 = _4;
_1 = 9223372036854775807_isize as i128;
_2 = _10 >> _7;
_15.0 = -RET;
_4 = 10450026237086926190_usize as i128;
Goto(bb8)
}
bb8 = {
_9 = _2 + _3;
_8 = !_9;
_2 = _8;
_12 = _5 & _10;
_10 = _2;
_2 = _9;
_4 = !_7;
_4 = _15.0 as i128;
Goto(bb9)
}
bb9 = {
RET = _15.0;
_17 = !false;
_4 = _10 ^ _5;
_19 = !11818348564550094739_usize;
Goto(bb10)
}
bb10 = {
_9 = _8 - _6;
_3 = _6;
_8 = !_7;
RET = _17 as i16;
_18 = '\u{a4eb6}';
_3 = _12 << _6;
_20 = [_15.0,_15.0,RET,_15.0,_15.0];
_15 = (RET,);
_10 = 4530742372674351594660761211833329673_u128 as i128;
RET = -_15.0;
_19 = !3902678766001192930_usize;
Goto(bb11)
}
bb11 = {
_18 = '\u{25017}';
_12 = !_3;
_12 = _8;
_15 = (RET,);
_5 = _9;
_4 = _5;
RET = -_15.0;
_4 = _12 << _13;
_2 = _16 as i128;
_2 = _3 - _5;
_5 = -_2;
_18 = '\u{ba0da}';
_11 = _9 - _6;
_14 = [_18,_18];
_7 = 10870_u16 as i128;
_21 = _6 as isize;
Goto(bb12)
}
bb12 = {
_25.0 = _4 ^ _4;
_21 = !(-57_isize);
_15 = (RET,);
_26 = !717020526_u32;
_15 = (RET,);
_27 = _18;
_15 = (RET,);
_8 = !_3;
RET = 5_i8 as i16;
_25.0 = !_9;
_26 = _21 as u32;
_30 = [51_u8,89_u8,78_u8,201_u8];
_25.2 = 207338949960071043544867897809555628923_u128 as i64;
_10 = _11;
_16 = 35045_u16 as f64;
_30 = [155_u8,140_u8,33_u8,90_u8];
_25.1 = _27;
_26 = 3466556467_u32;
_5 = _10;
_5 = -_11;
_1 = 110071651665128999344676482599072659249_u128 as i128;
_10 = -_4;
Goto(bb13)
}
bb13 = {
_12 = !_8;
RET = 10_i8 as i16;
match _26 {
0 => bb5,
1 => bb10,
2 => bb14,
3466556467 => bb16,
_ => bb15
}
}
bb14 = {
Return()
}
bb15 = {
Return()
}
bb16 = {
_21 = 108_isize & 9223372036854775807_isize;
_2 = 6089_u16 as i128;
_3 = _5;
_24 = _21;
_2 = -_8;
_2 = _8;
_3 = _15.0 as i128;
_33.2 = _19;
_25.0 = _4;
_16 = _25.2 as f64;
_15.0 = RET;
_33.0 = _30;
_25 = (_6, _18, (-7309603861103785952_i64));
_33.2 = _19;
_22 = [_18,_27,_27,_27,_18,_27,_27];
_15 = (RET,);
Goto(bb17)
}
bb17 = {
Call(_35 = dump_var(5_usize, 20_usize, Move(_20), 9_usize, Move(_9), 19_usize, Move(_19), 24_usize, Move(_24)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_35 = dump_var(5_usize, 4_usize, Move(_4), 27_usize, Move(_27), 30_usize, Move(_30), 17_usize, Move(_17)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_35 = dump_var(5_usize, 3_usize, Move(_3), 10_usize, Move(_10), 5_usize, Move(_5), 25_usize, Move(_25)), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Call(_35 = dump_var(5_usize, 14_usize, Move(_14), 36_usize, _36, 36_usize, _36, 36_usize, _36), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn6(mut _1: i128,mut _2: i128,mut _3: i128,mut _4: i128,mut _5: i128,mut _6: i128,mut _7: i128) -> *const bool {
mir! {
type RET = *const bool;
let _8: i32;
let _9: u32;
let _10: *const i16;
let _11: (i16,);
let _12: usize;
let _13: Adt41;
let _14: u32;
let _15: isize;
let _16: (i128, char, i64);
let _17: char;
let _18: (i128, char, i64);
let _19: [i16; 5];
let _20: i64;
let _21: u64;
let _22: isize;
let _23: (i16,);
let _24: i16;
let _25: &'static i64;
let _26: u32;
let _27: i32;
let _28: isize;
let _29: ();
let _30: ();
{
_2 = 21918_i16 as i128;
_5 = _3;
_3 = false as i128;
_1 = _5 >> _7;
_7 = -_5;
_3 = _4 * _1;
_5 = _7;
_4 = (-9223372036854775808_isize) as i128;
_4 = '\u{1733a}' as i128;
_6 = (-23100_i16) as i128;
_4 = 248_u8 as i128;
_6 = _5 ^ _1;
_7 = _3;
_3 = _6 ^ _1;
_1 = !_3;
_5 = 13533639860654107066_usize as i128;
_6 = 18050838094107320088_usize as i128;
_3 = false as i128;
_8 = !(-385639272_i32);
_1 = _7 + _7;
_8 = 6382150217902166845_u64 as i32;
Goto(bb1)
}
bb1 = {
_5 = -_7;
_6 = _1 << _5;
_8 = 216200384_i32;
_1 = 143_u8 as i128;
_2 = !_7;
_1 = 9223372036854775807_isize as i128;
_6 = _2 + _2;
_8 = 1632390225_i32 - (-533456960_i32);
_5 = _2 + _7;
_5 = -_7;
_3 = !_5;
_3 = !_7;
_4 = _5 - _5;
_5 = _4 | _6;
_5 = _2;
Call(RET = fn7(_4, _4, _8, _6), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_4 = !_2;
_1 = 58_u8 as i128;
_7 = _6;
_1 = _3 * _6;
_8 = 441832208_i32 & (-287706602_i32);
_2 = -_4;
_5 = _3 ^ _2;
_2 = _7 * _7;
_8 = !1099555859_i32;
_3 = 4247_i16 as i128;
_5 = -_2;
_6 = !_4;
_2 = !_5;
_5 = -_1;
_3 = 3981255221_u32 as i128;
_9 = 16658773676634616789_u64 as u32;
_3 = !_1;
_4 = -_2;
_3 = _5;
_9 = !4275585875_u32;
_11.0 = 18290_i16 - (-3917_i16);
_5 = -_2;
_1 = _7 & _4;
_4 = 5094901216560131226_usize as i128;
_6 = -_1;
_7 = _3 - _6;
_3 = true as i128;
_6 = _2;
Goto(bb3)
}
bb3 = {
_2 = 214_u8 as i128;
_10 = core::ptr::addr_of!(_11.0);
_1 = _4;
_8 = 9223372036854775807_isize as i32;
_11.0 = _8 as i16;
_11.0 = -18415_i16;
Call(_6 = fn8(_5, _7, _5, _5, _5, _1, _5, _5, _7, _7, _7), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_12 = !18324409904179332747_usize;
_12 = _8 as usize;
_7 = _5 << _5;
Call(_11.0 = core::intrinsics::bswap((-7721_i16)), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
_13.fld0.1 = 74399978667156713381995948655267036408_u128 as f32;
_13.fld0.0 = 212953677749266840367447540331786615489_u128 as i16;
_13.fld0.2 = [(*_10),_13.fld0.0,(*_10),_13.fld0.0,_13.fld0.0];
_15 = 15_isize;
_14 = !_9;
_1 = _6;
_3 = _5;
_11.0 = 82_i8 as i16;
_1 = _7;
_7 = _6 ^ _3;
_5 = _6;
_11 = (_13.fld0.0,);
_8 = -(-630755560_i32);
_7 = _8 as i128;
_7 = _6 >> _1;
_13.fld0.0 = (*_10);
_12 = !6383700894087023103_usize;
_14 = !_9;
match _15 {
0 => bb6,
1 => bb7,
2 => bb8,
15 => bb10,
_ => bb9
}
}
bb6 = {
_12 = !18324409904179332747_usize;
_12 = _8 as usize;
_7 = _5 << _5;
Call(_11.0 = core::intrinsics::bswap((-7721_i16)), ReturnTo(bb5), UnwindUnreachable())
}
bb7 = {
_2 = 214_u8 as i128;
_10 = core::ptr::addr_of!(_11.0);
_1 = _4;
_8 = 9223372036854775807_isize as i32;
_11.0 = _8 as i16;
_11.0 = -18415_i16;
Call(_6 = fn8(_5, _7, _5, _5, _5, _1, _5, _5, _7, _7, _7), ReturnTo(bb4), UnwindUnreachable())
}
bb8 = {
_4 = !_2;
_1 = 58_u8 as i128;
_7 = _6;
_1 = _3 * _6;
_8 = 441832208_i32 & (-287706602_i32);
_2 = -_4;
_5 = _3 ^ _2;
_2 = _7 * _7;
_8 = !1099555859_i32;
_3 = 4247_i16 as i128;
_5 = -_2;
_6 = !_4;
_2 = !_5;
_5 = -_1;
_3 = 3981255221_u32 as i128;
_9 = 16658773676634616789_u64 as u32;
_3 = !_1;
_4 = -_2;
_3 = _5;
_9 = !4275585875_u32;
_11.0 = 18290_i16 - (-3917_i16);
_5 = -_2;
_1 = _7 & _4;
_4 = 5094901216560131226_usize as i128;
_6 = -_1;
_7 = _3 - _6;
_3 = true as i128;
_6 = _2;
Goto(bb3)
}
bb9 = {
_5 = -_7;
_6 = _1 << _5;
_8 = 216200384_i32;
_1 = 143_u8 as i128;
_2 = !_7;
_1 = 9223372036854775807_isize as i128;
_6 = _2 + _2;
_8 = 1632390225_i32 - (-533456960_i32);
_5 = _2 + _7;
_5 = -_7;
_3 = !_5;
_3 = !_7;
_4 = _5 - _5;
_5 = _4 | _6;
_5 = _2;
Call(RET = fn7(_4, _4, _8, _6), ReturnTo(bb2), UnwindUnreachable())
}
bb10 = {
_16.0 = 11077167740203500127_u64 as i128;
_16.2 = (-2692249076699383611_i64) << _5;
_3 = _14 as i128;
_5 = _16.0 >> _16.2;
_7 = _5 ^ _6;
_2 = 3_i8 as i128;
_9 = _8 as u32;
Call(_17 = fn9(_6, _1, _4, _1, _5, _7, _6), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_16 = (_2, _17, (-1687005976814253669_i64));
_14 = _9;
_14 = _9;
_5 = true as i128;
_18 = (_7, _16.1, _16.2);
_13.fld0.0 = 2918372047386320885_u64 as i16;
_7 = (-99_i8) as i128;
_13.fld0.1 = _9 as f32;
_12 = 8438985799455879576_usize + 16143768908252552767_usize;
match _16.2 {
340282366920938463461687601454953957787 => bb12,
_ => bb9
}
}
bb12 = {
_18 = (_1, _17, _16.2);
_4 = _18.0 ^ _1;
_23.0 = (*_10) >> _6;
_7 = -_6;
_16 = _18;
_11 = (_23.0,);
_19 = [(*_10),(*_10),_11.0,_23.0,(*_10)];
_20 = -_18.2;
_22 = !_15;
_20 = -_18.2;
_26 = _9;
Goto(bb13)
}
bb13 = {
_9 = _20 as u32;
_16 = _18;
_21 = !3353487840255366086_u64;
match _15 {
0 => bb14,
1 => bb15,
2 => bb16,
3 => bb17,
4 => bb18,
5 => bb19,
6 => bb20,
15 => bb22,
_ => bb21
}
}
bb14 = {
_18 = (_1, _17, _16.2);
_4 = _18.0 ^ _1;
_23.0 = (*_10) >> _6;
_7 = -_6;
_16 = _18;
_11 = (_23.0,);
_19 = [(*_10),(*_10),_11.0,_23.0,(*_10)];
_20 = -_18.2;
_22 = !_15;
_20 = -_18.2;
_26 = _9;
Goto(bb13)
}
bb15 = {
_16 = (_2, _17, (-1687005976814253669_i64));
_14 = _9;
_14 = _9;
_5 = true as i128;
_18 = (_7, _16.1, _16.2);
_13.fld0.0 = 2918372047386320885_u64 as i16;
_7 = (-99_i8) as i128;
_13.fld0.1 = _9 as f32;
_12 = 8438985799455879576_usize + 16143768908252552767_usize;
match _16.2 {
340282366920938463461687601454953957787 => bb12,
_ => bb9
}
}
bb16 = {
_16.0 = 11077167740203500127_u64 as i128;
_16.2 = (-2692249076699383611_i64) << _5;
_3 = _14 as i128;
_5 = _16.0 >> _16.2;
_7 = _5 ^ _6;
_2 = 3_i8 as i128;
_9 = _8 as u32;
Call(_17 = fn9(_6, _1, _4, _1, _5, _7, _6), ReturnTo(bb11), UnwindUnreachable())
}
bb17 = {
_4 = !_2;
_1 = 58_u8 as i128;
_7 = _6;
_1 = _3 * _6;
_8 = 441832208_i32 & (-287706602_i32);
_2 = -_4;
_5 = _3 ^ _2;
_2 = _7 * _7;
_8 = !1099555859_i32;
_3 = 4247_i16 as i128;
_5 = -_2;
_6 = !_4;
_2 = !_5;
_5 = -_1;
_3 = 3981255221_u32 as i128;
_9 = 16658773676634616789_u64 as u32;
_3 = !_1;
_4 = -_2;
_3 = _5;
_9 = !4275585875_u32;
_11.0 = 18290_i16 - (-3917_i16);
_5 = -_2;
_1 = _7 & _4;
_4 = 5094901216560131226_usize as i128;
_6 = -_1;
_7 = _3 - _6;
_3 = true as i128;
_6 = _2;
Goto(bb3)
}
bb18 = {
_4 = !_2;
_1 = 58_u8 as i128;
_7 = _6;
_1 = _3 * _6;
_8 = 441832208_i32 & (-287706602_i32);
_2 = -_4;
_5 = _3 ^ _2;
_2 = _7 * _7;
_8 = !1099555859_i32;
_3 = 4247_i16 as i128;
_5 = -_2;
_6 = !_4;
_2 = !_5;
_5 = -_1;
_3 = 3981255221_u32 as i128;
_9 = 16658773676634616789_u64 as u32;
_3 = !_1;
_4 = -_2;
_3 = _5;
_9 = !4275585875_u32;
_11.0 = 18290_i16 - (-3917_i16);
_5 = -_2;
_1 = _7 & _4;
_4 = 5094901216560131226_usize as i128;
_6 = -_1;
_7 = _3 - _6;
_3 = true as i128;
_6 = _2;
Goto(bb3)
}
bb19 = {
_5 = -_7;
_6 = _1 << _5;
_8 = 216200384_i32;
_1 = 143_u8 as i128;
_2 = !_7;
_1 = 9223372036854775807_isize as i128;
_6 = _2 + _2;
_8 = 1632390225_i32 - (-533456960_i32);
_5 = _2 + _7;
_5 = -_7;
_3 = !_5;
_3 = !_7;
_4 = _5 - _5;
_5 = _4 | _6;
_5 = _2;
Call(RET = fn7(_4, _4, _8, _6), ReturnTo(bb2), UnwindUnreachable())
}
bb20 = {
_12 = !18324409904179332747_usize;
_12 = _8 as usize;
_7 = _5 << _5;
Call(_11.0 = core::intrinsics::bswap((-7721_i16)), ReturnTo(bb5), UnwindUnreachable())
}
bb21 = {
_13.fld0.1 = 74399978667156713381995948655267036408_u128 as f32;
_13.fld0.0 = 212953677749266840367447540331786615489_u128 as i16;
_13.fld0.2 = [(*_10),_13.fld0.0,(*_10),_13.fld0.0,_13.fld0.0];
_15 = 15_isize;
_14 = !_9;
_1 = _6;
_3 = _5;
_11.0 = 82_i8 as i16;
_1 = _7;
_7 = _6 ^ _3;
_5 = _6;
_11 = (_13.fld0.0,);
_8 = -(-630755560_i32);
_7 = _8 as i128;
_7 = _6 >> _1;
_13.fld0.0 = (*_10);
_12 = !6383700894087023103_usize;
_14 = !_9;
match _15 {
0 => bb6,
1 => bb7,
2 => bb8,
15 => bb10,
_ => bb9
}
}
bb22 = {
_26 = !_9;
Goto(bb23)
}
bb23 = {
Call(_29 = dump_var(6_usize, 22_usize, Move(_22), 4_usize, Move(_4), 12_usize, Move(_12), 9_usize, Move(_9)), ReturnTo(bb24), UnwindUnreachable())
}
bb24 = {
Call(_29 = dump_var(6_usize, 1_usize, Move(_1), 2_usize, Move(_2), 23_usize, Move(_23), 15_usize, Move(_15)), ReturnTo(bb25), UnwindUnreachable())
}
bb25 = {
Call(_29 = dump_var(6_usize, 21_usize, Move(_21), 5_usize, Move(_5), 19_usize, Move(_19), 30_usize, _30), ReturnTo(bb26), UnwindUnreachable())
}
bb26 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn7(mut _1: i128,mut _2: i128,mut _3: i32,mut _4: i128) -> *const bool {
mir! {
type RET = *const bool;
let _5: u128;
let _6: [u8; 4];
let _7: *const i16;
let _8: bool;
let _9: u128;
let _10: Adt54;
let _11: (i16,);
let _12: (f32, u32);
let _13: ();
let _14: ();
{
_2 = -_4;
_3 = 134903461577882263914926782116367413052_u128 as i32;
_6 = [79_u8,205_u8,201_u8,236_u8];
Goto(bb1)
}
bb1 = {
_5 = 242263270272999293452446581074595788826_u128;
_6 = [146_u8,5_u8,60_u8,195_u8];
_2 = _1 ^ _1;
_3 = (-1543678297_i32) - 472479040_i32;
_4 = !_2;
_5 = !267741823044108717255937454964947678215_u128;
_4 = _1;
RET = core::ptr::addr_of!(_8);
_1 = -_4;
_8 = !false;
RET = core::ptr::addr_of!((*RET));
_9 = _3 as u128;
_4 = !_1;
_4 = 49767_u16 as i128;
Goto(bb2)
}
bb2 = {
_10.fld1.0 = _3 as i128;
_1 = _2;
_10.fld6 = [23791_i16,(-7197_i16),(-31239_i16),19394_i16,(-20885_i16)];
Goto(bb3)
}
bb3 = {
_5 = _9 + _9;
_10.fld1.1 = '\u{5ab58}';
_10.fld1.1 = '\u{75836}';
_10.fld5.0 = [7557_i16,8719_i16,(-4357_i16),12097_i16,(-5180_i16),30746_i16,(-9966_i16)];
_4 = _2;
_1 = 1766188133_u32 as i128;
_11.0 = 2090938099_u32 as i16;
_10.fld0.0 = 20966078036583795_i64 as f32;
_11 = (13248_i16,);
_4 = _2;
Goto(bb4)
}
bb4 = {
_10.fld3 = Adt50::Variant1 { fld0: _10.fld5 };
_12 = (_10.fld0.0, 243628737_u32);
_10.fld1.2 = -(-8730069789732035479_i64);
match _11.0 {
0 => bb5,
1 => bb6,
2 => bb7,
3 => bb8,
4 => bb9,
13248 => bb11,
_ => bb10
}
}
bb5 = {
_5 = _9 + _9;
_10.fld1.1 = '\u{5ab58}';
_10.fld1.1 = '\u{75836}';
_10.fld5.0 = [7557_i16,8719_i16,(-4357_i16),12097_i16,(-5180_i16),30746_i16,(-9966_i16)];
_4 = _2;
_1 = 1766188133_u32 as i128;
_11.0 = 2090938099_u32 as i16;
_10.fld0.0 = 20966078036583795_i64 as f32;
_11 = (13248_i16,);
_4 = _2;
Goto(bb4)
}
bb6 = {
_10.fld1.0 = _3 as i128;
_1 = _2;
_10.fld6 = [23791_i16,(-7197_i16),(-31239_i16),19394_i16,(-20885_i16)];
Goto(bb3)
}
bb7 = {
_5 = 242263270272999293452446581074595788826_u128;
_6 = [146_u8,5_u8,60_u8,195_u8];
_2 = _1 ^ _1;
_3 = (-1543678297_i32) - 472479040_i32;
_4 = !_2;
_5 = !267741823044108717255937454964947678215_u128;
_4 = _1;
RET = core::ptr::addr_of!(_8);
_1 = -_4;
_8 = !false;
RET = core::ptr::addr_of!((*RET));
_9 = _3 as u128;
_4 = !_1;
_4 = 49767_u16 as i128;
Goto(bb2)
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
_10.fld0 = (_12.0, _12.1);
_1 = _4;
_11 = (10692_i16,);
_11.0 = 23965_i16 | 13618_i16;
_1 = _4 >> _4;
_4 = (-27_isize) as i128;
_11.0 = (-11414_i16) * (-12757_i16);
_3 = (-814730658_i32);
SetDiscriminant(_10.fld3, 2);
place!(Field::<Adt43>(Variant(_10.fld3, 2), 5)).fld1 = 17921335784033372498_u64 as f64;
_6 = [239_u8,40_u8,12_u8,253_u8];
RET = core::ptr::addr_of!((*RET));
place!(Field::<Adt43>(Variant(_10.fld3, 2), 5)).fld3.1 = -_10.fld0.0;
place!(Field::<Adt43>(Variant(_10.fld3, 2), 5)).fld4.0 = _6;
_5 = 40_i8 as u128;
place!(Field::<i8>(Variant(_10.fld3, 2), 3)) = 3_i8;
place!(Field::<Adt43>(Variant(_10.fld3, 2), 5)).fld3 = (_11.0, _10.fld0.0, _10.fld6);
place!(Field::<Adt43>(Variant(_10.fld3, 2), 5)).fld3.2 = _10.fld6;
RET = core::ptr::addr_of!((*RET));
place!(Field::<(i128, char, i64)>(Variant(_10.fld3, 2), 6)).0 = _1 - _2;
match _3 {
0 => bb12,
1 => bb13,
340282366920938463463374607430953480798 => bb15,
_ => bb14
}
}
bb12 = {
Return()
}
bb13 = {
_5 = _9 + _9;
_10.fld1.1 = '\u{5ab58}';
_10.fld1.1 = '\u{75836}';
_10.fld5.0 = [7557_i16,8719_i16,(-4357_i16),12097_i16,(-5180_i16),30746_i16,(-9966_i16)];
_4 = _2;
_1 = 1766188133_u32 as i128;
_11.0 = 2090938099_u32 as i16;
_10.fld0.0 = 20966078036583795_i64 as f32;
_11 = (13248_i16,);
_4 = _2;
Goto(bb4)
}
bb14 = {
_10.fld1.0 = _3 as i128;
_1 = _2;
_10.fld6 = [23791_i16,(-7197_i16),(-31239_i16),19394_i16,(-20885_i16)];
Goto(bb3)
}
bb15 = {
place!(Field::<Adt41>(Variant(_10.fld3, 2), 0)).fld0.2 = Field::<Adt43>(Variant(_10.fld3, 2), 5).fld3.2;
Goto(bb16)
}
bb16 = {
Call(_13 = dump_var(7_usize, 1_usize, Move(_1), 6_usize, Move(_6), 9_usize, Move(_9), 3_usize, Move(_3)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn8(mut _1: i128,mut _2: i128,mut _3: i128,mut _4: i128,mut _5: i128,mut _6: i128,mut _7: i128,mut _8: i128,mut _9: i128,mut _10: i128,mut _11: i128) -> i128 {
mir! {
type RET = i128;
let _12: isize;
let _13: Adt52;
let _14: isize;
let _15: Adt40;
let _16: Adt41;
let _17: (f32, u32);
let _18: ();
let _19: ();
{
RET = -_5;
_10 = _4;
_12 = -(-25_isize);
_3 = _5;
_15.fld0.0 = (-32688_i16) | 24290_i16;
_2 = !_11;
_8 = !_2;
_7 = RET;
_15.fld2 = true as u32;
RET = _15.fld0.0 as i128;
_15.fld0 = (9880_i16,);
_6 = -_11;
_10 = _5;
Goto(bb1)
}
bb1 = {
_10 = _6 << _9;
_16.fld0.1 = _15.fld0.0 as f32;
_5 = 12864946265330607304_usize as i128;
_12 = 9223372036854775807_isize;
_7 = -_3;
_15.fld0.0 = -(-29246_i16);
_17.0 = -_16.fld0.1;
RET = _15.fld2 as i128;
_11 = -_10;
RET = !_9;
_16.fld0.1 = 1_usize as f32;
_17 = (_16.fld0.1, _15.fld2);
_14 = _12 + _12;
Goto(bb2)
}
bb2 = {
Call(_18 = dump_var(8_usize, 14_usize, Move(_14), 3_usize, Move(_3), 2_usize, Move(_2), 9_usize, Move(_9)), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Call(_18 = dump_var(8_usize, 1_usize, Move(_1), 11_usize, Move(_11), 19_usize, _19, 19_usize, _19), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn9(mut _1: i128,mut _2: i128,mut _3: i128,mut _4: i128,mut _5: i128,mut _6: i128,mut _7: i128) -> char {
mir! {
type RET = char;
let _8: Adt45;
let _9: i32;
let _10: bool;
let _11: Adt55;
let _12: [i16; 7];
let _13: char;
let _14: Adt51;
let _15: (f32, u32);
let _16: (f32, u32);
let _17: isize;
let _18: u16;
let _19: f64;
let _20: Adt55;
let _21: Adt43;
let _22: [char; 7];
let _23: bool;
let _24: Adt45;
let _25: isize;
let _26: (i128, char, i64);
let _27: u8;
let _28: isize;
let _29: ([u8; 4], *const u8, usize, i8);
let _30: f64;
let _31: bool;
let _32: ([i16; 7],);
let _33: Adt56;
let _34: f64;
let _35: [u8; 4];
let _36: char;
let _37: isize;
let _38: u32;
let _39: isize;
let _40: i32;
let _41: ();
let _42: ();
{
_1 = (-3974545677929397393_i64) as i128;
_3 = _2 >> _7;
RET = '\u{5223b}';
_2 = -_4;
_5 = _4 & _2;
_4 = 11731_u16 as i128;
_2 = _6;
Goto(bb1)
}
bb1 = {
_5 = !_6;
_7 = _3;
_9 = 2081028823_i32 << _3;
RET = '\u{fff9}';
_11.fld1.fld5.0 = [(-11683_i16),(-1311_i16),(-18798_i16),(-174_i16),(-8211_i16),(-22954_i16),19694_i16];
_10 = false;
_11.fld3.fld0.0 = 9021_i16;
_11.fld1.fld1.1 = RET;
_7 = _3;
_11.fld1.fld1.2 = !(-92836140881171726_i64);
_11.fld1.fld1.0 = 771634706_u32 as i128;
_11.fld3.fld2 = 3169862576_u32;
_11.fld3.fld2 = RET as u32;
_11.fld2 = [172_u8,217_u8,20_u8,139_u8];
_11.fld6 = 1_usize as i64;
_11.fld0 = [_11.fld3.fld0.0,_11.fld3.fld0.0,_11.fld3.fld0.0,_11.fld3.fld0.0,_11.fld3.fld0.0];
_11.fld0 = [_11.fld3.fld0.0,_11.fld3.fld0.0,_11.fld3.fld0.0,_11.fld3.fld0.0,_11.fld3.fld0.0];
_11.fld1.fld1.0 = 17207864811614208557411972762391005652_u128 as i128;
_11.fld1.fld6 = [_11.fld3.fld0.0,_11.fld3.fld0.0,_11.fld3.fld0.0,_11.fld3.fld0.0,_11.fld3.fld0.0];
match _11.fld3.fld0.0 {
0 => bb2,
9021 => bb4,
_ => bb3
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
_11.fld1.fld0.0 = 21806579312853314805691635834455604072_u128 as f32;
_11.fld1.fld0.0 = _11.fld3.fld0.0 as f32;
_10 = !true;
_2 = 26199_u16 as i128;
_11.fld1.fld0.0 = _5 as f32;
_11.fld2 = [44_u8,155_u8,171_u8,175_u8];
_1 = _5 >> _6;
_3 = _1 * _7;
_6 = _7;
_5 = !_7;
_11.fld1.fld0.0 = 18313808125859368263_u64 as f32;
_9 = (-41190462_i32) | (-464485877_i32);
_11.fld1.fld0.1 = 44831_u16 as u32;
_13 = RET;
_6 = _3;
_1 = _3 | _3;
_6 = _11.fld1.fld0.0 as i128;
_2 = 69717464957440990603579462317169306632_u128 as i128;
_2 = -_3;
_11.fld1.fld1.0 = _3 ^ _7;
_15.1 = _11.fld3.fld2 >> _3;
_11.fld1.fld5.0 = [_11.fld3.fld0.0,_11.fld3.fld0.0,_11.fld3.fld0.0,_11.fld3.fld0.0,_11.fld3.fld0.0,_11.fld3.fld0.0,_11.fld3.fld0.0];
_11.fld1.fld6 = _11.fld0;
_11.fld4 = _11.fld3.fld0.0;
_9 = -94862831_i32;
_11.fld1.fld0.0 = 102_u8 as f32;
Goto(bb5)
}
bb5 = {
RET = _13;
_15.1 = _11.fld3.fld2;
_1 = _3;
_11.fld3.fld0.0 = _11.fld4 ^ _11.fld4;
_11.fld3.fld2 = !_11.fld1.fld0.1;
_1 = _2 * _2;
_10 = !false;
_5 = _3 - _2;
_11.fld1.fld5.0 = [_11.fld3.fld0.0,_11.fld3.fld0.0,_11.fld3.fld0.0,_11.fld3.fld0.0,_11.fld3.fld0.0,_11.fld3.fld0.0,_11.fld3.fld0.0];
_7 = _1;
_11.fld5 = 9223372036854775807_isize as i32;
_15.0 = _11.fld1.fld1.0 as f32;
_17 = 85_i8 as isize;
_2 = 13858523603375275483_u64 as i128;
_15 = (_11.fld1.fld0.0, _11.fld3.fld2);
_18 = 25007_u16;
_5 = _1;
_11.fld1.fld1.2 = -_11.fld6;
_20.fld3.fld0 = (_11.fld4,);
_20.fld4 = _11.fld3.fld0.0 >> _3;
_20.fld1.fld1 = (_7, RET, _11.fld6);
_12 = _11.fld1.fld5.0;
Goto(bb6)
}
bb6 = {
_10 = false & true;
_20.fld1.fld0.1 = _15.1;
_21.fld3.1 = _11.fld1.fld0.0 + _11.fld1.fld0.0;
_21.fld3.2 = _11.fld0;
_16 = _11.fld1.fld0;
_20.fld1.fld5.0 = [_20.fld4,_20.fld4,_20.fld4,_20.fld4,_20.fld4,_20.fld4,_20.fld4];
_21.fld2.1 = _20.fld1.fld1.1;
_20.fld1.fld1.1 = _13;
_21.fld2.0 = _7;
_21.fld2.0 = _3 - _7;
_21.fld3 = (_20.fld4, _16.0, _11.fld0);
_11.fld3.fld2 = _16.1;
_11.fld3.fld2 = 142_u8 as u32;
_11.fld1.fld0 = _15;
_21.fld0.0 = -_20.fld4;
_11.fld1.fld0.0 = _15.0;
_11.fld3.fld2 = !_16.1;
_21.fld4.3 = (-112_i8) | 104_i8;
_20.fld1.fld1.1 = _11.fld1.fld1.1;
_11.fld6 = _11.fld1.fld1.2;
_11.fld1.fld1.2 = _20.fld1.fld1.2;
_21.fld6 = !_20.fld1.fld1.2;
_20.fld6 = _21.fld6;
_16.1 = _15.1 * _15.1;
_20.fld3.fld2 = !_16.1;
match _20.fld3.fld0.0 {
0 => bb1,
9021 => bb8,
_ => bb7
}
}
bb7 = {
_11.fld1.fld0.0 = 21806579312853314805691635834455604072_u128 as f32;
_11.fld1.fld0.0 = _11.fld3.fld0.0 as f32;
_10 = !true;
_2 = 26199_u16 as i128;
_11.fld1.fld0.0 = _5 as f32;
_11.fld2 = [44_u8,155_u8,171_u8,175_u8];
_1 = _5 >> _6;
_3 = _1 * _7;
_6 = _7;
_5 = !_7;
_11.fld1.fld0.0 = 18313808125859368263_u64 as f32;
_9 = (-41190462_i32) | (-464485877_i32);
_11.fld1.fld0.1 = 44831_u16 as u32;
_13 = RET;
_6 = _3;
_1 = _3 | _3;
_6 = _11.fld1.fld0.0 as i128;
_2 = 69717464957440990603579462317169306632_u128 as i128;
_2 = -_3;
_11.fld1.fld1.0 = _3 ^ _7;
_15.1 = _11.fld3.fld2 >> _3;
_11.fld1.fld5.0 = [_11.fld3.fld0.0,_11.fld3.fld0.0,_11.fld3.fld0.0,_11.fld3.fld0.0,_11.fld3.fld0.0,_11.fld3.fld0.0,_11.fld3.fld0.0];
_11.fld1.fld6 = _11.fld0;
_11.fld4 = _11.fld3.fld0.0;
_9 = -94862831_i32;
_11.fld1.fld0.0 = 102_u8 as f32;
Goto(bb5)
}
bb8 = {
_11.fld3.fld1 = core::ptr::addr_of!(_10);
_21.fld2 = (_20.fld1.fld1.0, _13, _20.fld1.fld1.2);
_20.fld3.fld1 = core::ptr::addr_of!(_23);
RET = _21.fld2.1;
_21.fld4.2 = !9362447541801559334_usize;
_11.fld2 = [101_u8,144_u8,196_u8,71_u8];
_20.fld1.fld0.1 = _21.fld0.0 as u32;
_27 = !134_u8;
_11.fld1.fld1 = (_20.fld1.fld1.0, _13, _21.fld6);
match _20.fld3.fld0.0 {
0 => bb1,
1 => bb7,
2 => bb3,
3 => bb4,
4 => bb5,
9021 => bb9,
_ => bb6
}
}
bb9 = {
_21.fld3.2 = _11.fld1.fld6;
_21.fld3.0 = !_21.fld0.0;
_21.fld1 = 247876876969735247201961707544261976230_u128 as f64;
_26 = (_20.fld1.fld1.0, _13, _21.fld2.2);
_11.fld1.fld5 = _20.fld1.fld5;
_11.fld1.fld1.0 = -_3;
_3 = -_20.fld1.fld1.0;
_20.fld3.fld2 = !_20.fld1.fld0.1;
_19 = -_21.fld1;
_16.1 = !_20.fld3.fld2;
_23 = _10;
_29.0 = _11.fld2;
_2 = _21.fld4.2 as i128;
match _18 {
0 => bb6,
1 => bb7,
2 => bb5,
25007 => bb10,
_ => bb4
}
}
bb10 = {
_21.fld6 = _11.fld1.fld1.2 & _11.fld1.fld1.2;
_25 = !_17;
_20.fld1.fld6 = _11.fld0;
_11.fld1.fld1.2 = _21.fld0.0 as i64;
_20.fld1.fld1.0 = _7;
_30 = _21.fld3.1 as f64;
_6 = _5 ^ _20.fld1.fld1.0;
_15.1 = !_20.fld3.fld2;
_26 = _20.fld1.fld1;
_20.fld2 = _29.0;
Call(_21.fld0.0 = fn10(_11.fld1.fld5.0, _20.fld2, _11.fld1.fld1, Move(_20.fld3), _11.fld1.fld5.0, _20.fld1.fld5, _26.0, _26.0), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_21.fld4.2 = 6_usize ^ 4110320262424495649_usize;
_29.1 = core::ptr::addr_of!(_27);
_32.0 = [_21.fld3.0,_21.fld0.0,_21.fld3.0,_21.fld0.0,_20.fld4,_21.fld0.0,_21.fld0.0];
_32 = _20.fld1.fld5;
_29.2 = _21.fld4.2;
_20.fld1.fld1.0 = !_26.0;
_22 = [_21.fld2.1,_13,_21.fld2.1,_21.fld2.1,_26.1,_20.fld1.fld1.1,_26.1];
_21.fld5 = core::ptr::addr_of!(_21.fld4.3);
_20.fld1.fld0.1 = _15.1 + _16.1;
_17 = !_25;
_20.fld4 = -_21.fld3.0;
_3 = _11.fld1.fld1.2 as i128;
_28 = !_25;
_20.fld3.fld1 = core::ptr::addr_of!(_23);
_37 = _21.fld4.2 as isize;
_35 = [_27,_27,_27,_27];
_28 = !_25;
_20.fld1.fld3 = Adt50::Variant1 { fld0: _32 };
Call(_22 = fn15(_16.1, Field::<([i16; 7],)>(Variant(_20.fld1.fld3, 1), 0).0, _21.fld0.0, _16.1, _21.fld3, _3, _20.fld1.fld5, _26, _20.fld1.fld0.1, _20.fld1.fld5), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
_5 = _1;
place!(Field::<([i16; 7],)>(Variant(_20.fld1.fld3, 1), 0)).0 = _20.fld1.fld5.0;
_20.fld1.fld6 = [_20.fld4,_21.fld0.0,_20.fld4,_21.fld3.0,_21.fld0.0];
_11.fld1.fld1.2 = _21.fld4.3 as i64;
_9 = _11.fld5 ^ _11.fld5;
match _11.fld4 {
0 => bb4,
1 => bb5,
2 => bb13,
3 => bb14,
4 => bb15,
5 => bb16,
9021 => bb18,
_ => bb17
}
}
bb13 = {
_10 = false & true;
_20.fld1.fld0.1 = _15.1;
_21.fld3.1 = _11.fld1.fld0.0 + _11.fld1.fld0.0;
_21.fld3.2 = _11.fld0;
_16 = _11.fld1.fld0;
_20.fld1.fld5.0 = [_20.fld4,_20.fld4,_20.fld4,_20.fld4,_20.fld4,_20.fld4,_20.fld4];
_21.fld2.1 = _20.fld1.fld1.1;
_20.fld1.fld1.1 = _13;
_21.fld2.0 = _7;
_21.fld2.0 = _3 - _7;
_21.fld3 = (_20.fld4, _16.0, _11.fld0);
_11.fld3.fld2 = _16.1;
_11.fld3.fld2 = 142_u8 as u32;
_11.fld1.fld0 = _15;
_21.fld0.0 = -_20.fld4;
_11.fld1.fld0.0 = _15.0;
_11.fld3.fld2 = !_16.1;
_21.fld4.3 = (-112_i8) | 104_i8;
_20.fld1.fld1.1 = _11.fld1.fld1.1;
_11.fld6 = _11.fld1.fld1.2;
_11.fld1.fld1.2 = _20.fld1.fld1.2;
_21.fld6 = !_20.fld1.fld1.2;
_20.fld6 = _21.fld6;
_16.1 = _15.1 * _15.1;
_20.fld3.fld2 = !_16.1;
match _20.fld3.fld0.0 {
0 => bb1,
9021 => bb8,
_ => bb7
}
}
bb14 = {
_21.fld6 = _11.fld1.fld1.2 & _11.fld1.fld1.2;
_25 = !_17;
_20.fld1.fld6 = _11.fld0;
_11.fld1.fld1.2 = _21.fld0.0 as i64;
_20.fld1.fld1.0 = _7;
_30 = _21.fld3.1 as f64;
_6 = _5 ^ _20.fld1.fld1.0;
_15.1 = !_20.fld3.fld2;
_26 = _20.fld1.fld1;
_20.fld2 = _29.0;
Call(_21.fld0.0 = fn10(_11.fld1.fld5.0, _20.fld2, _11.fld1.fld1, Move(_20.fld3), _11.fld1.fld5.0, _20.fld1.fld5, _26.0, _26.0), ReturnTo(bb11), UnwindUnreachable())
}
bb15 = {
_21.fld3.2 = _11.fld1.fld6;
_21.fld3.0 = !_21.fld0.0;
_21.fld1 = 247876876969735247201961707544261976230_u128 as f64;
_26 = (_20.fld1.fld1.0, _13, _21.fld2.2);
_11.fld1.fld5 = _20.fld1.fld5;
_11.fld1.fld1.0 = -_3;
_3 = -_20.fld1.fld1.0;
_20.fld3.fld2 = !_20.fld1.fld0.1;
_19 = -_21.fld1;
_16.1 = !_20.fld3.fld2;
_23 = _10;
_29.0 = _11.fld2;
_2 = _21.fld4.2 as i128;
match _18 {
0 => bb6,
1 => bb7,
2 => bb5,
25007 => bb10,
_ => bb4
}
}
bb16 = {
_11.fld3.fld1 = core::ptr::addr_of!(_10);
_21.fld2 = (_20.fld1.fld1.0, _13, _20.fld1.fld1.2);
_20.fld3.fld1 = core::ptr::addr_of!(_23);
RET = _21.fld2.1;
_21.fld4.2 = !9362447541801559334_usize;
_11.fld2 = [101_u8,144_u8,196_u8,71_u8];
_20.fld1.fld0.1 = _21.fld0.0 as u32;
_27 = !134_u8;
_11.fld1.fld1 = (_20.fld1.fld1.0, _13, _21.fld6);
match _20.fld3.fld0.0 {
0 => bb1,
1 => bb7,
2 => bb3,
3 => bb4,
4 => bb5,
9021 => bb9,
_ => bb6
}
}
bb17 = {
RET = _13;
_15.1 = _11.fld3.fld2;
_1 = _3;
_11.fld3.fld0.0 = _11.fld4 ^ _11.fld4;
_11.fld3.fld2 = !_11.fld1.fld0.1;
_1 = _2 * _2;
_10 = !false;
_5 = _3 - _2;
_11.fld1.fld5.0 = [_11.fld3.fld0.0,_11.fld3.fld0.0,_11.fld3.fld0.0,_11.fld3.fld0.0,_11.fld3.fld0.0,_11.fld3.fld0.0,_11.fld3.fld0.0];
_7 = _1;
_11.fld5 = 9223372036854775807_isize as i32;
_15.0 = _11.fld1.fld1.0 as f32;
_17 = 85_i8 as isize;
_2 = 13858523603375275483_u64 as i128;
_15 = (_11.fld1.fld0.0, _11.fld3.fld2);
_18 = 25007_u16;
_5 = _1;
_11.fld1.fld1.2 = -_11.fld6;
_20.fld3.fld0 = (_11.fld4,);
_20.fld4 = _11.fld3.fld0.0 >> _3;
_20.fld1.fld1 = (_7, RET, _11.fld6);
_12 = _11.fld1.fld5.0;
Goto(bb6)
}
bb18 = {
_11.fld4 = _20.fld4 << _20.fld1.fld1.0;
_20.fld5 = _11.fld5;
_21.fld3.2 = [_20.fld4,_11.fld4,_11.fld4,_20.fld4,_21.fld0.0];
_11.fld3 = Adt40 { fld0: _21.fld0,fld1: _20.fld3.fld1,fld2: _20.fld1.fld0.1 };
_29.0 = [_27,_27,_27,_27];
_11.fld0 = [_11.fld3.fld0.0,_20.fld4,_11.fld4,_21.fld0.0,_11.fld3.fld0.0];
_21.fld0 = (_11.fld3.fld0.0,);
_20.fld4 = _18 as i16;
_21.fld1 = _30 * _30;
_21.fld1 = _11.fld1.fld1.0 as f64;
_20.fld0 = [_11.fld4,_21.fld0.0,_11.fld3.fld0.0,_21.fld3.0,_21.fld0.0];
_12 = [_11.fld3.fld0.0,_11.fld3.fld0.0,_21.fld0.0,_21.fld3.0,_21.fld0.0,_21.fld0.0,_11.fld4];
_11.fld3 = Adt40 { fld0: _21.fld0,fld1: _20.fld3.fld1,fld2: _11.fld1.fld0.1 };
_11.fld6 = _21.fld4.2 as i64;
_23 = _6 >= _11.fld1.fld1.0;
_26 = (_11.fld1.fld1.0, RET, _11.fld1.fld1.2);
Goto(bb19)
}
bb19 = {
Call(_41 = dump_var(9_usize, 13_usize, Move(_13), 23_usize, Move(_23), 1_usize, Move(_1), 32_usize, Move(_32)), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Call(_41 = dump_var(9_usize, 9_usize, Move(_9), 27_usize, Move(_27), 10_usize, Move(_10), 22_usize, Move(_22)), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
Call(_41 = dump_var(9_usize, 5_usize, Move(_5), 28_usize, Move(_28), 6_usize, Move(_6), 42_usize, _42), ReturnTo(bb22), UnwindUnreachable())
}
bb22 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn10(mut _1: [i16; 7],mut _2: [u8; 4],mut _3: (i128, char, i64),mut _4: Adt40,mut _5: [i16; 7],mut _6: ([i16; 7],),mut _7: i128,mut _8: i128) -> i16 {
mir! {
type RET = i16;
let _9: isize;
let _10: char;
let _11: Adt40;
let _12: [char; 7];
let _13: f32;
let _14: char;
let _15: [char; 7];
let _16: (f32, u32);
let _17: f32;
let _18: [i16; 7];
let _19: bool;
let _20: f64;
let _21: isize;
let _22: ([u8; 4], *const u8, usize, i8);
let _23: ();
let _24: ();
{
_8 = 5_usize as i128;
RET = _4.fld0.0;
_4.fld0 = (RET,);
_9 = _3.2 as isize;
_1 = _6.0;
_5 = [_4.fld0.0,_4.fld0.0,RET,_4.fld0.0,RET,_4.fld0.0,_4.fld0.0];
_3.1 = '\u{adc7e}';
_3.2 = (-7730113235078488673_i64) & (-6561154059953373800_i64);
Call(_7 = core::intrinsics::bswap(_3.0), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_10 = _3.1;
_3.0 = true as i128;
_11.fld0.0 = 385186143_i32 as i16;
_3.0 = _7;
_4.fld0.0 = !RET;
_7 = -_3.0;
_4.fld0 = (_11.fld0.0,);
_4.fld0 = (RET,);
_11.fld0.0 = RET - _4.fld0.0;
_16.1 = _9 as u32;
_7 = 45_u8 as i128;
_4.fld0.0 = _11.fld0.0 & _11.fld0.0;
_5 = [_4.fld0.0,_11.fld0.0,_4.fld0.0,_11.fld0.0,_11.fld0.0,_4.fld0.0,_4.fld0.0];
_16.0 = _9 as f32;
_11.fld2 = _4.fld2;
_7 = _3.2 as i128;
_16.0 = 7511764749447254526_u64 as f32;
_2 = [118_u8,210_u8,231_u8,22_u8];
_14 = _10;
_13 = -_16.0;
_9 = (-74_isize) | (-82_isize);
_8 = _3.2 as i128;
_12 = [_14,_10,_14,_10,_14,_14,_14];
_6.0 = [_11.fld0.0,_11.fld0.0,_4.fld0.0,_4.fld0.0,_4.fld0.0,_11.fld0.0,_11.fld0.0];
match RET {
0 => bb2,
9021 => bb4,
_ => bb3
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
_12 = [_14,_3.1,_14,_3.1,_3.1,_14,_3.1];
_4.fld2 = !_16.1;
_8 = (-97_i8) as i128;
Call(_7 = fn11(_16.1, _16, _3.2, _4.fld2, Move(_4), _6.0, _3, _3.0, _16.1, _16.1, _11.fld2, _2), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
_16.1 = _11.fld2 | _11.fld2;
_4.fld0.0 = -_11.fld0.0;
_3.0 = -_7;
_11.fld1 = core::ptr::addr_of!(_19);
_4.fld2 = _11.fld2;
Goto(bb6)
}
bb6 = {
_6 = (_1,);
_4.fld0 = _11.fld0;
match RET {
0 => bb2,
1 => bb7,
2 => bb8,
3 => bb9,
9021 => bb11,
_ => bb10
}
}
bb7 = {
_16.1 = _11.fld2 | _11.fld2;
_4.fld0.0 = -_11.fld0.0;
_3.0 = -_7;
_11.fld1 = core::ptr::addr_of!(_19);
_4.fld2 = _11.fld2;
Goto(bb6)
}
bb8 = {
_10 = _3.1;
_3.0 = true as i128;
_11.fld0.0 = 385186143_i32 as i16;
_3.0 = _7;
_4.fld0.0 = !RET;
_7 = -_3.0;
_4.fld0 = (_11.fld0.0,);
_4.fld0 = (RET,);
_11.fld0.0 = RET - _4.fld0.0;
_16.1 = _9 as u32;
_7 = 45_u8 as i128;
_4.fld0.0 = _11.fld0.0 & _11.fld0.0;
_5 = [_4.fld0.0,_11.fld0.0,_4.fld0.0,_11.fld0.0,_11.fld0.0,_4.fld0.0,_4.fld0.0];
_16.0 = _9 as f32;
_11.fld2 = _4.fld2;
_7 = _3.2 as i128;
_16.0 = 7511764749447254526_u64 as f32;
_2 = [118_u8,210_u8,231_u8,22_u8];
_14 = _10;
_13 = -_16.0;
_9 = (-74_isize) | (-82_isize);
_8 = _3.2 as i128;
_12 = [_14,_10,_14,_10,_14,_14,_14];
_6.0 = [_11.fld0.0,_11.fld0.0,_4.fld0.0,_4.fld0.0,_4.fld0.0,_11.fld0.0,_11.fld0.0];
match RET {
0 => bb2,
9021 => bb4,
_ => bb3
}
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
RET = _11.fld0.0 & _4.fld0.0;
RET = _11.fld0.0 >> _11.fld2;
_4.fld0 = (RET,);
_6 = (_1,);
_8 = !_7;
_6 = (_1,);
_6 = (_1,);
_4.fld0.0 = RET | RET;
_15 = _12;
_10 = _3.1;
_13 = -_16.0;
_3 = (_7, _14, (-7312564864476059853_i64));
_16 = (_13, _11.fld2);
_18 = _1;
RET = (-15_i8) as i16;
_3.0 = _3.2 as i128;
_3.0 = _7;
RET = -_4.fld0.0;
_11.fld0.0 = _4.fld0.0 + RET;
_16.0 = _13;
_18 = [_4.fld0.0,_11.fld0.0,_4.fld0.0,RET,RET,_11.fld0.0,_4.fld0.0];
_6.0 = [_11.fld0.0,_4.fld0.0,_4.fld0.0,_4.fld0.0,_4.fld0.0,_11.fld0.0,_4.fld0.0];
_4.fld0.0 = _9 as i16;
_12 = _15;
Goto(bb12)
}
bb12 = {
Call(_23 = dump_var(10_usize, 5_usize, Move(_5), 14_usize, Move(_14), 2_usize, Move(_2), 8_usize, Move(_8)), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
Call(_23 = dump_var(10_usize, 1_usize, Move(_1), 6_usize, Move(_6), 24_usize, _24, 24_usize, _24), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn11(mut _1: u32,mut _2: (f32, u32),mut _3: i64,mut _4: u32,mut _5: Adt40,mut _6: [i16; 7],mut _7: (i128, char, i64),mut _8: i128,mut _9: u32,mut _10: u32,mut _11: u32,mut _12: [u8; 4]) -> i128 {
mir! {
type RET = i128;
let _13: u128;
let _14: u64;
let _15: u32;
let _16: isize;
let _17: [i16; 5];
let _18: usize;
let _19: Adt42;
let _20: i64;
let _21: ();
let _22: ();
{
_5.fld0 = (11323_i16,);
RET = 20138396_i32 as i128;
_11 = !_10;
_5.fld0.0 = 29743_i16;
_7.1 = '\u{e5fc2}';
_5.fld0 = ((-17416_i16),);
_5.fld0 = (17242_i16,);
_13 = 221_u8 as u128;
_2.1 = 11872714056534958226_u64 as u32;
_10 = !_1;
Call(RET = fn12(_10, Move(_5), _11, _9, _7, _8, _7, _1, _4, _7.0, _8, _1, _1), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_7.2 = -_3;
_3 = 689703458764309578_u64 as i64;
_2.1 = !_10;
_7.0 = _13 as i128;
_2.1 = !_4;
_4 = 5_usize as u32;
_7.2 = _3;
_10 = _9;
_5.fld0 = (14184_i16,);
_2.1 = _1;
_7.0 = _7.1 as i128;
_9 = _10;
RET = -_8;
_3 = _7.2;
_5.fld0.0 = 18638_i16;
RET = _8 * _8;
_5.fld0 = ((-5521_i16),);
_9 = _2.1;
_11 = _9;
_5.fld0 = ((-20026_i16),);
_20 = _3;
Goto(bb2)
}
bb2 = {
Call(_21 = dump_var(11_usize, 12_usize, Move(_12), 3_usize, Move(_3), 7_usize, Move(_7), 11_usize, Move(_11)), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Call(_21 = dump_var(11_usize, 8_usize, Move(_8), 6_usize, Move(_6), 22_usize, _22, 22_usize, _22), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn12(mut _1: u32,mut _2: Adt40,mut _3: u32,mut _4: u32,mut _5: (i128, char, i64),mut _6: i128,mut _7: (i128, char, i64),mut _8: u32,mut _9: u32,mut _10: i128,mut _11: i128,mut _12: u32,mut _13: u32) -> i128 {
mir! {
type RET = i128;
let _14: bool;
let _15: (i128, char, i64);
let _16: f32;
let _17: (i16,);
let _18: u32;
let _19: Adt49;
let _20: f32;
let _21: bool;
let _22: bool;
let _23: isize;
let _24: [i64; 2];
let _25: isize;
let _26: *const bool;
let _27: *mut &'static i64;
let _28: (f32, u32);
let _29: ();
let _30: ();
{
_9 = _3;
_4 = _12;
_12 = 27853_u16 as u32;
RET = (-95_i8) as i128;
_7 = _5;
_5.0 = 35057307261172468602247344835640396851_u128 as i128;
_7.1 = _5.1;
_14 = true ^ true;
Call(_17.0 = core::intrinsics::bswap(_2.fld0.0), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_8 = _9 ^ _2.fld2;
_7.1 = _5.1;
_2.fld0.0 = (-871_i16) << _9;
_17.0 = !_2.fld0.0;
_2.fld2 = _14 as u32;
_4 = _8;
_17 = _2.fld0;
_17 = (_2.fld0.0,);
Goto(bb2)
}
bb2 = {
_15.0 = _7.0 + _6;
_6 = _11;
_5.2 = _7.1 as i64;
_8 = _17.0 as u32;
_7.0 = _6;
_16 = 15432368966206682300_usize as f32;
_4 = !_1;
_18 = _2.fld0.0 as u32;
_5.0 = !_7.0;
_21 = _14;
_1 = _18 | _4;
_18 = _9;
_11 = _5.0 | _6;
_15.2 = 196858709289892012694072083772855873625_u128 as i64;
_2.fld2 = _8 * _8;
_10 = !_5.0;
_15.1 = _7.1;
_22 = _18 > _1;
_7.0 = _5.0 << _9;
_17 = (_2.fld0.0,);
_20 = _16 + _16;
Call(_4 = fn13(_17.0, _9, _2.fld0, _2.fld2, _7.0, _2.fld0.0, _11, _7.0), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_15 = (_7.0, _7.1, _7.2);
_12 = _1;
_15.2 = 63_u8 as i64;
_23 = 9223372036854775807_isize >> _6;
_16 = -_20;
_8 = _13;
_16 = _20 + _20;
Call(_10 = fn14(_7.0, _7, _5.0, _8, _12, _3, _17.0, _3, _23), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_21 = _22;
_7.2 = -_15.2;
RET = _10 | _10;
_5.0 = _15.0;
_7.0 = _18 as i128;
_2.fld0 = (_17.0,);
_7.1 = _5.1;
_10 = -_15.0;
_7 = (_5.0, _15.1, _15.2);
_26 = core::ptr::addr_of!(_21);
RET = -_11;
Goto(bb5)
}
bb5 = {
Call(_29 = dump_var(12_usize, 14_usize, Move(_14), 3_usize, Move(_3), 5_usize, Move(_5), 8_usize, Move(_8)), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
Call(_29 = dump_var(12_usize, 7_usize, Move(_7), 22_usize, Move(_22), 23_usize, Move(_23), 10_usize, Move(_10)), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
Call(_29 = dump_var(12_usize, 21_usize, Move(_21), 30_usize, _30, 30_usize, _30, 30_usize, _30), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn13(mut _1: i16,mut _2: u32,mut _3: (i16,),mut _4: u32,mut _5: i128,mut _6: i16,mut _7: i128,mut _8: i128) -> u32 {
mir! {
type RET = u32;
let _9: isize;
let _10: bool;
let _11: f32;
let _12: ();
let _13: ();
{
_3.0 = -_1;
RET = (-1140186137_i32) as u32;
_2 = _4;
_9 = (-9223372036854775808_isize);
_7 = _5;
_3 = (_1,);
_10 = false;
_3.0 = !_1;
Call(_2 = core::intrinsics::bswap(_4), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_3.0 = _6 >> _2;
RET = _2;
_8 = _5;
_9 = 86067615582111268709754823158524899978_u128 as isize;
_1 = !_3.0;
_10 = !false;
_4 = !_2;
_3.0 = _1;
_7 = _5 ^ _5;
_3 = (_6,);
_1 = _9 as i16;
_3.0 = 63_i8 as i16;
_11 = 4763566919444677577_usize as f32;
_2 = RET - _4;
Goto(bb2)
}
bb2 = {
Call(_12 = dump_var(13_usize, 3_usize, Move(_3), 10_usize, Move(_10), 5_usize, Move(_5), 9_usize, Move(_9)), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Call(_12 = dump_var(13_usize, 2_usize, Move(_2), 13_usize, _13, 13_usize, _13, 13_usize, _13), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn14(mut _1: i128,mut _2: (i128, char, i64),mut _3: i128,mut _4: u32,mut _5: u32,mut _6: u32,mut _7: i16,mut _8: u32,mut _9: isize) -> i128 {
mir! {
type RET = i128;
let _10: *mut [i16; 7];
let _11: *mut [i16; 8];
let _12: usize;
let _13: (i16, f32, [i16; 5]);
let _14: ();
let _15: ();
{
_2 = (_3, '\u{c4aa6}', 193127944595280556_i64);
_2.0 = _1 >> _9;
_7 = -25446_i16;
RET = _1 ^ _2.0;
_9 = !(-65_isize);
_2 = (_3, '\u{cf8f4}', 665293192012253411_i64);
_2.1 = '\u{a5c82}';
_1 = _2.0;
_5 = !_4;
_4 = _5;
_6 = _4 >> _3;
_5 = _4;
_13.2 = [_7,_7,_7,_7,_7];
_9 = (-9223372036854775808_isize);
_13.0 = 15218641259719167536_u64 as i16;
_5 = !_4;
Goto(bb1)
}
bb1 = {
Call(_14 = dump_var(14_usize, 1_usize, Move(_1), 3_usize, Move(_3), 8_usize, Move(_8), 2_usize, Move(_2)), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn15(mut _1: u32,mut _2: [i16; 7],mut _3: i16,mut _4: u32,mut _5: (i16, f32, [i16; 5]),mut _6: i128,mut _7: ([i16; 7],),mut _8: (i128, char, i64),mut _9: u32,mut _10: ([i16; 7],)) -> [char; 7] {
mir! {
type RET = [char; 7];
let _11: [i16; 8];
let _12: [i16; 8];
let _13: i32;
let _14: (i16, f32, [i16; 5]);
let _15: [char; 2];
let _16: u16;
let _17: (i16, f32, [i16; 5]);
let _18: isize;
let _19: [i16; 8];
let _20: [u8; 4];
let _21: f32;
let _22: [i64; 2];
let _23: u64;
let _24: f32;
let _25: i8;
let _26: Adt45;
let _27: i16;
let _28: f32;
let _29: char;
let _30: [char; 2];
let _31: i8;
let _32: ([i16; 7],);
let _33: Adt49;
let _34: char;
let _35: [u8; 4];
let _36: (i16,);
let _37: u8;
let _38: Adt48;
let _39: ([i16; 7],);
let _40: ();
let _41: ();
{
_8.2 = _8.1 as i64;
_7 = _10;
_3 = _5.0 | _5.0;
_3 = 79_u8 as i16;
_8.0 = _6;
_5.1 = (-96_i8) as f32;
_4 = _9 - _9;
_11 = [_5.0,_5.0,_5.0,_5.0,_5.0,_5.0,_5.0,_5.0];
_5.1 = 153_u16 as f32;
RET = [_8.1,_8.1,_8.1,_8.1,_8.1,_8.1,_8.1];
Call(_13 = core::intrinsics::transmute(_4), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_2 = [_5.0,_5.0,_5.0,_5.0,_5.0,_5.0,_5.0];
_12 = [_5.0,_5.0,_5.0,_5.0,_5.0,_5.0,_5.0,_5.0];
Goto(bb2)
}
bb2 = {
RET = [_8.1,_8.1,_8.1,_8.1,_8.1,_8.1,_8.1];
RET = [_8.1,_8.1,_8.1,_8.1,_8.1,_8.1,_8.1];
_7.0 = [_5.0,_5.0,_5.0,_5.0,_5.0,_5.0,_5.0];
_5.2 = [_5.0,_5.0,_5.0,_5.0,_5.0];
_9 = !_4;
_14.0 = _5.0;
_14.2 = _5.2;
_3 = true as i16;
_17.1 = _5.1 + _5.1;
_17.2 = _5.2;
_16 = 14826038003225822931_u64 as u16;
_8.1 = '\u{789fa}';
_8.1 = '\u{dc35e}';
_7.0 = [_14.0,_14.0,_5.0,_5.0,_5.0,_14.0,_5.0];
_11 = _12;
_6 = _8.0 ^ _8.0;
_12 = [_5.0,_5.0,_14.0,_14.0,_14.0,_14.0,_14.0,_5.0];
_8 = (_6, '\u{61992}', (-7444137744960600399_i64));
Call(_8.2 = fn16(_5, _8.0, _5, _1, _14.2, _8.1), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_3 = _5.0 >> _13;
_17.1 = _5.1 * _5.1;
_19 = [_3,_5.0,_14.0,_5.0,_14.0,_3,_14.0,_14.0];
_7.0 = [_14.0,_14.0,_5.0,_14.0,_3,_3,_3];
_14.1 = -_17.1;
RET = [_8.1,_8.1,_8.1,_8.1,_8.1,_8.1,_8.1];
_17 = _5;
_8.2 = (-3777560612326508179_i64);
_2 = [_14.0,_5.0,_3,_5.0,_17.0,_17.0,_5.0];
_8.2 = 1332037448444745036_i64;
_18 = 9223372036854775807_isize;
_11 = [_5.0,_5.0,_14.0,_5.0,_14.0,_14.0,_3,_17.0];
_8.1 = '\u{fc58b}';
_10 = (_7.0,);
_8.2 = _16 as i64;
_8.2 = -(-4941420670300538141_i64);
RET = [_8.1,_8.1,_8.1,_8.1,_8.1,_8.1,_8.1];
_6 = _8.0;
_6 = 190_u8 as i128;
_5 = (_14.0, _17.1, _14.2);
_14.1 = -_5.1;
_15 = [_8.1,_8.1];
_14.0 = _16 as i16;
Goto(bb4)
}
bb4 = {
_14.0 = _3 + _17.0;
_10.0 = _7.0;
_12 = _19;
_5.0 = _14.0 | _14.0;
Goto(bb5)
}
bb5 = {
_17 = _5;
_23 = !2730005552236639186_u64;
_6 = !_8.0;
_5.0 = _16 as i16;
_25 = !80_i8;
_22 = [_8.2,_8.2];
_15 = [_8.1,_8.1];
_3 = 54473848673057351323468017210725601485_u128 as i16;
_29 = _8.1;
_14.1 = _17.1 * _17.1;
_21 = -_5.1;
_20 = [76_u8,221_u8,143_u8,158_u8];
_23 = _14.0 as u64;
_7 = _10;
_31 = _25 ^ _25;
RET = [_29,_8.1,_8.1,_29,_8.1,_8.1,_8.1];
_17.1 = _14.1 * _5.1;
_24 = -_17.1;
match _18 {
0 => bb1,
1 => bb2,
2 => bb3,
9223372036854775807 => bb6,
_ => bb4
}
}
bb6 = {
_27 = _14.0;
_13 = 1889821202_i32;
_15 = [_8.1,_8.1];
_14.1 = _24 - _17.1;
_8.1 = _29;
_3 = !_14.0;
_4 = _9;
Call(_17 = fn17(_27, _8.0, _14.2, _10), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
_10.0 = _2;
_8.0 = _4 as i128;
_21 = _5.1;
_10.0 = [_3,_3,_14.0,_14.0,_14.0,_27,_14.0];
_29 = _8.1;
_18 = 9223372036854775807_isize + (-9223372036854775808_isize);
_3 = _27 >> _6;
_17.0 = -_3;
_5 = (_17.0, _14.1, _14.2);
_6 = _8.0;
Goto(bb8)
}
bb8 = {
_12 = [_3,_14.0,_27,_17.0,_5.0,_27,_3,_27];
_6 = !_8.0;
_28 = _6 as f32;
_14.1 = _28 + _28;
Call(_8.1 = fn18(_19, _11, _23, _17.0, _5.2, _3, _10, _14.2, _17.0, _17.2, _17.0, _5.2, _23), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
_22 = [_8.2,_8.2];
match _13 {
0 => bb3,
1 => bb10,
2 => bb11,
3 => bb12,
4 => bb13,
5 => bb14,
1889821202 => bb16,
_ => bb15
}
}
bb10 = {
_12 = [_3,_14.0,_27,_17.0,_5.0,_27,_3,_27];
_6 = !_8.0;
_28 = _6 as f32;
_14.1 = _28 + _28;
Call(_8.1 = fn18(_19, _11, _23, _17.0, _5.2, _3, _10, _14.2, _17.0, _17.2, _17.0, _5.2, _23), ReturnTo(bb9), UnwindUnreachable())
}
bb11 = {
_10.0 = _2;
_8.0 = _4 as i128;
_21 = _5.1;
_10.0 = [_3,_3,_14.0,_14.0,_14.0,_27,_14.0];
_29 = _8.1;
_18 = 9223372036854775807_isize + (-9223372036854775808_isize);
_3 = _27 >> _6;
_17.0 = -_3;
_5 = (_17.0, _14.1, _14.2);
_6 = _8.0;
Goto(bb8)
}
bb12 = {
_2 = [_5.0,_5.0,_5.0,_5.0,_5.0,_5.0,_5.0];
_12 = [_5.0,_5.0,_5.0,_5.0,_5.0,_5.0,_5.0,_5.0];
Goto(bb2)
}
bb13 = {
_17 = _5;
_23 = !2730005552236639186_u64;
_6 = !_8.0;
_5.0 = _16 as i16;
_25 = !80_i8;
_22 = [_8.2,_8.2];
_15 = [_8.1,_8.1];
_3 = 54473848673057351323468017210725601485_u128 as i16;
_29 = _8.1;
_14.1 = _17.1 * _17.1;
_21 = -_5.1;
_20 = [76_u8,221_u8,143_u8,158_u8];
_23 = _14.0 as u64;
_7 = _10;
_31 = _25 ^ _25;
RET = [_29,_8.1,_8.1,_29,_8.1,_8.1,_8.1];
_17.1 = _14.1 * _5.1;
_24 = -_17.1;
match _18 {
0 => bb1,
1 => bb2,
2 => bb3,
9223372036854775807 => bb6,
_ => bb4
}
}
bb14 = {
RET = [_8.1,_8.1,_8.1,_8.1,_8.1,_8.1,_8.1];
RET = [_8.1,_8.1,_8.1,_8.1,_8.1,_8.1,_8.1];
_7.0 = [_5.0,_5.0,_5.0,_5.0,_5.0,_5.0,_5.0];
_5.2 = [_5.0,_5.0,_5.0,_5.0,_5.0];
_9 = !_4;
_14.0 = _5.0;
_14.2 = _5.2;
_3 = true as i16;
_17.1 = _5.1 + _5.1;
_17.2 = _5.2;
_16 = 14826038003225822931_u64 as u16;
_8.1 = '\u{789fa}';
_8.1 = '\u{dc35e}';
_7.0 = [_14.0,_14.0,_5.0,_5.0,_5.0,_14.0,_5.0];
_11 = _12;
_6 = _8.0 ^ _8.0;
_12 = [_5.0,_5.0,_14.0,_14.0,_14.0,_14.0,_14.0,_5.0];
_8 = (_6, '\u{61992}', (-7444137744960600399_i64));
Call(_8.2 = fn16(_5, _8.0, _5, _1, _14.2, _8.1), ReturnTo(bb3), UnwindUnreachable())
}
bb15 = {
_3 = _5.0 >> _13;
_17.1 = _5.1 * _5.1;
_19 = [_3,_5.0,_14.0,_5.0,_14.0,_3,_14.0,_14.0];
_7.0 = [_14.0,_14.0,_5.0,_14.0,_3,_3,_3];
_14.1 = -_17.1;
RET = [_8.1,_8.1,_8.1,_8.1,_8.1,_8.1,_8.1];
_17 = _5;
_8.2 = (-3777560612326508179_i64);
_2 = [_14.0,_5.0,_3,_5.0,_17.0,_17.0,_5.0];
_8.2 = 1332037448444745036_i64;
_18 = 9223372036854775807_isize;
_11 = [_5.0,_5.0,_14.0,_5.0,_14.0,_14.0,_3,_17.0];
_8.1 = '\u{fc58b}';
_10 = (_7.0,);
_8.2 = _16 as i64;
_8.2 = -(-4941420670300538141_i64);
RET = [_8.1,_8.1,_8.1,_8.1,_8.1,_8.1,_8.1];
_6 = _8.0;
_6 = 190_u8 as i128;
_5 = (_14.0, _17.1, _14.2);
_14.1 = -_5.1;
_15 = [_8.1,_8.1];
_14.0 = _16 as i16;
Goto(bb4)
}
bb16 = {
_22 = [_8.2,_8.2];
_8.0 = _6 ^ _6;
_38.fld0 = core::ptr::addr_of!(_25);
_35 = [250_u8,25_u8,146_u8,87_u8];
_27 = _17.0;
_21 = _4 as f32;
Goto(bb17)
}
bb17 = {
Call(_40 = dump_var(15_usize, 22_usize, Move(_22), 11_usize, Move(_11), 29_usize, Move(_29), 27_usize, Move(_27)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_40 = dump_var(15_usize, 15_usize, Move(_15), 9_usize, Move(_9), 6_usize, Move(_6), 25_usize, Move(_25)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_40 = dump_var(15_usize, 2_usize, Move(_2), 19_usize, Move(_19), 23_usize, Move(_23), 16_usize, Move(_16)), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn16(mut _1: (i16, f32, [i16; 5]),mut _2: i128,mut _3: (i16, f32, [i16; 5]),mut _4: u32,mut _5: [i16; 5],mut _6: char) -> i64 {
mir! {
type RET = i64;
let _7: (i16,);
let _8: bool;
let _9: f32;
let _10: i16;
let _11: [char; 2];
let _12: f64;
let _13: Adt48;
let _14: *mut &'static i64;
let _15: Adt54;
let _16: *const u8;
let _17: ([u8; 4], *const u8, usize, i8);
let _18: (i16, f32, [i16; 5]);
let _19: u32;
let _20: i16;
let _21: f64;
let _22: ([i16; 7],);
let _23: [i16; 8];
let _24: [i64; 2];
let _25: *const i8;
let _26: [char; 7];
let _27: ();
let _28: ();
{
_2 = 85688130559177658960624685570962506638_i128;
_1.1 = (-1870197345_i32) as f32;
_3 = _1;
_1.1 = _3.1;
_5 = [_3.0,_1.0,_3.0,_1.0,_1.0];
_5 = [_1.0,_3.0,_1.0,_3.0,_3.0];
_2 = 113625620213737924801532335561507592888_i128;
_1.0 = _3.0 * _3.0;
RET = -(-3988570526876477888_i64);
RET = (-5581632190808263585_i64) + (-556274674327842669_i64);
_1 = (_3.0, _3.1, _5);
_7.0 = _3.0 >> _4;
_8 = !true;
_5 = [_1.0,_3.0,_3.0,_3.0,_1.0];
_7 = (_1.0,);
RET = _1.1 as i64;
_12 = 14_u8 as f64;
_7 = (_1.0,);
_10 = _1.0;
_3.2 = [_7.0,_10,_3.0,_10,_3.0];
_1 = (_7.0, _3.1, _3.2);
match _2 {
113625620213737924801532335561507592888 => bb2,
_ => bb1
}
}
bb1 = {
Return()
}
bb2 = {
_4 = 322862952_u32 + 2944109456_u32;
RET = -(-7285434662436052722_i64);
_1.1 = -_3.1;
_15.fld0 = (_1.1, _4);
_15.fld6 = [_1.0,_3.0,_1.0,_7.0,_3.0];
_15.fld1.0 = _2;
_15.fld6 = _5;
_15.fld1.2 = -RET;
_9 = _1.1;
_15.fld1.1 = _6;
_7.0 = _6 as i16;
_13.fld1 = core::ptr::addr_of!(_10);
_15.fld1.2 = !RET;
RET = _15.fld1.2;
_15.fld5.0 = [_7.0,_10,_3.0,_1.0,_10,_10,_3.0];
_15.fld3 = Adt50::Variant1 { fld0: _15.fld5 };
SetDiscriminant(_15.fld3, 2);
place!(Field::<[i16; 5]>(Variant(_15.fld3, 2), 4)) = [_10,_3.0,_1.0,_7.0,_10];
place!(Field::<Adt43>(Variant(_15.fld3, 2), 5)).fld5 = core::ptr::addr_of!(place!(Field::<Adt43>(Variant(_15.fld3, 2), 5)).fld4.3);
place!(Field::<Adt43>(Variant(_15.fld3, 2), 5)).fld3.0 = 9223372036854775807_isize as i16;
_18.1 = -_1.1;
place!(Field::<Adt43>(Variant(_15.fld3, 2), 5)).fld4.0 = [234_u8,38_u8,14_u8,95_u8];
place!(Field::<Adt43>(Variant(_15.fld3, 2), 5)).fld3.2 = [_7.0,_1.0,_1.0,_1.0,_3.0];
Goto(bb3)
}
bb3 = {
place!(Field::<Adt41>(Variant(_15.fld3, 2), 0)).fld0.2 = _5;
place!(Field::<Adt43>(Variant(_15.fld3, 2), 5)).fld4.2 = !14148714145229439917_usize;
place!(Field::<(i128, char, i64)>(Variant(_15.fld3, 2), 6)) = (_2, _15.fld1.1, _15.fld1.2);
place!(Field::<Adt43>(Variant(_15.fld3, 2), 5)).fld1 = _12;
_17.0 = Field::<Adt43>(Variant(_15.fld3, 2), 5).fld4.0;
_15.fld1.1 = Field::<(i128, char, i64)>(Variant(_15.fld3, 2), 6).1;
_15.fld0.0 = -_3.1;
_18.2 = Field::<[i16; 5]>(Variant(_15.fld3, 2), 4);
Goto(bb4)
}
bb4 = {
_15.fld1.2 = RET - RET;
RET = _15.fld1.2;
_13.fld0 = Field::<Adt43>(Variant(_15.fld3, 2), 5).fld5;
place!(Field::<Adt41>(Variant(_15.fld3, 2), 0)).fld0 = (_3.0, _3.1, _15.fld6);
Goto(bb5)
}
bb5 = {
place!(Field::<*mut (i16, f32, [i16; 5])>(Variant(_15.fld3, 2), 2)) = core::ptr::addr_of_mut!(_3);
place!(Field::<Adt41>(Variant(_15.fld3, 2), 0)).fld0.1 = Field::<Adt43>(Variant(_15.fld3, 2), 5).fld4.2 as f32;
match Field::<(i128, char, i64)>(Variant(_15.fld3, 2), 6).0 {
0 => bb3,
1 => bb6,
2 => bb7,
3 => bb8,
4 => bb9,
113625620213737924801532335561507592888 => bb11,
_ => bb10
}
}
bb6 = {
_15.fld1.2 = RET - RET;
RET = _15.fld1.2;
_13.fld0 = Field::<Adt43>(Variant(_15.fld3, 2), 5).fld5;
place!(Field::<Adt41>(Variant(_15.fld3, 2), 0)).fld0 = (_3.0, _3.1, _15.fld6);
Goto(bb5)
}
bb7 = {
place!(Field::<Adt41>(Variant(_15.fld3, 2), 0)).fld0.2 = _5;
place!(Field::<Adt43>(Variant(_15.fld3, 2), 5)).fld4.2 = !14148714145229439917_usize;
place!(Field::<(i128, char, i64)>(Variant(_15.fld3, 2), 6)) = (_2, _15.fld1.1, _15.fld1.2);
place!(Field::<Adt43>(Variant(_15.fld3, 2), 5)).fld1 = _12;
_17.0 = Field::<Adt43>(Variant(_15.fld3, 2), 5).fld4.0;
_15.fld1.1 = Field::<(i128, char, i64)>(Variant(_15.fld3, 2), 6).1;
_15.fld0.0 = -_3.1;
_18.2 = Field::<[i16; 5]>(Variant(_15.fld3, 2), 4);
Goto(bb4)
}
bb8 = {
_4 = 322862952_u32 + 2944109456_u32;
RET = -(-7285434662436052722_i64);
_1.1 = -_3.1;
_15.fld0 = (_1.1, _4);
_15.fld6 = [_1.0,_3.0,_1.0,_7.0,_3.0];
_15.fld1.0 = _2;
_15.fld6 = _5;
_15.fld1.2 = -RET;
_9 = _1.1;
_15.fld1.1 = _6;
_7.0 = _6 as i16;
_13.fld1 = core::ptr::addr_of!(_10);
_15.fld1.2 = !RET;
RET = _15.fld1.2;
_15.fld5.0 = [_7.0,_10,_3.0,_1.0,_10,_10,_3.0];
_15.fld3 = Adt50::Variant1 { fld0: _15.fld5 };
SetDiscriminant(_15.fld3, 2);
place!(Field::<[i16; 5]>(Variant(_15.fld3, 2), 4)) = [_10,_3.0,_1.0,_7.0,_10];
place!(Field::<Adt43>(Variant(_15.fld3, 2), 5)).fld5 = core::ptr::addr_of!(place!(Field::<Adt43>(Variant(_15.fld3, 2), 5)).fld4.3);
place!(Field::<Adt43>(Variant(_15.fld3, 2), 5)).fld3.0 = 9223372036854775807_isize as i16;
_18.1 = -_1.1;
place!(Field::<Adt43>(Variant(_15.fld3, 2), 5)).fld4.0 = [234_u8,38_u8,14_u8,95_u8];
place!(Field::<Adt43>(Variant(_15.fld3, 2), 5)).fld3.2 = [_7.0,_1.0,_1.0,_1.0,_3.0];
Goto(bb3)
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
place!(Field::<Adt43>(Variant(_15.fld3, 2), 5)).fld3.2 = Field::<Adt41>(Variant(_15.fld3, 2), 0).fld0.2;
_15.fld1.0 = Field::<(i128, char, i64)>(Variant(_15.fld3, 2), 6).0 - _2;
_7 = (_10,);
place!(Field::<Adt43>(Variant(_15.fld3, 2), 5)).fld0 = _7;
_21 = 197_u8 as f64;
_10 = -_7.0;
match Field::<(i128, char, i64)>(Variant(_15.fld3, 2), 6).0 {
0 => bb1,
1 => bb9,
2 => bb10,
3 => bb4,
4 => bb5,
5 => bb6,
6 => bb7,
113625620213737924801532335561507592888 => bb12,
_ => bb8
}
}
bb12 = {
_8 = _1.0 == Field::<Adt43>(Variant(_15.fld3, 2), 5).fld0.0;
RET = (-9223372036854775808_isize) as i64;
place!(Field::<Adt43>(Variant(_15.fld3, 2), 5)).fld1 = -_12;
_13.fld1 = core::ptr::addr_of!(_7.0);
_12 = _21;
_18 = (Field::<Adt41>(Variant(_15.fld3, 2), 0).fld0.0, Field::<Adt41>(Variant(_15.fld3, 2), 0).fld0.1, _1.2);
_7.0 = (-85_i8) as i16;
_18.2 = _1.2;
_6 = _15.fld1.1;
_15.fld0 = (_3.1, _4);
_7 = (_3.0,);
_18.0 = -_1.0;
place!(Field::<Adt43>(Variant(_15.fld3, 2), 5)).fld2.1 = Field::<(i128, char, i64)>(Variant(_15.fld3, 2), 6).1;
place!(Field::<Adt43>(Variant(_15.fld3, 2), 5)).fld3.0 = _18.1 as i16;
match Field::<(i128, char, i64)>(Variant(_15.fld3, 2), 6).0 {
0 => bb13,
1 => bb14,
2 => bb15,
113625620213737924801532335561507592888 => bb17,
_ => bb16
}
}
bb13 = {
place!(Field::<Adt43>(Variant(_15.fld3, 2), 5)).fld3.2 = Field::<Adt41>(Variant(_15.fld3, 2), 0).fld0.2;
_15.fld1.0 = Field::<(i128, char, i64)>(Variant(_15.fld3, 2), 6).0 - _2;
_7 = (_10,);
place!(Field::<Adt43>(Variant(_15.fld3, 2), 5)).fld0 = _7;
_21 = 197_u8 as f64;
_10 = -_7.0;
match Field::<(i128, char, i64)>(Variant(_15.fld3, 2), 6).0 {
0 => bb1,
1 => bb9,
2 => bb10,
3 => bb4,
4 => bb5,
5 => bb6,
6 => bb7,
113625620213737924801532335561507592888 => bb12,
_ => bb8
}
}
bb14 = {
_4 = 322862952_u32 + 2944109456_u32;
RET = -(-7285434662436052722_i64);
_1.1 = -_3.1;
_15.fld0 = (_1.1, _4);
_15.fld6 = [_1.0,_3.0,_1.0,_7.0,_3.0];
_15.fld1.0 = _2;
_15.fld6 = _5;
_15.fld1.2 = -RET;
_9 = _1.1;
_15.fld1.1 = _6;
_7.0 = _6 as i16;
_13.fld1 = core::ptr::addr_of!(_10);
_15.fld1.2 = !RET;
RET = _15.fld1.2;
_15.fld5.0 = [_7.0,_10,_3.0,_1.0,_10,_10,_3.0];
_15.fld3 = Adt50::Variant1 { fld0: _15.fld5 };
SetDiscriminant(_15.fld3, 2);
place!(Field::<[i16; 5]>(Variant(_15.fld3, 2), 4)) = [_10,_3.0,_1.0,_7.0,_10];
place!(Field::<Adt43>(Variant(_15.fld3, 2), 5)).fld5 = core::ptr::addr_of!(place!(Field::<Adt43>(Variant(_15.fld3, 2), 5)).fld4.3);
place!(Field::<Adt43>(Variant(_15.fld3, 2), 5)).fld3.0 = 9223372036854775807_isize as i16;
_18.1 = -_1.1;
place!(Field::<Adt43>(Variant(_15.fld3, 2), 5)).fld4.0 = [234_u8,38_u8,14_u8,95_u8];
place!(Field::<Adt43>(Variant(_15.fld3, 2), 5)).fld3.2 = [_7.0,_1.0,_1.0,_1.0,_3.0];
Goto(bb3)
}
bb15 = {
Return()
}
bb16 = {
place!(Field::<*mut (i16, f32, [i16; 5])>(Variant(_15.fld3, 2), 2)) = core::ptr::addr_of_mut!(_3);
place!(Field::<Adt41>(Variant(_15.fld3, 2), 0)).fld0.1 = Field::<Adt43>(Variant(_15.fld3, 2), 5).fld4.2 as f32;
match Field::<(i128, char, i64)>(Variant(_15.fld3, 2), 6).0 {
0 => bb3,
1 => bb6,
2 => bb7,
3 => bb8,
4 => bb9,
113625620213737924801532335561507592888 => bb11,
_ => bb10
}
}
bb17 = {
_24 = [RET,_15.fld1.2];
_20 = !_18.0;
_17.3 = _8 as i8;
place!(Field::<Adt43>(Variant(_15.fld3, 2), 5)).fld3 = (_20, _9, _1.2);
place!(Field::<Adt43>(Variant(_15.fld3, 2), 5)).fld3 = _18;
_4 = !_15.fld0.1;
place!(Field::<Adt43>(Variant(_15.fld3, 2), 5)).fld3 = (_20, _1.1, Field::<Adt41>(Variant(_15.fld3, 2), 0).fld0.2);
place!(Field::<Adt43>(Variant(_15.fld3, 2), 5)).fld2.2 = -_15.fld1.2;
_15.fld1.2 = !RET;
_25 = Field::<Adt43>(Variant(_15.fld3, 2), 5).fld5;
place!(Field::<(i128, char, i64)>(Variant(_15.fld3, 2), 6)).2 = _15.fld1.2 | _15.fld1.2;
_3.2 = [_1.0,_10,_10,Field::<Adt41>(Variant(_15.fld3, 2), 0).fld0.0,_3.0];
_20 = Field::<Adt41>(Variant(_15.fld3, 2), 0).fld0.0;
place!(Field::<Adt43>(Variant(_15.fld3, 2), 5)).fld2.2 = Field::<(i128, char, i64)>(Variant(_15.fld3, 2), 6).2;
Goto(bb18)
}
bb18 = {
Call(_27 = dump_var(16_usize, 20_usize, Move(_20), 4_usize, Move(_4), 6_usize, Move(_6), 2_usize, Move(_2)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn17(mut _1: i16,mut _2: i128,mut _3: [i16; 5],mut _4: ([i16; 7],)) -> (i16, f32, [i16; 5]) {
mir! {
type RET = (i16, f32, [i16; 5]);
let _5: char;
let _6: f32;
let _7: isize;
let _8: Adt41;
let _9: [char; 2];
let _10: (i16, f32, [i16; 5]);
let _11: u8;
let _12: [char; 7];
let _13: ();
let _14: ();
{
_2 = (-43241131782389648751558479649248618591_i128);
match _2 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb5,
5 => bb6,
297041235138548814711816127782519592865 => bb8,
_ => bb7
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
RET.0 = 6_usize as i16;
RET.1 = _1 as f32;
_2 = !(-76022409571411877786930341902418171430_i128);
_1 = !RET.0;
RET.2 = _3;
_4.0 = [_1,RET.0,_1,RET.0,RET.0,RET.0,_1];
RET.2 = [RET.0,_1,_1,_1,_1];
RET.1 = 1216997004870789631_u64 as f32;
RET.0 = _1 * _1;
RET.1 = 20525_u16 as f32;
RET.0 = !_1;
RET.1 = 1208758647_i32 as f32;
_2 = 111_i8 as i128;
RET.0 = _1;
_6 = 207779535700226972960136308970289472704_u128 as f32;
RET.0 = _1 * _1;
_5 = '\u{7dfea}';
Goto(bb9)
}
bb9 = {
_6 = RET.1;
RET = (_1, _6, _3);
_8 = Adt41 { fld0: RET };
RET.1 = -_6;
_7 = 9223372036854775807_isize;
RET.2 = _8.fld0.2;
RET.0 = _8.fld0.0;
_7 = 47_i8 as isize;
_3 = [_1,_1,_1,_8.fld0.0,_1];
_10.1 = _6;
_8.fld0.0 = _1;
RET = _8.fld0;
_2 = _5 as i128;
_8.fld0 = RET;
_8.fld0.1 = _6 - RET.1;
_3 = [_1,_8.fld0.0,_1,RET.0,_8.fld0.0];
_6 = _10.1 * _8.fld0.1;
_7 = (-9223372036854775808_isize) ^ 9223372036854775807_isize;
_10.1 = 3_usize as f32;
RET.0 = -_1;
_10.0 = -RET.0;
_4.0 = [RET.0,RET.0,_10.0,RET.0,_8.fld0.0,_1,_1];
_6 = _8.fld0.1;
_10.2 = [_8.fld0.0,_10.0,RET.0,_1,_1];
_10 = (RET.0, _8.fld0.1, RET.2);
Goto(bb10)
}
bb10 = {
Call(_13 = dump_var(17_usize, 4_usize, Move(_4), 7_usize, Move(_7), 5_usize, Move(_5), 14_usize, _14), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn18(mut _1: [i16; 8],mut _2: [i16; 8],mut _3: u64,mut _4: i16,mut _5: [i16; 5],mut _6: i16,mut _7: ([i16; 7],),mut _8: [i16; 5],mut _9: i16,mut _10: [i16; 5],mut _11: i16,mut _12: [i16; 5],mut _13: u64) -> char {
mir! {
type RET = char;
let _14: [i64; 2];
let _15: i8;
let _16: *mut [i16; 8];
let _17: u64;
let _18: [i16; 5];
let _19: *const i8;
let _20: isize;
let _21: f32;
let _22: Adt52;
let _23: [i64; 2];
let _24: Adt49;
let _25: (i16, f32, [i16; 5]);
let _26: (i128, char, i64);
let _27: (f32, u32);
let _28: f64;
let _29: [char; 2];
let _30: *mut [i16; 7];
let _31: isize;
let _32: u16;
let _33: u32;
let _34: i128;
let _35: (i16,);
let _36: ();
let _37: ();
{
_5 = _12;
_8 = _12;
_10 = [_11,_4,_4,_9,_6];
_13 = _3;
RET = '\u{5d3c1}';
_4 = 26826_u16 as i16;
_3 = (-1543026965_i32) as u64;
_9 = _6 * _11;
_11 = _9 ^ _6;
_3 = 5733574370051769170_i64 as u64;
_9 = !_11;
RET = '\u{2ae3a}';
_9 = -_11;
_12 = [_11,_6,_9,_11,_6];
_12 = [_11,_9,_11,_9,_9];
_16 = core::ptr::addr_of_mut!(_1);
_12 = [_6,_6,_11,_9,_9];
_11 = (-95_isize) as i16;
_15 = true as i8;
_10 = [_6,_9,_6,_6,_6];
_5 = [_9,_9,_6,_9,_6];
_2 = [_9,_6,_9,_6,_9,_9,_9,_9];
_7.0 = [_9,_9,_6,_9,_6,_6,_6];
_16 = core::ptr::addr_of_mut!(_2);
_4 = _6 + _6;
Goto(bb1)
}
bb1 = {
_15 = !(-6_i8);
_1 = (*_16);
_3 = false as u64;
_14 = [(-8986834745623733355_i64),(-1744057534772707650_i64)];
_13 = _3;
_13 = !_3;
_7.0 = [_6,_6,_4,_9,_4,_6,_6];
_13 = !_3;
_5 = _10;
_19 = core::ptr::addr_of!(_15);
_17 = _3 >> _4;
_4 = 221832462460066278466446805534919649132_u128 as i16;
_9 = _6 << _6;
RET = '\u{d32d5}';
_18 = [_9,_6,_9,_6,_6];
_7.0 = [_9,_6,_9,_6,_6,_9,_9];
_10 = [_9,_9,_9,_6,_6];
RET = '\u{d1ecf}';
_16 = core::ptr::addr_of_mut!((*_16));
_13 = 32816_u16 as u64;
_13 = _17 * _17;
_17 = _13 | _13;
_3 = _13;
Call(_5 = core::intrinsics::transmute(_12), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_3 = _17;
_3 = !_17;
_16 = core::ptr::addr_of_mut!((*_16));
_4 = _6 + _6;
_8 = _5;
_1 = [_4,_6,_9,_6,_4,_9,_9,_6];
Call(_4 = core::intrinsics::bswap(_6), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_10 = _8;
_11 = _9 << _9;
_19 = core::ptr::addr_of!(_15);
_15 = _13 as i8;
_1 = [_6,_9,_11,_6,_9,_9,_11,_4];
_19 = core::ptr::addr_of!(_15);
_18 = [_6,_4,_11,_4,_11];
_23 = _14;
_18 = [_6,_6,_4,_4,_11];
_13 = 258317170741360268108973402499109838964_u128 as u64;
_3 = (-1772647772_i32) as u64;
_21 = 13627828265793073645_usize as f32;
_15 = !30_i8;
_17 = 128914210253906488672332052751151008129_u128 as u64;
_20 = -94_isize;
_26 = ((-26531886899527312416432575951889658975_i128), RET, 4566765333450669234_i64);
_8 = [_9,_4,_9,_11,_11];
_4 = _6;
Goto(bb4)
}
bb4 = {
_25.1 = _21;
_27.0 = -_21;
_25.2 = _5;
Goto(bb5)
}
bb5 = {
_27.0 = _25.1 - _21;
_15 = -(-121_i8);
_27 = (_21, 1897562306_u32);
_27.1 = _20 as u32;
_27.0 = -_21;
_17 = !_13;
_18 = [_11,_9,_6,_4,_11];
match _26.0 {
313750480021411151046942031479878552481 => bb7,
_ => bb6
}
}
bb6 = {
_15 = !(-6_i8);
_1 = (*_16);
_3 = false as u64;
_14 = [(-8986834745623733355_i64),(-1744057534772707650_i64)];
_13 = _3;
_13 = !_3;
_7.0 = [_6,_6,_4,_9,_4,_6,_6];
_13 = !_3;
_5 = _10;
_19 = core::ptr::addr_of!(_15);
_17 = _3 >> _4;
_4 = 221832462460066278466446805534919649132_u128 as i16;
_9 = _6 << _6;
RET = '\u{d32d5}';
_18 = [_9,_6,_9,_6,_6];
_7.0 = [_9,_6,_9,_6,_6,_9,_9];
_10 = [_9,_9,_9,_6,_6];
RET = '\u{d1ecf}';
_16 = core::ptr::addr_of_mut!((*_16));
_13 = 32816_u16 as u64;
_13 = _17 * _17;
_17 = _13 | _13;
_3 = _13;
Call(_5 = core::intrinsics::transmute(_12), ReturnTo(bb2), UnwindUnreachable())
}
bb7 = {
_3 = _17 & _13;
match _26.2 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb5,
4566765333450669234 => bb8,
_ => bb6
}
}
bb8 = {
_30 = core::ptr::addr_of_mut!(_7.0);
_14 = [_26.2,_26.2];
_23 = [_26.2,_26.2];
match _26.2 {
0 => bb3,
1 => bb7,
2 => bb9,
4566765333450669234 => bb11,
_ => bb10
}
}
bb9 = {
_10 = _8;
_11 = _9 << _9;
_19 = core::ptr::addr_of!(_15);
_15 = _13 as i8;
_1 = [_6,_9,_11,_6,_9,_9,_11,_4];
_19 = core::ptr::addr_of!(_15);
_18 = [_6,_4,_11,_4,_11];
_23 = _14;
_18 = [_6,_6,_4,_4,_11];
_13 = 258317170741360268108973402499109838964_u128 as u64;
_3 = (-1772647772_i32) as u64;
_21 = 13627828265793073645_usize as f32;
_15 = !30_i8;
_17 = 128914210253906488672332052751151008129_u128 as u64;
_20 = -94_isize;
_26 = ((-26531886899527312416432575951889658975_i128), RET, 4566765333450669234_i64);
_8 = [_9,_4,_9,_11,_11];
_4 = _6;
Goto(bb4)
}
bb10 = {
_15 = !(-6_i8);
_1 = (*_16);
_3 = false as u64;
_14 = [(-8986834745623733355_i64),(-1744057534772707650_i64)];
_13 = _3;
_13 = !_3;
_7.0 = [_6,_6,_4,_9,_4,_6,_6];
_13 = !_3;
_5 = _10;
_19 = core::ptr::addr_of!(_15);
_17 = _3 >> _4;
_4 = 221832462460066278466446805534919649132_u128 as i16;
_9 = _6 << _6;
RET = '\u{d32d5}';
_18 = [_9,_6,_9,_6,_6];
_7.0 = [_9,_6,_9,_6,_6,_9,_9];
_10 = [_9,_9,_9,_6,_6];
RET = '\u{d1ecf}';
_16 = core::ptr::addr_of_mut!((*_16));
_13 = 32816_u16 as u64;
_13 = _17 * _17;
_17 = _13 | _13;
_3 = _13;
Call(_5 = core::intrinsics::transmute(_12), ReturnTo(bb2), UnwindUnreachable())
}
bb11 = {
_25.2 = _8;
_33 = 12828_u16 as u32;
_18 = _12;
_28 = _26.0 as f64;
_25 = (_6, _27.0, _10);
match _26.2 {
0 => bb10,
1 => bb12,
2 => bb13,
3 => bb14,
4566765333450669234 => bb16,
_ => bb15
}
}
bb12 = {
_10 = _8;
_11 = _9 << _9;
_19 = core::ptr::addr_of!(_15);
_15 = _13 as i8;
_1 = [_6,_9,_11,_6,_9,_9,_11,_4];
_19 = core::ptr::addr_of!(_15);
_18 = [_6,_4,_11,_4,_11];
_23 = _14;
_18 = [_6,_6,_4,_4,_11];
_13 = 258317170741360268108973402499109838964_u128 as u64;
_3 = (-1772647772_i32) as u64;
_21 = 13627828265793073645_usize as f32;
_15 = !30_i8;
_17 = 128914210253906488672332052751151008129_u128 as u64;
_20 = -94_isize;
_26 = ((-26531886899527312416432575951889658975_i128), RET, 4566765333450669234_i64);
_8 = [_9,_4,_9,_11,_11];
_4 = _6;
Goto(bb4)
}
bb13 = {
_15 = !(-6_i8);
_1 = (*_16);
_3 = false as u64;
_14 = [(-8986834745623733355_i64),(-1744057534772707650_i64)];
_13 = _3;
_13 = !_3;
_7.0 = [_6,_6,_4,_9,_4,_6,_6];
_13 = !_3;
_5 = _10;
_19 = core::ptr::addr_of!(_15);
_17 = _3 >> _4;
_4 = 221832462460066278466446805534919649132_u128 as i16;
_9 = _6 << _6;
RET = '\u{d32d5}';
_18 = [_9,_6,_9,_6,_6];
_7.0 = [_9,_6,_9,_6,_6,_9,_9];
_10 = [_9,_9,_9,_6,_6];
RET = '\u{d1ecf}';
_16 = core::ptr::addr_of_mut!((*_16));
_13 = 32816_u16 as u64;
_13 = _17 * _17;
_17 = _13 | _13;
_3 = _13;
Call(_5 = core::intrinsics::transmute(_12), ReturnTo(bb2), UnwindUnreachable())
}
bb14 = {
_30 = core::ptr::addr_of_mut!(_7.0);
_14 = [_26.2,_26.2];
_23 = [_26.2,_26.2];
match _26.2 {
0 => bb3,
1 => bb7,
2 => bb9,
4566765333450669234 => bb11,
_ => bb10
}
}
bb15 = {
_25.1 = _21;
_27.0 = -_21;
_25.2 = _5;
Goto(bb5)
}
bb16 = {
_34 = -_26.0;
_8 = [_11,_11,_4,_4,_4];
_18 = [_4,_25.0,_9,_4,_4];
_23 = [_26.2,_26.2];
Goto(bb17)
}
bb17 = {
Call(_36 = dump_var(18_usize, 13_usize, Move(_13), 20_usize, Move(_20), 12_usize, Move(_12), 2_usize, Move(_2)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_36 = dump_var(18_usize, 11_usize, Move(_11), 23_usize, Move(_23), 33_usize, Move(_33), 3_usize, Move(_3)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_36 = dump_var(18_usize, 14_usize, Move(_14), 4_usize, Move(_4), 26_usize, Move(_26), 37_usize, _37), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn19(mut _1: f64,mut _2: char) -> u32 {
mir! {
type RET = u32;
let _3: u64;
let _4: *const u8;
let _5: f32;
let _6: Adt46;
let _7: [i16; 8];
let _8: Adt42;
let _9: char;
let _10: [char; 2];
let _11: [i16; 8];
let _12: Adt41;
let _13: u32;
let _14: char;
let _15: isize;
let _16: isize;
let _17: i128;
let _18: u128;
let _19: Adt54;
let _20: i8;
let _21: [char; 7];
let _22: (i16,);
let _23: Adt55;
let _24: f64;
let _25: [char; 2];
let _26: usize;
let _27: ();
let _28: ();
{
RET = !760890354_u32;
Goto(bb1)
}
bb1 = {
_2 = '\u{df96b}';
_2 = '\u{d2770}';
RET = true as u32;
_2 = '\u{ceb33}';
RET = 791230202_u32;
_1 = 122020164823141112009937049078489910238_u128 as f64;
RET = !1676474135_u32;
RET = 2848828564_u32 & 755757369_u32;
_2 = '\u{f49f8}';
_3 = !16955292098705658498_u64;
RET = !3423127562_u32;
_2 = '\u{fc5b0}';
_2 = '\u{a1fd7}';
_1 = 50_u8 as f64;
RET = 18336953320383720163_usize as u32;
RET = 1500464143_u32;
_3 = 14751350978181667219_u64;
_3 = !6215437784379912213_u64;
_1 = 194_u8 as f64;
_1 = _3 as f64;
RET = (-21795_i16) as u32;
_1 = (-4945316216807345739_i64) as f64;
_2 = '\u{5200}';
RET = 3900906174_u32;
RET = !2976270216_u32;
RET = !4122775423_u32;
_1 = 104245159055639487234296658371248614684_u128 as f64;
Goto(bb2)
}
bb2 = {
_2 = '\u{38121}';
RET = 386247717_i32 as u32;
RET = 3959941195_u32 * 889388276_u32;
RET = 26978912922532350069330826495395208353_u128 as u32;
_3 = !8515106761649363872_u64;
RET = 2886269968_u32;
RET = 0_usize as u32;
RET = !2216037600_u32;
_1 = (-919489553_i32) as f64;
RET = 7403951357020132213_usize as u32;
_1 = 253_u8 as f64;
Goto(bb3)
}
bb3 = {
_5 = (-30076_i16) as f32;
RET = false as u32;
_1 = 154141199519573277670746897457237599021_u128 as f64;
RET = _1 as u32;
_7 = [18372_i16,9467_i16,5155_i16,12737_i16,(-20041_i16),(-7711_i16),(-10224_i16),(-15911_i16)];
RET = 13191_u16 as u32;
RET = 3709736824_u32;
RET = 3009512594_u32 << _3;
RET = !3246159278_u32;
_1 = 23052197726822011481758223955765035272_u128 as f64;
RET = !1673959571_u32;
RET = 4053177938_u32;
_3 = 53179554481328139_u64;
_8 = Adt42::Variant0 { fld0: _7 };
_3 = RET as u64;
Goto(bb4)
}
bb4 = {
place!(Field::<[i16; 8]>(Variant(_8, 0), 0)) = [(-4911_i16),17255_i16,(-10445_i16),(-27417_i16),(-5395_i16),15209_i16,(-21257_i16),30020_i16];
_2 = '\u{59a48}';
_9 = _2;
RET = 1516543220_u32 | 759129244_u32;
_5 = (-1540127917_i32) as f32;
SetDiscriminant(_8, 2);
Goto(bb5)
}
bb5 = {
place!(Field::<[u8; 4]>(Variant(_8, 2), 2)) = [57_u8,245_u8,117_u8,43_u8];
RET = 5230519306241250757_i64 as u32;
_3 = !16290052670998813227_u64;
_7 = [26374_i16,(-8508_i16),10469_i16,(-1024_i16),(-3165_i16),18299_i16,2519_i16,676_i16];
RET = 239_u8 as u32;
place!(Field::<char>(Variant(_8, 2), 1)) = _9;
RET = 192246705_u32;
_2 = Field::<char>(Variant(_8, 2), 1);
RET = 2622721800_u32;
_7 = [(-31653_i16),25131_i16,6153_i16,(-13318_i16),31955_i16,21614_i16,15308_i16,15065_i16];
place!(Field::<*mut [i16; 8]>(Variant(_8, 2), 0)) = core::ptr::addr_of_mut!(_7);
match RET {
0 => bb1,
1 => bb2,
2622721800 => bb7,
_ => bb6
}
}
bb6 = {
_2 = '\u{38121}';
RET = 386247717_i32 as u32;
RET = 3959941195_u32 * 889388276_u32;
RET = 26978912922532350069330826495395208353_u128 as u32;
_3 = !8515106761649363872_u64;
RET = 2886269968_u32;
RET = 0_usize as u32;
RET = !2216037600_u32;
_1 = (-919489553_i32) as f64;
RET = 7403951357020132213_usize as u32;
_1 = 253_u8 as f64;
Goto(bb3)
}
bb7 = {
_9 = _2;
_7 = [17810_i16,(-23510_i16),(-1915_i16),(-28762_i16),9902_i16,31944_i16,30680_i16,15227_i16];
_12.fld0.2 = [(-6554_i16),26291_i16,20301_i16,30107_i16,(-26027_i16)];
place!(Field::<u64>(Variant(_8, 2), 3)) = _3;
place!(Field::<*mut [i16; 8]>(Variant(_8, 2), 0)) = core::ptr::addr_of_mut!(_7);
place!(Field::<[u8; 4]>(Variant(_8, 2), 2)) = [205_u8,31_u8,102_u8,179_u8];
place!(Field::<char>(Variant(_8, 2), 1)) = _2;
match RET {
2622721800 => bb9,
_ => bb8
}
}
bb8 = {
_2 = '\u{38121}';
RET = 386247717_i32 as u32;
RET = 3959941195_u32 * 889388276_u32;
RET = 26978912922532350069330826495395208353_u128 as u32;
_3 = !8515106761649363872_u64;
RET = 2886269968_u32;
RET = 0_usize as u32;
RET = !2216037600_u32;
_1 = (-919489553_i32) as f64;
RET = 7403951357020132213_usize as u32;
_1 = 253_u8 as f64;
Goto(bb3)
}
bb9 = {
place!(Field::<u64>(Variant(_8, 2), 3)) = _3 << _3;
_1 = 1_usize as f64;
_11 = _7;
match RET {
2622721800 => bb11,
_ => bb10
}
}
bb10 = {
_2 = '\u{38121}';
RET = 386247717_i32 as u32;
RET = 3959941195_u32 * 889388276_u32;
RET = 26978912922532350069330826495395208353_u128 as u32;
_3 = !8515106761649363872_u64;
RET = 2886269968_u32;
RET = 0_usize as u32;
RET = !2216037600_u32;
_1 = (-919489553_i32) as f64;
RET = 7403951357020132213_usize as u32;
_1 = 253_u8 as f64;
Goto(bb3)
}
bb11 = {
_15 = 9223372036854775807_isize | 17_isize;
_12.fld0.1 = 8368301104309816538_i64 as f32;
_6 = Adt46::Variant0 { fld0: false,fld1: _12.fld0.2 };
_8 = Adt42::Variant0 { fld0: _11 };
_12.fld0 = (15745_i16, _5, Field::<[i16; 5]>(Variant(_6, 0), 1));
_6 = Adt46::Variant0 { fld0: false,fld1: _12.fld0.2 };
_1 = _15 as f64;
_12.fld0 = ((-28222_i16), _5, Field::<[i16; 5]>(Variant(_6, 0), 1));
_13 = RET * RET;
_12.fld0.1 = _5 * _5;
RET = 6_usize as u32;
_16 = false as isize;
SetDiscriminant(_8, 1);
_21 = [_9,_2,_9,_9,_9,_2,_9];
RET = !_13;
_19.fld6 = _12.fld0.2;
_17 = 86455805843445338280424582570196806613_i128;
_15 = -_16;
_19.fld1 = (_17, _2, 6641755648225020229_i64);
place!(Field::<[i16; 5]>(Variant(_6, 0), 1)) = _12.fld0.2;
place!(Field::<[i64; 2]>(Variant(_8, 1), 0)) = [_19.fld1.2,_19.fld1.2];
_19.fld1.2 = (-809988475675229960_i64) ^ (-3320851522397529370_i64);
match _12.fld0.0 {
0 => bb6,
340282366920938463463374607431768183234 => bb13,
_ => bb12
}
}
bb12 = {
_5 = (-30076_i16) as f32;
RET = false as u32;
_1 = 154141199519573277670746897457237599021_u128 as f64;
RET = _1 as u32;
_7 = [18372_i16,9467_i16,5155_i16,12737_i16,(-20041_i16),(-7711_i16),(-10224_i16),(-15911_i16)];
RET = 13191_u16 as u32;
RET = 3709736824_u32;
RET = 3009512594_u32 << _3;
RET = !3246159278_u32;
_1 = 23052197726822011481758223955765035272_u128 as f64;
RET = !1673959571_u32;
RET = 4053177938_u32;
_3 = 53179554481328139_u64;
_8 = Adt42::Variant0 { fld0: _7 };
_3 = RET as u64;
Goto(bb4)
}
bb13 = {
_13 = !RET;
_2 = _19.fld1.1;
_19.fld0.1 = _12.fld0.0 as u32;
place!(Field::<f32>(Variant(_8, 1), 3)) = _12.fld0.1;
_7 = _11;
Goto(bb14)
}
bb14 = {
_4 = core::ptr::addr_of!(place!(Field::<u8>(Variant(_8, 1), 1)));
place!(Field::<[i16; 5]>(Variant(_6, 0), 1)) = [_12.fld0.0,_12.fld0.0,_12.fld0.0,_12.fld0.0,_12.fld0.0];
_19.fld1.0 = 4_usize as i128;
_23.fld1.fld1.1 = _19.fld1.1;
_23.fld1.fld1 = (_17, _19.fld1.1, _19.fld1.2);
_19.fld0 = (Field::<f32>(Variant(_8, 1), 3), _13);
_22 = (_12.fld0.0,);
_1 = RET as f64;
_19.fld1.1 = _9;
_22.0 = _12.fld0.0;
_23.fld1.fld6 = [_12.fld0.0,_12.fld0.0,_12.fld0.0,_22.0,_12.fld0.0];
place!(Field::<[i16; 5]>(Variant(_6, 0), 1)) = _23.fld1.fld6;
_23.fld3.fld2 = !_13;
Goto(bb15)
}
bb15 = {
Call(_27 = dump_var(19_usize, 9_usize, Move(_9), 2_usize, Move(_2), 22_usize, Move(_22), 11_usize, Move(_11)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_27 = dump_var(19_usize, 21_usize, Move(_21), 28_usize, _28, 28_usize, _28, 28_usize, _28), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
pub fn main() {
                fn0(std::hint::black_box(true), std::hint::black_box('\u{80edf}'), std::hint::black_box((-9223372036854775808_isize)), std::hint::black_box(65_i8), std::hint::black_box(463_i16), std::hint::black_box((-835185927_i32)), std::hint::black_box((-1518348002453338526_i64)), std::hint::black_box((-161273333478019190141821957151191700609_i128)), std::hint::black_box(4_usize), std::hint::black_box(211_u8), std::hint::black_box(40223_u16), std::hint::black_box(2726782159_u32), std::hint::black_box(469551473178750312_u64), std::hint::black_box(255404042400663871094288711934667172299_u128));
                
            }
#[derive(Debug)]
pub struct Adt40 {
fld0: (i16,),
fld1: *const bool,
fld2: u32,
}
#[derive(Debug,Copy,Clone)]
pub struct Adt41 {
fld0: (i16, f32, [i16; 5]),
}
#[derive(Debug,Copy,Clone)]
pub enum Adt42 {
Variant0{
fld0: [i16; 8],

},
Variant1{
fld0: [i64; 2],
fld1: u8,
fld2: ([i16; 7],),
fld3: f32,
fld4: *mut [i16; 8],
fld5: i32,
fld6: i128,

},
Variant2{
fld0: *mut [i16; 8],
fld1: char,
fld2: [u8; 4],
fld3: u64,
fld4: *const i8,

},
Variant3{
fld0: *const i8,
fld1: char,
fld2: Adt41,
fld3: usize,
fld4: *mut [i16; 8],

}}
#[derive(Debug)]
pub struct Adt43 {
fld0: (i16,),
fld1: f64,
fld2: (i128, char, i64),
fld3: (i16, f32, [i16; 5]),
fld4: ([u8; 4], *const u8, usize, i8),
fld5: *const i8,
fld6: i64,
fld7: *const u8,
}
#[derive(Debug)]
pub enum Adt44 {
Variant0{
fld0: (i16,),
fld1: char,
fld2: ([i16; 7],),
fld3: (i128, char, i64),
fld4: i128,
fld5: Adt40,

},
Variant1{
fld0: [i16; 7],
fld1: ([i16; 7],),

}}
#[derive(Debug,Copy,Clone)]
pub enum Adt45 {
Variant0{
fld0: *mut [i16; 8],
fld1: *const i16,
fld2: u8,
fld3: *mut (i16, f32, [i16; 5]),
fld4: (i16, f32, [i16; 5]),
fld5: i32,
fld6: [i16; 8],

},
Variant1{
fld0: [i16; 8],
fld1: ([u8; 4], *const u8, usize, i8),
fld2: u64,
fld3: f32,
fld4: i128,

}}
#[derive(Debug)]
pub enum Adt46 {
Variant0{
fld0: bool,
fld1: [i16; 5],

},
Variant1{
fld0: (i128, char, i64),
fld1: u64,
fld2: u32,
fld3: Adt41,
fld4: [char; 2],

},
Variant2{
fld0: u32,
fld1: char,
fld2: Adt45,
fld3: Adt41,
fld4: *mut [i16; 8],
fld5: i32,
fld6: i64,
fld7: *const bool,

},
Variant3{
fld0: bool,
fld1: char,
fld2: u128,
fld3: u16,
fld4: [i16; 5],
fld5: *const i8,
fld6: Adt44,

}}
#[derive(Debug,Copy,Clone)]
pub enum Adt47 {
Variant0{
fld0: ([i16; 7],),
fld1: f64,
fld2: *const bool,
fld3: i8,

},
Variant1{
fld0: [char; 2],
fld1: *const i16,
fld2: (i128, char, i64),
fld3: i8,
fld4: (f32, u32),
fld5: [u8; 4],
fld6: i64,

}}
#[derive(Debug)]
pub struct Adt48 {
fld0: *const i8,
fld1: *const i16,
}
#[derive(Debug)]
pub enum Adt49 {
Variant0{
fld0: [char; 7],
fld1: Adt42,
fld2: Adt44,
fld3: *mut (i16, f32, [i16; 5]),
fld4: Adt40,
fld5: i32,
fld6: u128,

},
Variant1{
fld0: bool,
fld1: [i16; 8],
fld2: Adt44,
fld3: f64,
fld4: u32,
fld5: Adt48,

}}
#[derive(Debug)]
pub enum Adt50 {
Variant0{
fld0: u64,
fld1: *const bool,
fld2: Adt48,
fld3: ([i16; 7],),

},
Variant1{
fld0: ([i16; 7],),

},
Variant2{
fld0: Adt41,
fld1: [char; 7],
fld2: *mut (i16, f32, [i16; 5]),
fld3: i8,
fld4: [i16; 5],
fld5: Adt43,
fld6: (i128, char, i64),

},
Variant3{
fld0: (i16, f32, [i16; 5]),
fld1: Adt42,
fld2: *mut (i16, f32, [i16; 5]),

}}
#[derive(Debug)]
pub enum Adt51 {
Variant0{
fld0: *const i16,
fld1: (i128, char, i64),
fld2: Adt40,

},
Variant1{
fld0: Adt44,
fld1: Adt42,
fld2: isize,
fld3: *const bool,

},
Variant2{
fld0: Adt42,
fld1: Adt49,
fld2: Adt46,
fld3: f64,
fld4: ([i16; 7],),
fld5: Adt48,
fld6: i64,

},
Variant3{
fld0: f32,

}}
#[derive(Debug)]
pub enum Adt52 {
Variant0{
fld0: u32,
fld1: *mut [i16; 8],
fld2: isize,
fld3: [i16; 5],
fld4: [i16; 8],
fld5: u16,
fld6: u128,

},
Variant1{
fld0: i64,
fld1: usize,
fld2: Adt48,
fld3: [char; 2],
fld4: i16,

},
Variant2{
fld0: ([i16; 7],),
fld1: *mut [i16; 7],

}}
#[derive(Debug)]
pub enum Adt53 {
Variant0{
fld0: ([i16; 7],),
fld1: u64,
fld2: isize,
fld3: Adt50,
fld4: *mut (i16, f32, [i16; 5]),
fld5: Adt51,

},
Variant1{
fld0: [u8; 4],
fld1: (i16, f32, [i16; 5]),

},
Variant2{
fld0: *mut [i16; 8],
fld1: char,
fld2: Adt51,
fld3: (f32, u32),
fld4: i32,

}}
#[derive(Debug)]
pub struct Adt54 {
fld0: (f32, u32),
fld1: (i128, char, i64),
fld2: Adt49,
fld3: Adt50,
fld4: Adt45,
fld5: ([i16; 7],),
fld6: [i16; 5],
}
#[derive(Debug)]
pub struct Adt55 {
fld0: [i16; 5],
fld1: Adt54,
fld2: [u8; 4],
fld3: Adt40,
fld4: i16,
fld5: i32,
fld6: i64,
fld7: Adt45,
}
#[derive(Debug)]
pub enum Adt56 {
Variant0{
fld0: u128,

},
Variant1{
fld0: Adt51,
fld1: Adt42,
fld2: *const i16,
fld3: *const i8,
fld4: ([u8; 4], *const u8, usize, i8),
fld5: (i16, f32, [i16; 5]),
fld6: *const bool,

}}

