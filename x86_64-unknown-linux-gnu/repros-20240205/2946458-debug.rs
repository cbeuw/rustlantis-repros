#![recursion_limit = "1024"]
    #![feature(custom_mir, core_intrinsics, const_hash)]
    #![allow(unused_parens, unused_assignments, overflowing_literals)]
    extern crate core;
    use core::intrinsics::mir::*;

    use std::fmt::Debug;

    #[inline(never)]
    fn dump_var(
        f: usize,
        var0: usize, val0: impl Debug,
        var1: usize, val1: impl Debug,
        var2: usize, val2: impl Debug,
        var3: usize, val3: impl Debug,
    ) {
        println!("fn{f}:_{var0} = {val0:?}\n_{var1} = {val1:?}\n_{var2} = {val2:?}\n_{var3} = {val3:?}");
    }
    #[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn0(mut _1: usize,mut _2: u128,mut _3: isize) -> ([u16; 3],) {
mir! {
type RET = ([u16; 3],);
let _4: *mut f32;
let _5: isize;
let _6: (char, [u32; 5]);
let _7: [i8; 7];
let _8: isize;
let _9: isize;
let _10: f64;
let _11: i8;
let _12: isize;
let _13: (char, u16, [i32; 2], u32, u128);
let _14: ();
let _15: ();
{
RET.0 = [2972_u16,40607_u16,29001_u16];
RET.0 = [2386_u16,15534_u16,26647_u16];
_3 = -9223372036854775807_isize;
_1 = 12386222461569221673_usize;
_3 = -(-9223372036854775808_isize);
_1 = !1_usize;
_1 = !6296339048750791295_usize;
_2 = 193901764967526120946166080768694139918_u128 >> _1;
RET.0 = [11717_u16,47000_u16,51993_u16];
_3 = !9223372036854775807_isize;
_3 = -(-93_isize);
_5 = _3;
RET.0 = [12108_u16,12619_u16,3531_u16];
Call(RET.0 = fn1(_3, _2, _5, _2, _1, _2, _5, _3, _5, _5, _5, _3, _5, _3, _5, _1), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_1 = 5436705013734572369_usize & 12350595798254540179_usize;
RET.0 = [29258_u16,19034_u16,22709_u16];
_1 = 6_usize;
_2 = 40013745117643081806731937640492643776_u128;
_2 = 173704953858103899744166025899578569783_u128 >> _3;
_6.1 = [176775854_u32,2889349011_u32,1576122619_u32,3174635238_u32,3109541151_u32];
_1 = true as usize;
_1 = 30398_i16 as usize;
_3 = _5;
_7 = [86_i8,(-48_i8),(-55_i8),32_i8,(-112_i8),7_i8,43_i8];
_2 = !134551776776838163217082761725972375302_u128;
_7 = [(-59_i8),50_i8,(-127_i8),73_i8,(-13_i8),84_i8,(-17_i8)];
_2 = 127187186178077941023287345368524449871_u128;
_6.0 = '\u{43d2}';
_1 = 2165176672009970356_usize;
_5 = _3;
_6.0 = '\u{39ea}';
_1 = 4_usize;
_6.1[_1] = 61_u8 as u32;
_7[_1] = -(-97_i8);
match _2 {
0 => bb2,
1 => bb3,
2 => bb4,
127187186178077941023287345368524449871 => bb6,
_ => bb5
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
_2 = 117399824442609657453367915224493183584_u128 * 336929489859020252400669495629285881246_u128;
_6.1[_1] = !476009951_u32;
_6.0 = '\u{4cc3a}';
_7[_1] = -(-123_i8);
_7[_1] = (-145151855505090566170988065972635725162_i128) as i8;
RET.0 = [62586_u16,36208_u16,26128_u16];
Goto(bb7)
}
bb7 = {
_6.0 = '\u{5c73a}';
match _1 {
0 => bb3,
4 => bb8,
_ => bb5
}
}
bb8 = {
_8 = !_5;
_7 = [77_i8,118_i8,120_i8,(-95_i8),(-72_i8),(-29_i8),(-4_i8)];
RET.0 = [10580_u16,15917_u16,48022_u16];
_9 = _7[_1] as isize;
_1 = 3_usize;
RET.0 = [34998_u16,19991_u16,17925_u16];
_3 = -_8;
_8 = _9 ^ _9;
RET.0 = [4405_u16,43924_u16,61074_u16];
RET.0 = [45086_u16,64089_u16,39670_u16];
Goto(bb9)
}
bb9 = {
RET.0 = [58836_u16,30861_u16,49011_u16];
RET.0 = [52902_u16,43084_u16,349_u16];
_5 = -_8;
_8 = _5 + _5;
_7 = [(-112_i8),28_i8,120_i8,22_i8,60_i8,(-128_i8),(-87_i8)];
_8 = _5 >> _6.1[_1];
_5 = 22543_u16 as isize;
_10 = _1 as f64;
_3 = _8 ^ _8;
_13.1 = 36589_u16 << _3;
_6.1[_1] = 1104238421_u32 << _7[_1];
_13.2 = [1021985646_i32,(-1481120458_i32)];
RET.0 = [_13.1,_13.1,_13.1];
_13.4 = 7339_i16 as u128;
_7[_1] = -29_i8;
_9 = _1 as isize;
_5 = _8 >> _13.1;
_13.4 = 2867038185901510762_u64 as u128;
_6.1 = [2901792481_u32,90807604_u32,1683363854_u32,2830272000_u32,3629615662_u32];
_13.2 = [(-723620327_i32),(-2134188579_i32)];
_7[_1] = (-26_i8) | 89_i8;
_9 = _5;
_13.2 = [387279021_i32,185067532_i32];
_10 = (-6834_i16) as f64;
_11 = _7[_1] ^ _7[_1];
_6.1[_1] = !3553985063_u32;
Goto(bb10)
}
bb10 = {
Call(_14 = dump_var(0_usize, 1_usize, Move(_1), 2_usize, Move(_2), 6_usize, Move(_6), 7_usize, Move(_7)), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn1(mut _1: isize,mut _2: u128,mut _3: isize,mut _4: u128,mut _5: usize,mut _6: u128,mut _7: isize,mut _8: isize,mut _9: isize,mut _10: isize,mut _11: isize,mut _12: isize,mut _13: isize,mut _14: isize,mut _15: isize,mut _16: usize) -> [u16; 3] {
mir! {
type RET = [u16; 3];
let _17: isize;
let _18: Adt47;
let _19: f64;
let _20: Adt53;
let _21: Adt55;
let _22: (bool, u64, f64, f32);
let _23: [i32; 2];
let _24: f32;
let _25: [u32; 5];
let _26: f64;
let _27: (*mut [u32; 5], i8);
let _28: bool;
let _29: [i8; 7];
let _30: char;
let _31: isize;
let _32: (char, [u32; 5]);
let _33: f64;
let _34: ([i32; 2], f64);
let _35: Adt55;
let _36: f64;
let _37: i16;
let _38: (bool, u64, f64, f32);
let _39: isize;
let _40: (u32,);
let _41: (char, u16, [i32; 2], u32, u128);
let _42: Adt54;
let _43: i16;
let _44: u16;
let _45: i64;
let _46: [i8; 7];
let _47: [i8; 7];
let _48: [usize; 4];
let _49: [usize; 4];
let _50: u64;
let _51: Adt57;
let _52: char;
let _53: char;
let _54: bool;
let _55: ([i32; 2], f64);
let _56: bool;
let _57: ([u16; 3],);
let _58: f64;
let _59: isize;
let _60: u64;
let _61: (u32,);
let _62: [i32; 2];
let _63: u32;
let _64: bool;
let _65: f32;
let _66: [i8; 7];
let _67: [i8; 7];
let _68: usize;
let _69: Adt54;
let _70: [u32; 5];
let _71: f32;
let _72: *const &'static usize;
let _73: (*mut [u32; 5], u128, u32, *mut [u32; 5]);
let _74: bool;
let _75: ([i32; 2], f64);
let _76: (u32,);
let _77: i64;
let _78: i8;
let _79: (*mut [u32; 5], u128, u32, *mut [u32; 5]);
let _80: Adt42;
let _81: i64;
let _82: i128;
let _83: bool;
let _84: isize;
let _85: i16;
let _86: ();
let _87: ();
{
_1 = _10 ^ _12;
_15 = -_8;
_13 = _8 + _15;
_3 = _7;
_9 = 8208653204154511236_u64 as isize;
_11 = 41014_u16 as isize;
_10 = 1593463904_u32 as isize;
RET = [55807_u16,13189_u16,999_u16];
_8 = _13 | _15;
_9 = true as isize;
_23 = [(-415598890_i32),(-873652967_i32)];
RET = [55164_u16,56917_u16,25207_u16];
_11 = _7 >> _6;
_25 = [1643808737_u32,2541238342_u32,519749896_u32,137032185_u32,147500196_u32];
_22.2 = _5 as f64;
_12 = _1;
_22.0 = true;
_6 = _2 << _2;
_22.3 = (-996273192674059871_i64) as f32;
Goto(bb1)
}
bb1 = {
_5 = !_16;
_13 = _3 ^ _1;
_9 = -_12;
_6 = _2;
_7 = 840475626_u32 as isize;
_22.3 = 96_i8 as f32;
_27.0 = core::ptr::addr_of_mut!(_25);
Call(_22.1 = fn2(_12, _6, _13, _13, _6, _8), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_6 = _4 - _4;
_17 = (-74343213197468294445315324567966923370_i128) as isize;
_27.1 = (-96_i8);
_27.1 = (-70_i8);
_29 = [_27.1,_27.1,_27.1,_27.1,_27.1,_27.1,_27.1];
_14 = 4610_u16 as isize;
_24 = -_22.3;
_32.1 = [664126329_u32,1935177620_u32,430786728_u32,3983599392_u32,3316057606_u32];
_4 = _2;
_27.1 = !16_i8;
_32.0 = '\u{f0591}';
_22.1 = (-26637432827486237749812172616362388904_i128) as u64;
_32 = ('\u{21a01}', _25);
_1 = _13;
_10 = _15;
_8 = _2 as isize;
_32.0 = '\u{57ff8}';
_22.2 = 19364196001324536382915003848307042490_i128 as f64;
Goto(bb3)
}
bb3 = {
_31 = !_13;
_7 = _27.1 as isize;
_28 = _22.0;
_14 = -_12;
RET = [29976_u16,17800_u16,40840_u16];
_22.3 = -_24;
Goto(bb4)
}
bb4 = {
_15 = -_1;
_10 = -_12;
_34.1 = _22.2;
_34.1 = -_22.2;
_33 = 47_u8 as f64;
_37 = 28926_i16 ^ 25311_i16;
_32 = ('\u{cbae6}', _25);
_38.2 = -_22.2;
_38.3 = _22.3;
_38 = _22;
_32.1 = [2760767666_u32,1340821860_u32,3266435153_u32,3842912292_u32,1316169445_u32];
_6 = _2;
_33 = _34.1 * _38.2;
_17 = !_11;
_22.0 = _17 > _13;
_22 = (_38.0, _38.1, _33, _38.3);
_34 = (_23, _33);
_41.4 = !_4;
Goto(bb5)
}
bb5 = {
_41.4 = 20965_u16 as u128;
_32 = ('\u{47192}', _25);
_12 = -_10;
_43 = _37 ^ _37;
Goto(bb6)
}
bb6 = {
_36 = _6 as f64;
_25 = _32.1;
_38 = (_22.0, _22.1, _22.2, _22.3);
_25 = _32.1;
_33 = _27.1 as f64;
_10 = !_13;
_22.1 = !_38.1;
_37 = _43 * _43;
_7 = !_11;
_40 = (959269477_u32,);
_40 = (4168617736_u32,);
_41.0 = _32.0;
_15 = -_11;
_38 = (_22.0, _22.1, _33, _22.3);
_34.1 = _36;
_24 = _22.3 - _38.3;
_22.1 = _38.0 as u64;
_9 = _8 - _7;
_13 = _17;
_2 = !_6;
_34.1 = _36;
_41 = (_32.0, 33445_u16, _34.0, _40.0, _2);
_34 = (_23, _22.2);
_41.0 = _32.0;
_41.3 = _22.1 as u32;
_22.0 = _41.1 < _41.1;
Goto(bb7)
}
bb7 = {
_28 = !_22.0;
_34.0 = [(-1887805646_i32),1508244890_i32];
_41 = (_32.0, 15323_u16, _23, _40.0, _6);
_34.1 = _38.2 - _38.2;
_49 = [_16,_16,_5,_16];
_40 = (_41.3,);
_49 = [_5,_5,_5,_5];
_41.3 = _5 as u32;
_40 = (_41.3,);
_50 = _22.1 * _38.1;
_29 = [_27.1,_27.1,_27.1,_27.1,_27.1,_27.1,_27.1];
_28 = !_22.0;
_12 = _7 | _17;
_13 = _9 + _17;
_22.0 = !_28;
_15 = !_12;
_34.0 = [(-1017756476_i32),1915538370_i32];
_41.1 = _24 as u16;
_33 = -_36;
Goto(bb8)
}
bb8 = {
_47 = [_27.1,_27.1,_27.1,_27.1,_27.1,_27.1,_27.1];
_44 = _41.1;
_31 = !_7;
_19 = _22.2;
_40 = (_41.3,);
_38.0 = _28;
_26 = _33 - _33;
_25 = [_41.3,_41.3,_41.3,_40.0,_40.0];
_46 = [_27.1,_27.1,_27.1,_27.1,_27.1,_27.1,_27.1];
_22.2 = _36;
_40.0 = _41.3 >> _3;
_34.1 = _36 - _26;
_31 = -_10;
_41.4 = _2 * _4;
_10 = -_1;
_34 = (_23, _26);
Goto(bb9)
}
bb9 = {
_34 = (_23, _22.2);
_7 = _10;
_46 = [_27.1,_27.1,_27.1,_27.1,_27.1,_27.1,_27.1];
_40.0 = !_41.3;
_55 = _34;
_52 = _41.0;
_57 = (RET,);
_48 = _49;
_41.3 = _40.0 | _40.0;
_40.0 = _41.1 as u32;
_55 = (_34.0, _26);
_21 = Adt55::Variant1 { fld0: _44,fld1: _41 };
_27.1 = (-37_i8) & 109_i8;
_22.2 = -_19;
_27.0 = core::ptr::addr_of_mut!(_25);
place!(Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_21, 1), 1)) = _41;
_38 = _22;
_58 = _34.1;
_61 = (_40.0,);
_52 = Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_21, 1), 1).0;
place!(Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_21, 1), 1)) = (_32.0, Field::<u16>(Variant(_21, 1), 0), _23, _41.3, _4);
_64 = _22.0;
_47 = [_27.1,_27.1,_27.1,_27.1,_27.1,_27.1,_27.1];
Goto(bb10)
}
bb10 = {
_31 = -_12;
place!(Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_21, 1), 1)).3 = _41.3 << _61.0;
_14 = _7 >> _10;
_60 = _27.1 as u64;
place!(Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_21, 1), 1)).0 = _32.0;
_11 = Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_21, 1), 1).3 as isize;
_53 = _41.0;
_57.0 = [_44,_41.1,Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_21, 1), 1).1];
_65 = -_24;
_11 = _31;
_14 = _11 * _1;
_8 = _1;
Goto(bb11)
}
bb11 = {
_70 = [_61.0,_61.0,_61.0,_41.3,_40.0];
_56 = _53 >= Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_21, 1), 1).0;
_10 = Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_21, 1), 1).3 as isize;
SetDiscriminant(_21, 1);
_27.1 = -(-102_i8);
_46 = [_27.1,_27.1,_27.1,_27.1,_27.1,_27.1,_27.1];
_55.0 = [1588337288_i32,1541744519_i32];
Goto(bb12)
}
bb12 = {
_12 = _13;
place!(Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_21, 1), 1)).2 = [1193624656_i32,129403303_i32];
_41 = (_52, _44, _34.0, _61.0, _2);
_35 = Adt55::Variant1 { fld0: _44,fld1: _41 };
_16 = _5;
_65 = _24 - _24;
_41.2 = _55.0;
_67 = [_27.1,_27.1,_27.1,_27.1,_27.1,_27.1,_27.1];
place!(Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_35, 1), 1)).3 = !_40.0;
RET = [Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_35, 1), 1).1,Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_35, 1), 1).1,_44];
_41.4 = Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_35, 1), 1).4;
_36 = _19;
_61 = _40;
_73.1 = !_4;
place!(Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_21, 1), 1)).3 = _40.0 >> Field::<u16>(Variant(_35, 1), 0);
_55.1 = -_33;
_40 = (Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_21, 1), 1).3,);
place!(Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_35, 1), 1)).4 = _41.4 * _4;
_38.0 = !_64;
_26 = _50 as f64;
_74 = !_38.0;
Goto(bb13)
}
bb13 = {
_55 = _34;
place!(Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_35, 1), 1)).1 = Field::<u16>(Variant(_35, 1), 0) << _13;
_24 = _22.3 - _65;
_12 = _9;
_27.1 = _12 as i8;
_73 = (_27.0, _6, _40.0, _27.0);
_23 = [(-943481672_i32),(-1774227360_i32)];
_9 = _15 ^ _7;
_61 = (Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_35, 1), 1).3,);
_76.0 = _40.0;
SetDiscriminant(_35, 2);
_31 = !_9;
_41.1 = !_44;
_73.0 = _27.0;
_69 = Adt54::Variant3 { fld0: _9,fld1: _50 };
_24 = _65 * _65;
_32.0 = _52;
place!(Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_21, 1), 1)).0 = _32.0;
_34.1 = _22.2;
_47 = _67;
place!(Field::<*mut f32>(Variant(_35, 2), 2)) = core::ptr::addr_of_mut!(_71);
place!(Field::<Adt49>(Variant(_35, 2), 0)).fld3 = [_5,_16,_5,_5];
_5 = _16 >> _11;
place!(Field::<Adt49>(Variant(_35, 2), 0)).fld2 = _73.3;
_70 = [_76.0,_61.0,Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_21, 1), 1).3,_41.3,Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_21, 1), 1).3];
place!(Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_21, 1), 1)) = _41;
Call(_15 = core::intrinsics::transmute(_3), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
SetDiscriminant(_69, 0);
place!(Field::<Adt49>(Variant(_35, 2), 0)).fld0 = 136_u8;
_29 = [_27.1,_27.1,_27.1,_27.1,_27.1,_27.1,_27.1];
_39 = _65 as isize;
_7 = _41.3 as isize;
_37 = 66699226276500184220070321207962399259_i128 as i16;
place!(Field::<(bool, u64, f64, f32)>(Variant(_69, 0), 2)).2 = _55.1;
_63 = _24 as u32;
_62 = [1284333181_i32,1464411914_i32];
Goto(bb15)
}
bb15 = {
Call(_86 = dump_var(1_usize, 9_usize, Move(_9), 52_usize, Move(_52), 37_usize, Move(_37), 1_usize, Move(_1)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_86 = dump_var(1_usize, 5_usize, Move(_5), 31_usize, Move(_31), 25_usize, Move(_25), 63_usize, Move(_63)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_86 = dump_var(1_usize, 14_usize, Move(_14), 4_usize, Move(_4), 43_usize, Move(_43), 56_usize, Move(_56)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_86 = dump_var(1_usize, 46_usize, Move(_46), 6_usize, Move(_6), 44_usize, Move(_44), 10_usize, Move(_10)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_86 = dump_var(1_usize, 48_usize, Move(_48), 61_usize, Move(_61), 49_usize, Move(_49), 62_usize, Move(_62)), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Call(_86 = dump_var(1_usize, 12_usize, Move(_12), 8_usize, Move(_8), 67_usize, Move(_67), 87_usize, _87), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn2(mut _1: isize,mut _2: u128,mut _3: isize,mut _4: isize,mut _5: u128,mut _6: isize) -> u64 {
mir! {
type RET = u64;
let _7: *const i8;
let _8: [u32; 5];
let _9: u8;
let _10: [i8; 7];
let _11: *const *mut [u32; 5];
let _12: *const &'static usize;
let _13: bool;
let _14: (bool, u64, f64, f32);
let _15: [usize; 4];
let _16: (char, u16, [i32; 2], u32, u128);
let _17: (char, u16, [i32; 2], u32, u128);
let _18: isize;
let _19: u16;
let _20: ([u16; 3],);
let _21: f64;
let _22: Adt54;
let _23: u128;
let _24: (bool, u64, f64, f32);
let _25: isize;
let _26: (bool, u64, f64, f32);
let _27: *const (bool, u64, f64, f32);
let _28: &'static usize;
let _29: [u32; 5];
let _30: isize;
let _31: ();
let _32: ();
{
RET = (-51_i8) as u64;
_5 = _2;
_5 = _2;
_2 = (-22344_i16) as u128;
_4 = -_1;
RET = 12853266997351947612_u64 >> _5;
RET = (-27881_i16) as u64;
RET = 144_u8 as u64;
_3 = _6 ^ _6;
_1 = -_3;
RET = (-28599_i16) as u64;
_5 = _2 ^ _2;
RET = 10607758462424932703_u64 - 6960012509814284938_u64;
_3 = -_1;
_1 = _5 as isize;
_6 = -_4;
_1 = _3 ^ _4;
_3 = !_1;
_2 = _6 as u128;
Goto(bb1)
}
bb1 = {
RET = 14599379189249773971_u64 | 9988737336980345083_u64;
_2 = _5;
_1 = '\u{af455}' as isize;
_6 = !_3;
_3 = _6;
_3 = !_4;
RET = 4025027582956792320_u64;
_6 = _4 * _4;
_9 = 111_u8;
Call(_8 = fn3(_6, _6), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_5 = _2;
_1 = _6;
_6 = _3;
_6 = _1 ^ _1;
_2 = !_5;
_10 = [116_i8,40_i8,(-108_i8),(-36_i8),45_i8,(-25_i8),85_i8];
_1 = -_3;
_3 = -_6;
_2 = _5;
_1 = _6;
_6 = _3;
Goto(bb3)
}
bb3 = {
RET = (-106_i8) as u64;
_6 = _1;
_5 = _2 | _2;
_2 = (-890994704_i32) as u128;
_4 = 63400_u16 as isize;
RET = 60471_u16 as u64;
_9 = 5_u8 | 147_u8;
_5 = _2;
_10 = [(-111_i8),43_i8,64_i8,(-118_i8),114_i8,58_i8,68_i8];
_3 = _1 & _1;
_8 = [121251722_u32,2549840387_u32,2061617478_u32,2544017614_u32,4004080322_u32];
_1 = _3;
_1 = 1660792965_i32 as isize;
Goto(bb4)
}
bb4 = {
_8 = [2205976333_u32,2504185177_u32,1512526639_u32,2172806375_u32,2284377059_u32];
_1 = _3;
_10 = [125_i8,97_i8,(-29_i8),(-84_i8),(-22_i8),(-48_i8),(-9_i8)];
Goto(bb5)
}
bb5 = {
RET = 7166601640537971696_u64 >> _1;
_10 = [(-93_i8),(-92_i8),(-77_i8),(-26_i8),3_i8,112_i8,(-38_i8)];
RET = !144108762436522954_u64;
_3 = _1;
_5 = _2 * _2;
_5 = _2;
_1 = !_3;
_9 = 51_u8;
_5 = !_2;
_6 = _1 - _3;
_3 = _6;
_13 = !false;
_14.1 = RET << _6;
_5 = !_2;
_8 = [3919554641_u32,802704950_u32,3833148010_u32,2006087428_u32,1590126981_u32];
_16.4 = _5;
_1 = _3;
_15 = [13665383764497229941_usize,4_usize,2_usize,2_usize];
_16.4 = !_5;
_14.1 = RET + RET;
_17.2 = [927033589_i32,1069974140_i32];
Goto(bb6)
}
bb6 = {
_4 = -_3;
_17.3 = 1938_u16 as u32;
_9 = 137_u8 >> _3;
_17.1 = _13 as u16;
RET = _14.1 & _14.1;
_6 = _4;
_17.4 = (-114459788723168774990064465586059775657_i128) as u128;
_8 = [_17.3,_17.3,_17.3,_17.3,_17.3];
_10 = [(-108_i8),112_i8,15_i8,81_i8,(-51_i8),17_i8,(-48_i8)];
_2 = _5 | _17.4;
_14.0 = !_13;
_17.1 = !42321_u16;
_17.0 = '\u{e39fc}';
_16.0 = _17.0;
_16.1 = _17.1;
_19 = _16.1 - _17.1;
_17.2 = [529123619_i32,75209927_i32];
_16 = (_17.0, _19, _17.2, _17.3, _2);
_16.3 = _17.3;
_23 = _14.0 as u128;
RET = _14.1 & _14.1;
_6 = _1 ^ _1;
_21 = 680000313_i32 as f64;
_9 = 154_u8;
_16.3 = _9 as u32;
_5 = !_16.4;
match _9 {
0 => bb1,
1 => bb4,
2 => bb5,
3 => bb7,
4 => bb8,
154 => bb10,
_ => bb9
}
}
bb7 = {
RET = 14599379189249773971_u64 | 9988737336980345083_u64;
_2 = _5;
_1 = '\u{af455}' as isize;
_6 = !_3;
_3 = _6;
_3 = !_4;
RET = 4025027582956792320_u64;
_6 = _4 * _4;
_9 = 111_u8;
Call(_8 = fn3(_6, _6), ReturnTo(bb2), UnwindUnreachable())
}
bb8 = {
_8 = [2205976333_u32,2504185177_u32,1512526639_u32,2172806375_u32,2284377059_u32];
_1 = _3;
_10 = [125_i8,97_i8,(-29_i8),(-84_i8),(-22_i8),(-48_i8),(-9_i8)];
Goto(bb5)
}
bb9 = {
RET = (-106_i8) as u64;
_6 = _1;
_5 = _2 | _2;
_2 = (-890994704_i32) as u128;
_4 = 63400_u16 as isize;
RET = 60471_u16 as u64;
_9 = 5_u8 | 147_u8;
_5 = _2;
_10 = [(-111_i8),43_i8,64_i8,(-118_i8),114_i8,58_i8,68_i8];
_3 = _1 & _1;
_8 = [121251722_u32,2549840387_u32,2061617478_u32,2544017614_u32,4004080322_u32];
_1 = _3;
_1 = 1660792965_i32 as isize;
Goto(bb4)
}
bb10 = {
_14.1 = 1239841038106872217_i64 as u64;
_6 = _4;
_16.0 = _17.0;
_1 = -_4;
_16 = _17;
_16.4 = _21 as u128;
_17.4 = !_5;
_13 = !_14.0;
_13 = !_14.0;
_17 = _16;
_21 = _16.3 as f64;
_21 = 6_usize as f64;
_16.2 = [1221104250_i32,(-1430190484_i32)];
_26.3 = _17.1 as f32;
_26.1 = !RET;
_5 = !_2;
_24.3 = _26.3;
_26.1 = RET - RET;
_23 = _2 | _2;
_14.0 = !_13;
_24.2 = _21 + _21;
_4 = _6 | _3;
_20.0 = [_17.1,_16.1,_17.1];
_6 = 219858130_i32 as isize;
match _9 {
0 => bb1,
1 => bb8,
2 => bb7,
3 => bb4,
4 => bb5,
154 => bb12,
_ => bb11
}
}
bb11 = {
RET = 7166601640537971696_u64 >> _1;
_10 = [(-93_i8),(-92_i8),(-77_i8),(-26_i8),3_i8,112_i8,(-38_i8)];
RET = !144108762436522954_u64;
_3 = _1;
_5 = _2 * _2;
_5 = _2;
_1 = !_3;
_9 = 51_u8;
_5 = !_2;
_6 = _1 - _3;
_3 = _6;
_13 = !false;
_14.1 = RET << _6;
_5 = !_2;
_8 = [3919554641_u32,802704950_u32,3833148010_u32,2006087428_u32,1590126981_u32];
_16.4 = _5;
_1 = _3;
_15 = [13665383764497229941_usize,4_usize,2_usize,2_usize];
_16.4 = !_5;
_14.1 = RET + RET;
_17.2 = [927033589_i32,1069974140_i32];
Goto(bb6)
}
bb12 = {
_18 = _3;
_24.2 = -_21;
_1 = _3 - _4;
_14 = (_13, _26.1, _24.2, _24.3);
_21 = 6935117725711546649_i64 as f64;
_12 = core::ptr::addr_of!(_28);
_19 = !_16.1;
RET = _26.1 | _26.1;
Goto(bb13)
}
bb13 = {
Call(_31 = dump_var(2_usize, 6_usize, Move(_6), 10_usize, Move(_10), 13_usize, Move(_13), 17_usize, Move(_17)), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
Call(_31 = dump_var(2_usize, 3_usize, Move(_3), 2_usize, Move(_2), 23_usize, Move(_23), 20_usize, Move(_20)), ReturnTo(bb15), UnwindUnreachable())
}
bb15 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn3(mut _1: isize,mut _2: isize) -> [u32; 5] {
mir! {
type RET = [u32; 5];
let _3: *const *mut [u32; 5];
let _4: isize;
let _5: isize;
let _6: char;
let _7: i128;
let _8: bool;
let _9: isize;
let _10: [i32; 2];
let _11: f32;
let _12: i16;
let _13: (bool, u64, f64, f32);
let _14: [u32; 5];
let _15: u64;
let _16: *mut [u32; 5];
let _17: [u16; 3];
let _18: f32;
let _19: u64;
let _20: u8;
let _21: Adt42;
let _22: (bool, u64, f64, f32);
let _23: Adt58;
let _24: ([i32; 2], f64);
let _25: Adt56;
let _26: f32;
let _27: isize;
let _28: bool;
let _29: ();
let _30: ();
{
_2 = -_1;
RET = [3232608126_u32,2819780568_u32,835870727_u32,1904297356_u32,545593720_u32];
RET = [1981096602_u32,1434193613_u32,1937540610_u32,601598704_u32,1914057197_u32];
RET = [2275401672_u32,739756790_u32,2054096608_u32,261837745_u32,3408855192_u32];
RET = [833050537_u32,503337455_u32,1579232374_u32,137616737_u32,2356574250_u32];
RET = [491861810_u32,62409114_u32,1797334319_u32,4030070208_u32,3677059926_u32];
RET = [3706182596_u32,3112298133_u32,3500826032_u32,177431535_u32,899750429_u32];
RET = [3171791554_u32,2971329173_u32,1436119483_u32,1959408494_u32,1549873226_u32];
RET = [3957094967_u32,597539359_u32,1919293481_u32,3683524054_u32,4096292525_u32];
_1 = _2 & _2;
_1 = 216_u8 as isize;
Call(_2 = fn4(RET, RET, RET, _1, RET), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_4 = _2 & _2;
Goto(bb2)
}
bb2 = {
RET = [1296501607_u32,1711163112_u32,487043290_u32,4166438098_u32,3994009553_u32];
RET = [4143140709_u32,1461081858_u32,3606063639_u32,3362953887_u32,3621905651_u32];
_4 = _1;
_1 = (-80682969111644961334125108225852530511_i128) as isize;
_5 = (-1414_i16) as isize;
Goto(bb3)
}
bb3 = {
_1 = false as isize;
RET = [3359522886_u32,86859448_u32,982774239_u32,1828285693_u32,795380189_u32];
_4 = _1;
_6 = '\u{aa0b8}';
_4 = _1 ^ _1;
_5 = !_1;
_7 = 2273140513_u32 as i128;
_5 = !_2;
_6 = '\u{d1691}';
_7 = 41669767649905267125546634128254635275_i128;
_4 = _5;
RET = [3671780973_u32,879579200_u32,2443810091_u32,1257565766_u32,360772178_u32];
RET = [4006690667_u32,301103684_u32,2841990944_u32,1278404771_u32,1039123721_u32];
_6 = '\u{cc00f}';
_8 = true | false;
match _7 {
0 => bb2,
1 => bb4,
2 => bb5,
41669767649905267125546634128254635275 => bb7,
_ => bb6
}
}
bb4 = {
RET = [1296501607_u32,1711163112_u32,487043290_u32,4166438098_u32,3994009553_u32];
RET = [4143140709_u32,1461081858_u32,3606063639_u32,3362953887_u32,3621905651_u32];
_4 = _1;
_1 = (-80682969111644961334125108225852530511_i128) as isize;
_5 = (-1414_i16) as isize;
Goto(bb3)
}
bb5 = {
_4 = _2 & _2;
Goto(bb2)
}
bb6 = {
Return()
}
bb7 = {
_8 = !false;
RET = [1348424312_u32,1524383189_u32,1059858286_u32,4235093945_u32,3752812951_u32];
_10 = [1270815441_i32,793545579_i32];
_10 = [659543561_i32,1707560110_i32];
_1 = _4 + _2;
_1 = 41709_u16 as isize;
_11 = 2058720516223250251_u64 as f32;
RET = [1967789556_u32,1101946492_u32,245123050_u32,2560426939_u32,2819242390_u32];
RET = [3142962441_u32,1395793754_u32,1831103445_u32,2175638349_u32,10328165_u32];
_6 = '\u{82054}';
_4 = _1 << _2;
_8 = !true;
_6 = '\u{8b1c6}';
_12 = (-20330_i16) << _2;
RET = [3795426456_u32,2864507686_u32,2206426974_u32,2375972630_u32,253864282_u32];
_13.0 = !_8;
match _7 {
0 => bb4,
41669767649905267125546634128254635275 => bb8,
_ => bb2
}
}
bb8 = {
_12 = 4239_i16 ^ (-27466_i16);
_4 = !_5;
_12 = 11405_i16 - (-15622_i16);
_13.1 = 3560581748_u32 as u64;
RET = [3183939729_u32,4251438171_u32,1632604866_u32,3711867625_u32,3768823775_u32];
_5 = _1;
_13.2 = _13.1 as f64;
_13.3 = -_11;
RET = [2611704186_u32,2861204955_u32,2170277598_u32,3635091033_u32,3360306186_u32];
_15 = _13.1;
_14 = RET;
_9 = _4;
_10 = [634609472_i32,(-1767364816_i32)];
_13.3 = -_11;
_13.1 = _15;
_12 = (-13731_i16) + 11526_i16;
_13.3 = 183967402957052656143211361671039928612_u128 as f32;
_6 = '\u{106308}';
RET = _14;
_13.1 = !_15;
_13.2 = (-1404210862_i32) as f64;
_2 = _4;
_13.1 = !_15;
_7 = (-101644520221626374219978798045426757269_i128) * 112901723929321557331468028744979854818_i128;
_15 = 168_u8 as u64;
_3 = core::ptr::addr_of!(_16);
Goto(bb9)
}
bb9 = {
_7 = !(-104575843625005400560078943030123100619_i128);
_7 = (-109370933341124173882629904007643961886_i128) - 168098413765439360446974996087336365756_i128;
_13.3 = 2695744848761113343_i64 as f32;
_16 = core::ptr::addr_of_mut!(RET);
RET = _14;
_5 = -_2;
_14 = [3410767669_u32,1932107932_u32,3758671965_u32,245088320_u32,4151669800_u32];
RET = [4061026037_u32,649718985_u32,1812456359_u32,3109889090_u32,1129902906_u32];
RET = [1371125787_u32,549199365_u32,2526109467_u32,3650624207_u32,3618868413_u32];
_17 = [49675_u16,21760_u16,13630_u16];
_18 = -_13.3;
_13.2 = 11029541427971036489_usize as f64;
Goto(bb10)
}
bb10 = {
_7 = (-124_i8) as i128;
_19 = _13.1;
_13.1 = _15;
_18 = 207556910185827736903279320347740776509_u128 as f32;
_2 = _1;
_2 = _13.2 as isize;
RET = [3395355246_u32,3815120669_u32,255925798_u32,3906622113_u32,674026260_u32];
_1 = _4 + _9;
_2 = _9 * _5;
RET = [2201992880_u32,2851703925_u32,3566745800_u32,1025250292_u32,2861860281_u32];
_16 = core::ptr::addr_of_mut!((*_16));
_1 = _8 as isize;
_1 = _2 & _5;
_5 = _1;
_13.0 = !_8;
RET = [812902019_u32,1893548648_u32,3547843473_u32,3298400417_u32,4016678497_u32];
Goto(bb11)
}
bb11 = {
_2 = !_1;
_1 = _2 + _5;
Goto(bb12)
}
bb12 = {
_15 = _5 as u64;
_13.3 = -_11;
_3 = core::ptr::addr_of!((*_3));
_13.0 = _8;
_16 = core::ptr::addr_of_mut!(RET);
_6 = '\u{fbaed}';
_13.1 = 30152_u16 as u64;
_8 = _13.0;
_10 = [(-1008619822_i32),(-510171583_i32)];
_1 = _15 as isize;
_13.1 = _19 * _15;
Goto(bb13)
}
bb13 = {
_16 = core::ptr::addr_of_mut!(_14);
_22 = (_13.0, _15, _13.2, _11);
_14 = [3686446132_u32,2981997434_u32,1009094045_u32,3300393235_u32,4142169552_u32];
_22.3 = _13.3;
_22.1 = 71_i8 as u64;
_23.fld2.0 = _13.0;
_23.fld0.1 = !159311898266150350260456486119440895094_u128;
RET = [2926151438_u32,1464346010_u32,2792464750_u32,2007429118_u32,1516511333_u32];
_23.fld0.0 = _16;
_13.1 = _13.2 as u64;
_20 = 162_u8 * 8_u8;
_23.fld0.0 = _16;
_23.fld2 = (_22.0, _15, _22.2, _22.3);
_23.fld4 = [0_usize,10781605552085045133_usize,6_usize,4765285507235838860_usize];
_15 = !_23.fld2.1;
_15 = _23.fld2.1;
Goto(bb14)
}
bb14 = {
_23.fld3.0.0 = _6;
_10 = [37645273_i32,(-810842229_i32)];
_16 = core::ptr::addr_of_mut!(_14);
_23.fld4 = [8674783402133435188_usize,8298170862143517686_usize,8468279292391719798_usize,5_usize];
_19 = _4 as u64;
_23.fld0.3 = core::ptr::addr_of_mut!(RET);
_9 = _4;
_25.fld4.0 = _8;
_22.0 = _15 >= _15;
_16 = core::ptr::addr_of_mut!(RET);
_22.3 = _23.fld2.3;
_25.fld4.3 = -_13.3;
_16 = core::ptr::addr_of_mut!(RET);
_25.fld4.2 = _13.2 + _22.2;
_22.0 = !_25.fld4.0;
_27 = -_5;
_22.0 = _23.fld2.0;
_23.fld0.2 = 3309235968_u32 | 1550057326_u32;
_25.fld3 = _3;
_6 = _23.fld3.0.0;
_25.fld4.1 = 23935_u16 as u64;
Goto(bb15)
}
bb15 = {
Call(_29 = dump_var(3_usize, 10_usize, Move(_10), 9_usize, Move(_9), 27_usize, Move(_27), 20_usize, Move(_20)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_29 = dump_var(3_usize, 1_usize, Move(_1), 7_usize, Move(_7), 17_usize, Move(_17), 2_usize, Move(_2)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn4(mut _1: [u32; 5],mut _2: [u32; 5],mut _3: [u32; 5],mut _4: isize,mut _5: [u32; 5]) -> isize {
mir! {
type RET = isize;
let _6: (u32,);
let _7: i8;
let _8: f32;
let _9: ([i32; 2], f64);
let _10: Adt55;
let _11: Adt58;
let _12: isize;
let _13: ((char, u16, [i32; 2], u32, u128), bool, *const i8);
let _14: isize;
let _15: isize;
let _16: f64;
let _17: char;
let _18: ();
let _19: ();
{
RET = 131181842815768587612051606558270507732_i128 as isize;
RET = _4;
_5 = [3054962643_u32,1344422407_u32,3373217843_u32,249362549_u32,2461712939_u32];
_4 = -RET;
_2 = _5;
_5 = [2863862416_u32,2050198466_u32,420589656_u32,3118620472_u32,2560581887_u32];
_4 = false as isize;
_5 = [1647284599_u32,1588167241_u32,3446422453_u32,1004827799_u32,3308001227_u32];
RET = _4 - _4;
_4 = RET;
RET = 3709887359_u32 as isize;
_6.0 = 3147027233_u32 & 2797752926_u32;
Goto(bb1)
}
bb1 = {
RET = _4 * _4;
RET = _4;
_5 = _2;
_6.0 = 412020812_u32;
_1 = _5;
_4 = !RET;
RET = -_4;
_2 = _1;
_1 = [_6.0,_6.0,_6.0,_6.0,_6.0];
_6.0 = 2598635492_u32;
_4 = -RET;
_7 = 63_i8 * 55_i8;
_2 = [_6.0,_6.0,_6.0,_6.0,_6.0];
_3 = [_6.0,_6.0,_6.0,_6.0,_6.0];
_3 = [_6.0,_6.0,_6.0,_6.0,_6.0];
_7 = 16776_u16 as i8;
_6 = (3502979555_u32,);
_7 = (-101_i8);
RET = (-46672453706457528898866861285245953182_i128) as isize;
_5 = [_6.0,_6.0,_6.0,_6.0,_6.0];
_7 = 5572346862701605495_usize as i8;
_4 = 16017542704897729375770019029053061590_i128 as isize;
_5 = [_6.0,_6.0,_6.0,_6.0,_6.0];
RET = !_4;
Call(_7 = fn5(_2, _5, _4, _6.0, _5, _4, _3, RET, _6.0, _4, _6, _6.0, _4), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_2 = [_6.0,_6.0,_6.0,_6.0,_6.0];
_2 = [_6.0,_6.0,_6.0,_6.0,_6.0];
_6.0 = 961422580_u32 * 3889087245_u32;
_6 = (3926491106_u32,);
_5 = _2;
_7 = false as i8;
RET = _4 + _4;
_5 = [_6.0,_6.0,_6.0,_6.0,_6.0];
_8 = 23323_u16 as f32;
_7 = (-85_i8);
_7 = (-13_i8) ^ (-32_i8);
RET = _4;
_9.1 = _8 as f64;
Goto(bb3)
}
bb3 = {
_7 = (-97_i8);
Goto(bb4)
}
bb4 = {
_6 = (1200868025_u32,);
_2 = _1;
match _6.0 {
0 => bb5,
1 => bb6,
2 => bb7,
3 => bb8,
4 => bb9,
5 => bb10,
1200868025 => bb12,
_ => bb11
}
}
bb5 = {
_7 = (-97_i8);
Goto(bb4)
}
bb6 = {
_2 = [_6.0,_6.0,_6.0,_6.0,_6.0];
_2 = [_6.0,_6.0,_6.0,_6.0,_6.0];
_6.0 = 961422580_u32 * 3889087245_u32;
_6 = (3926491106_u32,);
_5 = _2;
_7 = false as i8;
RET = _4 + _4;
_5 = [_6.0,_6.0,_6.0,_6.0,_6.0];
_8 = 23323_u16 as f32;
_7 = (-85_i8);
_7 = (-13_i8) ^ (-32_i8);
RET = _4;
_9.1 = _8 as f64;
Goto(bb3)
}
bb7 = {
RET = _4 * _4;
RET = _4;
_5 = _2;
_6.0 = 412020812_u32;
_1 = _5;
_4 = !RET;
RET = -_4;
_2 = _1;
_1 = [_6.0,_6.0,_6.0,_6.0,_6.0];
_6.0 = 2598635492_u32;
_4 = -RET;
_7 = 63_i8 * 55_i8;
_2 = [_6.0,_6.0,_6.0,_6.0,_6.0];
_3 = [_6.0,_6.0,_6.0,_6.0,_6.0];
_3 = [_6.0,_6.0,_6.0,_6.0,_6.0];
_7 = 16776_u16 as i8;
_6 = (3502979555_u32,);
_7 = (-101_i8);
RET = (-46672453706457528898866861285245953182_i128) as isize;
_5 = [_6.0,_6.0,_6.0,_6.0,_6.0];
_7 = 5572346862701605495_usize as i8;
_4 = 16017542704897729375770019029053061590_i128 as isize;
_5 = [_6.0,_6.0,_6.0,_6.0,_6.0];
RET = !_4;
Call(_7 = fn5(_2, _5, _4, _6.0, _5, _4, _3, RET, _6.0, _4, _6, _6.0, _4), ReturnTo(bb2), UnwindUnreachable())
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
Return()
}
bb12 = {
_9.1 = _6.0 as f64;
_4 = RET >> _7;
_3 = [_6.0,_6.0,_6.0,_6.0,_6.0];
RET = !_4;
_2 = [_6.0,_6.0,_6.0,_6.0,_6.0];
_11.fld2.1 = 1_usize as u64;
_9.1 = 28266_i16 as f64;
_6.0 = 1942799807_u32;
_4 = -RET;
_11.fld3.0.4 = !60195879449326638269560412809653323869_u128;
_7 = (-15674_i16) as i8;
_11.fld3.0.0 = '\u{40364}';
_12 = !RET;
_12 = _4;
_11.fld3.0.3 = _11.fld3.0.4 as u32;
_11.fld2.3 = _8 + _8;
_11.fld2.0 = true;
_8 = -_11.fld2.3;
_13.0.1 = _9.1 as u16;
_13.2 = core::ptr::addr_of!(_7);
_4 = -_12;
Goto(bb13)
}
bb13 = {
_1 = [_6.0,_6.0,_6.0,_6.0,_11.fld3.0.3];
_11.fld2.2 = _9.1 * _9.1;
_11.fld4 = [4_usize,4223484506118014269_usize,16156979073718809560_usize,0_usize];
_11.fld0.1 = _11.fld3.0.4 ^ _11.fld3.0.4;
_13.0.4 = _11.fld2.2 as u128;
_11.fld3.0.0 = '\u{3afea}';
_11.fld3.0.2 = [(-1112197050_i32),994668575_i32];
match _6.0 {
0 => bb14,
1 => bb15,
2 => bb16,
1942799807 => bb18,
_ => bb17
}
}
bb14 = {
_9.1 = _6.0 as f64;
_4 = RET >> _7;
_3 = [_6.0,_6.0,_6.0,_6.0,_6.0];
RET = !_4;
_2 = [_6.0,_6.0,_6.0,_6.0,_6.0];
_11.fld2.1 = 1_usize as u64;
_9.1 = 28266_i16 as f64;
_6.0 = 1942799807_u32;
_4 = -RET;
_11.fld3.0.4 = !60195879449326638269560412809653323869_u128;
_7 = (-15674_i16) as i8;
_11.fld3.0.0 = '\u{40364}';
_12 = !RET;
_12 = _4;
_11.fld3.0.3 = _11.fld3.0.4 as u32;
_11.fld2.3 = _8 + _8;
_11.fld2.0 = true;
_8 = -_11.fld2.3;
_13.0.1 = _9.1 as u16;
_13.2 = core::ptr::addr_of!(_7);
_4 = -_12;
Goto(bb13)
}
bb15 = {
RET = _4 * _4;
RET = _4;
_5 = _2;
_6.0 = 412020812_u32;
_1 = _5;
_4 = !RET;
RET = -_4;
_2 = _1;
_1 = [_6.0,_6.0,_6.0,_6.0,_6.0];
_6.0 = 2598635492_u32;
_4 = -RET;
_7 = 63_i8 * 55_i8;
_2 = [_6.0,_6.0,_6.0,_6.0,_6.0];
_3 = [_6.0,_6.0,_6.0,_6.0,_6.0];
_3 = [_6.0,_6.0,_6.0,_6.0,_6.0];
_7 = 16776_u16 as i8;
_6 = (3502979555_u32,);
_7 = (-101_i8);
RET = (-46672453706457528898866861285245953182_i128) as isize;
_5 = [_6.0,_6.0,_6.0,_6.0,_6.0];
_7 = 5572346862701605495_usize as i8;
_4 = 16017542704897729375770019029053061590_i128 as isize;
_5 = [_6.0,_6.0,_6.0,_6.0,_6.0];
RET = !_4;
Call(_7 = fn5(_2, _5, _4, _6.0, _5, _4, _3, RET, _6.0, _4, _6, _6.0, _4), ReturnTo(bb2), UnwindUnreachable())
}
bb16 = {
Return()
}
bb17 = {
Return()
}
bb18 = {
_11.fld2.2 = _9.1;
_11.fld2 = (true, 3084461725570670621_u64, _9.1, _8);
_11.fld4 = [5798976301829422271_usize,2_usize,2_usize,7_usize];
Goto(bb19)
}
bb19 = {
Call(_18 = dump_var(4_usize, 5_usize, Move(_5), 1_usize, Move(_1), 12_usize, Move(_12), 4_usize, Move(_4)), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn5(mut _1: [u32; 5],mut _2: [u32; 5],mut _3: isize,mut _4: u32,mut _5: [u32; 5],mut _6: isize,mut _7: [u32; 5],mut _8: isize,mut _9: u32,mut _10: isize,mut _11: (u32,),mut _12: u32,mut _13: isize) -> i8 {
mir! {
type RET = i8;
let _14: i64;
let _15: (char, u16, [i32; 2], u32, u128);
let _16: i64;
let _17: f64;
let _18: (char, [u32; 5]);
let _19: i128;
let _20: u8;
let _21: i8;
let _22: (char, [u32; 5]);
let _23: i8;
let _24: bool;
let _25: *mut (u32,);
let _26: ([u16; 3],);
let _27: isize;
let _28: Adt51;
let _29: (char, u16, [i32; 2], u32, u128);
let _30: isize;
let _31: u8;
let _32: f64;
let _33: &'static usize;
let _34: Adt42;
let _35: Adt43;
let _36: Adt48;
let _37: *const char;
let _38: u8;
let _39: i16;
let _40: &'static usize;
let _41: Adt48;
let _42: [usize; 4];
let _43: ([i32; 2], f64);
let _44: ([u16; 3],);
let _45: [u16; 3];
let _46: ();
let _47: ();
{
_12 = _4 % _11.0;
RET = 91_i8 << _4;
_10 = _4 as isize;
_12 = !_4;
_9 = true as u32;
_2 = [_4,_9,_4,_12,_11.0];
_14 = !(-4495096351113308005_i64);
_11.0 = 30539_u16 as u32;
_6 = !_3;
_9 = !_11.0;
_10 = -_6;
_2 = [_9,_4,_4,_11.0,_12];
_11.0 = _12 | _4;
_5 = [_4,_11.0,_4,_9,_9];
_15.4 = 284399371986063997061931749066514627271_u128;
_4 = _9 ^ _11.0;
_14 = !5167930570269496156_i64;
_11.0 = _4;
_16 = _14;
_14 = _16 + _16;
_15.2 = [(-1038717290_i32),1666609757_i32];
_15.4 = _10 as u128;
_8 = 14684_u16 as isize;
_14 = -_16;
Goto(bb1)
}
bb1 = {
_14 = _10 as i64;
_15.3 = _11.0;
_18 = ('\u{1091c}', _1);
_18.1 = _5;
_18 = ('\u{d7a7e}', _7);
_14 = _16;
_14 = _16 + _16;
_15.4 = 99407311903435228393087762158391276263_u128;
RET = (-50_i8);
_12 = _15.4 as u32;
_3 = _13 | _6;
_9 = _4;
_19 = 25227686566219476768631966627122253513_i128 ^ (-53388963904320709994783981232304997823_i128);
_16 = _14;
_16 = true as i64;
_15.0 = _18.0;
_10 = _18.0 as isize;
Goto(bb2)
}
bb2 = {
_15.1 = 44122_u16 | 21687_u16;
_9 = !_4;
_18.0 = _15.0;
_1 = _7;
_8 = _19 as isize;
_15.1 = 18358_i16 as u16;
_15.4 = _15.3 as u128;
_2 = _5;
_20 = 47_u8 >> _16;
_3 = _15.0 as isize;
_13 = _8;
_18.0 = _15.0;
_15.0 = _18.0;
RET = !45_i8;
RET = _14 as i8;
Call(_24 = fn6(_1, _5, _11), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_11.0 = _15.3 | _9;
_21 = !RET;
_25 = core::ptr::addr_of_mut!(_11);
_11 = (_4,);
_9 = !_4;
_21 = (-2000184145_i32) as i8;
_16 = !_14;
_5 = _1;
_22.1 = _7;
_16 = _19 as i64;
_26.0 = [_15.1,_15.1,_15.1];
_22.0 = _18.0;
_6 = _10 >> _11.0;
_3 = _10 - _6;
RET = -_21;
Goto(bb4)
}
bb4 = {
_20 = 124_u8 + 253_u8;
_15.4 = !89418769093869088907956600453669490537_u128;
_22.1 = [_11.0,_9,(*_25).0,(*_25).0,_15.3];
RET = _21;
_26.0 = [_15.1,_15.1,_15.1];
_8 = _19 as isize;
_11.0 = _19 as u32;
_24 = !false;
_15.1 = 50436_u16 + 59100_u16;
_13 = -_6;
_27 = _10;
_3 = _21 as isize;
_22 = (_18.0, _18.1);
_15.4 = !325804515925083663151251435476489766574_u128;
_18 = (_15.0, _2);
_15.0 = _22.0;
Goto(bb5)
}
bb5 = {
Goto(bb6)
}
bb6 = {
_18.1 = [(*_25).0,(*_25).0,_4,_12,(*_25).0];
_29.3 = !_9;
_16 = _14;
_29.1 = !_15.1;
_17 = _19 as f64;
_15.0 = _18.0;
_29.0 = _18.0;
_17 = _20 as f64;
_13 = _6;
_15.4 = (-2033758127_i32) as u128;
_15.4 = _24 as u128;
RET = !_21;
_18.0 = _15.0;
_14 = _16 >> _29.1;
_18.0 = _29.0;
_29 = _15;
_23 = !RET;
_32 = _17 - _17;
_22.0 = _15.0;
Goto(bb7)
}
bb7 = {
_20 = 232_u8;
_29.3 = !(*_25).0;
_27 = _13;
_9 = _20 as u32;
_11 = (_4,);
_25 = core::ptr::addr_of_mut!((*_25));
_31 = !_20;
_27 = _6;
_15.0 = _22.0;
_13 = _29.1 as isize;
_20 = !_31;
_3 = (*_25).0 as isize;
_9 = (*_25).0;
_15.1 = 1402280042_i32 as u16;
_26.0 = [_29.1,_29.1,_29.1];
_17 = -_32;
_15.3 = (-1092989637_i32) as u32;
_20 = !_31;
Goto(bb8)
}
bb8 = {
_24 = (*_25).0 >= _15.3;
Goto(bb9)
}
bb9 = {
_19 = 30643_i16 as i128;
_18.0 = _22.0;
_15.4 = _29.4 & _29.4;
_24 = RET != RET;
_11 = (_29.3,);
_25 = core::ptr::addr_of_mut!((*_25));
Call(_24 = fn7(_20, _32, _13, _32, _15.2, _19, _18.1, _13, _27, _32, _22.0, _6, _15.4), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_20 = !_31;
_4 = _31 as u32;
_29.0 = _22.0;
Call(_13 = core::intrinsics::transmute(_6), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_9 = (*_25).0 | _29.3;
_19 = _29.4 as i128;
_8 = _13 + _27;
_37 = core::ptr::addr_of!(_15.0);
_17 = _32;
_37 = core::ptr::addr_of!(_22.0);
_5 = [_29.3,(*_25).0,(*_25).0,_9,_29.3];
Call(_35 = fn12(_16, _24, _27, _27, _24, _24, _10), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
_11.0 = Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_35, 1), 2).3 - Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_35, 1), 2).3;
place!(Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_35, 1), 2)).4 = _15.4 << _11.0;
place!(Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_35, 1), 2)).4 = _29.1 as u128;
_29.1 = Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_35, 1), 2).1;
_22.0 = _15.0;
place!(Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_35, 1), 2)).3 = !(*_25).0;
_26.0 = [Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_35, 1), 2).1,_29.1,_15.1];
SetDiscriminant(_35, 1);
Goto(bb13)
}
bb13 = {
place!(Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_35, 1), 2)).0 = _15.0;
_29.4 = !_15.4;
_39 = (-19291_i16) & (-20139_i16);
place!(Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_35, 1), 2)).3 = !_4;
_5 = _22.1;
place!(Field::<u64>(Variant(_35, 1), 0)) = !18090184107312435951_u64;
Goto(bb14)
}
bb14 = {
_15.2 = [(-1126459424_i32),41757872_i32];
place!(Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_35, 1), 2)).3 = (*_25).0 ^ (*_25).0;
_9 = (*_25).0;
_9 = _20 as u32;
_8 = _10 * _3;
_8 = -_27;
_19 = _31 as i128;
_29.1 = !_15.1;
place!(Field::<*const *mut [u32; 5]>(Variant(_35, 1), 4)) = core::ptr::addr_of!(place!(Field::<*mut [u32; 5]>(Variant(_35, 1), 3)));
_2 = _18.1;
_39 = _29.1 as i16;
_42 = [7_usize,3734649733423004700_usize,5_usize,3_usize];
place!(Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_35, 1), 2)).2 = [(-1302709912_i32),(-1625064337_i32)];
_1 = [_11.0,(*_25).0,Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_35, 1), 2).3,_11.0,Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_35, 1), 2).3];
_20 = (-375677180_i32) as u8;
_16 = !_14;
_43 = (_29.2, _17);
place!(Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_35, 1), 2)).1 = !_29.1;
place!(Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_35, 1), 2)).1 = !_29.1;
_44 = _26;
_29.3 = _29.4 as u32;
Goto(bb15)
}
bb15 = {
Call(_46 = dump_var(5_usize, 44_usize, Move(_44), 4_usize, Move(_4), 3_usize, Move(_3), 16_usize, Move(_16)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_46 = dump_var(5_usize, 29_usize, Move(_29), 6_usize, Move(_6), 15_usize, Move(_15), 26_usize, Move(_26)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_46 = dump_var(5_usize, 23_usize, Move(_23), 8_usize, Move(_8), 42_usize, Move(_42), 31_usize, Move(_31)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_46 = dump_var(5_usize, 39_usize, Move(_39), 9_usize, Move(_9), 19_usize, Move(_19), 47_usize, _47), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn6(mut _1: [u32; 5],mut _2: [u32; 5],mut _3: (u32,)) -> bool {
mir! {
type RET = bool;
let _4: Adt54;
let _5: Adt57;
let _6: f32;
let _7: u16;
let _8: f32;
let _9: bool;
let _10: [usize; 4];
let _11: *const &'static usize;
let _12: (char, [u32; 5]);
let _13: f64;
let _14: f32;
let _15: ();
let _16: ();
{
RET = !false;
_3 = (787377979_u32,);
RET = false;
_3 = (1017757063_u32,);
RET = !false;
_1 = _2;
_3 = (467213744_u32,);
_2 = [_3.0,_3.0,_3.0,_3.0,_3.0];
_3 = (2029319716_u32,);
RET = _3.0 == _3.0;
_2 = [_3.0,_3.0,_3.0,_3.0,_3.0];
RET = !true;
_4 = Adt54::Variant3 { fld0: (-25_isize),fld1: 18126299022627773412_u64 };
_3 = (520415678_u32,);
_3.0 = !3780626469_u32;
_3.0 = (-29454815979955224245833043299035735724_i128) as u32;
RET = !false;
_7 = !51793_u16;
_3.0 = 2662729373064306736_i64 as u32;
_6 = 659465806_i32 as f32;
place!(Field::<isize>(Variant(_4, 3), 0)) = !(-7_isize);
_3.0 = 3426689274_u32 << Field::<isize>(Variant(_4, 3), 0);
place!(Field::<u64>(Variant(_4, 3), 1)) = 666753872960799400_u64;
_6 = 1_usize as f32;
Goto(bb1)
}
bb1 = {
place!(Field::<isize>(Variant(_4, 3), 0)) = 9223372036854775807_isize;
_7 = 8741379693050195257_i64 as u16;
Goto(bb2)
}
bb2 = {
_8 = -_6;
_10 = [15365369883744280204_usize,1648489083393552651_usize,2305717392461732383_usize,3_usize];
_10 = [800908476916642255_usize,6282776581083006805_usize,3436648594523965950_usize,4_usize];
_1 = [_3.0,_3.0,_3.0,_3.0,_3.0];
_3.0 = 1192953990_u32 & 3440552862_u32;
_3 = (3114435115_u32,);
RET = _7 != _7;
_3 = (2499483106_u32,);
_6 = 1680654066_i32 as f32;
_6 = _8 + _8;
place!(Field::<u64>(Variant(_4, 3), 1)) = Field::<isize>(Variant(_4, 3), 0) as u64;
place!(Field::<u64>(Variant(_4, 3), 1)) = !6385363506994326027_u64;
_13 = _7 as f64;
match _3.0 {
0 => bb1,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
2499483106 => bb8,
_ => bb7
}
}
bb3 = {
place!(Field::<isize>(Variant(_4, 3), 0)) = 9223372036854775807_isize;
_7 = 8741379693050195257_i64 as u16;
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_1 = [_3.0,_3.0,_3.0,_3.0,_3.0];
_13 = Field::<u64>(Variant(_4, 3), 1) as f64;
_3 = (2602327581_u32,);
_12.1 = [_3.0,_3.0,_3.0,_3.0,_3.0];
_3 = (2056030885_u32,);
_13 = (-17865013920238690436925297919856773803_i128) as f64;
match Field::<isize>(Variant(_4, 3), 0) {
0 => bb1,
1 => bb2,
2 => bb9,
3 => bb10,
4 => bb11,
5 => bb12,
9223372036854775807 => bb14,
_ => bb13
}
}
bb9 = {
place!(Field::<isize>(Variant(_4, 3), 0)) = 9223372036854775807_isize;
_7 = 8741379693050195257_i64 as u16;
Goto(bb2)
}
bb10 = {
Return()
}
bb11 = {
Return()
}
bb12 = {
_8 = -_6;
_10 = [15365369883744280204_usize,1648489083393552651_usize,2305717392461732383_usize,3_usize];
_10 = [800908476916642255_usize,6282776581083006805_usize,3436648594523965950_usize,4_usize];
_1 = [_3.0,_3.0,_3.0,_3.0,_3.0];
_3.0 = 1192953990_u32 & 3440552862_u32;
_3 = (3114435115_u32,);
RET = _7 != _7;
_3 = (2499483106_u32,);
_6 = 1680654066_i32 as f32;
_6 = _8 + _8;
place!(Field::<u64>(Variant(_4, 3), 1)) = Field::<isize>(Variant(_4, 3), 0) as u64;
place!(Field::<u64>(Variant(_4, 3), 1)) = !6385363506994326027_u64;
_13 = _7 as f64;
match _3.0 {
0 => bb1,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
2499483106 => bb8,
_ => bb7
}
}
bb13 = {
place!(Field::<isize>(Variant(_4, 3), 0)) = 9223372036854775807_isize;
_7 = 8741379693050195257_i64 as u16;
Goto(bb2)
}
bb14 = {
_6 = -_8;
_12.0 = '\u{64447}';
_2 = [_3.0,_3.0,_3.0,_3.0,_3.0];
place!(Field::<u64>(Variant(_4, 3), 1)) = _3.0 as u64;
_10 = [16341714405828854892_usize,3_usize,1_usize,0_usize];
_14 = _8 * _8;
_14 = -_8;
_12.1 = [_3.0,_3.0,_3.0,_3.0,_3.0];
Goto(bb15)
}
bb15 = {
Call(_15 = dump_var(6_usize, 3_usize, Move(_3), 12_usize, Move(_12), 1_usize, Move(_1), 16_usize, _16), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn7(mut _1: u8,mut _2: f64,mut _3: isize,mut _4: f64,mut _5: [i32; 2],mut _6: i128,mut _7: [u32; 5],mut _8: isize,mut _9: isize,mut _10: f64,mut _11: char,mut _12: isize,mut _13: u128) -> bool {
mir! {
type RET = bool;
let _14: Adt43;
let _15: [u32; 5];
let _16: ([i32; 2], f64);
let _17: f64;
let _18: ((char, u16, [i32; 2], u32, u128), bool, *const i8);
let _19: u128;
let _20: i16;
let _21: ([i32; 2], f64);
let _22: bool;
let _23: Adt58;
let _24: u128;
let _25: *const &'static usize;
let _26: Adt48;
let _27: [u16; 3];
let _28: [i8; 7];
let _29: (char, u16, [i32; 2], u32, u128);
let _30: i64;
let _31: Adt50;
let _32: ();
let _33: ();
{
RET = !true;
RET = false;
_7 = [1338076496_u32,422474023_u32,1972755541_u32,930547959_u32,4167097382_u32];
_16.1 = -_4;
_16.0 = _5;
_5 = [(-1988240295_i32),1565254034_i32];
_7 = [2109694309_u32,2768909026_u32,1101036711_u32,2587637043_u32,3304224547_u32];
_2 = _4;
_17 = _10 + _10;
RET = false;
_1 = 71_u8;
_18.0 = (_11, 25357_u16, _5, 3601059393_u32, _13);
_17 = _2 + _2;
_2 = _17 - _10;
_6 = (-1648667648_i32) as i128;
_7 = [_18.0.3,_18.0.3,_18.0.3,_18.0.3,_18.0.3];
_18.0.0 = _11;
_18.0.3 = 1589097133_u32;
_4 = _18.0.1 as f64;
_9 = _1 as isize;
_2 = _16.1 + _10;
_5 = [202511010_i32,1968953455_i32];
_16 = (_5, _2);
_4 = _2;
Call(_15 = core::intrinsics::transmute(_7), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_10 = 2067137500931019046_u64 as f64;
_18.1 = RET;
_3 = _12;
_15 = _7;
_4 = _16.1 * _16.1;
_1 = 81_u8 - 164_u8;
_18.0.0 = _11;
_18.0.0 = _11;
_11 = _18.0.0;
_18.0.1 = 36336_u16;
_13 = _18.0.4 & _18.0.4;
_15 = [_18.0.3,_18.0.3,_18.0.3,_18.0.3,_18.0.3];
_22 = _4 <= _2;
_1 = !128_u8;
_23.fld3.0.2 = _5;
_1 = 142_u8 + 153_u8;
_23.fld3.0.0 = _18.0.0;
_16.1 = _2;
_23.fld3.0.2 = [(-709627302_i32),(-776002607_i32)];
_18.0 = (_23.fld3.0.0, 11484_u16, _5, 4144334484_u32, _13);
_23.fld2.2 = _4;
Call(_18.0.2 = fn8(_8, _18.1, _3, _18.0.4, _10, _12, _16.1, _2, _18.0.1, _18.0.1, _23.fld2.2, _17), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_23.fld3.0.0 = _18.0.0;
_21.1 = _16.1;
_23.fld3.0.1 = !_18.0.1;
_18.0.0 = _11;
_21.1 = -_16.1;
_2 = -_21.1;
_23.fld3.0.0 = _18.0.0;
_8 = _12 * _12;
_23.fld3.0 = (_18.0.0, _18.0.1, _16.0, _18.0.3, _18.0.4);
_21.0 = [(-1438804015_i32),351958478_i32];
_23.fld4 = [5_usize,5690744810048664829_usize,0_usize,3799666830637925808_usize];
_13 = _23.fld3.0.4;
RET = !_22;
_24 = _6 as u128;
_29.2 = [(-411972388_i32),152186593_i32];
_27 = [_23.fld3.0.1,_18.0.1,_18.0.1];
_23.fld0.2 = !_18.0.3;
_23.fld0.0 = core::ptr::addr_of_mut!(_15);
_23.fld0.0 = core::ptr::addr_of_mut!(_15);
Goto(bb3)
}
bb3 = {
Call(_32 = dump_var(7_usize, 24_usize, Move(_24), 3_usize, Move(_3), 5_usize, Move(_5), 9_usize, Move(_9)), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
Call(_32 = dump_var(7_usize, 11_usize, Move(_11), 7_usize, Move(_7), 12_usize, Move(_12), 33_usize, _33), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn8(mut _1: isize,mut _2: bool,mut _3: isize,mut _4: u128,mut _5: f64,mut _6: isize,mut _7: f64,mut _8: f64,mut _9: u16,mut _10: u16,mut _11: f64,mut _12: f64) -> [i32; 2] {
mir! {
type RET = [i32; 2];
let _13: u8;
let _14: [i32; 2];
let _15: [u16; 3];
let _16: (*mut [u32; 5], u128, u32, *mut [u32; 5]);
let _17: isize;
let _18: i128;
let _19: *const i8;
let _20: f32;
let _21: isize;
let _22: [u16; 3];
let _23: Adt55;
let _24: (char, u16, [i32; 2], u32, u128);
let _25: char;
let _26: u8;
let _27: (u32,);
let _28: [u32; 5];
let _29: [u32; 5];
let _30: isize;
let _31: (*mut [u32; 5], i8);
let _32: ();
let _33: ();
{
RET = [(-1580019739_i32),420288670_i32];
_5 = _12;
match _10 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb5,
5 => bb6,
11484 => bb8,
_ => bb7
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_12 = _8;
_10 = 15033902652223908955_u64 as u16;
_5 = 129750382322498439467722150675492164755_i128 as f64;
_4 = !29027782677593268114696663165486820983_u128;
Call(_9 = fn9(_11, _4, _6, _5, _11), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
_6 = _1;
_1 = _6;
_15 = [_9,_10,_10];
_13 = (-3276_i16) as u8;
RET = [453028110_i32,(-2011438244_i32)];
RET = [(-1019065198_i32),417289240_i32];
_11 = _7;
_3 = _6;
_14 = [(-982116625_i32),1853128682_i32];
RET = [(-1168033277_i32),275577286_i32];
_8 = (-3771217958879546553_i64) as f64;
_9 = _10 | _10;
_11 = _7 - _12;
_5 = -_12;
_7 = _11;
_14 = [582769956_i32,(-111140993_i32)];
_1 = _6;
_1 = _3;
Goto(bb10)
}
bb10 = {
RET = _14;
RET = [1484601902_i32,(-555956029_i32)];
RET = [1674236875_i32,564342617_i32];
_16.2 = _2 as u32;
_16.1 = _4;
_12 = _16.1 as f64;
_5 = _11;
RET = _14;
Call(_2 = fn10(_7, _11, _3, _11), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_10 = _7 as u16;
_17 = -_6;
_11 = _7;
_16.2 = 3156534639876740157_u64 as u32;
_4 = _16.1 + _16.1;
_2 = _7 != _5;
_13 = 4477813384277741429_u64 as u8;
_7 = _11 - _5;
_11 = -_5;
_13 = _16.2 as u8;
_16.2 = 986933587_u32;
_8 = -_5;
_16.1 = !_4;
_1 = _17;
_13 = _16.2 as u8;
_13 = 191_u8 ^ 231_u8;
Goto(bb12)
}
bb12 = {
_18 = (-50350511388594539283608034592076432960_i128) << _10;
RET = [740235179_i32,(-665310674_i32)];
_10 = !_9;
_16.1 = _6 as u128;
_1 = 8523490152094631833_i64 as isize;
_16.2 = 2051506630_u32 | 2558106302_u32;
_20 = 95_i8 as f32;
_12 = _7;
_9 = _10;
_11 = _5;
_9 = 9242728799872669520_u64 as u16;
Goto(bb13)
}
bb13 = {
_10 = _9 ^ _9;
RET = [639691959_i32,(-1238795052_i32)];
_21 = 48_i8 as isize;
_14 = [1245544921_i32,(-1854971081_i32)];
RET = _14;
_16.1 = _20 as u128;
RET = [692228969_i32,(-1640405917_i32)];
_24 = ('\u{41bd8}', _9, RET, _16.2, _16.1);
_18 = (-129393268266260955863935919208291817385_i128) ^ (-89658419457335633004007416592505741411_i128);
_21 = -_1;
_22 = _15;
_2 = _7 < _12;
_24 = ('\u{212f8}', _9, _14, _16.2, _4);
_24 = ('\u{19de7}', _10, RET, _16.2, _4);
Call(_8 = fn11(_2, _11, _24.0, _2, _12, _7), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
_21 = 1_usize as isize;
_4 = !_16.1;
_25 = _24.0;
_16.1 = !_4;
RET = _14;
_16.3 = core::ptr::addr_of_mut!(_28);
Goto(bb15)
}
bb15 = {
Call(_32 = dump_var(8_usize, 9_usize, Move(_9), 10_usize, Move(_10), 24_usize, Move(_24), 25_usize, Move(_25)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_32 = dump_var(8_usize, 18_usize, Move(_18), 21_usize, Move(_21), 22_usize, Move(_22), 6_usize, Move(_6)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn9(mut _1: f64,mut _2: u128,mut _3: isize,mut _4: f64,mut _5: f64) -> u16 {
mir! {
type RET = u16;
let _6: u8;
let _7: (bool, u64, f64, f32);
let _8: Adt52;
let _9: isize;
let _10: char;
let _11: f32;
let _12: f32;
let _13: i16;
let _14: u8;
let _15: u32;
let _16: *mut [u32; 5];
let _17: f32;
let _18: u128;
let _19: isize;
let _20: isize;
let _21: [u16; 3];
let _22: bool;
let _23: bool;
let _24: *const *mut [u32; 5];
let _25: (*mut [u32; 5], i8);
let _26: Adt58;
let _27: (char, u16, [i32; 2], u32, u128);
let _28: ();
let _29: ();
{
_1 = 9284780294137817763983558017372269677_i128 as f64;
_1 = _5 * _5;
_5 = 3555467680_u32 as f64;
_6 = !60_u8;
RET = !16951_u16;
RET = 169660313744946427348051177075221184478_i128 as u16;
_9 = _3 + _3;
_1 = _9 as f64;
_7.2 = -_4;
_7.3 = 115654064858512618640525128442715560720_i128 as f32;
_9 = !_3;
_6 = 129_u8;
_4 = _1;
Goto(bb1)
}
bb1 = {
_9 = (-2057702121111127443_i64) as isize;
_3 = (-32_i8) as isize;
_5 = _1;
_7.3 = _2 as f32;
_9 = 3797802078_u32 as isize;
_13 = 28032_i16;
match _6 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
6 => bb8,
129 => bb10,
_ => bb9
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_10 = '\u{d0378}';
RET = _1 as u16;
_7.2 = _6 as f64;
_6 = !219_u8;
_5 = _1;
_7.0 = false;
_7.3 = (-79878017678150525923548052718629879447_i128) as f32;
_9 = !_3;
_7.0 = true;
_11 = (-194267762_i32) as f32;
_7.3 = _11 * _11;
_7.1 = 17879741067223430229_u64;
_1 = _5;
RET = !64147_u16;
_9 = _3 & _3;
RET = 49187_u16 - 33521_u16;
_7.0 = !true;
_15 = 1133551822_u32 | 407830523_u32;
_14 = _6 & _6;
_5 = _13 as f64;
RET = !57413_u16;
_13 = (-21547_i16);
_13 = (-17767_i16);
_7.0 = true;
_10 = '\u{e648c}';
_7.1 = 8440435346553159459_u64;
_7 = (true, 18379656924438461678_u64, _1, _11);
match _7.1 {
0 => bb1,
1 => bb2,
2 => bb6,
3 => bb9,
4 => bb11,
18379656924438461678 => bb13,
_ => bb12
}
}
bb11 = {
_9 = (-2057702121111127443_i64) as isize;
_3 = (-32_i8) as isize;
_5 = _1;
_7.3 = _2 as f32;
_9 = 3797802078_u32 as isize;
_13 = 28032_i16;
match _6 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
6 => bb8,
129 => bb10,
_ => bb9
}
}
bb12 = {
Return()
}
bb13 = {
_17 = _7.3;
_18 = _2;
_6 = _14;
RET = _11 as u16;
_7 = (false, 6586914784965946728_u64, _4, _17);
_12 = -_17;
_10 = '\u{60a80}';
_9 = _2 as isize;
_17 = _7.3 + _11;
_10 = '\u{7447c}';
_3 = RET as isize;
_7.0 = true;
_1 = -_4;
_20 = _13 as isize;
_18 = !_2;
_14 = !_6;
_19 = _7.0 as isize;
_11 = _13 as f32;
_21 = [RET,RET,RET];
RET = 54774_u16;
_15 = !3900339058_u32;
match _7.1 {
0 => bb1,
1 => bb10,
2 => bb14,
6586914784965946728 => bb16,
_ => bb15
}
}
bb14 = {
_10 = '\u{d0378}';
RET = _1 as u16;
_7.2 = _6 as f64;
_6 = !219_u8;
_5 = _1;
_7.0 = false;
_7.3 = (-79878017678150525923548052718629879447_i128) as f32;
_9 = !_3;
_7.0 = true;
_11 = (-194267762_i32) as f32;
_7.3 = _11 * _11;
_7.1 = 17879741067223430229_u64;
_1 = _5;
RET = !64147_u16;
_9 = _3 & _3;
RET = 49187_u16 - 33521_u16;
_7.0 = !true;
_15 = 1133551822_u32 | 407830523_u32;
_14 = _6 & _6;
_5 = _13 as f64;
RET = !57413_u16;
_13 = (-21547_i16);
_13 = (-17767_i16);
_7.0 = true;
_10 = '\u{e648c}';
_7.1 = 8440435346553159459_u64;
_7 = (true, 18379656924438461678_u64, _1, _11);
match _7.1 {
0 => bb1,
1 => bb2,
2 => bb6,
3 => bb9,
4 => bb11,
18379656924438461678 => bb13,
_ => bb12
}
}
bb15 = {
Return()
}
bb16 = {
_10 = '\u{d9349}';
_22 = _7.0;
_23 = !_22;
_22 = _7.1 < _7.1;
_3 = _19;
_14 = _6 - _6;
_4 = _12 as f64;
_9 = _19;
_21 = [RET,RET,RET];
_5 = _1 * _7.2;
_17 = _7.3;
_26.fld2 = (_22, _7.1, _1, _17);
_26.fld3.0.2 = [(-2072124266_i32),1379067585_i32];
_26.fld0.2 = _6 as u32;
_27 = (_10, RET, _26.fld3.0.2, _15, _18);
_23 = _22 & _7.0;
_26.fld2 = _7;
_26.fld3.0.0 = _10;
Goto(bb17)
}
bb17 = {
Call(_28 = dump_var(9_usize, 9_usize, Move(_9), 15_usize, Move(_15), 19_usize, Move(_19), 6_usize, Move(_6)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_28 = dump_var(9_usize, 21_usize, Move(_21), 10_usize, Move(_10), 13_usize, Move(_13), 29_usize, _29), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn10(mut _1: f64,mut _2: f64,mut _3: isize,mut _4: f64) -> bool {
mir! {
type RET = bool;
let _5: bool;
let _6: u32;
let _7: ([i32; 2], f64);
let _8: f32;
let _9: *mut *mut f32;
let _10: i16;
let _11: i64;
let _12: ();
let _13: ();
{
RET = !false;
RET = true;
_4 = _2 - _1;
_1 = _2 * _4;
_2 = (-4192034831738228703_i64) as f64;
Call(_2 = core::intrinsics::fmaf64(_4, _4, _1), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_4 = _1 * _1;
_6 = !960740217_u32;
_7.1 = 9036747982792305633_u64 as f64;
_5 = !RET;
_3 = (-99_isize) & 9223372036854775807_isize;
_2 = _4;
RET = _4 >= _4;
_1 = _4;
_5 = RET;
_3 = 9223372036854775807_isize << _6;
_8 = (-1940534430_i32) as f32;
Goto(bb2)
}
bb2 = {
Call(_12 = dump_var(10_usize, 6_usize, Move(_6), 13_usize, _13, 13_usize, _13, 13_usize, _13), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn11(mut _1: bool,mut _2: f64,mut _3: char,mut _4: bool,mut _5: f64,mut _6: f64) -> f64 {
mir! {
type RET = f64;
let _7: [i8; 7];
let _8: i8;
let _9: bool;
let _10: Adt46;
let _11: ();
let _12: ();
{
RET = 5049896276189816595_i64 as f64;
_4 = !_1;
_7 = [59_i8,39_i8,59_i8,(-111_i8),30_i8,90_i8,32_i8];
_2 = _5 * _5;
_8 = -20_i8;
_6 = _2 + _5;
_1 = _4;
RET = -_6;
RET = -_6;
_8 = (-65_i8) >> 2251105912_u32;
_8 = (-36_i8) * (-74_i8);
_4 = _1 | _1;
_9 = _4 >= _4;
_4 = _6 == _5;
_9 = !_4;
Goto(bb1)
}
bb1 = {
Call(_11 = dump_var(11_usize, 3_usize, Move(_3), 4_usize, Move(_4), 8_usize, Move(_8), 12_usize, _12), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn12(mut _1: i64,mut _2: bool,mut _3: isize,mut _4: isize,mut _5: bool,mut _6: bool,mut _7: isize) -> Adt43 {
mir! {
type RET = Adt43;
let _8: bool;
let _9: *mut [u32; 5];
let _10: [i32; 2];
let _11: ([u16; 3],);
let _12: Adt51;
let _13: *const i8;
let _14: isize;
let _15: u16;
let _16: isize;
let _17: *mut f32;
let _18: ([i32; 2], f64);
let _19: char;
let _20: *const &'static usize;
let _21: f64;
let _22: *const *mut [u32; 5];
let _23: ([i32; 2], f64);
let _24: f32;
let _25: f32;
let _26: isize;
let _27: *const (bool, u64, f64, f32);
let _28: (bool, u64, f64, f32);
let _29: (u32,);
let _30: bool;
let _31: isize;
let _32: f32;
let _33: f64;
let _34: f64;
let _35: (u32,);
let _36: Adt51;
let _37: isize;
let _38: bool;
let _39: Adt42;
let _40: f32;
let _41: (char, u16, [i32; 2], u32, u128);
let _42: (bool, u64, f64, f32);
let _43: f32;
let _44: [u16; 3];
let _45: [i32; 2];
let _46: Adt52;
let _47: Adt47;
let _48: [u16; 3];
let _49: [usize; 4];
let _50: (char, [u32; 5]);
let _51: f64;
let _52: [u16; 3];
let _53: (*mut (u32,),);
let _54: isize;
let _55: u8;
let _56: [i32; 2];
let _57: [i8; 7];
let _58: ([i32; 2], f64);
let _59: i16;
let _60: f64;
let _61: [u32; 5];
let _62: (bool, u64, f64, f32);
let _63: u16;
let _64: Adt54;
let _65: i64;
let _66: [usize; 4];
let _67: u16;
let _68: isize;
let _69: [u16; 3];
let _70: [u16; 3];
let _71: char;
let _72: [usize; 4];
let _73: ();
let _74: ();
{
_1 = -1863368272337472168_i64;
_1 = _4 as i64;
_8 = !_5;
Goto(bb1)
}
bb1 = {
_3 = !_7;
_4 = _3;
_4 = (-28130_i16) as isize;
_3 = -_7;
Goto(bb2)
}
bb2 = {
_2 = !_6;
_2 = !_6;
Goto(bb3)
}
bb3 = {
_10 = [(-456898676_i32),1915189795_i32];
_11.0 = [54827_u16,37062_u16,40195_u16];
_2 = _6;
_3 = -_7;
_6 = _8 >= _5;
_6 = !_8;
_4 = _3;
_14 = -_7;
_8 = _6 & _6;
_3 = _14 * _4;
_4 = _3 - _3;
_10 = [527347556_i32,268928729_i32];
_10 = [(-758856761_i32),1845632144_i32];
_11.0 = [29320_u16,1496_u16,4679_u16];
_6 = _8 > _2;
_4 = _3;
_11.0 = [1157_u16,45265_u16,57920_u16];
_16 = (-87_i8) as isize;
_15 = !61784_u16;
Goto(bb4)
}
bb4 = {
_8 = _6;
_8 = !_5;
_4 = _7;
_4 = _3 >> _7;
_3 = _4;
_6 = _5;
Goto(bb5)
}
bb5 = {
_14 = -_4;
_4 = _3 - _14;
_5 = !_2;
_5 = _6 | _6;
_1 = 3280422863327443920_i64;
_18.1 = (-109906633014727264072466451996933324747_i128) as f64;
_5 = _2 != _8;
Goto(bb6)
}
bb6 = {
_15 = !37949_u16;
_18.1 = 4125823989656025856_u64 as f64;
_18.0 = [(-960800899_i32),882536852_i32];
_3 = 334820712675464196354026662468600129225_u128 as isize;
_3 = _4 * _4;
_2 = _6 | _8;
_1 = (-271391763988268846_i64) + 6168328095288491256_i64;
Goto(bb7)
}
bb7 = {
_15 = _18.1 as u16;
_15 = 5204605535164403490_u64 as u16;
_18.0 = [(-1959834844_i32),(-275540103_i32)];
_18.1 = _15 as f64;
Goto(bb8)
}
bb8 = {
_15 = !59857_u16;
_15 = 258697435373588264464353310611681100410_u128 as u16;
_15 = 38558_u16;
match _15 {
0 => bb7,
1 => bb2,
2 => bb9,
3 => bb10,
38558 => bb12,
_ => bb11
}
}
bb9 = {
_3 = !_7;
_4 = _3;
_4 = (-28130_i16) as isize;
_3 = -_7;
Goto(bb2)
}
bb10 = {
_10 = [(-456898676_i32),1915189795_i32];
_11.0 = [54827_u16,37062_u16,40195_u16];
_2 = _6;
_3 = -_7;
_6 = _8 >= _5;
_6 = !_8;
_4 = _3;
_14 = -_7;
_8 = _6 & _6;
_3 = _14 * _4;
_4 = _3 - _3;
_10 = [527347556_i32,268928729_i32];
_10 = [(-758856761_i32),1845632144_i32];
_11.0 = [29320_u16,1496_u16,4679_u16];
_6 = _8 > _2;
_4 = _3;
_11.0 = [1157_u16,45265_u16,57920_u16];
_16 = (-87_i8) as isize;
_15 = !61784_u16;
Goto(bb4)
}
bb11 = {
_8 = _6;
_8 = !_5;
_4 = _7;
_4 = _3 >> _7;
_3 = _4;
_6 = _5;
Goto(bb5)
}
bb12 = {
_11.0 = [_15,_15,_15];
_3 = _18.1 as isize;
_16 = _14 << _4;
_16 = _2 as isize;
_8 = !_2;
_16 = (-1841608250_i32) as isize;
_2 = _5;
_10 = [1846631391_i32,337897202_i32];
_6 = _5;
_10 = [1724370769_i32,1605325570_i32];
_5 = _6;
_4 = -_14;
_19 = '\u{ecbd7}';
_5 = _6 <= _8;
_6 = _5;
_1 = !3831275621381981302_i64;
_7 = _4;
match _15 {
0 => bb13,
1 => bb14,
2 => bb15,
3 => bb16,
4 => bb17,
5 => bb18,
6 => bb19,
38558 => bb21,
_ => bb20
}
}
bb13 = {
_8 = _6;
_8 = !_5;
_4 = _7;
_4 = _3 >> _7;
_3 = _4;
_6 = _5;
Goto(bb5)
}
bb14 = {
_2 = !_6;
_2 = !_6;
Goto(bb3)
}
bb15 = {
_3 = !_7;
_4 = _3;
_4 = (-28130_i16) as isize;
_3 = -_7;
Goto(bb2)
}
bb16 = {
_15 = !59857_u16;
_15 = 258697435373588264464353310611681100410_u128 as u16;
_15 = 38558_u16;
match _15 {
0 => bb7,
1 => bb2,
2 => bb9,
3 => bb10,
38558 => bb12,
_ => bb11
}
}
bb17 = {
_15 = _18.1 as u16;
_15 = 5204605535164403490_u64 as u16;
_18.0 = [(-1959834844_i32),(-275540103_i32)];
_18.1 = _15 as f64;
Goto(bb8)
}
bb18 = {
_15 = !37949_u16;
_18.1 = 4125823989656025856_u64 as f64;
_18.0 = [(-960800899_i32),882536852_i32];
_3 = 334820712675464196354026662468600129225_u128 as isize;
_3 = _4 * _4;
_2 = _6 | _8;
_1 = (-271391763988268846_i64) + 6168328095288491256_i64;
Goto(bb7)
}
bb19 = {
_14 = -_4;
_4 = _3 - _14;
_5 = !_2;
_5 = _6 | _6;
_1 = 3280422863327443920_i64;
_18.1 = (-109906633014727264072466451996933324747_i128) as f64;
_5 = _2 != _8;
Goto(bb6)
}
bb20 = {
_8 = _6;
_8 = !_5;
_4 = _7;
_4 = _3 >> _7;
_3 = _4;
_6 = _5;
Goto(bb5)
}
bb21 = {
_10 = [1253823706_i32,1872835441_i32];
_15 = !31674_u16;
_1 = (-8943743228820658045_i64);
_16 = _4 & _7;
_11.0 = [_15,_15,_15];
_4 = _16 >> _7;
_3 = _16 * _16;
_3 = -_14;
_1 = !(-2161954094086005414_i64);
_8 = !_6;
_19 = '\u{c565c}';
_22 = core::ptr::addr_of!(_9);
_5 = _8;
_7 = _4 * _4;
_23 = _18;
Call(_13 = fn13(_6, _5, _7, _5, _4, _5, _2, _6, _6, _7, _5), ReturnTo(bb22), UnwindUnreachable())
}
bb22 = {
_22 = core::ptr::addr_of!(_9);
_5 = !_2;
_14 = _6 as isize;
_21 = _18.1;
_10 = _18.0;
_17 = core::ptr::addr_of_mut!(_24);
_11.0 = [_15,_15,_15];
_4 = _14 * _14;
_1 = (-7033756578186979910_i64);
_3 = _14 | _14;
_18 = _23;
_17 = core::ptr::addr_of_mut!((*_17));
_28.0 = _5 <= _5;
_23.0 = [(-1501295675_i32),1684146163_i32];
_5 = _28.0 < _6;
_2 = _6;
_17 = core::ptr::addr_of_mut!(_28.3);
_26 = !_14;
_23.0 = [(-1833320709_i32),592236174_i32];
Goto(bb23)
}
bb23 = {
_7 = _19 as isize;
_3 = -_4;
_6 = _8;
_18 = (_23.0, _21);
_28.0 = !_5;
_11.0 = [_15,_15,_15];
_29.0 = 3177880407_u32;
_24 = _14 as f32;
_5 = _28.0;
_23 = (_10, _21);
_28.1 = 1238619744419551480_u64;
_28.2 = _21 + _21;
_27 = core::ptr::addr_of!(_28);
_29.0 = (*_27).1 as u32;
_4 = _24 as isize;
_29 = (3653536230_u32,);
_29.0 = _1 as u32;
_31 = _26 << _4;
_21 = -_23.1;
_4 = -_26;
_6 = _2;
_28.3 = -_24;
_1 = 891489467585873567_i64 << _3;
_32 = (*_27).3;
_10 = [1106390867_i32,(-285347108_i32)];
_3 = 163_u8 as isize;
Goto(bb24)
}
bb24 = {
_23 = (_18.0, (*_27).2);
_30 = _26 >= _31;
_17 = core::ptr::addr_of_mut!((*_17));
_23.1 = 1411836519_i32 as f64;
_1 = _4 as i64;
_28 = (_2, 18098033903568660936_u64, _23.1, _24);
_15 = 263405808853943724211591516462048239913_u128 as u16;
_18.0 = _23.0;
_1 = 141541396220036567023257171191947667835_u128 as i64;
_16 = 41_u8 as isize;
_34 = _23.1;
_19 = '\u{ebfdd}';
_28 = (_2, 9923991263607242619_u64, _34, _32);
_28.3 = (-13_i8) as f32;
_3 = _26;
Goto(bb25)
}
bb25 = {
_10 = _23.0;
_3 = _4;
_19 = '\u{16885}';
_16 = _4;
_23 = _18;
_15 = !30456_u16;
_29.0 = 2921284144_u32 << (*_27).1;
_37 = -_3;
_30 = _5;
Call(_35.0 = core::intrinsics::transmute(_29.0), ReturnTo(bb26), UnwindUnreachable())
}
bb26 = {
_3 = _37 - _26;
match _28.1 {
0 => bb27,
9923991263607242619 => bb29,
_ => bb28
}
}
bb27 = {
_8 = _6;
_8 = !_5;
_4 = _7;
_4 = _3 >> _7;
_3 = _4;
_6 = _5;
Goto(bb5)
}
bb28 = {
_8 = _6;
_8 = !_5;
_4 = _7;
_4 = _3 >> _7;
_3 = _4;
_6 = _5;
Goto(bb5)
}
bb29 = {
_40 = -_24;
_18.1 = (*_27).2 - _23.1;
_5 = (*_27).0;
_24 = (-109578525_i32) as f32;
_41.0 = _19;
_31 = !_14;
_6 = _29.0 == _35.0;
_33 = _34;
_17 = core::ptr::addr_of_mut!(_25);
_2 = _28.0;
Goto(bb30)
}
bb30 = {
_10 = [(-392942380_i32),1911734168_i32];
_22 = core::ptr::addr_of!(_9);
_38 = _2;
_36 = Adt51::Variant2 { fld0: _23,fld1: _40,fld2: _28.2 };
_23.0 = _18.0;
_21 = (*_27).2;
_18 = (Field::<([i32; 2], f64)>(Variant(_36, 2), 0).0, (*_27).2);
_25 = Field::<f32>(Variant(_36, 2), 1);
_26 = _15 as isize;
_41 = (_19, _15, _23.0, _35.0, 12057557010817348053356196803409316457_u128);
_18 = (_10, _23.1);
_26 = _16 + _14;
Goto(bb31)
}
bb31 = {
_24 = _32 + _32;
Goto(bb32)
}
bb32 = {
_44 = [_41.1,_41.1,_41.1];
_36 = Adt51::Variant2 { fld0: _18,fld1: _25,fld2: _28.2 };
_14 = _3 << _41.4;
_18.0 = _23.0;
_29.0 = _1 as u32;
_43 = 21_i8 as f32;
_41.1 = _15 + _15;
_42.2 = 43159309294026815696210363902066155140_i128 as f64;
_48 = _11.0;
_42.3 = _41.1 as f32;
_18.0 = [937794803_i32,(-486224739_i32)];
_27 = core::ptr::addr_of!(_42);
_42 = (_8, _28.1, _18.1, _32);
_6 = _5 | (*_27).0;
_25 = (*_27).3;
_27 = core::ptr::addr_of!(_28);
match (*_27).1 {
0 => bb1,
1 => bb15,
2 => bb12,
3 => bb27,
4 => bb11,
5 => bb6,
6 => bb24,
9923991263607242619 => bb33,
_ => bb19
}
}
bb33 = {
_45 = [(-953256737_i32),1710791146_i32];
Goto(bb34)
}
bb34 = {
_26 = !_37;
_7 = !_31;
_39 = Adt42::Variant3 { fld0: (*_27).1,fld1: _13,fld2: _1 };
_26 = _7 * _31;
_37 = _31;
_15 = _41.3 as u16;
_29.0 = _31 as u32;
_17 = core::ptr::addr_of_mut!((*_17));
_1 = Field::<i64>(Variant(_39, 3), 2) * Field::<i64>(Variant(_39, 3), 2);
place!(Field::<*const i8>(Variant(_39, 3), 1)) = _13;
_41.4 = 36777355649856852992286868191802149965_u128;
_28 = (_38, _42.1, Field::<f64>(Variant(_36, 2), 2), _32);
_41.2 = [226549875_i32,(-606118177_i32)];
_23.0 = [2067575356_i32,(-1443806555_i32)];
_35.0 = _29.0;
_26 = !_3;
_17 = core::ptr::addr_of_mut!(_42.3);
_49 = [4355233930404359105_usize,4766447503717299968_usize,4_usize,8740588206338993500_usize];
_35.0 = !_41.3;
_50.0 = _19;
_6 = _14 == _4;
Goto(bb35)
}
bb35 = {
_8 = !_28.0;
_6 = _30;
_11 = (_48,);
_10 = [742453872_i32,(-31779248_i32)];
SetDiscriminant(_39, 1);
_33 = _21;
_41 = (_50.0, _15, _10, _35.0, 155176911712528276938883482884289899478_u128);
place!(Field::<usize>(Variant(_39, 1), 1)) = (-315350041_i32) as usize;
_25 = (*_27).3 + _24;
_42.0 = !_28.0;
_41.3 = !_35.0;
_34 = _23.1;
_32 = -(*_27).3;
_9 = core::ptr::addr_of_mut!(_50.1);
_18 = (Field::<([i32; 2], f64)>(Variant(_36, 2), 0).0, (*_27).2);
_27 = core::ptr::addr_of!(_28);
SetDiscriminant(_36, 1);
_8 = !(*_27).0;
_12 = Adt51::Variant2 { fld0: _18,fld1: _32,fld2: (*_27).2 };
place!(Field::<i128>(Variant(_36, 1), 3)) = _34 as i128;
_17 = core::ptr::addr_of_mut!(_24);
_28.0 = _41.4 >= _41.4;
match (*_27).1 {
0 => bb31,
1 => bb36,
2 => bb37,
3 => bb38,
9923991263607242619 => bb40,
_ => bb39
}
}
bb36 = {
_10 = [(-456898676_i32),1915189795_i32];
_11.0 = [54827_u16,37062_u16,40195_u16];
_2 = _6;
_3 = -_7;
_6 = _8 >= _5;
_6 = !_8;
_4 = _3;
_14 = -_7;
_8 = _6 & _6;
_3 = _14 * _4;
_4 = _3 - _3;
_10 = [527347556_i32,268928729_i32];
_10 = [(-758856761_i32),1845632144_i32];
_11.0 = [29320_u16,1496_u16,4679_u16];
_6 = _8 > _2;
_4 = _3;
_11.0 = [1157_u16,45265_u16,57920_u16];
_16 = (-87_i8) as isize;
_15 = !61784_u16;
Goto(bb4)
}
bb37 = {
_7 = _19 as isize;
_3 = -_4;
_6 = _8;
_18 = (_23.0, _21);
_28.0 = !_5;
_11.0 = [_15,_15,_15];
_29.0 = 3177880407_u32;
_24 = _14 as f32;
_5 = _28.0;
_23 = (_10, _21);
_28.1 = 1238619744419551480_u64;
_28.2 = _21 + _21;
_27 = core::ptr::addr_of!(_28);
_29.0 = (*_27).1 as u32;
_4 = _24 as isize;
_29 = (3653536230_u32,);
_29.0 = _1 as u32;
_31 = _26 << _4;
_21 = -_23.1;
_4 = -_26;
_6 = _2;
_28.3 = -_24;
_1 = 891489467585873567_i64 << _3;
_32 = (*_27).3;
_10 = [1106390867_i32,(-285347108_i32)];
_3 = 163_u8 as isize;
Goto(bb24)
}
bb38 = {
_44 = [_41.1,_41.1,_41.1];
_36 = Adt51::Variant2 { fld0: _18,fld1: _25,fld2: _28.2 };
_14 = _3 << _41.4;
_18.0 = _23.0;
_29.0 = _1 as u32;
_43 = 21_i8 as f32;
_41.1 = _15 + _15;
_42.2 = 43159309294026815696210363902066155140_i128 as f64;
_48 = _11.0;
_42.3 = _41.1 as f32;
_18.0 = [937794803_i32,(-486224739_i32)];
_27 = core::ptr::addr_of!(_42);
_42 = (_8, _28.1, _18.1, _32);
_6 = _5 | (*_27).0;
_25 = (*_27).3;
_27 = core::ptr::addr_of!(_28);
match (*_27).1 {
0 => bb1,
1 => bb15,
2 => bb12,
3 => bb27,
4 => bb11,
5 => bb6,
6 => bb24,
9923991263607242619 => bb33,
_ => bb19
}
}
bb39 = {
_3 = !_7;
_4 = _3;
_4 = (-28130_i16) as isize;
_3 = -_7;
Goto(bb2)
}
bb40 = {
_4 = _1 as isize;
place!(Field::<([i32; 2], f64)>(Variant(_36, 1), 2)) = _18;
_15 = (-1418793999_i32) as u16;
_23.1 = _34 + _42.2;
_51 = Field::<([i32; 2], f64)>(Variant(_36, 1), 2).1 - Field::<f64>(Variant(_12, 2), 2);
_54 = Field::<usize>(Variant(_39, 1), 1) as isize;
place!(Field::<([i32; 2], f64)>(Variant(_12, 2), 0)).1 = _28.3 as f64;
place!(Field::<([i32; 2], f64)>(Variant(_36, 1), 2)).0 = [(-68807888_i32),2124216815_i32];
_41 = (_19, _15, Field::<([i32; 2], f64)>(Variant(_36, 1), 2).0, _29.0, 99530271445635523292028552721839910220_u128);
_28 = _42;
SetDiscriminant(_12, 2);
_23.0 = [368690601_i32,(-1824355576_i32)];
_56 = [(-1549608675_i32),1421324925_i32];
place!(Field::<([i32; 2], f64)>(Variant(_12, 2), 0)).0 = Field::<([i32; 2], f64)>(Variant(_36, 1), 2).0;
place!(Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_36, 1), 1)).0 = _41.0;
place!(Field::<(bool, u64, f64, f32)>(Variant(_39, 1), 2)).3 = Field::<i128>(Variant(_36, 1), 3) as f32;
place!(Field::<(bool, u64, f64, f32)>(Variant(_39, 1), 2)) = (_42.0, (*_27).1, (*_27).2, _28.3);
place!(Field::<usize>(Variant(_39, 1), 1)) = !12501177597341488903_usize;
_36 = Adt51::Variant2 { fld0: _18,fld1: _40,fld2: _18.1 };
match (*_27).1 {
0 => bb6,
1 => bb41,
9923991263607242619 => bb43,
_ => bb42
}
}
bb41 = {
_15 = !59857_u16;
_15 = 258697435373588264464353310611681100410_u128 as u16;
_15 = 38558_u16;
match _15 {
0 => bb7,
1 => bb2,
2 => bb9,
3 => bb10,
38558 => bb12,
_ => bb11
}
}
bb42 = {
_23 = (_18.0, (*_27).2);
_30 = _26 >= _31;
_17 = core::ptr::addr_of_mut!((*_17));
_23.1 = 1411836519_i32 as f64;
_1 = _4 as i64;
_28 = (_2, 18098033903568660936_u64, _23.1, _24);
_15 = 263405808853943724211591516462048239913_u128 as u16;
_18.0 = _23.0;
_1 = 141541396220036567023257171191947667835_u128 as i64;
_16 = 41_u8 as isize;
_34 = _23.1;
_19 = '\u{ebfdd}';
_28 = (_2, 9923991263607242619_u64, _34, _32);
_28.3 = (-13_i8) as f32;
_3 = _26;
Goto(bb25)
}
bb43 = {
_4 = _7;
place!(Field::<usize>(Variant(_39, 1), 1)) = 4865742983704928988_usize;
_39 = Adt42::Variant3 { fld0: _42.1,fld1: _13,fld2: _1 };
_4 = 120547834745567383468189345363610975649_i128 as isize;
_18.0 = [527170524_i32,(-1314473938_i32)];
place!(Field::<([i32; 2], f64)>(Variant(_12, 2), 0)).1 = 7_i8 as f64;
_35.0 = _29.0 * _29.0;
_1 = _19 as i64;
place!(Field::<([i32; 2], f64)>(Variant(_12, 2), 0)).0 = [(-846372224_i32),(-643430890_i32)];
_25 = 1721822270_i32 as f32;
place!(Field::<f64>(Variant(_12, 2), 2)) = -(*_27).2;
_36 = Adt51::Variant2 { fld0: _23,fld1: _40,fld2: _23.1 };
_58 = (_41.2, Field::<([i32; 2], f64)>(Variant(_12, 2), 0).1);
_53.0 = core::ptr::addr_of_mut!(_35);
_42 = (*_27);
place!(Field::<i64>(Variant(_39, 3), 2)) = _1 - _1;
_42.3 = -(*_27).3;
Goto(bb44)
}
bb44 = {
_42 = (_38, (*_27).1, (*_27).2, _24);
_28 = _42;
place!(Field::<([i32; 2], f64)>(Variant(_36, 2), 0)) = Field::<([i32; 2], f64)>(Variant(_12, 2), 0);
_62.3 = -_42.3;
Call(place!(Field::<f64>(Variant(_12, 2), 2)) = core::intrinsics::transmute(_42.1), ReturnTo(bb45), UnwindUnreachable())
}
bb45 = {
_40 = Field::<f32>(Variant(_36, 2), 1) * _62.3;
_50.1 = [_29.0,_35.0,_41.3,_35.0,_41.3];
_62.1 = 4956877_i32 as u64;
_55 = _24 as u8;
_15 = !_41.1;
_48 = [_41.1,_41.1,_41.1];
_50.0 = _19;
_25 = (*_27).1 as f32;
_26 = 28565_i16 as isize;
_28.2 = Field::<f64>(Variant(_12, 2), 2);
_61 = (*_9);
_6 = _30 ^ _38;
_44 = [_41.1,_41.1,_41.1];
_62.2 = Field::<f64>(Variant(_12, 2), 2) + Field::<f64>(Variant(_12, 2), 2);
_50 = (_41.0, _61);
_15 = !_41.1;
_23 = _58;
_61 = [_35.0,_35.0,_35.0,_35.0,_41.3];
_43 = _42.3 - Field::<f32>(Variant(_36, 2), 1);
_18 = (Field::<([i32; 2], f64)>(Variant(_12, 2), 0).0, (*_27).2);
Call(_61 = core::intrinsics::transmute((*_9)), ReturnTo(bb46), UnwindUnreachable())
}
bb46 = {
_26 = _7 & _31;
_50.1 = [_35.0,_35.0,_35.0,_41.3,_29.0];
_18.1 = -_62.2;
_38 = _6;
_41.3 = !_29.0;
_2 = _16 < _37;
_42.1 = (*_27).1 + (*_27).1;
_66 = [9742057916385851524_usize,12626459119938751906_usize,5_usize,4537646959189073029_usize];
_28.0 = !_2;
Goto(bb47)
}
bb47 = {
_5 = (*_27).0 <= (*_27).0;
_29.0 = _40 as u32;
_23.1 = _35.0 as f64;
_28.0 = _2;
_56 = _45;
_27 = core::ptr::addr_of!((*_27));
_62.3 = (*_27).3;
_35 = (_41.3,);
_66 = _49;
RET = Adt43::Variant1 { fld0: _42.1,fld1: _41.1,fld2: _41,fld3: (*_22),fld4: _22 };
_16 = 141686439639041807513246478362241328584_i128 as isize;
place!(Field::<u64>(Variant(_39, 3), 0)) = !_28.1;
_25 = (*_17);
place!(Field::<([i32; 2], f64)>(Variant(_12, 2), 0)).1 = -(*_27).2;
SetDiscriminant(_39, 2);
_41.1 = Field::<(char, u16, [i32; 2], u32, u128)>(Variant(RET, 1), 2).1;
_42.0 = !(*_27).0;
_41.0 = Field::<(char, u16, [i32; 2], u32, u128)>(Variant(RET, 1), 2).0;
_72 = _49;
place!(Field::<([i32; 2], f64)>(Variant(_12, 2), 0)) = _18;
place!(Field::<f32>(Variant(_12, 2), 1)) = _42.3 + _42.3;
_45 = _41.2;
_45 = [(-654743582_i32),(-264778845_i32)];
_63 = Field::<u16>(Variant(RET, 1), 1);
_40 = (-19_i8) as f32;
SetDiscriminant(_12, 0);
place!(Field::<(*mut [u32; 5], i8)>(Variant(_12, 0), 6)).1 = (-2001_i16) as i8;
place!(Field::<(*mut [u32; 5], i8)>(Variant(_12, 0), 6)) = (_9, (-29_i8));
Goto(bb48)
}
bb48 = {
Call(_73 = dump_var(12_usize, 30_usize, Move(_30), 8_usize, Move(_8), 48_usize, Move(_48), 61_usize, Move(_61)), ReturnTo(bb49), UnwindUnreachable())
}
bb49 = {
Call(_73 = dump_var(12_usize, 49_usize, Move(_49), 54_usize, Move(_54), 2_usize, Move(_2), 31_usize, Move(_31)), ReturnTo(bb50), UnwindUnreachable())
}
bb50 = {
Call(_73 = dump_var(12_usize, 44_usize, Move(_44), 5_usize, Move(_5), 38_usize, Move(_38), 4_usize, Move(_4)), ReturnTo(bb51), UnwindUnreachable())
}
bb51 = {
Call(_73 = dump_var(12_usize, 14_usize, Move(_14), 16_usize, Move(_16), 19_usize, Move(_19), 11_usize, Move(_11)), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
Call(_73 = dump_var(12_usize, 1_usize, Move(_1), 74_usize, _74, 74_usize, _74, 74_usize, _74), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn13(mut _1: bool,mut _2: bool,mut _3: isize,mut _4: bool,mut _5: isize,mut _6: bool,mut _7: bool,mut _8: bool,mut _9: bool,mut _10: isize,mut _11: bool) -> *const i8 {
mir! {
type RET = *const i8;
let _12: isize;
let _13: u8;
let _14: (char, [u32; 5]);
let _15: [usize; 4];
let _16: Adt49;
let _17: (bool, u64, f64, f32);
let _18: u128;
let _19: f32;
let _20: [i32; 2];
let _21: [u32; 5];
let _22: [usize; 4];
let _23: [i32; 2];
let _24: Adt54;
let _25: f64;
let _26: [i8; 7];
let _27: [u16; 3];
let _28: f64;
let _29: f64;
let _30: isize;
let _31: (u32,);
let _32: u128;
let _33: (bool, u64, f64, f32);
let _34: i32;
let _35: [usize; 4];
let _36: Adt51;
let _37: [u32; 5];
let _38: (u32,);
let _39: ([u16; 3],);
let _40: ([i32; 2], f64);
let _41: isize;
let _42: Adt58;
let _43: f64;
let _44: Adt46;
let _45: ((char, u16, [i32; 2], u32, u128), bool, *const i8);
let _46: [i8; 7];
let _47: [i32; 2];
let _48: isize;
let _49: Adt43;
let _50: char;
let _51: Adt42;
let _52: [i32; 2];
let _53: [u16; 3];
let _54: isize;
let _55: *mut (u32,);
let _56: [u16; 3];
let _57: Adt54;
let _58: (char, [u32; 5]);
let _59: f64;
let _60: [i8; 7];
let _61: u128;
let _62: Adt42;
let _63: i64;
let _64: [i8; 7];
let _65: [u16; 3];
let _66: i64;
let _67: ((char, u16, [i32; 2], u32, u128), bool, *const i8);
let _68: bool;
let _69: [usize; 4];
let _70: i128;
let _71: i64;
let _72: f64;
let _73: Adt58;
let _74: Adt45;
let _75: (char, [u32; 5]);
let _76: ([i32; 2], f64);
let _77: [i32; 2];
let _78: isize;
let _79: (char, u16, [i32; 2], u32, u128);
let _80: *mut *mut f32;
let _81: f64;
let _82: ([u16; 3],);
let _83: (char, [u32; 5]);
let _84: u8;
let _85: (char, u16, [i32; 2], u32, u128);
let _86: u16;
let _87: ((char, u16, [i32; 2], u32, u128), bool, *const i8);
let _88: f32;
let _89: ([i32; 2], f64);
let _90: isize;
let _91: Adt58;
let _92: isize;
let _93: (char, [u32; 5]);
let _94: char;
let _95: *const i8;
let _96: ([i32; 2], f64);
let _97: [i8; 7];
let _98: bool;
let _99: (*mut [u32; 5], u128, u32, *mut [u32; 5]);
let _100: ();
let _101: ();
{
_6 = !_7;
_1 = _9;
_6 = !_4;
_9 = _4 != _11;
_8 = _6;
_1 = _9 <= _11;
_9 = !_6;
Call(_11 = fn14(_4, _10), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_7 = _6;
_5 = _10;
_4 = _1 >= _9;
_12 = !_3;
_12 = (-4813950010973184279_i64) as isize;
_13 = !183_u8;
_12 = -_5;
_11 = _4;
_7 = !_1;
_9 = _6;
_9 = _11;
Call(_10 = fn15(_6, _9, _6, _9, _8), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_7 = _1;
_12 = !_5;
_12 = 1132480879_u32 as isize;
_9 = _8;
_5 = _10 - _3;
_10 = 13283_i16 as isize;
_2 = _11 <= _8;
_14.0 = '\u{621a5}';
_14.0 = '\u{1cf84}';
_16.fld0 = _13;
_18 = !104497468791941662225345291582458583497_u128;
_19 = _18 as f32;
Goto(bb3)
}
bb3 = {
_19 = 953242369_u32 as f32;
_10 = _3;
_20 = [(-1876382859_i32),(-772442377_i32)];
_11 = !_2;
_14.1 = [3941462109_u32,470529108_u32,3748736565_u32,4077351252_u32,2789806963_u32];
Call(_12 = core::intrinsics::transmute(_10), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_19 = 38431_u16 as f32;
_9 = !_8;
Goto(bb5)
}
bb5 = {
_17.2 = _10 as f64;
_16.fld3 = [1162646302127105061_usize,13823892769468454915_usize,2_usize,6_usize];
_3 = _10;
_17.1 = 13570493236235720546_u64 << _5;
_15 = [13809857344809540487_usize,1_usize,7_usize,4_usize];
_5 = (-28670_i16) as isize;
_10 = 17574_i16 as isize;
_10 = _3 << _5;
_7 = _17.2 > _17.2;
_16.fld3 = [2_usize,2_usize,9288203939378072690_usize,2237857075777001738_usize];
_8 = !_4;
_7 = _17.1 >= _17.1;
_16.fld1 = !10733688720538009998_usize;
_4 = _11;
_17.3 = _19;
_17.2 = _10 as f64;
_15 = _16.fld3;
_12 = _10 * _3;
_14.1 = [4074274431_u32,1308159965_u32,1780277160_u32,3947187295_u32,433249848_u32];
_14.1 = [4100883728_u32,418469364_u32,3915674499_u32,2158721833_u32,1401763179_u32];
Call(_6 = fn17(_8, _11, _17.2, _9, _7), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
_20 = [(-970289480_i32),(-1466353042_i32)];
_23 = [(-819599182_i32),1230112776_i32];
_17.0 = _4 | _8;
_16.fld2 = core::ptr::addr_of_mut!(_21);
_5 = _18 as isize;
_16.fld1 = !1837146143226153722_usize;
_8 = _2;
Call(_17.1 = core::intrinsics::transmute(_12), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
_6 = !_17.0;
_20 = [(-2090723973_i32),(-890871381_i32)];
_4 = !_6;
_6 = _17.0 > _11;
Goto(bb8)
}
bb8 = {
_12 = _10;
_16.fld1 = 10800750555078571275_usize;
_20 = [(-425561473_i32),(-347895543_i32)];
match _16.fld1 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb5,
5 => bb6,
6 => bb7,
10800750555078571275 => bb10,
_ => bb9
}
}
bb9 = {
_7 = _6;
_5 = _10;
_4 = _1 >= _9;
_12 = !_3;
_12 = (-4813950010973184279_i64) as isize;
_13 = !183_u8;
_12 = -_5;
_11 = _4;
_7 = !_1;
_9 = _6;
_9 = _11;
Call(_10 = fn15(_6, _9, _6, _9, _8), ReturnTo(bb2), UnwindUnreachable())
}
bb10 = {
_19 = _17.3 - _17.3;
Call(_16 = fn18(_12, _9, _17.2, _17.0, _14, _9, _6, _3, _9, _17.0, _10, _12, _7, _4, _6, _2), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_22 = [_16.fld1,_16.fld1,_16.fld1,_16.fld1];
_14.1 = [1627593093_u32,493752823_u32,3597108378_u32,2169492655_u32,3220268102_u32];
_8 = _11;
_17.1 = !10321077552163836275_u64;
_25 = -_17.2;
_21 = [379092667_u32,3736266008_u32,1353953440_u32,635754239_u32,1559131413_u32];
_17.2 = -_25;
Goto(bb12)
}
bb12 = {
_19 = _17.3 - _17.3;
_24 = Adt54::Variant3 { fld0: _10,fld1: _17.1 };
SetDiscriminant(_24, 3);
_16.fld2 = core::ptr::addr_of_mut!(_14.1);
_16.fld1 = 4_usize;
_21 = [4030376566_u32,3863444627_u32,1871753159_u32,3053687671_u32,1397819059_u32];
_23 = [841854807_i32,1114389084_i32];
_1 = !_9;
_27 = _16.fld4;
_11 = _2;
_1 = !_6;
_22 = [_16.fld1,_16.fld1,_16.fld1,_16.fld1];
Goto(bb13)
}
bb13 = {
_31 = (2757603226_u32,);
place!(Field::<u64>(Variant(_24, 3), 1)) = _17.1;
_16.fld0 = _12 as u8;
Goto(bb14)
}
bb14 = {
_14 = ('\u{b1749}', _21);
_29 = -_25;
_17.1 = Field::<u64>(Variant(_24, 3), 1);
_28 = -_29;
_25 = -_28;
_26 = [(-78_i8),(-49_i8),13_i8,48_i8,(-98_i8),(-45_i8),55_i8];
_18 = 297851599809592640006906041506936808135_u128;
_16.fld3 = _15;
_33.0 = _25 >= _29;
_35 = [_16.fld1,_16.fld1,_16.fld1,_16.fld1];
_7 = _33.0 <= _4;
place!(Field::<isize>(Variant(_24, 3), 0)) = !_10;
_33.3 = -_19;
_15 = [_16.fld1,_16.fld1,_16.fld1,_16.fld1];
_17 = (_33.0, Field::<u64>(Variant(_24, 3), 1), _25, _33.3);
_3 = -_12;
_27 = _16.fld4;
_16.fld2 = core::ptr::addr_of_mut!(_14.1);
_5 = _10 - Field::<isize>(Variant(_24, 3), 0);
_16.fld2 = core::ptr::addr_of_mut!(_21);
_32 = _18 % _18;
_2 = !_33.0;
_31 = (1899870313_u32,);
_16.fld3 = _35;
Goto(bb15)
}
bb15 = {
_17.2 = _29 - _29;
match _31.0 {
0 => bb16,
1899870313 => bb18,
_ => bb17
}
}
bb16 = {
_14 = ('\u{b1749}', _21);
_29 = -_25;
_17.1 = Field::<u64>(Variant(_24, 3), 1);
_28 = -_29;
_25 = -_28;
_26 = [(-78_i8),(-49_i8),13_i8,48_i8,(-98_i8),(-45_i8),55_i8];
_18 = 297851599809592640006906041506936808135_u128;
_16.fld3 = _15;
_33.0 = _25 >= _29;
_35 = [_16.fld1,_16.fld1,_16.fld1,_16.fld1];
_7 = _33.0 <= _4;
place!(Field::<isize>(Variant(_24, 3), 0)) = !_10;
_33.3 = -_19;
_15 = [_16.fld1,_16.fld1,_16.fld1,_16.fld1];
_17 = (_33.0, Field::<u64>(Variant(_24, 3), 1), _25, _33.3);
_3 = -_12;
_27 = _16.fld4;
_16.fld2 = core::ptr::addr_of_mut!(_14.1);
_5 = _10 - Field::<isize>(Variant(_24, 3), 0);
_16.fld2 = core::ptr::addr_of_mut!(_21);
_32 = _18 % _18;
_2 = !_33.0;
_31 = (1899870313_u32,);
_16.fld3 = _35;
Goto(bb15)
}
bb17 = {
_7 = _1;
_12 = !_5;
_12 = 1132480879_u32 as isize;
_9 = _8;
_5 = _10 - _3;
_10 = 13283_i16 as isize;
_2 = _11 <= _8;
_14.0 = '\u{621a5}';
_14.0 = '\u{1cf84}';
_16.fld0 = _13;
_18 = !104497468791941662225345291582458583497_u128;
_19 = _18 as f32;
Goto(bb3)
}
bb18 = {
_26 = [23_i8,(-35_i8),(-93_i8),(-3_i8),11_i8,(-59_i8),108_i8];
_11 = _7;
_38.0 = _31.0 / _31.0;
_18 = _38.0 as u128;
_17 = (_7, Field::<u64>(Variant(_24, 3), 1), _25, _19);
_33 = (_17.0, Field::<u64>(Variant(_24, 3), 1), _17.2, _17.3);
_34 = 552840293_i32;
_25 = -_17.2;
_33.2 = _25 - _28;
_33.0 = Field::<isize>(Variant(_24, 3), 0) == _10;
_4 = !_6;
_12 = _13 as isize;
_16.fld4 = _27;
_40 = (_20, _28);
_19 = _33.3;
_14.0 = '\u{9c292}';
_33.3 = _16.fld0 as f32;
_12 = !_5;
_42.fld2.1 = _10 as u64;
Goto(bb19)
}
bb19 = {
_17.1 = _42.fld2.1 - _42.fld2.1;
match _31.0 {
0 => bb7,
1899870313 => bb21,
_ => bb20
}
}
bb20 = {
_20 = [(-970289480_i32),(-1466353042_i32)];
_23 = [(-819599182_i32),1230112776_i32];
_17.0 = _4 | _8;
_16.fld2 = core::ptr::addr_of_mut!(_21);
_5 = _18 as isize;
_16.fld1 = !1837146143226153722_usize;
_8 = _2;
Call(_17.1 = core::intrinsics::transmute(_12), ReturnTo(bb7), UnwindUnreachable())
}
bb21 = {
_42.fld0 = (_16.fld2, _32, _38.0, _16.fld2);
_28 = -_29;
_33 = (_9, _17.1, _28, _19);
_42.fld0.2 = _38.0 % _31.0;
match _34 {
0 => bb20,
1 => bb3,
552840293 => bb23,
_ => bb22
}
}
bb22 = {
_26 = [23_i8,(-35_i8),(-93_i8),(-3_i8),11_i8,(-59_i8),108_i8];
_11 = _7;
_38.0 = _31.0 / _31.0;
_18 = _38.0 as u128;
_17 = (_7, Field::<u64>(Variant(_24, 3), 1), _25, _19);
_33 = (_17.0, Field::<u64>(Variant(_24, 3), 1), _17.2, _17.3);
_34 = 552840293_i32;
_25 = -_17.2;
_33.2 = _25 - _28;
_33.0 = Field::<isize>(Variant(_24, 3), 0) == _10;
_4 = !_6;
_12 = _13 as isize;
_16.fld4 = _27;
_40 = (_20, _28);
_19 = _33.3;
_14.0 = '\u{9c292}';
_33.3 = _16.fld0 as f32;
_12 = !_5;
_42.fld2.1 = _10 as u64;
Goto(bb19)
}
bb23 = {
_16.fld1 = 10993838095391513699_usize;
_38 = _31;
_37 = [_42.fld0.2,_42.fld0.2,_31.0,_42.fld0.2,_42.fld0.2];
_45.0.2 = [_34,_34];
_47 = [_34,_34];
_43 = _29 + _25;
_39 = (_27,);
_42.fld3.0.1 = !41814_u16;
_14 = ('\u{8779b}', _21);
Call(_42 = fn19(_5, _17.2, _10, Field::<isize>(Variant(_24, 3), 0), _5, _4, _33.1, _17.1, _4, _11, _6, _40, _25, _11, _4, _33), ReturnTo(bb24), UnwindUnreachable())
}
bb24 = {
_45.0.1 = _42.fld3.0.1;
_2 = _7 <= _6;
_11 = _17.0 >= _9;
_25 = -_43;
SetDiscriminant(_24, 1);
place!(Field::<[i8; 7]>(Variant(_24, 1), 4)) = [(-91_i8),(-124_i8),57_i8,98_i8,(-53_i8),33_i8,86_i8];
_17 = _33;
_21 = [_31.0,_42.fld0.2,_42.fld3.0.3,_42.fld0.2,_42.fld3.0.3];
_42.fld0.0 = _16.fld2;
_40.0 = [_34,_34];
_39 = (_27,);
place!(Field::<(char, [u32; 5])>(Variant(_24, 1), 6)).0 = _14.0;
_21 = [_42.fld3.0.3,_42.fld0.2,_42.fld3.0.3,_42.fld0.2,_42.fld3.0.3];
_36 = Adt51::Variant1 { fld0: _17.0,fld1: _42.fld3.0,fld2: Field::<([i32; 2], f64)>(Variant(_42.fld1, 2), 0),fld3: 143810791918827246470442856172385731168_i128 };
_41 = 33_i8 as isize;
place!(Field::<(*mut [u32; 5], i8)>(Variant(_24, 1), 7)).0 = _42.fld0.0;
_17.0 = _8 & _4;
_31 = _38;
_24 = Adt54::Variant3 { fld0: _3,fld1: _17.1 };
_16 = Adt49 { fld0: _13,fld1: 0_usize,fld2: _42.fld0.0,fld3: _42.fld4,fld4: _27 };
match Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_36, 1), 1).3 {
0 => bb3,
1 => bb25,
2 => bb26,
3 => bb27,
4 => bb28,
5 => bb29,
6 => bb30,
293212513 => bb32,
_ => bb31
}
}
bb25 = {
_19 = 953242369_u32 as f32;
_10 = _3;
_20 = [(-1876382859_i32),(-772442377_i32)];
_11 = !_2;
_14.1 = [3941462109_u32,470529108_u32,3748736565_u32,4077351252_u32,2789806963_u32];
Call(_12 = core::intrinsics::transmute(_10), ReturnTo(bb4), UnwindUnreachable())
}
bb26 = {
_7 = _6;
_5 = _10;
_4 = _1 >= _9;
_12 = !_3;
_12 = (-4813950010973184279_i64) as isize;
_13 = !183_u8;
_12 = -_5;
_11 = _4;
_7 = !_1;
_9 = _6;
_9 = _11;
Call(_10 = fn15(_6, _9, _6, _9, _8), ReturnTo(bb2), UnwindUnreachable())
}
bb27 = {
_42.fld0 = (_16.fld2, _32, _38.0, _16.fld2);
_28 = -_29;
_33 = (_9, _17.1, _28, _19);
_42.fld0.2 = _38.0 % _31.0;
match _34 {
0 => bb20,
1 => bb3,
552840293 => bb23,
_ => bb22
}
}
bb28 = {
_14 = ('\u{b1749}', _21);
_29 = -_25;
_17.1 = Field::<u64>(Variant(_24, 3), 1);
_28 = -_29;
_25 = -_28;
_26 = [(-78_i8),(-49_i8),13_i8,48_i8,(-98_i8),(-45_i8),55_i8];
_18 = 297851599809592640006906041506936808135_u128;
_16.fld3 = _15;
_33.0 = _25 >= _29;
_35 = [_16.fld1,_16.fld1,_16.fld1,_16.fld1];
_7 = _33.0 <= _4;
place!(Field::<isize>(Variant(_24, 3), 0)) = !_10;
_33.3 = -_19;
_15 = [_16.fld1,_16.fld1,_16.fld1,_16.fld1];
_17 = (_33.0, Field::<u64>(Variant(_24, 3), 1), _25, _33.3);
_3 = -_12;
_27 = _16.fld4;
_16.fld2 = core::ptr::addr_of_mut!(_14.1);
_5 = _10 - Field::<isize>(Variant(_24, 3), 0);
_16.fld2 = core::ptr::addr_of_mut!(_21);
_32 = _18 % _18;
_2 = !_33.0;
_31 = (1899870313_u32,);
_16.fld3 = _35;
Goto(bb15)
}
bb29 = {
_12 = _10;
_16.fld1 = 10800750555078571275_usize;
_20 = [(-425561473_i32),(-347895543_i32)];
match _16.fld1 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb5,
5 => bb6,
6 => bb7,
10800750555078571275 => bb10,
_ => bb9
}
}
bb30 = {
_31 = (2757603226_u32,);
place!(Field::<u64>(Variant(_24, 3), 1)) = _17.1;
_16.fld0 = _12 as u8;
Goto(bb14)
}
bb31 = {
_7 = _1;
_12 = !_5;
_12 = 1132480879_u32 as isize;
_9 = _8;
_5 = _10 - _3;
_10 = 13283_i16 as isize;
_2 = _11 <= _8;
_14.0 = '\u{621a5}';
_14.0 = '\u{1cf84}';
_16.fld0 = _13;
_18 = !104497468791941662225345291582458583497_u128;
_19 = _18 as f32;
Goto(bb3)
}
bb32 = {
_32 = Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_36, 1), 1).4 & _42.fld3.0.4;
_17.2 = _42.fld2.2;
_16.fld1 = 2_usize << _17.1;
_16 = Adt49 { fld0: _13,fld1: 14061280757613093728_usize,fld2: _42.fld0.0,fld3: _42.fld4,fld4: _27 };
_48 = !_10;
_42.fld2 = (_11, _33.1, Field::<([i32; 2], f64)>(Variant(_36, 1), 2).1, Field::<f32>(Variant(_42.fld1, 2), 1));
_45.0 = (_14.0, Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_36, 1), 1).1, Field::<([i32; 2], f64)>(Variant(_42.fld1, 2), 0).0, Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_36, 1), 1).3, _42.fld0.1);
place!(Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_36, 1), 1)) = (_14.0, _45.0.1, _47, _45.0.3, _32);
_20 = _45.0.2;
_16 = Adt49 { fld0: _13,fld1: 7_usize,fld2: _42.fld0.0,fld3: _42.fld4,fld4: _39.0 };
_50 = _45.0.0;
_42.fld3.0 = (_50, Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_36, 1), 1).1, Field::<([i32; 2], f64)>(Variant(_42.fld1, 2), 0).0, _45.0.3, _45.0.4);
_16.fld1 = 1_usize - 13237786825654764457_usize;
_17.2 = _29;
_17 = (_42.fld3.1, _33.1, Field::<([i32; 2], f64)>(Variant(_42.fld1, 2), 0).1, Field::<f32>(Variant(_42.fld1, 2), 1));
_13 = !_16.fld0;
_17.3 = _42.fld2.3 - _42.fld2.3;
_27 = [Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_36, 1), 1).1,Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_36, 1), 1).1,_45.0.1];
_17.1 = _16.fld1 as u64;
place!(Field::<i128>(Variant(_36, 1), 3)) = (-104131996608390392572775418997641546142_i128) << _5;
_50 = _42.fld3.0.0;
_47 = [_34,_34];
_16.fld1 = (-60_i8) as usize;
_42.fld3.0.3 = _45.0.3 % Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_36, 1), 1).3;
_1 = _42.fld3.1;
match _31.0 {
0 => bb33,
1 => bb34,
1899870313 => bb36,
_ => bb35
}
}
bb33 = {
_31 = (2757603226_u32,);
place!(Field::<u64>(Variant(_24, 3), 1)) = _17.1;
_16.fld0 = _12 as u8;
Goto(bb14)
}
bb34 = {
_31 = (2757603226_u32,);
place!(Field::<u64>(Variant(_24, 3), 1)) = _17.1;
_16.fld0 = _12 as u8;
Goto(bb14)
}
bb35 = {
_14 = ('\u{b1749}', _21);
_29 = -_25;
_17.1 = Field::<u64>(Variant(_24, 3), 1);
_28 = -_29;
_25 = -_28;
_26 = [(-78_i8),(-49_i8),13_i8,48_i8,(-98_i8),(-45_i8),55_i8];
_18 = 297851599809592640006906041506936808135_u128;
_16.fld3 = _15;
_33.0 = _25 >= _29;
_35 = [_16.fld1,_16.fld1,_16.fld1,_16.fld1];
_7 = _33.0 <= _4;
place!(Field::<isize>(Variant(_24, 3), 0)) = !_10;
_33.3 = -_19;
_15 = [_16.fld1,_16.fld1,_16.fld1,_16.fld1];
_17 = (_33.0, Field::<u64>(Variant(_24, 3), 1), _25, _33.3);
_3 = -_12;
_27 = _16.fld4;
_16.fld2 = core::ptr::addr_of_mut!(_14.1);
_5 = _10 - Field::<isize>(Variant(_24, 3), 0);
_16.fld2 = core::ptr::addr_of_mut!(_21);
_32 = _18 % _18;
_2 = !_33.0;
_31 = (1899870313_u32,);
_16.fld3 = _35;
Goto(bb15)
}
bb36 = {
_42.fld3.0.2 = [_34,_34];
_46 = [100_i8,(-50_i8),78_i8,(-113_i8),76_i8,37_i8,58_i8];
SetDiscriminant(_42.fld1, 2);
place!(Field::<([i32; 2], f64)>(Variant(_42.fld1, 2), 0)).0 = Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_36, 1), 1).2;
_30 = _5 + _12;
_12 = _5;
_42.fld1 = Move(_36);
_16.fld3 = _42.fld4;
_16.fld0 = _13;
Goto(bb37)
}
bb37 = {
_15 = _16.fld3;
SetDiscriminant(_42.fld1, 2);
_59 = _43 - _28;
_7 = !_17.0;
_7 = !_17.0;
_56 = [_42.fld3.0.1,_45.0.1,_45.0.1];
_14.1 = [_42.fld3.0.3,_42.fld3.0.3,_45.0.3,_42.fld3.0.3,_45.0.3];
_42.fld3.0 = (_50, _45.0.1, _23, _42.fld0.2, _32);
SetDiscriminant(_24, 2);
_40 = (_20, _29);
_63 = 9160006681487626306_i64 << _33.1;
_42.fld2 = (_8, _33.1, _25, _33.3);
_65 = [_45.0.1,_42.fld3.0.1,_42.fld3.0.1];
place!(Field::<[i8; 7]>(Variant(_24, 2), 6)) = _46;
_48 = !_3;
_42.fld2.0 = !_17.0;
_59 = _13 as f64;
_17.3 = _33.3 + _19;
place!(Field::<(char, [u32; 5])>(Variant(_24, 2), 0)).0 = _45.0.0;
_45.1 = _17.0;
_42.fld1 = Adt51::Variant1 { fld0: _6,fld1: _42.fld3.0,fld2: _40,fld3: 26582884373023526789184953102624535348_i128 };
_16.fld1 = 8953448087205302869_usize;
_58.1 = [Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_42.fld1, 1), 1).3,Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_42.fld1, 1), 1).3,Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_42.fld1, 1), 1).3,_31.0,_31.0];
_16.fld4 = [Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_42.fld1, 1), 1).1,_45.0.1,_42.fld3.0.1];
_60 = [33_i8,(-44_i8),4_i8,(-24_i8),112_i8,(-106_i8),(-78_i8)];
_31 = (_45.0.3,);
place!(Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_24, 2), 1)).1 = Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_42.fld1, 1), 1).1 + Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_42.fld1, 1), 1).1;
_58.1 = [_31.0,_42.fld3.0.3,_31.0,_42.fld0.2,_45.0.3];
_42.fld2.3 = _33.3;
Goto(bb38)
}
bb38 = {
_17.3 = _33.3;
_40.1 = -_43;
_17.0 = _8;
place!(Field::<(*mut (u32,),)>(Variant(_24, 2), 5)).0 = core::ptr::addr_of_mut!(_38);
place!(Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_24, 2), 1)).0 = _45.0.0;
_56 = [Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_24, 2), 1).1,_42.fld3.0.1,Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_42.fld1, 1), 1).1];
_45.1 = _6;
_42.fld0.1 = Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_42.fld1, 1), 1).4 >> _63;
_42.fld3.0 = _45.0;
_36 = Adt51::Variant2 { fld0: _40,fld1: _19,fld2: Field::<([i32; 2], f64)>(Variant(_42.fld1, 1), 2).1 };
_43 = _17.2 * Field::<([i32; 2], f64)>(Variant(_36, 2), 0).1;
_37 = [Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_42.fld1, 1), 1).3,_42.fld3.0.3,_42.fld0.2,_42.fld3.0.3,_45.0.3];
_42.fld3.0.2 = [_34,_34];
place!(Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_24, 2), 1)).2 = [_34,_34];
_54 = _33.1 as isize;
_19 = _33.3 - _42.fld2.3;
place!(Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_24, 2), 1)).4 = _42.fld0.1 - Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_42.fld1, 1), 1).4;
match _31.0 {
0 => bb1,
1 => bb2,
2 => bb6,
3 => bb7,
4 => bb39,
5 => bb40,
6 => bb41,
293212513 => bb43,
_ => bb42
}
}
bb39 = {
_26 = [23_i8,(-35_i8),(-93_i8),(-3_i8),11_i8,(-59_i8),108_i8];
_11 = _7;
_38.0 = _31.0 / _31.0;
_18 = _38.0 as u128;
_17 = (_7, Field::<u64>(Variant(_24, 3), 1), _25, _19);
_33 = (_17.0, Field::<u64>(Variant(_24, 3), 1), _17.2, _17.3);
_34 = 552840293_i32;
_25 = -_17.2;
_33.2 = _25 - _28;
_33.0 = Field::<isize>(Variant(_24, 3), 0) == _10;
_4 = !_6;
_12 = _13 as isize;
_16.fld4 = _27;
_40 = (_20, _28);
_19 = _33.3;
_14.0 = '\u{9c292}';
_33.3 = _16.fld0 as f32;
_12 = !_5;
_42.fld2.1 = _10 as u64;
Goto(bb19)
}
bb40 = {
_19 = _17.3 - _17.3;
Call(_16 = fn18(_12, _9, _17.2, _17.0, _14, _9, _6, _3, _9, _17.0, _10, _12, _7, _4, _6, _2), ReturnTo(bb11), UnwindUnreachable())
}
bb41 = {
_31 = (2757603226_u32,);
place!(Field::<u64>(Variant(_24, 3), 1)) = _17.1;
_16.fld0 = _12 as u8;
Goto(bb14)
}
bb42 = {
_19 = 38431_u16 as f32;
_9 = !_8;
Goto(bb5)
}
bb43 = {
_5 = _12;
_67.0.2 = [_34,_34];
_64 = [(-2_i8),(-97_i8),(-84_i8),63_i8,(-46_i8),101_i8,16_i8];
_35 = [_16.fld1,_16.fld1,_16.fld1,_16.fld1];
_45.0.2 = [_34,_34];
_33.3 = _34 as f32;
_31 = (_42.fld0.2,);
_55 = core::ptr::addr_of_mut!(_38);
Goto(bb44)
}
bb44 = {
_53 = [_42.fld3.0.1,Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_42.fld1, 1), 1).1,_42.fld3.0.1];
_72 = -Field::<([i32; 2], f64)>(Variant(_36, 2), 0).1;
_67 = _42.fld3;
place!(Field::<Adt51>(Variant(_24, 2), 2)) = Adt51::Variant2 { fld0: _40,fld1: Field::<f32>(Variant(_36, 2), 1),fld2: _43 };
_58.0 = _50;
_3 = -_12;
_31.0 = !_45.0.3;
place!(Field::<f32>(Variant(place!(Field::<Adt51>(Variant(_24, 2), 2)), 2), 1)) = _17.3;
_5 = _48;
_42.fld0 = (_16.fld2, Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_24, 2), 1).4, _67.0.3, _16.fld2);
_42.fld3.0.1 = _45.0.1 & _67.0.1;
_20 = Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_24, 2), 1).2;
place!(Field::<(*mut (u32,),)>(Variant(_24, 2), 5)).0 = _55;
_73.fld4 = _16.fld3;
_61 = 2288_i16 as u128;
_3 = _30 >> _42.fld0.1;
Goto(bb45)
}
bb45 = {
_52 = [_34,_34];
_73.fld3.0.1 = _42.fld3.0.1 >> _42.fld0.1;
_73.fld3.0.1 = _42.fld3.0.1;
place!(Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_24, 2), 1)) = _67.0;
_73.fld0.1 = !_42.fld0.1;
_52 = [_34,_34];
_42.fld3.0 = (Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_24, 2), 1).0, Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_24, 2), 1).1, _20, _67.0.3, _42.fld0.1);
_73.fld2.1 = _4 as u64;
_73.fld3.0.3 = _17.2 as u32;
place!(Field::<([i32; 2], f64)>(Variant(place!(Field::<Adt51>(Variant(_24, 2), 2)), 2), 0)) = (_42.fld3.0.2, _25);
_39.0 = [_67.0.1,Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_24, 2), 1).1,Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_24, 2), 1).1];
_67.0.0 = Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_42.fld1, 1), 1).0;
_17 = (Field::<bool>(Variant(_42.fld1, 1), 0), _73.fld2.1, Field::<f64>(Variant(Field::<Adt51>(Variant(_24, 2), 2), 2), 2), Field::<f32>(Variant(Field::<Adt51>(Variant(_24, 2), 2), 2), 1));
_45.0.4 = !_73.fld0.1;
_34 = -274198532_i32;
place!(Field::<f32>(Variant(place!(Field::<Adt51>(Variant(_24, 2), 2)), 2), 1)) = Field::<f32>(Variant(_36, 2), 1) - _19;
place!(Field::<([i32; 2], f64)>(Variant(place!(Field::<Adt51>(Variant(_24, 2), 2)), 2), 0)).1 = -_42.fld2.2;
_42.fld0.1 = _45.0.4;
place!(Field::<*const *mut [u32; 5]>(Variant(_24, 2), 3)) = core::ptr::addr_of!(_42.fld0.0);
_32 = _16.fld1 as u128;
_42.fld1 = Move(_36);
place!(Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_24, 2), 1)).4 = _12 as u128;
SetDiscriminant(Field::<Adt51>(Variant(_24, 2), 2), 0);
match _42.fld3.0.3 {
0 => bb22,
1 => bb19,
2 => bb25,
3 => bb46,
293212513 => bb48,
_ => bb47
}
}
bb46 = {
_20 = [(-970289480_i32),(-1466353042_i32)];
_23 = [(-819599182_i32),1230112776_i32];
_17.0 = _4 | _8;
_16.fld2 = core::ptr::addr_of_mut!(_21);
_5 = _18 as isize;
_16.fld1 = !1837146143226153722_usize;
_8 = _2;
Call(_17.1 = core::intrinsics::transmute(_12), ReturnTo(bb7), UnwindUnreachable())
}
bb47 = {
_31 = (2757603226_u32,);
place!(Field::<u64>(Variant(_24, 3), 1)) = _17.1;
_16.fld0 = _12 as u8;
Goto(bb14)
}
bb48 = {
_66 = _63 | _63;
_33.3 = -_19;
_54 = -_10;
_50 = Field::<(char, [u32; 5])>(Variant(_24, 2), 0).0;
_64 = _46;
_42.fld0.3 = core::ptr::addr_of_mut!(_75.1);
_41 = _12;
place!(Field::<(char, [u32; 5])>(Variant(_24, 2), 0)) = (Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_24, 2), 1).0, _37);
SetDiscriminant(_42.fld1, 0);
place!(Field::<Adt51>(Variant(_24, 2), 2)) = Adt51::Variant2 { fld0: _40,fld1: _17.3,fld2: _40.1 };
_15 = [_16.fld1,_16.fld1,_16.fld1,_16.fld1];
place!(Field::<(*mut (u32,),)>(Variant(_24, 2), 5)) = (_55,);
_46 = Field::<[i8; 7]>(Variant(_24, 2), 6);
SetDiscriminant(Field::<Adt51>(Variant(_24, 2), 2), 0);
_73.fld0 = (_16.fld2, _42.fld3.0.4, _42.fld3.0.3, _16.fld2);
_7 = _42.fld2.0 ^ _42.fld2.0;
_67.0.2 = _45.0.2;
_54 = _5;
_28 = _16.fld1 as f64;
_67.0.0 = _45.0.0;
_67 = _42.fld3;
_73.fld1 = Adt51::Variant1 { fld0: _42.fld3.1,fld1: _42.fld3.0,fld2: _40,fld3: (-16041985292238079367107854395112358954_i128) };
_73.fld1 = Adt51::Variant2 { fld0: _40,fld1: _42.fld2.3,fld2: _42.fld2.2 };
Goto(bb49)
}
bb49 = {
_61 = 17782_i16 as u128;
place!(Field::<(*mut [u32; 5], i8)>(Variant(place!(Field::<Adt51>(Variant(_24, 2), 2)), 0), 6)).1 = (-78_i8) >> _42.fld0.1;
_73.fld0.1 = _42.fld3.0.4 ^ _67.0.4;
_73.fld3.2 = core::ptr::addr_of!(place!(Field::<(*mut [u32; 5], i8)>(Variant(_42.fld1, 0), 6)).1);
_45 = _67;
place!(Field::<u16>(Variant(_42.fld1, 0), 5)) = !_73.fld3.0.1;
_73.fld3 = _45;
_42.fld0.1 = _73.fld3.0.4;
_75 = (_45.0.0, _37);
_33.3 = 22035_i16 as f32;
_33.3 = _42.fld2.3 + _19;
place!(Field::<(*mut [u32; 5], i8)>(Variant(place!(Field::<Adt51>(Variant(_24, 2), 2)), 0), 6)) = (_73.fld0.0, (-67_i8));
place!(Field::<([i32; 2], f64)>(Variant(_73.fld1, 2), 0)).1 = _42.fld3.0.3 as f64;
_73.fld2 = (_4, _42.fld2.1, _17.2, _19);
_73.fld2.2 = -_43;
_58 = (_45.0.0, Field::<(char, [u32; 5])>(Variant(_24, 2), 0).1);
SetDiscriminant(_73.fld1, 0);
Goto(bb50)
}
bb50 = {
place!(Field::<u16>(Variant(place!(Field::<Adt51>(Variant(_24, 2), 2)), 0), 5)) = _73.fld3.0.1 * Field::<u16>(Variant(_42.fld1, 0), 5);
_62 = Adt42::Variant0 { fld0: _42.fld2.3,fld1: Field::<(*mut (u32,),)>(Variant(_24, 2), 5),fld2: _73.fld0,fld3: Field::<(*mut [u32; 5], i8)>(Variant(Field::<Adt51>(Variant(_24, 2), 2), 0), 6).1,fld4: _53,fld5: Field::<*const *mut [u32; 5]>(Variant(_24, 2), 3),fld6: _63 };
SetDiscriminant(_62, 1);
_17.2 = _43 * _42.fld2.2;
_21 = [_31.0,_42.fld3.0.3,_73.fld3.0.3,(*_55).0,_67.0.3];
place!(Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_24, 2), 1)).3 = _73.fld0.2 << _48;
_45 = _73.fld3;
place!(Field::<(*mut [u32; 5], i8)>(Variant(_42.fld1, 0), 6)).0 = _73.fld0.3;
_31.0 = _66 as u32;
_68 = _8 <= _45.1;
Goto(bb51)
}
bb51 = {
_16.fld3 = [_16.fld1,_16.fld1,_16.fld1,_16.fld1];
_42.fld0.0 = core::ptr::addr_of_mut!(place!(Field::<(char, [u32; 5])>(Variant(_24, 2), 0)).1);
_69 = [_16.fld1,_16.fld1,_16.fld1,_16.fld1];
_73.fld3.0.3 = _67.0.3 + _31.0;
_67.0.2 = [_34,_34];
place!(Field::<f64>(Variant(_73.fld1, 0), 2)) = _16.fld1 as f64;
place!(Field::<[u16; 3]>(Variant(_73.fld1, 0), 4)) = [Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_24, 2), 1).1,Field::<u16>(Variant(Field::<Adt51>(Variant(_24, 2), 2), 0), 5),Field::<u16>(Variant(Field::<Adt51>(Variant(_24, 2), 2), 0), 5)];
_42.fld0.0 = _73.fld0.0;
_73.fld3.0.0 = _50;
_33.2 = -_73.fld2.2;
_38.0 = _31.0;
place!(Field::<(bool, u64, f64, f32)>(Variant(_62, 1), 2)).3 = _42.fld2.3;
_7 = _6;
_53 = _16.fld4;
_87.0.0 = _14.0;
_73.fld2.1 = Field::<u16>(Variant(_42.fld1, 0), 5) as u64;
_85 = Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_24, 2), 1);
match _73.fld0.2 {
0 => bb23,
1 => bb52,
2 => bb53,
293212513 => bb55,
_ => bb54
}
}
bb52 = {
_14 = ('\u{b1749}', _21);
_29 = -_25;
_17.1 = Field::<u64>(Variant(_24, 3), 1);
_28 = -_29;
_25 = -_28;
_26 = [(-78_i8),(-49_i8),13_i8,48_i8,(-98_i8),(-45_i8),55_i8];
_18 = 297851599809592640006906041506936808135_u128;
_16.fld3 = _15;
_33.0 = _25 >= _29;
_35 = [_16.fld1,_16.fld1,_16.fld1,_16.fld1];
_7 = _33.0 <= _4;
place!(Field::<isize>(Variant(_24, 3), 0)) = !_10;
_33.3 = -_19;
_15 = [_16.fld1,_16.fld1,_16.fld1,_16.fld1];
_17 = (_33.0, Field::<u64>(Variant(_24, 3), 1), _25, _33.3);
_3 = -_12;
_27 = _16.fld4;
_16.fld2 = core::ptr::addr_of_mut!(_14.1);
_5 = _10 - Field::<isize>(Variant(_24, 3), 0);
_16.fld2 = core::ptr::addr_of_mut!(_21);
_32 = _18 % _18;
_2 = !_33.0;
_31 = (1899870313_u32,);
_16.fld3 = _35;
Goto(bb15)
}
bb53 = {
_61 = 17782_i16 as u128;
place!(Field::<(*mut [u32; 5], i8)>(Variant(place!(Field::<Adt51>(Variant(_24, 2), 2)), 0), 6)).1 = (-78_i8) >> _42.fld0.1;
_73.fld0.1 = _42.fld3.0.4 ^ _67.0.4;
_73.fld3.2 = core::ptr::addr_of!(place!(Field::<(*mut [u32; 5], i8)>(Variant(_42.fld1, 0), 6)).1);
_45 = _67;
place!(Field::<u16>(Variant(_42.fld1, 0), 5)) = !_73.fld3.0.1;
_73.fld3 = _45;
_42.fld0.1 = _73.fld3.0.4;
_75 = (_45.0.0, _37);
_33.3 = 22035_i16 as f32;
_33.3 = _42.fld2.3 + _19;
place!(Field::<(*mut [u32; 5], i8)>(Variant(place!(Field::<Adt51>(Variant(_24, 2), 2)), 0), 6)) = (_73.fld0.0, (-67_i8));
place!(Field::<([i32; 2], f64)>(Variant(_73.fld1, 2), 0)).1 = _42.fld3.0.3 as f64;
_73.fld2 = (_4, _42.fld2.1, _17.2, _19);
_73.fld2.2 = -_43;
_58 = (_45.0.0, Field::<(char, [u32; 5])>(Variant(_24, 2), 0).1);
SetDiscriminant(_73.fld1, 0);
Goto(bb50)
}
bb54 = {
_31 = (2757603226_u32,);
place!(Field::<u64>(Variant(_24, 3), 1)) = _17.1;
_16.fld0 = _12 as u8;
Goto(bb14)
}
bb55 = {
place!(Field::<(char, [u32; 5])>(Variant(_73.fld1, 0), 3)).1 = [(*_55).0,(*_55).0,_31.0,_73.fld3.0.3,_31.0];
_29 = _16.fld1 as f64;
place!(Field::<(char, [u32; 5])>(Variant(_73.fld1, 0), 3)) = (Field::<(char, [u32; 5])>(Variant(_24, 2), 0).0, _75.1);
_17.0 = !_7;
place!(Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_24, 2), 1)).3 = (*_55).0;
place!(Field::<(char, [u32; 5])>(Variant(_73.fld1, 0), 3)).1 = _14.1;
_67.0.0 = _14.0;
Goto(bb56)
}
bb56 = {
place!(Field::<Adt51>(Variant(_24, 2), 2)) = Adt51::Variant1 { fld0: _42.fld3.1,fld1: _42.fld3.0,fld2: _40,fld3: (-117843150921027652996999913889191560438_i128) };
_87.0.4 = !_85.4;
_83.1 = Field::<(char, [u32; 5])>(Variant(_73.fld1, 0), 3).1;
_60 = _46;
_8 = !_73.fld2.0;
_42.fld0 = (_73.fld0.0, _85.4, _85.3, Field::<(*mut [u32; 5], i8)>(Variant(_42.fld1, 0), 6).0);
_27 = [Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_24, 2), 1).1,Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_24, 2), 1).1,_67.0.1];
_71 = _66;
_53 = [_67.0.1,Field::<u16>(Variant(_42.fld1, 0), 5),_73.fld3.0.1];
_93.1 = [Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_24, 2), 1).3,_85.3,(*_55).0,(*_55).0,_38.0];
place!(Field::<(bool, u64, f64, f32)>(Variant(_62, 1), 2)).2 = -_33.2;
_66 = _63 ^ _63;
_91.fld3.2 = core::ptr::addr_of!(place!(Field::<(*mut [u32; 5], i8)>(Variant(_73.fld1, 0), 6)).1);
_49 = Adt43::Variant1 { fld0: _42.fld2.1,fld1: Field::<u16>(Variant(_42.fld1, 0), 5),fld2: _67.0,fld3: _16.fld2,fld4: Field::<*const *mut [u32; 5]>(Variant(_24, 2), 3) };
_91.fld3 = _45;
place!(Field::<(*mut [u32; 5], i8)>(Variant(_42.fld1, 0), 6)) = (_42.fld0.0, (-54_i8));
_89.0 = Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_24, 2), 1).2;
_22 = [_16.fld1,_16.fld1,_16.fld1,_16.fld1];
place!(Field::<u64>(Variant(_49, 1), 0)) = !_42.fld2.1;
place!(Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_49, 1), 2)).4 = Field::<u16>(Variant(_49, 1), 1) as u128;
_91.fld0.0 = Field::<(*mut [u32; 5], i8)>(Variant(_42.fld1, 0), 6).0;
_87.0.1 = Field::<(char, u16, [i32; 2], u32, u128)>(Variant(Field::<Adt51>(Variant(_24, 2), 2), 1), 1).1 >> _42.fld3.0.4;
Goto(bb57)
}
bb57 = {
_91.fld1 = Adt51::Variant2 { fld0: _40,fld1: _17.3,fld2: _25 };
_67.0.0 = Field::<(char, [u32; 5])>(Variant(_73.fld1, 0), 3).0;
_42.fld0.1 = _73.fld0.1 ^ _91.fld3.0.4;
_33.2 = _42.fld3.0.4 as f64;
_42.fld0.0 = _73.fld0.3;
place!(Field::<Adt46>(Variant(_42.fld1, 0), 0)) = Adt46::Variant0 { fld0: (*_55).0,fld1: _73.fld0,fld2: _42.fld2.1 };
_87.1 = _73.fld2.0;
_91.fld3.0.3 = _31.0 >> _66;
_83.1 = _37;
place!(Field::<(*mut [u32; 5], i8)>(Variant(_62, 1), 0)).1 = -Field::<(*mut [u32; 5], i8)>(Variant(_42.fld1, 0), 6).1;
_51 = Adt42::Variant1 { fld0: Field::<(*mut [u32; 5], i8)>(Variant(_42.fld1, 0), 6),fld1: _16.fld1,fld2: _33,fld3: _26 };
place!(Field::<([i32; 2], f64)>(Variant(_91.fld1, 2), 0)).1 = _43;
place!(Field::<(*mut [u32; 5], i8)>(Variant(_51, 1), 0)).1 = 25746_i16 as i8;
_42.fld4 = [_16.fld1,Field::<usize>(Variant(_51, 1), 1),Field::<usize>(Variant(_51, 1), 1),_16.fld1];
Goto(bb58)
}
bb58 = {
_42.fld0.0 = _73.fld0.0;
place!(Field::<(*mut [u32; 5], i8)>(Variant(_42.fld1, 0), 6)).1 = Field::<(*mut [u32; 5], i8)>(Variant(_62, 1), 0).1;
SetDiscriminant(Field::<Adt46>(Variant(_42.fld1, 0), 0), 2);
_91.fld3.0.0 = _87.0.0;
_91.fld3.0.3 = _31.0;
_81 = -Field::<(bool, u64, f64, f32)>(Variant(_62, 1), 2).2;
place!(Field::<(*mut [u32; 5], i8)>(Variant(_62, 1), 0)).0 = Field::<(*mut [u32; 5], i8)>(Variant(_51, 1), 0).0;
RET = core::ptr::addr_of!(place!(Field::<(*mut [u32; 5], i8)>(Variant(_51, 1), 0)).1);
_95 = core::ptr::addr_of!(place!(Field::<(*mut [u32; 5], i8)>(Variant(_51, 1), 0)).1);
place!(Field::<(bool, u64, f64, f32)>(Variant(_62, 1), 2)).1 = _42.fld2.1 - _33.1;
_59 = _66 as f64;
_73.fld3.0.4 = !_45.0.4;
_41 = _10;
place!(Field::<[i8; 7]>(Variant(_24, 2), 6)) = [Field::<(*mut [u32; 5], i8)>(Variant(_42.fld1, 0), 6).1,Field::<(*mut [u32; 5], i8)>(Variant(_62, 1), 0).1,(*_95),Field::<(*mut [u32; 5], i8)>(Variant(_42.fld1, 0), 6).1,Field::<(*mut [u32; 5], i8)>(Variant(_42.fld1, 0), 6).1,Field::<(*mut [u32; 5], i8)>(Variant(_42.fld1, 0), 6).1,Field::<(*mut [u32; 5], i8)>(Variant(_42.fld1, 0), 6).1];
_45.0.2 = Field::<(char, u16, [i32; 2], u32, u128)>(Variant(_49, 1), 2).2;
_67.0.1 = Field::<(*mut [u32; 5], i8)>(Variant(_62, 1), 0).1 as u16;
_42.fld3.0.3 = 45208471790748313970160522409737550298_i128 as u32;
_87.2 = RET;
_73.fld2.0 = _87.1;
place!(Field::<Adt44>(Variant(place!(Field::<Adt46>(Variant(_42.fld1, 0), 0)), 2), 1)).fld0.0 = core::ptr::addr_of_mut!(_21);
place!(Field::<[usize; 4]>(Variant(place!(Field::<Adt46>(Variant(_42.fld1, 0), 0)), 2), 4)) = _35;
SetDiscriminant(_51, 1);
Goto(bb59)
}
bb59 = {
Call(_100 = dump_var(13_usize, 46_usize, Move(_46), 41_usize, Move(_41), 27_usize, Move(_27), 69_usize, Move(_69)), ReturnTo(bb60), UnwindUnreachable())
}
bb60 = {
Call(_100 = dump_var(13_usize, 14_usize, Move(_14), 54_usize, Move(_54), 20_usize, Move(_20), 7_usize, Move(_7)), ReturnTo(bb61), UnwindUnreachable())
}
bb61 = {
Call(_100 = dump_var(13_usize, 47_usize, Move(_47), 11_usize, Move(_11), 1_usize, Move(_1), 5_usize, Move(_5)), ReturnTo(bb62), UnwindUnreachable())
}
bb62 = {
Call(_100 = dump_var(13_usize, 34_usize, Move(_34), 2_usize, Move(_2), 48_usize, Move(_48), 38_usize, Move(_38)), ReturnTo(bb63), UnwindUnreachable())
}
bb63 = {
Call(_100 = dump_var(13_usize, 22_usize, Move(_22), 85_usize, Move(_85), 23_usize, Move(_23), 52_usize, Move(_52)), ReturnTo(bb64), UnwindUnreachable())
}
bb64 = {
Call(_100 = dump_var(13_usize, 58_usize, Move(_58), 3_usize, Move(_3), 32_usize, Move(_32), 15_usize, Move(_15)), ReturnTo(bb65), UnwindUnreachable())
}
bb65 = {
Call(_100 = dump_var(13_usize, 13_usize, Move(_13), 101_usize, _101, 101_usize, _101, 101_usize, _101), ReturnTo(bb66), UnwindUnreachable())
}
bb66 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn14(mut _1: bool,mut _2: isize) -> bool {
mir! {
type RET = bool;
let _3: Adt56;
let _4: (char, u16, [i32; 2], u32, u128);
let _5: [u16; 3];
let _6: ();
let _7: ();
{
RET = _1;
_2 = 93_isize;
_1 = RET != RET;
RET = _1 >= _1;
_2 = 9223372036854775807_isize;
RET = _1 == _1;
RET = _1 <= _1;
RET = !_1;
RET = !_1;
_1 = !RET;
RET = _1;
RET = !_1;
_1 = !RET;
_1 = !RET;
_1 = !RET;
RET = !_1;
RET = _1 <= _1;
RET = _1;
_3.fld6.0 = 1446150602_u32 | 2944242893_u32;
_3.fld5 = core::ptr::addr_of_mut!(_3.fld6);
_3.fld4.3 = 59_u8 as f32;
_3.fld4.2 = 164776548776651683343315440612843592764_u128 as f64;
RET = !_1;
_3.fld1 = core::ptr::addr_of!(_3.fld4);
_4.4 = !277144675551022108108932062649536182150_u128;
_4.4 = !179434007968314088085255459178945268125_u128;
Goto(bb1)
}
bb1 = {
Call(_6 = dump_var(14_usize, 1_usize, Move(_1), 7_usize, _7, 7_usize, _7, 7_usize, _7), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn15(mut _1: bool,mut _2: bool,mut _3: bool,mut _4: bool,mut _5: bool) -> isize {
mir! {
type RET = isize;
let _6: isize;
let _7: (bool, u64, f64, f32);
let _8: (char, u16, [i32; 2], u32, u128);
let _9: isize;
let _10: u128;
let _11: u8;
let _12: isize;
let _13: (char, [u32; 5]);
let _14: u16;
let _15: (u32,);
let _16: (bool, u64, f64, f32);
let _17: Adt52;
let _18: (*mut (u32,),);
let _19: ();
let _20: ();
{
RET = !9223372036854775807_isize;
RET = (-9223372036854775808_isize) ^ (-9223372036854775808_isize);
_3 = _2;
_6 = !RET;
_7.3 = 168602195730444257865005493350383134257_u128 as f32;
_3 = _4 < _4;
RET = -_6;
Goto(bb1)
}
bb1 = {
RET = _6;
_7.0 = _2 > _1;
_1 = _2 != _4;
_1 = !_4;
_4 = _5;
_7.1 = 5304376483054144574_u64 - 498308780831279392_u64;
_7.3 = 30662746845260846500125922580521810205_i128 as f32;
RET = _6;
_1 = _2 | _7.0;
_7.3 = 185396240283123475383326303673880205_u128 as f32;
_1 = _3 <= _2;
RET = !_6;
_3 = !_4;
_5 = _3 <= _7.0;
_7.0 = _5;
_6 = RET << RET;
_2 = _5;
RET = 65211_u16 as isize;
_7.1 = 13098562077048681164_u64;
_7.2 = _6 as f64;
RET = _6;
_7.3 = 14440049247365250630374366983587624809_i128 as f32;
_1 = _7.0;
_3 = _1 <= _2;
Goto(bb2)
}
bb2 = {
_7.2 = (-129303573037677244177345039918054911448_i128) as f64;
_2 = _3;
Call(_7.0 = fn16(_1, _4, _1, _3, _1, _2), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_9 = _6 & RET;
_2 = _3 ^ _1;
_8.3 = 1399672221_u32 >> RET;
_1 = _5;
_3 = !_2;
_10 = !158204069628380539460099334688714648825_u128;
RET = _6 & _9;
RET = _6 + _6;
_10 = !271951418886733130739185357910603464651_u128;
_8.1 = !33010_u16;
_11 = !206_u8;
_8.0 = '\u{40e2a}';
_5 = !_3;
_8.2 = [95596456_i32,(-2136198836_i32)];
RET = _9;
_6 = !RET;
_7.2 = _8.3 as f64;
_2 = _7.0;
_7.1 = 6539339191414949515_u64;
_2 = !_3;
_8.4 = _2 as u128;
_12 = _8.0 as isize;
Goto(bb4)
}
bb4 = {
_2 = _1 & _5;
match _7.1 {
6539339191414949515 => bb5,
_ => bb1
}
}
bb5 = {
_4 = !_2;
_2 = _5 >= _5;
_8.4 = _10;
_13.0 = _8.0;
_2 = !_5;
_7.3 = (-32669698292877768373651550540037455797_i128) as f32;
_7.1 = 17375376407248324273_u64 & 6016492380300769758_u64;
_7.2 = _10 as f64;
_7.0 = _2;
_14 = _8.1;
_8.0 = _13.0;
_15 = (_8.3,);
_6 = _9 >> _15.0;
_3 = _1 > _5;
_15.0 = _8.3;
_11 = !74_u8;
_2 = _5;
_7.0 = _3;
_5 = _4;
_13.0 = _8.0;
RET = _6 >> _15.0;
_13.1 = [_15.0,_8.3,_8.3,_8.3,_15.0];
_9 = RET;
_15.0 = !_8.3;
Goto(bb6)
}
bb6 = {
Call(_19 = dump_var(15_usize, 14_usize, Move(_14), 8_usize, Move(_8), 11_usize, Move(_11), 6_usize, Move(_6)), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
Call(_19 = dump_var(15_usize, 15_usize, Move(_15), 5_usize, Move(_5), 10_usize, Move(_10), 20_usize, _20), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn16(mut _1: bool,mut _2: bool,mut _3: bool,mut _4: bool,mut _5: bool,mut _6: bool) -> bool {
mir! {
type RET = bool;
let _7: bool;
let _8: ();
let _9: ();
{
_1 = _3;
_1 = !_6;
_6 = _1 == _3;
_6 = _1 < _1;
_1 = !_5;
_5 = _3 ^ _6;
RET = !_3;
_2 = _4 >= _4;
_6 = !_1;
_6 = !_5;
RET = _3 >= _2;
_4 = _5;
_6 = _2;
_5 = !_1;
_6 = !_1;
_4 = !RET;
_7 = _4 | RET;
_5 = _7;
_3 = !_5;
_1 = !_2;
Goto(bb1)
}
bb1 = {
Call(_8 = dump_var(16_usize, 6_usize, Move(_6), 5_usize, Move(_5), 4_usize, Move(_4), 9_usize, _9), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn17(mut _1: bool,mut _2: bool,mut _3: f64,mut _4: bool,mut _5: bool) -> bool {
mir! {
type RET = bool;
let _6: Adt47;
let _7: (bool, u64, f64, f32);
let _8: [i8; 7];
let _9: (char, [u32; 5]);
let _10: ();
let _11: ();
{
_4 = !_2;
_4 = _5 != _1;
_4 = !_5;
_4 = _2;
_5 = _4;
_4 = !_2;
_2 = !_4;
RET = _4 >= _5;
RET = !_4;
RET = _1 != _4;
_5 = _3 != _3;
RET = _5;
_1 = !_5;
_7.0 = !_2;
RET = !_7.0;
_5 = !_1;
_6 = Adt47::Variant2 { fld0: 88_i8 };
_7.2 = -_3;
RET = _7.2 >= _3;
_7.3 = 2559630869_u32 as f32;
_7.1 = 95799197_i32 as u64;
_7.1 = 1470660324_u32 as u64;
RET = _5;
place!(Field::<i8>(Variant(_6, 2), 0)) = (-80_i8);
Goto(bb1)
}
bb1 = {
Call(_10 = dump_var(17_usize, 2_usize, Move(_2), 4_usize, Move(_4), 11_usize, _11, 11_usize, _11), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn18(mut _1: isize,mut _2: bool,mut _3: f64,mut _4: bool,mut _5: (char, [u32; 5]),mut _6: bool,mut _7: bool,mut _8: isize,mut _9: bool,mut _10: bool,mut _11: isize,mut _12: isize,mut _13: bool,mut _14: bool,mut _15: bool,mut _16: bool) -> Adt49 {
mir! {
type RET = Adt49;
let _17: ((char, u16, [i32; 2], u32, u128), bool, *const i8);
let _18: (u32,);
let _19: (u32,);
let _20: [i32; 2];
let _21: bool;
let _22: i8;
let _23: &'static usize;
let _24: isize;
let _25: bool;
let _26: Adt57;
let _27: bool;
let _28: isize;
let _29: [i8; 7];
let _30: ();
let _31: ();
{
RET.fld1 = 5488245795775818322_usize << _8;
_17.0.0 = _5.0;
RET.fld3 = [RET.fld1,RET.fld1,RET.fld1,RET.fld1];
_18.0 = !875055470_u32;
_17.0.4 = !169378801381417955718117516113928740971_u128;
RET.fld4 = [63262_u16,35909_u16,14633_u16];
_14 = !_2;
_10 = _7 ^ _13;
RET.fld2 = core::ptr::addr_of_mut!(_5.1);
Goto(bb1)
}
bb1 = {
_16 = !_4;
RET.fld1 = 17883027362764239003_u64 as usize;
RET.fld3 = [RET.fld1,RET.fld1,RET.fld1,RET.fld1];
RET.fld4 = [25533_u16,63561_u16,31483_u16];
_11 = -_8;
RET.fld0 = 143_u8 * 135_u8;
_17.0.1 = 49620_u16;
_9 = !_10;
_17.1 = !_10;
_17.0.2 = [(-2063735294_i32),1914401750_i32];
_14 = !_4;
RET.fld1 = 17074772064406044437_usize;
_21 = _6;
_5.1 = [_18.0,_18.0,_18.0,_18.0,_18.0];
_5.1 = [_18.0,_18.0,_18.0,_18.0,_18.0];
_4 = _14 ^ _6;
_13 = _4;
_1 = _12;
_18.0 = 3182411792_u32;
_18 = (1502860426_u32,);
_17.1 = _10;
_20 = _17.0.2;
_5.1 = [_18.0,_18.0,_18.0,_18.0,_18.0];
_11 = _1;
_17.0.3 = _18.0;
_17.1 = !_21;
_18.0 = 8796944470948820273_i64 as u32;
Goto(bb2)
}
bb2 = {
_17.0.3 = !_18.0;
_4 = !_17.1;
RET.fld3 = [RET.fld1,RET.fld1,RET.fld1,RET.fld1];
_17.1 = _9 > _10;
_17.2 = core::ptr::addr_of!(_22);
RET.fld2 = core::ptr::addr_of_mut!(_5.1);
_3 = 744551308521910393_u64 as f64;
_13 = _7 ^ _4;
RET.fld2 = core::ptr::addr_of_mut!(_5.1);
_17.0.4 = 64234680310375779348634615611902522056_u128 * 75480899894760236662057132660867172870_u128;
_16 = _13 <= _6;
_14 = !_17.1;
_3 = _17.0.1 as f64;
RET.fld2 = core::ptr::addr_of_mut!(_5.1);
_12 = _8 | _11;
RET.fld0 = !218_u8;
_24 = 16647174481775122910_u64 as isize;
RET.fld1 = !1_usize;
_17.0 = (_5.0, 3170_u16, _20, _18.0, 256765916196186367692590528852755228934_u128);
Goto(bb3)
}
bb3 = {
_7 = _4 != _17.1;
_17.0.1 = (-68341863799020853166447008646706644467_i128) as u16;
_18.0 = _17.0.3 ^ _17.0.3;
_25 = _9;
_5.1 = [_18.0,_18.0,_18.0,_17.0.3,_18.0];
RET.fld0 = RET.fld1 as u8;
_5.0 = _17.0.0;
_19 = _18;
_16 = _25 < _2;
_17.2 = core::ptr::addr_of!(_22);
_24 = !_12;
RET.fld0 = !109_u8;
RET.fld0 = _19.0 as u8;
_20 = _17.0.2;
RET.fld3 = [RET.fld1,RET.fld1,RET.fld1,RET.fld1];
Goto(bb4)
}
bb4 = {
_29 = [37_i8,51_i8,(-57_i8),(-98_i8),(-114_i8),(-108_i8),97_i8];
_29 = [(-5_i8),111_i8,73_i8,(-60_i8),(-94_i8),(-42_i8),92_i8];
_28 = RET.fld0 as isize;
RET.fld1 = 16992752638045436253_usize >> _24;
_8 = _12 | _12;
_17.1 = _8 >= _8;
_17.0.0 = _5.0;
_7 = _10;
_29 = [82_i8,(-118_i8),25_i8,(-89_i8),(-23_i8),(-3_i8),(-116_i8)];
_28 = 5362562206147898742_u64 as isize;
_19.0 = !_18.0;
_23 = &RET.fld1;
_3 = _18.0 as f64;
_3 = RET.fld0 as f64;
_5.0 = _17.0.0;
_8 = _11 & _11;
_17.0.0 = _5.0;
_5.0 = _17.0.0;
_16 = _7;
_17.0.1 = !34918_u16;
_17.0.1 = 35391_u16;
_24 = _12;
_7 = _16 | _13;
_1 = _8;
_17.0.1 = 48297_u16 & 10830_u16;
Goto(bb5)
}
bb5 = {
Call(_30 = dump_var(18_usize, 11_usize, Move(_11), 8_usize, Move(_8), 4_usize, Move(_4), 29_usize, Move(_29)), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
Call(_30 = dump_var(18_usize, 5_usize, Move(_5), 19_usize, Move(_19), 16_usize, Move(_16), 28_usize, Move(_28)), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
Call(_30 = dump_var(18_usize, 7_usize, Move(_7), 20_usize, Move(_20), 21_usize, Move(_21), 31_usize, _31), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn19(mut _1: isize,mut _2: f64,mut _3: isize,mut _4: isize,mut _5: isize,mut _6: bool,mut _7: u64,mut _8: u64,mut _9: bool,mut _10: bool,mut _11: bool,mut _12: ([i32; 2], f64),mut _13: f64,mut _14: bool,mut _15: bool,mut _16: (bool, u64, f64, f32)) -> Adt58 {
mir! {
type RET = Adt58;
let _17: [u16; 3];
let _18: [u32; 5];
let _19: (char, [u32; 5]);
let _20: isize;
let _21: [i32; 2];
let _22: i8;
let _23: bool;
let _24: i128;
let _25: *const *mut [u32; 5];
let _26: ([u16; 3],);
let _27: i16;
let _28: *mut f32;
let _29: ();
let _30: ();
{
RET.fld2.1 = _1 as u64;
RET.fld2 = (_11, _16.1, _13, _16.3);
RET.fld3.0.0 = '\u{91830}';
RET.fld4 = [2378349419629393266_usize,1755095765217255975_usize,2_usize,11264343624062691308_usize];
RET.fld3.0.4 = 949383799335756247_usize as u128;
_16.0 = _13 < _2;
RET.fld3.0 = ('\u{db71b}', 15708_u16, _12.0, 293212513_u32, 188095062029323629771264603031293913149_u128);
_10 = _6;
RET.fld0.3 = core::ptr::addr_of_mut!(_18);
_12.1 = _16.3 as f64;
_12.1 = RET.fld2.3 as f64;
_4 = !_5;
_16.1 = 146_u8 as u64;
RET.fld0.1 = RET.fld3.0.4;
RET.fld3.1 = _15 <= _6;
_14 = _6;
RET.fld0.0 = core::ptr::addr_of_mut!(_19.1);
_6 = !RET.fld3.1;
_14 = _9;
RET.fld3.0.4 = RET.fld0.1 & RET.fld0.1;
Goto(bb1)
}
bb1 = {
_12.1 = _13 + _2;
RET.fld3.0.2 = [(-636886302_i32),375181756_i32];
RET.fld2 = _16;
RET.fld2.2 = _12.1;
RET.fld3.0.2 = [2030283194_i32,428454398_i32];
RET.fld0.1 = 503974043_i32 as u128;
_23 = !_6;
_13 = _12.1;
_19.0 = RET.fld3.0.0;
RET.fld0.3 = core::ptr::addr_of_mut!(_19.1);
RET.fld3.0.1 = !63891_u16;
match RET.fld3.0.3 {
0 => bb2,
293212513 => bb4,
_ => bb3
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
RET.fld0.3 = core::ptr::addr_of_mut!(_18);
RET.fld3.1 = _6;
_1 = _3;
match RET.fld3.0.3 {
0 => bb1,
1 => bb3,
2 => bb5,
3 => bb6,
4 => bb7,
293212513 => bb9,
_ => bb8
}
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
_12.1 = _13 + _2;
RET.fld3.0.2 = [(-636886302_i32),375181756_i32];
RET.fld2 = _16;
RET.fld2.2 = _12.1;
RET.fld3.0.2 = [2030283194_i32,428454398_i32];
RET.fld0.1 = 503974043_i32 as u128;
_23 = !_6;
_13 = _12.1;
_19.0 = RET.fld3.0.0;
RET.fld0.3 = core::ptr::addr_of_mut!(_19.1);
RET.fld3.0.1 = !63891_u16;
match RET.fld3.0.3 {
0 => bb2,
293212513 => bb4,
_ => bb3
}
}
bb8 = {
Return()
}
bb9 = {
RET.fld0.2 = !RET.fld3.0.3;
RET.fld3.0.2 = [(-1417829734_i32),1603832715_i32];
_20 = _8 as isize;
RET.fld2.3 = _16.3 * _16.3;
RET.fld3.0.0 = _19.0;
RET.fld1 = Adt51::Variant2 { fld0: _12,fld1: RET.fld2.3,fld2: RET.fld2.2 };
_2 = _4 as f64;
match RET.fld3.0.3 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb5,
5 => bb6,
6 => bb7,
293212513 => bb10,
_ => bb8
}
}
bb10 = {
place!(Field::<([i32; 2], f64)>(Variant(RET.fld1, 2), 0)) = _12;
RET.fld3.2 = core::ptr::addr_of!(_22);
place!(Field::<f32>(Variant(RET.fld1, 2), 1)) = RET.fld2.3 * RET.fld2.3;
RET.fld2.1 = _7;
_16.0 = !_15;
_25 = core::ptr::addr_of!(RET.fld0.0);
place!(Field::<f32>(Variant(RET.fld1, 2), 1)) = _16.3 * RET.fld2.3;
RET.fld2 = (_6, _7, _2, Field::<f32>(Variant(RET.fld1, 2), 1));
_2 = RET.fld2.3 as f64;
Goto(bb11)
}
bb11 = {
Call(_29 = dump_var(19_usize, 1_usize, Move(_1), 23_usize, Move(_23), 14_usize, Move(_14), 3_usize, Move(_3)), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
Call(_29 = dump_var(19_usize, 5_usize, Move(_5), 6_usize, Move(_6), 7_usize, Move(_7), 30_usize, _30), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
Return()
}

}
}
pub fn main() {
                fn0(std::hint::black_box(6568775246613052983_usize), std::hint::black_box(152656029194028903218648347272745810789_u128), std::hint::black_box(4_isize));
                
            }
#[derive(Debug)]
pub enum Adt42 {
Variant0{
fld0: f32,
fld1: (*mut (u32,),),
fld2: (*mut [u32; 5], u128, u32, *mut [u32; 5]),
fld3: i8,
fld4: [u16; 3],
fld5: *const *mut [u32; 5],
fld6: i64,

},
Variant1{
fld0: (*mut [u32; 5], i8),
fld1: usize,
fld2: (bool, u64, f64, f32),
fld3: [i8; 7],

},
Variant2{
fld0: bool,
fld1: u16,
fld2: *const (bool, u64, f64, f32),

},
Variant3{
fld0: u64,
fld1: *const i8,
fld2: i64,

}}
#[derive(Debug)]
pub enum Adt43 {
Variant0{
fld0: f32,
fld1: *mut (u32,),
fld2: *const (bool, u64, f64, f32),

},
Variant1{
fld0: u64,
fld1: u16,
fld2: (char, u16, [i32; 2], u32, u128),
fld3: *mut [u32; 5],
fld4: *const *mut [u32; 5],

}}
#[derive(Debug)]
pub struct Adt44 {
fld0: (*mut [u32; 5], i8),
fld1: *mut f32,
}
#[derive(Debug)]
pub enum Adt45 {
Variant0{
fld0: Adt42,
fld1: Adt43,
fld2: f64,
fld3: *mut f32,
fld4: i16,

},
Variant1{
fld0: *const char,
fld1: (*mut [u32; 5], u128, u32, *mut [u32; 5]),
fld2: (*mut (u32,),),
fld3: usize,
fld4: u32,
fld5: *mut [u32; 5],
fld6: u64,

},
Variant2{
fld0: *mut *mut f32,
fld1: (bool, u64, f64, f32),
fld2: Adt42,
fld3: i64,

},
Variant3{
fld0: bool,
fld1: (u32,),
fld2: *const char,

}}
#[derive(Debug)]
pub enum Adt46 {
Variant0{
fld0: u32,
fld1: (*mut [u32; 5], u128, u32, *mut [u32; 5]),
fld2: u64,

},
Variant1{
fld0: (u32,),
fld1: (char, u16, [i32; 2], u32, u128),
fld2: *const *mut [u32; 5],

},
Variant2{
fld0: bool,
fld1: Adt44,
fld2: Adt45,
fld3: (char, [u32; 5]),
fld4: [usize; 4],
fld5: u16,

}}
#[derive(Debug)]
pub enum Adt47 {
Variant0{
fld0: ([u16; 3],),
fld1: *mut *mut f32,
fld2: Adt42,

},
Variant1{
fld0: f32,
fld1: *mut (u32,),
fld2: u64,
fld3: *mut [u32; 5],
fld4: i16,
fld5: [i32; 2],
fld6: ([i32; 2], f64),

},
Variant2{
fld0: i8,

}}
#[derive(Debug)]
pub enum Adt48 {
Variant0{
fld0: Adt47,
fld1: u32,
fld2: *mut (u32,),
fld3: (*mut [u32; 5], i8),
fld4: u16,
fld5: i128,
fld6: Adt45,

},
Variant1{
fld0: *const (bool, u64, f64, f32),
fld1: (char, u16, [i32; 2], u32, u128),
fld2: Adt46,
fld3: i8,
fld4: *const char,
fld5: (*mut (u32,),),

},
Variant2{
fld0: bool,
fld1: f32,
fld2: Adt42,
fld3: (char, u16, [i32; 2], u32, u128),
fld4: ((char, u16, [i32; 2], u32, u128), bool, *const i8),
fld5: (*mut [u32; 5], u128, u32, *mut [u32; 5]),
fld6: *mut [u32; 5],
fld7: u8,

}}
#[derive(Debug,Copy,Clone)]
pub struct Adt49 {
fld0: u8,
fld1: usize,
fld2: *mut [u32; 5],
fld3: [usize; 4],
fld4: [u16; 3],
}
#[derive(Debug)]
pub enum Adt50 {
Variant0{
fld0: *mut f32,

},
Variant1{
fld0: [i32; 2],
fld1: ([i32; 2], f64),
fld2: *mut *mut f32,
fld3: (char, [u32; 5]),

}}
#[derive(Debug)]
pub enum Adt51 {
Variant0{
fld0: Adt46,
fld1: char,
fld2: f64,
fld3: (char, [u32; 5]),
fld4: [u16; 3],
fld5: u16,
fld6: (*mut [u32; 5], i8),

},
Variant1{
fld0: bool,
fld1: (char, u16, [i32; 2], u32, u128),
fld2: ([i32; 2], f64),
fld3: i128,

},
Variant2{
fld0: ([i32; 2], f64),
fld1: f32,
fld2: f64,

}}
#[derive(Debug,Copy,Clone)]
pub enum Adt52 {
Variant0{
fld0: u8,
fld1: (*mut [u32; 5], u128, u32, *mut [u32; 5]),
fld2: (char, [u32; 5]),
fld3: (*mut (u32,),),
fld4: i32,

},
Variant1{
fld0: (*mut (u32,),),
fld1: u64,
fld2: (char, [u32; 5]),

}}
#[derive(Debug)]
pub enum Adt53 {
Variant0{
fld0: *const *mut [u32; 5],

},
Variant1{
fld0: Adt49,
fld1: [u32; 5],
fld2: (*mut [u32; 5], i8),
fld3: (bool, u64, f64, f32),

}}
#[derive(Debug)]
pub enum Adt54 {
Variant0{
fld0: *const (bool, u64, f64, f32),
fld1: *mut [u32; 5],
fld2: (bool, u64, f64, f32),
fld3: (*mut [u32; 5], u128, u32, *mut [u32; 5]),
fld4: [i8; 7],
fld5: (u32,),

},
Variant1{
fld0: Adt50,
fld1: Adt46,
fld2: *mut [u32; 5],
fld3: i8,
fld4: [i8; 7],
fld5: usize,
fld6: (char, [u32; 5]),
fld7: (*mut [u32; 5], i8),

},
Variant2{
fld0: (char, [u32; 5]),
fld1: (char, u16, [i32; 2], u32, u128),
fld2: Adt51,
fld3: *const *mut [u32; 5],
fld4: Adt48,
fld5: (*mut (u32,),),
fld6: [i8; 7],

},
Variant3{
fld0: isize,
fld1: u64,

}}
#[derive(Debug)]
pub enum Adt55 {
Variant0{
fld0: Adt49,
fld1: Adt43,

},
Variant1{
fld0: u16,
fld1: (char, u16, [i32; 2], u32, u128),

},
Variant2{
fld0: Adt49,
fld1: *const char,
fld2: *mut f32,
fld3: i8,
fld4: *mut *mut f32,

}}
#[derive(Debug)]
pub struct Adt56 {
fld0: Adt42,
fld1: *const (bool, u64, f64, f32),
fld2: Adt43,
fld3: *const *mut [u32; 5],
fld4: (bool, u64, f64, f32),
fld5: *mut (u32,),
fld6: (u32,),
}
#[derive(Debug)]
pub enum Adt57 {
Variant0{
fld0: i128,
fld1: Adt54,
fld2: i64,
fld3: [i8; 7],
fld4: f64,

},
Variant1{
fld0: ([u16; 3],),
fld1: ((char, u16, [i32; 2], u32, u128), bool, *const i8),
fld2: f64,
fld3: i8,
fld4: u16,
fld5: Adt55,

},
Variant2{
fld0: *mut (u32,),
fld1: i32,
fld2: (*mut [u32; 5], i8),
fld3: i128,
fld4: [u32; 5],

},
Variant3{
fld0: Adt52,
fld1: Adt48,
fld2: *mut f32,
fld3: Adt50,
fld4: i16,

}}
#[derive(Debug)]
pub struct Adt58 {
fld0: (*mut [u32; 5], u128, u32, *mut [u32; 5]),
fld1: Adt51,
fld2: (bool, u64, f64, f32),
fld3: ((char, u16, [i32; 2], u32, u128), bool, *const i8),
fld4: [usize; 4],
}

