#![recursion_limit = "1024"]
    #![feature(custom_mir, core_intrinsics, const_hash)]
    #![allow(unused_parens, unused_assignments, overflowing_literals)]
    extern crate core;
    use core::intrinsics::mir::*;

    use std::fmt::Debug;

    #[inline(never)]
    fn dump_var(
        f: usize,
        var0: usize, val0: impl Debug,
        var1: usize, val1: impl Debug,
        var2: usize, val2: impl Debug,
        var3: usize, val3: impl Debug,
    ) {
        println!("fn{f}:_{var0} = {val0:?}\n_{var1} = {val1:?}\n_{var2} = {val2:?}\n_{var3} = {val3:?}");
    }
    #[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn0(mut _1: bool,mut _2: u32,mut _3: isize,mut _4: i8,mut _5: i16,mut _6: i32,mut _7: u128,mut _8: i128,mut _9: usize,mut _10: u8,mut _11: u16) -> char {
mir! {
type RET = char;
let _12: (i16, char);
let _13: *const f32;
let _14: char;
let _15: &'static [u16; 4];
let _16: Adt55;
let _17: [char; 1];
let _18: Adt41;
let _19: i32;
let _20: u16;
let _21: [char; 3];
let _22: Adt54;
let _23: (i128, [char; 3]);
let _24: f32;
let _25: Adt46;
let _26: Adt50;
let _27: [i8; 2];
let _28: Adt51;
let _29: Adt49;
let _30: Adt54;
let _31: ();
let _32: ();
{
_3 = !(-107_isize);
_8 = 133347184361970853935954257580190368080_i128 >> _3;
_1 = !true;
RET = '\u{9f12}';
_10 = 7_usize as u8;
_7 = 5881625908083651910_i64 as u128;
_12.1 = RET;
_9 = 7_usize;
_2 = 3200854151209819308_u64 as u32;
_12.0 = (-23304_i16);
_8 = (-1679771877294868608_i64) as i128;
match _12.0 {
0 => bb1,
1 => bb2,
2 => bb3,
340282366920938463463374607431768188152 => bb5,
_ => bb4
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
RET = _12.1;
_6 = (-424895160_i32);
_8 = 143755448974394519453680748487581687493_i128;
_12 = ((-27932_i16), RET);
_12.0 = 23598_u16 as i16;
_2 = 884597_u32;
_10 = 96_u8;
_14 = _12.1;
_7 = 173526537156185425951453628826152253091_u128;
RET = _14;
_5 = !_12.0;
_6 = (-390436522_i32);
_12.0 = _5 << _8;
_11 = _12.0 as u16;
RET = _12.1;
_7 = 282821265320571037138101745970853498716_u128;
_3 = (-9223372036854775808_isize) + 9223372036854775807_isize;
match _10 {
0 => bb1,
1 => bb4,
96 => bb7,
_ => bb6
}
}
bb6 = {
Return()
}
bb7 = {
_12.0 = _5;
_12.0 = -_5;
_3 = (-9223372036854775808_isize);
_4 = 610419973551852361_i64 as i8;
_2 = !3358651056_u32;
_16.fld0.3 = _14 <= _14;
_4 = !39_i8;
_16.fld0 = (_8, _14, _11, _1, _2);
_16.fld0.2 = _11 & _11;
_16.fld0 = (_8, RET, _11, _1, _2);
_11 = _16.fld0.2;
_12.0 = _5;
_16.fld1 = [_4,_4];
match _3 {
0 => bb2,
1 => bb8,
2 => bb9,
340282366920938463454151235394913435648 => bb11,
_ => bb10
}
}
bb8 = {
Return()
}
bb9 = {
RET = _12.1;
_6 = (-424895160_i32);
_8 = 143755448974394519453680748487581687493_i128;
_12 = ((-27932_i16), RET);
_12.0 = 23598_u16 as i16;
_2 = 884597_u32;
_10 = 96_u8;
_14 = _12.1;
_7 = 173526537156185425951453628826152253091_u128;
RET = _14;
_5 = !_12.0;
_6 = (-390436522_i32);
_12.0 = _5 << _8;
_11 = _12.0 as u16;
RET = _12.1;
_7 = 282821265320571037138101745970853498716_u128;
_3 = (-9223372036854775808_isize) + 9223372036854775807_isize;
match _10 {
0 => bb1,
1 => bb4,
96 => bb7,
_ => bb6
}
}
bb10 = {
Return()
}
bb11 = {
_6 = _16.fld0.0 as i32;
_17 = [_14];
_16.fld0.0 = _8 | _8;
_16.fld0.3 = _1;
_1 = !_16.fld0.3;
_9 = 2_usize;
_16.fld0.3 = !_1;
_4 = _5 as i8;
_7 = 1265320108938577879_u64 as u128;
_16.fld0.2 = _12.1 as u16;
RET = _16.fld0.1;
_11 = !_16.fld0.2;
_12 = (_5, _16.fld0.1);
_16.fld0 = (_8, _14, _11, _1, _2);
_7 = _4 as u128;
_2 = _7 as u32;
_4 = _10 as i8;
_6 = (-656292232_i32);
_6 = -802875415_i32;
_12 = (_5, _16.fld0.1);
_16.fld1 = [_4,_4];
_12.0 = _8 as i16;
_16.fld1 = [_4,_4];
_12.0 = _5 + _5;
match _16.fld0.0 {
0 => bb7,
1 => bb5,
143755448974394519453680748487581687493 => bb12,
_ => bb6
}
}
bb12 = {
_16.fld1 = [_4,_4];
_20 = _7 as u16;
_21 = [RET,_12.1,RET];
_7 = 198052693723905235778030465727211843089_u128 & 301674254584599499032898770997634179742_u128;
_10 = !81_u8;
_5 = _10 as i16;
_12.1 = RET;
_6 = 785374847_i32;
_5 = _9 as i16;
_11 = _16.fld0.2 * _20;
Goto(bb13)
}
bb13 = {
_5 = _16.fld0.3 as i16;
_3 = 103_isize;
_16.fld0 = (_8, RET, _20, _1, _2);
_21[_9] = _16.fld0.1;
_1 = _16.fld0.3;
_16.fld0.3 = _1;
_17 = [_12.1];
_8 = _16.fld0.4 as i128;
RET = _21[_9];
_13 = core::ptr::addr_of!(_24);
_26.fld0.2 = core::ptr::addr_of!((*_13));
Call(_23.1 = fn1(_1, _16.fld0.4, _3, RET, Move(_16), _3, _12, _5, _11, _12.0, _2, _12, _5), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
_26.fld2 = !14936479656310630945_u64;
_16.fld0.2 = _20 & _11;
_27 = [_4,_4];
_12.0 = -_5;
_16.fld0.3 = _1;
Goto(bb15)
}
bb15 = {
Call(_31 = dump_var(0_usize, 5_usize, Move(_5), 20_usize, Move(_20), 12_usize, Move(_12), 11_usize, Move(_11)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_31 = dump_var(0_usize, 7_usize, Move(_7), 21_usize, Move(_21), 1_usize, Move(_1), 2_usize, Move(_2)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn1(mut _1: bool,mut _2: u32,mut _3: isize,mut _4: char,mut _5: Adt55,mut _6: isize,mut _7: (i16, char),mut _8: i16,mut _9: u16,mut _10: i16,mut _11: u32,mut _12: (i16, char),mut _13: i16) -> [char; 3] {
mir! {
type RET = [char; 3];
let _14: f32;
let _15: isize;
let _16: isize;
let _17: char;
let _18: i16;
let _19: (i16, char);
let _20: i16;
let _21: [i8; 2];
let _22: isize;
let _23: isize;
let _24: ([u16; 4], (i128, [char; 3]));
let _25: char;
let _26: Adt50;
let _27: *mut ((i128, [char; 3]), [u16; 4]);
let _28: (i128, [char; 3]);
let _29: (i16, char);
let _30: bool;
let _31: Adt42;
let _32: f32;
let _33: (i128, [char; 3]);
let _34: &'static [u16; 4];
let _35: Adt52;
let _36: ((i128, [char; 3]), [u16; 4]);
let _37: [i8; 2];
let _38: u16;
let _39: isize;
let _40: *mut i128;
let _41: Adt48;
let _42: isize;
let _43: f64;
let _44: Adt44;
let _45: Adt55;
let _46: (u8, i64, (u32,));
let _47: [char; 1];
let _48: f64;
let _49: Adt44;
let _50: (u8, i64, (u32,));
let _51: Adt41;
let _52: i128;
let _53: char;
let _54: Adt42;
let _55: *mut i128;
let _56: Adt51;
let _57: ();
let _58: ();
{
_5.fld0 = ((-41017626999308392830423099225537042843_i128), _7.1, _9, _1, _11);
_1 = !_5.fld0.3;
_5.fld0.0 = -25071285193076442555589544662027352945_i128;
_12.0 = 16376545255060617248_usize as i16;
RET = [_7.1,_4,_12.1];
_4 = _5.fld0.1;
_1 = _5.fld0.3;
_11 = _5.fld0.4;
_14 = 174_u8 as f32;
_10 = _12.0;
_15 = _3 + _6;
_5.fld0.2 = _9;
_16 = 2137661878125802895_i64 as isize;
_5.fld1 = [(-116_i8),(-15_i8)];
_1 = !_5.fld0.3;
_5.fld0 = (169535749405359479004944082960077446623_i128, _4, _9, _1, _11);
_5.fld0.3 = _1;
RET = [_4,_12.1,_12.1];
_8 = _13;
_7.0 = _13;
_8 = _5.fld0.4 as i16;
Goto(bb1)
}
bb1 = {
_6 = _15;
_5.fld0.3 = !_1;
_12.1 = _4;
_5.fld0.2 = _9;
_2 = _1 as u32;
_21 = _5.fld1;
Goto(bb2)
}
bb2 = {
RET = [_4,_5.fld0.1,_12.1];
_3 = !_6;
_20 = -_7.0;
RET = [_4,_5.fld0.1,_5.fld0.1];
_5.fld0.1 = _7.1;
_22 = 3656043582489537873_usize as isize;
_12.1 = _5.fld0.1;
_1 = !_5.fld0.3;
_11 = _5.fld0.4;
_17 = _5.fld0.1;
_24.1.1 = [_5.fld0.1,_7.1,_5.fld0.1];
_6 = -_15;
_5.fld0.0 = _5.fld0.3 as i128;
_2 = _11 & _5.fld0.4;
_24.1.1 = [_7.1,_4,_5.fld0.1];
_17 = _7.1;
_24.1.0 = _5.fld0.0;
_23 = _6;
_9 = _15 as u16;
_26.fld0.3 = !246_u8;
_5.fld0 = (_24.1.0, _7.1, _9, _1, _2);
_12 = _7;
_5.fld0 = (_24.1.0, _4, _9, _1, _2);
_26.fld1 = core::ptr::addr_of!(_14);
Call(_6 = fn2(_17, _5.fld0, _21, _12.0, _5.fld0, _21, _24.1, _12.1), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Goto(bb4)
}
bb4 = {
_13 = _8;
_26.fld1 = core::ptr::addr_of!(_14);
Goto(bb5)
}
bb5 = {
_17 = _5.fld0.1;
_26.fld0 = (_17, _24.1.1, _26.fld1, 241_u8);
Goto(bb6)
}
bb6 = {
_16 = !_3;
_9 = _5.fld0.2 + _5.fld0.2;
_24.0 = [_9,_9,_9,_9];
_29 = _12;
_10 = _8;
_11 = _5.fld0.4 & _2;
_19.1 = _5.fld0.1;
_28 = (_24.1.0, _26.fld0.1);
_19 = _29;
_19.1 = _29.1;
_5.fld0.0 = _28.0;
_30 = _9 == _5.fld0.2;
_26.fld0.0 = _4;
_29.1 = _19.1;
Goto(bb7)
}
bb7 = {
_29.0 = _19.0;
_26.fld0.1 = [_17,_5.fld0.1,_12.1];
_29.0 = _19.0;
_30 = _5.fld0.3;
_11 = _5.fld0.4;
_7.1 = _19.1;
_29 = (_10, _5.fld0.1);
_5.fld0.2 = !_9;
_8 = _29.0;
_24.1 = (_28.0, _26.fld0.1);
_1 = _5.fld0.3;
_10 = _29.0;
_5.fld0.0 = _28.0 + _24.1.0;
_12.1 = _19.1;
RET = [_12.1,_5.fld0.1,_5.fld0.1];
_5.fld0.4 = _11 | _2;
_29.1 = _4;
_7.0 = _26.fld0.3 as i16;
_5.fld0 = (_28.0, _17, _9, _30, _11);
_5.fld0 = (_28.0, _19.1, _9, _30, _11);
_5.fld0.3 = _26.fld0.3 == _26.fld0.3;
_5.fld0.0 = _24.1.0 >> _6;
_15 = (-7809627838316356947_i64) as isize;
Goto(bb8)
}
bb8 = {
_35.fld7 = 441451208_i32 as f64;
_28.0 = -_5.fld0.0;
_24.0 = [_9,_5.fld0.2,_9,_5.fld0.2];
_35.fld4 = core::ptr::addr_of_mut!(_26.fld0.1);
match _26.fld0.3 {
0 => bb1,
1 => bb4,
2 => bb3,
3 => bb9,
241 => bb11,
_ => bb10
}
}
bb9 = {
_6 = _15;
_5.fld0.3 = !_1;
_12.1 = _4;
_5.fld0.2 = _9;
_2 = _1 as u32;
_21 = _5.fld1;
Goto(bb2)
}
bb10 = {
_17 = _5.fld0.1;
_26.fld0 = (_17, _24.1.1, _26.fld1, 241_u8);
Goto(bb6)
}
bb11 = {
_26.fld0.2 = _26.fld1;
_36.0.0 = _24.1.0 * _5.fld0.0;
_38 = _9 + _5.fld0.2;
_35.fld6.1 = _4;
_35.fld6.3 = !_5.fld0.3;
_28.1 = [_17,_17,_35.fld6.1];
_35.fld3.0 = _36.0.0;
_34 = &_24.0;
_3 = _38 as isize;
_37 = _21;
_35.fld6.2 = (-15_i8) as u16;
RET = [_29.1,_19.1,_7.1];
_35.fld6.0 = _35.fld7 as i128;
_12.1 = _5.fld0.1;
_7.0 = _20 & _19.0;
_35.fld7 = _3 as f64;
_5.fld0.3 = !_30;
_41.fld0 = [_12.1];
_26.fld0 = (_5.fld0.1, _28.1, _26.fld1, 220_u8);
_29.0 = _12.0;
_29.0 = _8;
_35.fld3 = _28;
_12.1 = _17;
_35.fld6.4 = _11;
_40 = core::ptr::addr_of_mut!(_35.fld3.0);
Goto(bb12)
}
bb12 = {
_45.fld0.2 = _38 << (*_40);
_26.fld0.0 = _19.1;
_5.fld0.1 = _19.1;
_10 = 128292083624548419890610677912652487214_u128 as i16;
_35.fld6 = (_5.fld0.0, _5.fld0.1, _45.fld0.2, _30, _5.fld0.4);
_16 = _3;
_18 = _8;
_35.fld2.fld0 = [_26.fld0.0];
_35.fld2.fld1.0 = _12.1;
Goto(bb13)
}
bb13 = {
_41.fld1.1 = [_35.fld2.fld1.0,_35.fld2.fld1.0,_12.1];
_45 = Adt55 { fld0: _5.fld0,fld1: _37 };
_32 = -_14;
_29.0 = -_19.0;
_35.fld5 = core::ptr::addr_of_mut!(_46.2);
_46.0 = !_26.fld0.3;
_42 = _6 + _15;
_18 = -_8;
_41 = Adt48 { fld0: _35.fld2.fld0,fld1: _26.fld0 };
_42 = -_15;
_45.fld0.0 = _35.fld6.0 << _9;
_20 = _19.0 - _12.0;
_26.fld0 = (_4, _24.1.1, _41.fld1.2, _41.fld1.3);
_35.fld2.fld1.1 = RET;
_33 = _35.fld3;
_47 = [_35.fld2.fld1.0];
_37 = _5.fld1;
_2 = !_35.fld6.4;
_35.fld1 = Adt42::Variant1 { fld0: 3_usize,fld1: _41.fld1,fld2: _6,fld3: _28,fld4: _24 };
match _26.fld0.3 {
0 => bb1,
1 => bb14,
2 => bb15,
3 => bb16,
4 => bb17,
5 => bb18,
220 => bb20,
_ => bb19
}
}
bb14 = {
_13 = _8;
_26.fld1 = core::ptr::addr_of!(_14);
Goto(bb5)
}
bb15 = {
_26.fld0.2 = _26.fld1;
_36.0.0 = _24.1.0 * _5.fld0.0;
_38 = _9 + _5.fld0.2;
_35.fld6.1 = _4;
_35.fld6.3 = !_5.fld0.3;
_28.1 = [_17,_17,_35.fld6.1];
_35.fld3.0 = _36.0.0;
_34 = &_24.0;
_3 = _38 as isize;
_37 = _21;
_35.fld6.2 = (-15_i8) as u16;
RET = [_29.1,_19.1,_7.1];
_35.fld6.0 = _35.fld7 as i128;
_12.1 = _5.fld0.1;
_7.0 = _20 & _19.0;
_35.fld7 = _3 as f64;
_5.fld0.3 = !_30;
_41.fld0 = [_12.1];
_26.fld0 = (_5.fld0.1, _28.1, _26.fld1, 220_u8);
_29.0 = _12.0;
_29.0 = _8;
_35.fld3 = _28;
_12.1 = _17;
_35.fld6.4 = _11;
_40 = core::ptr::addr_of_mut!(_35.fld3.0);
Goto(bb12)
}
bb16 = {
_17 = _5.fld0.1;
_26.fld0 = (_17, _24.1.1, _26.fld1, 241_u8);
Goto(bb6)
}
bb17 = {
_6 = _15;
_5.fld0.3 = !_1;
_12.1 = _4;
_5.fld0.2 = _9;
_2 = _1 as u32;
_21 = _5.fld1;
Goto(bb2)
}
bb18 = {
RET = [_4,_5.fld0.1,_12.1];
_3 = !_6;
_20 = -_7.0;
RET = [_4,_5.fld0.1,_5.fld0.1];
_5.fld0.1 = _7.1;
_22 = 3656043582489537873_usize as isize;
_12.1 = _5.fld0.1;
_1 = !_5.fld0.3;
_11 = _5.fld0.4;
_17 = _5.fld0.1;
_24.1.1 = [_5.fld0.1,_7.1,_5.fld0.1];
_6 = -_15;
_5.fld0.0 = _5.fld0.3 as i128;
_2 = _11 & _5.fld0.4;
_24.1.1 = [_7.1,_4,_5.fld0.1];
_17 = _7.1;
_24.1.0 = _5.fld0.0;
_23 = _6;
_9 = _15 as u16;
_26.fld0.3 = !246_u8;
_5.fld0 = (_24.1.0, _7.1, _9, _1, _2);
_12 = _7;
_5.fld0 = (_24.1.0, _4, _9, _1, _2);
_26.fld1 = core::ptr::addr_of!(_14);
Call(_6 = fn2(_17, _5.fld0, _21, _12.0, _5.fld0, _21, _24.1, _12.1), ReturnTo(bb3), UnwindUnreachable())
}
bb19 = {
_29.0 = _19.0;
_26.fld0.1 = [_17,_5.fld0.1,_12.1];
_29.0 = _19.0;
_30 = _5.fld0.3;
_11 = _5.fld0.4;
_7.1 = _19.1;
_29 = (_10, _5.fld0.1);
_5.fld0.2 = !_9;
_8 = _29.0;
_24.1 = (_28.0, _26.fld0.1);
_1 = _5.fld0.3;
_10 = _29.0;
_5.fld0.0 = _28.0 + _24.1.0;
_12.1 = _19.1;
RET = [_12.1,_5.fld0.1,_5.fld0.1];
_5.fld0.4 = _11 | _2;
_29.1 = _4;
_7.0 = _26.fld0.3 as i16;
_5.fld0 = (_28.0, _17, _9, _30, _11);
_5.fld0 = (_28.0, _19.1, _9, _30, _11);
_5.fld0.3 = _26.fld0.3 == _26.fld0.3;
_5.fld0.0 = _24.1.0 >> _6;
_15 = (-7809627838316356947_i64) as isize;
Goto(bb8)
}
bb20 = {
place!(Field::<(i128, [char; 3])>(Variant(_35.fld1, 1), 3)) = (_35.fld6.0, _33.1);
_26.fld0.1 = [_19.1,_35.fld6.1,_12.1];
_23 = _32 as isize;
_26.fld2 = _14 as u64;
_5.fld0.3 = (*_40) < _28.0;
_25 = _29.1;
_45.fld0 = _5.fld0;
_8 = -_7.0;
_43 = _35.fld7;
_35.fld6.2 = 4_usize as u16;
_52 = _33.0;
_5.fld0 = (_45.fld0.0, _4, _38, _45.fld0.3, _45.fld0.4);
_48 = _5.fld0.2 as f64;
_35.fld5 = core::ptr::addr_of_mut!(_50.2);
_29.0 = _20;
_28.1 = [Field::<(char, [char; 3], *const f32, u8)>(Variant(_35.fld1, 1), 1).0,_35.fld2.fld1.0,_17];
Goto(bb21)
}
bb21 = {
Call(_57 = dump_var(1_usize, 4_usize, Move(_4), 9_usize, Move(_9), 3_usize, Move(_3), 33_usize, Move(_33)), ReturnTo(bb22), UnwindUnreachable())
}
bb22 = {
Call(_57 = dump_var(1_usize, 42_usize, Move(_42), 19_usize, Move(_19), 38_usize, Move(_38), 52_usize, Move(_52)), ReturnTo(bb23), UnwindUnreachable())
}
bb23 = {
Call(_57 = dump_var(1_usize, 24_usize, Move(_24), 7_usize, Move(_7), 28_usize, Move(_28), 17_usize, Move(_17)), ReturnTo(bb24), UnwindUnreachable())
}
bb24 = {
Call(_57 = dump_var(1_usize, 37_usize, Move(_37), 21_usize, Move(_21), 12_usize, Move(_12), 8_usize, Move(_8)), ReturnTo(bb25), UnwindUnreachable())
}
bb25 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn2(mut _1: char,mut _2: (i128, char, u16, bool, u32),mut _3: [i8; 2],mut _4: i16,mut _5: (i128, char, u16, bool, u32),mut _6: [i8; 2],mut _7: (i128, [char; 3]),mut _8: char) -> isize {
mir! {
type RET = isize;
let _9: i8;
let _10: ([u16; 4], [u16; 4]);
let _11: f32;
let _12: isize;
let _13: *mut (u32,);
let _14: [i8; 2];
let _15: u16;
let _16: ([u16; 4], [u16; 4]);
let _17: isize;
let _18: *const f32;
let _19: u128;
let _20: i8;
let _21: bool;
let _22: [char; 1];
let _23: f32;
let _24: u128;
let _25: i8;
let _26: (i128, [char; 3]);
let _27: [u16; 4];
let _28: isize;
let _29: Adt55;
let _30: Adt43;
let _31: (u8, i64, (u32,));
let _32: isize;
let _33: i8;
let _34: f32;
let _35: (u8, i64, (u32,));
let _36: f32;
let _37: ();
let _38: ();
{
_2.2 = _5.2 ^ _5.2;
Call(_4 = fn3(_5.0, _6, _6, _5.3, _5.2, _2, _5.2, _2, _2.3, _5.2, _2.1, _8, _2.1, _6), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_5 = (_7.0, _1, _2.2, _2.3, _2.4);
_4 = _5.2 as i16;
_7.1 = [_8,_8,_5.1];
_7.1 = [_5.1,_1,_1];
_5.2 = _2.2 ^ _2.2;
_8 = _2.1;
_7.0 = -_2.0;
_5.1 = _8;
_9 = 73_i8 - 115_i8;
_3 = [_9,_9];
Goto(bb2)
}
bb2 = {
_2.0 = !_5.0;
RET = _5.4 as isize;
_2.1 = _5.1;
_7.1 = [_2.1,_8,_2.1];
_5.0 = 217871595236923875719953202207937750400_u128 as i128;
_2.4 = _5.4 * _5.4;
_2.0 = _7.0 >> _2.2;
_4 = !(-11015_i16);
_6 = _3;
_3 = _6;
_6 = [_9,_9];
_6 = _3;
_12 = RET & RET;
_4 = (-4642311695231450011_i64) as i16;
RET = _12;
_2.0 = _7.0;
_4 = 11047_i16;
_5.4 = _2.4 | _2.4;
_11 = 10647776951064314629_usize as f32;
_2.3 = _5.3 | _5.3;
_15 = !_5.2;
_15 = _2.2 >> _7.0;
_4 = 19549_i16;
_4 = !(-23150_i16);
_17 = -RET;
Call(_3 = core::intrinsics::transmute(_5.2), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_2.2 = !_5.2;
_3 = [_9,_9];
_17 = _1 as isize;
_2.4 = _5.4 ^ _5.4;
Call(_4 = core::intrinsics::bswap(11046_i16), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_18 = core::ptr::addr_of!(_11);
_5.4 = _2.4;
_2.1 = _1;
_15 = !_5.2;
_20 = _9 | _9;
_7.0 = _5.0 * _5.0;
_3 = [_9,_20];
_22 = [_2.1];
Goto(bb5)
}
bb5 = {
_1 = _8;
_11 = _5.4 as f32;
_5.4 = 0_usize as u32;
_14 = [_20,_20];
_9 = 32_u8 as i8;
_16.0 = [_15,_15,_15,_2.2];
_25 = _20 + _20;
RET = _12 ^ _12;
_2.2 = _15;
_18 = core::ptr::addr_of!((*_18));
_14 = _3;
Goto(bb6)
}
bb6 = {
_5 = (_2.0, _2.1, _2.2, _2.3, _2.4);
_23 = 12416796766637412679_usize as f32;
_24 = 239192661879462538232940974506181821982_u128;
_19 = _2.4 as u128;
_20 = _25;
_4 = -2501_i16;
_10 = (_16.0, _16.0);
_26.0 = _7.0 >> _5.4;
_25 = 275905730585738567_u64 as i8;
_26.1 = _7.1;
_25 = _9 << _5.4;
_2.1 = _8;
_5.2 = _2.2 * _15;
_9 = _25 & _25;
_15 = _2.2 | _2.2;
_20 = _25;
Call(_19 = core::intrinsics::bswap(_24), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
_24 = _19 >> _26.0;
_26.0 = _2.0 | _5.0;
_29.fld0.4 = _5.4;
_26.0 = _5.0 + _7.0;
_20 = _2.4 as i8;
_28 = _1 as isize;
_26 = _7;
_12 = _4 as isize;
Goto(bb8)
}
bb8 = {
_22 = [_2.1];
_10 = (_16.0, _16.0);
_10.1 = _10.0;
_24 = _19 * _19;
_8 = _1;
_11 = -_23;
_21 = !_5.3;
_10.1 = [_2.2,_5.2,_5.2,_5.2];
_7.0 = _26.0;
_10 = (_16.0, _16.0);
_21 = !_2.3;
_26.0 = -_7.0;
_16.0 = _10.0;
_29 = Adt55 { fld0: _5,fld1: _3 };
_5.3 = _2.3;
_6 = [_20,_9];
_30 = Adt43::Variant1 { fld0: _26.1,fld1: _22 };
_27 = _16.0;
_15 = _29.fld0.2 * _2.2;
_30 = Adt43::Variant1 { fld0: _26.1,fld1: _22 };
_7.0 = _2.0 ^ _26.0;
_26.0 = -_29.fld0.0;
_10.1 = [_15,_29.fld0.2,_5.2,_29.fld0.2];
_22 = [_8];
_12 = -RET;
_29.fld0.3 = !_2.3;
_5.4 = !_29.fld0.4;
_3 = [_9,_25];
Goto(bb9)
}
bb9 = {
_2.2 = !_29.fld0.2;
_29.fld0.0 = !_5.0;
_30 = Adt43::Variant1 { fld0: _7.1,fld1: _22 };
_7 = (_5.0, _26.1);
_2.2 = _29.fld0.3 as u16;
_31.2.0 = !_2.4;
_2.0 = 1118820741_i32 as i128;
_9 = -_25;
SetDiscriminant(_30, 1);
_31.2 = (_2.4,);
_29.fld0 = (_7.0, _8, _5.2, _21, _2.4);
place!(Field::<[char; 3]>(Variant(_30, 1), 0)) = _26.1;
_9 = !_20;
_34 = _11;
_33 = _9 & _20;
_5 = _29.fld0;
_32 = _12;
_29 = Adt55 { fld0: _5,fld1: _3 };
_5.1 = _29.fld0.1;
_2.1 = _1;
_9 = !_33;
_5.1 = _1;
_29.fld1 = [_9,_9];
_5.3 = _2.4 != _29.fld0.4;
Goto(bb10)
}
bb10 = {
_12 = _32 | _17;
_16.1 = _10.1;
_23 = -(*_18);
_30 = Adt43::Variant1 { fld0: _26.1,fld1: _22 };
_5 = (_7.0, _8, _15, _29.fld0.3, _2.4);
_26 = (_7.0, Field::<[char; 3]>(Variant(_30, 1), 0));
SetDiscriminant(_30, 1);
place!(Field::<[char; 1]>(Variant(_30, 1), 1)) = [_8];
_29.fld0.0 = _26.0;
Call(_31.0 = core::intrinsics::transmute(_9), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_14 = [_20,_9];
_25 = _9 | _9;
_35 = (_31.0, (-6205790596306333300_i64), _31.2);
_31.2.0 = !_35.2.0;
_23 = (-33163726_i32) as f32;
RET = _12 ^ _32;
_15 = _5.4 as u16;
_34 = (*_18);
_5.3 = _21;
_5.1 = _2.1;
_5.1 = _8;
_10.1 = _16.0;
_4 = !11789_i16;
_26.0 = _29.fld0.0;
Goto(bb12)
}
bb12 = {
Call(_37 = dump_var(2_usize, 20_usize, Move(_20), 27_usize, Move(_27), 7_usize, Move(_7), 21_usize, Move(_21)), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
Call(_37 = dump_var(2_usize, 16_usize, Move(_16), 1_usize, Move(_1), 33_usize, Move(_33), 17_usize, Move(_17)), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
Call(_37 = dump_var(2_usize, 32_usize, Move(_32), 24_usize, Move(_24), 35_usize, Move(_35), 3_usize, Move(_3)), ReturnTo(bb15), UnwindUnreachable())
}
bb15 = {
Call(_37 = dump_var(2_usize, 26_usize, Move(_26), 38_usize, _38, 38_usize, _38, 38_usize, _38), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn3(mut _1: i128,mut _2: [i8; 2],mut _3: [i8; 2],mut _4: bool,mut _5: u16,mut _6: (i128, char, u16, bool, u32),mut _7: u16,mut _8: (i128, char, u16, bool, u32),mut _9: bool,mut _10: u16,mut _11: char,mut _12: char,mut _13: char,mut _14: [i8; 2]) -> i16 {
mir! {
type RET = i16;
let _15: bool;
let _16: u16;
let _17: [i8; 2];
let _18: isize;
let _19: Adt51;
let _20: (i128, char, u16, bool, u32);
let _21: *mut (u32,);
let _22: Adt47;
let _23: i16;
let _24: (i128, [char; 3]);
let _25: [i8; 2];
let _26: bool;
let _27: char;
let _28: char;
let _29: isize;
let _30: Adt43;
let _31: *mut u8;
let _32: *mut [char; 3];
let _33: *mut (u32,);
let _34: (u32,);
let _35: ([u16; 4], [u16; 4]);
let _36: f32;
let _37: u8;
let _38: Adt48;
let _39: [char; 1];
let _40: isize;
let _41: ([u16; 4], (i128, [char; 3]));
let _42: (u8, i64, (u32,));
let _43: ();
let _44: ();
{
_7 = _5;
_8.3 = !_6.3;
RET = -7786_i16;
_12 = _6.1;
_15 = !_6.3;
_6 = (_1, _13, _10, _8.3, _8.4);
RET = (-15874_i16) + 20100_i16;
_8.3 = _15;
_9 = _6.3;
_6.3 = _4 | _9;
_7 = _6.2 - _8.2;
_9 = _6.2 > _7;
Goto(bb1)
}
bb1 = {
_10 = _6.2;
_3 = [(-71_i8),(-95_i8)];
_17 = [78_i8,102_i8];
_2 = [73_i8,34_i8];
_8.2 = !_7;
_1 = _6.0;
_8.3 = _9;
_5 = _7 << _7;
_8.1 = _11;
_6.2 = !_8.2;
_17 = _14;
_6.2 = !_5;
_8.4 = _6.4 + _6.4;
_9 = !_8.3;
_5 = _7;
_1 = _6.0;
_6.4 = !_8.4;
_6 = (_8.0, _12, _8.2, _4, _8.4);
RET = (-7782_i16) ^ 15678_i16;
_6 = _8;
_8.4 = 5001606208456408516_i64 as u32;
Goto(bb2)
}
bb2 = {
_13 = _11;
_18 = (-593106318_i32) as isize;
_8.4 = _6.4 * _6.4;
RET = (-26579_i16) ^ 379_i16;
_20.1 = _13;
_8.1 = _13;
_8 = (_1, _20.1, _6.2, _9, _6.4);
_20.4 = _8.4 & _6.4;
_7 = _5 | _5;
_8.2 = _7 + _6.2;
Goto(bb3)
}
bb3 = {
_6.2 = (-115824521_i32) as u16;
_16 = _6.2;
_8.4 = _20.4;
_2 = [119_i8,(-49_i8)];
_8.0 = RET as i128;
_20.3 = !_9;
_8.0 = -_6.0;
RET = !(-20790_i16);
_2 = [(-49_i8),(-82_i8)];
_9 = _15;
_8.1 = _12;
_6.4 = 893149649_i32 as u32;
_8.3 = !_6.3;
_20.2 = !_8.2;
_13 = _6.1;
_20.4 = _6.3 as u32;
_8.1 = _13;
_6 = (_1, _8.1, _20.2, _4, _8.4);
_19 = Adt51::Variant1 { fld0: 267444820562483430073189809031613709319_u128,fld1: _13 };
_4 = _8.4 != _8.4;
_19 = Adt51::Variant1 { fld0: 138377487769582707686041854078741872140_u128,fld1: _13 };
Goto(bb4)
}
bb4 = {
_6 = (_1, Field::<char>(Variant(_19, 1), 1), _20.2, _20.3, _20.4);
_20 = (_1, Field::<char>(Variant(_19, 1), 1), _6.2, _4, _8.4);
_8.2 = _20.2 * _20.2;
_8.3 = _20.3;
Goto(bb5)
}
bb5 = {
_5 = !_8.2;
_6.3 = _8.2 == _7;
_13 = _6.1;
place!(Field::<u128>(Variant(_19, 1), 0)) = 3545983233625664622_i64 as u128;
_6.3 = !_4;
_8.3 = _6.3 & _20.3;
_10 = (-3000348580318380066_i64) as u16;
_10 = _20.2;
_1 = _8.0;
_3 = _2;
_20.3 = _8.3 != _6.3;
_6.3 = !_20.3;
_6.0 = 42_u8 as i128;
_24.1 = [_20.1,_8.1,_20.1];
_8.4 = RET as u32;
_11 = _13;
_20.1 = _13;
_6.0 = (-3589280770143522913_i64) as i128;
_8.1 = _12;
RET = !24290_i16;
_6.0 = -_1;
_9 = _8.3;
SetDiscriminant(_19, 0);
_19 = Adt51::Variant1 { fld0: 152228915335822356715418335074453459330_u128,fld1: _13 };
Call(place!(Field::<u128>(Variant(_19, 1), 0)) = fn4(_8.2, _5, _20.2, _9), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
_10 = !_5;
_17 = [(-62_i8),(-59_i8)];
_8.1 = _11;
_18 = _1 as isize;
_24.1 = [_6.1,Field::<char>(Variant(_19, 1), 1),_8.1];
_6.1 = _12;
_2 = [(-70_i8),(-90_i8)];
place!(Field::<u128>(Variant(_19, 1), 0)) = 245629726648850835691940012256571186513_u128 | 41277190620393266656542607244145301012_u128;
_16 = 4495409389751827832_u64 as u16;
RET = (-1511_i16);
_22 = Adt47::Variant0 { fld0: 6805447764722690412_i64,fld1: 1750879755_i32,fld2: _16 };
_8.4 = !_20.4;
Goto(bb7)
}
bb7 = {
_8.4 = _1 as u32;
_20.3 = _8.3 < _6.3;
_14 = [(-114_i8),120_i8];
place!(Field::<i64>(Variant(_22, 0), 0)) = _11 as i64;
_5 = !_10;
_9 = !_6.3;
place!(Field::<i32>(Variant(_22, 0), 1)) = -(-1227259365_i32);
_7 = 5_usize as u16;
_27 = _13;
_11 = _12;
_15 = _8.3;
Goto(bb8)
}
bb8 = {
_8.2 = !_5;
_11 = _13;
_6.1 = _27;
_20 = (_8.0, _27, _6.2, _9, _6.4);
_24.1 = [_12,_8.1,_13];
_14 = [(-97_i8),73_i8];
_6.2 = _5 + _5;
match RET {
340282366920938463463374607431768209945 => bb9,
_ => bb6
}
}
bb9 = {
_8.1 = _27;
_11 = Field::<char>(Variant(_19, 1), 1);
_8.3 = _6.3 != _15;
SetDiscriminant(_19, 0);
place!(Field::<i32>(Variant(_22, 0), 1)) = (-50181578_i32);
_13 = _11;
_22 = Adt47::Variant0 { fld0: 5720104939763729604_i64,fld1: 1114393919_i32,fld2: _5 };
_1 = !_20.0;
place!(Field::<u16>(Variant(_22, 0), 2)) = _8.2;
_2 = _17;
_6.3 = _9 ^ _8.3;
_1 = _8.0 << _6.2;
place!(Field::<u16>(Variant(_22, 0), 2)) = _8.2;
_22 = Adt47::Variant0 { fld0: (-5849132077925890174_i64),fld1: (-1507710505_i32),fld2: _7 };
_25 = [91_i8,23_i8];
_10 = _20.2;
place!(Field::<(u8, i64, (u32,))>(Variant(_19, 0), 0)).1 = (-3124353176133340782_i64) | (-3564859281166530047_i64);
_21 = core::ptr::addr_of_mut!(place!(Field::<(u8, i64, (u32,))>(Variant(_19, 0), 0)).2);
_8.3 = _20.3;
_24.0 = 80_i8 as i128;
place!(Field::<(u8, i64, (u32,))>(Variant(_19, 0), 0)).1 = (-189282944070169065_i64);
_33 = core::ptr::addr_of_mut!(_34);
_11 = _8.1;
_10 = 56_i8 as u16;
_20.2 = _6.2;
_6 = (_1, _20.1, _20.2, _20.3, _20.4);
Goto(bb10)
}
bb10 = {
_11 = _13;
_2 = [95_i8,46_i8];
_14 = _3;
_9 = _20.3 ^ _15;
_29 = _18;
_34.0 = !_20.4;
RET = 3260_i16 >> _20.2;
_7 = !_20.2;
_6.4 = _20.4 >> _34.0;
_32 = core::ptr::addr_of_mut!(_38.fld1.1);
place!(Field::<*mut i128>(Variant(_19, 0), 2)) = core::ptr::addr_of_mut!(_1);
place!(Field::<(u8, i64, (u32,))>(Variant(_19, 0), 0)).0 = !115_u8;
_29 = _18;
_1 = _6.0;
_6.4 = _34.0 - (*_33).0;
_20.4 = !_6.4;
Goto(bb11)
}
bb11 = {
Call(_43 = dump_var(3_usize, 14_usize, Move(_14), 17_usize, Move(_17), 27_usize, Move(_27), 16_usize, Move(_16)), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
Call(_43 = dump_var(3_usize, 8_usize, Move(_8), 25_usize, Move(_25), 3_usize, Move(_3), 24_usize, Move(_24)), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
Call(_43 = dump_var(3_usize, 5_usize, Move(_5), 4_usize, Move(_4), 29_usize, Move(_29), 7_usize, Move(_7)), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn4(mut _1: u16,mut _2: u16,mut _3: u16,mut _4: bool) -> u128 {
mir! {
type RET = u128;
let _5: char;
let _6: [u16; 4];
let _7: (u32,);
let _8: isize;
let _9: (u8, i64, (u32,));
let _10: ([u16; 4], (i128, [char; 3]));
let _11: *const i16;
let _12: (i128, char, u16, bool, u32);
let _13: [char; 3];
let _14: ([u16; 4], [u16; 4]);
let _15: Adt47;
let _16: [i8; 2];
let _17: Adt54;
let _18: isize;
let _19: [u16; 4];
let _20: i64;
let _21: i16;
let _22: i16;
let _23: (i128, char, u16, bool, u32);
let _24: (u8, i64, (u32,));
let _25: Adt41;
let _26: i32;
let _27: u128;
let _28: isize;
let _29: isize;
let _30: *mut ((i128, [char; 3]), [u16; 4]);
let _31: f32;
let _32: (u8, i64, (u32,));
let _33: u128;
let _34: &'static [u16; 4];
let _35: i8;
let _36: isize;
let _37: (u64, u128, (*const f32, char), *const i16);
let _38: u128;
let _39: f32;
let _40: bool;
let _41: Adt42;
let _42: Adt50;
let _43: Adt48;
let _44: ();
let _45: ();
{
RET = 1393257858874284945269243744769825285_u128;
RET = 329419736908025869013490837557399915884_u128;
_2 = _3 ^ _1;
_4 = true;
_1 = _2;
RET = !307230353062073708679603845278124797809_u128;
_3 = !_1;
_5 = '\u{b6efa}';
_5 = '\u{fca6}';
RET = 174054339268425886927857473954554562411_u128;
_5 = '\u{b49c6}';
_2 = !_3;
_6 = [_3,_2,_3,_3];
RET = !107320413173667778577536998349443582159_u128;
_1 = _2 | _2;
_1 = _3;
_5 = '\u{45ad8}';
_7.0 = 1163863321_u32 ^ 129183_u32;
_1 = !_3;
_7.0 = 1000911547_u32;
_7.0 = 768475867_u32;
_7 = (387930905_u32,);
_7 = (1194107759_u32,);
_7.0 = !531584749_u32;
_2 = _3;
_2 = !_1;
Call(_7.0 = core::intrinsics::transmute(_5), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_8 = _1 as isize;
RET = 268486461727531026646459635865395663_u128 | 149204207303252019512366366467930123978_u128;
_10.0 = [_2,_3,_1,_3];
_3 = _1 << _2;
_9.2 = (_7.0,);
_10.1.1 = [_5,_5,_5];
_10.1.0 = -(-152362841620098699025090389283319703649_i128);
_7 = (_9.2.0,);
_9.0 = 11_u8;
_10.1.0 = 1947717273_i32 as i128;
_6 = [_1,_2,_2,_1];
_9 = (164_u8, 1230534383974283913_i64, _7);
_9.0 = 25_u8;
_12.4 = _9.2.0;
_2 = _3 >> _3;
RET = 93814575892605829948014288672029563687_u128;
RET = !209534871345013737049447475020635652970_u128;
RET = 250470868690460039563628722983559995837_u128 | 296151419513892580703068680285498687802_u128;
_10.1.0 = _4 as i128;
_12 = (_10.1.0, _5, _2, _4, _7.0);
_3 = _4 as u16;
Goto(bb2)
}
bb2 = {
_12.4 = _7.0;
_9.2.0 = !_7.0;
_14 = (_10.0, _10.0);
_12.0 = _10.1.0 - _10.1.0;
_12.2 = _1;
Goto(bb3)
}
bb3 = {
_9 = (216_u8, 380538192731223030_i64, _7);
_7.0 = !_9.2.0;
_13 = [_12.1,_12.1,_12.1];
_10.1.0 = !_12.0;
_12 = (_10.1.0, _5, _1, _4, _7.0);
RET = 243191376583558700264854207426286654355_u128 & 215938150547012407772096354088443367932_u128;
_9 = (255_u8, 6461666904592299115_i64, _7);
_8 = (-9223372036854775808_isize);
_9.0 = 220_u8 & 32_u8;
_14.0 = [_12.2,_12.2,_2,_2];
_12.0 = _10.1.0 + _10.1.0;
RET = 6569560698235931613_u64 as u128;
_16 = [112_i8,(-92_i8)];
RET = 307860945786650241071402825883948563223_u128 - 337827802058073326852230590726962591430_u128;
_3 = _1 + _2;
_10.1.1 = [_5,_5,_5];
_12.3 = _4;
RET = 181772288725058013958560754395946100750_u128 ^ 67102898906447176263940470519630745494_u128;
Goto(bb4)
}
bb4 = {
RET = _5 as u128;
Call(_7.0 = fn5(_3, _12.2, _12, _14.1, _3, _12, _3, _3, _12.2, _12, _1, _10.0), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
_4 = !_12.3;
_7.0 = _9.2.0 >> _3;
_12.2 = _8 as u16;
_18 = -_8;
_9.2.0 = _9.1 as u32;
Call(_14 = fn11(_1, _1, _10.0), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
_1 = RET as u16;
_21 = 6553_i16;
_10.1.1 = [_5,_5,_5];
_12.2 = _2;
_7 = (_9.2.0,);
_12 = (_10.1.0, _5, _2, _4, _7.0);
Call(_10.1.1 = fn12(_3, _12.2, _12.2, _14, _3, _2, _14, _3), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
_10.0 = [_3,_12.2,_3,_3];
_7 = (_9.2.0,);
_13 = _10.1.1;
_14 = (_10.0, _6);
_11 = core::ptr::addr_of!(_21);
_10.1 = (_12.0, _13);
_12.3 = _12.2 <= _2;
_16 = [72_i8,(-121_i8)];
_4 = _2 > _12.2;
_23 = (_10.1.0, _12.1, _3, _12.3, _7.0);
_16 = [122_i8,108_i8];
_22 = (*_11);
_8 = !_18;
_10.0 = [_12.2,_3,_12.2,_2];
_9.0 = !94_u8;
_19 = [_12.2,_23.2,_23.2,_3];
_24.0 = _18 as u8;
_12.4 = _23.0 as u32;
Goto(bb8)
}
bb8 = {
_10.1.1 = [_5,_5,_12.1];
_26 = 252339096_i32 << _23.2;
_9.2.0 = _23.4 | _7.0;
_12.0 = 7_usize as i128;
_8 = _18 << _23.2;
_14 = (_6, _19);
_12.3 = _4 ^ _4;
_24.1 = !_9.1;
_8 = _26 as isize;
_9 = (_24.0, _24.1, _7);
_8 = 667396332793481418_u64 as isize;
_14.1 = [_12.2,_12.2,_3,_2];
_10.1.1 = [_23.1,_23.1,_5];
_23 = _12;
_7.0 = !_12.4;
_7.0 = !_23.4;
_24.0 = _9.1 as u8;
_14 = (_6, _10.0);
_14.0 = [_12.2,_3,_23.2,_23.2];
_7.0 = _12.4;
_23.4 = _12.4 * _7.0;
_23.4 = _9.2.0;
RET = 20243135896534845133639321560476929590_u128;
_9.0 = _24.0;
_26 = 1530833743_i32;
_23.2 = _26 as u16;
_24.2.0 = !_23.4;
_27 = RET % RET;
match _21 {
0 => bb4,
1 => bb2,
6553 => bb10,
_ => bb9
}
}
bb9 = {
_1 = RET as u16;
_21 = 6553_i16;
_10.1.1 = [_5,_5,_5];
_12.2 = _2;
_7 = (_9.2.0,);
_12 = (_10.1.0, _5, _2, _4, _7.0);
Call(_10.1.1 = fn12(_3, _12.2, _12.2, _14, _3, _2, _14, _3), ReturnTo(bb7), UnwindUnreachable())
}
bb10 = {
_29 = _23.1 as isize;
_12.2 = _3 << _3;
match _21 {
0 => bb11,
6553 => bb13,
_ => bb12
}
}
bb11 = {
_1 = RET as u16;
_21 = 6553_i16;
_10.1.1 = [_5,_5,_5];
_12.2 = _2;
_7 = (_9.2.0,);
_12 = (_10.1.0, _5, _2, _4, _7.0);
Call(_10.1.1 = fn12(_3, _12.2, _12.2, _14, _3, _2, _14, _3), ReturnTo(bb7), UnwindUnreachable())
}
bb12 = {
_10.0 = [_3,_12.2,_3,_3];
_7 = (_9.2.0,);
_13 = _10.1.1;
_14 = (_10.0, _6);
_11 = core::ptr::addr_of!(_21);
_10.1 = (_12.0, _13);
_12.3 = _12.2 <= _2;
_16 = [72_i8,(-121_i8)];
_4 = _2 > _12.2;
_23 = (_10.1.0, _12.1, _3, _12.3, _7.0);
_16 = [122_i8,108_i8];
_22 = (*_11);
_8 = !_18;
_10.0 = [_12.2,_3,_12.2,_2];
_9.0 = !94_u8;
_19 = [_12.2,_23.2,_23.2,_3];
_24.0 = _18 as u8;
_12.4 = _23.0 as u32;
Goto(bb8)
}
bb13 = {
_18 = !_8;
_4 = !_23.3;
_31 = _10.1.0 as f32;
_18 = _29 + _29;
RET = !_27;
_24.1 = -_9.1;
_9.2.0 = _24.1 as u32;
_28 = _27 as isize;
RET = _9.1 as u128;
_10.1.0 = _12.0;
_24.1 = _31 as i64;
_11 = core::ptr::addr_of!(_21);
_23.3 = !_12.3;
_22 = (*_11) ^ (*_11);
_14 = (_10.0, _19);
_10.1 = (_12.0, _13);
_20 = _9.1 >> _12.2;
_35 = RET as i8;
_27 = !RET;
_2 = _20 as u16;
_31 = 1_usize as f32;
match (*_11) {
0 => bb12,
1 => bb2,
2 => bb14,
6553 => bb16,
_ => bb15
}
}
bb14 = {
_4 = !_12.3;
_7.0 = _9.2.0 >> _3;
_12.2 = _8 as u16;
_18 = -_8;
_9.2.0 = _9.1 as u32;
Call(_14 = fn11(_1, _1, _10.0), ReturnTo(bb6), UnwindUnreachable())
}
bb15 = {
_1 = RET as u16;
_21 = 6553_i16;
_10.1.1 = [_5,_5,_5];
_12.2 = _2;
_7 = (_9.2.0,);
_12 = (_10.1.0, _5, _2, _4, _7.0);
Call(_10.1.1 = fn12(_3, _12.2, _12.2, _14, _3, _2, _14, _3), ReturnTo(bb7), UnwindUnreachable())
}
bb16 = {
_35 = (-64_i8) & 22_i8;
_9.2 = (_7.0,);
_5 = _23.1;
_9.0 = _24.0 ^ _24.0;
_23.4 = !_24.2.0;
_3 = !_12.2;
_32.0 = _9.0 << _12.2;
_29 = _18 * _28;
_14.1 = _19;
_16 = [_35,_35];
_39 = _31;
_39 = 4_usize as f32;
_29 = _18;
_7.0 = _26 as u32;
_32.1 = _20 + _20;
_22 = -(*_11);
_23 = (_10.1.0, _12.1, _12.2, _4, _9.2.0);
_23.2 = _3;
_26 = !18343416_i32;
RET = _28 as u128;
_2 = _3 & _3;
_10.1.1 = _13;
_12.3 = _4;
_32.2 = (_23.4,);
_23.4 = !_24.2.0;
_42.fld1 = core::ptr::addr_of!(_31);
_33 = _27;
Goto(bb17)
}
bb17 = {
Call(_44 = dump_var(4_usize, 3_usize, Move(_3), 26_usize, Move(_26), 27_usize, Move(_27), 33_usize, Move(_33)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_44 = dump_var(4_usize, 18_usize, Move(_18), 20_usize, Move(_20), 35_usize, Move(_35), 14_usize, Move(_14)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_44 = dump_var(4_usize, 6_usize, Move(_6), 2_usize, Move(_2), 7_usize, Move(_7), 24_usize, Move(_24)), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Call(_44 = dump_var(4_usize, 21_usize, Move(_21), 10_usize, Move(_10), 45_usize, _45, 45_usize, _45), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn5(mut _1: u16,mut _2: u16,mut _3: (i128, char, u16, bool, u32),mut _4: [u16; 4],mut _5: u16,mut _6: (i128, char, u16, bool, u32),mut _7: u16,mut _8: u16,mut _9: u16,mut _10: (i128, char, u16, bool, u32),mut _11: u16,mut _12: [u16; 4]) -> u32 {
mir! {
type RET = u32;
let _13: i128;
let _14: (i16, char);
let _15: isize;
let _16: i16;
let _17: (i128, char, u16, bool, u32);
let _18: Adt49;
let _19: [i8; 2];
let _20: f32;
let _21: *mut i128;
let _22: ();
let _23: ();
{
_13 = 8442463551426778393_u64 as i128;
_6.3 = _1 >= _9;
_10.4 = !_6.4;
_5 = _3.0 as u16;
_3.0 = !_6.0;
_3.1 = _6.1;
Call(RET = fn6(_8, _4, _2, _8, _6, _7, _2, _3.2, _8, _3.0, _1, _8, _6.3, _3.2, _6, _6.3), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_10.0 = _3.0 << _9;
_3.4 = !RET;
_8 = _1;
_4 = [_3.2,_11,_8,_6.2];
_10.3 = _6.3;
_13 = !_10.0;
_17.1 = _6.1;
_14.0 = -7013_i16;
_15 = (-9223372036854775808_isize) + (-107_isize);
_2 = (-5688553294677869424_i64) as u16;
_9 = !_1;
_4 = [_1,_7,_1,_7];
_17.0 = -_3.0;
_3.0 = _13;
_1 = _6.2;
_16 = _14.0 + _14.0;
_6.1 = _10.1;
_11 = _10.2;
_10.3 = _6.3;
_14 = (_16, _3.1);
_10.4 = _3.4;
_3.2 = _6.2;
_2 = _3.4 as u16;
_16 = -_14.0;
Goto(bb2)
}
bb2 = {
Call(_22 = dump_var(5_usize, 6_usize, Move(_6), 11_usize, Move(_11), 14_usize, Move(_14), 4_usize, Move(_4)), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Call(_22 = dump_var(5_usize, 3_usize, Move(_3), 5_usize, Move(_5), 10_usize, Move(_10), 1_usize, Move(_1)), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn6(mut _1: u16,mut _2: [u16; 4],mut _3: u16,mut _4: u16,mut _5: (i128, char, u16, bool, u32),mut _6: u16,mut _7: u16,mut _8: u16,mut _9: u16,mut _10: i128,mut _11: u16,mut _12: u16,mut _13: bool,mut _14: u16,mut _15: (i128, char, u16, bool, u32),mut _16: bool) -> u32 {
mir! {
type RET = u32;
let _17: Adt47;
let _18: ([u16; 4], (i128, [char; 3]));
let _19: [u16; 4];
let _20: bool;
let _21: [u16; 4];
let _22: char;
let _23: isize;
let _24: isize;
let _25: (*const f32, char);
let _26: u64;
let _27: bool;
let _28: (u8, i64, (u32,));
let _29: ();
let _30: ();
{
_15.0 = _5.0 - _10;
_15.4 = _5.4 * _5.4;
_15.2 = 127491593751395912609063389468275014603_u128 as u16;
_5 = (_15.0, _15.1, _12, _15.3, _15.4);
_4 = 2797557780432149958_i64 as u16;
_15.4 = !_5.4;
_5.3 = _15.3;
_12 = !_11;
_2 = [_7,_14,_14,_9];
_15.3 = _16 ^ _5.3;
_16 = _11 < _6;
_15.1 = _5.1;
_5.3 = _13 | _15.3;
_5.2 = !_12;
Call(_5 = fn7(_10, _15.3, _15, _12, _2, _13, _9, _13, _14, _1, _6, _11, _2), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_8 = !_5.2;
_11 = _1;
_8 = !_6;
_15.4 = _5.4 - _5.4;
_15.0 = !_5.0;
_15.1 = _5.1;
_4 = _9;
_5.0 = -_15.0;
_5.4 = _15.4;
RET = _15.4;
RET = _15.4;
_6 = _9;
_18.0 = [_11,_11,_6,_4];
_15.0 = _5.0;
_5.2 = _1;
Goto(bb2)
}
bb2 = {
_2 = [_12,_6,_3,_4];
_13 = _5.3;
_5.0 = _15.0;
_6 = !_8;
_18.1.0 = (-438635062_i32) as i128;
_16 = _5.3;
_8 = _4 * _6;
_4 = _12;
_13 = _12 == _9;
_18.1.1 = [_15.1,_15.1,_5.1];
_5.2 = _1 | _12;
_15.2 = _5.2;
Goto(bb3)
}
bb3 = {
_1 = _15.3 as u16;
_10 = _5.0;
_15.3 = _16;
Call(RET = fn8(_5.2, _6, _6, _18, _12, _5, _15.3, _18.0, _9, _16, _6, _13, _9, _6), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_13 = _15.3 & _5.3;
_5.2 = _11;
_15.4 = !RET;
_22 = _5.1;
_2 = [_9,_1,_4,_6];
_16 = _5.3;
_5.0 = (-7687_i16) as i128;
_19 = [_9,_6,_11,_11];
_3 = !_9;
_5.0 = _15.0 + _15.0;
_5.2 = !_1;
RET = !_15.4;
_23 = 9223372036854775807_isize;
_15.1 = _5.1;
_21 = [_14,_8,_14,_3];
_25.1 = _22;
_3 = _12;
_13 = _4 == _5.2;
_5.2 = _12;
_6 = _1 - _3;
_4 = _1;
Goto(bb5)
}
bb5 = {
Call(_29 = dump_var(6_usize, 7_usize, Move(_7), 21_usize, Move(_21), 12_usize, Move(_12), 22_usize, Move(_22)), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
Call(_29 = dump_var(6_usize, 16_usize, Move(_16), 18_usize, Move(_18), 1_usize, Move(_1), 11_usize, Move(_11)), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
Call(_29 = dump_var(6_usize, 19_usize, Move(_19), 6_usize, Move(_6), 30_usize, _30, 30_usize, _30), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn7(mut _1: i128,mut _2: bool,mut _3: (i128, char, u16, bool, u32),mut _4: u16,mut _5: [u16; 4],mut _6: bool,mut _7: u16,mut _8: bool,mut _9: u16,mut _10: u16,mut _11: u16,mut _12: u16,mut _13: [u16; 4]) -> (i128, char, u16, bool, u32) {
mir! {
type RET = (i128, char, u16, bool, u32);
let _14: i32;
let _15: (i128, char, u16, bool, u32);
let _16: (char, [char; 3], *const f32, u8);
let _17: Adt57;
let _18: ([u16; 4], [u16; 4]);
let _19: i128;
let _20: (i128, char, u16, bool, u32);
let _21: ();
let _22: ();
{
RET.4 = _3.4;
RET = (_3.0, _3.1, _11, _8, _3.4);
RET.4 = _3.4 - _3.4;
RET.2 = _10;
_2 = RET.2 == _9;
_3.0 = !RET.0;
RET.3 = _10 <= _7;
_14 = 24399407_i32 & (-1959323193_i32);
_5 = [_12,_4,_11,_4];
_12 = _4;
_1 = 10118170136243170764_u64 as i128;
_3 = RET;
_7 = RET.2;
_15 = (_1, RET.1, _3.2, _6, _3.4);
RET.3 = _15.3;
_7 = 131_u8 as u16;
_15 = (RET.0, RET.1, RET.2, _8, _3.4);
RET.0 = 127_u8 as i128;
_7 = _15.2 + _4;
_15.0 = _3.0 + _3.0;
_3.2 = _4 + _4;
RET = (_15.0, _3.1, _3.2, _2, _3.4);
RET.1 = _15.1;
_15.1 = _3.1;
_13 = _5;
Goto(bb1)
}
bb1 = {
Call(_21 = dump_var(7_usize, 2_usize, Move(_2), 8_usize, Move(_8), 11_usize, Move(_11), 7_usize, Move(_7)), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Call(_21 = dump_var(7_usize, 1_usize, Move(_1), 3_usize, Move(_3), 5_usize, Move(_5), 22_usize, _22), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn8(mut _1: u16,mut _2: u16,mut _3: u16,mut _4: ([u16; 4], (i128, [char; 3])),mut _5: u16,mut _6: (i128, char, u16, bool, u32),mut _7: bool,mut _8: [u16; 4],mut _9: u16,mut _10: bool,mut _11: u16,mut _12: bool,mut _13: u16,mut _14: u16) -> u32 {
mir! {
type RET = u32;
let _15: Adt44;
let _16: Adt53;
let _17: (u8, i64, (u32,));
let _18: *mut (u32,);
let _19: u64;
let _20: i128;
let _21: u32;
let _22: (i128, char, u16, bool, u32);
let _23: char;
let _24: f32;
let _25: Adt50;
let _26: (i128, [char; 3]);
let _27: f64;
let _28: Adt43;
let _29: ();
let _30: ();
{
_3 = _11 - _14;
_10 = _9 != _3;
_2 = _6.2;
RET = _6.4;
_11 = 10494585020616203700_u64 as u16;
_12 = !_7;
_10 = _7 < _7;
_4.0 = _8;
_4.1.0 = !_6.0;
_6.1 = '\u{ac7d8}';
Call(_6.3 = fn9(_7, _12, _4.1.0), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_13 = !_1;
_9 = _3 ^ _3;
_7 = _12;
_9 = _1 - _2;
_6.2 = _13;
Goto(bb2)
}
bb2 = {
_9 = !_5;
_12 = !_10;
_2 = !_9;
_6.4 = !RET;
_12 = !_10;
_5 = !_9;
_9 = _14 + _13;
_11 = _1 * _5;
_14 = RET as u16;
_6 = (_4.1.0, '\u{796bc}', _1, _10, RET);
_9 = _5 << _11;
_1 = _3 & _6.2;
_14 = _2;
_8 = [_3,_3,_5,_5];
_13 = _1 + _3;
_12 = _6.3;
_5 = 1389289255_i32 as u16;
_6.4 = RET >> _3;
_6.0 = 95_u8 as i128;
Goto(bb3)
}
bb3 = {
_1 = _14;
_13 = _14;
_6 = (_4.1.0, '\u{3d873}', _3, _12, RET);
_15 = Adt44::Variant1 { fld0: 4128524055995048979_i64 };
_6.0 = _4.1.0;
_8 = [_14,_2,_2,_6.2];
_3 = _14;
_1 = !_13;
_9 = !_2;
place!(Field::<i64>(Variant(_15, 1), 0)) = (-16073_i16) as i64;
_6.3 = !_12;
_11 = _1;
_6 = (_4.1.0, '\u{43f92}', _2, _12, RET);
_6 = (_4.1.0, '\u{d2312}', _11, _10, RET);
_17.1 = Field::<i64>(Variant(_15, 1), 0);
_17.2 = (_6.4,);
RET = _6.4 ^ _17.2.0;
_2 = 5196213972094815381147544728530989928_u128 as u16;
_8 = [_1,_13,_3,_14];
_14 = _1 & _6.2;
SetDiscriminant(_15, 2);
_12 = _6.3;
RET = !_17.2.0;
_7 = _14 != _6.2;
_11 = _14 + _1;
Call(_5 = fn10(_6.2, _4.0, _10, _9, _14), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_9 = _10 as u16;
Goto(bb5)
}
bb5 = {
_15 = Adt44::Variant1 { fld0: _17.1 };
_12 = _6.2 <= _5;
_17.2 = (_6.4,);
_18 = core::ptr::addr_of_mut!(_17.2);
_4.1.1 = [_6.1,_6.1,_6.1];
_4.1.1 = [_6.1,_6.1,_6.1];
_17.2 = (_6.4,);
place!(Field::<i64>(Variant(_15, 1), 0)) = _17.1;
_3 = 9223372036854775807_isize as u16;
_10 = _12 & _12;
_8 = [_5,_11,_13,_1];
_12 = _10;
_12 = _7;
_6.3 = _10 & _10;
_6 = (_4.1.0, '\u{79e08}', _14, _10, _17.2.0);
SetDiscriminant(_15, 0);
_15 = Adt44::Variant1 { fld0: _17.1 };
_2 = (-121_i8) as u16;
_22.4 = RET;
_22.1 = _6.1;
_14 = _9;
SetDiscriminant(_15, 2);
Goto(bb6)
}
bb6 = {
_17.0 = (*_18).0 as u8;
_6.4 = _22.1 as u32;
_17.2 = (_6.4,);
_6.2 = _14;
Goto(bb7)
}
bb7 = {
_25.fld0.0 = _6.1;
RET = _17.2.0;
_15 = Adt44::Variant2 { fld0: _4.1.1 };
SetDiscriminant(_15, 1);
_17.0 = !238_u8;
_3 = _6.2 - _13;
_4.0 = _8;
_23 = _6.1;
_22.2 = 2135546569_i32 as u16;
_24 = 563_i16 as f32;
Goto(bb8)
}
bb8 = {
Call(_29 = dump_var(8_usize, 23_usize, Move(_23), 10_usize, Move(_10), 17_usize, Move(_17), 3_usize, Move(_3)), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
Call(_29 = dump_var(8_usize, 8_usize, Move(_8), 7_usize, Move(_7), 4_usize, Move(_4), 1_usize, Move(_1)), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn9(mut _1: bool,mut _2: bool,mut _3: i128) -> bool {
mir! {
type RET = bool;
let _4: (i16, char);
let _5: ();
let _6: ();
{
_4.1 = '\u{70fe2}';
_1 = _2 >= _2;
RET = _1 & _2;
_3 = (-77474329030002594854657281722271043541_i128) * (-90690640446561943030079987053296786606_i128);
_1 = !_2;
Goto(bb1)
}
bb1 = {
Call(_5 = dump_var(9_usize, 3_usize, Move(_3), 6_usize, _6, 6_usize, _6, 6_usize, _6), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn10(mut _1: u16,mut _2: [u16; 4],mut _3: bool,mut _4: u16,mut _5: u16) -> u16 {
mir! {
type RET = u16;
let _6: Adt44;
let _7: Adt43;
let _8: ();
let _9: ();
{
_2 = [_5,_5,_5,_4];
RET = 389361146_i32 as u16;
_4 = _5;
_3 = !false;
_2 = [_4,_1,_1,_4];
RET = !_1;
RET = _4 & _4;
_4 = !_5;
_1 = _4;
RET = 130017220726199367481788771106069790242_u128 as u16;
_1 = _5;
_2 = [_4,_4,_5,_5];
RET = _4;
_2 = [RET,_5,_1,RET];
_2 = [RET,RET,_1,RET];
_4 = _1;
RET = !_5;
_6 = Adt44::Variant1 { fld0: 6152515126779209338_i64 };
_3 = !false;
_1 = _4;
_6 = Adt44::Variant1 { fld0: (-9156346470770459357_i64) };
RET = _3 as u16;
_3 = _1 >= _1;
_1 = _5 ^ _5;
Goto(bb1)
}
bb1 = {
_3 = false;
RET = 198056056_u32 as u16;
_2 = [_5,_5,_1,_5];
place!(Field::<i64>(Variant(_6, 1), 0)) = 2325319877887932309_i64;
_3 = true;
_4 = !_5;
RET = _1 * _4;
Goto(bb2)
}
bb2 = {
Call(_8 = dump_var(10_usize, 3_usize, Move(_3), 5_usize, Move(_5), 9_usize, _9, 9_usize, _9), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn11(mut _1: u16,mut _2: u16,mut _3: [u16; 4]) -> ([u16; 4], [u16; 4]) {
mir! {
type RET = ([u16; 4], [u16; 4]);
let _4: ();
let _5: ();
{
RET.0 = _3;
_1 = !_2;
_1 = _2;
_2 = !_1;
RET = (_3, _3);
_1 = !_2;
RET = (_3, _3);
RET = (_3, _3);
_3 = RET.1;
RET = (_3, _3);
RET.0 = [_1,_1,_2,_2];
RET.1 = [_1,_1,_2,_2];
Goto(bb1)
}
bb1 = {
Call(_4 = dump_var(11_usize, 2_usize, Move(_2), 5_usize, _5, 5_usize, _5, 5_usize, _5), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn12(mut _1: u16,mut _2: u16,mut _3: u16,mut _4: ([u16; 4], [u16; 4]),mut _5: u16,mut _6: u16,mut _7: ([u16; 4], [u16; 4]),mut _8: u16) -> [char; 3] {
mir! {
type RET = [char; 3];
let _9: isize;
let _10: Adt44;
let _11: Adt41;
let _12: i16;
let _13: &'static [u16; 4];
let _14: (i128, char, u16, bool, u32);
let _15: u128;
let _16: *mut i128;
let _17: isize;
let _18: *mut [char; 3];
let _19: [u16; 4];
let _20: &'static [u16; 4];
let _21: u64;
let _22: [char; 3];
let _23: i128;
let _24: bool;
let _25: (i128, char, u16, bool, u32);
let _26: char;
let _27: *mut ((i128, [char; 3]), [u16; 4]);
let _28: f64;
let _29: (u8, i64, (u32,));
let _30: [char; 1];
let _31: [i8; 2];
let _32: bool;
let _33: Adt45;
let _34: ((i128, [char; 3]), [u16; 4]);
let _35: (i128, char, u16, bool, u32);
let _36: [char; 3];
let _37: isize;
let _38: Adt43;
let _39: (i128, [char; 3]);
let _40: u8;
let _41: ();
let _42: ();
{
_7 = (_4.1, _4.0);
RET = ['\u{13e5}','\u{fe30c}','\u{88f45}'];
_4.0 = _7.1;
_4 = _7;
_2 = _6 * _5;
_4.0 = [_1,_8,_5,_8];
_7.1 = [_1,_5,_3,_8];
_7.1 = _4.0;
_1 = (-53_i8) as u16;
_6 = _3;
Goto(bb1)
}
bb1 = {
_4 = _7;
_1 = _2;
RET = ['\u{347f4}','\u{78548}','\u{a143}'];
_12 = (-1130_i16) | 811_i16;
_3 = 67_i8 as u16;
_4.0 = [_1,_1,_2,_5];
_6 = _1 - _2;
_14.1 = '\u{ed28}';
_7.1 = [_5,_1,_6,_1];
_2 = _8;
_10 = Adt44::Variant1 { fld0: 3256542720090128580_i64 };
_14.0 = 16909809023124726606_usize as i128;
_3 = _2 & _8;
_14.1 = '\u{98db2}';
_7.0 = [_3,_3,_5,_3];
_3 = _8;
_17 = !9223372036854775807_isize;
Goto(bb2)
}
bb2 = {
_4.0 = _4.1;
_17 = 6037001625431739023_i64 as isize;
_13 = &_7.0;
Goto(bb3)
}
bb3 = {
_16 = core::ptr::addr_of_mut!(_14.0);
Call(place!(Field::<i64>(Variant(_10, 1), 0)) = fn13((*_13), (*_13), Move(_13), _3, _4, _5, _6, _7, _8, _6, _7.1), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_10 = Adt44::Variant2 { fld0: RET };
_20 = &_4.0;
_4 = (_7.1, _7.0);
_17 = 17710761460154956455_u64 as isize;
_18 = core::ptr::addr_of_mut!(place!(Field::<[char; 3]>(Variant(_10, 2), 0)));
Goto(bb5)
}
bb5 = {
place!(Field::<[char; 3]>(Variant(_10, 2), 0)) = [_14.1,_14.1,_14.1];
_19 = _7.0;
_6 = 110_u8 as u16;
place!(Field::<[char; 3]>(Variant(_10, 2), 0)) = RET;
_6 = !_5;
SetDiscriminant(_10, 0);
_4 = _7;
_10 = Adt44::Variant2 { fld0: RET };
place!(Field::<[char; 3]>(Variant(_10, 2), 0)) = [_14.1,_14.1,_14.1];
_19 = _4.0;
_6 = _2 & _2;
_21 = !10216598840743596906_u64;
_14.2 = !_3;
_18 = core::ptr::addr_of_mut!(place!(Field::<[char; 3]>(Variant(_10, 2), 0)));
_22 = [_14.1,_14.1,_14.1];
_25.0 = _14.0 + (*_16);
_23 = -_25.0;
_24 = !false;
_12 = -(-30157_i16);
_7.0 = [_8,_5,_6,_5];
_24 = !true;
Goto(bb6)
}
bb6 = {
_25.0 = 2595511020_u32 as i128;
_15 = 285153250422839944776305205900230204075_u128;
place!(Field::<[char; 3]>(Variant(_10, 2), 0)) = [_14.1,_14.1,_14.1];
SetDiscriminant(_10, 2);
_4.1 = [_3,_1,_2,_3];
_9 = -_17;
_29.1 = !(-2096885283234933338_i64);
_29.0 = !70_u8;
_9 = _17 >> _1;
_7.1 = _19;
_9 = _17;
_4.1 = [_2,_8,_6,_8];
RET = _22;
_25.4 = 3477489095_u32 >> _6;
_2 = _8 ^ _14.2;
_14 = (_23, '\u{a2a85}', _6, _24, _25.4);
_30 = [_14.1];
_14.0 = -_25.0;
_6 = !_2;
_3 = !_5;
_29.2.0 = _14.4 * _25.4;
match _15 {
0 => bb4,
1 => bb2,
2 => bb3,
3 => bb7,
4 => bb8,
5 => bb9,
6 => bb10,
285153250422839944776305205900230204075 => bb12,
_ => bb11
}
}
bb7 = {
place!(Field::<[char; 3]>(Variant(_10, 2), 0)) = [_14.1,_14.1,_14.1];
_19 = _7.0;
_6 = 110_u8 as u16;
place!(Field::<[char; 3]>(Variant(_10, 2), 0)) = RET;
_6 = !_5;
SetDiscriminant(_10, 0);
_4 = _7;
_10 = Adt44::Variant2 { fld0: RET };
place!(Field::<[char; 3]>(Variant(_10, 2), 0)) = [_14.1,_14.1,_14.1];
_19 = _4.0;
_6 = _2 & _2;
_21 = !10216598840743596906_u64;
_14.2 = !_3;
_18 = core::ptr::addr_of_mut!(place!(Field::<[char; 3]>(Variant(_10, 2), 0)));
_22 = [_14.1,_14.1,_14.1];
_25.0 = _14.0 + (*_16);
_23 = -_25.0;
_24 = !false;
_12 = -(-30157_i16);
_7.0 = [_8,_5,_6,_5];
_24 = !true;
Goto(bb6)
}
bb8 = {
_10 = Adt44::Variant2 { fld0: RET };
_20 = &_4.0;
_4 = (_7.1, _7.0);
_17 = 17710761460154956455_u64 as isize;
_18 = core::ptr::addr_of_mut!(place!(Field::<[char; 3]>(Variant(_10, 2), 0)));
Goto(bb5)
}
bb9 = {
_16 = core::ptr::addr_of_mut!(_14.0);
Call(place!(Field::<i64>(Variant(_10, 1), 0)) = fn13((*_13), (*_13), Move(_13), _3, _4, _5, _6, _7, _8, _6, _7.1), ReturnTo(bb4), UnwindUnreachable())
}
bb10 = {
_4.0 = _4.1;
_17 = 6037001625431739023_i64 as isize;
_13 = &_7.0;
Goto(bb3)
}
bb11 = {
_4 = _7;
_1 = _2;
RET = ['\u{347f4}','\u{78548}','\u{a143}'];
_12 = (-1130_i16) | 811_i16;
_3 = 67_i8 as u16;
_4.0 = [_1,_1,_2,_5];
_6 = _1 - _2;
_14.1 = '\u{ed28}';
_7.1 = [_5,_1,_6,_1];
_2 = _8;
_10 = Adt44::Variant1 { fld0: 3256542720090128580_i64 };
_14.0 = 16909809023124726606_usize as i128;
_3 = _2 & _8;
_14.1 = '\u{98db2}';
_7.0 = [_3,_3,_5,_3];
_3 = _8;
_17 = !9223372036854775807_isize;
Goto(bb2)
}
bb12 = {
_16 = core::ptr::addr_of_mut!((*_16));
_14.2 = _29.0 as u16;
_4.1 = [_1,_3,_5,_3];
_25.0 = (*_16) ^ (*_16);
_16 = core::ptr::addr_of_mut!(_25.0);
_13 = &_7.1;
Goto(bb13)
}
bb13 = {
_14.4 = !_29.2.0;
_33.fld1 = core::ptr::addr_of!(_12);
_14.4 = _29.1 as u32;
_25.3 = !_24;
_28 = _21 as f64;
_22 = [_14.1,_14.1,_14.1];
_16 = core::ptr::addr_of_mut!(_34.0.0);
_33.fld5 = _25.0;
_4.1 = [_1,_2,_8,_3];
_33.fld3.2.0 = !_25.4;
_33.fld4.0.1 = [_14.1,_14.1,_14.1];
_10 = Adt44::Variant2 { fld0: _33.fld4.0.1 };
_33.fld2 = _29.1 as f32;
_34.0.0 = -_25.0;
_7 = (_4.1, _4.0);
_25.2 = _3;
_5 = _1 | _3;
_33.fld2 = _12 as f32;
Call(_10 = fn18(_7, _5), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
_27 = core::ptr::addr_of_mut!(_33.fld4);
_33.fld1 = core::ptr::addr_of!(_12);
_33.fld4.0 = ((*_16), _22);
_33.fld3.0 = _29.0;
_9 = -_17;
_33.fld4.1 = _4.1;
_35.0 = _25.3 as i128;
_35.1 = _14.1;
RET = [_14.1,_14.1,_14.1];
_33.fld3.2 = (_29.2.0,);
_11 = Adt41::Variant2 { fld0: _33.fld4,fld1: 17570915494942828970_usize };
_35 = (_33.fld5, _14.1, _8, _14.3, _33.fld3.2.0);
_28 = Field::<i64>(Variant(_10, 1), 0) as f64;
_34.0.1 = [_35.1,_35.1,_35.1];
_8 = !_25.2;
_34.0.1 = [_14.1,_35.1,_35.1];
_14.2 = _25.2;
_23 = _34.0.0;
Goto(bb15)
}
bb15 = {
Call(_41 = dump_var(12_usize, 22_usize, Move(_22), 19_usize, Move(_19), 24_usize, Move(_24), 12_usize, Move(_12)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_41 = dump_var(12_usize, 8_usize, Move(_8), 1_usize, Move(_1), 3_usize, Move(_3), 4_usize, Move(_4)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_41 = dump_var(12_usize, 14_usize, Move(_14), 9_usize, Move(_9), 42_usize, _42, 42_usize, _42), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn13(mut _1: [u16; 4],mut _2: [u16; 4],mut _3: &'static [u16; 4],mut _4: u16,mut _5: ([u16; 4], [u16; 4]),mut _6: u16,mut _7: u16,mut _8: ([u16; 4], [u16; 4]),mut _9: u16,mut _10: u16,mut _11: [u16; 4]) -> i64 {
mir! {
type RET = i64;
let _12: ([u16; 4], (i128, [char; 3]));
let _13: i32;
let _14: i128;
let _15: Adt55;
let _16: (u8, i64, (u32,));
let _17: Adt43;
let _18: ((i128, [char; 3]), [u16; 4]);
let _19: ([u16; 4], (i128, [char; 3]));
let _20: bool;
let _21: Adt44;
let _22: i128;
let _23: Adt52;
let _24: bool;
let _25: Adt51;
let _26: bool;
let _27: [char; 3];
let _28: [char; 1];
let _29: [char; 3];
let _30: ((i128, [char; 3]), [u16; 4]);
let _31: Adt48;
let _32: [char; 3];
let _33: i128;
let _34: bool;
let _35: (i16, char);
let _36: f64;
let _37: i32;
let _38: [i8; 2];
let _39: u8;
let _40: isize;
let _41: char;
let _42: ();
let _43: ();
{
RET = -(-8212223028698719575_i64);
_9 = _4 | _10;
_5.1 = [_9,_7,_7,_9];
_9 = (-9223372036854775808_isize) as u16;
_8 = (_11, _1);
RET = '\u{93333}' as i64;
_8.1 = _1;
RET = -(-6222007037979913587_i64);
_9 = !_4;
_11 = [_4,_7,_10,_4];
_8 = (_5.0, _5.0);
_8.1 = [_6,_7,_6,_7];
_5.0 = [_4,_4,_4,_9];
RET = !(-3920393617492037786_i64);
_3 = &_8.1;
_5.1 = [_10,_10,_4,_9];
_12.1.0 = 4172513702630038585_usize as i128;
_4 = 35_i8 as u16;
_8.0 = [_6,_7,_7,_10];
_14 = !_12.1.0;
_1 = [_10,_9,_6,_6];
_15.fld0.2 = !_6;
Call(_12.1.0 = core::intrinsics::transmute(_14), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_8 = _5;
_13 = 2040356978_i32;
_14 = !_12.1.0;
_9 = _7;
_13 = (-1844132234_i32) - (-362915248_i32);
RET = (-111_isize) as i64;
RET = (-17035_i16) as i64;
_3 = &_5.1;
_12.1.1 = ['\u{1090a4}','\u{d0dfe}','\u{5af3d}'];
_5.0 = _8.1;
_8.0 = [_7,_15.fld0.2,_10,_15.fld0.2];
_7 = _10;
_5.1 = [_15.fld0.2,_15.fld0.2,_9,_10];
_3 = &_5.1;
_14 = _12.1.0;
_15.fld0.3 = true;
_4 = _9;
_15.fld0 = (_14, '\u{10d994}', _7, false, 978046286_u32);
RET = !6846819814371010128_i64;
_12.0 = [_10,_9,_10,_15.fld0.2];
_2 = [_10,_9,_7,_4];
_5.0 = _1;
_4 = !_7;
Goto(bb2)
}
bb2 = {
_16.1 = 2094778362573129787_u64 as i64;
_15.fld0.0 = _12.1.0 ^ _12.1.0;
_15.fld1 = [78_i8,6_i8];
_16.1 = 74_i8 as i64;
_16.2.0 = RET as u32;
_18.0.0 = !_15.fld0.0;
_8.1 = [_15.fld0.2,_6,_4,_10];
_7 = _6 * _15.fld0.2;
_13 = (-1225572942_i32);
RET = -_16.1;
_16.1 = RET;
_18.0 = (_15.fld0.0, _12.1.1);
_12.1.0 = _14;
_5 = _8;
_15.fld0.4 = !_16.2.0;
_20 = !_15.fld0.3;
_23.fld2.fld0 = [_15.fld0.1];
_3 = &_8.0;
_18.0 = (_12.1.0, _12.1.1);
_19.1.1 = [_15.fld0.1,_15.fld0.1,_15.fld0.1];
_23.fld5 = core::ptr::addr_of_mut!(_16.2);
_23.fld6.4 = !_16.2.0;
_6 = !_7;
_23.fld6.3 = _15.fld0.3;
_16.2.0 = _23.fld6.4;
Goto(bb3)
}
bb3 = {
_12.0 = [_15.fld0.2,_15.fld0.2,_7,_9];
_19.0 = [_9,_15.fld0.2,_15.fld0.2,_7];
_16.2 = (_15.fld0.4,);
_16.2 = (_23.fld6.4,);
_2 = (*_3);
_8.1 = [_10,_7,_10,_7];
_23.fld6.1 = _15.fld0.1;
_19.1.0 = _15.fld0.1 as i128;
_23.fld2.fld1.1 = [_15.fld0.1,_23.fld6.1,_23.fld6.1];
_17 = Adt43::Variant0 { fld0: _19.1,fld1: 27759_i16,fld2: _19.1.0 };
_15.fld0.1 = _23.fld6.1;
_7 = 16434445268028674984_usize as u16;
RET = _16.1 | _16.1;
_6 = _9 >> Field::<(i128, [char; 3])>(Variant(_17, 0), 0).0;
_21 = Adt44::Variant1 { fld0: RET };
_18.1 = [_4,_9,_9,_10];
Call(_23.fld2 = fn14(_10, _18, _23.fld6.1, Field::<(i128, [char; 3])>(Variant(_17, 0), 0), _12, Move(_15), _19.0, _19.0, _9, _5.0, _10, _19.0, _6, Field::<i128>(Variant(_17, 0), 2)), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_17 = Adt43::Variant1 { fld0: _23.fld2.fld1.1,fld1: _23.fld2.fld0 };
_27 = _23.fld2.fld1.1;
_23.fld4 = core::ptr::addr_of_mut!(place!(Field::<[char; 3]>(Variant(_17, 1), 0)));
Goto(bb5)
}
bb5 = {
_15.fld0.3 = _20 | _23.fld6.3;
_23.fld7 = _16.2.0 as f64;
place!(Field::<i64>(Variant(_21, 1), 0)) = _23.fld6.3 as i64;
_12.1 = (_19.1.0, _27);
_5.0 = [_4,_6,_10,_6];
_23.fld6.4 = 88_i8 as u32;
_23.fld2.fld1.3 = 39_u8 * 90_u8;
_24 = _20;
_15.fld0.4 = !_16.2.0;
_30.0.0 = 33171505365907993412915798291246982170_u128 as i128;
_30.0.0 = _12.1.0;
_5.1 = [_9,_10,_10,_10];
_23.fld6.2 = _6;
Goto(bb6)
}
bb6 = {
_25 = Adt51::Variant1 { fld0: 183120768528800986066061788615811787199_u128,fld1: _23.fld2.fld1.0 };
_14 = _30.0.0;
SetDiscriminant(_21, 2);
_28 = [_23.fld6.1];
_22 = _23.fld2.fld1.3 as i128;
_20 = _15.fld0.3;
_15.fld0.1 = Field::<char>(Variant(_25, 1), 1);
_15.fld0.1 = _23.fld2.fld1.0;
match _13 {
0 => bb5,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb7,
5 => bb8,
340282366920938463463374607430542638514 => bb10,
_ => bb9
}
}
bb7 = {
_15.fld0.3 = _20 | _23.fld6.3;
_23.fld7 = _16.2.0 as f64;
place!(Field::<i64>(Variant(_21, 1), 0)) = _23.fld6.3 as i64;
_12.1 = (_19.1.0, _27);
_5.0 = [_4,_6,_10,_6];
_23.fld6.4 = 88_i8 as u32;
_23.fld2.fld1.3 = 39_u8 * 90_u8;
_24 = _20;
_15.fld0.4 = !_16.2.0;
_30.0.0 = 33171505365907993412915798291246982170_u128 as i128;
_30.0.0 = _12.1.0;
_5.1 = [_9,_10,_10,_10];
_23.fld6.2 = _6;
Goto(bb6)
}
bb8 = {
_8 = _5;
_13 = 2040356978_i32;
_14 = !_12.1.0;
_9 = _7;
_13 = (-1844132234_i32) - (-362915248_i32);
RET = (-111_isize) as i64;
RET = (-17035_i16) as i64;
_3 = &_5.1;
_12.1.1 = ['\u{1090a4}','\u{d0dfe}','\u{5af3d}'];
_5.0 = _8.1;
_8.0 = [_7,_15.fld0.2,_10,_15.fld0.2];
_7 = _10;
_5.1 = [_15.fld0.2,_15.fld0.2,_9,_10];
_3 = &_5.1;
_14 = _12.1.0;
_15.fld0.3 = true;
_4 = _9;
_15.fld0 = (_14, '\u{10d994}', _7, false, 978046286_u32);
RET = !6846819814371010128_i64;
_12.0 = [_10,_9,_10,_15.fld0.2];
_2 = [_10,_9,_7,_4];
_5.0 = _1;
_4 = !_7;
Goto(bb2)
}
bb9 = {
_16.1 = 2094778362573129787_u64 as i64;
_15.fld0.0 = _12.1.0 ^ _12.1.0;
_15.fld1 = [78_i8,6_i8];
_16.1 = 74_i8 as i64;
_16.2.0 = RET as u32;
_18.0.0 = !_15.fld0.0;
_8.1 = [_15.fld0.2,_6,_4,_10];
_7 = _6 * _15.fld0.2;
_13 = (-1225572942_i32);
RET = -_16.1;
_16.1 = RET;
_18.0 = (_15.fld0.0, _12.1.1);
_12.1.0 = _14;
_5 = _8;
_15.fld0.4 = !_16.2.0;
_20 = !_15.fld0.3;
_23.fld2.fld0 = [_15.fld0.1];
_3 = &_8.0;
_18.0 = (_12.1.0, _12.1.1);
_19.1.1 = [_15.fld0.1,_15.fld0.1,_15.fld0.1];
_23.fld5 = core::ptr::addr_of_mut!(_16.2);
_23.fld6.4 = !_16.2.0;
_6 = !_7;
_23.fld6.3 = _15.fld0.3;
_16.2.0 = _23.fld6.4;
Goto(bb3)
}
bb10 = {
_31.fld1 = (_23.fld6.1, _12.1.1, _23.fld2.fld1.2, _23.fld2.fld1.3);
_19.1 = _12.1;
_30.1 = _5.0;
_23.fld3.0 = !_19.1.0;
_8.1 = [_10,_10,_9,_4];
place!(Field::<[char; 1]>(Variant(_17, 1), 1)) = [_23.fld2.fld1.0];
_18.1 = [_6,_23.fld6.2,_9,_10];
_23.fld3.1 = _31.fld1.1;
_23.fld2.fld1.3 = !_31.fld1.3;
_35 = (25153_i16, _23.fld6.1);
_31.fld1 = (_23.fld6.1, _12.1.1, _23.fld2.fld1.2, _23.fld2.fld1.3);
_23.fld6.0 = _15.fld0.3 as i128;
place!(Field::<u128>(Variant(_25, 1), 0)) = _14 as u128;
match _35.0 {
0 => bb11,
1 => bb12,
25153 => bb14,
_ => bb13
}
}
bb11 = {
_16.1 = 2094778362573129787_u64 as i64;
_15.fld0.0 = _12.1.0 ^ _12.1.0;
_15.fld1 = [78_i8,6_i8];
_16.1 = 74_i8 as i64;
_16.2.0 = RET as u32;
_18.0.0 = !_15.fld0.0;
_8.1 = [_15.fld0.2,_6,_4,_10];
_7 = _6 * _15.fld0.2;
_13 = (-1225572942_i32);
RET = -_16.1;
_16.1 = RET;
_18.0 = (_15.fld0.0, _12.1.1);
_12.1.0 = _14;
_5 = _8;
_15.fld0.4 = !_16.2.0;
_20 = !_15.fld0.3;
_23.fld2.fld0 = [_15.fld0.1];
_3 = &_8.0;
_18.0 = (_12.1.0, _12.1.1);
_19.1.1 = [_15.fld0.1,_15.fld0.1,_15.fld0.1];
_23.fld5 = core::ptr::addr_of_mut!(_16.2);
_23.fld6.4 = !_16.2.0;
_6 = !_7;
_23.fld6.3 = _15.fld0.3;
_16.2.0 = _23.fld6.4;
Goto(bb3)
}
bb12 = {
_25 = Adt51::Variant1 { fld0: 183120768528800986066061788615811787199_u128,fld1: _23.fld2.fld1.0 };
_14 = _30.0.0;
SetDiscriminant(_21, 2);
_28 = [_23.fld6.1];
_22 = _23.fld2.fld1.3 as i128;
_20 = _15.fld0.3;
_15.fld0.1 = Field::<char>(Variant(_25, 1), 1);
_15.fld0.1 = _23.fld2.fld1.0;
match _13 {
0 => bb5,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb7,
5 => bb8,
340282366920938463463374607430542638514 => bb10,
_ => bb9
}
}
bb13 = {
_8 = _5;
_13 = 2040356978_i32;
_14 = !_12.1.0;
_9 = _7;
_13 = (-1844132234_i32) - (-362915248_i32);
RET = (-111_isize) as i64;
RET = (-17035_i16) as i64;
_3 = &_5.1;
_12.1.1 = ['\u{1090a4}','\u{d0dfe}','\u{5af3d}'];
_5.0 = _8.1;
_8.0 = [_7,_15.fld0.2,_10,_15.fld0.2];
_7 = _10;
_5.1 = [_15.fld0.2,_15.fld0.2,_9,_10];
_3 = &_5.1;
_14 = _12.1.0;
_15.fld0.3 = true;
_4 = _9;
_15.fld0 = (_14, '\u{10d994}', _7, false, 978046286_u32);
RET = !6846819814371010128_i64;
_12.0 = [_10,_9,_10,_15.fld0.2];
_2 = [_10,_9,_7,_4];
_5.0 = _1;
_4 = !_7;
Goto(bb2)
}
bb14 = {
_18.0.0 = _12.1.0 | _14;
_12.0 = [_6,_6,_23.fld6.2,_6];
_23.fld2 = Adt48 { fld0: Field::<[char; 1]>(Variant(_17, 1), 1),fld1: _31.fld1 };
_19.1.1 = [_15.fld0.1,_31.fld1.0,Field::<char>(Variant(_25, 1), 1)];
_15.fld0 = _23.fld6;
_37 = _13;
_15.fld0.1 = _23.fld6.1;
_15.fld1 = [(-2_i8),(-81_i8)];
Goto(bb15)
}
bb15 = {
Call(_42 = dump_var(13_usize, 37_usize, Move(_37), 4_usize, Move(_4), 11_usize, Move(_11), 9_usize, Move(_9)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_42 = dump_var(13_usize, 6_usize, Move(_6), 8_usize, Move(_8), 13_usize, Move(_13), 5_usize, Move(_5)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_42 = dump_var(13_usize, 35_usize, Move(_35), 28_usize, Move(_28), 19_usize, Move(_19), 43_usize, _43), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn14(mut _1: u16,mut _2: ((i128, [char; 3]), [u16; 4]),mut _3: char,mut _4: (i128, [char; 3]),mut _5: ([u16; 4], (i128, [char; 3])),mut _6: Adt55,mut _7: [u16; 4],mut _8: [u16; 4],mut _9: u16,mut _10: [u16; 4],mut _11: u16,mut _12: [u16; 4],mut _13: u16,mut _14: i128) -> Adt48 {
mir! {
type RET = Adt48;
let _15: Adt55;
let _16: (u32,);
let _17: isize;
let _18: f64;
let _19: [char; 1];
let _20: Adt49;
let _21: Adt41;
let _22: i8;
let _23: u16;
let _24: usize;
let _25: ([u16; 4], (i128, [char; 3]));
let _26: Adt51;
let _27: u32;
let _28: (i16, char);
let _29: isize;
let _30: (i128, [char; 3]);
let _31: f64;
let _32: isize;
let _33: (i128, [char; 3]);
let _34: Adt43;
let _35: i64;
let _36: [u16; 4];
let _37: [char; 3];
let _38: i8;
let _39: i64;
let _40: [char; 3];
let _41: Adt50;
let _42: f64;
let _43: *mut ((i128, [char; 3]), [u16; 4]);
let _44: *mut i128;
let _45: &'static [u16; 4];
let _46: isize;
let _47: *mut (u32,);
let _48: (i128, char, u16, bool, u32);
let _49: Adt57;
let _50: u128;
let _51: Adt47;
let _52: ([u16; 4], [u16; 4]);
let _53: (i128, char, u16, bool, u32);
let _54: ();
let _55: ();
{
_4.1 = [_3,_3,_6.fld0.1];
RET.fld1.3 = 118_u8 & 246_u8;
_2.0.1 = [_3,_6.fld0.1,_3];
_6.fld0.0 = _4.0 * _14;
RET.fld0 = [_6.fld0.1];
Goto(bb1)
}
bb1 = {
_5.1.1 = [_3,_6.fld0.1,_3];
_8 = [_11,_6.fld0.2,_13,_13];
_2.0.0 = _4.0 * _6.fld0.0;
RET.fld1.3 = 7452941897556993555_i64 as u8;
_5.1 = _4;
RET.fld0 = [_6.fld0.1];
Goto(bb2)
}
bb2 = {
_13 = (-9223372036854775808_isize) as u16;
_5.1 = (_2.0.0, _4.1);
RET.fld1.3 = 41_u8;
RET.fld1.3 = _5.1.0 as u8;
_2.0 = (_5.1.0, _5.1.1);
_4.0 = _14;
RET.fld0 = [_6.fld0.1];
_6.fld0 = (_4.0, _3, _11, false, 510573150_u32);
_6.fld0.1 = _3;
_2.0.0 = _14;
_5.1.1 = [_6.fld0.1,_3,_3];
Goto(bb3)
}
bb3 = {
_5 = (_8, _4);
_1 = _6.fld0.2;
RET.fld1.1 = [_3,_3,_3];
_1 = _6.fld0.3 as u16;
_6.fld0.0 = !_14;
_6.fld1 = [(-70_i8),53_i8];
RET.fld1.0 = _3;
_2.0.1 = [_3,_6.fld0.1,_6.fld0.1];
Goto(bb4)
}
bb4 = {
RET.fld1.0 = _6.fld0.1;
_6.fld0 = (_4.0, RET.fld1.0, _11, true, 3958427457_u32);
_15.fld0.0 = -_6.fld0.0;
_15 = Move(_6);
_7 = _2.1;
_6.fld0.4 = _15.fld0.4;
_15.fld0.3 = !true;
_2 = (_4, _7);
_1 = 4413769266900204859_u64 as u16;
_15.fld0.3 = !true;
_15.fld0.1 = RET.fld1.0;
_5.1.0 = !_4.0;
_6.fld0.2 = !_9;
match _15.fld0.4 {
0 => bb1,
1 => bb2,
2 => bb3,
3958427457 => bb6,
_ => bb5
}
}
bb5 = {
_5.1.1 = [_3,_6.fld0.1,_3];
_8 = [_11,_6.fld0.2,_13,_13];
_2.0.0 = _4.0 * _6.fld0.0;
RET.fld1.3 = 7452941897556993555_i64 as u8;
_5.1 = _4;
RET.fld0 = [_6.fld0.1];
Goto(bb2)
}
bb6 = {
_8 = _12;
_2 = (_4, _10);
_15.fld0.3 = false;
RET.fld1.1 = _2.0.1;
_5.1.0 = 304111496314037095_i64 as i128;
_1 = _11 ^ _15.fld0.2;
_6.fld0.1 = RET.fld1.0;
_5.1 = (_14, RET.fld1.1);
_7 = [_9,_1,_11,_6.fld0.2];
_5.1.1 = _4.1;
_22 = RET.fld1.0 as i8;
_2.1 = _8;
_19 = [_3];
match _6.fld0.4 {
0 => bb3,
3958427457 => bb7,
_ => bb5
}
}
bb7 = {
_4.0 = 73713357275164185091090817160793899291_u128 as i128;
_6.fld1 = _15.fld1;
RET.fld1.3 = 229_u8 << _11;
RET.fld0 = [RET.fld1.0];
_7 = [_6.fld0.2,_11,_1,_9];
_24 = 7502034684067660808_usize >> _14;
_25.0 = [_9,_15.fld0.2,_9,_15.fld0.2];
_7 = [_9,_6.fld0.2,_9,_9];
_1 = _11;
_2.0.0 = 139395895589961061696771378201024403952_u128 as i128;
_16 = (_15.fld0.4,);
RET.fld1.0 = _15.fld0.1;
_18 = _22 as f64;
_11 = _9 + _1;
_14 = _5.1.0 & _5.1.0;
_6.fld0.2 = 1778719443_i32 as u16;
_17 = _24 as isize;
_25 = _5;
_5.0 = _2.1;
_21 = Adt41::Variant1 { fld0: 1369290653_i32 };
RET.fld0 = _19;
_16.0 = RET.fld1.3 as u32;
RET.fld1.3 = !168_u8;
_11 = 13449459326491550670_u64 as u16;
Goto(bb8)
}
bb8 = {
_22 = _9 as i8;
_6.fld0.1 = RET.fld1.0;
_25.1.1 = [_3,RET.fld1.0,RET.fld1.0];
_27 = _15.fld0.4;
_6.fld0 = (_14, RET.fld1.0, _9, _15.fld0.3, _16.0);
_23 = _6.fld0.2 - _9;
_3 = _6.fld0.1;
_9 = (-505066188068435095_i64) as u16;
RET.fld1.0 = _6.fld0.1;
_23 = _1;
_15.fld0 = (_6.fld0.0, RET.fld1.0, _1, _6.fld0.3, _6.fld0.4);
place!(Field::<i32>(Variant(_21, 1), 0)) = (-2142363084_i32);
_2.0.0 = !_6.fld0.0;
_6 = Adt55 { fld0: _15.fld0,fld1: _15.fld1 };
match _27 {
0 => bb2,
1 => bb9,
2 => bb10,
3 => bb11,
4 => bb12,
5 => bb13,
6 => bb14,
3958427457 => bb16,
_ => bb15
}
}
bb9 = {
_4.0 = 73713357275164185091090817160793899291_u128 as i128;
_6.fld1 = _15.fld1;
RET.fld1.3 = 229_u8 << _11;
RET.fld0 = [RET.fld1.0];
_7 = [_6.fld0.2,_11,_1,_9];
_24 = 7502034684067660808_usize >> _14;
_25.0 = [_9,_15.fld0.2,_9,_15.fld0.2];
_7 = [_9,_6.fld0.2,_9,_9];
_1 = _11;
_2.0.0 = 139395895589961061696771378201024403952_u128 as i128;
_16 = (_15.fld0.4,);
RET.fld1.0 = _15.fld0.1;
_18 = _22 as f64;
_11 = _9 + _1;
_14 = _5.1.0 & _5.1.0;
_6.fld0.2 = 1778719443_i32 as u16;
_17 = _24 as isize;
_25 = _5;
_5.0 = _2.1;
_21 = Adt41::Variant1 { fld0: 1369290653_i32 };
RET.fld0 = _19;
_16.0 = RET.fld1.3 as u32;
RET.fld1.3 = !168_u8;
_11 = 13449459326491550670_u64 as u16;
Goto(bb8)
}
bb10 = {
_8 = _12;
_2 = (_4, _10);
_15.fld0.3 = false;
RET.fld1.1 = _2.0.1;
_5.1.0 = 304111496314037095_i64 as i128;
_1 = _11 ^ _15.fld0.2;
_6.fld0.1 = RET.fld1.0;
_5.1 = (_14, RET.fld1.1);
_7 = [_9,_1,_11,_6.fld0.2];
_5.1.1 = _4.1;
_22 = RET.fld1.0 as i8;
_2.1 = _8;
_19 = [_3];
match _6.fld0.4 {
0 => bb3,
3958427457 => bb7,
_ => bb5
}
}
bb11 = {
_5.1.1 = [_3,_6.fld0.1,_3];
_8 = [_11,_6.fld0.2,_13,_13];
_2.0.0 = _4.0 * _6.fld0.0;
RET.fld1.3 = 7452941897556993555_i64 as u8;
_5.1 = _4;
RET.fld0 = [_6.fld0.1];
Goto(bb2)
}
bb12 = {
RET.fld1.0 = _6.fld0.1;
_6.fld0 = (_4.0, RET.fld1.0, _11, true, 3958427457_u32);
_15.fld0.0 = -_6.fld0.0;
_15 = Move(_6);
_7 = _2.1;
_6.fld0.4 = _15.fld0.4;
_15.fld0.3 = !true;
_2 = (_4, _7);
_1 = 4413769266900204859_u64 as u16;
_15.fld0.3 = !true;
_15.fld0.1 = RET.fld1.0;
_5.1.0 = !_4.0;
_6.fld0.2 = !_9;
match _15.fld0.4 {
0 => bb1,
1 => bb2,
2 => bb3,
3958427457 => bb6,
_ => bb5
}
}
bb13 = {
_5 = (_8, _4);
_1 = _6.fld0.2;
RET.fld1.1 = [_3,_3,_3];
_1 = _6.fld0.3 as u16;
_6.fld0.0 = !_14;
_6.fld1 = [(-70_i8),53_i8];
RET.fld1.0 = _3;
_2.0.1 = [_3,_6.fld0.1,_6.fld0.1];
Goto(bb4)
}
bb14 = {
_13 = (-9223372036854775808_isize) as u16;
_5.1 = (_2.0.0, _4.1);
RET.fld1.3 = 41_u8;
RET.fld1.3 = _5.1.0 as u8;
_2.0 = (_5.1.0, _5.1.1);
_4.0 = _14;
RET.fld0 = [_6.fld0.1];
_6.fld0 = (_4.0, _3, _11, false, 510573150_u32);
_6.fld0.1 = _3;
_2.0.0 = _14;
_5.1.1 = [_6.fld0.1,_3,_3];
Goto(bb3)
}
bb15 = {
_5.1.1 = [_3,_6.fld0.1,_3];
_8 = [_11,_6.fld0.2,_13,_13];
_2.0.0 = _4.0 * _6.fld0.0;
RET.fld1.3 = 7452941897556993555_i64 as u8;
_5.1 = _4;
RET.fld0 = [_6.fld0.1];
Goto(bb2)
}
bb16 = {
_15.fld0.3 = !_6.fld0.3;
_2 = (_4, _10);
_28.0 = 5811_i16 - (-17340_i16);
_27 = 7676624209620566255_i64 as u32;
_29 = _17 | _17;
_5.0 = _7;
_5.1.1 = _2.0.1;
_5 = (_7, _4);
_16.0 = Field::<i32>(Variant(_21, 1), 0) as u32;
Goto(bb17)
}
bb17 = {
_25 = (_2.1, _2.0);
_33.0 = !_15.fld0.0;
_28 = ((-11007_i16), RET.fld1.0);
RET.fld1.3 = !194_u8;
_2.0.1 = [_6.fld0.1,_3,RET.fld1.0];
_27 = _6.fld0.4;
_27 = _15.fld0.4 >> _6.fld0.0;
_23 = _24 as u16;
_2.1 = [_23,_1,_15.fld0.2,_15.fld0.2];
_31 = _18;
_25 = (_8, _5.1);
RET.fld0 = [_28.1];
_9 = _15.fld0.2;
_30 = _4;
Goto(bb18)
}
bb18 = {
_35 = _15.fld0.3 as i64;
Call(_17 = core::intrinsics::transmute(_25.0), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
_33.1 = [_15.fld0.1,_15.fld0.1,_28.1];
_35 = _15.fld0.0 as i64;
_16.0 = _15.fld0.4 << _27;
_6.fld0 = (_15.fld0.0, _28.1, _1, _15.fld0.3, _27);
_1 = Field::<i32>(Variant(_21, 1), 0) as u16;
_2.1 = [_15.fld0.2,_23,_23,_9];
_17 = _29 * _29;
_5.1 = (_6.fld0.0, _33.1);
_9 = _22 as u16;
RET.fld1.1 = [RET.fld1.0,RET.fld1.0,_6.fld0.1];
_39 = Field::<i32>(Variant(_21, 1), 0) as i64;
_32 = Field::<i32>(Variant(_21, 1), 0) as isize;
_28 = ((-5695_i16), _6.fld0.1);
RET.fld1.1 = [_6.fld0.1,_15.fld0.1,_15.fld0.1];
_21 = Adt41::Variant1 { fld0: (-41278592_i32) };
_16 = (_15.fld0.4,);
place!(Field::<i32>(Variant(_21, 1), 0)) = !(-1482664305_i32);
Goto(bb20)
}
bb20 = {
_28.0 = _16.0 as i16;
_45 = &_5.0;
RET.fld1.3 = !79_u8;
_7 = [_15.fld0.2,_6.fld0.2,_9,_9];
_34 = Adt43::Variant1 { fld0: _5.1.1,fld1: RET.fld0 };
place!(Field::<i32>(Variant(_21, 1), 0)) = _31 as i32;
_30 = _25.1;
Call(RET.fld1 = fn15(_25.1, _25.1.1, _15.fld0.0), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
_2.0.1 = _30.1;
RET.fld0 = [_28.1];
_41.fld0.3 = RET.fld1.3;
_15.fld0.4 = _6.fld0.4;
_19 = RET.fld0;
_42 = _31;
SetDiscriminant(_34, 1);
RET.fld1.0 = _28.1;
_33 = _4;
_48.1 = _3;
_25 = _5;
_48.2 = !_23;
place!(Field::<[char; 3]>(Variant(_34, 1), 0)) = [_28.1,RET.fld1.0,_15.fld0.1];
RET.fld1.1 = [_3,_15.fld0.1,_28.1];
_6.fld0 = (_5.1.0, _28.1, _9, _15.fld0.3, _15.fld0.4);
Goto(bb22)
}
bb22 = {
Call(_54 = dump_var(14_usize, 35_usize, Move(_35), 1_usize, Move(_1), 19_usize, Move(_19), 14_usize, Move(_14)), ReturnTo(bb23), UnwindUnreachable())
}
bb23 = {
Call(_54 = dump_var(14_usize, 9_usize, Move(_9), 39_usize, Move(_39), 16_usize, Move(_16), 30_usize, Move(_30)), ReturnTo(bb24), UnwindUnreachable())
}
bb24 = {
Call(_54 = dump_var(14_usize, 32_usize, Move(_32), 28_usize, Move(_28), 13_usize, Move(_13), 11_usize, Move(_11)), ReturnTo(bb25), UnwindUnreachable())
}
bb25 = {
Call(_54 = dump_var(14_usize, 10_usize, Move(_10), 7_usize, Move(_7), 55_usize, _55, 55_usize, _55), ReturnTo(bb26), UnwindUnreachable())
}
bb26 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn15(mut _1: (i128, [char; 3]),mut _2: [char; 3],mut _3: i128) -> (char, [char; 3], *const f32, u8) {
mir! {
type RET = (char, [char; 3], *const f32, u8);
let _4: Adt56;
let _5: ();
let _6: ();
{
RET.1 = _1.1;
_1.0 = -_3;
RET.3 = !111_u8;
RET.0 = '\u{b7559}';
RET.3 = 9_u8;
RET.0 = '\u{b4164}';
_2 = [RET.0,RET.0,RET.0];
RET.3 = 3_u8;
RET.3 = 126_u8 - 114_u8;
RET.3 = 154_u8 >> _3;
Call(RET.2 = fn16(RET.3, _1, _1.1, _1.0, RET.1, RET.1, RET.1, _1.1, _3), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_1.1 = RET.1;
RET.1 = _1.1;
_3 = _1.0;
_1.1 = [RET.0,RET.0,RET.0];
Goto(bb2)
}
bb2 = {
Call(_5 = dump_var(15_usize, 2_usize, Move(_2), 6_usize, _6, 6_usize, _6, 6_usize, _6), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn16(mut _1: u8,mut _2: (i128, [char; 3]),mut _3: [char; 3],mut _4: i128,mut _5: [char; 3],mut _6: [char; 3],mut _7: [char; 3],mut _8: [char; 3],mut _9: i128) -> *const f32 {
mir! {
type RET = *const f32;
let _10: ([u16; 4], [u16; 4]);
let _11: u8;
let _12: Adt47;
let _13: (u32,);
let _14: ([u16; 4], (i128, [char; 3]));
let _15: i8;
let _16: Adt42;
let _17: isize;
let _18: (u8, i64, (u32,));
let _19: [char; 1];
let _20: [i8; 2];
let _21: [char; 1];
let _22: (i128, [char; 3]);
let _23: u128;
let _24: isize;
let _25: i8;
let _26: [char; 3];
let _27: *mut i128;
let _28: u8;
let _29: (u32,);
let _30: (u32,);
let _31: isize;
let _32: *mut [char; 3];
let _33: *mut u8;
let _34: (u32,);
let _35: bool;
let _36: bool;
let _37: f32;
let _38: i32;
let _39: char;
let _40: ();
let _41: ();
{
_7 = _6;
_10.0 = [16732_u16,9838_u16,15105_u16,10462_u16];
_5 = ['\u{1cde7}','\u{8a6ab}','\u{10d83e}'];
_11 = _1 | _1;
_7 = ['\u{8623}','\u{fcbd3}','\u{91ab4}'];
Goto(bb1)
}
bb1 = {
_6 = ['\u{cdea3}','\u{cf942}','\u{100d81}'];
_7 = _2.1;
_12 = Adt47::Variant0 { fld0: (-2755723156981470035_i64),fld1: 2075971802_i32,fld2: 41212_u16 };
place!(Field::<u16>(Variant(_12, 0), 2)) = 34903_u16 << _4;
_11 = !_1;
_7 = ['\u{eb368}','\u{d3967}','\u{40813}'];
_4 = _9;
_10.1 = [Field::<u16>(Variant(_12, 0), 2),Field::<u16>(Variant(_12, 0), 2),Field::<u16>(Variant(_12, 0), 2),Field::<u16>(Variant(_12, 0), 2)];
_13.0 = 3912593691_u32;
place!(Field::<i64>(Variant(_12, 0), 0)) = 7125600080669372318_i64 | 3221392024224431425_i64;
_2.1 = ['\u{1351c}','\u{8203d}','\u{1e657}'];
_12 = Adt47::Variant0 { fld0: 933447059037157564_i64,fld1: 2097955214_i32,fld2: 1678_u16 };
match _13.0 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
6 => bb8,
3912593691 => bb10,
_ => bb9
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_4 = !_9;
_11 = _1 & _1;
_14 = (_10.1, _2);
match _13.0 {
0 => bb1,
1 => bb7,
2 => bb3,
3912593691 => bb11,
_ => bb5
}
}
bb11 = {
_14.1.0 = _9;
_10.1 = _14.0;
_11 = !_1;
place!(Field::<u16>(Variant(_12, 0), 2)) = !64652_u16;
place!(Field::<i32>(Variant(_12, 0), 1)) = -(-1886131788_i32);
place!(Field::<i64>(Variant(_12, 0), 0)) = (-5381304017179728513_i64);
Goto(bb12)
}
bb12 = {
_14.1 = (_2.0, _3);
_5 = ['\u{13267}','\u{f978f}','\u{bd606}'];
_10.0 = [Field::<u16>(Variant(_12, 0), 2),Field::<u16>(Variant(_12, 0), 2),Field::<u16>(Variant(_12, 0), 2),Field::<u16>(Variant(_12, 0), 2)];
_10.0 = [Field::<u16>(Variant(_12, 0), 2),Field::<u16>(Variant(_12, 0), 2),Field::<u16>(Variant(_12, 0), 2),Field::<u16>(Variant(_12, 0), 2)];
_9 = _4 & _4;
_2 = (_14.1.0, _8);
place!(Field::<i64>(Variant(_12, 0), 0)) = -4941948247384774607_i64;
place!(Field::<i32>(Variant(_12, 0), 1)) = 7860929141785696416_u64 as i32;
_18.0 = _1 ^ _1;
_10 = (_14.0, _14.0);
_2 = (_4, _3);
_7 = _3;
_18.2 = _13;
_14 = (_10.0, _2);
SetDiscriminant(_12, 1);
_18 = (_1, 6775950587373707191_i64, _13);
match _18.1 {
0 => bb11,
1 => bb9,
6775950587373707191 => bb13,
_ => bb8
}
}
bb13 = {
place!(Field::<(u8, i64, (u32,))>(Variant(_12, 1), 4)).2.0 = _13.0;
_18.2.0 = (-1875381854_i32) as u32;
_1 = (-347162514_i32) as u8;
_7 = ['\u{e9406}','\u{eadae}','\u{aa836}'];
place!(Field::<(u8, i64, (u32,))>(Variant(_12, 1), 4)) = (_11, _18.1, _13);
_22 = _14.1;
_5 = ['\u{64b45}','\u{4612b}','\u{71512}'];
place!(Field::<usize>(Variant(_12, 1), 2)) = 1_usize;
_18 = (_11, Field::<(u8, i64, (u32,))>(Variant(_12, 1), 4).1, _13);
_10.1 = _10.0;
_18 = (Field::<(u8, i64, (u32,))>(Variant(_12, 1), 4).0, Field::<(u8, i64, (u32,))>(Variant(_12, 1), 4).1, _13);
place!(Field::<(u8, i64, (u32,))>(Variant(_12, 1), 4)).2 = _18.2;
place!(Field::<(i128, [char; 3])>(Variant(_12, 1), 5)).0 = _2.0 | _4;
place!(Field::<(char, [char; 3], *const f32, u8)>(Variant(_12, 1), 0)).1 = ['\u{688d7}','\u{65906}','\u{f155e}'];
place!(Field::<(char, [char; 3], *const f32, u8)>(Variant(_12, 1), 0)).3 = !Field::<(u8, i64, (u32,))>(Variant(_12, 1), 4).0;
_14.1 = _2;
_2.1 = _14.1.1;
_14.1.1 = _3;
_2.0 = _14.1.0;
_15 = !110_i8;
Call(place!(Field::<(u8, i64, (u32,))>(Variant(_12, 1), 4)).1 = fn17(_22, _8, Field::<(char, [char; 3], *const f32, u8)>(Variant(_12, 1), 0).3), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
_1 = Field::<(u8, i64, (u32,))>(Variant(_12, 1), 4).0;
_17 = (-31_isize) - (-9223372036854775808_isize);
_18.1 = -Field::<(u8, i64, (u32,))>(Variant(_12, 1), 4).1;
place!(Field::<(u8, i64, (u32,))>(Variant(_12, 1), 4)).0 = _11 | _1;
_12 = Adt47::Variant0 { fld0: _18.1,fld1: 622251846_i32,fld2: 19300_u16 };
match _18.2.0 {
0 => bb12,
1 => bb15,
3912593691 => bb17,
_ => bb16
}
}
bb15 = {
_14.1.0 = _9;
_10.1 = _14.0;
_11 = !_1;
place!(Field::<u16>(Variant(_12, 0), 2)) = !64652_u16;
place!(Field::<i32>(Variant(_12, 0), 1)) = -(-1886131788_i32);
place!(Field::<i64>(Variant(_12, 0), 0)) = (-5381304017179728513_i64);
Goto(bb12)
}
bb16 = {
_14.1 = (_2.0, _3);
_5 = ['\u{13267}','\u{f978f}','\u{bd606}'];
_10.0 = [Field::<u16>(Variant(_12, 0), 2),Field::<u16>(Variant(_12, 0), 2),Field::<u16>(Variant(_12, 0), 2),Field::<u16>(Variant(_12, 0), 2)];
_10.0 = [Field::<u16>(Variant(_12, 0), 2),Field::<u16>(Variant(_12, 0), 2),Field::<u16>(Variant(_12, 0), 2),Field::<u16>(Variant(_12, 0), 2)];
_9 = _4 & _4;
_2 = (_14.1.0, _8);
place!(Field::<i64>(Variant(_12, 0), 0)) = -4941948247384774607_i64;
place!(Field::<i32>(Variant(_12, 0), 1)) = 7860929141785696416_u64 as i32;
_18.0 = _1 ^ _1;
_10 = (_14.0, _14.0);
_2 = (_4, _3);
_7 = _3;
_18.2 = _13;
_14 = (_10.0, _2);
SetDiscriminant(_12, 1);
_18 = (_1, 6775950587373707191_i64, _13);
match _18.1 {
0 => bb11,
1 => bb9,
6775950587373707191 => bb13,
_ => bb8
}
}
bb17 = {
_5 = ['\u{102c7}','\u{f995}','\u{e03ed}'];
_19 = ['\u{101f7d}'];
_10 = (_14.0, _14.0);
_22 = (_14.1.0, _14.1.1);
_7 = ['\u{c2496}','\u{8025c}','\u{aff36}'];
_3 = ['\u{3d67b}','\u{6387f}','\u{462cf}'];
_18 = (_11, Field::<i64>(Variant(_12, 0), 0), _13);
_18.2.0 = _13.0;
_17 = 9223372036854775807_isize - 9223372036854775807_isize;
_10.1 = [45104_u16,22100_u16,32234_u16,35083_u16];
_14.1.1 = ['\u{7522}','\u{edbb8}','\u{8e199}'];
_18.1 = -Field::<i64>(Variant(_12, 0), 0);
_13.0 = _18.2.0;
_10 = (_14.0, _14.0);
_18.0 = _17 as u8;
match _13.0 {
0 => bb9,
1 => bb7,
2 => bb18,
3912593691 => bb20,
_ => bb19
}
}
bb18 = {
_14.1 = (_2.0, _3);
_5 = ['\u{13267}','\u{f978f}','\u{bd606}'];
_10.0 = [Field::<u16>(Variant(_12, 0), 2),Field::<u16>(Variant(_12, 0), 2),Field::<u16>(Variant(_12, 0), 2),Field::<u16>(Variant(_12, 0), 2)];
_10.0 = [Field::<u16>(Variant(_12, 0), 2),Field::<u16>(Variant(_12, 0), 2),Field::<u16>(Variant(_12, 0), 2),Field::<u16>(Variant(_12, 0), 2)];
_9 = _4 & _4;
_2 = (_14.1.0, _8);
place!(Field::<i64>(Variant(_12, 0), 0)) = -4941948247384774607_i64;
place!(Field::<i32>(Variant(_12, 0), 1)) = 7860929141785696416_u64 as i32;
_18.0 = _1 ^ _1;
_10 = (_14.0, _14.0);
_2 = (_4, _3);
_7 = _3;
_18.2 = _13;
_14 = (_10.0, _2);
SetDiscriminant(_12, 1);
_18 = (_1, 6775950587373707191_i64, _13);
match _18.1 {
0 => bb11,
1 => bb9,
6775950587373707191 => bb13,
_ => bb8
}
}
bb19 = {
Return()
}
bb20 = {
_5 = _8;
_10 = (_14.0, _14.0);
_6 = _8;
place!(Field::<i32>(Variant(_12, 0), 1)) = !248230964_i32;
place!(Field::<u16>(Variant(_12, 0), 2)) = !52803_u16;
_3 = _22.1;
_2 = (_14.1.0, _22.1);
_8 = _7;
_26 = _2.1;
_2.1 = ['\u{183d5}','\u{688d1}','\u{103931}'];
_2 = (_14.1.0, _6);
_25 = _15 + _15;
place!(Field::<u16>(Variant(_12, 0), 2)) = !47678_u16;
place!(Field::<i32>(Variant(_12, 0), 1)) = -1454724459_i32;
_26 = ['\u{bdb97}','\u{8780c}','\u{f07cc}'];
Goto(bb21)
}
bb21 = {
SetDiscriminant(_12, 0);
_9 = _2.0 ^ _22.0;
_20 = [_25,_15];
_7 = _3;
_18 = (_1, (-3303827627842030785_i64), _13);
_14.1.1 = ['\u{10a538}','\u{c27be}','\u{4dba9}'];
_14.1.0 = -_4;
_5 = _3;
_10 = (_14.0, _14.0);
_21 = ['\u{f6d89}'];
_10.1 = [5920_u16,46847_u16,55239_u16,20366_u16];
_22.1 = _2.1;
_29.0 = !_13.0;
_26 = ['\u{bb9b}','\u{bf8f1}','\u{aabfd}'];
_10.1 = [40102_u16,630_u16,58429_u16,3040_u16];
_29 = (_13.0,);
_27 = core::ptr::addr_of_mut!(_4);
_26 = ['\u{c2c1b}','\u{e93e4}','\u{27ad1}'];
place!(Field::<u16>(Variant(_12, 0), 2)) = 62056_u16;
_18.0 = _1 << (*_27);
_11 = _15 as u8;
_5 = ['\u{7fd4d}','\u{86ee8}','\u{e363a}'];
_28 = _1;
_7 = ['\u{aefe1}','\u{941a4}','\u{20622}'];
_17 = 9223372036854775807_isize;
_18 = (_28, (-6393721739755759734_i64), _29);
place!(Field::<i32>(Variant(_12, 0), 1)) = _15 as i32;
_14.1.1 = ['\u{13766}','\u{a82a4}','\u{f25ce}'];
match _18.1 {
0 => bb9,
1 => bb2,
2 => bb17,
3 => bb16,
4 => bb11,
5 => bb6,
6 => bb22,
340282366920938463456980885692012451722 => bb24,
_ => bb23
}
}
bb22 = {
place!(Field::<(u8, i64, (u32,))>(Variant(_12, 1), 4)).2.0 = _13.0;
_18.2.0 = (-1875381854_i32) as u32;
_1 = (-347162514_i32) as u8;
_7 = ['\u{e9406}','\u{eadae}','\u{aa836}'];
place!(Field::<(u8, i64, (u32,))>(Variant(_12, 1), 4)) = (_11, _18.1, _13);
_22 = _14.1;
_5 = ['\u{64b45}','\u{4612b}','\u{71512}'];
place!(Field::<usize>(Variant(_12, 1), 2)) = 1_usize;
_18 = (_11, Field::<(u8, i64, (u32,))>(Variant(_12, 1), 4).1, _13);
_10.1 = _10.0;
_18 = (Field::<(u8, i64, (u32,))>(Variant(_12, 1), 4).0, Field::<(u8, i64, (u32,))>(Variant(_12, 1), 4).1, _13);
place!(Field::<(u8, i64, (u32,))>(Variant(_12, 1), 4)).2 = _18.2;
place!(Field::<(i128, [char; 3])>(Variant(_12, 1), 5)).0 = _2.0 | _4;
place!(Field::<(char, [char; 3], *const f32, u8)>(Variant(_12, 1), 0)).1 = ['\u{688d7}','\u{65906}','\u{f155e}'];
place!(Field::<(char, [char; 3], *const f32, u8)>(Variant(_12, 1), 0)).3 = !Field::<(u8, i64, (u32,))>(Variant(_12, 1), 4).0;
_14.1 = _2;
_2.1 = _14.1.1;
_14.1.1 = _3;
_2.0 = _14.1.0;
_15 = !110_i8;
Call(place!(Field::<(u8, i64, (u32,))>(Variant(_12, 1), 4)).1 = fn17(_22, _8, Field::<(char, [char; 3], *const f32, u8)>(Variant(_12, 1), 0).3), ReturnTo(bb14), UnwindUnreachable())
}
bb23 = {
Return()
}
bb24 = {
_8 = _2.1;
_14.0 = _10.0;
_25 = -_15;
_10.1 = _14.0;
_18.0 = 246693324650407703373163346393306382369_u128 as u8;
_25 = !_15;
_19 = _21;
_12 = Adt47::Variant0 { fld0: _18.1,fld1: 670683675_i32,fld2: 48072_u16 };
_14.0 = _10.1;
_21 = ['\u{88dbd}'];
_21 = ['\u{c88d8}'];
_24 = _1 as isize;
_26 = ['\u{b0697}','\u{43d1e}','\u{6ac29}'];
_2.0 = _1 as i128;
_20 = [_15,_15];
_13.0 = _29.0;
_14.1.1 = ['\u{1023a2}','\u{106b}','\u{db9f9}'];
_29.0 = _13.0;
_1 = !_28;
_21 = ['\u{573ee}'];
Goto(bb25)
}
bb25 = {
_17 = _24;
_24 = _17;
_14.1 = ((*_27), _6);
_7 = ['\u{f5202}','\u{aa72a}','\u{2e694}'];
_1 = _28 - _28;
_14 = (_10.1, _22);
place!(Field::<i64>(Variant(_12, 0), 0)) = _18.1;
_4 = -_2.0;
place!(Field::<i64>(Variant(_12, 0), 0)) = 6_usize as i64;
_34.0 = _13.0;
_1 = !_28;
_2.1 = ['\u{b7c05}','\u{a6c8a}','\u{9e656}'];
_14 = (_10.1, _2);
place!(Field::<u16>(Variant(_12, 0), 2)) = true as u16;
_29 = (_13.0,);
_29 = (_18.2.0,);
_26 = _22.1;
_22.0 = _9 - _14.1.0;
_5 = _3;
_33 = core::ptr::addr_of_mut!(_28);
Call(place!(Field::<u16>(Variant(_12, 0), 2)) = core::intrinsics::bswap(9060_u16), ReturnTo(bb26), UnwindUnreachable())
}
bb26 = {
_22 = ((*_27), _3);
_23 = !339712901247670876376462982234478651299_u128;
_33 = core::ptr::addr_of_mut!((*_33));
_18.0 = 12323_i16 as u8;
_20 = [_15,_25];
_14.0 = _10.1;
_26 = ['\u{8b237}','\u{bac1d}','\u{61d90}'];
_35 = true;
_22.1 = _8;
_13.0 = _34.0 << _17;
_18.2.0 = !_13.0;
_32 = core::ptr::addr_of_mut!(_7);
_35 = false;
_37 = _18.2.0 as f32;
match _18.1 {
0 => bb20,
1 => bb23,
2 => bb27,
340282366920938463456980885692012451722 => bb29,
_ => bb28
}
}
bb27 = {
_14.1.0 = _9;
_10.1 = _14.0;
_11 = !_1;
place!(Field::<u16>(Variant(_12, 0), 2)) = !64652_u16;
place!(Field::<i32>(Variant(_12, 0), 1)) = -(-1886131788_i32);
place!(Field::<i64>(Variant(_12, 0), 0)) = (-5381304017179728513_i64);
Goto(bb12)
}
bb28 = {
place!(Field::<(u8, i64, (u32,))>(Variant(_12, 1), 4)).2.0 = _13.0;
_18.2.0 = (-1875381854_i32) as u32;
_1 = (-347162514_i32) as u8;
_7 = ['\u{e9406}','\u{eadae}','\u{aa836}'];
place!(Field::<(u8, i64, (u32,))>(Variant(_12, 1), 4)) = (_11, _18.1, _13);
_22 = _14.1;
_5 = ['\u{64b45}','\u{4612b}','\u{71512}'];
place!(Field::<usize>(Variant(_12, 1), 2)) = 1_usize;
_18 = (_11, Field::<(u8, i64, (u32,))>(Variant(_12, 1), 4).1, _13);
_10.1 = _10.0;
_18 = (Field::<(u8, i64, (u32,))>(Variant(_12, 1), 4).0, Field::<(u8, i64, (u32,))>(Variant(_12, 1), 4).1, _13);
place!(Field::<(u8, i64, (u32,))>(Variant(_12, 1), 4)).2 = _18.2;
place!(Field::<(i128, [char; 3])>(Variant(_12, 1), 5)).0 = _2.0 | _4;
place!(Field::<(char, [char; 3], *const f32, u8)>(Variant(_12, 1), 0)).1 = ['\u{688d7}','\u{65906}','\u{f155e}'];
place!(Field::<(char, [char; 3], *const f32, u8)>(Variant(_12, 1), 0)).3 = !Field::<(u8, i64, (u32,))>(Variant(_12, 1), 4).0;
_14.1 = _2;
_2.1 = _14.1.1;
_14.1.1 = _3;
_2.0 = _14.1.0;
_15 = !110_i8;
Call(place!(Field::<(u8, i64, (u32,))>(Variant(_12, 1), 4)).1 = fn17(_22, _8, Field::<(char, [char; 3], *const f32, u8)>(Variant(_12, 1), 0).3), ReturnTo(bb14), UnwindUnreachable())
}
bb29 = {
_18.1 = !Field::<i64>(Variant(_12, 0), 0);
_30 = _18.2;
Call(_22.0 = core::intrinsics::bswap(_14.1.0), ReturnTo(bb30), UnwindUnreachable())
}
bb30 = {
place!(Field::<i32>(Variant(_12, 0), 1)) = !1583882765_i32;
_34 = (_30.0,);
_8 = _3;
_4 = _14.1.0;
_3 = ['\u{2aa0d}','\u{64f7}','\u{eb4d9}'];
_32 = core::ptr::addr_of_mut!(_2.1);
_2.0 = -_4;
_38 = Field::<i32>(Variant(_12, 0), 1) - Field::<i32>(Variant(_12, 0), 1);
_10.1 = [Field::<u16>(Variant(_12, 0), 2),Field::<u16>(Variant(_12, 0), 2),Field::<u16>(Variant(_12, 0), 2),Field::<u16>(Variant(_12, 0), 2)];
_38 = !Field::<i32>(Variant(_12, 0), 1);
_17 = _24;
RET = core::ptr::addr_of!(_37);
_33 = core::ptr::addr_of_mut!(_11);
Goto(bb31)
}
bb31 = {
Call(_40 = dump_var(16_usize, 30_usize, Move(_30), 21_usize, Move(_21), 9_usize, Move(_9), 3_usize, Move(_3)), ReturnTo(bb32), UnwindUnreachable())
}
bb32 = {
Call(_40 = dump_var(16_usize, 10_usize, Move(_10), 24_usize, Move(_24), 22_usize, Move(_22), 34_usize, Move(_34)), ReturnTo(bb33), UnwindUnreachable())
}
bb33 = {
Call(_40 = dump_var(16_usize, 4_usize, Move(_4), 28_usize, Move(_28), 13_usize, Move(_13), 6_usize, Move(_6)), ReturnTo(bb34), UnwindUnreachable())
}
bb34 = {
Call(_40 = dump_var(16_usize, 8_usize, Move(_8), 18_usize, Move(_18), 5_usize, Move(_5), 41_usize, _41), ReturnTo(bb35), UnwindUnreachable())
}
bb35 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn17(mut _1: (i128, [char; 3]),mut _2: [char; 3],mut _3: u8) -> i64 {
mir! {
type RET = i64;
let _4: f32;
let _5: isize;
let _6: u8;
let _7: *mut (u32,);
let _8: ([u16; 4], (i128, [char; 3]));
let _9: Adt41;
let _10: u8;
let _11: isize;
let _12: u32;
let _13: f64;
let _14: Adt43;
let _15: f64;
let _16: bool;
let _17: char;
let _18: ([u16; 4], [u16; 4]);
let _19: &'static [u16; 4];
let _20: *const *mut u8;
let _21: ([u16; 4], [u16; 4]);
let _22: f32;
let _23: char;
let _24: isize;
let _25: f64;
let _26: isize;
let _27: u8;
let _28: (i16, char);
let _29: ();
let _30: ();
{
RET = (-455826188231830346_i64) | 2345546447400564962_i64;
_3 = 108_u8;
_3 = false as u8;
RET = 7332433290339440321_i64;
RET = -(-884392135765385198_i64);
_1.1 = ['\u{8d7b1}','\u{f12b3}','\u{40c07}'];
_4 = (-23340_i16) as f32;
RET = 1724542619824871291_i64 + 4682144974270351688_i64;
_1 = ((-113967384765032590224567066490998364214_i128), _2);
_1 = (101890532788750080071142526147390737743_i128, _2);
RET = !(-5276897528337347016_i64);
_3 = 159_u8 << _1.0;
_1.0 = _4 as i128;
_1 = ((-68578781418197217001292277514470972778_i128), _2);
RET = (-1904203851_i32) as i64;
RET = 7504172738578749052_u64 as i64;
_4 = RET as f32;
RET = -5436891569948491627_i64;
_5 = (-9223372036854775808_isize) * 9223372036854775807_isize;
RET = (-250957715854222681_i64) - 6128346995395854016_i64;
RET = -(-7213844391324262406_i64);
_4 = 4_usize as f32;
_6 = !_3;
RET = (-4690166872145278405_i64) * (-8911866993749407360_i64);
_1.0 = 10559515494713858215290499757586292012_i128;
RET = (-1745992155528057669_i64) + (-1315626337534339166_i64);
Goto(bb1)
}
bb1 = {
_3 = _6 >> _6;
_2 = ['\u{5fb72}','\u{be44a}','\u{ee949}'];
RET = -6251929917075510801_i64;
_8.1.0 = _4 as i128;
_8.1 = _1;
_8.1 = (_1.0, _1.1);
Goto(bb2)
}
bb2 = {
_5 = -(-32_isize);
_11 = _5;
RET = (-4781209796178576138_i64);
_8.0 = [2432_u16,32733_u16,47338_u16,14119_u16];
_10 = _6 ^ _6;
RET = (-5652257576754507116_i64) - (-7361530872413525266_i64);
_5 = -_11;
_13 = _8.1.0 as f64;
_10 = !_3;
_8.1.1 = ['\u{711d9}','\u{5f133}','\u{744bf}'];
match _1.0 {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
4 => bb7,
10559515494713858215290499757586292012 => bb9,
_ => bb8
}
}
bb3 = {
_3 = _6 >> _6;
_2 = ['\u{5fb72}','\u{be44a}','\u{ee949}'];
RET = -6251929917075510801_i64;
_8.1.0 = _4 as i128;
_8.1 = _1;
_8.1 = (_1.0, _1.1);
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
_8.1 = (_1.0, _1.1);
_11 = !_5;
Goto(bb10)
}
bb10 = {
_11 = _5;
_10 = !_3;
_1 = (_8.1.0, _8.1.1);
_14 = Adt43::Variant0 { fld0: _8.1,fld1: 23315_i16,fld2: _1.0 };
_2 = _8.1.1;
_2 = Field::<(i128, [char; 3])>(Variant(_14, 0), 0).1;
_12 = !1784222929_u32;
_8.1 = (Field::<(i128, [char; 3])>(Variant(_14, 0), 0).0, _1.1);
_18.1 = _8.0;
_18.0 = _8.0;
RET = (-7204857059719735902_i64) + 1226594241552901323_i64;
_8.1 = (Field::<(i128, [char; 3])>(Variant(_14, 0), 0).0, Field::<(i128, [char; 3])>(Variant(_14, 0), 0).1);
_17 = '\u{def79}';
place!(Field::<(i128, [char; 3])>(Variant(_14, 0), 0)).1 = [_17,_17,_17];
place!(Field::<i16>(Variant(_14, 0), 1)) = (-29774_i16);
RET = 433951021126082042_u64 as i64;
place!(Field::<(i128, [char; 3])>(Variant(_14, 0), 0)).0 = false as i128;
place!(Field::<i16>(Variant(_14, 0), 1)) = 9070_i16 ^ (-5186_i16);
SetDiscriminant(_14, 0);
_14 = Adt43::Variant0 { fld0: _1,fld1: (-5403_i16),fld2: _8.1.0 };
place!(Field::<i16>(Variant(_14, 0), 1)) = -24635_i16;
place!(Field::<i16>(Variant(_14, 0), 1)) = 1_usize as i16;
_8.1.0 = (-90_i8) as i128;
_6 = _10 >> _10;
place!(Field::<(i128, [char; 3])>(Variant(_14, 0), 0)).1 = _2;
Goto(bb11)
}
bb11 = {
RET = 5157375410439303689_i64 ^ (-5391523284789412017_i64);
RET = _12 as i64;
_8 = (_18.0, _1);
_3 = _11 as u8;
_16 = false;
place!(Field::<(i128, [char; 3])>(Variant(_14, 0), 0)) = (_8.1.0, _1.1);
_15 = _13;
_3 = !_10;
_21 = _18;
RET = (-3669191220736580418_i64);
Goto(bb12)
}
bb12 = {
_21.0 = _8.0;
_4 = 202185407245121868477617690380972987282_u128 as f32;
_8.1 = Field::<(i128, [char; 3])>(Variant(_14, 0), 0);
place!(Field::<i16>(Variant(_14, 0), 1)) = 13930_i16;
_22 = 13874353981853230992_usize as f32;
_18.0 = _18.1;
_22 = _4;
_12 = 3355089299_u32 >> _10;
RET = (-7130402680623643543_i64) ^ (-7262312884844444812_i64);
_17 = '\u{bd328}';
_21.1 = [32059_u16,11767_u16,36872_u16,7567_u16];
Goto(bb13)
}
bb13 = {
_25 = Field::<i16>(Variant(_14, 0), 1) as f64;
_1 = _8.1;
_8.0 = _18.0;
_23 = _17;
place!(Field::<(i128, [char; 3])>(Variant(_14, 0), 0)).0 = _8.1.0 | _1.0;
_6 = _10;
_9 = Adt41::Variant1 { fld0: 2124002939_i32 };
_18.1 = _8.0;
RET = (-7627595232003714935_i64) ^ 3657936416897342126_i64;
SetDiscriminant(_14, 0);
_11 = 1_usize as isize;
RET = (-2151227805896998548_i64) - 8976689347276025697_i64;
_19 = &_21.0;
place!(Field::<i32>(Variant(_9, 1), 0)) = 12818606573209628681_u64 as i32;
place!(Field::<i16>(Variant(_14, 0), 1)) = (-25885_i16) ^ (-18902_i16);
_15 = Field::<i16>(Variant(_14, 0), 1) as f64;
match _1.0 {
0 => bb9,
1 => bb14,
2 => bb15,
3 => bb16,
4 => bb17,
5 => bb18,
10559515494713858215290499757586292012 => bb20,
_ => bb19
}
}
bb14 = {
_3 = _6 >> _6;
_2 = ['\u{5fb72}','\u{be44a}','\u{ee949}'];
RET = -6251929917075510801_i64;
_8.1.0 = _4 as i128;
_8.1 = _1;
_8.1 = (_1.0, _1.1);
Goto(bb2)
}
bb15 = {
RET = 5157375410439303689_i64 ^ (-5391523284789412017_i64);
RET = _12 as i64;
_8 = (_18.0, _1);
_3 = _11 as u8;
_16 = false;
place!(Field::<(i128, [char; 3])>(Variant(_14, 0), 0)) = (_8.1.0, _1.1);
_15 = _13;
_3 = !_10;
_21 = _18;
RET = (-3669191220736580418_i64);
Goto(bb12)
}
bb16 = {
Return()
}
bb17 = {
_5 = -(-32_isize);
_11 = _5;
RET = (-4781209796178576138_i64);
_8.0 = [2432_u16,32733_u16,47338_u16,14119_u16];
_10 = _6 ^ _6;
RET = (-5652257576754507116_i64) - (-7361530872413525266_i64);
_5 = -_11;
_13 = _8.1.0 as f64;
_10 = !_3;
_8.1.1 = ['\u{711d9}','\u{5f133}','\u{744bf}'];
match _1.0 {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
4 => bb7,
10559515494713858215290499757586292012 => bb9,
_ => bb8
}
}
bb18 = {
Return()
}
bb19 = {
Return()
}
bb20 = {
_24 = _5 & _5;
RET = _16 as i64;
_19 = &_18.1;
_18.0 = _21.0;
_17 = _23;
place!(Field::<i128>(Variant(_14, 0), 2)) = _1.0 - _8.1.0;
_15 = _13;
place!(Field::<(i128, [char; 3])>(Variant(_14, 0), 0)).0 = Field::<i128>(Variant(_14, 0), 2) & Field::<i128>(Variant(_14, 0), 2);
_17 = _23;
_25 = _5 as f64;
SetDiscriminant(_9, 0);
place!(Field::<(i128, char, u16, bool, u32)>(Variant(_9, 0), 3)).3 = _16;
_27 = !_10;
place!(Field::<(i128, char, u16, bool, u32)>(Variant(_9, 0), 3)).0 = Field::<(i128, [char; 3])>(Variant(_14, 0), 0).0 ^ _1.0;
_18.0 = (*_19);
place!(Field::<(i128, [char; 3])>(Variant(_14, 0), 0)) = _8.1;
_4 = _22;
_9 = Adt41::Variant1 { fld0: (-1472685658_i32) };
place!(Field::<i32>(Variant(_9, 1), 0)) = -(-975248239_i32);
_21 = (_18.1, _8.0);
_26 = !_11;
_22 = _4;
place!(Field::<i16>(Variant(_14, 0), 1)) = (-27250_i16);
Goto(bb21)
}
bb21 = {
Call(_29 = dump_var(17_usize, 27_usize, Move(_27), 10_usize, Move(_10), 12_usize, Move(_12), 3_usize, Move(_3)), ReturnTo(bb22), UnwindUnreachable())
}
bb22 = {
Call(_29 = dump_var(17_usize, 1_usize, Move(_1), 16_usize, Move(_16), 24_usize, Move(_24), 5_usize, Move(_5)), ReturnTo(bb23), UnwindUnreachable())
}
bb23 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn18(mut _1: ([u16; 4], [u16; 4]),mut _2: u16) -> Adt44 {
mir! {
type RET = Adt44;
let _3: f64;
let _4: char;
let _5: (u8, i64, (u32,));
let _6: ((i128, [char; 3]), [u16; 4]);
let _7: isize;
let _8: ((i128, [char; 3]), [u16; 4]);
let _9: i64;
let _10: Adt44;
let _11: f64;
let _12: u32;
let _13: Adt45;
let _14: ([u16; 4], (i128, [char; 3]));
let _15: (i16, char);
let _16: (u32,);
let _17: (i16, char);
let _18: f32;
let _19: (u32,);
let _20: *const i16;
let _21: (u8, i64, (u32,));
let _22: Adt43;
let _23: [char; 1];
let _24: u32;
let _25: u32;
let _26: bool;
let _27: &'static [u16; 4];
let _28: u64;
let _29: char;
let _30: (*const f32, char);
let _31: ();
let _32: ();
{
_2 = 132_u8 as u16;
_1.1 = _1.0;
_1.1 = [_2,_2,_2,_2];
_3 = 4_i8 as f64;
_1.0 = _1.1;
_3 = (-3408820287390293785_i64) as f64;
_1.1 = [_2,_2,_2,_2];
RET = Adt44::Variant1 { fld0: 864048448853594397_i64 };
_4 = '\u{f2f}';
_4 = '\u{d1101}';
RET = Adt44::Variant1 { fld0: (-5220357916257030186_i64) };
Goto(bb1)
}
bb1 = {
RET = Adt44::Variant1 { fld0: (-3734703057855367958_i64) };
_5.2.0 = 3567987761_u32;
_5.2 = (1787684366_u32,);
_1.1 = [_2,_2,_2,_2];
_5.0 = !95_u8;
_5.2.0 = !2083057724_u32;
place!(Field::<i64>(Variant(RET, 1), 0)) = (-7702446363531986329_i64) & (-5240520926401804066_i64);
_6.0.0 = 103245611058011292232399004630120327738_i128;
_6.1 = [_2,_2,_2,_2];
place!(Field::<i64>(Variant(RET, 1), 0)) = (-5814335410452775796_i64) - (-6998450713490776159_i64);
_6.0.1 = [_4,_4,_4];
_4 = '\u{ca334}';
_1.1 = [_2,_2,_2,_2];
_5.1 = 8071287740332378210_u64 as i64;
_2 = (-838623393_i32) as u16;
RET = Adt44::Variant1 { fld0: _5.1 };
RET = Adt44::Variant2 { fld0: _6.0.1 };
_6.0.1 = Field::<[char; 3]>(Variant(RET, 2), 0);
RET = Adt44::Variant2 { fld0: _6.0.1 };
_1.1 = _6.1;
_2 = 4106_u16;
_6.1 = [_2,_2,_2,_2];
Goto(bb2)
}
bb2 = {
place!(Field::<[char; 3]>(Variant(RET, 2), 0)) = [_4,_4,_4];
SetDiscriminant(RET, 0);
place!(Field::<[i8; 2]>(Variant(RET, 0), 1)) = [(-86_i8),(-97_i8)];
Goto(bb3)
}
bb3 = {
place!(Field::<i128>(Variant(RET, 0), 2)) = _6.0.0 + _6.0.0;
place!(Field::<u16>(Variant(RET, 0), 0)) = !_2;
_6.0.1 = [_4,_4,_4];
_6.0.0 = Field::<i128>(Variant(RET, 0), 2);
_5.2.0 = 1790343464_i32 as u32;
place!(Field::<[i8; 2]>(Variant(RET, 0), 1)) = [96_i8,(-42_i8)];
_6.0.0 = -Field::<i128>(Variant(RET, 0), 2);
RET = Adt44::Variant2 { fld0: _6.0.1 };
_6.0.1 = Field::<[char; 3]>(Variant(RET, 2), 0);
Goto(bb4)
}
bb4 = {
_5.0 = 97_u8;
_6.0 = ((-108440075246693908246963609264215535608_i128), Field::<[char; 3]>(Variant(RET, 2), 0));
SetDiscriminant(RET, 2);
place!(Field::<[char; 3]>(Variant(RET, 2), 0)) = [_4,_4,_4];
SetDiscriminant(RET, 2);
place!(Field::<[char; 3]>(Variant(RET, 2), 0)) = [_4,_4,_4];
_8 = (_6.0, _6.1);
_1 = (_6.1, _8.1);
_9 = _5.2.0 as i64;
_11 = _3;
_5.2 = (2878053201_u32,);
_13.fld0 = true & true;
_13.fld3 = (_5.0, _9, _5.2);
_13.fld3.2 = (_5.2.0,);
_6 = _8;
RET = Adt44::Variant2 { fld0: _8.0.1 };
_13.fld2 = _5.1 as f32;
_5.2.0 = _13.fld3.2.0;
_5.2 = _13.fld3.2;
_8.0.1 = [_4,_4,_4];
_5.0 = _13.fld3.0;
_13.fld3 = (_5.0, _5.1, _5.2);
_5.2 = (_13.fld3.2.0,);
_14.0 = _8.1;
Goto(bb5)
}
bb5 = {
_5.1 = 2202832690138735424_u64 as i64;
_13.fld5 = _8.0.0;
_2 = _13.fld0 as u16;
_13.fld3.1 = -_9;
_15.0 = 30601_i16;
_8.1 = _1.1;
_16.0 = _13.fld3.2.0;
_6.1 = [_2,_2,_2,_2];
_5.2 = (_13.fld3.2.0,);
_5.2.0 = _2 as u32;
_8.0 = (_6.0.0, Field::<[char; 3]>(Variant(RET, 2), 0));
place!(Field::<[char; 3]>(Variant(RET, 2), 0)) = _6.0.1;
_6.0.0 = 9223372036854775807_isize as i128;
_7 = (-27_isize);
_17.0 = _15.0 & _15.0;
_6.0.0 = _13.fld5;
_13.fld3.1 = _9 | _5.1;
_9 = _16.0 as i64;
_6.0 = _8.0;
_14.1.1 = _8.0.1;
_15 = (_17.0, _4);
SetDiscriminant(RET, 2);
RET = Adt44::Variant1 { fld0: _9 };
_19.0 = _5.2.0 & _5.2.0;
_13.fld3.2 = (_19.0,);
_7 = 9223372036854775807_isize;
match _8.0.0 {
0 => bb1,
1 => bb2,
2 => bb3,
231842291674244555216410998167552675848 => bb7,
_ => bb6
}
}
bb6 = {
place!(Field::<[char; 3]>(Variant(RET, 2), 0)) = [_4,_4,_4];
SetDiscriminant(RET, 0);
place!(Field::<[i8; 2]>(Variant(RET, 0), 1)) = [(-86_i8),(-97_i8)];
Goto(bb3)
}
bb7 = {
_6.0.1 = [_15.1,_4,_15.1];
RET = Adt44::Variant2 { fld0: _6.0.1 };
_9 = -_5.1;
_8.1 = [_2,_2,_2,_2];
_8.0 = _6.0;
_13.fld0 = _13.fld5 >= _13.fld5;
_19.0 = !_16.0;
_8.0.1 = [_4,_15.1,_15.1];
_13.fld1 = core::ptr::addr_of!(_17.0);
_13.fld4.0.0 = _8.0.0 | _6.0.0;
_15.0 = -_17.0;
_2 = !25988_u16;
_1 = (_8.1, _8.1);
_13.fld4.1 = [_2,_2,_2,_2];
_8.1 = [_2,_2,_2,_2];
match _8.0.0 {
0 => bb1,
1 => bb8,
2 => bb9,
3 => bb10,
4 => bb11,
231842291674244555216410998167552675848 => bb13,
_ => bb12
}
}
bb8 = {
place!(Field::<[char; 3]>(Variant(RET, 2), 0)) = [_4,_4,_4];
SetDiscriminant(RET, 0);
place!(Field::<[i8; 2]>(Variant(RET, 0), 1)) = [(-86_i8),(-97_i8)];
Goto(bb3)
}
bb9 = {
_5.1 = 2202832690138735424_u64 as i64;
_13.fld5 = _8.0.0;
_2 = _13.fld0 as u16;
_13.fld3.1 = -_9;
_15.0 = 30601_i16;
_8.1 = _1.1;
_16.0 = _13.fld3.2.0;
_6.1 = [_2,_2,_2,_2];
_5.2 = (_13.fld3.2.0,);
_5.2.0 = _2 as u32;
_8.0 = (_6.0.0, Field::<[char; 3]>(Variant(RET, 2), 0));
place!(Field::<[char; 3]>(Variant(RET, 2), 0)) = _6.0.1;
_6.0.0 = 9223372036854775807_isize as i128;
_7 = (-27_isize);
_17.0 = _15.0 & _15.0;
_6.0.0 = _13.fld5;
_13.fld3.1 = _9 | _5.1;
_9 = _16.0 as i64;
_6.0 = _8.0;
_14.1.1 = _8.0.1;
_15 = (_17.0, _4);
SetDiscriminant(RET, 2);
RET = Adt44::Variant1 { fld0: _9 };
_19.0 = _5.2.0 & _5.2.0;
_13.fld3.2 = (_19.0,);
_7 = 9223372036854775807_isize;
match _8.0.0 {
0 => bb1,
1 => bb2,
2 => bb3,
231842291674244555216410998167552675848 => bb7,
_ => bb6
}
}
bb10 = {
_5.0 = 97_u8;
_6.0 = ((-108440075246693908246963609264215535608_i128), Field::<[char; 3]>(Variant(RET, 2), 0));
SetDiscriminant(RET, 2);
place!(Field::<[char; 3]>(Variant(RET, 2), 0)) = [_4,_4,_4];
SetDiscriminant(RET, 2);
place!(Field::<[char; 3]>(Variant(RET, 2), 0)) = [_4,_4,_4];
_8 = (_6.0, _6.1);
_1 = (_6.1, _8.1);
_9 = _5.2.0 as i64;
_11 = _3;
_5.2 = (2878053201_u32,);
_13.fld0 = true & true;
_13.fld3 = (_5.0, _9, _5.2);
_13.fld3.2 = (_5.2.0,);
_6 = _8;
RET = Adt44::Variant2 { fld0: _8.0.1 };
_13.fld2 = _5.1 as f32;
_5.2.0 = _13.fld3.2.0;
_5.2 = _13.fld3.2;
_8.0.1 = [_4,_4,_4];
_5.0 = _13.fld3.0;
_13.fld3 = (_5.0, _5.1, _5.2);
_5.2 = (_13.fld3.2.0,);
_14.0 = _8.1;
Goto(bb5)
}
bb11 = {
place!(Field::<i128>(Variant(RET, 0), 2)) = _6.0.0 + _6.0.0;
place!(Field::<u16>(Variant(RET, 0), 0)) = !_2;
_6.0.1 = [_4,_4,_4];
_6.0.0 = Field::<i128>(Variant(RET, 0), 2);
_5.2.0 = 1790343464_i32 as u32;
place!(Field::<[i8; 2]>(Variant(RET, 0), 1)) = [96_i8,(-42_i8)];
_6.0.0 = -Field::<i128>(Variant(RET, 0), 2);
RET = Adt44::Variant2 { fld0: _6.0.1 };
_6.0.1 = Field::<[char; 3]>(Variant(RET, 2), 0);
Goto(bb4)
}
bb12 = {
RET = Adt44::Variant1 { fld0: (-3734703057855367958_i64) };
_5.2.0 = 3567987761_u32;
_5.2 = (1787684366_u32,);
_1.1 = [_2,_2,_2,_2];
_5.0 = !95_u8;
_5.2.0 = !2083057724_u32;
place!(Field::<i64>(Variant(RET, 1), 0)) = (-7702446363531986329_i64) & (-5240520926401804066_i64);
_6.0.0 = 103245611058011292232399004630120327738_i128;
_6.1 = [_2,_2,_2,_2];
place!(Field::<i64>(Variant(RET, 1), 0)) = (-5814335410452775796_i64) - (-6998450713490776159_i64);
_6.0.1 = [_4,_4,_4];
_4 = '\u{ca334}';
_1.1 = [_2,_2,_2,_2];
_5.1 = 8071287740332378210_u64 as i64;
_2 = (-838623393_i32) as u16;
RET = Adt44::Variant1 { fld0: _5.1 };
RET = Adt44::Variant2 { fld0: _6.0.1 };
_6.0.1 = Field::<[char; 3]>(Variant(RET, 2), 0);
RET = Adt44::Variant2 { fld0: _6.0.1 };
_1.1 = _6.1;
_2 = 4106_u16;
_6.1 = [_2,_2,_2,_2];
Goto(bb2)
}
bb13 = {
_13.fld4 = _6;
_1.0 = [_2,_2,_2,_2];
_20 = core::ptr::addr_of!(_17.0);
_21.0 = _5.0 + _5.0;
_24 = _13.fld3.2.0 ^ _13.fld3.2.0;
_21.1 = _13.fld3.1;
_23 = [_15.1];
_17.1 = _4;
_15 = _17;
_22 = Adt43::Variant1 { fld0: Field::<[char; 3]>(Variant(RET, 2), 0),fld1: _23 };
_13.fld2 = _2 as f32;
_6.0.0 = -_13.fld4.0.0;
_13.fld4.0.0 = _6.0.0 * _8.0.0;
_13.fld0 = true;
match _5.0 {
0 => bb10,
1 => bb2,
2 => bb12,
3 => bb4,
4 => bb14,
5 => bb15,
97 => bb17,
_ => bb16
}
}
bb14 = {
RET = Adt44::Variant1 { fld0: (-3734703057855367958_i64) };
_5.2.0 = 3567987761_u32;
_5.2 = (1787684366_u32,);
_1.1 = [_2,_2,_2,_2];
_5.0 = !95_u8;
_5.2.0 = !2083057724_u32;
place!(Field::<i64>(Variant(RET, 1), 0)) = (-7702446363531986329_i64) & (-5240520926401804066_i64);
_6.0.0 = 103245611058011292232399004630120327738_i128;
_6.1 = [_2,_2,_2,_2];
place!(Field::<i64>(Variant(RET, 1), 0)) = (-5814335410452775796_i64) - (-6998450713490776159_i64);
_6.0.1 = [_4,_4,_4];
_4 = '\u{ca334}';
_1.1 = [_2,_2,_2,_2];
_5.1 = 8071287740332378210_u64 as i64;
_2 = (-838623393_i32) as u16;
RET = Adt44::Variant1 { fld0: _5.1 };
RET = Adt44::Variant2 { fld0: _6.0.1 };
_6.0.1 = Field::<[char; 3]>(Variant(RET, 2), 0);
RET = Adt44::Variant2 { fld0: _6.0.1 };
_1.1 = _6.1;
_2 = 4106_u16;
_6.1 = [_2,_2,_2,_2];
Goto(bb2)
}
bb15 = {
_6.0.1 = [_15.1,_4,_15.1];
RET = Adt44::Variant2 { fld0: _6.0.1 };
_9 = -_5.1;
_8.1 = [_2,_2,_2,_2];
_8.0 = _6.0;
_13.fld0 = _13.fld5 >= _13.fld5;
_19.0 = !_16.0;
_8.0.1 = [_4,_15.1,_15.1];
_13.fld1 = core::ptr::addr_of!(_17.0);
_13.fld4.0.0 = _8.0.0 | _6.0.0;
_15.0 = -_17.0;
_2 = !25988_u16;
_1 = (_8.1, _8.1);
_13.fld4.1 = [_2,_2,_2,_2];
_8.1 = [_2,_2,_2,_2];
match _8.0.0 {
0 => bb1,
1 => bb8,
2 => bb9,
3 => bb10,
4 => bb11,
231842291674244555216410998167552675848 => bb13,
_ => bb12
}
}
bb16 = {
_5.0 = 97_u8;
_6.0 = ((-108440075246693908246963609264215535608_i128), Field::<[char; 3]>(Variant(RET, 2), 0));
SetDiscriminant(RET, 2);
place!(Field::<[char; 3]>(Variant(RET, 2), 0)) = [_4,_4,_4];
SetDiscriminant(RET, 2);
place!(Field::<[char; 3]>(Variant(RET, 2), 0)) = [_4,_4,_4];
_8 = (_6.0, _6.1);
_1 = (_6.1, _8.1);
_9 = _5.2.0 as i64;
_11 = _3;
_5.2 = (2878053201_u32,);
_13.fld0 = true & true;
_13.fld3 = (_5.0, _9, _5.2);
_13.fld3.2 = (_5.2.0,);
_6 = _8;
RET = Adt44::Variant2 { fld0: _8.0.1 };
_13.fld2 = _5.1 as f32;
_5.2.0 = _13.fld3.2.0;
_5.2 = _13.fld3.2;
_8.0.1 = [_4,_4,_4];
_5.0 = _13.fld3.0;
_13.fld3 = (_5.0, _5.1, _5.2);
_5.2 = (_13.fld3.2.0,);
_14.0 = _8.1;
Goto(bb5)
}
bb17 = {
_1.0 = [_2,_2,_2,_2];
_18 = -_13.fld2;
SetDiscriminant(RET, 1);
_14.1 = (_13.fld5, _6.0.1);
match _14.1.0 {
0 => bb5,
231842291674244555216410998167552675848 => bb18,
_ => bb7
}
}
bb18 = {
place!(Field::<i64>(Variant(RET, 1), 0)) = !_13.fld3.1;
_17.1 = _15.1;
Goto(bb19)
}
bb19 = {
Call(_31 = dump_var(18_usize, 7_usize, Move(_7), 9_usize, Move(_9), 15_usize, Move(_15), 2_usize, Move(_2)), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Call(_31 = dump_var(18_usize, 5_usize, Move(_5), 14_usize, Move(_14), 8_usize, Move(_8), 32_usize, _32), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
Return()
}

}
}
pub fn main() {
                fn0(std::hint::black_box(false), std::hint::black_box(3477123956_u32), std::hint::black_box((-9223372036854775808_isize)), std::hint::black_box((-74_i8)), std::hint::black_box((-26545_i16)), std::hint::black_box(592319314_i32), std::hint::black_box(320250703866315166689535476156414931421_u128), std::hint::black_box(145254042911586750052492002191358326306_i128), std::hint::black_box(7_usize), std::hint::black_box(150_u8), std::hint::black_box(19461_u16));
                
            }
#[derive(Debug)]
pub enum Adt41 {
Variant0{
fld0: *mut i128,
fld1: *mut ((i128, [char; 3]), [u16; 4]),
fld2: *const *mut u8,
fld3: (i128, char, u16, bool, u32),

},
Variant1{
fld0: i32,

},
Variant2{
fld0: ((i128, [char; 3]), [u16; 4]),
fld1: usize,

},
Variant3{
fld0: *mut u8,
fld1: *mut (u32,),
fld2: u32,
fld3: ([u16; 4], (i128, [char; 3])),
fld4: [char; 3],
fld5: *const *mut u8,
fld6: (i16, char),

}}
#[derive(Debug,Copy,Clone)]
pub enum Adt42 {
Variant0{
fld0: *mut u8,
fld1: u64,
fld2: usize,

},
Variant1{
fld0: usize,
fld1: (char, [char; 3], *const f32, u8),
fld2: isize,
fld3: (i128, [char; 3]),
fld4: ([u16; 4], (i128, [char; 3])),

},
Variant2{
fld0: f64,
fld1: *mut ((i128, [char; 3]), [u16; 4]),

},
Variant3{
fld0: (i128, [char; 3]),
fld1: f64,
fld2: (*const f32, char),
fld3: (i16, char),
fld4: i128,
fld5: *mut (u32,),
fld6: ([u16; 4], (i128, [char; 3])),

}}
#[derive(Debug)]
pub enum Adt43 {
Variant0{
fld0: (i128, [char; 3]),
fld1: i16,
fld2: i128,

},
Variant1{
fld0: [char; 3],
fld1: [char; 1],

}}
#[derive(Debug)]
pub enum Adt44 {
Variant0{
fld0: u16,
fld1: [i8; 2],
fld2: i128,

},
Variant1{
fld0: i64,

},
Variant2{
fld0: [char; 3],

}}
#[derive(Debug,Copy,Clone)]
pub struct Adt45 {
fld0: bool,
fld1: *const i16,
fld2: f32,
fld3: (u8, i64, (u32,)),
fld4: ((i128, [char; 3]), [u16; 4]),
fld5: i128,
fld6: *const *mut u8,
}
#[derive(Debug,Copy,Clone)]
pub enum Adt46 {
Variant0{
fld0: *const i16,

},
Variant1{
fld0: *const i16,
fld1: [char; 3],
fld2: (u64, u128, (*const f32, char), *const i16),
fld3: i8,
fld4: Adt42,
fld5: i32,
fld6: i128,

},
Variant2{
fld0: (u8, i64, (u32,)),
fld1: isize,

}}
#[derive(Debug)]
pub enum Adt47 {
Variant0{
fld0: i64,
fld1: i32,
fld2: u16,

},
Variant1{
fld0: (char, [char; 3], *const f32, u8),
fld1: u128,
fld2: usize,
fld3: (*const f32, char),
fld4: (u8, i64, (u32,)),
fld5: (i128, [char; 3]),
fld6: Adt43,

},
Variant2{
fld0: (i16, char),
fld1: u8,
fld2: ([u16; 4], [u16; 4]),
fld3: [char; 3],
fld4: Adt45,

}}
#[derive(Debug)]
pub struct Adt48 {
fld0: [char; 1],
fld1: (char, [char; 3], *const f32, u8),
}
#[derive(Debug)]
pub enum Adt49 {
Variant0{
fld0: bool,
fld1: [u16; 4],
fld2: Adt47,
fld3: *mut [char; 3],
fld4: *mut u8,
fld5: (i16, char),
fld6: u32,
fld7: (i128, [char; 3]),

},
Variant1{
fld0: Adt43,
fld1: f64,
fld2: *const *mut u8,
fld3: *const f32,
fld4: ((i128, [char; 3]), [u16; 4]),
fld5: u32,
fld6: (u64, u128, (*const f32, char), *const i16),
fld7: *mut [char; 3],

},
Variant2{
fld0: Adt41,
fld1: *mut u8,
fld2: (i16, char),
fld3: Adt43,
fld4: *mut [char; 3],

}}
#[derive(Debug,Copy,Clone)]
pub struct Adt50 {
fld0: (char, [char; 3], *const f32, u8),
fld1: *const f32,
fld2: u64,
}
#[derive(Debug)]
pub enum Adt51 {
Variant0{
fld0: (u8, i64, (u32,)),
fld1: Adt47,
fld2: *mut i128,

},
Variant1{
fld0: u128,
fld1: char,

}}
#[derive(Debug)]
pub struct Adt52 {
fld0: *mut i128,
fld1: Adt42,
fld2: Adt48,
fld3: (i128, [char; 3]),
fld4: *mut [char; 3],
fld5: *mut (u32,),
fld6: (i128, char, u16, bool, u32),
fld7: f64,
}
#[derive(Debug)]
pub enum Adt53 {
Variant0{
fld0: Adt47,
fld1: usize,
fld2: isize,
fld3: f32,
fld4: Adt44,
fld5: ((i128, [char; 3]), [u16; 4]),
fld6: Adt51,

},
Variant1{
fld0: *mut (u32,),
fld1: u32,
fld2: Adt45,

}}
#[derive(Debug)]
pub enum Adt54 {
Variant0{
fld0: Adt50,
fld1: Adt42,
fld2: *mut (u32,),
fld3: Adt44,
fld4: Adt45,
fld5: u16,
fld6: (i128, char, u16, bool, u32),

},
Variant1{
fld0: ([u16; 4], (i128, [char; 3])),
fld1: u16,
fld2: *mut u8,
fld3: Adt44,
fld4: f64,
fld5: (i16, char),
fld6: Adt42,

},
Variant2{
fld0: *mut u8,
fld1: [char; 3],
fld2: ([u16; 4], [u16; 4]),
fld3: f64,
fld4: i16,
fld5: usize,

}}
#[derive(Debug)]
pub struct Adt55 {
fld0: (i128, char, u16, bool, u32),
fld1: [i8; 2],
}
#[derive(Debug)]
pub enum Adt56 {
Variant0{
fld0: Adt42,

},
Variant1{
fld0: bool,
fld1: f64,
fld2: Adt43,
fld3: ((i128, [char; 3]), [u16; 4]),
fld4: Adt54,
fld5: Adt52,

},
Variant2{
fld0: i16,
fld1: f64,
fld2: u128,

},
Variant3{
fld0: bool,
fld1: *mut [char; 3],
fld2: Adt54,
fld3: [char; 1],
fld4: (*const f32, char),
fld5: Adt51,

}}
#[derive(Debug)]
pub enum Adt57 {
Variant0{
fld0: Adt51,
fld1: Adt54,
fld2: *mut (u32,),
fld3: *const *mut u8,

},
Variant1{
fld0: *const f32,
fld1: (i128, char, u16, bool, u32),
fld2: Adt56,
fld3: i8,
fld4: *mut ((i128, [char; 3]), [u16; 4]),
fld5: i32,
fld6: *mut i128,
fld7: [u16; 4],

},
Variant2{
fld0: (char, [char; 3], *const f32, u8),
fld1: i64,
fld2: f32,
fld3: (u8, i64, (u32,)),
fld4: u128,
fld5: usize,

},
Variant3{
fld0: char,

}}

