#![recursion_limit = "1024"]
    #![feature(custom_mir, core_intrinsics, const_hash)]
    #![allow(unused_parens, unused_assignments, overflowing_literals)]
    extern crate core;
    use core::intrinsics::mir::*;

    use std::fmt::Debug;

    #[inline(never)]
    fn dump_var(
        f: usize,
        var0: usize, val0: impl Debug,
        var1: usize, val1: impl Debug,
        var2: usize, val2: impl Debug,
        var3: usize, val3: impl Debug,
    ) {
        println!("fn{f}:_{var0} = {val0:?}\n_{var1} = {val1:?}\n_{var2} = {val2:?}\n_{var3} = {val3:?}");
    }
    #[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn0(mut _1: bool,mut _2: char,mut _3: isize,mut _4: i8,mut _5: i16,mut _6: i32,mut _7: i64,mut _8: i128,mut _9: usize,mut _10: u8,mut _11: u16,mut _12: u32,mut _13: u64,mut _14: u128) -> isize {
mir! {
type RET = isize;
let _15: (u32,);
let _16: (u32,);
let _17: [u128; 6];
let _18: ([i64; 7],);
let _19: [u32; 3];
let _20: isize;
let _21: (i64,);
let _22: f32;
let _23: [i128; 5];
let _24: *mut &'static f64;
let _25: f32;
let _26: f64;
let _27: u8;
let _28: Adt43;
let _29: i32;
let _30: u8;
let _31: Adt50;
let _32: bool;
let _33: i64;
let _34: f64;
let _35: isize;
let _36: bool;
let _37: usize;
let _38: (i8, u32, u16, f64, char, i32);
let _39: u32;
let _40: isize;
let _41: Adt50;
let _42: ();
let _43: ();
{
Goto(bb1)
}
bb1 = {
_12 = !820577586_u32;
RET = -9223372036854775807_isize;
_15 = (_12,);
_8 = 157096032058707431364895595444432427730_i128;
_1 = !true;
_14 = 296014769190958730354090774122935478230_u128;
_9 = !1_usize;
_5 = RET as i16;
_3 = !RET;
_14 = !290369772072991357446130134162137394109_u128;
_10 = 96_i8 as u8;
RET = 15465175877279365017_u64 as isize;
_9 = 11554136062713940333_usize;
_11 = 22134_u16 << _5;
_15 = (_12,);
RET = !_3;
_9 = 8277488387832470137_usize;
Call(_4 = fn1(_12, _10, _15), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_5 = 1220876474_i32 as i16;
_2 = '\u{105d57}';
_11 = 50137_u16;
_5 = 21722_i16 | 26283_i16;
_16 = _15;
_19 = [_15.0,_16.0,_15.0];
_15 = (_16.0,);
_7 = 4567485376614060645_i64;
_16.0 = _15.0 << _9;
_21 = (_7,);
_21 = (_7,);
_14 = _9 as u128;
Goto(bb3)
}
bb3 = {
_20 = _3;
_21 = (_7,);
_1 = !false;
_22 = 12867533871854494088_u64 as f32;
_1 = !true;
_15.0 = _16.0;
_18.0 = [_7,_21.0,_7,_21.0,_7,_21.0,_7];
_14 = 93541079088608218311573480325398313964_u128;
_16.0 = _15.0 & _12;
_13 = 7519539317183511259_u64 | 4694280243607836170_u64;
_5 = !(-10112_i16);
_2 = '\u{3c35c}';
_15 = (_16.0,);
_18.0 = [_7,_21.0,_21.0,_7,_21.0,_7,_21.0];
_10 = 77_u8;
match _8 {
0 => bb1,
1 => bb4,
157096032058707431364895595444432427730 => bb6,
_ => bb5
}
}
bb4 = {
_5 = 1220876474_i32 as i16;
_2 = '\u{105d57}';
_11 = 50137_u16;
_5 = 21722_i16 | 26283_i16;
_16 = _15;
_19 = [_15.0,_16.0,_15.0];
_15 = (_16.0,);
_7 = 4567485376614060645_i64;
_16.0 = _15.0 << _9;
_21 = (_7,);
_21 = (_7,);
_14 = _9 as u128;
Goto(bb3)
}
bb5 = {
_12 = !820577586_u32;
RET = -9223372036854775807_isize;
_15 = (_12,);
_8 = 157096032058707431364895595444432427730_i128;
_1 = !true;
_14 = 296014769190958730354090774122935478230_u128;
_9 = !1_usize;
_5 = RET as i16;
_3 = !RET;
_14 = !290369772072991357446130134162137394109_u128;
_10 = 96_i8 as u8;
RET = 15465175877279365017_u64 as isize;
_9 = 11554136062713940333_usize;
_11 = 22134_u16 << _5;
_15 = (_12,);
RET = !_3;
_9 = 8277488387832470137_usize;
Call(_4 = fn1(_12, _10, _15), ReturnTo(bb2), UnwindUnreachable())
}
bb6 = {
_23 = [_8,_8,_8,_8,_8];
_9 = _14 as usize;
_2 = '\u{f058b}';
_27 = _10;
_3 = _10 as isize;
_22 = _21.0 as f32;
_14 = 51625091468812720303211176261255165576_u128 + 275232992800420939742962556432374795432_u128;
_13 = 10730705317166391117_u64;
_25 = -_22;
_7 = _8 as i64;
_16 = _15;
_29 = 1999820448_i32 | (-177148694_i32);
RET = _20;
_6 = _29 + _29;
_17 = [_14,_14,_14,_14,_14,_14];
_16 = (_15.0,);
_16 = _15;
_23 = [_8,_8,_8,_8,_8];
_18.0 = [_7,_21.0,_21.0,_7,_7,_7,_7];
_22 = _14 as f32;
_2 = '\u{1d5f6}';
_19 = [_15.0,_15.0,_12];
_32 = _1 | _1;
_26 = _6 as f64;
Goto(bb7)
}
bb7 = {
_16.0 = _11 as u32;
_32 = _1 | _1;
match _21.0 {
0 => bb8,
1 => bb9,
2 => bb10,
3 => bb11,
4567485376614060645 => bb13,
_ => bb12
}
}
bb8 = {
_23 = [_8,_8,_8,_8,_8];
_9 = _14 as usize;
_2 = '\u{f058b}';
_27 = _10;
_3 = _10 as isize;
_22 = _21.0 as f32;
_14 = 51625091468812720303211176261255165576_u128 + 275232992800420939742962556432374795432_u128;
_13 = 10730705317166391117_u64;
_25 = -_22;
_7 = _8 as i64;
_16 = _15;
_29 = 1999820448_i32 | (-177148694_i32);
RET = _20;
_6 = _29 + _29;
_17 = [_14,_14,_14,_14,_14,_14];
_16 = (_15.0,);
_16 = _15;
_23 = [_8,_8,_8,_8,_8];
_18.0 = [_7,_21.0,_21.0,_7,_7,_7,_7];
_22 = _14 as f32;
_2 = '\u{1d5f6}';
_19 = [_15.0,_15.0,_12];
_32 = _1 | _1;
_26 = _6 as f64;
Goto(bb7)
}
bb9 = {
_12 = !820577586_u32;
RET = -9223372036854775807_isize;
_15 = (_12,);
_8 = 157096032058707431364895595444432427730_i128;
_1 = !true;
_14 = 296014769190958730354090774122935478230_u128;
_9 = !1_usize;
_5 = RET as i16;
_3 = !RET;
_14 = !290369772072991357446130134162137394109_u128;
_10 = 96_i8 as u8;
RET = 15465175877279365017_u64 as isize;
_9 = 11554136062713940333_usize;
_11 = 22134_u16 << _5;
_15 = (_12,);
RET = !_3;
_9 = 8277488387832470137_usize;
Call(_4 = fn1(_12, _10, _15), ReturnTo(bb2), UnwindUnreachable())
}
bb10 = {
_5 = 1220876474_i32 as i16;
_2 = '\u{105d57}';
_11 = 50137_u16;
_5 = 21722_i16 | 26283_i16;
_16 = _15;
_19 = [_15.0,_16.0,_15.0];
_15 = (_16.0,);
_7 = 4567485376614060645_i64;
_16.0 = _15.0 << _9;
_21 = (_7,);
_21 = (_7,);
_14 = _9 as u128;
Goto(bb3)
}
bb11 = {
_20 = _3;
_21 = (_7,);
_1 = !false;
_22 = 12867533871854494088_u64 as f32;
_1 = !true;
_15.0 = _16.0;
_18.0 = [_7,_21.0,_7,_21.0,_7,_21.0,_7];
_14 = 93541079088608218311573480325398313964_u128;
_16.0 = _15.0 & _12;
_13 = 7519539317183511259_u64 | 4694280243607836170_u64;
_5 = !(-10112_i16);
_2 = '\u{3c35c}';
_15 = (_16.0,);
_18.0 = [_7,_21.0,_21.0,_7,_21.0,_7,_21.0];
_10 = 77_u8;
match _8 {
0 => bb1,
1 => bb4,
157096032058707431364895595444432427730 => bb6,
_ => bb5
}
}
bb12 = {
_5 = 1220876474_i32 as i16;
_2 = '\u{105d57}';
_11 = 50137_u16;
_5 = 21722_i16 | 26283_i16;
_16 = _15;
_19 = [_15.0,_16.0,_15.0];
_15 = (_16.0,);
_7 = 4567485376614060645_i64;
_16.0 = _15.0 << _9;
_21 = (_7,);
_21 = (_7,);
_14 = _9 as u128;
Goto(bb3)
}
bb13 = {
_26 = _22 as f64;
_33 = _21.0 | _21.0;
_29 = !_6;
_3 = -_20;
_3 = !RET;
_20 = _3;
_6 = _25 as i32;
_10 = _27 % _27;
_33 = -_21.0;
_34 = _26 * _26;
_32 = !_1;
_32 = _1;
_14 = !62900512125711543049407500568272888309_u128;
RET = _20 + _20;
match _27 {
0 => bb14,
77 => bb16,
_ => bb15
}
}
bb14 = {
_12 = !820577586_u32;
RET = -9223372036854775807_isize;
_15 = (_12,);
_8 = 157096032058707431364895595444432427730_i128;
_1 = !true;
_14 = 296014769190958730354090774122935478230_u128;
_9 = !1_usize;
_5 = RET as i16;
_3 = !RET;
_14 = !290369772072991357446130134162137394109_u128;
_10 = 96_i8 as u8;
RET = 15465175877279365017_u64 as isize;
_9 = 11554136062713940333_usize;
_11 = 22134_u16 << _5;
_15 = (_12,);
RET = !_3;
_9 = 8277488387832470137_usize;
Call(_4 = fn1(_12, _10, _15), ReturnTo(bb2), UnwindUnreachable())
}
bb15 = {
_23 = [_8,_8,_8,_8,_8];
_9 = _14 as usize;
_2 = '\u{f058b}';
_27 = _10;
_3 = _10 as isize;
_22 = _21.0 as f32;
_14 = 51625091468812720303211176261255165576_u128 + 275232992800420939742962556432374795432_u128;
_13 = 10730705317166391117_u64;
_25 = -_22;
_7 = _8 as i64;
_16 = _15;
_29 = 1999820448_i32 | (-177148694_i32);
RET = _20;
_6 = _29 + _29;
_17 = [_14,_14,_14,_14,_14,_14];
_16 = (_15.0,);
_16 = _15;
_23 = [_8,_8,_8,_8,_8];
_18.0 = [_7,_21.0,_21.0,_7,_7,_7,_7];
_22 = _14 as f32;
_2 = '\u{1d5f6}';
_19 = [_15.0,_15.0,_12];
_32 = _1 | _1;
_26 = _6 as f64;
Goto(bb7)
}
bb16 = {
_2 = '\u{17f6a}';
_36 = _29 > _29;
RET = _9 as isize;
_17 = [_14,_14,_14,_14,_14,_14];
_18.0 = [_7,_21.0,_7,_21.0,_21.0,_21.0,_33];
_22 = _25 * _25;
_4 = 93_i8 + 95_i8;
_4 = _34 as i8;
_39 = _13 as u32;
_30 = _13 as u8;
_20 = !RET;
_9 = 17843388277889892733_usize - 2_usize;
_4 = (-21_i8) << _20;
_21.0 = _7 & _33;
_38 = (_4, _39, _11, _34, _2, _29);
_1 = _36;
_21.0 = _7;
RET = _3;
_38.5 = _29 & _29;
_4 = _38.0;
_35 = _20;
_11 = _38.2;
Goto(bb17)
}
bb17 = {
Call(_42 = dump_var(0_usize, 36_usize, Move(_36), 29_usize, Move(_29), 7_usize, Move(_7), 30_usize, Move(_30)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_42 = dump_var(0_usize, 9_usize, Move(_9), 17_usize, Move(_17), 4_usize, Move(_4), 15_usize, Move(_15)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_42 = dump_var(0_usize, 27_usize, Move(_27), 6_usize, Move(_6), 14_usize, Move(_14), 16_usize, Move(_16)), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Call(_42 = dump_var(0_usize, 12_usize, Move(_12), 10_usize, Move(_10), 3_usize, Move(_3), 43_usize, _43), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn1(mut _1: u32,mut _2: u8,mut _3: (u32,)) -> i8 {
mir! {
type RET = i8;
let _4: *const f64;
let _5: (u32,);
let _6: Adt57;
let _7: Adt42;
let _8: Adt53;
let _9: (f32,);
let _10: usize;
let _11: Adt55;
let _12: f64;
let _13: (u32,);
let _14: Adt46;
let _15: isize;
let _16: i16;
let _17: u64;
let _18: [u32; 3];
let _19: char;
let _20: &'static f64;
let _21: Adt46;
let _22: *const u128;
let _23: i16;
let _24: Adt54;
let _25: [u128; 6];
let _26: u16;
let _27: Adt50;
let _28: ();
let _29: ();
{
RET = (-105_i8) + 3_i8;
_1 = !_3.0;
_1 = _3.0 >> _2;
RET = 122_i8 + 105_i8;
_5 = (_3.0,);
RET = 2_usize as i8;
_5 = (_3.0,);
RET = !(-110_i8);
RET = 73_i8;
RET = 102_i8 & 127_i8;
_6 = Adt57::Variant1 { fld0: 6557499466799957930_i64 };
_5 = (_1,);
place!(Field::<i64>(Variant(_6, 1), 0)) = (-2711498808231125661107110058483606637_i128) as i64;
_3.0 = _5.0;
place!(Field::<i64>(Variant(_6, 1), 0)) = -(-6241841769616248240_i64);
_5 = (_3.0,);
_3 = (_1,);
place!(Field::<i64>(Variant(_6, 1), 0)) = -(-5374722257555597449_i64);
_1 = _5.0;
_2 = 56_u8;
_9.0 = Field::<i64>(Variant(_6, 1), 0) as f32;
_1 = _3.0;
_2 = 121_u8;
match _2 {
0 => bb1,
1 => bb2,
2 => bb3,
121 => bb5,
_ => bb4
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
place!(Field::<i64>(Variant(_6, 1), 0)) = 6887614883467853218_i64 & (-2057856758450076009_i64);
_2 = !165_u8;
_10 = (-1315291769_i32) as usize;
place!(Field::<i64>(Variant(_6, 1), 0)) = 63831_u16 as i64;
_9.0 = 115883623078002303943216548014349316780_i128 as f32;
SetDiscriminant(_6, 3);
_9.0 = _2 as f32;
_12 = 1880432526_i32 as f64;
_10 = 3201333319960011609_usize;
RET = (-117921381513221130581361650288137504419_i128) as i8;
_10 = !1_usize;
_4 = core::ptr::addr_of!(_12);
_10 = 135270215152668861723301887319451293742_u128 as usize;
_2 = 79_u8;
_5 = (_1,);
_4 = core::ptr::addr_of!((*_4));
_4 = core::ptr::addr_of!(_12);
_13.0 = _5.0;
_3.0 = _5.0;
_16 = 21266_i16 >> _2;
_1 = '\u{d0d12}' as u32;
RET = _9.0 as i8;
place!(Field::<[i128; 5]>(Variant(_6, 3), 0)) = [(-42141473698162568772365736570057754937_i128),(-103673187493738867207308704899824248470_i128),(-74007195287768514332130713185529205345_i128),72979463572187987920801806875846412403_i128,44011759646930896231071227613969317700_i128];
RET = 90_i8;
_9.0 = _10 as f32;
match RET {
90 => bb7,
_ => bb6
}
}
bb6 = {
Return()
}
bb7 = {
_12 = 98522953653828608444576437365322917086_i128 as f64;
RET = -89_i8;
_13 = _3;
_10 = 1986992701547553141_i64 as usize;
_4 = core::ptr::addr_of!((*_4));
_13 = (_3.0,);
_16 = (-522995942_i32) as i16;
_17 = 13259368568083330831_u64 | 15168878316008679065_u64;
_13.0 = _5.0;
_3 = (_13.0,);
match _2 {
0 => bb1,
1 => bb2,
2 => bb6,
3 => bb4,
4 => bb5,
5 => bb8,
6 => bb9,
79 => bb11,
_ => bb10
}
}
bb8 = {
Return()
}
bb9 = {
place!(Field::<i64>(Variant(_6, 1), 0)) = 6887614883467853218_i64 & (-2057856758450076009_i64);
_2 = !165_u8;
_10 = (-1315291769_i32) as usize;
place!(Field::<i64>(Variant(_6, 1), 0)) = 63831_u16 as i64;
_9.0 = 115883623078002303943216548014349316780_i128 as f32;
SetDiscriminant(_6, 3);
_9.0 = _2 as f32;
_12 = 1880432526_i32 as f64;
_10 = 3201333319960011609_usize;
RET = (-117921381513221130581361650288137504419_i128) as i8;
_10 = !1_usize;
_4 = core::ptr::addr_of!(_12);
_10 = 135270215152668861723301887319451293742_u128 as usize;
_2 = 79_u8;
_5 = (_1,);
_4 = core::ptr::addr_of!((*_4));
_4 = core::ptr::addr_of!(_12);
_13.0 = _5.0;
_3.0 = _5.0;
_16 = 21266_i16 >> _2;
_1 = '\u{d0d12}' as u32;
RET = _9.0 as i8;
place!(Field::<[i128; 5]>(Variant(_6, 3), 0)) = [(-42141473698162568772365736570057754937_i128),(-103673187493738867207308704899824248470_i128),(-74007195287768514332130713185529205345_i128),72979463572187987920801806875846412403_i128,44011759646930896231071227613969317700_i128];
RET = 90_i8;
_9.0 = _10 as f32;
match RET {
90 => bb7,
_ => bb6
}
}
bb10 = {
Return()
}
bb11 = {
_16 = _17 as i16;
_5.0 = _9.0 as u32;
Goto(bb12)
}
bb12 = {
_1 = _3.0 + _13.0;
_13.0 = _3.0 << _16;
_9.0 = 415970141388328417_i64 as f32;
_15 = (-1200718765_i32) as isize;
_17 = !6524446766041298063_u64;
place!(Field::<[i128; 5]>(Variant(_6, 3), 0)) = [52483944418413443543771323297089737122_i128,48634473362673255941641469803163038341_i128,(-131341552274739668370756465985332315804_i128),125181749257825781002491835646968449851_i128,(-118768455088911488179057150742737515829_i128)];
_1 = _5.0;
_3.0 = _9.0 as u32;
_14 = Adt46::Variant0 { fld0: _16 };
_19 = '\u{75ac3}';
_3.0 = _13.0;
_15 = !(-92_isize);
_4 = core::ptr::addr_of!(_12);
SetDiscriminant(_6, 0);
_1 = _13.0 ^ _3.0;
_15 = false as isize;
_3.0 = _1;
place!(Field::<(u64,)>(Variant(_6, 0), 5)) = (_17,);
Call(place!(Field::<i16>(Variant(_14, 0), 0)) = fn2(_13, _3.0, _17, _3.0, _3.0, _10, _19, _13.0, _1, _13.0, _19), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
place!(Field::<[i128; 5]>(Variant(_6, 0), 3)) = [51596613862425486208383787513471944831_i128,(-154672585999211093652759717140293874017_i128),50549676267725029086411445785991765064_i128,(-120028800918077747681098735027312735834_i128),(-29285608973488016560894806943072105_i128)];
_3.0 = _1;
place!(Field::<(f32,)>(Variant(_6, 0), 2)).0 = -_9.0;
_3 = (_1,);
place!(Field::<(u32, i8)>(Variant(_6, 0), 1)).0 = _1 - _13.0;
_14 = Adt46::Variant0 { fld0: _16 };
_9 = (Field::<(f32,)>(Variant(_6, 0), 2).0,);
_14 = Adt46::Variant0 { fld0: _16 };
place!(Field::<i16>(Variant(_14, 0), 0)) = _16 + _16;
place!(Field::<i16>(Variant(_14, 0), 0)) = _16;
_2 = 139_u8 - 166_u8;
_18 = [_3.0,_3.0,_3.0];
place!(Field::<(u32, i8)>(Variant(_6, 0), 1)) = (_5.0, RET);
place!(Field::<([i64; 7],)>(Variant(_6, 0), 4)).0 = [3105154837750258550_i64,(-3764331851488054936_i64),8791346220772039244_i64,1099862678952539291_i64,(-3441051285173927294_i64),(-567749290794151221_i64),7703988773590365431_i64];
Goto(bb14)
}
bb14 = {
_10 = !216413397503519253_usize;
_10 = 3_usize + 6_usize;
_6 = Adt57::Variant1 { fld0: 6226506049531818884_i64 };
_19 = '\u{b0644}';
_21 = Move(_14);
_1 = _13.0;
_19 = '\u{95aeb}';
_14 = Move(_21);
_1 = !_13.0;
SetDiscriminant(_14, 1);
_23 = RET as i16;
_1 = (*_4) as u32;
place!(Field::<((u32, i8), *mut ((f32, bool), u64, [u32; 3]), [i128; 5])>(Variant(_14, 1), 3)).2 = [(-2377624450745379065625366976465734920_i128),(-24443996296740030978510060478984160568_i128),165440771152452773998722018455883503592_i128,(-167262187334687310720106516633964870617_i128),31685557986797170483693705829324823863_i128];
_25 = [318720407068041386693154153507289127613_u128,4458399717509804451605220878745431251_u128,169203487716795512872620163284524127334_u128,51002388611347906559650922809649936046_u128,210534255781152492377957181611931931187_u128,251553052215445100608204467160268716809_u128];
_17 = !15712587279041909910_u64;
_3 = (_13.0,);
_25 = [167336467433134430306374497391230611837_u128,213121891205796098788376984834300518487_u128,192902610928478808802202590874715175860_u128,301869768846625107884072333201006691352_u128,49953732756879844981815563252779313287_u128,182264521378657096940589746576211870574_u128];
_17 = _15 as u64;
_14 = Adt46::Variant0 { fld0: _23 };
_23 = !Field::<i16>(Variant(_14, 0), 0);
_21 = Move(_14);
_14 = Move(_21);
_16 = _9.0 as i16;
Goto(bb15)
}
bb15 = {
Call(_28 = dump_var(1_usize, 18_usize, Move(_18), 16_usize, Move(_16), 1_usize, Move(_1), 10_usize, Move(_10)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_28 = dump_var(1_usize, 2_usize, Move(_2), 3_usize, Move(_3), 29_usize, _29, 29_usize, _29), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn2(mut _1: (u32,),mut _2: u32,mut _3: u64,mut _4: u32,mut _5: u32,mut _6: usize,mut _7: char,mut _8: u32,mut _9: u32,mut _10: u32,mut _11: char) -> i16 {
mir! {
type RET = i16;
let _12: f32;
let _13: ((f32, bool), u64, [u32; 3]);
let _14: f64;
let _15: char;
let _16: i16;
let _17: (f32, *const u128);
let _18: bool;
let _19: usize;
let _20: f32;
let _21: i128;
let _22: f64;
let _23: [i64; 7];
let _24: isize;
let _25: [u32; 3];
let _26: u16;
let _27: Adt55;
let _28: f32;
let _29: (f32, *const u128);
let _30: bool;
let _31: u16;
let _32: i16;
let _33: u64;
let _34: [isize; 4];
let _35: f32;
let _36: usize;
let _37: isize;
let _38: [u128; 6];
let _39: (f32, bool);
let _40: ();
let _41: ();
{
_10 = _4;
_9 = !_5;
_7 = _11;
RET = -(-1888_i16);
_12 = 90745755484913588899885398829505667232_i128 as f32;
_13.0.0 = -_12;
_13.0 = (_12, true);
_8 = !_9;
_1.0 = _6 as u32;
_12 = _13.0.0;
_7 = _11;
_13.0 = (_12, true);
_14 = _6 as f64;
_11 = _7;
_1 = (_10,);
_14 = _6 as f64;
_13.0.1 = _5 <= _2;
_13.0.0 = -_12;
_5 = !_2;
_2 = _10;
_15 = _11;
_11 = _15;
_15 = _11;
Goto(bb1)
}
bb1 = {
_13.1 = _3;
_8 = _9;
_13.2 = [_10,_10,_2];
Call(_3 = fn3(_10, _13.0.1, _7, _13), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_13.0 = (_12, true);
_17.0 = _12;
_17.0 = _12;
_1 = (_2,);
_4 = !_10;
_19 = _6;
_16 = RET;
_1 = (_5,);
_8 = _5;
_19 = _6;
_13.0.0 = _12;
_13.0 = (_12, true);
Goto(bb3)
}
bb3 = {
_14 = _16 as f64;
_18 = _5 < _4;
_13.1 = _9 as u64;
_7 = _11;
_5 = !_4;
_3 = !_13.1;
_14 = 156_u8 as f64;
_13.0 = (_17.0, _18);
_21 = 124690218921758471606579787968195571721_i128;
_22 = _14;
_20 = _12;
_13.1 = _12 as u64;
_12 = _3 as f32;
_18 = _13.0.1;
Goto(bb4)
}
bb4 = {
_13.2 = [_2,_2,_5];
_6 = _19;
_10 = !_2;
_11 = _15;
_16 = RET;
_20 = -_17.0;
_18 = _13.0.1;
_8 = _1.0;
Call(_6 = fn18(_18, _12, _13.0, _18, _18, _12, _13, _4, _4, _18, _9, _2, _13.0), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
_7 = _11;
_13.1 = _3;
_26 = 40642_u16;
_20 = _3 as f32;
_19 = _26 as usize;
_24 = 13_isize;
_29.0 = _20;
_23 = [(-9042672402014546911_i64),203754118151408325_i64,(-5765617071504944009_i64),(-3971565582751600316_i64),(-9121275781593572746_i64),4243165005248438619_i64,(-3316063126333822735_i64)];
_15 = _7;
_22 = _14;
_25 = _13.2;
_10 = _1.0;
_16 = _7 as i16;
_11 = _15;
_4 = _10 * _2;
_22 = -_14;
_13.1 = _3;
_21 = (-19183550206781560609823383240628869654_i128);
_13.1 = _3;
_20 = _29.0;
match _24 {
0 => bb6,
1 => bb7,
2 => bb8,
3 => bb9,
13 => bb11,
_ => bb10
}
}
bb6 = {
_13.2 = [_2,_2,_5];
_6 = _19;
_10 = !_2;
_11 = _15;
_16 = RET;
_20 = -_17.0;
_18 = _13.0.1;
_8 = _1.0;
Call(_6 = fn18(_18, _12, _13.0, _18, _18, _12, _13, _4, _4, _18, _9, _2, _13.0), ReturnTo(bb5), UnwindUnreachable())
}
bb7 = {
_14 = _16 as f64;
_18 = _5 < _4;
_13.1 = _9 as u64;
_7 = _11;
_5 = !_4;
_3 = !_13.1;
_14 = 156_u8 as f64;
_13.0 = (_17.0, _18);
_21 = 124690218921758471606579787968195571721_i128;
_22 = _14;
_20 = _12;
_13.1 = _12 as u64;
_12 = _3 as f32;
_18 = _13.0.1;
Goto(bb4)
}
bb8 = {
_13.0 = (_12, true);
_17.0 = _12;
_17.0 = _12;
_1 = (_2,);
_4 = !_10;
_19 = _6;
_16 = RET;
_1 = (_5,);
_8 = _5;
_19 = _6;
_13.0.0 = _12;
_13.0 = (_12, true);
Goto(bb3)
}
bb9 = {
_13.1 = _3;
_8 = _9;
_13.2 = [_10,_10,_2];
Call(_3 = fn3(_10, _13.0.1, _7, _13), ReturnTo(bb2), UnwindUnreachable())
}
bb10 = {
Return()
}
bb11 = {
_17.0 = _29.0;
_30 = _18 < _18;
_22 = -_14;
_13.1 = !_3;
_28 = -_29.0;
_8 = _10;
_13.0.0 = _14 as f32;
_4 = _9;
_34 = [_24,_24,_24,_24];
_16 = RET * RET;
_31 = !_26;
match _24 {
0 => bb9,
1 => bb10,
2 => bb8,
3 => bb12,
4 => bb13,
13 => bb15,
_ => bb14
}
}
bb12 = {
_13.1 = _3;
_8 = _9;
_13.2 = [_10,_10,_2];
Call(_3 = fn3(_10, _13.0.1, _7, _13), ReturnTo(bb2), UnwindUnreachable())
}
bb13 = {
_13.0 = (_12, true);
_17.0 = _12;
_17.0 = _12;
_1 = (_2,);
_4 = !_10;
_19 = _6;
_16 = RET;
_1 = (_5,);
_8 = _5;
_19 = _6;
_13.0.0 = _12;
_13.0 = (_12, true);
Goto(bb3)
}
bb14 = {
_13.2 = [_2,_2,_5];
_6 = _19;
_10 = !_2;
_11 = _15;
_16 = RET;
_20 = -_17.0;
_18 = _13.0.1;
_8 = _1.0;
Call(_6 = fn18(_18, _12, _13.0, _18, _18, _12, _13, _4, _4, _18, _9, _2, _13.0), ReturnTo(bb5), UnwindUnreachable())
}
bb15 = {
_24 = 22_isize ^ 9223372036854775807_isize;
_14 = _22;
_13.0.0 = _17.0 * _28;
_36 = _6;
_7 = _15;
_24 = 283471528656403606194982280370124467665_u128 as isize;
_9 = _10 | _5;
_33 = !_3;
_12 = _24 as f32;
Goto(bb16)
}
bb16 = {
Call(_40 = dump_var(2_usize, 25_usize, Move(_25), 2_usize, Move(_2), 19_usize, Move(_19), 1_usize, Move(_1)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_40 = dump_var(2_usize, 8_usize, Move(_8), 4_usize, Move(_4), 24_usize, Move(_24), 31_usize, Move(_31)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_40 = dump_var(2_usize, 36_usize, Move(_36), 6_usize, Move(_6), 26_usize, Move(_26), 34_usize, Move(_34)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn3(mut _1: u32,mut _2: bool,mut _3: char,mut _4: ((f32, bool), u64, [u32; 3])) -> u64 {
mir! {
type RET = u64;
let _5: char;
let _6: (u32, i8);
let _7: (f32, bool);
let _8: [i64; 7];
let _9: [u128; 6];
let _10: (u32, i8);
let _11: (i8, u32, u16, f64, char, i32);
let _12: (u32, i8);
let _13: isize;
let _14: f32;
let _15: (i64,);
let _16: ([u128; 6],);
let _17: char;
let _18: u16;
let _19: bool;
let _20: ([u128; 6],);
let _21: isize;
let _22: [u128; 6];
let _23: (u32,);
let _24: ([u128; 6],);
let _25: f64;
let _26: bool;
let _27: Adt42;
let _28: Adt45;
let _29: char;
let _30: f32;
let _31: ();
let _32: ();
{
RET = (-56_i8) as u64;
_4.1 = RET;
_5 = _3;
_3 = _5;
_4.2 = [_1,_1,_1];
_4.0.1 = !_2;
_6.0 = 61429120924903792780279622116911006402_i128 as u32;
_7.1 = !_4.0.1;
Call(_4.1 = fn4(_7.1, _4.0.1, _7.1, _4.0.1, _1, _7.1, _2, _2, _4.2, _4.0.1, _7.1, _1, _7.1, _3, _7.1, _4.0.1), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_6 = (_1, 42_i8);
_8 = [(-7201031136605650457_i64),2405031157950261974_i64,8655466121896938821_i64,(-1795352716801024127_i64),(-2226626678536578500_i64),7935193509260418769_i64,2696034942287095521_i64];
_7.0 = _4.0.0 * _4.0.0;
_8 = [(-6415277787053721043_i64),8174677126630723265_i64,(-6288790920760819795_i64),2310535905051992585_i64,(-6220746931510857401_i64),(-3666951151103946499_i64),(-4025889085429740616_i64)];
RET = _4.1;
_9 = [88514857871079965010555987929156406691_u128,225935307874383580629616600301810295096_u128,149440265640616204297142629194159052413_u128,272744553156772634913577816389366671741_u128,215577946547653750371565576604269061223_u128,326968006637180938273192363039887377845_u128];
_1 = _6.0 + _6.0;
_6 = (_1, (-68_i8));
RET = 15359_i16 as u64;
_3 = _5;
_6.0 = (-681612984_i32) as u32;
RET = 4790650869292004056_usize as u64;
_11.2 = 80_u8 as u16;
_12.1 = -_6.1;
_10 = (_1, _6.1);
_11.0 = _12.1 >> _1;
_1 = 55410971566950790799707925702677452401_i128 as u32;
_12 = (_10.0, _10.1);
_6.0 = !_10.0;
Goto(bb2)
}
bb2 = {
_6.1 = _5 as i8;
_11.5 = (-902623488_i32);
_11.1 = _10.0 + _12.0;
_7.0 = _4.0.0 - _4.0.0;
_6.1 = !_11.0;
_11.2 = !26821_u16;
_7.1 = _4.0.1 | _4.0.1;
_6 = (_11.1, _12.1);
_7.0 = _4.0.0;
_1 = _6.0 + _11.1;
_12.1 = _11.0 - _6.1;
_4.0 = _7;
_11.4 = _3;
_12.1 = _11.0;
RET = _4.0.1 as u64;
_6 = _12;
RET = !_4.1;
_4.2 = [_1,_11.1,_10.0];
_11.5 = (-89159152019114729359748592984344885069_i128) as i32;
_4.0.0 = -_7.0;
_16 = (_9,);
_16 = (_9,);
_6 = _12;
_10.1 = _12.1;
_7.1 = _10.1 >= _12.1;
_12.0 = _10.0;
_4.1 = _11.2 as u64;
Call(_4.0.0 = fn7(_12.1, _7.1, _12.1, _4.2), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_16 = (_9,);
_15 = ((-4536580111828070043_i64),);
_2 = !_7.1;
_3 = _11.4;
_16.0 = _9;
_13 = _11.0 as isize;
_11.4 = _3;
_11.1 = _6.0 << _6.1;
_7.1 = !_2;
_10 = (_11.1, _11.0);
_14 = _7.0 - _4.0.0;
_13 = (-37_isize);
_15 = ((-7452599682452277301_i64),);
_19 = _7.1 ^ _2;
_17 = _3;
_18 = !_11.2;
_4.0.0 = -_14;
_20.0 = _9;
Goto(bb4)
}
bb4 = {
_7 = (_4.0.0, _2);
_15 = ((-920592306998075021_i64),);
_15 = ((-854201088376796040_i64),);
_15 = (5043563282906317344_i64,);
_16 = (_9,);
match _13 {
0 => bb2,
1 => bb5,
2 => bb6,
3 => bb7,
340282366920938463463374607431768211419 => bb9,
_ => bb8
}
}
bb5 = {
_16 = (_9,);
_15 = ((-4536580111828070043_i64),);
_2 = !_7.1;
_3 = _11.4;
_16.0 = _9;
_13 = _11.0 as isize;
_11.4 = _3;
_11.1 = _6.0 << _6.1;
_7.1 = !_2;
_10 = (_11.1, _11.0);
_14 = _7.0 - _4.0.0;
_13 = (-37_isize);
_15 = ((-7452599682452277301_i64),);
_19 = _7.1 ^ _2;
_17 = _3;
_18 = !_11.2;
_4.0.0 = -_14;
_20.0 = _9;
Goto(bb4)
}
bb6 = {
_6.1 = _5 as i8;
_11.5 = (-902623488_i32);
_11.1 = _10.0 + _12.0;
_7.0 = _4.0.0 - _4.0.0;
_6.1 = !_11.0;
_11.2 = !26821_u16;
_7.1 = _4.0.1 | _4.0.1;
_6 = (_11.1, _12.1);
_7.0 = _4.0.0;
_1 = _6.0 + _11.1;
_12.1 = _11.0 - _6.1;
_4.0 = _7;
_11.4 = _3;
_12.1 = _11.0;
RET = _4.0.1 as u64;
_6 = _12;
RET = !_4.1;
_4.2 = [_1,_11.1,_10.0];
_11.5 = (-89159152019114729359748592984344885069_i128) as i32;
_4.0.0 = -_7.0;
_16 = (_9,);
_16 = (_9,);
_6 = _12;
_10.1 = _12.1;
_7.1 = _10.1 >= _12.1;
_12.0 = _10.0;
_4.1 = _11.2 as u64;
Call(_4.0.0 = fn7(_12.1, _7.1, _12.1, _4.2), ReturnTo(bb3), UnwindUnreachable())
}
bb7 = {
_6 = (_1, 42_i8);
_8 = [(-7201031136605650457_i64),2405031157950261974_i64,8655466121896938821_i64,(-1795352716801024127_i64),(-2226626678536578500_i64),7935193509260418769_i64,2696034942287095521_i64];
_7.0 = _4.0.0 * _4.0.0;
_8 = [(-6415277787053721043_i64),8174677126630723265_i64,(-6288790920760819795_i64),2310535905051992585_i64,(-6220746931510857401_i64),(-3666951151103946499_i64),(-4025889085429740616_i64)];
RET = _4.1;
_9 = [88514857871079965010555987929156406691_u128,225935307874383580629616600301810295096_u128,149440265640616204297142629194159052413_u128,272744553156772634913577816389366671741_u128,215577946547653750371565576604269061223_u128,326968006637180938273192363039887377845_u128];
_1 = _6.0 + _6.0;
_6 = (_1, (-68_i8));
RET = 15359_i16 as u64;
_3 = _5;
_6.0 = (-681612984_i32) as u32;
RET = 4790650869292004056_usize as u64;
_11.2 = 80_u8 as u16;
_12.1 = -_6.1;
_10 = (_1, _6.1);
_11.0 = _12.1 >> _1;
_1 = 55410971566950790799707925702677452401_i128 as u32;
_12 = (_10.0, _10.1);
_6.0 = !_10.0;
Goto(bb2)
}
bb8 = {
Return()
}
bb9 = {
RET = _4.1;
_8 = [_15.0,_15.0,_15.0,_15.0,_15.0,_15.0,_15.0];
_14 = _15.0 as f32;
_6 = (_1, _12.1);
_7 = (_4.0.0, _19);
_1 = _12.0 << _6.1;
Goto(bb10)
}
bb10 = {
_10 = (_6.0, _11.0);
_11.3 = _15.0 as f64;
_3 = _11.4;
_2 = !_19;
_3 = _5;
_11.0 = !_10.1;
_11.5 = (-254783425_i32);
_12.0 = _11.1 - _10.0;
_11.3 = _1 as f64;
_22 = _9;
_4.0.1 = _2;
_7.1 = _2 <= _2;
_7.1 = _2;
_22 = [189999040473959288114043056316553719200_u128,149054934105282694241103882374529693658_u128,24528769151921594284040759503948175882_u128,96072063136765644276775819879175734343_u128,234740513472602965890793791134575910475_u128,30082397267939288578936371824200831983_u128];
_3 = _11.4;
RET = _4.1 + _4.1;
_4.0.1 = _19;
Call(_10.0 = core::intrinsics::transmute(_6.0), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_26 = _4.0.1 >= _2;
_7.1 = _4.0.1;
_23.0 = _6.0;
_24 = (_9,);
_24.0 = [322686226376178862308138386057509875583_u128,4225471692392281876526621255151467044_u128,203266364590564130194754660717739087554_u128,42240242695999296836747431643743067533_u128,145223608356467236022771481930555135098_u128,58304882889530637464156704827945941539_u128];
_16 = (_22,);
_9 = [172800284171587777810687862378123379804_u128,125773119694818422911188902799840028468_u128,227539797473583877154666908276036016416_u128,182881813311322245567161483464993642890_u128,99100529268209984059145214037593245663_u128,175646115042246125237080351176458391117_u128];
_23.0 = _6.0 << _6.1;
_7.0 = _11.3 as f32;
_15 = (2878553982771232224_i64,);
_10 = _12;
_19 = !_26;
_4.2 = [_10.0,_23.0,_12.0];
match _13 {
0 => bb1,
1 => bb4,
2 => bb3,
3 => bb12,
4 => bb13,
5 => bb14,
340282366920938463463374607431768211419 => bb16,
_ => bb15
}
}
bb12 = {
_16 = (_9,);
_15 = ((-4536580111828070043_i64),);
_2 = !_7.1;
_3 = _11.4;
_16.0 = _9;
_13 = _11.0 as isize;
_11.4 = _3;
_11.1 = _6.0 << _6.1;
_7.1 = !_2;
_10 = (_11.1, _11.0);
_14 = _7.0 - _4.0.0;
_13 = (-37_isize);
_15 = ((-7452599682452277301_i64),);
_19 = _7.1 ^ _2;
_17 = _3;
_18 = !_11.2;
_4.0.0 = -_14;
_20.0 = _9;
Goto(bb4)
}
bb13 = {
RET = _4.1;
_8 = [_15.0,_15.0,_15.0,_15.0,_15.0,_15.0,_15.0];
_14 = _15.0 as f32;
_6 = (_1, _12.1);
_7 = (_4.0.0, _19);
_1 = _12.0 << _6.1;
Goto(bb10)
}
bb14 = {
_16 = (_9,);
_15 = ((-4536580111828070043_i64),);
_2 = !_7.1;
_3 = _11.4;
_16.0 = _9;
_13 = _11.0 as isize;
_11.4 = _3;
_11.1 = _6.0 << _6.1;
_7.1 = !_2;
_10 = (_11.1, _11.0);
_14 = _7.0 - _4.0.0;
_13 = (-37_isize);
_15 = ((-7452599682452277301_i64),);
_19 = _7.1 ^ _2;
_17 = _3;
_18 = !_11.2;
_4.0.0 = -_14;
_20.0 = _9;
Goto(bb4)
}
bb15 = {
_6 = (_1, 42_i8);
_8 = [(-7201031136605650457_i64),2405031157950261974_i64,8655466121896938821_i64,(-1795352716801024127_i64),(-2226626678536578500_i64),7935193509260418769_i64,2696034942287095521_i64];
_7.0 = _4.0.0 * _4.0.0;
_8 = [(-6415277787053721043_i64),8174677126630723265_i64,(-6288790920760819795_i64),2310535905051992585_i64,(-6220746931510857401_i64),(-3666951151103946499_i64),(-4025889085429740616_i64)];
RET = _4.1;
_9 = [88514857871079965010555987929156406691_u128,225935307874383580629616600301810295096_u128,149440265640616204297142629194159052413_u128,272744553156772634913577816389366671741_u128,215577946547653750371565576604269061223_u128,326968006637180938273192363039887377845_u128];
_1 = _6.0 + _6.0;
_6 = (_1, (-68_i8));
RET = 15359_i16 as u64;
_3 = _5;
_6.0 = (-681612984_i32) as u32;
RET = 4790650869292004056_usize as u64;
_11.2 = 80_u8 as u16;
_12.1 = -_6.1;
_10 = (_1, _6.1);
_11.0 = _12.1 >> _1;
_1 = 55410971566950790799707925702677452401_i128 as u32;
_12 = (_10.0, _10.1);
_6.0 = !_10.0;
Goto(bb2)
}
bb16 = {
_21 = 244812646880006376104553231710812958613_u128 as isize;
_13 = -_21;
_12 = (_6.0, _10.1);
_10.0 = !_1;
_7 = _4.0;
_9 = [61302795783646815682519436168143904648_u128,248843788278545486612307191451756926812_u128,261215547516444584350540579060401407752_u128,18128385606950300428871663990740588692_u128,141294201680188323813712860762262877283_u128,211583526860253509106507177517960989087_u128];
_20.0 = [336362648504186129862745645015514883171_u128,277246608681414855637850368467396752645_u128,293839732652137452169685950430183917262_u128,122023150728036889260924782201650233704_u128,213610178345032339781890616494549869288_u128,145645535830724544376866120689079218298_u128];
_7 = _4.0;
_21 = -_13;
_24.0 = _22;
_15.0 = (-1975179760737614950_i64);
_8 = [_15.0,_15.0,_15.0,_15.0,_15.0,_15.0,_15.0];
_12.0 = _1 + _6.0;
_5 = _3;
Goto(bb17)
}
bb17 = {
Call(_31 = dump_var(3_usize, 17_usize, Move(_17), 5_usize, Move(_5), 12_usize, Move(_12), 20_usize, Move(_20)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_31 = dump_var(3_usize, 1_usize, Move(_1), 8_usize, Move(_8), 26_usize, Move(_26), 21_usize, Move(_21)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_31 = dump_var(3_usize, 2_usize, Move(_2), 13_usize, Move(_13), 32_usize, _32, 32_usize, _32), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn4(mut _1: bool,mut _2: bool,mut _3: bool,mut _4: bool,mut _5: u32,mut _6: bool,mut _7: bool,mut _8: bool,mut _9: [u32; 3],mut _10: bool,mut _11: bool,mut _12: u32,mut _13: bool,mut _14: char,mut _15: bool,mut _16: bool) -> u64 {
mir! {
type RET = u64;
let _17: Adt43;
let _18: u32;
let _19: ((u32, i8), *mut ((f32, bool), u64, [u32; 3]), [i128; 5]);
let _20: isize;
let _21: Adt47;
let _22: Adt41;
let _23: (i64,);
let _24: char;
let _25: *const (i8, u32, u16, f64, char, i32);
let _26: Adt47;
let _27: u8;
let _28: [isize; 4];
let _29: isize;
let _30: [isize; 4];
let _31: i64;
let _32: (u32, i8);
let _33: Adt42;
let _34: Adt51;
let _35: u16;
let _36: [isize; 4];
let _37: i8;
let _38: isize;
let _39: (u128, u128, f32, *mut &'static f64, (i8, u32, u16, f64, char, i32));
let _40: u32;
let _41: i128;
let _42: u16;
let _43: Adt54;
let _44: (u64,);
let _45: [u128; 6];
let _46: ();
let _47: ();
{
RET = 2099553222070512627_u64 & 2147353165626722920_u64;
_2 = !_10;
Call(_7 = fn5(_2, _16, _5, _2, _2, _13, _4, _11, _10, _8, _1), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_7 = _4 >= _3;
_14 = '\u{e855}';
_18 = _12 ^ _5;
_7 = _13 != _4;
_11 = _3;
_8 = _5 == _12;
_19.0.0 = (-102_isize) as u32;
_5 = _18;
_19.0 = (_5, 74_i8);
_19.2 = [133255558937306203453498263870029813950_i128,(-3660122969838391619035205581517132748_i128),140138658926395952413276163741833428636_i128,(-69968313522644245983385034169087705132_i128),(-58861712333369410992761252039745964473_i128)];
_19.0.0 = !_5;
_4 = !_7;
_3 = !_8;
_19.0.0 = !_12;
_15 = _11;
_1 = _7 ^ _2;
_20 = 72_isize << _12;
_3 = !_16;
_2 = _1;
_3 = !_7;
_1 = _10 != _7;
Call(RET = core::intrinsics::transmute(_20), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_19.0.0 = _5;
_6 = _3;
RET = (-12975_i16) as u64;
_9 = [_5,_12,_18];
_10 = !_7;
_9 = [_19.0.0,_18,_19.0.0];
RET = _14 as u64;
RET = 10009832298969312211_u64;
_13 = _19.0.1 == _19.0.1;
_14 = '\u{377bb}';
_7 = _13 & _6;
_19.0 = (_5, 13_i8);
Call(_8 = fn6(_19.0.0, _5, _6, _4, _20, RET), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_3 = _7 | _13;
_15 = _1 <= _2;
_6 = !_7;
_14 = '\u{9fc32}';
_23 = ((-7308948600410778593_i64),);
_5 = !_18;
_4 = !_3;
_8 = _5 != _5;
_19.0.1 = 25507_i16 as i8;
Goto(bb4)
}
bb4 = {
RET = !11594648041885693125_u64;
_2 = _15;
_20 = !(-27_isize);
_19.0.0 = (-12139_i16) as u32;
_19.0 = (_18, 125_i8);
_2 = _3;
_4 = _6;
RET = 12843731725066869425_u64;
_7 = !_8;
_7 = _1;
_19.2 = [(-8266922922780086928010210649487398869_i128),(-92130268472041272896058956352919220979_i128),23317420982275654887606760699616178195_i128,34887814256436988999394164739563047581_i128,89367762785869448472236733553981715490_i128];
_11 = _7 | _1;
_20 = 162230840524215257514592904917433744851_u128 as isize;
_19.0.0 = 54971_u16 as u32;
_10 = _4 ^ _11;
RET = 168_u8 as u64;
_20 = !(-9223372036854775808_isize);
_19.0 = (_12, 8_i8);
_12 = 289727649782133076154620632994356661725_u128 as u32;
_24 = _14;
_15 = _6 & _16;
match _19.0.1 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb5,
4 => bb6,
5 => bb7,
8 => bb9,
_ => bb8
}
}
bb5 = {
_3 = _7 | _13;
_15 = _1 <= _2;
_6 = !_7;
_14 = '\u{9fc32}';
_23 = ((-7308948600410778593_i64),);
_5 = !_18;
_4 = !_3;
_8 = _5 != _5;
_19.0.1 = 25507_i16 as i8;
Goto(bb4)
}
bb6 = {
_19.0.0 = _5;
_6 = _3;
RET = (-12975_i16) as u64;
_9 = [_5,_12,_18];
_10 = !_7;
_9 = [_19.0.0,_18,_19.0.0];
RET = _14 as u64;
RET = 10009832298969312211_u64;
_13 = _19.0.1 == _19.0.1;
_14 = '\u{377bb}';
_7 = _13 & _6;
_19.0 = (_5, 13_i8);
Call(_8 = fn6(_19.0.0, _5, _6, _4, _20, RET), ReturnTo(bb3), UnwindUnreachable())
}
bb7 = {
_7 = _4 >= _3;
_14 = '\u{e855}';
_18 = _12 ^ _5;
_7 = _13 != _4;
_11 = _3;
_8 = _5 == _12;
_19.0.0 = (-102_isize) as u32;
_5 = _18;
_19.0 = (_5, 74_i8);
_19.2 = [133255558937306203453498263870029813950_i128,(-3660122969838391619035205581517132748_i128),140138658926395952413276163741833428636_i128,(-69968313522644245983385034169087705132_i128),(-58861712333369410992761252039745964473_i128)];
_19.0.0 = !_5;
_4 = !_7;
_3 = !_8;
_19.0.0 = !_12;
_15 = _11;
_1 = _7 ^ _2;
_20 = 72_isize << _12;
_3 = !_16;
_2 = _1;
_3 = !_7;
_1 = _10 != _7;
Call(RET = core::intrinsics::transmute(_20), ReturnTo(bb2), UnwindUnreachable())
}
bb8 = {
Return()
}
bb9 = {
RET = 81320346515279400_u64 & 14071265886449576423_u64;
_27 = !164_u8;
_19.0.0 = _5 & _5;
_27 = 10_u8;
_6 = _10 <= _10;
_19.0 = (_5, (-120_i8));
_2 = _1 <= _11;
_23.0 = 95871901546253873081915581006049546724_i128 as i64;
_19.0 = (_5, 46_i8);
_23.0 = (-6063880766907717801_i64);
_13 = !_7;
RET = !9325661798543381533_u64;
_22 = Adt41::Variant0 { fld0: 2595208621758003263_usize };
_11 = _10;
_24 = _14;
_19.0.0 = 20284097357049358332846697522622904836_u128 as u32;
_1 = _11;
_31 = _23.0;
_28 = [_20,_20,_20,_20];
_32.1 = _19.0.1;
_23 = (_31,);
_23 = (_31,);
_29 = _20;
_23 = (_31,);
match _23.0 {
0 => bb4,
1 => bb3,
340282366920938463457310726664860493655 => bb11,
_ => bb10
}
}
bb10 = {
_3 = _7 | _13;
_15 = _1 <= _2;
_6 = !_7;
_14 = '\u{9fc32}';
_23 = ((-7308948600410778593_i64),);
_5 = !_18;
_4 = !_3;
_8 = _5 != _5;
_19.0.1 = 25507_i16 as i8;
Goto(bb4)
}
bb11 = {
match _19.0.1 {
0 => bb3,
1 => bb6,
46 => bb13,
_ => bb12
}
}
bb12 = {
_3 = _7 | _13;
_15 = _1 <= _2;
_6 = !_7;
_14 = '\u{9fc32}';
_23 = ((-7308948600410778593_i64),);
_5 = !_18;
_4 = !_3;
_8 = _5 != _5;
_19.0.1 = 25507_i16 as i8;
Goto(bb4)
}
bb13 = {
RET = !15677831289784531743_u64;
place!(Field::<usize>(Variant(_22, 0), 0)) = !5_usize;
_19.0.0 = !_5;
_15 = !_3;
_29 = 229934068760702260482983745285273643157_u128 as isize;
_32 = (_19.0.0, _19.0.1);
_2 = _10 < _15;
_19.0.0 = !_18;
_11 = _3 ^ _2;
SetDiscriminant(_22, 3);
_11 = _10;
place!(Field::<i16>(Variant(_22, 3), 2)) = (-763_i16);
_23.0 = _31 >> _18;
_39.4.0 = _5 as i8;
_8 = !_13;
_8 = _10 < _6;
_39.1 = 52624_u16 as u128;
_18 = _32.0;
_39.4.1 = !_5;
place!(Field::<((u32, i8), *mut ((f32, bool), u64, [u32; 3]), [i128; 5])>(Variant(_22, 3), 1)).0 = (_32.0, _39.4.0);
match _19.0.1 {
0 => bb5,
1 => bb7,
2 => bb14,
3 => bb15,
4 => bb16,
5 => bb17,
46 => bb19,
_ => bb18
}
}
bb14 = {
_3 = _7 | _13;
_15 = _1 <= _2;
_6 = !_7;
_14 = '\u{9fc32}';
_23 = ((-7308948600410778593_i64),);
_5 = !_18;
_4 = !_3;
_8 = _5 != _5;
_19.0.1 = 25507_i16 as i8;
Goto(bb4)
}
bb15 = {
_3 = _7 | _13;
_15 = _1 <= _2;
_6 = !_7;
_14 = '\u{9fc32}';
_23 = ((-7308948600410778593_i64),);
_5 = !_18;
_4 = !_3;
_8 = _5 != _5;
_19.0.1 = 25507_i16 as i8;
Goto(bb4)
}
bb16 = {
_3 = _7 | _13;
_15 = _1 <= _2;
_6 = !_7;
_14 = '\u{9fc32}';
_23 = ((-7308948600410778593_i64),);
_5 = !_18;
_4 = !_3;
_8 = _5 != _5;
_19.0.1 = 25507_i16 as i8;
Goto(bb4)
}
bb17 = {
_7 = _4 >= _3;
_14 = '\u{e855}';
_18 = _12 ^ _5;
_7 = _13 != _4;
_11 = _3;
_8 = _5 == _12;
_19.0.0 = (-102_isize) as u32;
_5 = _18;
_19.0 = (_5, 74_i8);
_19.2 = [133255558937306203453498263870029813950_i128,(-3660122969838391619035205581517132748_i128),140138658926395952413276163741833428636_i128,(-69968313522644245983385034169087705132_i128),(-58861712333369410992761252039745964473_i128)];
_19.0.0 = !_5;
_4 = !_7;
_3 = !_8;
_19.0.0 = !_12;
_15 = _11;
_1 = _7 ^ _2;
_20 = 72_isize << _12;
_3 = !_16;
_2 = _1;
_3 = !_7;
_1 = _10 != _7;
Call(RET = core::intrinsics::transmute(_20), ReturnTo(bb2), UnwindUnreachable())
}
bb18 = {
RET = !11594648041885693125_u64;
_2 = _15;
_20 = !(-27_isize);
_19.0.0 = (-12139_i16) as u32;
_19.0 = (_18, 125_i8);
_2 = _3;
_4 = _6;
RET = 12843731725066869425_u64;
_7 = !_8;
_7 = _1;
_19.2 = [(-8266922922780086928010210649487398869_i128),(-92130268472041272896058956352919220979_i128),23317420982275654887606760699616178195_i128,34887814256436988999394164739563047581_i128,89367762785869448472236733553981715490_i128];
_11 = _7 | _1;
_20 = 162230840524215257514592904917433744851_u128 as isize;
_19.0.0 = 54971_u16 as u32;
_10 = _4 ^ _11;
RET = 168_u8 as u64;
_20 = !(-9223372036854775808_isize);
_19.0 = (_12, 8_i8);
_12 = 289727649782133076154620632994356661725_u128 as u32;
_24 = _14;
_15 = _6 & _16;
match _19.0.1 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb5,
4 => bb6,
5 => bb7,
8 => bb9,
_ => bb8
}
}
bb19 = {
_42 = 26804_u16;
place!(Field::<((u32, i8), *mut ((f32, bool), u64, [u32; 3]), [i128; 5])>(Variant(_22, 3), 1)).2 = [123533204194546732122496361978794573572_i128,(-90713265719069921831533067409559338057_i128),(-156014784279508311242329948658038278269_i128),(-69968213969269767464279914903593557453_i128),66791783509225533005870684613469442281_i128];
_40 = _32.0;
_39.2 = _23.0 as f32;
_44.0 = !RET;
Goto(bb20)
}
bb20 = {
Call(_46 = dump_var(4_usize, 14_usize, Move(_14), 3_usize, Move(_3), 20_usize, Move(_20), 29_usize, Move(_29)), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
Call(_46 = dump_var(4_usize, 23_usize, Move(_23), 27_usize, Move(_27), 4_usize, Move(_4), 9_usize, Move(_9)), ReturnTo(bb22), UnwindUnreachable())
}
bb22 = {
Call(_46 = dump_var(4_usize, 7_usize, Move(_7), 6_usize, Move(_6), 32_usize, Move(_32), 5_usize, Move(_5)), ReturnTo(bb23), UnwindUnreachable())
}
bb23 = {
Call(_46 = dump_var(4_usize, 44_usize, Move(_44), 18_usize, Move(_18), 47_usize, _47, 47_usize, _47), ReturnTo(bb24), UnwindUnreachable())
}
bb24 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn5(mut _1: bool,mut _2: bool,mut _3: u32,mut _4: bool,mut _5: bool,mut _6: bool,mut _7: bool,mut _8: bool,mut _9: bool,mut _10: bool,mut _11: bool) -> bool {
mir! {
type RET = bool;
let _12: char;
let _13: f32;
let _14: (u64,);
let _15: bool;
let _16: ();
let _17: ();
{
_9 = _8;
_6 = _11;
RET = _4 > _1;
_11 = RET <= RET;
RET = !_4;
_14 = (14065635331624691667_u64,);
_9 = !_1;
_2 = _5 <= _11;
RET = _5;
_1 = !_10;
_10 = _9;
RET = !_11;
_10 = _6;
_10 = !_6;
_3 = 2167819634_u32 >> _14.0;
_5 = _4;
RET = _5 < _10;
_14.0 = '\u{f90f0}' as u64;
RET = !_6;
_12 = '\u{802d9}';
_9 = _2 <= _2;
_15 = !_1;
_7 = _4;
Goto(bb1)
}
bb1 = {
Call(_16 = dump_var(5_usize, 5_usize, Move(_5), 3_usize, Move(_3), 14_usize, Move(_14), 10_usize, Move(_10)), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Call(_16 = dump_var(5_usize, 7_usize, Move(_7), 2_usize, Move(_2), 12_usize, Move(_12), 17_usize, _17), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn6(mut _1: u32,mut _2: u32,mut _3: bool,mut _4: bool,mut _5: isize,mut _6: u64) -> bool {
mir! {
type RET = bool;
let _7: isize;
let _8: [u32; 3];
let _9: (u32, i8);
let _10: ();
let _11: ();
{
RET = _4;
_6 = 2901555434493931204_u64;
_7 = _5 | _5;
_6 = 15619585052473561796_u64 | 5360002297652848156_u64;
_8 = [_1,_1,_2];
RET = !_3;
_8 = [_2,_1,_1];
_8 = [_2,_1,_1];
_1 = _2 << _5;
_8 = [_1,_1,_2];
_6 = !10595511095541945347_u64;
_5 = _7 >> _7;
Goto(bb1)
}
bb1 = {
Call(_10 = dump_var(6_usize, 5_usize, Move(_5), 7_usize, Move(_7), 2_usize, Move(_2), 8_usize, Move(_8)), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn7(mut _1: i8,mut _2: bool,mut _3: i8,mut _4: [u32; 3]) -> f32 {
mir! {
type RET = f32;
let _5: bool;
let _6: Adt44;
let _7: char;
let _8: isize;
let _9: u32;
let _10: f64;
let _11: u128;
let _12: Adt43;
let _13: (u32,);
let _14: f64;
let _15: (u64,);
let _16: f64;
let _17: u64;
let _18: (u32, i8);
let _19: *const f64;
let _20: (u64,);
let _21: Adt42;
let _22: [i64; 7];
let _23: char;
let _24: f64;
let _25: (u32,);
let _26: ();
let _27: ();
{
_2 = !true;
_1 = -_3;
_2 = true ^ false;
_3 = _1;
RET = 282184554948640815478366790814057752266_u128 as f32;
RET = 11297637266843610480_u64 as f32;
_2 = !false;
_4 = [3218180324_u32,1926663743_u32,3957090622_u32];
RET = (-1337700417_i32) as f32;
_1 = !_3;
_4 = [3552312422_u32,305252653_u32,2796016258_u32];
_1 = (-49_isize) as i8;
_7 = '\u{f558b}';
_3 = RET as i8;
Call(_4 = fn8(_7, RET, RET, _1, _1, _7, _3, RET, _7, RET, _1), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
RET = 3737335395651386362_u64 as f32;
Call(_3 = core::intrinsics::bswap(_1), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
RET = 1683523558_u32 as f32;
_9 = !1730766928_u32;
_3 = _1 * _1;
_4 = [_9,_9,_9];
RET = _3 as f32;
_2 = !false;
_8 = !(-111_isize);
_5 = _9 < _9;
_9 = 2545886527_u32;
_4 = [_9,_9,_9];
_9 = 140663515453132817_u64 as u32;
_9 = 3068492899_u32 & 2006638439_u32;
_2 = _5;
_2 = _5;
_5 = _2;
RET = (-2956072225735004191_i64) as f32;
_8 = 57797_u16 as isize;
_5 = !_2;
_8 = (-9223372036854775808_isize);
_5 = !_2;
_2 = _3 > _1;
_8 = (-112_isize);
RET = 37684_u16 as f32;
_3 = 330021496092857017278425998367218046035_u128 as i8;
_3 = _1;
_8 = _5 as isize;
_3 = (-1359_i16) as i8;
_9 = !4137854556_u32;
Call(_9 = fn17(_8, _2, _7, _3, _5, _5, _4, _8, _2, _3, _2, _5, _5), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_5 = _2;
_5 = !_2;
_9 = !3423714553_u32;
RET = (-21277_i16) as f32;
_8 = (-875294967_i32) as isize;
_1 = _3 >> _8;
_7 = '\u{8ef47}';
_8 = -9223372036854775807_isize;
Goto(bb4)
}
bb4 = {
_8 = 98_isize;
RET = (-7816_i16) as f32;
_9 = 3969401513_u32;
_13.0 = !_9;
RET = 41_u8 as f32;
_5 = _2 & _2;
_8 = (-9223372036854775808_isize) + 9223372036854775807_isize;
_7 = '\u{a660e}';
match _9 {
0 => bb5,
1 => bb6,
2 => bb7,
3 => bb8,
4 => bb9,
5 => bb10,
3969401513 => bb12,
_ => bb11
}
}
bb5 = {
_5 = _2;
_5 = !_2;
_9 = !3423714553_u32;
RET = (-21277_i16) as f32;
_8 = (-875294967_i32) as isize;
_1 = _3 >> _8;
_7 = '\u{8ef47}';
_8 = -9223372036854775807_isize;
Goto(bb4)
}
bb6 = {
RET = 1683523558_u32 as f32;
_9 = !1730766928_u32;
_3 = _1 * _1;
_4 = [_9,_9,_9];
RET = _3 as f32;
_2 = !false;
_8 = !(-111_isize);
_5 = _9 < _9;
_9 = 2545886527_u32;
_4 = [_9,_9,_9];
_9 = 140663515453132817_u64 as u32;
_9 = 3068492899_u32 & 2006638439_u32;
_2 = _5;
_2 = _5;
_5 = _2;
RET = (-2956072225735004191_i64) as f32;
_8 = 57797_u16 as isize;
_5 = !_2;
_8 = (-9223372036854775808_isize);
_5 = !_2;
_2 = _3 > _1;
_8 = (-112_isize);
RET = 37684_u16 as f32;
_3 = 330021496092857017278425998367218046035_u128 as i8;
_3 = _1;
_8 = _5 as isize;
_3 = (-1359_i16) as i8;
_9 = !4137854556_u32;
Call(_9 = fn17(_8, _2, _7, _3, _5, _5, _4, _8, _2, _3, _2, _5, _5), ReturnTo(bb3), UnwindUnreachable())
}
bb7 = {
RET = 3737335395651386362_u64 as f32;
Call(_3 = core::intrinsics::bswap(_1), ReturnTo(bb2), UnwindUnreachable())
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
Return()
}
bb12 = {
_11 = 136879162797091211115098560342641137559_u128;
_8 = (-9223372036854775808_isize);
_15 = (3813844880727849875_u64,);
_10 = _1 as f64;
_14 = _10;
RET = _8 as f32;
_13 = (_9,);
_8 = 9223372036854775807_isize;
_18.1 = _7 as i8;
_14 = _13.0 as f64;
_1 = -_18.1;
_13.0 = _9;
_11 = 139015930142030341063940897612264702725_u128 | 9459067720797221721194652334660434239_u128;
_17 = _15.0;
_7 = '\u{94e6c}';
_19 = core::ptr::addr_of!(_14);
_18.0 = _7 as u32;
_10 = _11 as f64;
_2 = _11 != _11;
_15.0 = RET as u64;
Goto(bb13)
}
bb13 = {
_22 = [(-1959804784011858057_i64),(-1087447439520209335_i64),7367523425694527140_i64,(-3888505050978437564_i64),(-5785359754477570266_i64),3332814747370392373_i64,(-1586746547737318811_i64)];
match _8 {
9223372036854775807 => bb14,
_ => bb10
}
}
bb14 = {
RET = 16546013691938493570_usize as f32;
_5 = (*_19) <= _10;
_18.0 = _9;
_14 = 4_usize as f64;
_11 = 143890308738784235700804033682277450887_u128 * 98665080220419639024166173319974705382_u128;
_18.0 = !_13.0;
_16 = _1 as f64;
RET = _8 as f32;
_14 = (-9132051167899483236_i64) as f64;
_17 = !_15.0;
_23 = _7;
_21 = Adt42::Variant1 { fld0: _13,fld1: _15 };
_18.1 = _3;
Goto(bb15)
}
bb15 = {
Call(_26 = dump_var(7_usize, 5_usize, Move(_5), 1_usize, Move(_1), 17_usize, Move(_17), 11_usize, Move(_11)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_26 = dump_var(7_usize, 13_usize, Move(_13), 3_usize, Move(_3), 7_usize, Move(_7), 27_usize, _27), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn8(mut _1: char,mut _2: f32,mut _3: f32,mut _4: i8,mut _5: i8,mut _6: char,mut _7: i8,mut _8: f32,mut _9: char,mut _10: f32,mut _11: i8) -> [u32; 3] {
mir! {
type RET = [u32; 3];
let _12: (f32,);
let _13: (u32,);
let _14: i128;
let _15: char;
let _16: i128;
let _17: ([i64; 7],);
let _18: char;
let _19: u32;
let _20: u8;
let _21: *const u128;
let _22: (f32, *const u128);
let _23: [i128; 5];
let _24: Adt41;
let _25: (u32,);
let _26: i128;
let _27: i32;
let _28: (u32, i8);
let _29: *const f64;
let _30: f64;
let _31: char;
let _32: (f32, *const u128);
let _33: u32;
let _34: [isize; 4];
let _35: isize;
let _36: (u64,);
let _37: [u32; 3];
let _38: ();
let _39: ();
{
_2 = 136662720_u32 as f32;
_1 = _6;
_14 = -(-97230756841852660856800828153120984483_i128);
RET = [1725808655_u32,3334099547_u32,325965311_u32];
_13.0 = 2453194894_u32 * 583376631_u32;
_7 = _4;
_9 = _6;
_11 = _5;
_13 = (820361177_u32,);
_5 = !_7;
_15 = _9;
_13.0 = _15 as u32;
_1 = _9;
_12.0 = _2;
_9 = _1;
_9 = _6;
_12.0 = _10;
_16 = _14;
_2 = _8 * _3;
_15 = _9;
_8 = (-2034_i16) as f32;
Goto(bb1)
}
bb1 = {
_11 = _5 + _7;
_6 = _9;
_2 = -_12.0;
RET = [_13.0,_13.0,_13.0];
_4 = _5 | _11;
_12.0 = _8 + _10;
_17.0 = [356565906339394207_i64,(-5647643718499479309_i64),5463813521399774138_i64,(-6374718282919513906_i64),624634862343813547_i64,8515304237646826914_i64,6469207063045981418_i64];
_4 = _16 as i8;
_1 = _15;
_13 = (3312408167_u32,);
_2 = _12.0 * _12.0;
_18 = _1;
_13 = (288365713_u32,);
RET = [_13.0,_13.0,_13.0];
_18 = _15;
_2 = -_12.0;
_11 = -_5;
match _13.0 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
288365713 => bb8,
_ => bb7
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_6 = _18;
_2 = _12.0;
_17.0 = [103700171131381822_i64,8204027987580138515_i64,3096030672939740700_i64,(-4615729484385693128_i64),7588533847115556772_i64,379504313779172403_i64,8508785548318350276_i64];
_14 = _16;
_7 = !_4;
_6 = _9;
_9 = _18;
_1 = _18;
_2 = -_12.0;
_18 = _1;
_14 = _16 & _16;
_5 = _7 << _11;
_9 = _6;
_13 = (178671938_u32,);
_4 = _5 ^ _5;
_15 = _1;
_12 = (_2,);
_12 = (_10,);
_10 = -_3;
_15 = _1;
_10 = 6681742998277305052_u64 as f32;
_13 = (4225000825_u32,);
Call(_9 = fn9(_17, _17.0, _17.0, _12, _8, _2, _15, _2, _16), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
_3 = 171_u8 as f32;
_13.0 = 4243753900_u32;
_19 = !_13.0;
_15 = _6;
_18 = _15;
_3 = _14 as f32;
_8 = _3;
_16 = (-4139_i16) as i128;
RET = [_13.0,_13.0,_13.0];
_15 = _18;
_2 = 151744407040429157396581243889853149613_u128 as f32;
_23 = [_14,_14,_14,_16,_16];
_19 = _13.0 << _14;
_24 = Adt41::Variant0 { fld0: 2_usize };
_13.0 = _19;
place!(Field::<usize>(Variant(_24, 0), 0)) = !6_usize;
_14 = _16;
_12.0 = -_10;
_25 = (_19,);
_16 = _14 >> _13.0;
_3 = 16436495845609777698_u64 as f32;
_1 = _6;
_8 = 28689_i16 as f32;
Goto(bb10)
}
bb10 = {
_16 = !_14;
_25.0 = _19 * _19;
_6 = _18;
_22.0 = _8;
_13 = (_25.0,);
_28 = (_25.0, _4);
_20 = 239_u8;
_18 = _1;
_4 = _18 as i8;
_18 = _9;
match _20 {
0 => bb9,
1 => bb7,
239 => bb11,
_ => bb8
}
}
bb11 = {
_13 = (_25.0,);
_15 = _6;
_23 = [_14,_16,_14,_14,_16];
_4 = !_5;
_3 = _12.0 * _22.0;
_15 = _9;
_6 = _18;
SetDiscriminant(_24, 1);
_18 = _6;
_12 = (_3,);
_7 = !_28.1;
_13 = _25;
_28.1 = 15239090227258427854_u64 as i8;
_15 = _6;
_28.1 = 1189788386_i32 as i8;
_29 = core::ptr::addr_of!(_30);
_24 = Adt41::Variant0 { fld0: 11267184360890751216_usize };
_28.0 = (-5870703257517410726_i64) as u32;
_29 = core::ptr::addr_of!((*_29));
Goto(bb12)
}
bb12 = {
_22.0 = 416095094_i32 as f32;
_4 = _5 + _11;
_32.0 = _12.0 - _12.0;
_3 = _32.0;
_28 = (_25.0, _7);
_32.0 = (-6957_i16) as f32;
_26 = _14 >> _13.0;
RET = [_25.0,_25.0,_13.0];
_30 = _26 as f64;
_4 = _28.1 >> _28.0;
_25 = (_13.0,);
_25.0 = _1 as u32;
_22.0 = _10 * _3;
_10 = _12.0 * _12.0;
_5 = 10041_i16 as i8;
_14 = (-14_isize) as i128;
_27 = !(-1426667880_i32);
_28.1 = _7 >> _26;
_1 = _18;
_16 = -_26;
_30 = _25.0 as f64;
_30 = _13.0 as f64;
Call(RET = fn16(_13, _28.1, _13.0, _12.0, _17, (*_29)), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
_33 = _28.0 & _28.0;
_6 = _15;
Goto(bb14)
}
bb14 = {
Call(_38 = dump_var(8_usize, 5_usize, Move(_5), 26_usize, Move(_26), 25_usize, Move(_25), 20_usize, Move(_20)), ReturnTo(bb15), UnwindUnreachable())
}
bb15 = {
Call(_38 = dump_var(8_usize, 7_usize, Move(_7), 1_usize, Move(_1), 6_usize, Move(_6), 11_usize, Move(_11)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_38 = dump_var(8_usize, 15_usize, Move(_15), 19_usize, Move(_19), 39_usize, _39, 39_usize, _39), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn9(mut _1: ([i64; 7],),mut _2: [i64; 7],mut _3: [i64; 7],mut _4: (f32,),mut _5: f32,mut _6: f32,mut _7: char,mut _8: f32,mut _9: i128) -> char {
mir! {
type RET = char;
let _10: [i128; 5];
let _11: i32;
let _12: bool;
let _13: isize;
let _14: [u128; 6];
let _15: bool;
let _16: u128;
let _17: (u32,);
let _18: f64;
let _19: f64;
let _20: ([i64; 7],);
let _21: [u32; 3];
let _22: ([u128; 6],);
let _23: ([i64; 7],);
let _24: Adt45;
let _25: char;
let _26: char;
let _27: char;
let _28: (f32,);
let _29: i32;
let _30: ();
let _31: ();
{
_10 = [_9,_9,_9,_9,_9];
_10 = [_9,_9,_9,_9,_9];
_1 = (_3,);
_9 = 3_usize as i128;
_10 = [_9,_9,_9,_9,_9];
_7 = '\u{2e207}';
RET = _7;
_10 = [_9,_9,_9,_9,_9];
_8 = _4.0 - _4.0;
RET = _7;
_2 = _3;
Call(_2 = fn10(_1, _6, _1, _3, _1, _1, _5, _3, _5, _6), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_1 = (_3,);
_2 = _3;
_5 = _6 + _4.0;
_1.0 = [(-8528582768532463632_i64),5039938708991961303_i64,2176781484775939233_i64,(-7097603359448599126_i64),6538972092789825381_i64,1790757722107152887_i64,238385524951399093_i64];
RET = _7;
_2 = _3;
_1.0 = _3;
_7 = RET;
_2 = [(-4786811120198718534_i64),8911136572762119538_i64,3839471914196801934_i64,1047898447525696965_i64,(-5350877025787768978_i64),(-4788120716055494294_i64),(-2813826723802202970_i64)];
_7 = RET;
RET = _7;
RET = _7;
_2 = [2555389886249703358_i64,(-8167246743717665087_i64),1541862497827474866_i64,(-2060831880091937832_i64),(-5438344934281373896_i64),(-772664925115748578_i64),(-9182446881646296877_i64)];
RET = _7;
_2 = [9036120652648663577_i64,7897804727856960815_i64,7514589567149514430_i64,(-4752580485344475685_i64),1016337747563531277_i64,6362115698230079548_i64,(-2341021178806858190_i64)];
_1 = (_3,);
_1.0 = _3;
_9 = !37814181777604903246824891221369314190_i128;
_4.0 = -_8;
_4.0 = _5 + _6;
_10 = [_9,_9,_9,_9,_9];
_5 = _4.0;
_4 = (_6,);
_12 = false;
RET = _7;
_4 = (_5,);
Call(_4 = fn11(_6, _2, _3, _5, _1.0, _1.0, _2, _1, _2, _3, _1.0, _3, _3, _5), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_3 = [8163340302705775087_i64,(-399777357295802261_i64),(-6979071334300883505_i64),6128023219264720835_i64,(-2052640131487844758_i64),(-5117937632314786020_i64),9008187860574227146_i64];
_15 = _12;
_2 = _1.0;
_4 = (_6,);
_11 = (-79488304_i32);
_13 = (-123_isize) >> _11;
_4.0 = _8 * _5;
RET = _7;
_1.0 = _2;
_12 = _15;
_2 = [(-439123567698680478_i64),6291451436534123186_i64,(-1798370982804893792_i64),5329275402975101586_i64,(-2379290487090482120_i64),(-7589511240514910608_i64),(-581208722787830129_i64)];
_1 = (_2,);
_11 = 6401327545964305717_usize as i32;
_8 = _13 as f32;
_1 = (_2,);
_13 = (-9223372036854775808_isize) | (-9223372036854775808_isize);
_16 = 107_i8 as u128;
_14 = [_16,_16,_16,_16,_16,_16];
RET = _7;
_13 = (-65_isize);
_7 = RET;
_10 = [_9,_9,_9,_9,_9];
_4 = (_5,);
_12 = !_15;
_4 = (_5,);
_16 = 299232738683089267443192820440638060738_u128 + 76773104920924031074833744162986288895_u128;
_16 = 110848521990092251480869907867557318605_u128 ^ 326687751230015864555937321228451435242_u128;
match _13 {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
4 => bb7,
340282366920938463463374607431768211391 => bb9,
_ => bb8
}
}
bb3 = {
_1 = (_3,);
_2 = _3;
_5 = _6 + _4.0;
_1.0 = [(-8528582768532463632_i64),5039938708991961303_i64,2176781484775939233_i64,(-7097603359448599126_i64),6538972092789825381_i64,1790757722107152887_i64,238385524951399093_i64];
RET = _7;
_2 = _3;
_1.0 = _3;
_7 = RET;
_2 = [(-4786811120198718534_i64),8911136572762119538_i64,3839471914196801934_i64,1047898447525696965_i64,(-5350877025787768978_i64),(-4788120716055494294_i64),(-2813826723802202970_i64)];
_7 = RET;
RET = _7;
RET = _7;
_2 = [2555389886249703358_i64,(-8167246743717665087_i64),1541862497827474866_i64,(-2060831880091937832_i64),(-5438344934281373896_i64),(-772664925115748578_i64),(-9182446881646296877_i64)];
RET = _7;
_2 = [9036120652648663577_i64,7897804727856960815_i64,7514589567149514430_i64,(-4752580485344475685_i64),1016337747563531277_i64,6362115698230079548_i64,(-2341021178806858190_i64)];
_1 = (_3,);
_1.0 = _3;
_9 = !37814181777604903246824891221369314190_i128;
_4.0 = -_8;
_4.0 = _5 + _6;
_10 = [_9,_9,_9,_9,_9];
_5 = _4.0;
_4 = (_6,);
_12 = false;
RET = _7;
_4 = (_5,);
Call(_4 = fn11(_6, _2, _3, _5, _1.0, _1.0, _2, _1, _2, _3, _1.0, _3, _3, _5), ReturnTo(bb2), UnwindUnreachable())
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
_4.0 = _5;
_1.0 = [(-3070277606464810721_i64),4035914938281783551_i64,(-6787685695613997691_i64),6222138697827692906_i64,390754301439580370_i64,(-284208475020246025_i64),(-358683809810563989_i64)];
_14 = [_16,_16,_16,_16,_16,_16];
_1 = (_3,);
_16 = 111587099094059284514003587932723932238_u128;
_2 = [(-7857009961364979802_i64),(-4514803108660006644_i64),5666320025503164394_i64,(-5639654927356655196_i64),5049148579139739287_i64,6067226268221164988_i64,4767231076345638736_i64];
_3 = [2917522119931547558_i64,5348141528151902182_i64,(-6028576892454880340_i64),5898900552326308536_i64,1981774369723513701_i64,1327119782228493510_i64,(-3259981957754982629_i64)];
_12 = _15;
_18 = 2804091862429868984_usize as f64;
_6 = -_4.0;
_8 = _4.0;
_7 = RET;
_13 = !(-68_isize);
_16 = _13 as u128;
_2 = [(-2148043663130089178_i64),(-5445733509737208369_i64),2769770183452996691_i64,6492846696122617222_i64,(-5432243157182503265_i64),8350749091917925347_i64,(-587951904413849757_i64)];
_9 = !(-156504803630464421308739969132952084038_i128);
_8 = _5 * _5;
_15 = _12;
_18 = 7209374110491661424_u64 as f64;
_18 = 2571285112_u32 as f64;
RET = _7;
_1 = (_3,);
_1.0 = [(-3915268130964633358_i64),257122317418014845_i64,5994111971292995720_i64,(-3735272318208821859_i64),8686453266240987942_i64,3656804330153549261_i64,4306082490649553899_i64];
Goto(bb10)
}
bb10 = {
RET = _7;
_20 = (_2,);
_5 = _11 as f32;
RET = _7;
Goto(bb11)
}
bb11 = {
_17.0 = !1441606143_u32;
_19 = _16 as f64;
_17 = (822445889_u32,);
_20 = (_2,);
_18 = _19 + _19;
_20 = (_1.0,);
_4 = (_6,);
_19 = _18;
_9 = 140340650707579389702877560173717814583_i128;
_10 = [_9,_9,_9,_9,_9];
_1.0 = [2480744708263292472_i64,(-2523163906273550606_i64),(-4662026262506101293_i64),(-7000666608757992668_i64),(-1878485408861644985_i64),(-2365541915508409307_i64),(-8924793932606163548_i64)];
_18 = _19 - _19;
_1.0 = _2;
_9 = 2_usize as i128;
_15 = _6 == _4.0;
_17.0 = 4275330612_u32 * 3320222704_u32;
_17 = (3343087907_u32,);
_18 = -_19;
_22.0 = [_16,_16,_16,_16,_16,_16];
_14 = [_16,_16,_16,_16,_16,_16];
_22 = (_14,);
RET = _7;
_9 = 5_usize as i128;
match _17.0 {
0 => bb5,
3343087907 => bb13,
_ => bb12
}
}
bb12 = {
_4.0 = _5;
_1.0 = [(-3070277606464810721_i64),4035914938281783551_i64,(-6787685695613997691_i64),6222138697827692906_i64,390754301439580370_i64,(-284208475020246025_i64),(-358683809810563989_i64)];
_14 = [_16,_16,_16,_16,_16,_16];
_1 = (_3,);
_16 = 111587099094059284514003587932723932238_u128;
_2 = [(-7857009961364979802_i64),(-4514803108660006644_i64),5666320025503164394_i64,(-5639654927356655196_i64),5049148579139739287_i64,6067226268221164988_i64,4767231076345638736_i64];
_3 = [2917522119931547558_i64,5348141528151902182_i64,(-6028576892454880340_i64),5898900552326308536_i64,1981774369723513701_i64,1327119782228493510_i64,(-3259981957754982629_i64)];
_12 = _15;
_18 = 2804091862429868984_usize as f64;
_6 = -_4.0;
_8 = _4.0;
_7 = RET;
_13 = !(-68_isize);
_16 = _13 as u128;
_2 = [(-2148043663130089178_i64),(-5445733509737208369_i64),2769770183452996691_i64,6492846696122617222_i64,(-5432243157182503265_i64),8350749091917925347_i64,(-587951904413849757_i64)];
_9 = !(-156504803630464421308739969132952084038_i128);
_8 = _5 * _5;
_15 = _12;
_18 = 7209374110491661424_u64 as f64;
_18 = 2571285112_u32 as f64;
RET = _7;
_1 = (_3,);
_1.0 = [(-3915268130964633358_i64),257122317418014845_i64,5994111971292995720_i64,(-3735272318208821859_i64),8686453266240987942_i64,3656804330153549261_i64,4306082490649553899_i64];
Goto(bb10)
}
bb13 = {
_15 = _12;
_16 = !137085605643234993292918476397247852659_u128;
_2 = [9173774438479563134_i64,(-4681147357693479422_i64),8243907228760775366_i64,(-4807485543058006282_i64),413417803989292303_i64,877403838158650474_i64,(-3306506617165030548_i64)];
_10 = [_9,_9,_9,_9,_9];
_13 = -9223372036854775807_isize;
_23 = _20;
_8 = _5 * _4.0;
_21 = [_17.0,_17.0,_17.0];
_22.0 = [_16,_16,_16,_16,_16,_16];
_7 = RET;
Call(_18 = fn12(_3, _3, _2, _3, _21, _23, _2, _2, _23, _17.0, _23.0, _20.0, _7), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
_23 = (_2,);
_23.0 = [7348614752838494222_i64,2087609525607778811_i64,6946050359031363136_i64,7323440211060121156_i64,7139989628893674597_i64,(-824464611801068881_i64),8797354070160088594_i64];
_12 = !_15;
RET = _7;
_4.0 = -_6;
_23 = (_3,);
_7 = RET;
_9 = (-105388342616876327670886243474062309415_i128);
_9 = 11731840972762726244_u64 as i128;
_18 = -_19;
_4.0 = _18 as f32;
_23.0 = _20.0;
_20.0 = _2;
_28.0 = _6 + _6;
_19 = 3929655999261167893_i64 as f64;
Goto(bb15)
}
bb15 = {
Call(_30 = dump_var(9_usize, 9_usize, Move(_9), 2_usize, Move(_2), 16_usize, Move(_16), 1_usize, Move(_1)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_30 = dump_var(9_usize, 11_usize, Move(_11), 10_usize, Move(_10), 3_usize, Move(_3), 13_usize, Move(_13)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn10(mut _1: ([i64; 7],),mut _2: f32,mut _3: ([i64; 7],),mut _4: [i64; 7],mut _5: ([i64; 7],),mut _6: ([i64; 7],),mut _7: f32,mut _8: [i64; 7],mut _9: f32,mut _10: f32) -> [i64; 7] {
mir! {
type RET = [i64; 7];
let _11: Adt50;
let _12: i8;
let _13: ([u128; 6],);
let _14: (u32, i8);
let _15: Adt49;
let _16: f32;
let _17: isize;
let _18: bool;
let _19: usize;
let _20: ((f32, bool), u64, [u32; 3]);
let _21: (u128, u128, f32, *mut &'static f64, (i8, u32, u16, f64, char, i32));
let _22: *const u128;
let _23: ();
let _24: ();
{
_2 = 330189091121273137501638818354554037247_u128 as f32;
_10 = 111755286467364952698515971218625653313_i128 as f32;
_4 = _5.0;
_10 = _7;
_9 = _7;
RET = [(-1988830859763242044_i64),(-3106923607396475717_i64),7076671301333038179_i64,(-2423861382826247876_i64),(-6364155550471476030_i64),(-1737734790396146939_i64),6540266540333537749_i64];
_6 = (_1.0,);
_5.0 = [5309247356016706454_i64,(-1599751961406527563_i64),(-6348110591137861738_i64),4571858586571732173_i64,4710117679879818596_i64,958399160872379832_i64,7814921176717583922_i64];
_3.0 = _6.0;
_1 = (_3.0,);
_1 = _6;
_5.0 = _6.0;
_12 = 114_i8;
_1 = (_5.0,);
_6 = (_3.0,);
_4 = [(-5223423104626764348_i64),(-7248041780314396689_i64),(-2197096025451458367_i64),(-7953271825889575467_i64),(-1319111795557166406_i64),(-6370771600524629020_i64),3743120472122205961_i64];
Goto(bb1)
}
bb1 = {
RET = [(-7701700540351732110_i64),7232356145205595778_i64,(-2989578136661315441_i64),(-1706618494922192976_i64),(-5209856439245116122_i64),(-7733463573125861729_i64),(-3419088723072370717_i64)];
_1 = (_8,);
match _12 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
114 => bb9,
_ => bb8
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
_3 = (_6.0,);
_10 = _7 + _9;
_5 = (_4,);
_9 = _10 - _7;
match _12 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb5,
5 => bb10,
114 => bb12,
_ => bb11
}
}
bb10 = {
Return()
}
bb11 = {
Return()
}
bb12 = {
_10 = -_2;
_9 = (-1733025949_i32) as f32;
_1.0 = _4;
_7 = -_10;
_6 = (_3.0,);
_10 = _2 * _9;
_15.fld6 = 6609597373350552719_i64;
_5.0 = _4;
_3.0 = _1.0;
_8 = [_15.fld6,_15.fld6,_15.fld6,_15.fld6,_15.fld6,_15.fld6,_15.fld6];
_5 = _6;
_15.fld3 = (3903157039_u32,);
_1.0 = [_15.fld6,_15.fld6,_15.fld6,_15.fld6,_15.fld6,_15.fld6,_15.fld6];
_6 = _5;
_15.fld2.0 = [310791481846134225984724927997097925096_u128,188546870912826892513259524458490246411_u128,64394830537389752259241663463475863517_u128,222322014713887508205688515475692522614_u128,68803515204683271103482859606118136630_u128,143304246702219688491351612221021894372_u128];
_15.fld1 = 10053_u16;
_4 = _6.0;
_15.fld2.0 = [179132879549163895508042235260616276455_u128,105223039921192164725847945226638518500_u128,198582227587729862249300047491496108443_u128,332530003912915440327796919398598018646_u128,186312319885367793733894711682732000935_u128,230125746946540329948354632431265637833_u128];
RET = [_15.fld6,_15.fld6,_15.fld6,_15.fld6,_15.fld6,_15.fld6,_15.fld6];
_2 = (-27064_i16) as f32;
_14.1 = _12;
_15.fld3.0 = 669573201_i32 as u32;
RET = [_15.fld6,_15.fld6,_15.fld6,_15.fld6,_15.fld6,_15.fld6,_15.fld6];
_6 = _3;
_14.1 = _12;
_3 = _5;
_2 = _7;
_3.0 = [_15.fld6,_15.fld6,_15.fld6,_15.fld6,_15.fld6,_15.fld6,_15.fld6];
_2 = 285515232883339992135302424270608739262_u128 as f32;
match _12 {
0 => bb1,
1 => bb2,
2 => bb7,
3 => bb13,
114 => bb15,
_ => bb14
}
}
bb13 = {
_3 = (_6.0,);
_10 = _7 + _9;
_5 = (_4,);
_9 = _10 - _7;
match _12 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb5,
5 => bb10,
114 => bb12,
_ => bb11
}
}
bb14 = {
Return()
}
bb15 = {
_3.0 = RET;
_2 = _9;
_16 = _2;
_1.0 = [_15.fld6,_15.fld6,_15.fld6,_15.fld6,_15.fld6,_15.fld6,_15.fld6];
_13.0 = [19435149698275278201272547167549050542_u128,213005984631739494614532974229974080438_u128,139735114681802833060883312226669229321_u128,67745549755107882739581117247109075972_u128,119770425800231350971847398530984922820_u128,75155863909494159329153562120978538100_u128];
_15.fld2 = _13;
_14.0 = _15.fld3.0;
_15.fld5.0 = _10 as u64;
_21.0 = 129442546503258774559840053958256139029_u128 - 220278986258184807977740217059203759017_u128;
_19 = _21.0 as usize;
_14.1 = -_12;
_20.1 = _15.fld5.0;
_15.fld2 = (_13.0,);
Goto(bb16)
}
bb16 = {
Call(_23 = dump_var(10_usize, 8_usize, Move(_8), 4_usize, Move(_4), 14_usize, Move(_14), 3_usize, Move(_3)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_23 = dump_var(10_usize, 19_usize, Move(_19), 24_usize, _24, 24_usize, _24, 24_usize, _24), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn11(mut _1: f32,mut _2: [i64; 7],mut _3: [i64; 7],mut _4: f32,mut _5: [i64; 7],mut _6: [i64; 7],mut _7: [i64; 7],mut _8: ([i64; 7],),mut _9: [i64; 7],mut _10: [i64; 7],mut _11: [i64; 7],mut _12: [i64; 7],mut _13: [i64; 7],mut _14: f32) -> (f32,) {
mir! {
type RET = (f32,);
let _15: isize;
let _16: f64;
let _17: i8;
let _18: (i64,);
let _19: ((u32, i8), *mut ((f32, bool), u64, [u32; 3]), [i128; 5]);
let _20: i8;
let _21: [i128; 5];
let _22: Adt49;
let _23: (u32,);
let _24: f32;
let _25: i32;
let _26: [u128; 6];
let _27: ();
let _28: ();
{
_1 = (-32716907580943472639793529408187105070_i128) as f32;
_8.0 = _12;
RET = (_14,);
RET.0 = _1 * _14;
_16 = _4 as f64;
_17 = '\u{8dea1}' as i8;
_2 = [1274760342918560152_i64,(-4829002140702549031_i64),7704391020972704694_i64,(-7374972102025244721_i64),(-4234982706089202519_i64),(-1098496887843079820_i64),5433616887433516515_i64];
_15 = !30_isize;
_11 = [5017477204344146070_i64,1329228169480182121_i64,(-4644237502979196416_i64),(-3910529770336056373_i64),6596278137090409709_i64,(-8528781277301296280_i64),1970205554879589297_i64];
_1 = RET.0;
_16 = _14 as f64;
_6 = [6136879161353543402_i64,(-5130459710380337901_i64),3533081296127441509_i64,3039139056006253311_i64,8866930180916864226_i64,9064140752420083180_i64,8487395439632464393_i64];
_12 = _13;
_19.0.0 = 1211726670_u32 ^ 621782702_u32;
_18 = ((-6320576381852306883_i64),);
_18.0 = !(-1229063777825489473_i64);
_19.0.1 = 14673211998162127206_usize as i8;
Goto(bb1)
}
bb1 = {
RET = (_14,);
_9 = [_18.0,_18.0,_18.0,_18.0,_18.0,_18.0,_18.0];
_6 = _3;
_7 = _8.0;
_19.2 = [104075166878326272892518882578605677603_i128,(-116970261237232724191566209007571791901_i128),(-11572419013194179744502979223524052495_i128),140893933689980757200905939626358372496_i128,96012510990958151828237136767784432097_i128];
_6 = [_18.0,_18.0,_18.0,_18.0,_18.0,_18.0,_18.0];
RET = (_14,);
_18 = ((-1906533767334252253_i64),);
_9 = [_18.0,_18.0,_18.0,_18.0,_18.0,_18.0,_18.0];
_13 = [_18.0,_18.0,_18.0,_18.0,_18.0,_18.0,_18.0];
_16 = 108_u8 as f64;
_19.0 = (750141960_u32, _17);
_17 = _19.0.1 | _19.0.1;
_19.0.0 = 274901259673352719095909737129059590739_u128 as u32;
_1 = -_14;
_15 = 9223372036854775807_isize;
_4 = RET.0 - _14;
RET = (_4,);
_12 = [_18.0,_18.0,_18.0,_18.0,_18.0,_18.0,_18.0];
_20 = -_19.0.1;
_13 = [_18.0,_18.0,_18.0,_18.0,_18.0,_18.0,_18.0];
_10 = _8.0;
_22.fld1 = 34099_u16 ^ 47760_u16;
_22.fld0 = (RET.0, true);
_6 = _3;
_1 = -_22.fld0.0;
Goto(bb2)
}
bb2 = {
_22.fld5.0 = !16476022222754077658_u64;
_2 = [_18.0,_18.0,_18.0,_18.0,_18.0,_18.0,_18.0];
_8 = (_6,);
_3 = [_18.0,_18.0,_18.0,_18.0,_18.0,_18.0,_18.0];
_3 = [_18.0,_18.0,_18.0,_18.0,_18.0,_18.0,_18.0];
_22.fld2.0 = [161292376732896913460392577700663604762_u128,85170822687452442069762671841125404103_u128,80955924850915359821725614563886392472_u128,90350899249413236740425238915301020363_u128,159290479563666251059345691517149546055_u128,130472348708317666318883432808989066733_u128];
_16 = _19.0.0 as f64;
_21 = [(-110206858809012904199694340426806382169_i128),25801939414660696888164808598831459141_i128,9010680420264505488012217799365406621_i128,159871044969600592557748718653839061262_i128,(-109546663288597988706891833148085710178_i128)];
_22.fld3.0 = _19.0.0 | _19.0.0;
RET.0 = _1 - _1;
_23 = (_22.fld3.0,);
_19.2 = [97052542370652893023280668031260126055_i128,(-143733983513802152830765521963663051228_i128),(-130192147302723092293330438071565158957_i128),(-68242657053382252813084838462943759039_i128),156641889423274232160551235200132912057_i128];
_7 = [_18.0,_18.0,_18.0,_18.0,_18.0,_18.0,_18.0];
_22.fld3.0 = _19.0.0 << _17;
Goto(bb3)
}
bb3 = {
Call(_27 = dump_var(11_usize, 3_usize, Move(_3), 12_usize, Move(_12), 13_usize, Move(_13), 5_usize, Move(_5)), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
Call(_27 = dump_var(11_usize, 9_usize, Move(_9), 8_usize, Move(_8), 18_usize, Move(_18), 23_usize, Move(_23)), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn12(mut _1: [i64; 7],mut _2: [i64; 7],mut _3: [i64; 7],mut _4: [i64; 7],mut _5: [u32; 3],mut _6: ([i64; 7],),mut _7: [i64; 7],mut _8: [i64; 7],mut _9: ([i64; 7],),mut _10: u32,mut _11: [i64; 7],mut _12: [i64; 7],mut _13: char) -> f64 {
mir! {
type RET = f64;
let _14: (u32,);
let _15: [u32; 3];
let _16: (i8, u32, u16, f64, char, i32);
let _17: (u32, i8);
let _18: ([u128; 6],);
let _19: Adt53;
let _20: Adt52;
let _21: i128;
let _22: i16;
let _23: isize;
let _24: isize;
let _25: Adt52;
let _26: i128;
let _27: Adt47;
let _28: [u32; 3];
let _29: i64;
let _30: Adt42;
let _31: (f32,);
let _32: Adt56;
let _33: (f32, bool);
let _34: f64;
let _35: [u32; 3];
let _36: bool;
let _37: char;
let _38: (i64,);
let _39: char;
let _40: isize;
let _41: ([i64; 7],);
let _42: (f32,);
let _43: (f32, *const u128);
let _44: (u32,);
let _45: isize;
let _46: (i64,);
let _47: *mut &'static f64;
let _48: Adt53;
let _49: isize;
let _50: i128;
let _51: Adt54;
let _52: Adt54;
let _53: (u32,);
let _54: i64;
let _55: u64;
let _56: u32;
let _57: u32;
let _58: ();
let _59: ();
{
_10 = 3066405488_u32 - 115904002_u32;
RET = 225302959653257300320488774210199467859_u128 as f64;
_6 = (_12,);
RET = 4_usize as f64;
_6.0 = [7737358328385620305_i64,(-1972048638745896664_i64),1008332329672210822_i64,(-3091489589793261244_i64),(-7393559718394004163_i64),(-7510101921664164861_i64),(-3358309059096492906_i64)];
_14 = (_10,);
_2 = _9.0;
_10 = 6106939515979292268_u64 as u32;
_14.0 = _10;
_16.4 = _13;
_16.2 = 35539_u16;
_2 = [454198936788940093_i64,8018897911270678464_i64,(-1219018072860238731_i64),5531211932497875175_i64,(-4172901579275493916_i64),(-73985808004707250_i64),(-4275675218955136940_i64)];
_16.3 = -RET;
_2 = [5476901507200803915_i64,1931497047982608314_i64,3172583364183553880_i64,(-8726900756055233104_i64),(-7226270570788716176_i64),1983065358503699874_i64,(-4896249522718435495_i64)];
_7 = [(-8993752904572163667_i64),(-3734447616075990895_i64),(-283910894565313832_i64),8710781775609953408_i64,1977073767471591387_i64,(-8977980635901089143_i64),(-8622101925874936922_i64)];
Goto(bb1)
}
bb1 = {
_16.3 = -RET;
_3 = _7;
_12 = [(-6171945447703460613_i64),5911924587505156948_i64,(-2438790530456641059_i64),(-601626463429566685_i64),7854420561158715293_i64,7634411631270155453_i64,4377980380206091634_i64];
Call(_16.1 = core::intrinsics::transmute(_16.4), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_16.4 = _13;
_16.5 = !(-1524650914_i32);
_9.0 = [(-8462460267246062796_i64),4897530434362922505_i64,4528306602704830101_i64,1605020653728699151_i64,1341186191936985183_i64,1727741299506532179_i64,(-7228846463822842425_i64)];
_16.5 = !(-1300879070_i32);
_16.3 = -RET;
_18.0 = [115895086224091521084037422357168629993_u128,250050948239328485188324616949576992137_u128,111988241781983663079088470660235116121_u128,243518788104595786151400763991429795391_u128,73927862804567233668499346137001173315_u128,159647807266837367020025789331923134771_u128];
_6.0 = [(-5974625849150055107_i64),(-4663959046564032834_i64),3184697905196900692_i64,(-6599066365433766818_i64),(-3386745693518403621_i64),(-4451065518895263839_i64),(-8849098283868686675_i64)];
_16 = (59_i8, _14.0, 56437_u16, RET, _13, 1893346806_i32);
_16.0 = 9223372036854775807_isize as i8;
_15 = _5;
RET = _16.3;
_17.1 = _16.0 | _16.0;
_16.1 = _10;
Goto(bb3)
}
bb3 = {
_20.fld4 = ((-7886075979284208214_i64),);
_5 = [_16.1,_16.1,_16.1];
_17 = (_16.1, _16.0);
_12 = [_20.fld4.0,_20.fld4.0,_20.fld4.0,_20.fld4.0,_20.fld4.0,_20.fld4.0,_20.fld4.0];
_1 = _2;
_20.fld2 = _20.fld4.0 as u16;
_20.fld4.0 = (-1379244980076249712_i64) ^ 4126356905590738538_i64;
_16.1 = !_10;
_9.0 = [_20.fld4.0,_20.fld4.0,_20.fld4.0,_20.fld4.0,_20.fld4.0,_20.fld4.0,_20.fld4.0];
_21 = (-101782729630228162353935030347827140883_i128);
_17 = (_10, _16.0);
Call(_4 = fn13(_16.5, _7), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_20.fld0.0 = [_20.fld4.0,_20.fld4.0,_20.fld4.0,_20.fld4.0,_20.fld4.0,_20.fld4.0,_20.fld4.0];
_20.fld1.0 = 8372328410364373904_u64 as f32;
_24 = _20.fld4.0 as isize;
_26 = _21 & _21;
_29 = _20.fld4.0;
_16.1 = _14.0;
_25.fld4 = (_29,);
_25.fld4 = (_20.fld4.0,);
_16.2 = _20.fld2;
_14 = (_17.0,);
_8 = [_25.fld4.0,_20.fld4.0,_29,_20.fld4.0,_20.fld4.0,_29,_20.fld4.0];
_20.fld3 = _16.0;
match _16.5 {
0 => bb1,
1893346806 => bb5,
_ => bb2
}
}
bb5 = {
_25.fld0 = _6;
Goto(bb6)
}
bb6 = {
_16.5 = !571814891_i32;
_11 = [_29,_20.fld4.0,_25.fld4.0,_25.fld4.0,_20.fld4.0,_20.fld4.0,_20.fld4.0];
_20.fld1.0 = _24 as f32;
_16.1 = !_10;
_3 = _1;
_20.fld3 = !_16.0;
_31.0 = 558696484277779814_u64 as f32;
_32.fld2 = 216308285441101153138334882901332775257_u128 & 143759674682463493058422373654179169759_u128;
_31 = (_20.fld1.0,);
_12 = [_20.fld4.0,_29,_29,_29,_29,_20.fld4.0,_29];
_23 = _24;
_32.fld3 = _16.0;
_20.fld3 = _20.fld4.0 as i8;
match _21 {
238499637290710301109439577083941070573 => bb8,
_ => bb7
}
}
bb7 = {
_20.fld4 = ((-7886075979284208214_i64),);
_5 = [_16.1,_16.1,_16.1];
_17 = (_16.1, _16.0);
_12 = [_20.fld4.0,_20.fld4.0,_20.fld4.0,_20.fld4.0,_20.fld4.0,_20.fld4.0,_20.fld4.0];
_1 = _2;
_20.fld2 = _20.fld4.0 as u16;
_20.fld4.0 = (-1379244980076249712_i64) ^ 4126356905590738538_i64;
_16.1 = !_10;
_9.0 = [_20.fld4.0,_20.fld4.0,_20.fld4.0,_20.fld4.0,_20.fld4.0,_20.fld4.0,_20.fld4.0];
_21 = (-101782729630228162353935030347827140883_i128);
_17 = (_10, _16.0);
Call(_4 = fn13(_16.5, _7), ReturnTo(bb4), UnwindUnreachable())
}
bb8 = {
_23 = !_24;
_16.1 = _17.0 >> _24;
RET = -_16.3;
_2 = [_25.fld4.0,_25.fld4.0,_29,_25.fld4.0,_20.fld4.0,_25.fld4.0,_25.fld4.0];
_25.fld3 = -_16.0;
_18.0 = [_32.fld2,_32.fld2,_32.fld2,_32.fld2,_32.fld2,_32.fld2];
_17.1 = _20.fld3;
_32.fld6 = Adt41::Variant0 { fld0: 6_usize };
Call(_16.0 = fn14(_9, _24, _7, _32.fld3, _6, _6, _26, _20.fld4.0, _7, _6, _12), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
_14 = (_10,);
_20.fld0.0 = [_29,_25.fld4.0,_25.fld4.0,_20.fld4.0,_20.fld4.0,_29,_29];
_33.1 = !false;
_4 = _1;
_16.2 = _20.fld2 - _20.fld2;
_37 = _13;
_20.fld1.0 = _31.0 - _31.0;
_32.fld3 = _16.0 >> _25.fld3;
_20.fld0.0 = _1;
_38 = _25.fld4;
_25.fld2 = _16.3 as u16;
_12 = [_29,_29,_38.0,_20.fld4.0,_38.0,_20.fld4.0,_20.fld4.0];
_16.5 = (-345300515_i32) | 1172014633_i32;
_28 = _15;
_25.fld3 = !_20.fld3;
place!(Field::<usize>(Variant(_32.fld6, 0), 0)) = 6_usize;
Goto(bb10)
}
bb10 = {
_32.fld1 = [_25.fld4.0,_29,_20.fld4.0,_29,_20.fld4.0,_29,_20.fld4.0];
_39 = _13;
_16.3 = RET * RET;
_25.fld0 = (_4,);
_22 = (-7561_i16);
_20.fld2 = _25.fld2;
_37 = _13;
_20.fld3 = _17.1;
_28 = _5;
_41.0 = [_20.fld4.0,_25.fld4.0,_29,_29,_38.0,_38.0,_25.fld4.0];
_25.fld1.1 = core::ptr::addr_of!(_32.fld2);
_42 = (_31.0,);
_12 = [_25.fld4.0,_29,_20.fld4.0,_20.fld4.0,_25.fld4.0,_20.fld4.0,_25.fld4.0];
Goto(bb11)
}
bb11 = {
_43.0 = -_20.fld1.0;
_20.fld4 = (_25.fld4.0,);
_18.0 = [_32.fld2,_32.fld2,_32.fld2,_32.fld2,_32.fld2,_32.fld2];
RET = _16.3 * _16.3;
_34 = -RET;
_46.0 = !_25.fld4.0;
_31.0 = -_43.0;
_20.fld3 = _32.fld3 ^ _32.fld3;
_5 = [_16.1,_16.1,_10];
_4 = [_29,_46.0,_29,_25.fld4.0,_29,_29,_38.0];
_1 = [_38.0,_46.0,_38.0,_46.0,_29,_46.0,_46.0];
Call(_21 = core::intrinsics::transmute(_26), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
_32.fld3 = _17.1;
_20.fld1.1 = _25.fld1.1;
_25.fld1.0 = _31.0;
_32.fld5 = 61581841190958231_u64;
_20.fld2 = !_25.fld2;
_25.fld4.0 = _29;
_25.fld1.0 = _31.0;
_40 = _31.0 as isize;
_46.0 = _25.fld4.0;
Goto(bb13)
}
bb13 = {
_25.fld4 = (_38.0,);
_20.fld1.1 = core::ptr::addr_of!(_32.fld2);
_46 = _20.fld4;
RET = _34 - _34;
_37 = _16.4;
_49 = !_24;
Goto(bb14)
}
bb14 = {
RET = _34 + _34;
_20 = Move(_25);
_25.fld3 = !_17.1;
_6 = (_3,);
_25.fld4.0 = -_46.0;
_25.fld1.0 = _16.5 as f32;
_5 = _28;
_28 = [_17.0,_16.1,_16.1];
_12 = [_38.0,_46.0,_20.fld4.0,_38.0,_25.fld4.0,_46.0,_20.fld4.0];
_44.0 = !_16.1;
_32.fld2 = !21687443404096709327733630651500795294_u128;
_25.fld4 = (_46.0,);
_8 = [_38.0,_46.0,_25.fld4.0,_25.fld4.0,_38.0,_20.fld4.0,_38.0];
_16.0 = -_20.fld3;
_14 = (_44.0,);
_33.0 = _31.0 - _20.fld1.0;
SetDiscriminant(_32.fld6, 1);
_54 = _29 * _20.fld4.0;
_9.0 = _7;
_36 = !_33.1;
place!(Field::<i128>(Variant(_32.fld6, 1), 0)) = -_21;
_25.fld2 = !_20.fld2;
_44 = _14;
_17.0 = !_16.1;
_50 = _26 ^ _26;
_54 = _32.fld5 as i64;
Goto(bb15)
}
bb15 = {
Call(_58 = dump_var(12_usize, 38_usize, Move(_38), 4_usize, Move(_4), 46_usize, Move(_46), 9_usize, Move(_9)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_58 = dump_var(12_usize, 54_usize, Move(_54), 44_usize, Move(_44), 23_usize, Move(_23), 28_usize, Move(_28)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_58 = dump_var(12_usize, 40_usize, Move(_40), 50_usize, Move(_50), 3_usize, Move(_3), 11_usize, Move(_11)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_58 = dump_var(12_usize, 12_usize, Move(_12), 6_usize, Move(_6), 29_usize, Move(_29), 14_usize, Move(_14)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_58 = dump_var(12_usize, 10_usize, Move(_10), 59_usize, _59, 59_usize, _59, 59_usize, _59), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn13(mut _1: i32,mut _2: [i64; 7]) -> [i64; 7] {
mir! {
type RET = [i64; 7];
let _3: (i8, u32, u16, f64, char, i32);
let _4: (u64,);
let _5: (u32, i8);
let _6: f32;
let _7: *mut &'static f64;
let _8: f32;
let _9: (f32, bool);
let _10: u32;
let _11: isize;
let _12: char;
let _13: Adt42;
let _14: [u32; 3];
let _15: f32;
let _16: isize;
let _17: usize;
let _18: i64;
let _19: Adt49;
let _20: bool;
let _21: Adt45;
let _22: (u64,);
let _23: Adt54;
let _24: [i64; 7];
let _25: (u32,);
let _26: isize;
let _27: char;
let _28: [i64; 7];
let _29: isize;
let _30: f64;
let _31: u64;
let _32: ();
let _33: ();
{
_1 = !(-1474775440_i32);
RET = _2;
Call(RET = core::intrinsics::transmute(_2), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_4 = (2554718389520279269_u64,);
RET = _2;
Goto(bb2)
}
bb2 = {
_3.4 = '\u{a2bf}';
_3.2 = 51943_u16 * 23789_u16;
_2 = [7799713138698536395_i64,9009582083630220747_i64,(-5590253745786063763_i64),(-7387122766917656082_i64),(-317433127723151469_i64),17428451360815197_i64,(-7663178343061520774_i64)];
_1 = 1633037667_i32;
_3.0 = 30014_i16 as i8;
_5.0 = 1076573687_u32 - 2369283836_u32;
_3.0 = !(-74_i8);
_6 = 9223372036854775807_isize as f32;
_3.5 = _1 - _1;
_5 = (2251678387_u32, _3.0);
RET = [(-7377192981995245188_i64),(-8808548445881070865_i64),(-5299027581784116167_i64),6513514524415730903_i64,6796969028200305388_i64,3049870117862773367_i64,(-6844199441750154385_i64)];
_4.0 = !14374956280467821032_u64;
_3.3 = _3.5 as f64;
_4 = (11776389508729370625_u64,);
_4 = (3146892743475801421_u64,);
_3.4 = '\u{deaa3}';
_3.2 = 214807562339333745510661064555869827279_u128 as u16;
Goto(bb3)
}
bb3 = {
_3.1 = _5.0;
RET = _2;
_2 = [(-2995080498185208322_i64),(-6706939198827660732_i64),(-319884213529006832_i64),(-7849280775779875795_i64),7052160263026174871_i64,1321610980445783024_i64,3122861319207986227_i64];
_8 = 1_usize as f32;
_3.1 = _5.0;
_3.3 = 141209316517738056603545663424157941707_u128 as f64;
_3.2 = 42230_u16;
_9.1 = !true;
Goto(bb4)
}
bb4 = {
_1 = _3.5;
RET = _2;
_9.1 = _3.1 != _5.0;
_9.0 = _8;
_4.0 = 2174230093873618798_u64;
_4 = (1845403077617253929_u64,);
_8 = _6;
_6 = _9.0 - _9.0;
_3.1 = _5.0;
_5.1 = _3.0 + _3.0;
_8 = _9.0;
_3.1 = _5.0 + _5.0;
_5 = (_3.1, _3.0);
_5.0 = !_3.1;
_8 = 306475623114774871501880766794091264624_u128 as f32;
_3.5 = _1;
_2 = RET;
_3.5 = (-3994_i16) as i32;
_4 = (16896493829280600265_u64,);
_12 = _3.4;
match _3.2 {
42230 => bb6,
_ => bb5
}
}
bb5 = {
_3.4 = '\u{a2bf}';
_3.2 = 51943_u16 * 23789_u16;
_2 = [7799713138698536395_i64,9009582083630220747_i64,(-5590253745786063763_i64),(-7387122766917656082_i64),(-317433127723151469_i64),17428451360815197_i64,(-7663178343061520774_i64)];
_1 = 1633037667_i32;
_3.0 = 30014_i16 as i8;
_5.0 = 1076573687_u32 - 2369283836_u32;
_3.0 = !(-74_i8);
_6 = 9223372036854775807_isize as f32;
_3.5 = _1 - _1;
_5 = (2251678387_u32, _3.0);
RET = [(-7377192981995245188_i64),(-8808548445881070865_i64),(-5299027581784116167_i64),6513514524415730903_i64,6796969028200305388_i64,3049870117862773367_i64,(-6844199441750154385_i64)];
_4.0 = !14374956280467821032_u64;
_3.3 = _3.5 as f64;
_4 = (11776389508729370625_u64,);
_4 = (3146892743475801421_u64,);
_3.4 = '\u{deaa3}';
_3.2 = 214807562339333745510661064555869827279_u128 as u16;
Goto(bb3)
}
bb6 = {
_6 = _8 * _8;
_3.5 = _3.1 as i32;
_10 = _5.0 >> _3.1;
_14 = [_10,_10,_3.1];
_9.0 = -_8;
_15 = _3.3 as f32;
Goto(bb7)
}
bb7 = {
_3.0 = _5.1;
_3.4 = _12;
_3.1 = _5.0 << _10;
_10 = _3.1 & _3.1;
_4.0 = !3647679991640770302_u64;
_8 = (-9223372036854775808_isize) as f32;
_1 = _3.5;
_4.0 = 13095953653151334981_u64;
_3.1 = _10 | _10;
_3.5 = _1 | _1;
_6 = -_9.0;
_3.4 = _12;
_9 = (_8, true);
Goto(bb8)
}
bb8 = {
_14 = [_10,_3.1,_3.1];
_18 = (-516400408448246654_i64) ^ (-8001017432463282734_i64);
_5.1 = _6 as i8;
_17 = !5801093902555318549_usize;
_4.0 = 11610278943798793829_u64;
_3.5 = _1;
_19.fld0.1 = _3.5 == _3.5;
_19.fld0.1 = !_9.1;
_20 = _9.1;
_19.fld4 = 87165960533762547543454447908092604277_u128;
_19.fld0.0 = _8 * _15;
_3.4 = _12;
_4 = (16992746870515158669_u64,);
_8 = -_15;
_19.fld6 = _3.4 as i64;
_19.fld0.0 = _15;
_19.fld3 = (_3.1,);
RET = [_18,_18,_19.fld6,_18,_19.fld6,_19.fld6,_18];
_19.fld3.0 = !_3.1;
_17 = 7_usize;
_19.fld5.0 = _4.0;
_17 = 3459816770564741081_usize;
_19.fld3 = (_3.1,);
_19.fld0.0 = _9.0;
_3.0 = !_5.1;
_5.0 = _18 as u32;
_3.5 = _1 * _1;
match _4.0 {
0 => bb6,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb9,
16992746870515158669 => bb11,
_ => bb10
}
}
bb9 = {
_3.4 = '\u{a2bf}';
_3.2 = 51943_u16 * 23789_u16;
_2 = [7799713138698536395_i64,9009582083630220747_i64,(-5590253745786063763_i64),(-7387122766917656082_i64),(-317433127723151469_i64),17428451360815197_i64,(-7663178343061520774_i64)];
_1 = 1633037667_i32;
_3.0 = 30014_i16 as i8;
_5.0 = 1076573687_u32 - 2369283836_u32;
_3.0 = !(-74_i8);
_6 = 9223372036854775807_isize as f32;
_3.5 = _1 - _1;
_5 = (2251678387_u32, _3.0);
RET = [(-7377192981995245188_i64),(-8808548445881070865_i64),(-5299027581784116167_i64),6513514524415730903_i64,6796969028200305388_i64,3049870117862773367_i64,(-6844199441750154385_i64)];
_4.0 = !14374956280467821032_u64;
_3.3 = _3.5 as f64;
_4 = (11776389508729370625_u64,);
_4 = (3146892743475801421_u64,);
_3.4 = '\u{deaa3}';
_3.2 = 214807562339333745510661064555869827279_u128 as u16;
Goto(bb3)
}
bb10 = {
_3.4 = '\u{a2bf}';
_3.2 = 51943_u16 * 23789_u16;
_2 = [7799713138698536395_i64,9009582083630220747_i64,(-5590253745786063763_i64),(-7387122766917656082_i64),(-317433127723151469_i64),17428451360815197_i64,(-7663178343061520774_i64)];
_1 = 1633037667_i32;
_3.0 = 30014_i16 as i8;
_5.0 = 1076573687_u32 - 2369283836_u32;
_3.0 = !(-74_i8);
_6 = 9223372036854775807_isize as f32;
_3.5 = _1 - _1;
_5 = (2251678387_u32, _3.0);
RET = [(-7377192981995245188_i64),(-8808548445881070865_i64),(-5299027581784116167_i64),6513514524415730903_i64,6796969028200305388_i64,3049870117862773367_i64,(-6844199441750154385_i64)];
_4.0 = !14374956280467821032_u64;
_3.3 = _3.5 as f64;
_4 = (11776389508729370625_u64,);
_4 = (3146892743475801421_u64,);
_3.4 = '\u{deaa3}';
_3.2 = 214807562339333745510661064555869827279_u128 as u16;
Goto(bb3)
}
bb11 = {
_19.fld0 = (_15, _20);
_19.fld0.0 = -_15;
_2 = RET;
_9.1 = _20 | _19.fld0.1;
_19.fld2.0 = [_19.fld4,_19.fld4,_19.fld4,_19.fld4,_19.fld4,_19.fld4];
_20 = _19.fld0.1 & _9.1;
_8 = -_15;
_22.0 = 142_u8 as u64;
_22.0 = _3.3 as u64;
_27 = _3.4;
_22.0 = _4.0 + _19.fld5.0;
match _4.0 {
0 => bb8,
1 => bb12,
16992746870515158669 => bb14,
_ => bb13
}
}
bb12 = {
_6 = _8 * _8;
_3.5 = _3.1 as i32;
_10 = _5.0 >> _3.1;
_14 = [_10,_10,_3.1];
_9.0 = -_8;
_15 = _3.3 as f32;
Goto(bb7)
}
bb13 = {
_4 = (2554718389520279269_u64,);
RET = _2;
Goto(bb2)
}
bb14 = {
_16 = 26248_i16 as isize;
_24 = RET;
_19.fld1 = _3.2;
_3.1 = !_19.fld3.0;
_2 = [_19.fld6,_18,_18,_18,_18,_18,_18];
_26 = _16;
Goto(bb15)
}
bb15 = {
Call(_32 = dump_var(13_usize, 18_usize, Move(_18), 26_usize, Move(_26), 12_usize, Move(_12), 10_usize, Move(_10)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_32 = dump_var(13_usize, 27_usize, Move(_27), 22_usize, Move(_22), 17_usize, Move(_17), 33_usize, _33), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn14(mut _1: ([i64; 7],),mut _2: isize,mut _3: [i64; 7],mut _4: i8,mut _5: ([i64; 7],),mut _6: ([i64; 7],),mut _7: i128,mut _8: i64,mut _9: [i64; 7],mut _10: ([i64; 7],),mut _11: [i64; 7]) -> i8 {
mir! {
type RET = i8;
let _12: ([i64; 7],);
let _13: u32;
let _14: isize;
let _15: char;
let _16: f32;
let _17: char;
let _18: f64;
let _19: i128;
let _20: i128;
let _21: *const (i8, u32, u16, f64, char, i32);
let _22: isize;
let _23: f32;
let _24: Adt54;
let _25: Adt44;
let _26: *const u128;
let _27: i32;
let _28: (i64,);
let _29: char;
let _30: char;
let _31: Adt41;
let _32: (f32, bool);
let _33: i32;
let _34: (f32,);
let _35: u16;
let _36: i8;
let _37: *mut ((f32, bool), u64, [u32; 3]);
let _38: bool;
let _39: u8;
let _40: *mut &'static f64;
let _41: isize;
let _42: f64;
let _43: ();
let _44: ();
{
_1.0 = [_8,_8,_8,_8,_8,_8,_8];
_1.0 = [_8,_8,_8,_8,_8,_8,_8];
Goto(bb1)
}
bb1 = {
_5 = (_1.0,);
_3 = [_8,_8,_8,_8,_8,_8,_8];
RET = _7 as i8;
_10.0 = [_8,_8,_8,_8,_8,_8,_8];
_7 = (-25138219877326175494257795938654076162_i128);
_1 = (_11,);
_12 = (_9,);
_8 = -(-5752065702709892336_i64);
_1 = (_6.0,);
_12.0 = [_8,_8,_8,_8,_8,_8,_8];
_5.0 = [_8,_8,_8,_8,_8,_8,_8];
_13 = 2652836132_u32;
_6 = _1;
_14 = _2;
_8 = !(-1096577625302352664_i64);
RET = _4;
_7 = (-79620285395157612779940261739844315386_i128) ^ 38991523409291530726146814597935001637_i128;
_1.0 = _3;
_11 = _12.0;
RET = _4;
_2 = -_14;
_11 = [_8,_8,_8,_8,_8,_8,_8];
_14 = _2;
_2 = _14 | _14;
_2 = _14;
_14 = 333172971337742584668575939704026156708_u128 as isize;
Call(_4 = core::intrinsics::transmute(RET), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_8 = 2511920500386616389_i64 | (-7517077278109824384_i64);
_11 = [_8,_8,_8,_8,_8,_8,_8];
_13 = 3113004845_u32 * 493192315_u32;
_4 = RET;
RET = _4;
_6 = (_10.0,);
RET = -_4;
_19 = _7 - _7;
_17 = '\u{632d9}';
_16 = _13 as f32;
_12 = _1;
_18 = 100171427418235259276646305409384354584_u128 as f64;
_15 = _17;
_1 = (_9,);
RET = _4;
_12 = (_3,);
_2 = !_14;
_15 = _17;
RET = !_4;
Call(_13 = core::intrinsics::bswap(49033792_u32), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_10.0 = [_8,_8,_8,_8,_8,_8,_8];
_8 = (-1732691142643714349_i64) | (-778141413937871545_i64);
_19 = !_7;
_20 = -_19;
_17 = _15;
_9 = [_8,_8,_8,_8,_8,_8,_8];
_6.0 = [_8,_8,_8,_8,_8,_8,_8];
_9 = _1.0;
_1 = (_9,);
_20 = _7;
_16 = _4 as f32;
RET = _17 as i8;
_9 = _12.0;
_2 = !_14;
_1.0 = [_8,_8,_8,_8,_8,_8,_8];
_2 = !_14;
_7 = -_20;
_10.0 = [_8,_8,_8,_8,_8,_8,_8];
_6.0 = _10.0;
_23 = -_16;
_1.0 = [_8,_8,_8,_8,_8,_8,_8];
Goto(bb4)
}
bb4 = {
_7 = _8 as i128;
_18 = 96499845046160518091779184951035249631_u128 as f64;
_7 = _19 | _20;
RET = 2_usize as i8;
_3 = [_8,_8,_8,_8,_8,_8,_8];
Call(_11 = fn15(_7, _7, _7, _1.0, _3, _20, _20, _20, _14, _7, _5, _1.0, _10.0, _8, _16, _7), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
_5.0 = _3;
_13 = 1286055549_u32 & 1406762178_u32;
_19 = _7;
_9 = [_8,_8,_8,_8,_8,_8,_8];
_5 = (_9,);
_15 = _17;
RET = _4;
_10 = _5;
_11 = [_8,_8,_8,_8,_8,_8,_8];
_12 = _10;
_10 = (_6.0,);
_28 = (_8,);
_6 = (_11,);
_27 = (-1946806838_i32);
_1.0 = _6.0;
_13 = !267586346_u32;
_22 = _14;
_28.0 = _8;
_12 = (_11,);
_12.0 = [_28.0,_28.0,_8,_28.0,_28.0,_8,_28.0];
_22 = _2;
_10.0 = _11;
_17 = _15;
_15 = _17;
_13 = 12617103_u32 - 120798908_u32;
_13 = 3304148991_u32 ^ 3427982764_u32;
_7 = _18 as i128;
Goto(bb6)
}
bb6 = {
_10 = _12;
_10 = (_11,);
_7 = -_20;
_14 = _22 << _28.0;
_28.0 = _8 | _8;
_15 = _17;
_12.0 = [_28.0,_8,_28.0,_28.0,_28.0,_8,_28.0];
_28.0 = true as i64;
_7 = _8 as i128;
_32.1 = !false;
_11 = [_8,_8,_8,_8,_8,_8,_28.0];
_8 = _13 as i64;
_30 = _17;
_32 = (_16, true);
_2 = _14;
_13 = 42617_u16 as u32;
_13 = 611348494_u32;
match _13 {
0 => bb3,
1 => bb5,
2 => bb7,
3 => bb8,
4 => bb9,
611348494 => bb11,
_ => bb10
}
}
bb7 = {
_5 = (_1.0,);
_3 = [_8,_8,_8,_8,_8,_8,_8];
RET = _7 as i8;
_10.0 = [_8,_8,_8,_8,_8,_8,_8];
_7 = (-25138219877326175494257795938654076162_i128);
_1 = (_11,);
_12 = (_9,);
_8 = -(-5752065702709892336_i64);
_1 = (_6.0,);
_12.0 = [_8,_8,_8,_8,_8,_8,_8];
_5.0 = [_8,_8,_8,_8,_8,_8,_8];
_13 = 2652836132_u32;
_6 = _1;
_14 = _2;
_8 = !(-1096577625302352664_i64);
RET = _4;
_7 = (-79620285395157612779940261739844315386_i128) ^ 38991523409291530726146814597935001637_i128;
_1.0 = _3;
_11 = _12.0;
RET = _4;
_2 = -_14;
_11 = [_8,_8,_8,_8,_8,_8,_8];
_14 = _2;
_2 = _14 | _14;
_2 = _14;
_14 = 333172971337742584668575939704026156708_u128 as isize;
Call(_4 = core::intrinsics::transmute(RET), ReturnTo(bb2), UnwindUnreachable())
}
bb8 = {
_7 = _8 as i128;
_18 = 96499845046160518091779184951035249631_u128 as f64;
_7 = _19 | _20;
RET = 2_usize as i8;
_3 = [_8,_8,_8,_8,_8,_8,_8];
Call(_11 = fn15(_7, _7, _7, _1.0, _3, _20, _20, _20, _14, _7, _5, _1.0, _10.0, _8, _16, _7), ReturnTo(bb5), UnwindUnreachable())
}
bb9 = {
_10.0 = [_8,_8,_8,_8,_8,_8,_8];
_8 = (-1732691142643714349_i64) | (-778141413937871545_i64);
_19 = !_7;
_20 = -_19;
_17 = _15;
_9 = [_8,_8,_8,_8,_8,_8,_8];
_6.0 = [_8,_8,_8,_8,_8,_8,_8];
_9 = _1.0;
_1 = (_9,);
_20 = _7;
_16 = _4 as f32;
RET = _17 as i8;
_9 = _12.0;
_2 = !_14;
_1.0 = [_8,_8,_8,_8,_8,_8,_8];
_2 = !_14;
_7 = -_20;
_10.0 = [_8,_8,_8,_8,_8,_8,_8];
_6.0 = _10.0;
_23 = -_16;
_1.0 = [_8,_8,_8,_8,_8,_8,_8];
Goto(bb4)
}
bb10 = {
_8 = 2511920500386616389_i64 | (-7517077278109824384_i64);
_11 = [_8,_8,_8,_8,_8,_8,_8];
_13 = 3113004845_u32 * 493192315_u32;
_4 = RET;
RET = _4;
_6 = (_10.0,);
RET = -_4;
_19 = _7 - _7;
_17 = '\u{632d9}';
_16 = _13 as f32;
_12 = _1;
_18 = 100171427418235259276646305409384354584_u128 as f64;
_15 = _17;
_1 = (_9,);
RET = _4;
_12 = (_3,);
_2 = !_14;
_15 = _17;
RET = !_4;
Call(_13 = core::intrinsics::bswap(49033792_u32), ReturnTo(bb3), UnwindUnreachable())
}
bb11 = {
_12.0 = [_8,_8,_28.0,_8,_8,_28.0,_28.0];
_33 = _27 * _27;
_29 = _15;
_7 = -_19;
_32 = (_16, false);
_23 = _32.0 + _16;
_31 = Adt41::Variant0 { fld0: 6_usize };
_5.0 = _3;
_10.0 = _9;
_4 = RET;
_6 = (_5.0,);
_6 = _5;
_4 = RET >> _19;
_30 = _29;
_1 = (_11,);
Goto(bb12)
}
bb12 = {
_11 = [_28.0,_8,_8,_28.0,_28.0,_8,_28.0];
_17 = _15;
_28.0 = _8;
_32.1 = _14 > _2;
_32.0 = _23;
_22 = _14 << _4;
_1 = _5;
_29 = _30;
_32.1 = !true;
_3 = [_28.0,_8,_8,_28.0,_8,_28.0,_28.0];
_34.0 = _23;
_10 = (_1.0,);
_13 = 2568671257_u32 << _27;
match _27 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb10,
4 => bb5,
340282366920938463463374607429821404618 => bb13,
_ => bb9
}
}
bb13 = {
_7 = _19;
_29 = _17;
_12 = _5;
_31 = Adt41::Variant1 { fld0: _19 };
_28.0 = _8 & _8;
_32.1 = true ^ true;
_39 = !144_u8;
_5 = (_9,);
_18 = _13 as f64;
_34 = (_32.0,);
_3 = [_28.0,_8,_28.0,_8,_28.0,_28.0,_8];
_10.0 = [_28.0,_8,_28.0,_28.0,_28.0,_28.0,_28.0];
_2 = _22;
_18 = _13 as f64;
_30 = _17;
_19 = _20 & Field::<i128>(Variant(_31, 1), 0);
_19 = !Field::<i128>(Variant(_31, 1), 0);
_35 = _27 as u16;
Goto(bb14)
}
bb14 = {
_17 = _29;
_42 = _33 as f64;
_6 = _10;
_1 = (_9,);
_11 = [_28.0,_8,_28.0,_28.0,_28.0,_8,_8];
_19 = -Field::<i128>(Variant(_31, 1), 0);
_32 = (_16, false);
Goto(bb15)
}
bb15 = {
Call(_43 = dump_var(14_usize, 19_usize, Move(_19), 6_usize, Move(_6), 5_usize, Move(_5), 17_usize, Move(_17)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_43 = dump_var(14_usize, 22_usize, Move(_22), 3_usize, Move(_3), 11_usize, Move(_11), 13_usize, Move(_13)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_43 = dump_var(14_usize, 27_usize, Move(_27), 30_usize, Move(_30), 33_usize, Move(_33), 14_usize, Move(_14)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_43 = dump_var(14_usize, 35_usize, Move(_35), 44_usize, _44, 44_usize, _44, 44_usize, _44), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn15(mut _1: i128,mut _2: i128,mut _3: i128,mut _4: [i64; 7],mut _5: [i64; 7],mut _6: i128,mut _7: i128,mut _8: i128,mut _9: isize,mut _10: i128,mut _11: ([i64; 7],),mut _12: [i64; 7],mut _13: [i64; 7],mut _14: i64,mut _15: f32,mut _16: i128) -> [i64; 7] {
mir! {
type RET = [i64; 7];
let _17: (f32, *const u128);
let _18: (u32,);
let _19: isize;
let _20: u64;
let _21: bool;
let _22: (u32, i8);
let _23: i32;
let _24: [u128; 6];
let _25: Adt45;
let _26: *const f64;
let _27: [u32; 3];
let _28: (f32,);
let _29: f32;
let _30: Adt43;
let _31: isize;
let _32: Adt49;
let _33: *mut &'static f64;
let _34: (u64,);
let _35: Adt42;
let _36: f64;
let _37: ((f32, bool), u64, [u32; 3]);
let _38: Adt52;
let _39: isize;
let _40: ();
let _41: ();
{
_4 = [_14,_14,_14,_14,_14,_14,_14];
_12 = [_14,_14,_14,_14,_14,_14,_14];
_16 = _1 ^ _3;
_10 = 339100631_i32 as i128;
_8 = _16 * _2;
_2 = !_8;
_14 = 4696008814860619464_i64 >> _6;
_11.0 = [_14,_14,_14,_14,_14,_14,_14];
_8 = _6 & _10;
_2 = _1;
_10 = _8;
_11.0 = [_14,_14,_14,_14,_14,_14,_14];
_17.0 = _15;
_12 = [_14,_14,_14,_14,_14,_14,_14];
RET = [_14,_14,_14,_14,_14,_14,_14];
_13 = [_14,_14,_14,_14,_14,_14,_14];
_11.0 = RET;
_4 = [_14,_14,_14,_14,_14,_14,_14];
_8 = _10 - _3;
RET = [_14,_14,_14,_14,_14,_14,_14];
_21 = !true;
_12 = [_14,_14,_14,_14,_14,_14,_14];
Goto(bb1)
}
bb1 = {
_4 = [_14,_14,_14,_14,_14,_14,_14];
_19 = _9;
_22.1 = !(-73_i8);
_8 = !_7;
_18.0 = 1805620166_u32;
_20 = 9196613972825854932_u64;
_12 = [_14,_14,_14,_14,_14,_14,_14];
_18.0 = !1974937967_u32;
_8 = _1;
RET = _13;
_11 = (_4,);
_12 = [_14,_14,_14,_14,_14,_14,_14];
_20 = !8194307983540363181_u64;
_22.1 = _20 as i8;
_24 = [105008369664612738108860294859820698522_u128,74608732706823486848773360324953188581_u128,284704629475723112476581096533234129633_u128,301240035040174793522638540763631694820_u128,136409016840253164409869879013120722128_u128,230793522817553345437016684470955231976_u128];
_10 = -_2;
_22 = (_18.0, (-68_i8));
match _22.1 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
340282366920938463463374607431768211388 => bb9,
_ => bb8
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
_2 = _3 * _1;
_24 = [239092785687262187900313625298885423305_u128,42391273376295613467119630848719565808_u128,66792336222651104096289234872987599012_u128,207785315531557652836436642586982794219_u128,165325423853463209192656901251806721180_u128,204158402304278865708295357370997746650_u128];
_23 = 196_u8 as i32;
_10 = 16561852796586852412_usize as i128;
RET = [_14,_14,_14,_14,_14,_14,_14];
match _22.1 {
340282366920938463463374607431768211388 => bb10,
_ => bb4
}
}
bb10 = {
_5 = _12;
_10 = _8 & _2;
_18.0 = _22.0 & _22.0;
_21 = false;
match _22.1 {
0 => bb2,
340282366920938463463374607431768211388 => bb12,
_ => bb11
}
}
bb11 = {
Return()
}
bb12 = {
_11.0 = RET;
_2 = _18.0 as i128;
_6 = _23 as i128;
_21 = false;
_4 = _13;
_17.0 = _15 * _15;
_18 = (_22.0,);
_1 = _7 >> _16;
_21 = !false;
_28 = (_17.0,);
_11 = (_5,);
_17.0 = -_28.0;
_22.1 = -(-97_i8);
_27 = [_22.0,_18.0,_18.0];
Goto(bb13)
}
bb13 = {
_21 = _10 >= _1;
_13 = _5;
_11 = (_4,);
_10 = _19 as i128;
_21 = !false;
_18 = (_22.0,);
_22.0 = _18.0 & _18.0;
_10 = _20 as i128;
_15 = _28.0 * _17.0;
_2 = -_16;
_23 = (-202761144_i32);
_13 = [_14,_14,_14,_14,_14,_14,_14];
_9 = -_19;
RET = [_14,_14,_14,_14,_14,_14,_14];
_27 = [_22.0,_22.0,_22.0];
_9 = _19 | _19;
_18 = (_22.0,);
_17.0 = _15 + _28.0;
_20 = 18383904995384605073_u64;
match _20 {
0 => bb5,
1 => bb6,
2 => bb14,
18383904995384605073 => bb16,
_ => bb15
}
}
bb14 = {
Return()
}
bb15 = {
_2 = _3 * _1;
_24 = [239092785687262187900313625298885423305_u128,42391273376295613467119630848719565808_u128,66792336222651104096289234872987599012_u128,207785315531557652836436642586982794219_u128,165325423853463209192656901251806721180_u128,204158402304278865708295357370997746650_u128];
_23 = 196_u8 as i32;
_10 = 16561852796586852412_usize as i128;
RET = [_14,_14,_14,_14,_14,_14,_14];
match _22.1 {
340282366920938463463374607431768211388 => bb10,
_ => bb4
}
}
bb16 = {
_20 = 18075771347195564974_u64;
_32.fld0 = (_17.0, _21);
_15 = _32.fld0.0 - _32.fld0.0;
_32.fld6 = _14;
_17.1 = core::ptr::addr_of!(_32.fld4);
_32.fld3 = (_22.0,);
_18.0 = _32.fld3.0;
_21 = !_32.fld0.1;
_32.fld4 = _1 as u128;
_26 = core::ptr::addr_of!(_36);
_16 = _2 + _2;
_15 = _17.0;
_24 = [_32.fld4,_32.fld4,_32.fld4,_32.fld4,_32.fld4,_32.fld4];
_37.0 = _32.fld0;
_32.fld0.0 = _28.0 - _17.0;
_38.fld1.0 = _17.0 * _15;
Goto(bb17)
}
bb17 = {
Call(_40 = dump_var(15_usize, 19_usize, Move(_19), 8_usize, Move(_8), 18_usize, Move(_18), 20_usize, Move(_20)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_40 = dump_var(15_usize, 14_usize, Move(_14), 21_usize, Move(_21), 13_usize, Move(_13), 6_usize, Move(_6)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_40 = dump_var(15_usize, 2_usize, Move(_2), 7_usize, Move(_7), 11_usize, Move(_11), 41_usize, _41), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn16(mut _1: (u32,),mut _2: i8,mut _3: u32,mut _4: f32,mut _5: ([i64; 7],),mut _6: f64) -> [u32; 3] {
mir! {
type RET = [u32; 3];
let _7: f64;
let _8: (f32, bool);
let _9: (u64,);
let _10: ();
let _11: ();
{
_1 = (_3,);
RET = [_3,_3,_3];
_1 = (_3,);
_1.0 = _3 << _3;
_2 = 97_i8 >> _1.0;
_2 = 52_i8;
_6 = 8986_i16 as f64;
RET = [_3,_1.0,_1.0];
RET = [_3,_3,_1.0];
_7 = _6;
_3 = _1.0;
_3 = !_1.0;
_8.0 = _4;
_6 = -_7;
Goto(bb1)
}
bb1 = {
Call(_10 = dump_var(16_usize, 1_usize, Move(_1), 2_usize, Move(_2), 11_usize, _11, 11_usize, _11), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn17(mut _1: isize,mut _2: bool,mut _3: char,mut _4: i8,mut _5: bool,mut _6: bool,mut _7: [u32; 3],mut _8: isize,mut _9: bool,mut _10: i8,mut _11: bool,mut _12: bool,mut _13: bool) -> u32 {
mir! {
type RET = u32;
let _14: f64;
let _15: (i64,);
let _16: (i8, u32, u16, f64, char, i32);
let _17: *const f64;
let _18: Adt49;
let _19: (f32, bool);
let _20: (u64,);
let _21: ([u128; 6],);
let _22: Adt43;
let _23: *mut ((f32, bool), u64, [u32; 3]);
let _24: (f32,);
let _25: f32;
let _26: (i8, u32, u16, f64, char, i32);
let _27: bool;
let _28: (i8, u32, u16, f64, char, i32);
let _29: ();
let _30: ();
{
RET = !465573500_u32;
_2 = !_6;
_14 = 4167955943588527491685833294390888509_i128 as f64;
_4 = (-31068_i16) as i8;
_2 = _12 >= _11;
_13 = _9;
_2 = _11;
_6 = _11;
RET = 3229678905_u32;
_6 = _13;
_8 = _3 as isize;
_1 = _8;
match RET {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
3229678905 => bb6,
_ => bb5
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
_1 = _8;
_2 = _5;
_14 = (-372767295_i32) as f64;
RET = 2728472861_u32 * 3349606533_u32;
_15.0 = (-3059138904904913080_i64) * 8373111632041029206_i64;
_12 = !_11;
_1 = _8 >> _15.0;
_11 = _2 > _2;
_3 = '\u{6fea8}';
_12 = !_6;
_9 = _15.0 != _15.0;
_1 = _8;
_15.0 = (-4209877155992092731_i64);
_3 = '\u{12ff6}';
_14 = 5_usize as f64;
_6 = !_5;
RET = 1644405566_u32 | 1636896442_u32;
_16.5 = RET as i32;
_16.3 = -_14;
_16.2 = 14595840383871680464_u64 as u16;
_16.0 = -_4;
_11 = !_12;
_11 = _16.0 <= _16.0;
_13 = _8 < _1;
_15.0 = (-1007919621959525424_i64);
_16.4 = _3;
_3 = _16.4;
match _15.0 {
0 => bb5,
1 => bb2,
340282366920938463462366687809808686032 => bb8,
_ => bb7
}
}
bb7 = {
Return()
}
bb8 = {
_16.5 = (-1663391555_i32);
_16.0 = !_4;
_18.fld3.0 = RET * RET;
_18.fld5 = (14263042859178496712_u64,);
_18.fld6 = _16.0 as i64;
_16.3 = _14;
_16.3 = _14;
_16.0 = 7_usize as i8;
_5 = _11 != _9;
_18.fld4 = !37675040739330383141341378242716629560_u128;
_18.fld3.0 = !RET;
_17 = core::ptr::addr_of!(_16.3);
Goto(bb9)
}
bb9 = {
_16.3 = 7_u8 as f64;
_14 = -(*_17);
_15.0 = !_18.fld6;
_16.4 = _3;
_18.fld0.0 = _16.5 as f32;
_3 = _16.4;
_18.fld3 = (RET,);
_19.1 = _12 >= _13;
_8 = _1;
_16.3 = _14;
_11 = !_6;
_2 = !_19.1;
_19 = (_18.fld0.0, _9);
match _18.fld5.0 {
0 => bb4,
1 => bb2,
2 => bb6,
3 => bb10,
14263042859178496712 => bb12,
_ => bb11
}
}
bb10 = {
Return()
}
bb11 = {
Return()
}
bb12 = {
_9 = _19.1 == _2;
_18.fld5 = (10453048056393627982_u64,);
_16 = (_10, _18.fld3.0, 1903_u16, _14, _3, (-1210613011_i32));
_6 = _9 & _2;
_18.fld4 = 333238939278582443507142108119543537447_u128;
_9 = _6 & _6;
_11 = _6 | _6;
_9 = _16.2 <= _16.2;
_15.0 = !_18.fld6;
_18.fld0.1 = _16.3 <= _14;
_19 = (_18.fld0.0, _11);
_18.fld5 = (6622381384890813906_u64,);
_19 = _18.fld0;
match _16.2 {
0 => bb8,
1 => bb2,
2 => bb3,
3 => bb10,
4 => bb5,
1903 => bb13,
_ => bb6
}
}
bb13 = {
_20.0 = _18.fld5.0 + _18.fld5.0;
RET = _18.fld3.0;
_18.fld2.0 = [_18.fld4,_18.fld4,_18.fld4,_18.fld4,_18.fld4,_18.fld4];
_2 = _11;
_18.fld5.0 = !_20.0;
_16.1 = _18.fld3.0 ^ _18.fld3.0;
_24.0 = _18.fld0.0;
_19 = _18.fld0;
_16.1 = RET;
_5 = _4 >= _16.0;
_18.fld6 = _3 as i64;
_25 = _10 as f32;
_20 = (_18.fld5.0,);
_11 = !_2;
_18.fld5.0 = _14 as u64;
_21.0 = [_18.fld4,_18.fld4,_18.fld4,_18.fld4,_18.fld4,_18.fld4];
_4 = -_16.0;
_24 = (_25,);
_16.0 = _4 ^ _10;
_26.1 = 143_u8 as u32;
_26.4 = _16.4;
_26 = (_16.0, RET, _16.2, _14, _3, _16.5);
Goto(bb14)
}
bb14 = {
_18.fld1 = _9 as u16;
_28.4 = _3;
_18.fld0.0 = _19.0 + _24.0;
Goto(bb15)
}
bb15 = {
Call(_29 = dump_var(17_usize, 20_usize, Move(_20), 15_usize, Move(_15), 11_usize, Move(_11), 9_usize, Move(_9)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_29 = dump_var(17_usize, 7_usize, Move(_7), 12_usize, Move(_12), 10_usize, Move(_10), 2_usize, Move(_2)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn18(mut _1: bool,mut _2: f32,mut _3: (f32, bool),mut _4: bool,mut _5: bool,mut _6: f32,mut _7: ((f32, bool), u64, [u32; 3]),mut _8: u32,mut _9: u32,mut _10: bool,mut _11: u32,mut _12: u32,mut _13: (f32, bool)) -> usize {
mir! {
type RET = usize;
let _14: Adt43;
let _15: (f32, bool);
let _16: char;
let _17: isize;
let _18: isize;
let _19: char;
let _20: i8;
let _21: (u64,);
let _22: u16;
let _23: isize;
let _24: Adt54;
let _25: *const f64;
let _26: (f32, *const u128);
let _27: (u64,);
let _28: Adt49;
let _29: f64;
let _30: u128;
let _31: (f32,);
let _32: f32;
let _33: u128;
let _34: [i64; 7];
let _35: *mut &'static f64;
let _36: ((f32, bool), u64, [u32; 3]);
let _37: isize;
let _38: char;
let _39: ();
let _40: ();
{
_5 = _10 ^ _10;
_13.1 = _5;
_7.0 = (_2, _5);
_4 = _10;
_7.2 = [_8,_12,_9];
_7.1 = !491738671522798374_u64;
_12 = _9 + _11;
_3 = (_7.0.0, _10);
RET = !8458651743396842299_usize;
_7.0.0 = -_6;
_13 = (_6, _7.0.1);
_7.0 = (_13.0, _1);
_13.1 = !_3.1;
_16 = '\u{10da59}';
_5 = _1;
_3 = _7.0;
_3 = _7.0;
_7.2 = [_9,_11,_9];
_15.0 = -_6;
_3.1 = _1;
_3 = (_6, _7.0.1);
_7.0 = (_2, _4);
_7.0 = (_3.0, _1);
_16 = '\u{665bc}';
_7.1 = 7416055756053758085_u64;
Goto(bb1)
}
bb1 = {
_15.1 = _7.0.1;
_11 = _9;
_12 = _11;
_10 = _1 <= _4;
_7.2 = [_12,_8,_8];
_9 = !_8;
_8 = _12 ^ _12;
_3 = (_13.0, _13.1);
_10 = _3.0 >= _2;
_3.0 = _15.0;
_3.1 = _15.0 < _15.0;
_7.0.0 = _13.0;
_3 = (_7.0.0, _13.1);
_10 = _3.1;
_12 = _8 - _8;
RET = 17430418838851647167_usize * 1_usize;
_6 = _2;
_15.1 = _6 < _13.0;
_21.0 = !_7.1;
_18 = -(-9223372036854775808_isize);
_10 = !_4;
_13.1 = !_4;
_4 = !_5;
_21.0 = !_7.1;
_22 = 252479626212559004506769881307296770818_u128 as u16;
Goto(bb2)
}
bb2 = {
_9 = _8;
_8 = _12;
_3.0 = -_7.0.0;
_7.0.1 = _4 | _4;
_20 = !(-27_i8);
_21.0 = _7.1 & _7.1;
_23 = -_18;
_7.0.1 = _1;
_5 = _15.1 ^ _15.1;
_13.1 = _1 < _5;
_8 = 76059719579255601820558141139950509613_i128 as u32;
_6 = 234_u8 as f32;
_20 = (-4071266122026088959_i64) as i8;
_7.0 = _13;
_21.0 = 2064534379_i32 as u64;
_4 = !_13.1;
Goto(bb3)
}
bb3 = {
_21 = (_7.1,);
_9 = _12 ^ _12;
_26.0 = _7.0.0;
_16 = '\u{ddce7}';
_7.1 = _21.0;
_5 = _15.1 & _1;
_23 = _18;
Goto(bb4)
}
bb4 = {
_7.0.1 = _3.1;
_15.1 = !_13.1;
_26.0 = -_15.0;
_7.0.0 = -_13.0;
_12 = _9;
_19 = _16;
_2 = _13.0;
_7.0.1 = !_15.1;
_12 = _9 & _9;
_7.2 = [_9,_12,_11];
_17 = _12 as isize;
_7.0.1 = !_4;
match _7.1 {
0 => bb2,
1 => bb5,
2 => bb6,
7416055756053758085 => bb8,
_ => bb7
}
}
bb5 = {
_21 = (_7.1,);
_9 = _12 ^ _12;
_26.0 = _7.0.0;
_16 = '\u{ddce7}';
_7.1 = _21.0;
_5 = _15.1 & _1;
_23 = _18;
Goto(bb4)
}
bb6 = {
_9 = _8;
_8 = _12;
_3.0 = -_7.0.0;
_7.0.1 = _4 | _4;
_20 = !(-27_i8);
_21.0 = _7.1 & _7.1;
_23 = -_18;
_7.0.1 = _1;
_5 = _15.1 ^ _15.1;
_13.1 = _1 < _5;
_8 = 76059719579255601820558141139950509613_i128 as u32;
_6 = 234_u8 as f32;
_20 = (-4071266122026088959_i64) as i8;
_7.0 = _13;
_21.0 = 2064534379_i32 as u64;
_4 = !_13.1;
Goto(bb3)
}
bb7 = {
_15.1 = _7.0.1;
_11 = _9;
_12 = _11;
_10 = _1 <= _4;
_7.2 = [_12,_8,_8];
_9 = !_8;
_8 = _12 ^ _12;
_3 = (_13.0, _13.1);
_10 = _3.0 >= _2;
_3.0 = _15.0;
_3.1 = _15.0 < _15.0;
_7.0.0 = _13.0;
_3 = (_7.0.0, _13.1);
_10 = _3.1;
_12 = _8 - _8;
RET = 17430418838851647167_usize * 1_usize;
_6 = _2;
_15.1 = _6 < _13.0;
_21.0 = !_7.1;
_18 = -(-9223372036854775808_isize);
_10 = !_4;
_13.1 = !_4;
_4 = !_5;
_21.0 = !_7.1;
_22 = 252479626212559004506769881307296770818_u128 as u16;
Goto(bb2)
}
bb8 = {
RET = _22 as usize;
_9 = !_12;
_2 = _26.0 + _13.0;
_10 = !_4;
_2 = -_13.0;
_26.0 = _13.0;
_28.fld4 = (-1442326606_i32) as u128;
RET = 7_usize ^ 2_usize;
_7.0.1 = !_13.1;
_10 = _4;
_13 = (_7.0.0, _5);
RET = !15562037936594507078_usize;
_5 = !_15.1;
_28.fld2.0 = [_28.fld4,_28.fld4,_28.fld4,_28.fld4,_28.fld4,_28.fld4];
_12 = _9;
_27.0 = _21.0 ^ _7.1;
_7.2 = [_12,_9,_9];
_23 = _17;
match _7.1 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb5,
4 => bb9,
7416055756053758085 => bb11,
_ => bb10
}
}
bb9 = {
_7.0.1 = _3.1;
_15.1 = !_13.1;
_26.0 = -_15.0;
_7.0.0 = -_13.0;
_12 = _9;
_19 = _16;
_2 = _13.0;
_7.0.1 = !_15.1;
_12 = _9 & _9;
_7.2 = [_9,_12,_11];
_17 = _12 as isize;
_7.0.1 = !_4;
match _7.1 {
0 => bb2,
1 => bb5,
2 => bb6,
7416055756053758085 => bb8,
_ => bb7
}
}
bb10 = {
_15.1 = _7.0.1;
_11 = _9;
_12 = _11;
_10 = _1 <= _4;
_7.2 = [_12,_8,_8];
_9 = !_8;
_8 = _12 ^ _12;
_3 = (_13.0, _13.1);
_10 = _3.0 >= _2;
_3.0 = _15.0;
_3.1 = _15.0 < _15.0;
_7.0.0 = _13.0;
_3 = (_7.0.0, _13.1);
_10 = _3.1;
_12 = _8 - _8;
RET = 17430418838851647167_usize * 1_usize;
_6 = _2;
_15.1 = _6 < _13.0;
_21.0 = !_7.1;
_18 = -(-9223372036854775808_isize);
_10 = !_4;
_13.1 = !_4;
_4 = !_5;
_21.0 = !_7.1;
_22 = 252479626212559004506769881307296770818_u128 as u16;
Goto(bb2)
}
bb11 = {
_6 = 700916913_i32 as f32;
_28.fld0.1 = _15.1;
_28.fld0.1 = _3.1 ^ _7.0.1;
_28.fld2.0 = [_28.fld4,_28.fld4,_28.fld4,_28.fld4,_28.fld4,_28.fld4];
_12 = _9;
_15.0 = _2;
_28.fld5 = (_21.0,);
_28.fld0.0 = -_26.0;
_7.0.1 = !_10;
_3.1 = !_15.1;
_21.0 = _27.0 * _27.0;
_3.0 = _2;
Goto(bb12)
}
bb12 = {
_3.0 = _28.fld0.0;
_31.0 = _17 as f32;
Goto(bb13)
}
bb13 = {
_28.fld1 = _22 & _22;
_28.fld1 = _22;
RET = 4_usize;
_2 = RET as f32;
_25 = core::ptr::addr_of!(_29);
_15.1 = _10;
_23 = -_17;
_8 = !_9;
_7.0.0 = _31.0;
_12 = !_8;
_28.fld4 = !_28.fld2.0[RET];
Goto(bb14)
}
bb14 = {
_28.fld6 = 1859107898881622247_i64;
_27 = (_21.0,);
_30 = _28.fld4 >> _17;
_34[RET] = _20 as i64;
_3.0 = _7.0.0 - _31.0;
_36.0 = _15;
_29 = 19132_i16 as f64;
RET = 4_usize * 7_usize;
_13 = (_3.0, _4);
_17 = _23 * _23;
_29 = _20 as f64;
Goto(bb15)
}
bb15 = {
Call(_39 = dump_var(18_usize, 1_usize, Move(_1), 8_usize, Move(_8), 19_usize, Move(_19), 21_usize, Move(_21)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_39 = dump_var(18_usize, 11_usize, Move(_11), 30_usize, Move(_30), 18_usize, Move(_18), 20_usize, Move(_20)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_39 = dump_var(18_usize, 27_usize, Move(_27), 40_usize, _40, 40_usize, _40, 40_usize, _40), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
pub fn main() {
                fn0(std::hint::black_box(true), std::hint::black_box('\u{10f912}'), std::hint::black_box(9223372036854775807_isize), std::hint::black_box((-128_i8)), std::hint::black_box((-17674_i16)), std::hint::black_box(1337632559_i32), std::hint::black_box(4455989614790230768_i64), std::hint::black_box(114564536996695889634400588261624381396_i128), std::hint::black_box(3225970852204013798_usize), std::hint::black_box(129_u8), std::hint::black_box(43769_u16), std::hint::black_box(1220124593_u32), std::hint::black_box(2494796823845708727_u64), std::hint::black_box(27501547747957095790663521551577810991_u128));
                
            }
#[derive(Debug,Copy,Clone)]
pub enum Adt41 {
Variant0{
fld0: usize,

},
Variant1{
fld0: i128,

},
Variant2{
fld0: [isize; 4],
fld1: (u32,),

},
Variant3{
fld0: u64,
fld1: ((u32, i8), *mut ((f32, bool), u64, [u32; 3]), [i128; 5]),
fld2: i16,

}}
#[derive(Debug)]
pub enum Adt42 {
Variant0{
fld0: [u32; 3],
fld1: u16,
fld2: isize,
fld3: ([i64; 7],),
fld4: ((f32, bool), u64, [u32; 3]),
fld5: (u32,),
fld6: *const u128,

},
Variant1{
fld0: (u32,),
fld1: (u64,),

},
Variant2{
fld0: (i64,),
fld1: [isize; 4],
fld2: isize,
fld3: i128,
fld4: f32,
fld5: ((f32, bool), u64, [u32; 3]),

}}
#[derive(Debug)]
pub enum Adt43 {
Variant0{
fld0: u64,
fld1: ((u32, i8), *mut ((f32, bool), u64, [u32; 3]), [i128; 5]),
fld2: Adt42,
fld3: *const (i8, u32, u16, f64, char, i32),
fld4: i16,
fld5: ((f32, bool), u64, [u32; 3]),
fld6: f64,

},
Variant1{
fld0: bool,
fld1: *const f64,
fld2: [i64; 7],
fld3: [u128; 6],
fld4: (f32, bool),

}}
#[derive(Debug)]
pub enum Adt44 {
Variant0{
fld0: ([i64; 7],),
fld1: Adt43,

},
Variant1{
fld0: bool,
fld1: [i128; 5],
fld2: f32,
fld3: u8,
fld4: f64,
fld5: Adt43,
fld6: (f32, *const u128),

},
Variant2{
fld0: ((u32, i8), *mut ((f32, bool), u64, [u32; 3]), [i128; 5]),
fld1: Adt43,

}}
#[derive(Debug)]
pub enum Adt45 {
Variant0{
fld0: (f32,),
fld1: i128,
fld2: f64,
fld3: u16,

},
Variant1{
fld0: u16,
fld1: (i8, u32, u16, f64, char, i32),
fld2: i128,
fld3: i8,
fld4: Adt43,

},
Variant2{
fld0: [isize; 4],
fld1: Adt42,
fld2: (f32,),

}}
#[derive(Debug)]
pub enum Adt46 {
Variant0{
fld0: i16,

},
Variant1{
fld0: *const (i8, u32, u16, f64, char, i32),
fld1: Adt44,
fld2: *const u128,
fld3: ((u32, i8), *mut ((f32, bool), u64, [u32; 3]), [i128; 5]),

},
Variant2{
fld0: (u64,),
fld1: char,
fld2: [i64; 7],
fld3: i8,
fld4: (f32, *const u128),
fld5: ((u32, i8), *mut ((f32, bool), u64, [u32; 3]), [i128; 5]),
fld6: i64,
fld7: Adt43,

}}
#[derive(Debug)]
pub enum Adt47 {
Variant0{
fld0: i16,
fld1: (u32,),
fld2: Adt46,
fld3: u64,

},
Variant1{
fld0: *const f64,
fld1: isize,

}}
#[derive(Debug)]
pub enum Adt48 {
Variant0{
fld0: u8,
fld1: Adt47,
fld2: ([u128; 6],),
fld3: Adt45,
fld4: [u128; 6],

},
Variant1{
fld0: bool,
fld1: Adt47,
fld2: ([u128; 6],),
fld3: i8,
fld4: (i8, u32, u16, f64, char, i32),
fld5: u64,

},
Variant2{
fld0: ((u32, i8), *mut ((f32, bool), u64, [u32; 3]), [i128; 5]),
fld1: char,
fld2: Adt44,
fld3: i8,
fld4: usize,
fld5: Adt42,
fld6: (u32,),
fld7: i128,

},
Variant3{
fld0: (f32,),
fld1: Adt42,
fld2: [isize; 4],
fld3: i8,
fld4: [i128; 5],
fld5: [i64; 7],
fld6: i64,

}}
#[derive(Debug)]
pub struct Adt49 {
fld0: (f32, bool),
fld1: u16,
fld2: ([u128; 6],),
fld3: (u32,),
fld4: u128,
fld5: (u64,),
fld6: i64,
fld7: Adt44,
}
#[derive(Debug)]
pub enum Adt50 {
Variant0{
fld0: [isize; 4],
fld1: Adt44,

},
Variant1{
fld0: [u32; 3],
fld1: Adt49,
fld2: (i64,),
fld3: ((f32, bool), u64, [u32; 3]),

},
Variant2{
fld0: bool,
fld1: char,
fld2: Adt49,
fld3: Adt44,
fld4: usize,
fld5: Adt47,
fld6: u32,
fld7: ((f32, bool), u64, [u32; 3]),

},
Variant3{
fld0: i64,
fld1: (f32, *const u128),
fld2: ((f32, bool), u64, [u32; 3]),

}}
#[derive(Debug)]
pub enum Adt51 {
Variant0{
fld0: [i64; 7],
fld1: (f32,),
fld2: u8,
fld3: Adt45,
fld4: Adt50,
fld5: Adt44,
fld6: i64,
fld7: (u32,),

},
Variant1{
fld0: *const f64,
fld1: (u32, i8),
fld2: f64,
fld3: [i64; 7],

},
Variant2{
fld0: Adt44,
fld1: u16,

}}
#[derive(Debug)]
pub struct Adt52 {
fld0: ([i64; 7],),
fld1: (f32, *const u128),
fld2: u16,
fld3: i8,
fld4: (i64,),
}
#[derive(Debug)]
pub enum Adt53 {
Variant0{
fld0: *const f64,
fld1: char,
fld2: (f32,),
fld3: u128,
fld4: Adt52,
fld5: [u128; 6],

},
Variant1{
fld0: (f32,),
fld1: (i64,),
fld2: ((f32, bool), u64, [u32; 3]),

},
Variant2{
fld0: bool,
fld1: (f32, bool),
fld2: u16,
fld3: u32,

},
Variant3{
fld0: ([u128; 6],),
fld1: (u32,),
fld2: Adt46,
fld3: i128,
fld4: i16,
fld5: u128,
fld6: Adt51,

}}
#[derive(Debug)]
pub enum Adt54 {
Variant0{
fld0: Adt52,
fld1: i32,
fld2: Adt41,
fld3: (i8, u32, u16, f64, char, i32),
fld4: i128,

},
Variant1{
fld0: (u32,),

},
Variant2{
fld0: bool,
fld1: u16,
fld2: *const f64,

},
Variant3{
fld0: Adt41,
fld1: *const f64,
fld2: isize,
fld3: Adt43,

}}
#[derive(Debug)]
pub enum Adt55 {
Variant0{
fld0: [u32; 3],
fld1: *const (i8, u32, u16, f64, char, i32),
fld2: isize,
fld3: *mut ((f32, bool), u64, [u32; 3]),
fld4: u64,
fld5: Adt45,
fld6: (u32, i8),
fld7: Adt41,

},
Variant1{
fld0: *mut ((f32, bool), u64, [u32; 3]),
fld1: [u128; 6],

}}
#[derive(Debug)]
pub struct Adt56 {
fld0: Adt42,
fld1: [i64; 7],
fld2: u128,
fld3: i8,
fld4: Adt54,
fld5: u64,
fld6: Adt41,
fld7: i128,
}
#[derive(Debug)]
pub enum Adt57 {
Variant0{
fld0: (u32,),
fld1: (u32, i8),
fld2: (f32,),
fld3: [i128; 5],
fld4: ([i64; 7],),
fld5: (u64,),

},
Variant1{
fld0: i64,

},
Variant2{
fld0: Adt45,
fld1: Adt52,

},
Variant3{
fld0: [i128; 5],

}}

