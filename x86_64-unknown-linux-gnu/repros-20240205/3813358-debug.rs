#![recursion_limit = "1024"]
    #![feature(custom_mir, core_intrinsics, const_hash)]
    #![allow(unused_parens, unused_assignments, overflowing_literals)]
    extern crate core;
    use core::intrinsics::mir::*;

    use std::fmt::Debug;

    #[inline(never)]
    fn dump_var(
        f: usize,
        var0: usize, val0: impl Debug,
        var1: usize, val1: impl Debug,
        var2: usize, val2: impl Debug,
        var3: usize, val3: impl Debug,
    ) {
        println!("fn{f}:_{var0} = {val0:?}\n_{var1} = {val1:?}\n_{var2} = {val2:?}\n_{var3} = {val3:?}");
    }
    #[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn0(mut _1: bool,mut _2: char,mut _3: isize,mut _4: i8,mut _5: i16,mut _6: i32,mut _7: u64,mut _8: i128,mut _9: usize,mut _10: u8,mut _11: u16,mut _12: u32) -> isize {
mir! {
type RET = isize;
let _13: Adt56;
let _14: Adt51;
let _15: [u64; 1];
let _16: isize;
let _17: u128;
let _18: Adt55;
let _19: f64;
let _20: f64;
let _21: char;
let _22: u8;
let _23: u128;
let _24: f32;
let _25: [u64; 1];
let _26: Adt51;
let _27: [u128; 6];
let _28: f32;
let _29: ();
let _30: ();
{
_3 = 6_usize as isize;
_1 = false;
_11 = !19082_u16;
_8 = 192418898104245143827579682707333048212_u128 as i128;
_9 = 3_usize;
RET = _3 & _3;
Call(RET = core::intrinsics::transmute(_3), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_12 = (-19121_i16) as u32;
_10 = 43_u8 >> RET;
_9 = 7_usize << _10;
_10 = 134_u8;
_1 = true;
_1 = _8 < _8;
_14.fld1 = !_9;
_14.fld0 = !_12;
_2 = '\u{d7561}';
_8 = !(-29702712796926900065786890848668338145_i128);
_1 = !false;
_12 = _14.fld0;
_14.fld0 = _12 & _12;
RET = !_3;
_6 = !(-1128342006_i32);
_11 = 104463419390467019367587732179710419322_u128 as u16;
_14.fld2 = [16965218759870654723_u64,11785941455445468613_u64,6529614843677925670_u64,2515344644494070082_u64,16362455390136533498_u64,8509216414013290142_u64];
_14.fld2 = [10935423690873831244_u64,7593827982840860354_u64,11214817085910477632_u64,12526707046467905015_u64,13782534082238159066_u64,7386148704000790213_u64];
RET = _3 | _3;
_3 = RET | RET;
RET = (-7622708658187673195_i64) as isize;
_8 = (-63996283937011568191441488055533309117_i128);
_5 = 28491_i16;
_3 = RET | RET;
_1 = !false;
_15 = [10629332506111609186_u64];
match _10 {
0 => bb2,
1 => bb3,
2 => bb4,
134 => bb6,
_ => bb5
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
_5 = (-649_i16) >> _14.fld0;
_4 = !(-97_i8);
_6 = _4 as i32;
_12 = _14.fld0;
_14.fld2 = [8755960788216146993_u64,6816840797419217026_u64,8296779543974052279_u64,16089670676512467251_u64,8917401401756743588_u64,8969023502409330390_u64];
_4 = !92_i8;
_9 = _14.fld1 ^ _14.fld1;
_1 = false;
_6 = _1 as i32;
_5 = 17892_i16;
_9 = _14.fld1 << _14.fld1;
_12 = _14.fld0 ^ _14.fld0;
_12 = !_14.fld0;
_10 = _5 as u8;
_3 = RET - RET;
_8 = 31717699330709349290624638306073134562_i128;
_3 = RET;
RET = _3 | _3;
_2 = '\u{79d39}';
_10 = 75355768849040758657920933229615385647_u128 as u8;
RET = -_3;
_6 = -(-1250262907_i32);
_12 = !_14.fld0;
_3 = _11 as isize;
_14.fld2 = [1025099212965886666_u64,10739368827274060900_u64,4870065514189023164_u64,1118076133302928398_u64,2117628358639914877_u64,5080831777202453332_u64];
Call(_15 = fn1(_9, _11, _9, _12, _14, _14.fld1, _3, _11, _9, _9, _14, _14.fld2, _8, _14.fld2, _14.fld2, RET), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
_5 = 2620002167480407791_u64 as i16;
match _8 {
0 => bb5,
1 => bb8,
2 => bb9,
3 => bb10,
31717699330709349290624638306073134562 => bb12,
_ => bb11
}
}
bb8 = {
_12 = (-19121_i16) as u32;
_10 = 43_u8 >> RET;
_9 = 7_usize << _10;
_10 = 134_u8;
_1 = true;
_1 = _8 < _8;
_14.fld1 = !_9;
_14.fld0 = !_12;
_2 = '\u{d7561}';
_8 = !(-29702712796926900065786890848668338145_i128);
_1 = !false;
_12 = _14.fld0;
_14.fld0 = _12 & _12;
RET = !_3;
_6 = !(-1128342006_i32);
_11 = 104463419390467019367587732179710419322_u128 as u16;
_14.fld2 = [16965218759870654723_u64,11785941455445468613_u64,6529614843677925670_u64,2515344644494070082_u64,16362455390136533498_u64,8509216414013290142_u64];
_14.fld2 = [10935423690873831244_u64,7593827982840860354_u64,11214817085910477632_u64,12526707046467905015_u64,13782534082238159066_u64,7386148704000790213_u64];
RET = _3 | _3;
_3 = RET | RET;
RET = (-7622708658187673195_i64) as isize;
_8 = (-63996283937011568191441488055533309117_i128);
_5 = 28491_i16;
_3 = RET | RET;
_1 = !false;
_15 = [10629332506111609186_u64];
match _10 {
0 => bb2,
1 => bb3,
2 => bb4,
134 => bb6,
_ => bb5
}
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
Return()
}
bb12 = {
_18.fld4 = core::ptr::addr_of!(_8);
_18.fld1 = (-6448082389638675555_i64);
_11 = 6724_u16;
_16 = _3 & RET;
_18.fld2 = _16;
_5 = _2 as i16;
_14.fld1 = _5 as usize;
_2 = '\u{ea0fe}';
_10 = 28_u8;
_20 = _10 as f64;
_18.fld1 = 8849953298641343842_u64 as i64;
_15 = [8412515952546989807_u64];
_2 = '\u{9d86}';
_11 = 44210_u16;
_20 = _4 as f64;
Goto(bb13)
}
bb13 = {
_8 = (-150457402523190477445459565317933337614_i128) + 103092298896652330997722531768499607677_i128;
_2 = '\u{66f2d}';
_18.fld4 = core::ptr::addr_of!(_8);
_17 = 218548668614696114428762436890412528183_u128 + 295857030178668707915825694453155972579_u128;
_6 = _16 as i32;
_7 = !5865281100850764565_u64;
_9 = _14.fld1;
RET = _16 & _18.fld2;
_22 = _10 ^ _10;
_20 = _18.fld2 as f64;
_12 = RET as u32;
_18.fld2 = _16;
match _11 {
0 => bb14,
1 => bb15,
44210 => bb17,
_ => bb16
}
}
bb14 = {
_5 = 2620002167480407791_u64 as i16;
match _8 {
0 => bb5,
1 => bb8,
2 => bb9,
3 => bb10,
31717699330709349290624638306073134562 => bb12,
_ => bb11
}
}
bb15 = {
Return()
}
bb16 = {
_5 = (-649_i16) >> _14.fld0;
_4 = !(-97_i8);
_6 = _4 as i32;
_12 = _14.fld0;
_14.fld2 = [8755960788216146993_u64,6816840797419217026_u64,8296779543974052279_u64,16089670676512467251_u64,8917401401756743588_u64,8969023502409330390_u64];
_4 = !92_i8;
_9 = _14.fld1 ^ _14.fld1;
_1 = false;
_6 = _1 as i32;
_5 = 17892_i16;
_9 = _14.fld1 << _14.fld1;
_12 = _14.fld0 ^ _14.fld0;
_12 = !_14.fld0;
_10 = _5 as u8;
_3 = RET - RET;
_8 = 31717699330709349290624638306073134562_i128;
_3 = RET;
RET = _3 | _3;
_2 = '\u{79d39}';
_10 = 75355768849040758657920933229615385647_u128 as u8;
RET = -_3;
_6 = -(-1250262907_i32);
_12 = !_14.fld0;
_3 = _11 as isize;
_14.fld2 = [1025099212965886666_u64,10739368827274060900_u64,4870065514189023164_u64,1118076133302928398_u64,2117628358639914877_u64,5080831777202453332_u64];
Call(_15 = fn1(_9, _11, _9, _12, _14, _14.fld1, _3, _11, _9, _9, _14, _14.fld2, _8, _14.fld2, _14.fld2, RET), ReturnTo(bb7), UnwindUnreachable())
}
bb17 = {
_12 = RET as u32;
_24 = _8 as f32;
_25 = [_7];
_20 = _5 as f64;
_26.fld1 = !_9;
_26.fld2 = [_7,_7,_7,_7,_7,_7];
_26 = Adt51 { fld0: _14.fld0,fld1: _14.fld1,fld2: _14.fld2 };
_18.fld2 = RET ^ RET;
_18.fld4 = core::ptr::addr_of!(_8);
_6 = _26.fld0 as i32;
_18.fld0 = core::ptr::addr_of!(_27);
Goto(bb18)
}
bb18 = {
Call(_29 = dump_var(0_usize, 12_usize, Move(_12), 25_usize, Move(_25), 5_usize, Move(_5), 17_usize, Move(_17)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_29 = dump_var(0_usize, 1_usize, Move(_1), 9_usize, Move(_9), 3_usize, Move(_3), 7_usize, Move(_7)), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn1(mut _1: usize,mut _2: u16,mut _3: usize,mut _4: u32,mut _5: Adt51,mut _6: usize,mut _7: isize,mut _8: u16,mut _9: usize,mut _10: usize,mut _11: Adt51,mut _12: [u64; 6],mut _13: i128,mut _14: [u64; 6],mut _15: [u64; 6],mut _16: isize) -> [u64; 1] {
mir! {
type RET = [u64; 1];
let _17: *const i128;
let _18: Adt51;
let _19: (u32, i64);
let _20: [u64; 6];
let _21: [u128; 6];
let _22: [bool; 5];
let _23: f32;
let _24: u32;
let _25: Adt44;
let _26: Adt58;
let _27: (u16, char, u64);
let _28: [u64; 6];
let _29: isize;
let _30: [u32; 2];
let _31: isize;
let _32: char;
let _33: isize;
let _34: (u32, i64);
let _35: f64;
let _36: bool;
let _37: bool;
let _38: *const f64;
let _39: i16;
let _40: u32;
let _41: i64;
let _42: u64;
let _43: (u16, char, u64);
let _44: bool;
let _45: isize;
let _46: bool;
let _47: ();
let _48: ();
{
_11.fld1 = _9;
_13 = !32548140084229289428203671734549280251_i128;
_11.fld1 = !_10;
Call(_8 = fn2(_3, _10, _4, _15), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_17 = core::ptr::addr_of!(_13);
Goto(bb2)
}
bb2 = {
_13 = (-50275718879966183530567556835625123797_i128);
_18.fld2 = _5.fld2;
_20 = [14390705198419761338_u64,6541979271540155301_u64,559831709185890936_u64,840029454427107946_u64,6592995690548748279_u64,5794081510029956144_u64];
RET = [5918421496591980972_u64];
_14 = [2651810301128824952_u64,11419364532266296523_u64,7622976985749073435_u64,14904232914418960941_u64,15440851466787007943_u64,1617723309389788659_u64];
_15 = [13689872408615879265_u64,18214926471386869395_u64,8308127904007115466_u64,10974372613376219557_u64,7171070787637152193_u64,15134715904992113578_u64];
RET = [15812323939941444154_u64];
_10 = (-997472622_i32) as usize;
_18 = Adt51 { fld0: _4,fld1: _3,fld2: _5.fld2 };
_12 = [12162558200398185847_u64,2336090825565548588_u64,10574797844915992238_u64,3846843939551453122_u64,10962036427495460335_u64,14978718834238039428_u64];
_1 = _11.fld1 - _9;
_1 = _11.fld1 >> _8;
_7 = _16 | _16;
_13 = 168253783447895374467079386678897491297_i128 & 108120813071121456122005412129936342470_i128;
_19.0 = _4 | _18.fld0;
_21 = [117360388424310304824814856604279700232_u128,168044795936336690211360738359194559115_u128,312445706614448239468084216000783068992_u128,217795914679354874952524293452166046412_u128,78106486214582750656046721899503045306_u128,217371894423641679968142637940709312501_u128];
_21 = [21991767716478602451859042406554963407_u128,23599712119813841934433097262009607599_u128,147197542940422968690974087158687103349_u128,145568068877996473777101604871065980337_u128,111197939473131852550333116979548257088_u128,305491296559369946734426945851188135818_u128];
_11.fld0 = _19.0 & _19.0;
_19.1 = (-6970073160209082491_i64) << _3;
RET = [7942882685152559530_u64];
_19 = (_11.fld0, 1418040664446134176_i64);
_17 = core::ptr::addr_of!((*_17));
RET = [6407071193550752900_u64];
_6 = !_18.fld1;
Call(_11.fld1 = core::intrinsics::transmute(_19.1), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_18.fld1 = !_1;
_11.fld1 = _6 << _13;
_1 = _18.fld1 & _3;
_22 = [false,false,false,true,true];
_18.fld1 = _11.fld1;
_1 = !_3;
RET = [17083993090592483008_u64];
_20 = _5.fld2;
_18 = Adt51 { fld0: _11.fld0,fld1: _9,fld2: _11.fld2 };
_7 = _19.0 as isize;
_8 = !_2;
_14 = [9848761684195814109_u64,10623724111023859922_u64,18241432917874199660_u64,2010918393456242107_u64,16058212067240836899_u64,8728088249221192762_u64];
_24 = _5.fld0 - _11.fld0;
_27 = (_2, '\u{8c7cf}', 16546215208645705490_u64);
_27 = (_2, '\u{6dd91}', 8518532761771362855_u64);
_27.0 = !_2;
_23 = _13 as f32;
_5.fld0 = 18861617765643794057561444939016654539_u128 as u32;
_18.fld0 = _19.0;
_5.fld0 = _18.fld0;
_4 = _19.0;
Goto(bb4)
}
bb4 = {
_11.fld0 = _7 as u32;
_5.fld1 = _18.fld1 ^ _6;
_10 = _6;
_4 = _27.1 as u32;
_29 = !_7;
_11.fld1 = _5.fld1 | _10;
RET = [_27.2];
_19.1 = 174_u8 as i64;
_8 = _2;
_5.fld1 = 64334787992632381363557754561479523479_u128 as usize;
_11.fld2 = _12;
_27.2 = 3379073499464856949_u64 ^ 4115500741005789136_u64;
_5.fld0 = _18.fld0 << _11.fld0;
_2 = _8;
_2 = _8 ^ _27.0;
_21 = [218857061514310935097786829579132758118_u128,235005541450004786095960134118951315879_u128,112669596158263567658635643913994770531_u128,160356016902158743799680996304595606014_u128,176010161982163862077944025403209869209_u128,47158975237047045706460553810089069990_u128];
_19 = (_5.fld0, 6740144618012673238_i64);
_5.fld1 = _5.fld0 as usize;
_19 = (_18.fld0, 1303574427475389981_i64);
Goto(bb5)
}
bb5 = {
_5.fld1 = !_10;
_28 = [_27.2,_27.2,_27.2,_27.2,_27.2,_27.2];
_30 = [_18.fld0,_11.fld0];
_34 = (_18.fld0, _19.1);
_21 = [292530302724461301484477854933828667196_u128,73408700495822742690820743707672773131_u128,164639746973868685165187691625428412190_u128,91307365249796052743414120968396166858_u128,21427488050838573829571732288545361957_u128,303180104647763810536423166806709716640_u128];
RET = [_27.2];
_5.fld2 = [_27.2,_27.2,_27.2,_27.2,_27.2,_27.2];
RET = [_27.2];
_11.fld0 = _5.fld0 << _11.fld1;
_19 = (_5.fld0, _34.1);
RET = [_27.2];
_25 = Adt44::Variant2 { fld0: RET,fld1: _27.2,fld2: _17,fld3: _19.1,fld4: (-23550_i16) };
_7 = -_29;
_32 = _27.1;
_5.fld1 = _11.fld0 as usize;
_5.fld2 = [_27.2,Field::<u64>(Variant(_25, 2), 1),_27.2,Field::<u64>(Variant(_25, 2), 1),_27.2,Field::<u64>(Variant(_25, 2), 1)];
_28 = _12;
Goto(bb6)
}
bb6 = {
_18 = _11;
_34.0 = !_18.fld0;
_16 = _29 * _7;
_6 = _10 >> _34.0;
_24 = _19.0 << _5.fld1;
Call(_29 = core::intrinsics::bswap(_7), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
_16 = _29;
_11.fld2 = [_27.2,_27.2,Field::<u64>(Variant(_25, 2), 1),_27.2,_27.2,Field::<u64>(Variant(_25, 2), 1)];
_15 = [Field::<u64>(Variant(_25, 2), 1),Field::<u64>(Variant(_25, 2), 1),Field::<u64>(Variant(_25, 2), 1),_27.2,Field::<u64>(Variant(_25, 2), 1),Field::<u64>(Variant(_25, 2), 1)];
place!(Field::<u64>(Variant(_25, 2), 1)) = 137_u8 as u64;
Call(_34.1 = core::intrinsics::transmute(_6), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
_11.fld1 = _5.fld1;
_19.1 = _34.1 | _34.1;
_23 = _7 as f32;
_3 = !_18.fld1;
_27 = (_2, _32, Field::<u64>(Variant(_25, 2), 1));
_11.fld2 = [_27.2,_27.2,_27.2,_27.2,Field::<u64>(Variant(_25, 2), 1),_27.2];
_34 = (_24, _19.1);
_11 = Adt51 { fld0: _24,fld1: _6,fld2: _20 };
_19.0 = _32 as u32;
place!(Field::<u64>(Variant(_25, 2), 1)) = _27.2 << _19.1;
RET = [Field::<u64>(Variant(_25, 2), 1)];
_39 = (-26568_i16);
RET = [Field::<u64>(Variant(_25, 2), 1)];
_5.fld2 = [Field::<u64>(Variant(_25, 2), 1),Field::<u64>(Variant(_25, 2), 1),Field::<u64>(Variant(_25, 2), 1),Field::<u64>(Variant(_25, 2), 1),Field::<u64>(Variant(_25, 2), 1),Field::<u64>(Variant(_25, 2), 1)];
_5.fld0 = !_4;
_38 = core::ptr::addr_of!(_35);
place!(Field::<i16>(Variant(_25, 2), 4)) = _39;
_33 = -_16;
_33 = -_7;
_11 = Adt51 { fld0: _34.0,fld1: _10,fld2: _5.fld2 };
place!(Field::<i64>(Variant(_25, 2), 3)) = _19.1 ^ _19.1;
Goto(bb9)
}
bb9 = {
Call(_47 = dump_var(1_usize, 12_usize, Move(_12), 6_usize, Move(_6), 14_usize, Move(_14), 33_usize, Move(_33)), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
Call(_47 = dump_var(1_usize, 32_usize, Move(_32), 3_usize, Move(_3), 22_usize, Move(_22), 29_usize, Move(_29)), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
Call(_47 = dump_var(1_usize, 28_usize, Move(_28), 30_usize, Move(_30), 34_usize, Move(_34), 10_usize, Move(_10)), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
Call(_47 = dump_var(1_usize, 27_usize, Move(_27), 48_usize, _48, 48_usize, _48, 48_usize, _48), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn2(mut _1: usize,mut _2: usize,mut _3: u32,mut _4: [u64; 6]) -> u16 {
mir! {
type RET = u16;
let _5: [u16; 4];
let _6: f64;
let _7: [bool; 5];
let _8: (u32, i64);
let _9: (*mut *mut u32, usize);
let _10: char;
let _11: f32;
let _12: Adt58;
let _13: (f32,);
let _14: isize;
let _15: *mut (*mut *mut u32, char);
let _16: bool;
let _17: i32;
let _18: [bool; 5];
let _19: f64;
let _20: (f32,);
let _21: isize;
let _22: isize;
let _23: ();
let _24: ();
{
_1 = 147244859692526348399536755557885942806_i128 as usize;
RET = _3 as u16;
RET = 53026_u16;
RET = 102063902013953487054919354312914880402_i128 as u16;
_1 = 8100926899621401975_u64 as usize;
RET = !34939_u16;
RET = !13705_u16;
_2 = _3 as usize;
_4 = [2517352841286257723_u64,7934033612002387440_u64,14764420552927061121_u64,9669490737997727178_u64,109592899655892593_u64,13134349573721100709_u64];
_1 = !_2;
_4 = [9252860675294373546_u64,12765807390697888191_u64,16157958704908891412_u64,17982635224908685435_u64,5769230224382223561_u64,10903965703805946665_u64];
_3 = (-10_isize) as u32;
_1 = !_2;
Goto(bb1)
}
bb1 = {
_3 = 2494627778_u32;
_3 = (-1944229548_i32) as u32;
_1 = _2;
_2 = _1;
_5 = [RET,RET,RET,RET];
_3 = 1839820172_u32;
RET = 40699_u16 - 49874_u16;
RET = 46007_u16;
_2 = _1;
RET = !43282_u16;
RET = 17500_u16;
RET = (-48_isize) as u16;
_1 = _2;
_8.1 = -4727740662474635146_i64;
_2 = _1;
_8.0 = !_3;
_7 = [true,true,true,false,false];
_8.0 = _3;
_6 = _8.0 as f64;
RET = 21021_u16 >> _2;
_10 = '\u{991ef}';
_7 = [true,false,true,false,false];
RET = !64038_u16;
_5 = [RET,RET,RET,RET];
_5 = [RET,RET,RET,RET];
match _3 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
1839820172 => bb9,
_ => bb8
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
_11 = (-100_i8) as f32;
_4 = [11535858030423230392_u64,15756466248099904840_u64,3244377371719268220_u64,8877931946094536364_u64,18262411389897914218_u64,11785170030501420499_u64];
_1 = _2 ^ _2;
_9.1 = _1;
_8 = (_3, (-934621097821072943_i64));
_4 = [6169740788769983037_u64,5870245333447484190_u64,12504524802585531847_u64,5454129124652392722_u64,14322944803025672698_u64,10988460134784526782_u64];
RET = !21099_u16;
_9.1 = !_2;
RET = 24400_u16;
_9.1 = false as usize;
_8 = (_3, (-6231562642371105065_i64));
_5 = [RET,RET,RET,RET];
_8.0 = _3;
RET = !51589_u16;
_5 = [RET,RET,RET,RET];
_4 = [15280965549738277436_u64,18279045470111559409_u64,6759705164653644933_u64,7000603099550424943_u64,14451183886789634759_u64,14786750545719707346_u64];
_10 = '\u{c2902}';
_13.0 = _11;
RET = 9744_u16 | 55466_u16;
_11 = _13.0;
_14 = (-9223372036854775808_isize) << _9.1;
RET = 59_u8 as u16;
_8.0 = _3 + _3;
_8.1 = 421745845685094630_i64 + 315159989958009775_i64;
_8.1 = -8540019348273974609_i64;
RET = _11 as u16;
RET = 63_u8 as u16;
_13.0 = _11 * _11;
_8.1 = RET as i64;
Call(_13 = fn3(_4, _7, _7, _14, _2, _2, RET, _10, _7, _4, _1, _1, _7, _4, _1), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_5 = [RET,RET,RET,RET];
_9.1 = _2;
_9.1 = !_2;
_9.1 = !_1;
RET = 140_u8 as u16;
_3 = !_8.0;
_14 = (-9223372036854775808_isize);
_11 = _13.0;
_8 = (_3, (-686452728147933770_i64));
_9.1 = _1;
_3 = RET as u32;
_3 = 131913982311539337698838027645986496253_i128 as u32;
_1 = 139_u8 as usize;
_4 = [7072361763882150479_u64,13985347951029247240_u64,6961604098002136531_u64,2035300356512193014_u64,18416776756500767836_u64,379248119080151226_u64];
_10 = '\u{66bc0}';
_13 = (_11,);
_4 = [149524686689834263_u64,4381350633256710976_u64,11878278357449519263_u64,4386295741650930737_u64,3664444132958551473_u64,13577524495308043898_u64];
_3 = _8.0 ^ _8.0;
_7 = [false,true,false,true,true];
_2 = _9.1 | _9.1;
_8.1 = (-105541554099822906050052228554076736412_i128) as i64;
_2 = _9.1;
_16 = false;
_2 = _11 as usize;
Call(_15 = fn15(_8.1, _9.1, _10, _14, _16, _6, _8, _3, _8.0, _4, _13.0), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_7 = [_16,_16,_16,_16,_16];
RET = !19314_u16;
_8 = (_3, (-7001204533849649399_i64));
_6 = 10656_i16 as f64;
_7 = [_16,_16,_16,_16,_16];
_1 = _9.1;
_17 = -1872219251_i32;
_4 = [5827414940112612719_u64,8142672457376658451_u64,4630183023184092467_u64,3869683145945879020_u64,8723002499384787386_u64,6439208019339402497_u64];
_19 = _6 * _6;
_13.0 = -_11;
Goto(bb12)
}
bb12 = {
_18 = _7;
Goto(bb13)
}
bb13 = {
Goto(bb14)
}
bb14 = {
_13.0 = _8.1 as f32;
_20 = (_11,);
_2 = !_9.1;
_14 = (-28_isize);
_20 = (_13.0,);
_18 = _7;
_14 = _17 as isize;
_3 = !_8.0;
_22 = -_14;
_19 = _6;
_22 = !_14;
_21 = _22 + _14;
_13.0 = _20.0 - _20.0;
_19 = -_6;
_19 = _6 * _6;
_21 = _22 - _22;
Goto(bb15)
}
bb15 = {
Call(_23 = dump_var(2_usize, 8_usize, Move(_8), 14_usize, Move(_14), 10_usize, Move(_10), 17_usize, Move(_17)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_23 = dump_var(2_usize, 18_usize, Move(_18), 16_usize, Move(_16), 21_usize, Move(_21), 24_usize, _24), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn3(mut _1: [u64; 6],mut _2: [bool; 5],mut _3: [bool; 5],mut _4: isize,mut _5: usize,mut _6: usize,mut _7: u16,mut _8: char,mut _9: [bool; 5],mut _10: [u64; 6],mut _11: usize,mut _12: usize,mut _13: [bool; 5],mut _14: [u64; 6],mut _15: usize) -> (f32,) {
mir! {
type RET = (f32,);
let _16: [u128; 6];
let _17: (f32,);
let _18: [i32; 7];
let _19: char;
let _20: Adt46;
let _21: *mut (*mut *mut u32, char);
let _22: f32;
let _23: Adt49;
let _24: f64;
let _25: *mut (*mut *mut u32, char);
let _26: u32;
let _27: isize;
let _28: isize;
let _29: isize;
let _30: isize;
let _31: (f32,);
let _32: Adt52;
let _33: f64;
let _34: [u64; 6];
let _35: i16;
let _36: ();
let _37: ();
{
RET.0 = _7 as f32;
_8 = '\u{6bda}';
RET.0 = 2127337488_u32 as f32;
_1 = [3921610859450310475_u64,10203804022224923941_u64,4077550227761344061_u64,9288283173850672612_u64,3672004524665438370_u64,11102688877907297813_u64];
_16 = [18796208155608105201459686906994243744_u128,152606458076586362029885662073157992535_u128,314578437320961928377618977846422088726_u128,25841021693705272383916023467369445380_u128,151581754716443070766992080115596291144_u128,129216327005922620844599476730522869505_u128];
_16 = [29627764527283280246878744876239432989_u128,77551272825213043207262800495961904771_u128,273186382766304104105763166214969904936_u128,335954559098326665564329329931132052728_u128,272849728439344998538085050033848362392_u128,193835727614155296519437827621626656180_u128];
_15 = !_12;
_2 = _9;
_10 = [96129409702115084_u64,11353173786082206451_u64,5994338046941399721_u64,6907609756890998501_u64,1479612418983704298_u64,3892974009696222379_u64];
_2 = [false,true,false,true,true];
_11 = 958917860_i32 as usize;
_3 = [true,false,true,true,true];
RET.0 = (-109_i8) as f32;
Goto(bb1)
}
bb1 = {
_12 = !_5;
_1 = _14;
_11 = _15 * _12;
_4 = _7 as isize;
_13 = [false,true,true,true,true];
_14 = _10;
Goto(bb2)
}
bb2 = {
_4 = 59_isize * 9223372036854775807_isize;
_6 = !_15;
_14 = [5149782731639402479_u64,9323288875190449589_u64,8442620666281244560_u64,22417177268515703_u64,11526389200393629276_u64,10697922315351287828_u64];
_16 = [168761432157692695299951051367618359547_u128,313035943913024849903013189530641133414_u128,293055469047804079401444259303907491014_u128,152354535964373264146909273410280060784_u128,334982748974591570985733274276576251697_u128,798867972267080165138525719276248334_u128];
_14 = [1194397748993699055_u64,12422426788483057024_u64,8978842951054584107_u64,6915412449998361853_u64,1127158847764596895_u64,2886659869186318709_u64];
RET.0 = _11 as f32;
_9 = [false,false,false,true,true];
_18 = [618881281_i32,1402244827_i32,(-575269137_i32),(-1266645478_i32),(-777038614_i32),(-1062165352_i32),1620964909_i32];
_16 = [105225640319573302935835719531641837738_u128,84983383422625779443692822067462146652_u128,247911133668918509920003636823124680541_u128,102760940946719543533083694444703868884_u128,36814765853643969929288944453434920408_u128,128404237481046074304399752373271522111_u128];
RET.0 = 1765749160_i32 as f32;
_20.fld0 = !true;
_14 = _10;
_17.0 = RET.0;
_20.fld2 = (_7, _8, 14794077096815081870_u64);
_19 = _8;
_10 = [_20.fld2.2,_20.fld2.2,_20.fld2.2,_20.fld2.2,_20.fld2.2,_20.fld2.2];
_1 = [_20.fld2.2,_20.fld2.2,_20.fld2.2,_20.fld2.2,_20.fld2.2,_20.fld2.2];
_20.fld2.1 = _8;
_23.fld3 = _17;
_20.fld4.3 = !3998393640488012246_i64;
Goto(bb3)
}
bb3 = {
_20.fld4.1.1 = _12;
_23.fld5.1.1 = _19;
_13 = [_20.fld0,_20.fld0,_20.fld0,_20.fld0,_20.fld0];
RET = (_17.0,);
_2 = _9;
_23.fld1.3.0 = _20.fld4.3 as u32;
Call(_23.fld5.0.0 = fn4(_16, _7, _2, _14, _2, _23.fld1.3.0, _2, _20.fld2.2, _13, _14, _11, _6, _20.fld2.2, _1), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_23.fld7 = _11;
_20.fld4.1.1 = !_15;
_20.fld4.3 = 164_u8 as i64;
RET = _17;
_23.fld1.3 = (_23.fld5.0.0, _20.fld4.3);
_23.fld5.0.1 = _20.fld4.3 | _23.fld1.3.1;
_20.fld3 = Adt43::Variant0 { fld0: _20.fld2 };
match Field::<(u16, char, u64)>(Variant(_20.fld3, 0), 0).2 {
0 => bb1,
1 => bb5,
2 => bb6,
3 => bb7,
4 => bb8,
5 => bb9,
6 => bb10,
14794077096815081870 => bb12,
_ => bb11
}
}
bb5 = {
_20.fld4.1.1 = _12;
_23.fld5.1.1 = _19;
_13 = [_20.fld0,_20.fld0,_20.fld0,_20.fld0,_20.fld0];
RET = (_17.0,);
_2 = _9;
_23.fld1.3.0 = _20.fld4.3 as u32;
Call(_23.fld5.0.0 = fn4(_16, _7, _2, _14, _2, _23.fld1.3.0, _2, _20.fld2.2, _13, _14, _11, _6, _20.fld2.2, _1), ReturnTo(bb4), UnwindUnreachable())
}
bb6 = {
_4 = 59_isize * 9223372036854775807_isize;
_6 = !_15;
_14 = [5149782731639402479_u64,9323288875190449589_u64,8442620666281244560_u64,22417177268515703_u64,11526389200393629276_u64,10697922315351287828_u64];
_16 = [168761432157692695299951051367618359547_u128,313035943913024849903013189530641133414_u128,293055469047804079401444259303907491014_u128,152354535964373264146909273410280060784_u128,334982748974591570985733274276576251697_u128,798867972267080165138525719276248334_u128];
_14 = [1194397748993699055_u64,12422426788483057024_u64,8978842951054584107_u64,6915412449998361853_u64,1127158847764596895_u64,2886659869186318709_u64];
RET.0 = _11 as f32;
_9 = [false,false,false,true,true];
_18 = [618881281_i32,1402244827_i32,(-575269137_i32),(-1266645478_i32),(-777038614_i32),(-1062165352_i32),1620964909_i32];
_16 = [105225640319573302935835719531641837738_u128,84983383422625779443692822067462146652_u128,247911133668918509920003636823124680541_u128,102760940946719543533083694444703868884_u128,36814765853643969929288944453434920408_u128,128404237481046074304399752373271522111_u128];
RET.0 = 1765749160_i32 as f32;
_20.fld0 = !true;
_14 = _10;
_17.0 = RET.0;
_20.fld2 = (_7, _8, 14794077096815081870_u64);
_19 = _8;
_10 = [_20.fld2.2,_20.fld2.2,_20.fld2.2,_20.fld2.2,_20.fld2.2,_20.fld2.2];
_1 = [_20.fld2.2,_20.fld2.2,_20.fld2.2,_20.fld2.2,_20.fld2.2,_20.fld2.2];
_20.fld2.1 = _8;
_23.fld3 = _17;
_20.fld4.3 = !3998393640488012246_i64;
Goto(bb3)
}
bb7 = {
_12 = !_5;
_1 = _14;
_11 = _15 * _12;
_4 = _7 as isize;
_13 = [false,true,true,true,true];
_14 = _10;
Goto(bb2)
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
Return()
}
bb12 = {
_23.fld3 = (_17.0,);
Goto(bb13)
}
bb13 = {
SetDiscriminant(_20.fld3, 0);
_23.fld4 = core::ptr::addr_of_mut!(_22);
RET.0 = _23.fld3.0;
_15 = _11 << _23.fld5.0.1;
_21 = core::ptr::addr_of_mut!(_23.fld5.1);
_23.fld5.0.1 = _23.fld1.3.1 << _20.fld4.1.1;
_20.fld4.2 = core::ptr::addr_of_mut!(_23.fld3);
_20.fld2.0 = _7 & _7;
_25 = _21;
Call(_3 = fn13(_2, _23.fld3, _9, _23.fld5.0.1, _20.fld2.1, _4, _23.fld7, _11, _14, _23.fld7, _20.fld0, _18, _5, _23.fld5.0.1), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
_29 = _4;
_20.fld2.2 = 6498897900936115503_u64 ^ 442102816095870411_u64;
_31 = _17;
_33 = _20.fld2.0 as f64;
place!(Field::<(u16, char, u64)>(Variant(_20.fld3, 0), 0)).2 = !_20.fld2.2;
place!(Field::<(u16, char, u64)>(Variant(_20.fld3, 0), 0)) = _20.fld2;
_23.fld7 = _23.fld5.0.1 as usize;
_23.fld1.3.1 = _23.fld5.0.1;
_20.fld4.1.1 = _15;
_23.fld1.3.1 = _23.fld5.0.1 * _23.fld5.0.1;
RET = (_31.0,);
SetDiscriminant(_20.fld3, 0);
place!(Field::<(u16, char, u64)>(Variant(_20.fld3, 0), 0)).2 = _23.fld5.0.1 as u64;
_20.fld4.0 = core::ptr::addr_of_mut!(_24);
_23.fld1.1 = _16;
_30 = _29 | _29;
_31 = (RET.0,);
_23.fld5.1.1 = _20.fld2.1;
RET = _31;
_20.fld4.3 = -_23.fld1.3.1;
_34 = [Field::<(u16, char, u64)>(Variant(_20.fld3, 0), 0).2,Field::<(u16, char, u64)>(Variant(_20.fld3, 0), 0).2,Field::<(u16, char, u64)>(Variant(_20.fld3, 0), 0).2,Field::<(u16, char, u64)>(Variant(_20.fld3, 0), 0).2,Field::<(u16, char, u64)>(Variant(_20.fld3, 0), 0).2,Field::<(u16, char, u64)>(Variant(_20.fld3, 0), 0).2];
_31.0 = -_17.0;
_3 = _2;
Goto(bb15)
}
bb15 = {
Call(_36 = dump_var(3_usize, 8_usize, Move(_8), 15_usize, Move(_15), 5_usize, Move(_5), 13_usize, Move(_13)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_36 = dump_var(3_usize, 29_usize, Move(_29), 11_usize, Move(_11), 16_usize, Move(_16), 7_usize, Move(_7)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_36 = dump_var(3_usize, 10_usize, Move(_10), 9_usize, Move(_9), 37_usize, _37, 37_usize, _37), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn4(mut _1: [u128; 6],mut _2: u16,mut _3: [bool; 5],mut _4: [u64; 6],mut _5: [bool; 5],mut _6: u32,mut _7: [bool; 5],mut _8: u64,mut _9: [bool; 5],mut _10: [u64; 6],mut _11: usize,mut _12: usize,mut _13: u64,mut _14: [u64; 6]) -> u32 {
mir! {
type RET = u32;
let _15: Adt46;
let _16: [u32; 2];
let _17: u128;
let _18: Adt46;
let _19: i16;
let _20: Adt43;
let _21: i16;
let _22: isize;
let _23: Adt56;
let _24: *mut f32;
let _25: isize;
let _26: (u16, char, u64);
let _27: [bool; 5];
let _28: isize;
let _29: f32;
let _30: (f32,);
let _31: (u16, char, u64);
let _32: f64;
let _33: ((u32, i64), (*mut *mut u32, char));
let _34: (u32, i64);
let _35: (u32, i64);
let _36: [bool; 5];
let _37: Adt43;
let _38: (f32,);
let _39: ();
let _40: ();
{
_14 = [_13,_8,_8,_13,_8,_13];
_9 = _3;
_14 = _4;
RET = _6 & _6;
_6 = (-525524961_i32) as u32;
_14 = _4;
_4 = [_13,_13,_13,_8,_13,_8];
RET = 347651919_i32 as u32;
_9 = _5;
RET = (-1607980131153390544_i64) as u32;
_10 = [_8,_8,_13,_13,_8,_8];
_12 = (-31067_i16) as usize;
_9 = [true,false,true,true,true];
_15.fld2.1 = '\u{340d1}';
_7 = _9;
RET = !_6;
_12 = _11 * _11;
_3 = [true,true,true,false,false];
_15.fld4.1.1 = _2 as usize;
_15.fld2 = (_2, '\u{de7ff}', _13);
match _13 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
14794077096815081870 => bb6,
_ => bb5
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
_12 = _11;
_16 = [_6,RET];
_18.fld2.2 = _8;
_8 = !_18.fld2.2;
_18.fld4.1.1 = _12;
_15.fld2.2 = _13 / _13;
_15.fld2.0 = 8407960063900148056_i64 as u16;
_18.fld4.3 = (-9223372036854775808_isize) as i64;
_18.fld4.1.1 = _11;
_18.fld2 = (_15.fld2.0, _15.fld2.1, _15.fld2.2);
_8 = _18.fld2.2;
_13 = !_18.fld2.2;
_4 = [_8,_18.fld2.2,_13,_13,_8,_8];
_19 = -(-15887_i16);
_15.fld4.1.1 = _11;
_11 = !_18.fld4.1.1;
_16 = [_6,RET];
_18.fld4.3 = !(-2473240807161537620_i64);
_20 = Adt43::Variant0 { fld0: _15.fld2 };
_10 = [_13,_8,_13,_15.fld2.2,Field::<(u16, char, u64)>(Variant(_20, 0), 0).2,_15.fld2.2];
Goto(bb7)
}
bb7 = {
_1 = [254720629577572774683004979421447352817_u128,63454682012006016450992673095277339037_u128,25938665029496378157343268585643822117_u128,157655575007185757738400072265865448219_u128,156243825490135802487302645979256263177_u128,88357202027057892757232427463217948553_u128];
_15.fld2 = Field::<(u16, char, u64)>(Variant(_20, 0), 0);
_12 = !_15.fld4.1.1;
place!(Field::<(u16, char, u64)>(Variant(_20, 0), 0)).2 = _18.fld2.2 * _15.fld2.2;
_13 = !_8;
Goto(bb8)
}
bb8 = {
_16 = [_6,RET];
_22 = 63_isize;
SetDiscriminant(_20, 1);
_19 = (-16091_i16);
_13 = !_18.fld2.2;
_11 = !_15.fld4.1.1;
_18.fld2 = (_2, _15.fld2.1, _13);
_15.fld0 = !true;
_10 = [_8,_15.fld2.2,_18.fld2.2,_13,_8,_15.fld2.2];
_18.fld4.3 = !8730183594752657273_i64;
_18.fld3 = Adt43::Variant0 { fld0: _18.fld2 };
_18.fld2.1 = _15.fld2.1;
_15.fld2 = _18.fld2;
_15.fld2.1 = _18.fld2.1;
_8 = _13 * _18.fld2.2;
_16 = [_6,RET];
_15.fld3 = Adt43::Variant0 { fld0: Field::<(u16, char, u64)>(Variant(_18.fld3, 0), 0) };
Call(_26.1 = fn5(_4, _8, _15.fld3, Field::<(u16, char, u64)>(Variant(_15.fld3, 0), 0), _15.fld2.1, _15.fld2.2, _18.fld4.1.1, _11, Field::<(u16, char, u64)>(Variant(_15.fld3, 0), 0), _15.fld0, _18.fld2.0, _15.fld2.2, _14, _8), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
_27 = [_15.fld0,_15.fld0,_15.fld0,_15.fld0,_15.fld0];
_21 = _19;
place!(Field::<(u16, char, u64)>(Variant(_15.fld3, 0), 0)).0 = !Field::<(u16, char, u64)>(Variant(_18.fld3, 0), 0).0;
place!(Field::<(u16, char, u64)>(Variant(_15.fld3, 0), 0)) = _18.fld2;
_26.0 = _15.fld4.1.1 as u16;
_18.fld4.3 = -6642069152163176290_i64;
_25 = -_22;
_1 = [44292987658227819160090926141807084510_u128,36981816495891372371983933259338922967_u128,142553774374607968070693162081838037821_u128,317266288502445758586037830735071895333_u128,291013683276134671101428273075530733610_u128,241759070384388111541240071182375120024_u128];
_23 = Adt56::Variant3 { fld0: _4,fld1: 66759653256928654325353502094255278572_i128 };
_9 = _3;
place!(Field::<i128>(Variant(_23, 3), 1)) = Field::<(u16, char, u64)>(Variant(_18.fld3, 0), 0).0 as i128;
_3 = _9;
_24 = core::ptr::addr_of_mut!(_29);
_12 = _18.fld4.1.1 ^ _18.fld4.1.1;
_15.fld0 = false;
_26.0 = _15.fld2.0 & _15.fld2.0;
_18.fld0 = _15.fld0;
_26 = Field::<(u16, char, u64)>(Variant(_18.fld3, 0), 0);
match _21 {
0 => bb3,
340282366920938463463374607431768195365 => bb10,
_ => bb7
}
}
bb10 = {
_28 = !_25;
_29 = 84593806165886547329363862137363452975_u128 as f32;
SetDiscriminant(_15.fld3, 1);
_18.fld4.3 = (-8318465050760759963_i64) | 5411010117494170297_i64;
_18.fld2 = (_15.fld2.0, _26.1, _8);
_15.fld4.2 = core::ptr::addr_of_mut!(_30);
_18.fld1 = core::ptr::addr_of_mut!(_30);
Goto(bb11)
}
bb11 = {
place!(Field::<(u16, char, u64)>(Variant(_18.fld3, 0), 0)) = _26;
_23 = Adt56::Variant3 { fld0: _10,fld1: 154939936051281555716162325837841372704_i128 };
_27 = [_15.fld0,_15.fld0,_18.fld0,_15.fld0,_18.fld0];
place!(Field::<i128>(Variant(_23, 3), 1)) = (-164518356207632925728557707010845419844_i128);
_4 = [_8,_15.fld2.2,_8,_8,_26.2,_8];
match _21 {
0 => bb6,
1 => bb10,
2 => bb5,
3 => bb8,
4 => bb12,
340282366920938463463374607431768195365 => bb14,
_ => bb13
}
}
bb12 = {
Return()
}
bb13 = {
Return()
}
bb14 = {
_6 = !RET;
_18.fld4.0 = core::ptr::addr_of_mut!(_32);
_31.2 = !_15.fld2.2;
_15.fld1 = core::ptr::addr_of_mut!(_30);
_9 = _5;
_4 = [_31.2,_31.2,_8,_8,_8,_13];
_15.fld4.1.1 = _18.fld4.1.1 >> _12;
_1 = [320824394874967728617847014464731859045_u128,97072407233595374344119099415508783696_u128,263920533754393089509046360521355521630_u128,162181899639780275168130413968667251425_u128,332440258744124250632223383760885028599_u128,187570701111660781909971338005215871594_u128];
_18.fld0 = !_15.fld0;
_18.fld4.1.1 = _12 * _11;
_18.fld4.2 = core::ptr::addr_of_mut!(_38);
_38 = ((*_24),);
Goto(bb15)
}
bb15 = {
Call(_39 = dump_var(4_usize, 5_usize, Move(_5), 2_usize, Move(_2), 26_usize, Move(_26), 28_usize, Move(_28)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_39 = dump_var(4_usize, 1_usize, Move(_1), 16_usize, Move(_16), 22_usize, Move(_22), 10_usize, Move(_10)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_39 = dump_var(4_usize, 6_usize, Move(_6), 9_usize, Move(_9), 21_usize, Move(_21), 40_usize, _40), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn5(mut _1: [u64; 6],mut _2: u64,mut _3: Adt43,mut _4: (u16, char, u64),mut _5: char,mut _6: u64,mut _7: usize,mut _8: usize,mut _9: (u16, char, u64),mut _10: bool,mut _11: u16,mut _12: u64,mut _13: [u64; 6],mut _14: u64) -> char {
mir! {
type RET = char;
let _15: usize;
let _16: (f32,);
let _17: [u128; 6];
let _18: [bool; 5];
let _19: i8;
let _20: (*mut f64, (*mut *mut u32, usize), *mut (f32,), i64);
let _21: i32;
let _22: char;
let _23: [u32; 2];
let _24: Adt51;
let _25: isize;
let _26: Adt52;
let _27: isize;
let _28: f64;
let _29: isize;
let _30: ();
let _31: ();
{
Call(RET = fn6(_3, _14, _5, _12, _9, _2, _11, _14, _2, _2, _8), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_1 = [_14,_14,_2,_12,_9.2,_2];
_9.1 = _5;
_9 = _4;
_12 = _6 + _2;
_10 = true;
_11 = _4.0;
place!(Field::<(u16, char, u64)>(Variant(_3, 0), 0)).2 = _14;
_1 = _13;
_7 = 90_i8 as usize;
_15 = (-58_i8) as usize;
_16.0 = (-22_i8) as f32;
_9.1 = RET;
_9.0 = _4.0;
_9.0 = 3285505356_u32 as u16;
place!(Field::<(u16, char, u64)>(Variant(_3, 0), 0)).0 = 907284780_u32 as u16;
RET = _5;
_4 = (_9.0, RET, _12);
_1 = [_4.2,_4.2,_12,_2,_4.2,_9.2];
_16.0 = 9223372036854775807_isize as f32;
_17 = [72104969193765055871846158147060832243_u128,80105668688094473784375758567945268765_u128,295872825888900498160349000789234167834_u128,104084609774310906243867426158855867026_u128,234009152863786499582910369506085378750_u128,7352974230588420495293710937764937084_u128];
_3 = Adt43::Variant0 { fld0: _4 };
_11 = !Field::<(u16, char, u64)>(Variant(_3, 0), 0).0;
_11 = !_4.0;
_9 = (_11, _5, _4.2);
_9.0 = _4.0;
_5 = Field::<(u16, char, u64)>(Variant(_3, 0), 0).1;
Goto(bb2)
}
bb2 = {
_5 = Field::<(u16, char, u64)>(Variant(_3, 0), 0).1;
_13 = [_9.2,Field::<(u16, char, u64)>(Variant(_3, 0), 0).2,_6,_2,_12,Field::<(u16, char, u64)>(Variant(_3, 0), 0).2];
Call(_4.0 = core::intrinsics::bswap(_9.0), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
RET = _9.1;
_4.2 = _12 ^ _2;
_4.2 = !_9.2;
_10 = true & true;
place!(Field::<(u16, char, u64)>(Variant(_3, 0), 0)).1 = _5;
_2 = !_4.2;
_4.1 = _9.1;
_9.1 = _5;
place!(Field::<(u16, char, u64)>(Variant(_3, 0), 0)).2 = _9.2 >> _14;
_5 = RET;
RET = Field::<(u16, char, u64)>(Variant(_3, 0), 0).1;
_11 = _8 as u16;
_2 = !_14;
place!(Field::<(u16, char, u64)>(Variant(_3, 0), 0)) = (_9.0, RET, _9.2);
_13 = _1;
_9.1 = Field::<(u16, char, u64)>(Variant(_3, 0), 0).1;
SetDiscriminant(_3, 1);
_20.3 = (-6201314028080424961_i64) << _14;
_21 = (-70384530_i32);
_15 = _7 + _8;
_18 = [_10,_10,_10,_10,_10];
_9.0 = 111_i8 as u16;
_9.2 = !_4.2;
_9 = (_11, _4.1, _4.2);
_21 = 1712984609_i32;
_16.0 = 254939136387578704646694533902600415387_u128 as f32;
_17 = [46053344659800565853087891225324080877_u128,151333392989685035751053953210070582919_u128,50044489267675968322748957373072432201_u128,1083047493480644254978151027760767322_u128,266826706219959873923923844843912993938_u128,242400869405155825761089694368855473013_u128];
match _21 {
0 => bb4,
1 => bb5,
2 => bb6,
3 => bb7,
4 => bb8,
5 => bb9,
1712984609 => bb11,
_ => bb10
}
}
bb4 = {
_5 = Field::<(u16, char, u64)>(Variant(_3, 0), 0).1;
_13 = [_9.2,Field::<(u16, char, u64)>(Variant(_3, 0), 0).2,_6,_2,_12,Field::<(u16, char, u64)>(Variant(_3, 0), 0).2];
Call(_4.0 = core::intrinsics::bswap(_9.0), ReturnTo(bb3), UnwindUnreachable())
}
bb5 = {
_1 = [_14,_14,_2,_12,_9.2,_2];
_9.1 = _5;
_9 = _4;
_12 = _6 + _2;
_10 = true;
_11 = _4.0;
place!(Field::<(u16, char, u64)>(Variant(_3, 0), 0)).2 = _14;
_1 = _13;
_7 = 90_i8 as usize;
_15 = (-58_i8) as usize;
_16.0 = (-22_i8) as f32;
_9.1 = RET;
_9.0 = _4.0;
_9.0 = 3285505356_u32 as u16;
place!(Field::<(u16, char, u64)>(Variant(_3, 0), 0)).0 = 907284780_u32 as u16;
RET = _5;
_4 = (_9.0, RET, _12);
_1 = [_4.2,_4.2,_12,_2,_4.2,_9.2];
_16.0 = 9223372036854775807_isize as f32;
_17 = [72104969193765055871846158147060832243_u128,80105668688094473784375758567945268765_u128,295872825888900498160349000789234167834_u128,104084609774310906243867426158855867026_u128,234009152863786499582910369506085378750_u128,7352974230588420495293710937764937084_u128];
_3 = Adt43::Variant0 { fld0: _4 };
_11 = !Field::<(u16, char, u64)>(Variant(_3, 0), 0).0;
_11 = !_4.0;
_9 = (_11, _5, _4.2);
_9.0 = _4.0;
_5 = Field::<(u16, char, u64)>(Variant(_3, 0), 0).1;
Goto(bb2)
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
_21 = 1757534727_i32;
_16.0 = 304607958245641841542540701176870717745_u128 as f32;
_15 = _8 ^ _8;
_4 = _9;
_9.2 = !_6;
_8 = 97063255140489600060592327665938463254_u128 as usize;
_19 = !(-40_i8);
_16.0 = _9.0 as f32;
match _21 {
0 => bb1,
1 => bb9,
2 => bb3,
3 => bb4,
4 => bb5,
5 => bb10,
6 => bb7,
1757534727 => bb13,
_ => bb12
}
}
bb12 = {
_5 = Field::<(u16, char, u64)>(Variant(_3, 0), 0).1;
_13 = [_9.2,Field::<(u16, char, u64)>(Variant(_3, 0), 0).2,_6,_2,_12,Field::<(u16, char, u64)>(Variant(_3, 0), 0).2];
Call(_4.0 = core::intrinsics::bswap(_9.0), ReturnTo(bb3), UnwindUnreachable())
}
bb13 = {
_9 = (_4.0, RET, _4.2);
_23 = [34597733_u32,2587957709_u32];
_24.fld0 = 1550707921_u32 & 484382314_u32;
Call(_21 = core::intrinsics::transmute(_5), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
_9.1 = _5;
_5 = _4.1;
_24.fld1 = _15;
_22 = RET;
_21 = _19 as i32;
Goto(bb15)
}
bb15 = {
Call(_30 = dump_var(5_usize, 7_usize, Move(_7), 5_usize, Move(_5), 17_usize, Move(_17), 9_usize, Move(_9)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_30 = dump_var(5_usize, 12_usize, Move(_12), 10_usize, Move(_10), 8_usize, Move(_8), 4_usize, Move(_4)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_30 = dump_var(5_usize, 21_usize, Move(_21), 6_usize, Move(_6), 31_usize, _31, 31_usize, _31), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn6(mut _1: Adt43,mut _2: u64,mut _3: char,mut _4: u64,mut _5: (u16, char, u64),mut _6: u64,mut _7: u16,mut _8: u64,mut _9: u64,mut _10: u64,mut _11: usize) -> char {
mir! {
type RET = char;
let _12: (u16, char, u64);
let _13: ((u32, i64), (*mut *mut u32, char));
let _14: (u16, char, u64);
let _15: isize;
let _16: Adt50;
let _17: (u32, i64);
let _18: Adt53;
let _19: *mut f32;
let _20: Adt55;
let _21: f32;
let _22: [u64; 6];
let _23: *const i128;
let _24: [u32; 2];
let _25: isize;
let _26: (u32, i64);
let _27: *mut (*mut *mut u32, char);
let _28: (f32,);
let _29: u64;
let _30: &'static u8;
let _31: [bool; 5];
let _32: [u64; 1];
let _33: Adt51;
let _34: Adt45;
let _35: Adt58;
let _36: u128;
let _37: [i32; 7];
let _38: i128;
let _39: [u16; 4];
let _40: isize;
let _41: ([u64; 6], [u128; 6], u8, (u32, i64));
let _42: Adt54;
let _43: Adt43;
let _44: (u16, char, u64);
let _45: u128;
let _46: ();
let _47: ();
{
RET = _5.1;
_5.1 = Field::<(u16, char, u64)>(Variant(_1, 0), 0).1;
place!(Field::<(u16, char, u64)>(Variant(_1, 0), 0)).2 = 249255513375864144454891211860600016539_u128 as u64;
_11 = !12243363710416790404_usize;
_12.1 = _3;
RET = _3;
place!(Field::<(u16, char, u64)>(Variant(_1, 0), 0)).0 = false as u16;
_12.2 = 303583384922246089539114354401327535252_u128 as u64;
_14.2 = _6 >> _8;
Goto(bb1)
}
bb1 = {
_14.1 = RET;
_15 = -9223372036854775807_isize;
_5.0 = !_7;
_5.2 = !_9;
_3 = Field::<(u16, char, u64)>(Variant(_1, 0), 0).1;
_12.1 = _5.1;
_12.0 = !Field::<(u16, char, u64)>(Variant(_1, 0), 0).0;
_14 = (_12.0, _12.1, _8);
RET = _3;
_11 = 141832796628639105247101798137043002974_u128 as usize;
Goto(bb2)
}
bb2 = {
_12.2 = _4;
_17.0 = 3567360564_u32;
place!(Field::<(u16, char, u64)>(Variant(_1, 0), 0)) = _14;
_13.0.0 = (-57_i8) as u32;
_17.0 = true as u32;
_12 = (_14.0, _14.1, _10);
RET = _14.1;
_12.1 = Field::<(u16, char, u64)>(Variant(_1, 0), 0).1;
_5.2 = _12.2 & Field::<(u16, char, u64)>(Variant(_1, 0), 0).2;
place!(Field::<(u16, char, u64)>(Variant(_1, 0), 0)).0 = _7 >> _7;
_3 = RET;
Goto(bb3)
}
bb3 = {
place!(Field::<(u16, char, u64)>(Variant(_1, 0), 0)).0 = !_5.0;
_14.2 = Field::<(u16, char, u64)>(Variant(_1, 0), 0).2;
_18.fld0.1 = RET;
place!(Field::<(u16, char, u64)>(Variant(_1, 0), 0)) = (_14.0, _3, _5.2);
_18.fld0.1 = _14.1;
_12.0 = !_14.0;
_2 = 0_i8 as u64;
_13.1.1 = _18.fld0.1;
_2 = !_6;
_5.1 = _3;
_12.1 = _18.fld0.1;
_14.2 = !_5.2;
SetDiscriminant(_1, 1);
_13.1.1 = _14.1;
_2 = !_10;
_5 = _12;
_13.0.1 = 5145532832087564083_i64 - (-7582235015316181511_i64);
_13.0 = (_17.0, (-4658174358827841106_i64));
_10 = _13.0.1 as u64;
_12.0 = _14.0;
_19 = core::ptr::addr_of_mut!(_21);
match _13.0.1 {
0 => bb1,
1 => bb2,
340282366920938463458716433072940370350 => bb5,
_ => bb4
}
}
bb4 = {
_14.1 = RET;
_15 = -9223372036854775807_isize;
_5.0 = !_7;
_5.2 = !_9;
_3 = Field::<(u16, char, u64)>(Variant(_1, 0), 0).1;
_12.1 = _5.1;
_12.0 = !Field::<(u16, char, u64)>(Variant(_1, 0), 0).0;
_14 = (_12.0, _12.1, _8);
RET = _3;
_11 = 141832796628639105247101798137043002974_u128 as usize;
Goto(bb2)
}
bb5 = {
_14 = (_5.0, _3, _8);
_14 = _5;
RET = _18.fld0.1;
_6 = _11 as u64;
_12.1 = _13.1.1;
_20.fld2 = _15 >> _4;
RET = _12.1;
_21 = 250527478243648772728881241264384918704_u128 as f32;
_17.0 = !_13.0.0;
_3 = _13.1.1;
_13.0.1 = -6877026587366344920_i64;
_13.1.1 = _3;
_12 = _14;
_12.0 = _7 & _14.0;
_8 = _14.2 ^ _14.2;
_12.2 = _15 as u64;
_14.1 = _13.1.1;
_13.0.1 = (-98_i8) as i64;
_20.fld1 = _13.0.1 << _2;
_15 = -_20.fld2;
Goto(bb6)
}
bb6 = {
_22 = [_2,_8,_8,_4,_2,_8];
_5 = _14;
_25 = _20.fld2 | _15;
_21 = 166249664874924791786662584370805029266_u128 as f32;
_19 = core::ptr::addr_of_mut!((*_19));
_12 = (_14.0, _13.1.1, _5.2);
_27 = core::ptr::addr_of_mut!(_13.1);
_5.1 = _13.1.1;
_14 = (_7, _5.1, _9);
_11 = !7060663019136970506_usize;
_5.2 = _13.0.0 as u64;
_9 = !_14.2;
_27 = core::ptr::addr_of_mut!((*_27));
_12.2 = _10 * _2;
_28 = (_21,);
_22 = [_8,_8,_9,_8,_8,_4];
_14.1 = (*_27).1;
_17 = _13.0;
_27 = core::ptr::addr_of_mut!((*_27));
_11 = _13.0.0 as usize;
_15 = !_25;
_5.1 = RET;
_28.0 = _7 as f32;
Call(_27 = fn7(_13.0.1, _15, _15, _2), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
_25 = _20.fld1 as isize;
_12.1 = _14.1;
_8 = _9 + _12.2;
_29 = _9;
_28 = (_21,);
_17.1 = _20.fld1 + _20.fld1;
_11 = 0_usize;
_10 = _22[_11];
_13.1.1 = _18.fld0.1;
RET = _12.1;
_25 = _17.1 as isize;
_19 = core::ptr::addr_of_mut!(_28.0);
_17.0 = _13.0.0;
_17 = (_13.0.0, _20.fld1);
Goto(bb8)
}
bb8 = {
_22 = [_29,_8,_14.2,_9,_8,_8];
_14.0 = (*_19) as u16;
_24 = [_17.0,_17.0];
_22 = [_14.2,_8,_10,_10,_2,_12.2];
_25 = _15 | _20.fld2;
_28.0 = _21 - _21;
_2 = _20.fld1 as u64;
_6 = _22[_11] >> _2;
_12.1 = _3;
_17.1 = -_20.fld1;
_5 = _12;
_22 = [_9,_14.2,_5.2,_9,_2,_8];
_3 = _5.1;
_13.0.1 = (-5328_i16) as i64;
_32 = [_29];
_17 = _13.0;
_31[_11] = false & false;
_33.fld2 = [_14.2,_4,_32[_11],_12.2,_10,_12.2];
_32 = [_14.2];
_26 = _17;
_27 = core::ptr::addr_of_mut!(_18.fld0);
_12 = (_14.0, (*_27).1, _6);
_33 = Adt51 { fld0: _13.0.0,fld1: _11,fld2: _22 };
_21 = _28.0;
_28.0 = _21;
_4 = !_5.2;
_12 = (_7, _13.1.1, _33.fld2[_11]);
match _33.fld1 {
1 => bb7,
2 => bb3,
3 => bb4,
4 => bb5,
5 => bb6,
0 => bb10,
_ => bb9
}
}
bb9 = {
_14.1 = RET;
_15 = -9223372036854775807_isize;
_5.0 = !_7;
_5.2 = !_9;
_3 = Field::<(u16, char, u64)>(Variant(_1, 0), 0).1;
_12.1 = _5.1;
_12.0 = !Field::<(u16, char, u64)>(Variant(_1, 0), 0).0;
_14 = (_12.0, _12.1, _8);
RET = _3;
_11 = 141832796628639105247101798137043002974_u128 as usize;
Goto(bb2)
}
bb10 = {
_19 = core::ptr::addr_of_mut!((*_19));
_26 = (_33.fld0, _20.fld1);
_33.fld0 = !_26.0;
RET = (*_27).1;
_3 = _14.1;
_36 = !168078383416620366787309509542837074724_u128;
_17.0 = _26.0;
_13.0 = _26;
_20.fld2 = _25 - _25;
_9 = _14.2;
_37[_11] = 1200506437_i32;
_12 = (_14.0, _14.1, _4);
_37 = [1619498269_i32,551225884_i32,(-807926931_i32),(-529384263_i32),(-1595645168_i32),(-239363030_i32),(-333712774_i32)];
_31 = [false,true,true,true,false];
_13.0.0 = _17.0;
_22[_11] = _8;
_14.0 = 20155_i16 as u16;
_1 = Adt43::Variant0 { fld0: _12 };
_22 = [_14.2,_5.2,_2,_10,_33.fld2[_11],_33.fld2[_11]];
_20.fld2 = _25 * _25;
_11 = _33.fld1 | _33.fld1;
_5.2 = Field::<(u16, char, u64)>(Variant(_1, 0), 0).2 - _14.2;
Call(_26.0 = core::intrinsics::bswap(_17.0), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_20.fld2 = -_25;
_36 = 219518221865712862219260125783191120040_u128 ^ 327166725807085843330470816098484243952_u128;
_5.2 = _2;
place!(Field::<(u16, char, u64)>(Variant(_1, 0), 0)).0 = _12.0;
_36 = !326459327662627949615988226049033123941_u128;
_29 = false as u64;
_14.2 = !_6;
_38 = (-34399014009705641960227332393152722919_i128) + 10567935040668717302441993745466017344_i128;
_5 = (_12.0, _12.1, _8);
_28.0 = _36 as f32;
place!(Field::<(u16, char, u64)>(Variant(_1, 0), 0)).1 = (*_27).1;
_13.1.1 = (*_27).1;
_27 = core::ptr::addr_of_mut!((*_27));
_41.1 = [_36,_36,_36,_36,_36,_36];
_29 = !Field::<(u16, char, u64)>(Variant(_1, 0), 0).2;
_5 = (_7, _12.1, _29);
_3 = RET;
_12.1 = RET;
_13.1.1 = RET;
_4 = Field::<(u16, char, u64)>(Variant(_1, 0), 0).2;
match _33.fld1 {
0 => bb13,
_ => bb12
}
}
bb12 = {
place!(Field::<(u16, char, u64)>(Variant(_1, 0), 0)).0 = !_5.0;
_14.2 = Field::<(u16, char, u64)>(Variant(_1, 0), 0).2;
_18.fld0.1 = RET;
place!(Field::<(u16, char, u64)>(Variant(_1, 0), 0)) = (_14.0, _3, _5.2);
_18.fld0.1 = _14.1;
_12.0 = !_14.0;
_2 = 0_i8 as u64;
_13.1.1 = _18.fld0.1;
_2 = !_6;
_5.1 = _3;
_12.1 = _18.fld0.1;
_14.2 = !_5.2;
SetDiscriminant(_1, 1);
_13.1.1 = _14.1;
_2 = !_10;
_5 = _12;
_13.0.1 = 5145532832087564083_i64 - (-7582235015316181511_i64);
_13.0 = (_17.0, (-4658174358827841106_i64));
_10 = _13.0.1 as u64;
_12.0 = _14.0;
_19 = core::ptr::addr_of_mut!(_21);
match _13.0.1 {
0 => bb1,
1 => bb2,
340282366920938463458716433072940370350 => bb5,
_ => bb4
}
}
bb13 = {
_26 = _13.0;
_27 = core::ptr::addr_of_mut!((*_27));
_27 = core::ptr::addr_of_mut!(_13.1);
_22 = [_2,_9,_10,_8,_29,_8];
match _33.fld1 {
1 => bb14,
2 => bb15,
0 => bb17,
_ => bb16
}
}
bb14 = {
_14 = (_5.0, _3, _8);
_14 = _5;
RET = _18.fld0.1;
_6 = _11 as u64;
_12.1 = _13.1.1;
_20.fld2 = _15 >> _4;
RET = _12.1;
_21 = 250527478243648772728881241264384918704_u128 as f32;
_17.0 = !_13.0.0;
_3 = _13.1.1;
_13.0.1 = -6877026587366344920_i64;
_13.1.1 = _3;
_12 = _14;
_12.0 = _7 & _14.0;
_8 = _14.2 ^ _14.2;
_12.2 = _15 as u64;
_14.1 = _13.1.1;
_13.0.1 = (-98_i8) as i64;
_20.fld1 = _13.0.1 << _2;
_15 = -_20.fld2;
Goto(bb6)
}
bb15 = {
_14.1 = RET;
_15 = -9223372036854775807_isize;
_5.0 = !_7;
_5.2 = !_9;
_3 = Field::<(u16, char, u64)>(Variant(_1, 0), 0).1;
_12.1 = _5.1;
_12.0 = !Field::<(u16, char, u64)>(Variant(_1, 0), 0).0;
_14 = (_12.0, _12.1, _8);
RET = _3;
_11 = 141832796628639105247101798137043002974_u128 as usize;
Goto(bb2)
}
bb16 = {
_14.1 = RET;
_15 = -9223372036854775807_isize;
_5.0 = !_7;
_5.2 = !_9;
_3 = Field::<(u16, char, u64)>(Variant(_1, 0), 0).1;
_12.1 = _5.1;
_12.0 = !Field::<(u16, char, u64)>(Variant(_1, 0), 0).0;
_14 = (_12.0, _12.1, _8);
RET = _3;
_11 = 141832796628639105247101798137043002974_u128 as usize;
Goto(bb2)
}
bb17 = {
_12.0 = _7;
_12 = (_14.0, _14.1, _10);
_8 = _12.2;
_8 = !_10;
_18.fld0.1 = _3;
RET = Field::<(u16, char, u64)>(Variant(_1, 0), 0).1;
_7 = _20.fld1 as u16;
_44 = _14;
_41.3 = (_33.fld0, _26.1);
_26.0 = !_13.0.0;
_20.fld4 = core::ptr::addr_of!(_38);
_27 = core::ptr::addr_of_mut!(_18.fld0);
_17 = _13.0;
_14.0 = _44.0 - _7;
_3 = _44.1;
place!(Field::<(u16, char, u64)>(Variant(_1, 0), 0)).1 = _12.1;
Goto(bb18)
}
bb18 = {
Call(_46 = dump_var(6_usize, 22_usize, Move(_22), 11_usize, Move(_11), 36_usize, Move(_36), 4_usize, Move(_4)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_46 = dump_var(6_usize, 17_usize, Move(_17), 31_usize, Move(_31), 32_usize, Move(_32), 29_usize, Move(_29)), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Call(_46 = dump_var(6_usize, 7_usize, Move(_7), 14_usize, Move(_14), 15_usize, Move(_15), 6_usize, Move(_6)), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn7(mut _1: i64,mut _2: isize,mut _3: isize,mut _4: u64) -> *mut (*mut *mut u32, char) {
mir! {
type RET = *mut (*mut *mut u32, char);
let _5: i16;
let _6: *mut u32;
let _7: char;
let _8: (f32,);
let _9: (u32, i64);
let _10: f64;
let _11: usize;
let _12: f64;
let _13: bool;
let _14: i16;
let _15: u128;
let _16: f32;
let _17: *mut f64;
let _18: (u16, char, u64);
let _19: [u32; 2];
let _20: u32;
let _21: u8;
let _22: u16;
let _23: Adt55;
let _24: u32;
let _25: (f32,);
let _26: Adt50;
let _27: (f32,);
let _28: u64;
let _29: isize;
let _30: Adt57;
let _31: [bool; 5];
let _32: (u32, i64);
let _33: Adt43;
let _34: [u64; 6];
let _35: f64;
let _36: bool;
let _37: char;
let _38: [u64; 6];
let _39: *mut *mut u32;
let _40: u8;
let _41: char;
let _42: [u64; 6];
let _43: isize;
let _44: i8;
let _45: isize;
let _46: [u16; 4];
let _47: isize;
let _48: Adt45;
let _49: i8;
let _50: (f32,);
let _51: u8;
let _52: (u16, char, u64);
let _53: [u128; 6];
let _54: u16;
let _55: usize;
let _56: *const i128;
let _57: Adt42;
let _58: f64;
let _59: i8;
let _60: [i32; 7];
let _61: u64;
let _62: Adt53;
let _63: [u64; 1];
let _64: [i32; 7];
let _65: u128;
let _66: Adt58;
let _67: ();
let _68: ();
{
_4 = 3553735844423754314_u64 * 17177220604270399527_u64;
_2 = 97503351293691798778067623352935166294_i128 as isize;
_3 = _2;
_1 = (-5416258317294078683_i64) - (-4231444216623275691_i64);
_4 = 26569_i16 as u64;
_3 = 4104012739_u32 as isize;
_1 = (-2327987324597784288_i64) + 8118605779775498673_i64;
_2 = (-1744641431_i32) as isize;
_3 = -_2;
_3 = -_2;
_2 = !_3;
_4 = 1007136343131796466_u64;
_5 = (-4258_i16);
_3 = _2;
_4 = !226430314198568830_u64;
_5 = -17396_i16;
_3 = -_2;
_2 = 6_usize as isize;
_10 = _4 as f64;
Goto(bb1)
}
bb1 = {
_3 = _2 + _2;
_4 = !16665429082263626380_u64;
Goto(bb2)
}
bb2 = {
_9.1 = _3 as i64;
_7 = '\u{842f2}';
_6 = core::ptr::addr_of_mut!(_9.0);
_2 = !_3;
_2 = _3 >> _9.1;
_9 = (1052267176_u32, _1);
_8.0 = _5 as f32;
_9.1 = -_1;
_5 = (-16259661170158287408478857055662884533_i128) as i16;
_9.0 = 4253064045_u32 << _4;
_7 = '\u{e1c2d}';
_9.1 = _1;
_2 = 5917276911060840406_usize as isize;
_9 = (3731772902_u32, _1);
_8.0 = 58640_u16 as f32;
_1 = !_9.1;
_8.0 = 248_u8 as f32;
_13 = !false;
_11 = 7872847588183841440_usize;
Call(_2 = fn8(_1, _6, (*_6), _3, (*_6), (*_6), (*_6), _9.0, (*_6), _9, (*_6), _7, (*_6)), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_11 = 3_usize;
_18.1 = _7;
_9.0 = !3977931676_u32;
_12 = -_10;
_18.2 = _4;
_9.1 = _11 as i64;
_18 = (25876_u16, _7, _4);
match _11 {
0 => bb1,
1 => bb4,
2 => bb5,
3 => bb8,
_ => bb7
}
}
bb4 = {
_9.1 = _3 as i64;
_7 = '\u{842f2}';
_6 = core::ptr::addr_of_mut!(_9.0);
_2 = !_3;
_2 = _3 >> _9.1;
_9 = (1052267176_u32, _1);
_8.0 = _5 as f32;
_9.1 = -_1;
_5 = (-16259661170158287408478857055662884533_i128) as i16;
_9.0 = 4253064045_u32 << _4;
_7 = '\u{e1c2d}';
_9.1 = _1;
_2 = 5917276911060840406_usize as isize;
_9 = (3731772902_u32, _1);
_8.0 = 58640_u16 as f32;
_1 = !_9.1;
_8.0 = 248_u8 as f32;
_13 = !false;
_11 = 7872847588183841440_usize;
Call(_2 = fn8(_1, _6, (*_6), _3, (*_6), (*_6), (*_6), _9.0, (*_6), _9, (*_6), _7, (*_6)), ReturnTo(bb3), UnwindUnreachable())
}
bb5 = {
_3 = _2 + _2;
_4 = !16665429082263626380_u64;
Goto(bb2)
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_9 = (3056596233_u32, _1);
_2 = _3 ^ _3;
_9.1 = (-128_i8) as i64;
_16 = _8.0;
_19 = [(*_6),(*_6)];
_15 = !87057468898986288860277295327342090061_u128;
_22 = _15 as u16;
_6 = core::ptr::addr_of_mut!((*_6));
match _9.0 {
0 => bb5,
1 => bb9,
2 => bb10,
3056596233 => bb12,
_ => bb11
}
}
bb9 = {
_9.1 = _3 as i64;
_7 = '\u{842f2}';
_6 = core::ptr::addr_of_mut!(_9.0);
_2 = !_3;
_2 = _3 >> _9.1;
_9 = (1052267176_u32, _1);
_8.0 = _5 as f32;
_9.1 = -_1;
_5 = (-16259661170158287408478857055662884533_i128) as i16;
_9.0 = 4253064045_u32 << _4;
_7 = '\u{e1c2d}';
_9.1 = _1;
_2 = 5917276911060840406_usize as isize;
_9 = (3731772902_u32, _1);
_8.0 = 58640_u16 as f32;
_1 = !_9.1;
_8.0 = 248_u8 as f32;
_13 = !false;
_11 = 7872847588183841440_usize;
Call(_2 = fn8(_1, _6, (*_6), _3, (*_6), (*_6), (*_6), _9.0, (*_6), _9, (*_6), _7, (*_6)), ReturnTo(bb3), UnwindUnreachable())
}
bb10 = {
_3 = _2 + _2;
_4 = !16665429082263626380_u64;
Goto(bb2)
}
bb11 = {
_3 = _2 + _2;
_4 = !16665429082263626380_u64;
Goto(bb2)
}
bb12 = {
_15 = 175187556152360411509581634886309681668_u128;
_15 = !102418863379307463384407462594534297280_u128;
_18.2 = _4;
_6 = core::ptr::addr_of_mut!((*_6));
_8 = (_16,);
_14 = _2 as i16;
_5 = _1 as i16;
_17 = core::ptr::addr_of_mut!(_10);
_20 = (*_6);
_18 = (_22, _7, _4);
_10 = _12;
_10 = _12;
_22 = _11 as u16;
_21 = 161_u8;
_14 = _5;
_23.fld2 = _10 as isize;
_18.2 = _4 ^ _4;
_18 = (_22, _7, _4);
_1 = -_9.1;
Goto(bb13)
}
bb13 = {
_18.2 = _11 as u64;
_23.fld1 = !_9.1;
_24 = !_9.0;
_8.0 = _22 as f32;
_17 = core::ptr::addr_of_mut!(_12);
_15 = _4 as u128;
_18.0 = _22 & _22;
_8 = (_16,);
_18.1 = _7;
_9.1 = _23.fld1;
_17 = core::ptr::addr_of_mut!((*_17));
_10 = _22 as f64;
_9.0 = _10 as u32;
_21 = 201_u8;
_18.2 = !_4;
_19 = [_20,_20];
_20 = !(*_6);
_23.fld2 = _3 >> _11;
_21 = 114_u8;
Call(_10 = core::intrinsics::transmute(_2), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
_7 = _18.1;
_1 = _9.1;
_18.2 = _4;
_23.fld1 = _1 - _1;
_4 = _18.2 | _18.2;
_4 = _10 as u64;
_6 = core::ptr::addr_of_mut!(_24);
_30.fld2 = [_4];
_2 = _3;
_22 = !_18.0;
_6 = core::ptr::addr_of_mut!(_24);
_30.fld0 = _8;
_23.fld2 = _3 >> _11;
_9.0 = _24;
_27 = (_8.0,);
_15 = 232918991381552165977565582156585516568_u128;
Call(_31[_11] = fn12(_15, (*_17), _23.fld2, _23.fld2, _30.fld2, _10, _9.1, _23.fld1), ReturnTo(bb15), UnwindUnreachable())
}
bb15 = {
_24 = _9.0 & _9.0;
_31 = [_13,_13,_13,_13,_13];
_9 = ((*_6), _1);
_1 = _23.fld1;
_11 = 2_usize;
_14 = _5;
_2 = !_3;
_29 = _3 | _3;
_17 = core::ptr::addr_of_mut!(_10);
_29 = _23.fld2;
_1 = _9.1;
_23.fld2 = !_2;
_27 = _8;
_32.1 = _9.1 >> _22;
Goto(bb16)
}
bb16 = {
_30.fld0 = _27;
_2 = _29 >> _14;
_28 = _18.2;
_4 = _27.0 as u64;
match _21 {
114 => bb17,
_ => bb5
}
}
bb17 = {
_2 = _21 as isize;
_14 = _5 * _5;
_31 = [_13,_13,_13,_13,_13];
_18.1 = _7;
_30.fld0 = (_8.0,);
_9 = ((*_6), _32.1);
Goto(bb18)
}
bb18 = {
_27 = (_8.0,);
_9.0 = _14 as u32;
_8 = (_27.0,);
Goto(bb19)
}
bb19 = {
_13 = _31[_11];
_29 = -_23.fld2;
_11 = !14449246497105016204_usize;
_25.0 = _8.0;
_32.1 = !_23.fld1;
_8 = (_25.0,);
Goto(bb20)
}
bb20 = {
_8.0 = _16;
_9.0 = _5 as u32;
_4 = _28;
_39 = core::ptr::addr_of_mut!(_6);
_30.fld2 = [_4];
_25.0 = _27.0 - _30.fld0.0;
_36 = _13 <= _13;
match _15 {
0 => bb21,
232918991381552165977565582156585516568 => bb23,
_ => bb22
}
}
bb21 = {
_7 = _18.1;
_1 = _9.1;
_18.2 = _4;
_23.fld1 = _1 - _1;
_4 = _18.2 | _18.2;
_4 = _10 as u64;
_6 = core::ptr::addr_of_mut!(_24);
_30.fld2 = [_4];
_2 = _3;
_22 = !_18.0;
_6 = core::ptr::addr_of_mut!(_24);
_30.fld0 = _8;
_23.fld2 = _3 >> _11;
_9.0 = _24;
_27 = (_8.0,);
_15 = 232918991381552165977565582156585516568_u128;
Call(_31[_11] = fn12(_15, (*_17), _23.fld2, _23.fld2, _30.fld2, _10, _9.1, _23.fld1), ReturnTo(bb15), UnwindUnreachable())
}
bb22 = {
_3 = _2 + _2;
_4 = !16665429082263626380_u64;
Goto(bb2)
}
bb23 = {
_30.fld0.0 = _2 as f32;
_23.fld3 = Adt45::Variant1 { fld0: _22,fld1: _39 };
_17 = core::ptr::addr_of_mut!(_12);
SetDiscriminant(_23.fld3, 1);
_2 = _29;
_37 = _7;
_24 = _37 as u32;
_32 = (_9.0, _23.fld1);
_4 = _18.2;
_18.1 = _37;
_38 = [_18.2,_28,_4,_4,_28,_18.2];
_32.1 = !_9.1;
_9 = (_20, _32.1);
_5 = _14;
_17 = core::ptr::addr_of_mut!(_10);
_12 = (*_17) + (*_17);
_41 = _37;
_11 = 7_usize << _22;
_17 = core::ptr::addr_of_mut!((*_17));
_18.0 = _32.1 as u16;
_30.fld2 = [_28];
_25 = (_27.0,);
_43 = -_23.fld2;
_15 = 277184796315517762222474000441066035849_u128 - 287206248014749493797660270720304020083_u128;
Goto(bb24)
}
bb24 = {
_11 = !4_usize;
_15 = _14 as u128;
_22 = !_18.0;
_32 = ((*_6), _9.1);
place!(Field::<u16>(Variant(_23.fld3, 1), 0)) = _18.0;
_10 = _12;
_17 = core::ptr::addr_of_mut!(_35);
_32.0 = !(*_6);
_9.1 = _32.1 ^ _23.fld1;
_11 = 4_usize >> _43;
_9.0 = _11 as u32;
_42 = [_4,_28,_18.2,_28,_18.2,_4];
_39 = core::ptr::addr_of_mut!(_6);
_36 = _13;
_41 = _18.1;
_45 = _2 << _32.0;
_7 = _18.1;
_14 = !_5;
_9.0 = !(*_6);
_33 = Adt43::Variant0 { fld0: _18 };
_23.fld3 = Adt45::Variant1 { fld0: _18.0,fld1: _39 };
_9.0 = !(*_6);
Goto(bb25)
}
bb25 = {
_50.0 = -_16;
_32.1 = _23.fld1 ^ _9.1;
_18.2 = !_28;
SetDiscriminant(_33, 0);
_25 = (_16,);
SetDiscriminant(_23.fld3, 1);
_44 = (-46_i8);
_20 = _32.0 << _9.1;
_24 = _2 as u32;
Goto(bb26)
}
bb26 = {
_20 = !(*_6);
_49 = _29 as i8;
_35 = -_10;
_46 = [_22,_18.0,_18.0,_22];
_27.0 = _25.0;
place!(Field::<(u16, char, u64)>(Variant(_33, 0), 0)).0 = _22;
match _21 {
0 => bb17,
1 => bb11,
2 => bb27,
3 => bb28,
114 => bb30,
_ => bb29
}
}
bb27 = {
_24 = _9.0 & _9.0;
_31 = [_13,_13,_13,_13,_13];
_9 = ((*_6), _1);
_1 = _23.fld1;
_11 = 2_usize;
_14 = _5;
_2 = !_3;
_29 = _3 | _3;
_17 = core::ptr::addr_of_mut!(_10);
_29 = _23.fld2;
_1 = _9.1;
_23.fld2 = !_2;
_27 = _8;
_32.1 = _9.1 >> _22;
Goto(bb16)
}
bb28 = {
_9.1 = _3 as i64;
_7 = '\u{842f2}';
_6 = core::ptr::addr_of_mut!(_9.0);
_2 = !_3;
_2 = _3 >> _9.1;
_9 = (1052267176_u32, _1);
_8.0 = _5 as f32;
_9.1 = -_1;
_5 = (-16259661170158287408478857055662884533_i128) as i16;
_9.0 = 4253064045_u32 << _4;
_7 = '\u{e1c2d}';
_9.1 = _1;
_2 = 5917276911060840406_usize as isize;
_9 = (3731772902_u32, _1);
_8.0 = 58640_u16 as f32;
_1 = !_9.1;
_8.0 = 248_u8 as f32;
_13 = !false;
_11 = 7872847588183841440_usize;
Call(_2 = fn8(_1, _6, (*_6), _3, (*_6), (*_6), (*_6), _9.0, (*_6), _9, (*_6), _7, (*_6)), ReturnTo(bb3), UnwindUnreachable())
}
bb29 = {
_3 = _2 + _2;
_4 = !16665429082263626380_u64;
Goto(bb2)
}
bb30 = {
_23.fld3 = Adt45::Variant1 { fld0: _22,fld1: _39 };
_52.1 = _18.1;
_23.fld3 = Adt45::Variant1 { fld0: _18.0,fld1: _39 };
_10 = -_35;
place!(Field::<(u16, char, u64)>(Variant(_33, 0), 0)) = _18;
_16 = -_8.0;
_41 = _52.1;
_40 = !_21;
_49 = !_44;
_23.fld1 = _32.1;
_48 = _23.fld3;
_23.fld2 = -_45;
_28 = (*_17) as u64;
_13 = !_36;
Call(_29 = core::intrinsics::bswap(_45), ReturnTo(bb31), UnwindUnreachable())
}
bb31 = {
_23.fld2 = !_3;
_52.2 = _52.1 as u64;
_30.fld2 = [_28];
_10 = _11 as f64;
_24 = !_20;
_31 = [_36,_36,_36,_13,_36];
_52.0 = _18.0;
_51 = _21;
_15 = 330869984973797156047395821114218543126_u128;
_23.fld1 = _1 ^ _9.1;
_14 = _5;
SetDiscriminant(_33, 0);
_18.1 = _52.1;
_25 = (_27.0,);
_35 = -_12;
_9.0 = !_20;
_44 = _25.0 as i8;
_51 = _21;
place!(Field::<u16>(Variant(_23.fld3, 1), 0)) = _52.0;
_24 = _22 as u32;
_31 = [_13,_13,_36,_36,_13];
place!(Field::<u16>(Variant(_23.fld3, 1), 0)) = _22;
_18.1 = _41;
match _15 {
0 => bb6,
1 => bb4,
2 => bb28,
3 => bb32,
330869984973797156047395821114218543126 => bb34,
_ => bb33
}
}
bb32 = {
_20 = !(*_6);
_49 = _29 as i8;
_35 = -_10;
_46 = [_22,_18.0,_18.0,_22];
_27.0 = _25.0;
place!(Field::<(u16, char, u64)>(Variant(_33, 0), 0)).0 = _22;
match _21 {
0 => bb17,
1 => bb11,
2 => bb27,
3 => bb28,
114 => bb30,
_ => bb29
}
}
bb33 = {
_9.1 = _3 as i64;
_7 = '\u{842f2}';
_6 = core::ptr::addr_of_mut!(_9.0);
_2 = !_3;
_2 = _3 >> _9.1;
_9 = (1052267176_u32, _1);
_8.0 = _5 as f32;
_9.1 = -_1;
_5 = (-16259661170158287408478857055662884533_i128) as i16;
_9.0 = 4253064045_u32 << _4;
_7 = '\u{e1c2d}';
_9.1 = _1;
_2 = 5917276911060840406_usize as isize;
_9 = (3731772902_u32, _1);
_8.0 = 58640_u16 as f32;
_1 = !_9.1;
_8.0 = 248_u8 as f32;
_13 = !false;
_11 = 7872847588183841440_usize;
Call(_2 = fn8(_1, _6, (*_6), _3, (*_6), (*_6), (*_6), _9.0, (*_6), _9, (*_6), _7, (*_6)), ReturnTo(bb3), UnwindUnreachable())
}
bb34 = {
_9 = ((*_6), _32.1);
_13 = _36 ^ _36;
_13 = _36;
_50 = (_30.fld0.0,);
SetDiscriminant(_23.fld3, 1);
_23.fld2 = !_2;
_8 = (_16,);
_8 = _30.fld0;
place!(Field::<*mut *mut u32>(Variant(_23.fld3, 1), 1)) = Field::<*mut *mut u32>(Variant(_48, 1), 1);
_18.1 = _52.1;
_14 = -_5;
_23.fld1 = _9.1;
_52.0 = !Field::<u16>(Variant(_48, 1), 0);
_21 = _11 as u8;
_41 = _18.1;
_40 = _51;
_50.0 = _30.fld0.0 + _16;
_31 = [_13,_13,_36,_36,_13];
_7 = _37;
_1 = _23.fld1 ^ _9.1;
place!(Field::<u16>(Variant(_23.fld3, 1), 0)) = Field::<u16>(Variant(_48, 1), 0);
_34 = _42;
_58 = -(*_17);
_47 = _9.1 as isize;
_18.0 = _28 as u16;
_23.fld0 = core::ptr::addr_of!(_53);
_7 = _52.1;
match _40 {
0 => bb32,
1 => bb11,
2 => bb12,
114 => bb35,
_ => bb33
}
}
bb35 = {
place!(Field::<(u16, char, u64)>(Variant(_33, 0), 0)) = (_18.0, _18.1, _28);
_43 = _11 as isize;
_9.1 = _23.fld1;
_46 = [_18.0,_18.0,_22,_18.0];
_34 = [_52.2,_4,Field::<(u16, char, u64)>(Variant(_33, 0), 0).2,_28,Field::<(u16, char, u64)>(Variant(_33, 0), 0).2,_28];
_9 = ((*_6), _1);
Goto(bb36)
}
bb36 = {
_27.0 = _30.fld0.0 + _16;
_45 = _23.fld2 ^ _47;
_12 = _58 + _58;
_42 = [_28,_28,_28,Field::<(u16, char, u64)>(Variant(_33, 0), 0).2,_28,_28];
_62.fld0.1 = _41;
place!(Field::<u16>(Variant(_23.fld3, 1), 0)) = !_22;
_49 = -_44;
place!(Field::<u16>(Variant(_23.fld3, 1), 0)) = _18.0;
_51 = !_21;
_51 = _21;
_53 = [_15,_15,_15,_15,_15,_15];
_3 = _29 & _45;
SetDiscriminant(_23.fld3, 0);
_59 = 896214884_i32 as i8;
_31 = [_36,_36,_36,_13,_13];
_64 = [(-888550340_i32),(-1047838734_i32),1880451085_i32,927071090_i32,268179316_i32,(-1781767859_i32),(-1291939753_i32)];
RET = core::ptr::addr_of_mut!(_62.fld0);
_23.fld3 = _48;
_18.1 = (*RET).1;
_14 = _5;
_4 = _40 as u64;
RET = core::ptr::addr_of_mut!((*RET));
Goto(bb37)
}
bb37 = {
Call(_67 = dump_var(7_usize, 29_usize, Move(_29), 7_usize, Move(_7), 28_usize, Move(_28), 5_usize, Move(_5)), ReturnTo(bb38), UnwindUnreachable())
}
bb38 = {
Call(_67 = dump_var(7_usize, 9_usize, Move(_9), 22_usize, Move(_22), 52_usize, Move(_52), 15_usize, Move(_15)), ReturnTo(bb39), UnwindUnreachable())
}
bb39 = {
Call(_67 = dump_var(7_usize, 3_usize, Move(_3), 51_usize, Move(_51), 24_usize, Move(_24), 40_usize, Move(_40)), ReturnTo(bb40), UnwindUnreachable())
}
bb40 = {
Call(_67 = dump_var(7_usize, 14_usize, Move(_14), 1_usize, Move(_1), 41_usize, Move(_41), 46_usize, Move(_46)), ReturnTo(bb41), UnwindUnreachable())
}
bb41 = {
Call(_67 = dump_var(7_usize, 53_usize, Move(_53), 13_usize, Move(_13), 32_usize, Move(_32), 68_usize, _68), ReturnTo(bb42), UnwindUnreachable())
}
bb42 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn8(mut _1: i64,mut _2: *mut u32,mut _3: u32,mut _4: isize,mut _5: u32,mut _6: u32,mut _7: u32,mut _8: u32,mut _9: u32,mut _10: (u32, i64),mut _11: u32,mut _12: char,mut _13: u32) -> isize {
mir! {
type RET = isize;
let _14: (f32,);
let _15: i32;
let _16: f32;
let _17: u64;
let _18: f64;
let _19: [u16; 4];
let _20: *const f64;
let _21: u8;
let _22: f32;
let _23: [u32; 2];
let _24: [u64; 1];
let _25: char;
let _26: ();
let _27: ();
{
RET = 276769456493465273034388257872787963795_u128 as isize;
_13 = _5 * _7;
_13 = 17953576427667478277_usize as u32;
Call(_2 = fn9(_9, _4, _4, _11, _1), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_14.0 = 43_u8 as f32;
_14.0 = (-93_i8) as f32;
_10.0 = _11 + _9;
RET = _4 | _4;
_5 = _7;
_3 = _7 ^ _10.0;
_15 = 101554030974545110528572421318588540843_i128 as i32;
_16 = _14.0 * _14.0;
_10.0 = _3 >> _5;
_2 = core::ptr::addr_of_mut!(_13);
_16 = -_14.0;
_15 = -1563428951_i32;
_14 = (_16,);
_4 = RET;
_7 = _14.0 as u32;
_4 = !RET;
match _8 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
3731772902 => bb9,
_ => bb8
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
RET = 16091793600730740980_u64 as isize;
_16 = -_14.0;
_5 = _10.1 as u32;
Goto(bb10)
}
bb10 = {
_10 = (_8, _1);
_17 = !1083149634183347481_u64;
_10.0 = (*_2) + _3;
_18 = 59_u8 as f64;
_11 = _10.0;
_10.0 = !_6;
_15 = (*_2) as i32;
_9 = _10.1 as u32;
_3 = _18 as u32;
_1 = _10.1;
_7 = _9;
_13 = _11;
_19 = [5070_u16,26745_u16,1339_u16,47379_u16];
_20 = core::ptr::addr_of!(_18);
_3 = (*_2) | (*_2);
_9 = _3;
_14.0 = _16 - _16;
_10.0 = !_9;
_10 = (_3, _1);
RET = _4;
_10.1 = -_1;
_18 = (-10_i8) as f64;
match _8 {
0 => bb11,
3731772902 => bb13,
_ => bb12
}
}
bb11 = {
_14.0 = 43_u8 as f32;
_14.0 = (-93_i8) as f32;
_10.0 = _11 + _9;
RET = _4 | _4;
_5 = _7;
_3 = _7 ^ _10.0;
_15 = 101554030974545110528572421318588540843_i128 as i32;
_16 = _14.0 * _14.0;
_10.0 = _3 >> _5;
_2 = core::ptr::addr_of_mut!(_13);
_16 = -_14.0;
_15 = -1563428951_i32;
_14 = (_16,);
_4 = RET;
_7 = _14.0 as u32;
_4 = !RET;
match _8 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
3731772902 => bb9,
_ => bb8
}
}
bb12 = {
Return()
}
bb13 = {
_4 = RET ^ RET;
_2 = core::ptr::addr_of_mut!(_6);
RET = _4;
_22 = _16 * _16;
_6 = _10.0 << _3;
_11 = !(*_2);
_21 = _13 as u8;
_21 = 69_u8 >> (*_2);
_16 = _14.0 + _14.0;
_18 = _21 as f64;
_2 = core::ptr::addr_of_mut!((*_2));
_10.1 = _1 * _1;
RET = _4 * _4;
_16 = -_22;
_4 = RET;
_7 = !(*_2);
_11 = _7;
_10 = (_6, _1);
_13 = RET as u32;
_5 = _13;
RET = !_4;
_19 = [21050_u16,31186_u16,6802_u16,64645_u16];
_21 = _15 as u8;
Goto(bb14)
}
bb14 = {
Call(_26 = dump_var(8_usize, 5_usize, Move(_5), 21_usize, Move(_21), 6_usize, Move(_6), 1_usize, Move(_1)), ReturnTo(bb15), UnwindUnreachable())
}
bb15 = {
Call(_26 = dump_var(8_usize, 9_usize, Move(_9), 4_usize, Move(_4), 10_usize, Move(_10), 17_usize, Move(_17)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn9(mut _1: u32,mut _2: isize,mut _3: isize,mut _4: u32,mut _5: i64) -> *mut u32 {
mir! {
type RET = *mut u32;
let _6: ((u32, i64), (*mut *mut u32, char));
let _7: f64;
let _8: (u16, char, u64);
let _9: Adt43;
let _10: [u64; 1];
let _11: [u64; 1];
let _12: f64;
let _13: isize;
let _14: i32;
let _15: i32;
let _16: isize;
let _17: *const f64;
let _18: (u16, char, u64);
let _19: bool;
let _20: ();
let _21: ();
{
RET = core::ptr::addr_of_mut!(_4);
_5 = (-1530433698222741072_i64) + (-7873153836445073936_i64);
_2 = _3 << _3;
_2 = _3 << (*RET);
Goto(bb1)
}
bb1 = {
_2 = _3;
_5 = (-8253216986341290149_i64);
_1 = (*RET);
match _1 {
3731772902 => bb3,
_ => bb2
}
}
bb2 = {
Return()
}
bb3 = {
RET = core::ptr::addr_of_mut!(_1);
_3 = (-75815821933452824356187483124398270446_i128) as isize;
_6.0 = ((*RET), _5);
_6.1.0 = core::ptr::addr_of_mut!(RET);
_6.0.0 = 88_i8 as u32;
_4 = !_6.0.0;
_5 = -_6.0.1;
RET = core::ptr::addr_of_mut!(_4);
_3 = !_2;
_6.0.1 = -_5;
_7 = 69_u8 as f64;
_6.0.0 = 16978_u16 as u32;
_7 = 18746630811822712841113651689068520173_u128 as f64;
_1 = !_4;
_6.1.1 = '\u{2195d}';
Goto(bb4)
}
bb4 = {
_8.2 = !4924054441419567076_u64;
RET = core::ptr::addr_of_mut!((*RET));
RET = core::ptr::addr_of_mut!(_6.0.0);
_6.0.0 = _4;
_9 = Adt43::Variant1 { fld0: _6.1.0 };
_6.1 = (Field::<*mut *mut u32>(Variant(_9, 1), 0), '\u{ca4b5}');
SetDiscriminant(_9, 0);
place!(Field::<(u16, char, u64)>(Variant(_9, 0), 0)) = (14524_u16, _6.1.1, _8.2);
_8.2 = Field::<(u16, char, u64)>(Variant(_9, 0), 0).2 ^ Field::<(u16, char, u64)>(Variant(_9, 0), 0).2;
_3 = (-141922010620470968587378752624477390819_i128) as isize;
SetDiscriminant(_9, 1);
place!(Field::<*mut *mut u32>(Variant(_9, 1), 0)) = _6.1.0;
_12 = _7;
RET = core::ptr::addr_of_mut!((*RET));
_8 = (23634_u16, _6.1.1, 8316945102777741172_u64);
RET = core::ptr::addr_of_mut!(_6.0.0);
_10 = [_8.2];
match _8.0 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb5,
23634 => bb7,
_ => bb6
}
}
bb5 = {
_2 = _3;
_5 = (-8253216986341290149_i64);
_1 = (*RET);
match _1 {
3731772902 => bb3,
_ => bb2
}
}
bb6 = {
Return()
}
bb7 = {
_6.0 = (_4, _5);
_4 = 39291071281530881821177771470857364275_i128 as u32;
_14 = 27255_i16 as i32;
place!(Field::<*mut *mut u32>(Variant(_9, 1), 0)) = core::ptr::addr_of_mut!(RET);
_7 = _12 - _12;
match _8.0 {
0 => bb8,
1 => bb9,
23634 => bb11,
_ => bb10
}
}
bb8 = {
Return()
}
bb9 = {
RET = core::ptr::addr_of_mut!(_1);
_3 = (-75815821933452824356187483124398270446_i128) as isize;
_6.0 = ((*RET), _5);
_6.1.0 = core::ptr::addr_of_mut!(RET);
_6.0.0 = 88_i8 as u32;
_4 = !_6.0.0;
_5 = -_6.0.1;
RET = core::ptr::addr_of_mut!(_4);
_3 = !_2;
_6.0.1 = -_5;
_7 = 69_u8 as f64;
_6.0.0 = 16978_u16 as u32;
_7 = 18746630811822712841113651689068520173_u128 as f64;
_1 = !_4;
_6.1.1 = '\u{2195d}';
Goto(bb4)
}
bb10 = {
_8.2 = !4924054441419567076_u64;
RET = core::ptr::addr_of_mut!((*RET));
RET = core::ptr::addr_of_mut!(_6.0.0);
_6.0.0 = _4;
_9 = Adt43::Variant1 { fld0: _6.1.0 };
_6.1 = (Field::<*mut *mut u32>(Variant(_9, 1), 0), '\u{ca4b5}');
SetDiscriminant(_9, 0);
place!(Field::<(u16, char, u64)>(Variant(_9, 0), 0)) = (14524_u16, _6.1.1, _8.2);
_8.2 = Field::<(u16, char, u64)>(Variant(_9, 0), 0).2 ^ Field::<(u16, char, u64)>(Variant(_9, 0), 0).2;
_3 = (-141922010620470968587378752624477390819_i128) as isize;
SetDiscriminant(_9, 1);
place!(Field::<*mut *mut u32>(Variant(_9, 1), 0)) = _6.1.0;
_12 = _7;
RET = core::ptr::addr_of_mut!((*RET));
_8 = (23634_u16, _6.1.1, 8316945102777741172_u64);
RET = core::ptr::addr_of_mut!(_6.0.0);
_10 = [_8.2];
match _8.0 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb5,
23634 => bb7,
_ => bb6
}
}
bb11 = {
_6.1 = (Field::<*mut *mut u32>(Variant(_9, 1), 0), _8.1);
Call(_14 = core::intrinsics::bswap(1262273080_i32), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
_8.1 = _6.1.1;
_6.1.0 = core::ptr::addr_of_mut!(RET);
_15 = !_14;
_6.0.0 = _4 + _4;
_6.1.0 = core::ptr::addr_of_mut!(RET);
SetDiscriminant(_9, 1);
_5 = _8.0 as i64;
place!(Field::<*mut *mut u32>(Variant(_9, 1), 0)) = _6.1.0;
_11 = [_8.2];
SetDiscriminant(_9, 1);
RET = core::ptr::addr_of_mut!((*RET));
RET = core::ptr::addr_of_mut!(_1);
_11 = [_8.2];
_6.0.1 = _7 as i64;
_11 = [_8.2];
RET = core::ptr::addr_of_mut!(_4);
_18.2 = (-98_i8) as u64;
_11 = _10;
Call(_2 = fn10(_8, _11, _8.0, _5, _8.0, _6.1, _6, _6.0, _8.0, _8.0, _6.1.1, _10, _6, _11, _10, _8), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
_13 = (-8524_i16) as isize;
_6.1.1 = _8.1;
_8.0 = 50158_u16 - 22441_u16;
_8 = (64675_u16, _6.1.1, _18.2);
_1 = _6.0.0;
_5 = _6.0.1 + _6.0.1;
_6.0.0 = (-146671919123340408310728021557943790889_i128) as u32;
match _8.0 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb7,
4 => bb14,
64675 => bb16,
_ => bb15
}
}
bb14 = {
_8.2 = !4924054441419567076_u64;
RET = core::ptr::addr_of_mut!((*RET));
RET = core::ptr::addr_of_mut!(_6.0.0);
_6.0.0 = _4;
_9 = Adt43::Variant1 { fld0: _6.1.0 };
_6.1 = (Field::<*mut *mut u32>(Variant(_9, 1), 0), '\u{ca4b5}');
SetDiscriminant(_9, 0);
place!(Field::<(u16, char, u64)>(Variant(_9, 0), 0)) = (14524_u16, _6.1.1, _8.2);
_8.2 = Field::<(u16, char, u64)>(Variant(_9, 0), 0).2 ^ Field::<(u16, char, u64)>(Variant(_9, 0), 0).2;
_3 = (-141922010620470968587378752624477390819_i128) as isize;
SetDiscriminant(_9, 1);
place!(Field::<*mut *mut u32>(Variant(_9, 1), 0)) = _6.1.0;
_12 = _7;
RET = core::ptr::addr_of_mut!((*RET));
_8 = (23634_u16, _6.1.1, 8316945102777741172_u64);
RET = core::ptr::addr_of_mut!(_6.0.0);
_10 = [_8.2];
match _8.0 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb5,
23634 => bb7,
_ => bb6
}
}
bb15 = {
Return()
}
bb16 = {
_16 = _3 - _2;
RET = core::ptr::addr_of_mut!(_4);
_16 = _3 | _2;
_6.1.1 = _8.1;
_11 = [_8.2];
_16 = _2;
_4 = _6.0.0;
_8.2 = _18.2;
_11 = _10;
_11 = [_18.2];
place!(Field::<*mut *mut u32>(Variant(_9, 1), 0)) = _6.1.0;
_18 = _8;
Goto(bb17)
}
bb17 = {
Call(_20 = dump_var(9_usize, 14_usize, Move(_14), 10_usize, Move(_10), 2_usize, Move(_2), 5_usize, Move(_5)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_20 = dump_var(9_usize, 11_usize, Move(_11), 16_usize, Move(_16), 21_usize, _21, 21_usize, _21), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn10(mut _1: (u16, char, u64),mut _2: [u64; 1],mut _3: u16,mut _4: i64,mut _5: u16,mut _6: (*mut *mut u32, char),mut _7: ((u32, i64), (*mut *mut u32, char)),mut _8: (u32, i64),mut _9: u16,mut _10: u16,mut _11: char,mut _12: [u64; 1],mut _13: ((u32, i64), (*mut *mut u32, char)),mut _14: [u64; 1],mut _15: [u64; 1],mut _16: (u16, char, u64)) -> isize {
mir! {
type RET = isize;
let _17: i128;
let _18: [u16; 4];
let _19: [bool; 5];
let _20: isize;
let _21: isize;
let _22: isize;
let _23: u16;
let _24: u16;
let _25: f32;
let _26: Adt46;
let _27: [u16; 4];
let _28: isize;
let _29: u64;
let _30: char;
let _31: usize;
let _32: char;
let _33: bool;
let _34: Adt42;
let _35: [i32; 7];
let _36: f64;
let _37: f32;
let _38: [u64; 1];
let _39: &'static u8;
let _40: Adt52;
let _41: f32;
let _42: i64;
let _43: ([u64; 6], [u128; 6], u8, (u32, i64));
let _44: u128;
let _45: [bool; 5];
let _46: [u128; 6];
let _47: [i32; 7];
let _48: Adt52;
let _49: [u64; 1];
let _50: [u64; 6];
let _51: ();
let _52: ();
{
_4 = (-1497248199_i32) as i64;
_14 = [_1.2];
_1.0 = _3;
_1 = _16;
_1.1 = _16.1;
_13.0.1 = !_4;
_4 = _7.0.1 - _7.0.1;
_14 = [_16.2];
_7.0.1 = _16.1 as i64;
_14 = _12;
_16.1 = _6.1;
_1.2 = 9223372036854775807_isize as u64;
_13.0.0 = _8.0;
_18 = [_1.0,_10,_10,_5];
_1 = _16;
_11 = _7.1.1;
_14 = [_1.2];
_6 = (_13.1.0, _1.1);
_4 = -_8.1;
_20 = 4_usize as isize;
_13.0.1 = -_8.1;
Goto(bb1)
}
bb1 = {
_19 = [true,true,false,false,false];
_7.0 = (_8.0, _13.0.1);
_13.0.1 = _8.1;
_7.1.1 = _13.1.1;
_1.1 = _6.1;
_11 = _6.1;
_19 = [true,true,true,false,true];
_16 = (_1.0, _7.1.1, _1.2);
_16 = _1;
_25 = 29641_i16 as f32;
_22 = (-24016_i16) as isize;
_11 = _13.1.1;
_20 = (-8340_i16) as isize;
Goto(bb2)
}
bb2 = {
_26.fld0 = true;
_22 = _20 + _20;
_26.fld4.1.0 = _7.1.0;
_5 = _22 as u16;
_7.1.0 = _6.0;
RET = 61_u8 as isize;
match _9 {
0 => bb1,
23634 => bb4,
_ => bb3
}
}
bb3 = {
_19 = [true,true,false,false,false];
_7.0 = (_8.0, _13.0.1);
_13.0.1 = _8.1;
_7.1.1 = _13.1.1;
_1.1 = _6.1;
_11 = _6.1;
_19 = [true,true,true,false,true];
_16 = (_1.0, _7.1.1, _1.2);
_16 = _1;
_25 = 29641_i16 as f32;
_22 = (-24016_i16) as isize;
_11 = _13.1.1;
_20 = (-8340_i16) as isize;
Goto(bb2)
}
bb4 = {
_21 = RET;
_12 = [_1.2];
_8.1 = !_4;
_26.fld4.1.1 = _13.1.1 as usize;
_17 = 132538292329478285355105591481316645065_i128 + (-6530308302816340731339144092378166278_i128);
_7.0.0 = _13.0.0;
_7 = _13;
_14 = [_16.2];
_7 = _13;
Goto(bb5)
}
bb5 = {
_9 = _16.0;
_7.1 = _6;
_13.1.0 = _26.fld4.1.0;
_26.fld2.2 = _1.2;
_1 = _16;
_3 = _10;
_26.fld2.1 = _6.1;
_23 = _5;
_26.fld4.1.0 = _6.0;
_19 = [_26.fld0,_26.fld0,_26.fld0,_26.fld0,_26.fld0];
_28 = _13.0.0 as isize;
_13.0.1 = _4 - _8.1;
_7.1.1 = _26.fld2.1;
_23 = _10;
_20 = -_28;
_20 = _28 ^ _22;
_7.0 = _13.0;
_30 = _16.1;
Goto(bb6)
}
bb6 = {
_18 = [_23,_3,_9,_1.0];
_6.1 = _30;
_11 = _30;
_31 = _17 as usize;
_7.1 = _13.1;
_7.0.0 = !_8.0;
_7.1 = _6;
_26.fld2.0 = !_3;
_29 = _1.2;
_26.fld3 = Adt43::Variant0 { fld0: _1 };
_7.1 = (_6.0, _30);
_13.0 = (_8.0, _8.1);
_7.1.0 = _26.fld4.1.0;
_9 = _3 & _26.fld2.0;
_1.1 = _7.1.1;
_1.0 = _9 - _9;
_22 = _25 as isize;
_14 = [_26.fld2.2];
place!(Field::<(u16, char, u64)>(Variant(_26.fld3, 0), 0)).0 = _23 % _3;
_7.0 = _13.0;
_15 = [_26.fld2.2];
_27 = [_26.fld2.0,_1.0,_23,_1.0];
_26.fld2.0 = !_1.0;
_27 = [_9,_1.0,_1.0,_26.fld2.0];
_14 = _15;
_7.0.0 = _29 as u32;
RET = _29 as isize;
_15 = [_26.fld2.2];
Call(place!(Field::<(u16, char, u64)>(Variant(_26.fld3, 0), 0)) = fn11(_26.fld2.0, _26.fld2, _8, _1, _20, _7.1.0, _1), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
_26.fld2.2 = _29 << _16.0;
_26.fld2 = (_23, _6.1, Field::<(u16, char, u64)>(Variant(_26.fld3, 0), 0).2);
_26.fld4.3 = _7.0.0 as i64;
SetDiscriminant(_26.fld3, 0);
Goto(bb8)
}
bb8 = {
_26.fld4.1 = (_13.1.0, _31);
_16.2 = _26.fld0 as u64;
place!(Field::<(u16, char, u64)>(Variant(_26.fld3, 0), 0)) = (_1.0, _30, _29);
_33 = !_26.fld0;
_24 = !Field::<(u16, char, u64)>(Variant(_26.fld3, 0), 0).0;
_35 = [1911730492_i32,(-1938129871_i32),162748400_i32,(-911697758_i32),(-791624936_i32),1755254186_i32,(-1849265264_i32)];
_32 = Field::<(u16, char, u64)>(Variant(_26.fld3, 0), 0).1;
_7.1 = _6;
_26.fld4.1.0 = _7.1.0;
_3 = _26.fld4.3 as u16;
_26.fld4.1 = (_13.1.0, _31);
_10 = !Field::<(u16, char, u64)>(Variant(_26.fld3, 0), 0).0;
Goto(bb9)
}
bb9 = {
_7.1 = (_26.fld4.1.0, _30);
_26.fld2.2 = _16.2 * _29;
_13.0 = _7.0;
_33 = _24 != Field::<(u16, char, u64)>(Variant(_26.fld3, 0), 0).0;
Goto(bb10)
}
bb10 = {
_24 = !_9;
_29 = !Field::<(u16, char, u64)>(Variant(_26.fld3, 0), 0).2;
_19 = [_33,_33,_33,_33,_33];
Goto(bb11)
}
bb11 = {
_17 = -(-133951820687664104656739272852393263811_i128);
_35 = [766783736_i32,218346535_i32,597470132_i32,(-371524479_i32),(-1994582985_i32),633158961_i32,(-301632762_i32)];
_12 = [_16.2];
RET = _25 as isize;
SetDiscriminant(_26.fld3, 0);
_13 = (_7.0, _7.1);
_10 = _32 as u16;
_26.fld3 = Adt43::Variant1 { fld0: _6.0 };
RET = _28 >> _29;
_16.1 = _7.1.1;
_23 = _1.0;
_40.fld1 = _6;
_26.fld4.1.0 = Field::<*mut *mut u32>(Variant(_26.fld3, 1), 0);
_7.0.1 = !_4;
_40.fld1 = _13.1;
_3 = (-1121185819_i32) as u16;
_39 = &_43.2;
_40.fld1.0 = _26.fld4.1.0;
_7.0.1 = -_13.0.1;
match _26.fld2.0 {
0 => bb2,
23634 => bb13,
_ => bb12
}
}
bb12 = {
_9 = _16.0;
_7.1 = _6;
_13.1.0 = _26.fld4.1.0;
_26.fld2.2 = _1.2;
_1 = _16;
_3 = _10;
_26.fld2.1 = _6.1;
_23 = _5;
_26.fld4.1.0 = _6.0;
_19 = [_26.fld0,_26.fld0,_26.fld0,_26.fld0,_26.fld0];
_28 = _13.0.0 as isize;
_13.0.1 = _4 - _8.1;
_7.1.1 = _26.fld2.1;
_23 = _10;
_20 = -_28;
_20 = _28 ^ _22;
_7.0 = _13.0;
_30 = _16.1;
Goto(bb6)
}
bb13 = {
_13.1.1 = _40.fld1.1;
_1.2 = !_26.fld2.2;
_43.3.0 = _13.0.0;
_44 = 263093929879294233914574459399623601818_u128;
SetDiscriminant(_26.fld3, 0);
place!(Field::<(u16, char, u64)>(Variant(_26.fld3, 0), 0)) = (_1.0, _40.fld1.1, _16.2);
_1 = (Field::<(u16, char, u64)>(Variant(_26.fld3, 0), 0).0, _7.1.1, _26.fld2.2);
_44 = !293607464695050724421963379727354570916_u128;
_23 = !_1.0;
_7.0.0 = _13.0.0 * _13.0.0;
_1 = Field::<(u16, char, u64)>(Variant(_26.fld3, 0), 0);
_23 = !_24;
_33 = !_26.fld0;
_36 = _26.fld4.3 as f64;
_43.3.1 = _13.0.1;
match _16.0 {
0 => bb10,
1 => bb2,
2 => bb11,
23634 => bb14,
_ => bb4
}
}
bb14 = {
_8.0 = !_43.3.0;
_13.0.1 = -_26.fld4.3;
Goto(bb15)
}
bb15 = {
Call(_51 = dump_var(10_usize, 8_usize, Move(_8), 1_usize, Move(_1), 24_usize, Move(_24), 4_usize, Move(_4)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_51 = dump_var(10_usize, 5_usize, Move(_5), 31_usize, Move(_31), 10_usize, Move(_10), 27_usize, Move(_27)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_51 = dump_var(10_usize, 14_usize, Move(_14), 28_usize, Move(_28), 20_usize, Move(_20), 15_usize, Move(_15)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_51 = dump_var(10_usize, 22_usize, Move(_22), 32_usize, Move(_32), 9_usize, Move(_9), 52_usize, _52), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn11(mut _1: u16,mut _2: (u16, char, u64),mut _3: (u32, i64),mut _4: (u16, char, u64),mut _5: isize,mut _6: *mut *mut u32,mut _7: (u16, char, u64)) -> (u16, char, u64) {
mir! {
type RET = (u16, char, u64);
let _8: i64;
let _9: u8;
let _10: f64;
let _11: ();
let _12: ();
{
RET.0 = !_1;
_7.1 = _4.1;
RET.1 = _7.1;
_7 = (_2.0, _2.1, _4.2);
_3 = (4066340261_u32, (-1167341366450594915_i64));
_5 = 9223372036854775807_isize;
RET.0 = _4.0;
RET.2 = _4.2 ^ _4.2;
_4.0 = !RET.0;
RET.0 = (-49_i8) as u16;
RET.2 = _4.2;
RET = _4;
_4.0 = !_1;
RET.1 = _7.1;
_4.0 = RET.0;
RET.1 = _4.1;
RET.2 = !_7.2;
_4 = _7;
RET.1 = _7.1;
_9 = 224_u8;
Goto(bb1)
}
bb1 = {
Call(_11 = dump_var(11_usize, 7_usize, Move(_7), 1_usize, Move(_1), 3_usize, Move(_3), 12_usize, _12), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn12(mut _1: u128,mut _2: f64,mut _3: isize,mut _4: isize,mut _5: [u64; 1],mut _6: f64,mut _7: i64,mut _8: i64) -> bool {
mir! {
type RET = bool;
let _9: (u16, char, u64);
let _10: (u32, i64);
let _11: *const f64;
let _12: [u64; 6];
let _13: *mut (f32,);
let _14: [bool; 5];
let _15: [bool; 5];
let _16: Adt51;
let _17: isize;
let _18: f64;
let _19: usize;
let _20: bool;
let _21: u128;
let _22: f32;
let _23: u128;
let _24: (u16, char, u64);
let _25: [u64; 1];
let _26: (*mut *mut u32, usize);
let _27: isize;
let _28: ((u32, i64), (*mut *mut u32, char));
let _29: f32;
let _30: char;
let _31: Adt57;
let _32: &'static u8;
let _33: ([u64; 6], [u128; 6], u8, (u32, i64));
let _34: usize;
let _35: f32;
let _36: [u64; 6];
let _37: bool;
let _38: char;
let _39: (*mut *mut u32, usize);
let _40: i128;
let _41: isize;
let _42: ();
let _43: ();
{
_3 = (-10178_i16) as isize;
_7 = 37_i8 as i64;
_4 = -_3;
_8 = _7;
_9.0 = 19780_u16 * 58759_u16;
_5 = [13739637558327861285_u64];
_4 = 1573180387_i32 as isize;
_4 = !_3;
RET = !false;
_7 = 31719_i16 as i64;
_9 = (53485_u16, '\u{89f4b}', 11955904289851103256_u64);
_10.1 = !_8;
_10.0 = 3004758522_u32 + 859814370_u32;
RET = true;
_7 = !_8;
match _9.2 {
0 => bb1,
1 => bb2,
11955904289851103256 => bb4,
_ => bb3
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
_12 = [_9.2,_9.2,_9.2,_9.2,_9.2,_9.2];
_9.2 = !18344912089678042802_u64;
_11 = core::ptr::addr_of!(_6);
_7 = _9.0 as i64;
_10 = (843917575_u32, _7);
_10.0 = 156_u8 as u32;
_8 = -_10.1;
_9 = (25037_u16, '\u{ce87c}', 13707358380482102137_u64);
_1 = 206443761586565527666495482763779330204_u128;
_2 = _1 as f64;
_5 = [_9.2];
_2 = 22_u8 as f64;
RET = true;
_10.1 = 69_u8 as i64;
_14 = [RET,RET,RET,RET,RET];
_9 = (42372_u16, '\u{6251a}', 17564504803510315705_u64);
_14 = [RET,RET,RET,RET,RET];
_10 = (3692117654_u32, _7);
Goto(bb5)
}
bb5 = {
_4 = _9.0 as isize;
_3 = _4;
_8 = -_7;
_5 = [_9.2];
_2 = -_6;
_2 = (*_11);
_1 = 283188899178183501565444874977113510846_u128;
_16.fld2 = [_9.2,_9.2,_9.2,_9.2,_9.2,_9.2];
_15 = [RET,RET,RET,RET,RET];
_12 = _16.fld2;
_17 = _3;
_10.0 = !1190002522_u32;
_7 = RET as i64;
match _9.2 {
0 => bb6,
17564504803510315705 => bb8,
_ => bb7
}
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_10 = (2671250161_u32, _8);
_14 = [RET,RET,RET,RET,RET];
_20 = _4 == _17;
_6 = 6538020276362048332_usize as f64;
_16 = Adt51 { fld0: _10.0,fld1: 1961867229513396155_usize,fld2: _12 };
_10 = (_16.fld0, _8);
_15 = _14;
_16.fld2 = [_9.2,_9.2,_9.2,_9.2,_9.2,_9.2];
_19 = _16.fld1;
_4 = _1 as isize;
_16.fld0 = _10.0 << _3;
_16.fld2 = [_9.2,_9.2,_9.2,_9.2,_9.2,_9.2];
_16.fld1 = _19 + _19;
_4 = -_3;
_19 = _16.fld1 | _16.fld1;
_22 = _1 as f32;
_1 = 147325614294372499583711176212795318164_u128;
_22 = _1 as f32;
_10.0 = !_16.fld0;
_11 = core::ptr::addr_of!(_2);
_21 = _1;
_10.1 = _9.1 as i64;
_10.1 = -_8;
_12 = _16.fld2;
match _9.0 {
0 => bb5,
1 => bb6,
2 => bb3,
42372 => bb9,
_ => bb4
}
}
bb9 = {
_17 = (*_11) as isize;
_18 = (*_11);
_2 = -_18;
_22 = (-61_i8) as f32;
_4 = -_17;
_22 = 91_i8 as f32;
_4 = _20 as isize;
_9.0 = 56032_u16;
_12 = _16.fld2;
Goto(bb10)
}
bb10 = {
_9.1 = '\u{90434}';
_9 = (36116_u16, '\u{138be}', 13212602047658949450_u64);
_2 = _18;
_10 = (_16.fld0, _8);
_9.1 = '\u{ea313}';
_22 = 35664326729608863822219609351500646597_i128 as f32;
_14 = [_20,RET,_20,_20,_20];
_17 = _4;
_11 = core::ptr::addr_of!(_18);
_9.0 = 7910_u16;
_26.1 = !_16.fld1;
_9.2 = _9.1 as u64;
_24.0 = _9.0 / _9.0;
_18 = _6;
_26.1 = !_19;
_16.fld1 = _19 >> _19;
_18 = _2 + _2;
_17 = !_4;
_6 = -_18;
RET = _20;
_2 = (*_11);
_24.1 = _9.1;
_21 = _1 + _1;
match _9.0 {
7910 => bb11,
_ => bb3
}
}
bb11 = {
RET = !_20;
_1 = !_21;
_16 = Adt51 { fld0: _10.0,fld1: _26.1,fld2: _12 };
_23 = 86_u8 as u128;
_10.1 = _8 ^ _8;
_16.fld2 = _12;
_12 = _16.fld2;
_9.0 = _24.0 ^ _24.0;
_25 = [_9.2];
_4 = _9.2 as isize;
_9 = (_24.0, _24.1, 13130496346584397271_u64);
_16.fld0 = _10.0 >> _19;
_24 = (_9.0, _9.1, _9.2);
_21 = !_23;
_28.1.1 = _9.1;
_1 = _23;
_7 = _10.1 << _26.1;
match _24.2 {
0 => bb5,
13130496346584397271 => bb13,
_ => bb12
}
}
bb12 = {
_10 = (2671250161_u32, _8);
_14 = [RET,RET,RET,RET,RET];
_20 = _4 == _17;
_6 = 6538020276362048332_usize as f64;
_16 = Adt51 { fld0: _10.0,fld1: 1961867229513396155_usize,fld2: _12 };
_10 = (_16.fld0, _8);
_15 = _14;
_16.fld2 = [_9.2,_9.2,_9.2,_9.2,_9.2,_9.2];
_19 = _16.fld1;
_4 = _1 as isize;
_16.fld0 = _10.0 << _3;
_16.fld2 = [_9.2,_9.2,_9.2,_9.2,_9.2,_9.2];
_16.fld1 = _19 + _19;
_4 = -_3;
_19 = _16.fld1 | _16.fld1;
_22 = _1 as f32;
_1 = 147325614294372499583711176212795318164_u128;
_22 = _1 as f32;
_10.0 = !_16.fld0;
_11 = core::ptr::addr_of!(_2);
_21 = _1;
_10.1 = _9.1 as i64;
_10.1 = -_8;
_12 = _16.fld2;
match _9.0 {
0 => bb5,
1 => bb6,
2 => bb3,
42372 => bb9,
_ => bb4
}
}
bb13 = {
_3 = _24.2 as isize;
_12 = _16.fld2;
_16.fld1 = _26.1;
_30 = _24.1;
_18 = 106692294378579634289206873041120981152_i128 as f64;
_9.1 = _30;
_25 = [_9.2];
_10 = (_16.fld0, _7);
_29 = 1419396190_i32 as f32;
_28.0.1 = (-304279312_i32) as i64;
_16 = Adt51 { fld0: _10.0,fld1: _19,fld2: _12 };
_26.1 = !_19;
_5 = [_24.2];
_14 = [RET,_20,_20,_20,RET];
_3 = _26.1 as isize;
_31.fld0 = (_22,);
_31.fld0.0 = _19 as f32;
_10 = (_16.fld0, _8);
_6 = _23 as f64;
_29 = _31.fld0.0;
_26.1 = _16.fld1;
Goto(bb14)
}
bb14 = {
_33.3.0 = !_10.0;
_18 = _2 - _2;
_12 = _16.fld2;
_31.fld2 = [_24.2];
_12 = _16.fld2;
_17 = -_3;
_3 = _17 << _17;
_33.2 = 226_u8 & 82_u8;
_14 = [RET,_20,RET,RET,_20];
_4 = !_3;
_36 = [_24.2,_9.2,_24.2,_9.2,_24.2,_9.2];
_34 = _19 * _26.1;
_12 = _16.fld2;
_8 = _7 * _7;
_33.1 = [_23,_21,_1,_21,_23,_1];
_5 = [_24.2];
_33.3 = (_16.fld0, _8);
_17 = _3;
Goto(bb15)
}
bb15 = {
Call(_42 = dump_var(12_usize, 7_usize, Move(_7), 19_usize, Move(_19), 3_usize, Move(_3), 8_usize, Move(_8)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_42 = dump_var(12_usize, 25_usize, Move(_25), 23_usize, Move(_23), 24_usize, Move(_24), 15_usize, Move(_15)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_42 = dump_var(12_usize, 12_usize, Move(_12), 4_usize, Move(_4), 43_usize, _43, 43_usize, _43), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn13(mut _1: [bool; 5],mut _2: (f32,),mut _3: [bool; 5],mut _4: i64,mut _5: char,mut _6: isize,mut _7: usize,mut _8: usize,mut _9: [u64; 6],mut _10: usize,mut _11: bool,mut _12: [i32; 7],mut _13: usize,mut _14: i64) -> [bool; 5] {
mir! {
type RET = [bool; 5];
let _15: isize;
let _16: (f32,);
let _17: [u16; 4];
let _18: f32;
let _19: isize;
let _20: [bool; 5];
let _21: (u32, i64);
let _22: [bool; 5];
let _23: ();
let _24: ();
{
_8 = _7 - _7;
_4 = _2.0 as i64;
_10 = !_7;
_10 = !_8;
RET = _1;
_12 = [1706346261_i32,193605401_i32,(-867087957_i32),240290966_i32,1759361131_i32,(-1864193898_i32),(-10214992_i32)];
RET = _1;
_1 = [_11,_11,_11,_11,_11];
_6 = 22_isize;
_4 = _14;
_12 = [1492039733_i32,235319616_i32,(-1103132989_i32),103718461_i32,(-2146993895_i32),(-1322137102_i32),(-144458646_i32)];
_3 = [_11,_11,_11,_11,_11];
_15 = _6 | _6;
_13 = _7 ^ _7;
_15 = !_6;
_13 = _7;
_12 = [1471164619_i32,1741808294_i32,(-1241646708_i32),(-1787841950_i32),1288763298_i32,(-640487155_i32),343210546_i32];
_3 = [_11,_11,_11,_11,_11];
_10 = _7 | _13;
_8 = _7 << _7;
_4 = _14 * _14;
_16.0 = -_2.0;
_5 = '\u{f4cd3}';
_2 = (_16.0,);
Goto(bb1)
}
bb1 = {
_2 = _16;
_7 = 2754907318_u32 as usize;
_4 = _14 + _14;
_16 = (_2.0,);
_17 = [46098_u16,26729_u16,63787_u16,15453_u16];
_4 = _14 >> _13;
_1 = [_11,_11,_11,_11,_11];
_12 = [(-1287387231_i32),(-430633074_i32),456785004_i32,(-1426416429_i32),1745382750_i32,(-1333418988_i32),860833005_i32];
_6 = _15;
_16.0 = 208259661063567264335513685685221790361_u128 as f32;
_12 = [1187547240_i32,(-1928026731_i32),(-527717896_i32),1426330383_i32,(-1092167235_i32),(-524611721_i32),(-1219736786_i32)];
RET = _3;
_13 = _10 + _10;
Call(_11 = fn14(_14, _17, _13), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_17 = [31275_u16,50076_u16,17641_u16,36729_u16];
RET = _3;
_1 = _3;
_2 = (_16.0,);
_11 = _4 == _4;
_19 = _15 ^ _6;
_14 = _4 | _4;
RET = [_11,_11,_11,_11,_11];
_6 = _15;
_16 = (_2.0,);
_18 = 100263113745133113520600882092746765773_u128 as f32;
_14 = _4 & _4;
_8 = _13 << _4;
_16 = _2;
_5 = '\u{1056ff}';
_2.0 = _18 + _18;
_2 = _16;
_19 = _15 | _6;
_9 = [10679232332919295445_u64,8081353083959171299_u64,6221861963518300300_u64,7852384069505579457_u64,560200988957526470_u64,3459739670977501154_u64];
_20 = [_11,_11,_11,_11,_11];
_2 = _16;
_2.0 = 1186680107430685508_u64 as f32;
RET = _20;
_22 = [_11,_11,_11,_11,_11];
_21 = (1481865680_u32, _14);
Goto(bb3)
}
bb3 = {
Call(_23 = dump_var(13_usize, 15_usize, Move(_15), 19_usize, Move(_19), 11_usize, Move(_11), 7_usize, Move(_7)), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
Call(_23 = dump_var(13_usize, 22_usize, Move(_22), 12_usize, Move(_12), 21_usize, Move(_21), 20_usize, Move(_20)), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
Call(_23 = dump_var(13_usize, 13_usize, Move(_13), 24_usize, _24, 24_usize, _24, 24_usize, _24), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn14(mut _1: i64,mut _2: [u16; 4],mut _3: usize) -> bool {
mir! {
type RET = bool;
let _4: Adt51;
let _5: i64;
let _6: ([u64; 6], [u128; 6], u8, (u32, i64));
let _7: *const i128;
let _8: *const [u128; 6];
let _9: u16;
let _10: Adt43;
let _11: ();
let _12: ();
{
RET = _1 >= _1;
_1 = 7243168121922300229_i64 * 6420958163881338769_i64;
_1 = -(-2755242120850169779_i64);
_1 = !8692341213398517380_i64;
Call(_4.fld1 = core::intrinsics::transmute(_3), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_4.fld2 = [2815543391977780751_u64,198236317279407476_u64,8437739510507782734_u64,15756300684321888764_u64,1135633538631822936_u64,8401148747049905178_u64];
RET = !true;
_4.fld2 = [7351972085949202052_u64,15235090098951861421_u64,9882690537387012579_u64,5723915400820938540_u64,554851083900740088_u64,5163638901875634182_u64];
RET = true;
_4.fld1 = _3 - _3;
_4.fld2 = [15647396561734087355_u64,5968243428856097272_u64,6062158867659200793_u64,11005143528709183837_u64,7733236681488986888_u64,6118697931347575041_u64];
_1 = (-7903040553603362445_i64) - (-5881041799850574307_i64);
_6.3.1 = _1;
_6.3 = (500840754_u32, _1);
RET = false ^ true;
_5 = _6.3.1 | _1;
_6.0 = [15504363041910714498_u64,3092406940430995664_u64,9782117709190392707_u64,9879510144110596182_u64,9049122370273454597_u64,6329443884078957341_u64];
Call(_4.fld0 = core::intrinsics::transmute(_6.3.0), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_4.fld1 = !_3;
_1 = _5 << _4.fld1;
_6.1 = [186463293259989947633603731009476641196_u128,111190953147233616891949404964745200809_u128,111718573253627985988254445739823775447_u128,338217850133764873342735103548540218614_u128,329860425973853189872699817572576938461_u128,271666424353313911340497650061895086470_u128];
_6.3 = (_4.fld0, _1);
_2 = [33497_u16,58286_u16,47214_u16,18458_u16];
RET = _6.3.1 <= _1;
_9 = _1 as u16;
_2 = [_9,_9,_9,_9];
_1 = _6.3.1 ^ _6.3.1;
_8 = core::ptr::addr_of!(_6.1);
_4.fld0 = _6.3.0;
Goto(bb3)
}
bb3 = {
Call(_11 = dump_var(14_usize, 3_usize, Move(_3), 5_usize, Move(_5), 12_usize, _12, 12_usize, _12), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn15(mut _1: i64,mut _2: usize,mut _3: char,mut _4: isize,mut _5: bool,mut _6: f64,mut _7: (u32, i64),mut _8: u32,mut _9: u32,mut _10: [u64; 6],mut _11: f32) -> *mut (*mut *mut u32, char) {
mir! {
type RET = *mut (*mut *mut u32, char);
let _12: Adt57;
let _13: [i32; 7];
let _14: char;
let _15: isize;
let _16: i8;
let _17: u8;
let _18: f32;
let _19: f32;
let _20: Adt55;
let _21: [bool; 5];
let _22: *const f64;
let _23: Adt45;
let _24: *mut u32;
let _25: *const i128;
let _26: *const i128;
let _27: ([u64; 6], [u128; 6], u8, (u32, i64));
let _28: char;
let _29: (f32,);
let _30: *mut f64;
let _31: [u32; 2];
let _32: [u32; 2];
let _33: Adt57;
let _34: bool;
let _35: Adt50;
let _36: [bool; 5];
let _37: isize;
let _38: ();
let _39: ();
{
_5 = !false;
_3 = '\u{1e7b3}';
_6 = (-22874_i16) as f64;
_9 = !_8;
_7.1 = _5 as i64;
_7.1 = -_1;
_4 = !71_isize;
_11 = _4 as f32;
_7.1 = -_1;
_10 = [17679809450401555069_u64,5366930609858476811_u64,2386862289346113788_u64,9152489013903917032_u64,6281126470421224876_u64,2368973038739800779_u64];
_9 = 96746388832448592456123132354246481722_u128 as u32;
Goto(bb1)
}
bb1 = {
_7 = (_8, _1);
_2 = 6_usize;
_12.fld0.0 = -_11;
_7 = (_8, _1);
_8 = _7.0 + _7.0;
_13 = [(-1987874_i32),(-628561883_i32),1726689667_i32,2019294832_i32,1411329938_i32,(-1030606288_i32),1644704029_i32];
_14 = _3;
match _13[_2] {
0 => bb2,
1 => bb3,
2 => bb4,
1644704029 => bb6,
_ => bb5
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
_13[_2] = -(-1309208590_i32);
_9 = _8 & _8;
_12.fld2 = [2694046308124720917_u64];
_2 = _4 as usize;
_12.fld0.0 = _11 + _11;
_12.fld0.0 = -_11;
_16 = 16_i8;
_12.fld0 = (_11,);
_13 = [(-358598174_i32),(-919444603_i32),1054249464_i32,1631650382_i32,959023854_i32,(-399523195_i32),(-2140108101_i32)];
_10 = [7786017386807461007_u64,9700464704020012942_u64,13460655455491375478_u64,4469365134412053921_u64,14450138058717376368_u64,9674165301301241727_u64];
_6 = 59_u8 as f64;
_4 = (-9223372036854775808_isize);
_5 = false ^ true;
_2 = _6 as usize;
_2 = 16510425087164880160_usize;
_3 = _14;
_6 = 166478271015664623813168911578019234381_u128 as f64;
_18 = -_11;
_1 = _7.1;
_8 = _9;
_12.fld0 = (_18,);
_14 = _3;
_7.0 = 4076083730058248506_u64 as u32;
_15 = _5 as isize;
Goto(bb7)
}
bb7 = {
_21 = [_5,_5,_5,_5,_5];
_13 = [(-335338986_i32),201923517_i32,(-1519927854_i32),(-54075512_i32),(-128746247_i32),(-668793821_i32),(-616590469_i32)];
_16 = _8 as i8;
Call(RET = fn16(_9, _5, _16, _13, _10, _9, _5, _16, _12.fld0, _10, _4, _8, _9, _12.fld2), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
_12.fld2 = [17694329285323448179_u64];
_5 = false;
_22 = core::ptr::addr_of!(_6);
_8 = _1 as u32;
_17 = !133_u8;
_24 = core::ptr::addr_of_mut!(_8);
_5 = _9 == _9;
_12.fld0.0 = (-6981_i16) as f32;
_1 = _7.1 & _7.1;
_3 = _14;
_21 = [_5,_5,_5,_5,_5];
_20.fld2 = 11962891616435480245_u64 as isize;
Call(_4 = core::intrinsics::bswap(_15), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
_19 = _18 + _12.fld0.0;
_20.fld1 = _1;
_9 = _7.0 | (*_24);
_22 = core::ptr::addr_of!((*_22));
_19 = _18;
_22 = core::ptr::addr_of!(_6);
_21 = [_5,_5,_5,_5,_5];
_19 = _18 + _18;
_12.fld2 = [16570290983792546087_u64];
_8 = 92208359861993167687730483349749840058_u128 as u32;
_7.1 = _1 + _20.fld1;
_11 = _16 as f32;
_9 = _2 as u32;
_8 = 2967_i16 as u32;
_8 = !_9;
_7.1 = _5 as i64;
_28 = _3;
_27.1 = [85310948661480522849784195964864963627_u128,326774660571331926660385544314744897807_u128,156401263509607244447621178661892053529_u128,106243601093713682329175852551997727558_u128,158731417975177272611598082639981866231_u128,124502103659832148290460910226726295643_u128];
_18 = -_11;
_27.2 = !_17;
Goto(bb10)
}
bb10 = {
_7 = (_8, _1);
_27.3 = _7;
_31 = [_7.0,_8];
_33.fld0.0 = _11 + _18;
_27.3 = _7;
_32 = [_8,_9];
_33.fld2 = _12.fld2;
_27.2 = !_17;
_15 = _20.fld2;
_7.0 = (*_24) * _27.3.0;
_20.fld0 = core::ptr::addr_of!(_27.1);
_3 = _14;
_9 = _7.0;
_29 = (_11,);
_20.fld2 = _4;
match _2 {
0 => bb11,
1 => bb12,
2 => bb13,
3 => bb14,
4 => bb15,
5 => bb16,
16510425087164880160 => bb18,
_ => bb17
}
}
bb11 = {
_19 = _18 + _12.fld0.0;
_20.fld1 = _1;
_9 = _7.0 | (*_24);
_22 = core::ptr::addr_of!((*_22));
_19 = _18;
_22 = core::ptr::addr_of!(_6);
_21 = [_5,_5,_5,_5,_5];
_19 = _18 + _18;
_12.fld2 = [16570290983792546087_u64];
_8 = 92208359861993167687730483349749840058_u128 as u32;
_7.1 = _1 + _20.fld1;
_11 = _16 as f32;
_9 = _2 as u32;
_8 = 2967_i16 as u32;
_8 = !_9;
_7.1 = _5 as i64;
_28 = _3;
_27.1 = [85310948661480522849784195964864963627_u128,326774660571331926660385544314744897807_u128,156401263509607244447621178661892053529_u128,106243601093713682329175852551997727558_u128,158731417975177272611598082639981866231_u128,124502103659832148290460910226726295643_u128];
_18 = -_11;
_27.2 = !_17;
Goto(bb10)
}
bb12 = {
Return()
}
bb13 = {
_21 = [_5,_5,_5,_5,_5];
_13 = [(-335338986_i32),201923517_i32,(-1519927854_i32),(-54075512_i32),(-128746247_i32),(-668793821_i32),(-616590469_i32)];
_16 = _8 as i8;
Call(RET = fn16(_9, _5, _16, _13, _10, _9, _5, _16, _12.fld0, _10, _4, _8, _9, _12.fld2), ReturnTo(bb8), UnwindUnreachable())
}
bb14 = {
_7 = (_8, _1);
_2 = 6_usize;
_12.fld0.0 = -_11;
_7 = (_8, _1);
_8 = _7.0 + _7.0;
_13 = [(-1987874_i32),(-628561883_i32),1726689667_i32,2019294832_i32,1411329938_i32,(-1030606288_i32),1644704029_i32];
_14 = _3;
match _13[_2] {
0 => bb2,
1 => bb3,
2 => bb4,
1644704029 => bb6,
_ => bb5
}
}
bb15 = {
Return()
}
bb16 = {
Return()
}
bb17 = {
Return()
}
bb18 = {
_18 = _29.0;
_12.fld0.0 = -_33.fld0.0;
_37 = _15 << _16;
_12.fld0 = (_11,);
_29 = (_33.fld0.0,);
Goto(bb19)
}
bb19 = {
Call(_38 = dump_var(15_usize, 5_usize, Move(_5), 2_usize, Move(_2), 1_usize, Move(_1), 31_usize, Move(_31)), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Call(_38 = dump_var(15_usize, 3_usize, Move(_3), 14_usize, Move(_14), 17_usize, Move(_17), 13_usize, Move(_13)), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
Call(_38 = dump_var(15_usize, 37_usize, Move(_37), 39_usize, _39, 39_usize, _39, 39_usize, _39), ReturnTo(bb22), UnwindUnreachable())
}
bb22 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn16(mut _1: u32,mut _2: bool,mut _3: i8,mut _4: [i32; 7],mut _5: [u64; 6],mut _6: u32,mut _7: bool,mut _8: i8,mut _9: (f32,),mut _10: [u64; 6],mut _11: isize,mut _12: u32,mut _13: u32,mut _14: [u64; 1]) -> *mut (*mut *mut u32, char) {
mir! {
type RET = *mut (*mut *mut u32, char);
let _15: (u32, i64);
let _16: char;
let _17: i16;
let _18: Adt43;
let _19: f32;
let _20: (u16, char, u64);
let _21: f32;
let _22: [u16; 4];
let _23: [u64; 1];
let _24: [i32; 7];
let _25: ([u64; 6], [u128; 6], u8, (u32, i64));
let _26: (*mut *mut u32, char);
let _27: i32;
let _28: ([u64; 6], [u128; 6], u8, (u32, i64));
let _29: (u16, char, u64);
let _30: f32;
let _31: [u32; 2];
let _32: (u32, i64);
let _33: f32;
let _34: [u128; 6];
let _35: u8;
let _36: ();
let _37: ();
{
_10 = [15884122879914052186_u64,14852088435182142709_u64,9984077785861089960_u64,15098577558800585748_u64,15413007365258190427_u64,2736111956521723268_u64];
_9.0 = (-356866429_i32) as f32;
_9.0 = _11 as f32;
Goto(bb1)
}
bb1 = {
_11 = 126_isize;
_15.0 = !_13;
_13 = _15.0;
_7 = _15.0 > _1;
_5 = [6582018200723972461_u64,17054862244046875856_u64,14733857904091979465_u64,16110207308902981237_u64,8749377891493500378_u64,4323875509874466535_u64];
_2 = _7;
_15 = (_12, 4752237837752194427_i64);
_11 = 9223372036854775807_isize & (-9223372036854775808_isize);
_13 = _15.0;
_6 = !_12;
_16 = '\u{5833d}';
_2 = !_7;
_1 = _12 * _6;
_13 = 30950_i16 as u32;
_2 = _7 ^ _7;
_17 = !(-10396_i16);
_8 = _3 | _3;
_20.0 = 54516_u16;
_19 = -_9.0;
Goto(bb2)
}
bb2 = {
_20 = (13980_u16, _16, 11526976557630753034_u64);
_7 = _2;
_15.1 = 151535850238741821500802415802560479752_i128 as i64;
_20.2 = 432637498_i32 as u64;
_6 = !_15.0;
_19 = -_9.0;
_20.0 = 62578_u16;
_20.0 = 36630_u16;
_18 = Adt43::Variant0 { fld0: _20 };
place!(Field::<(u16, char, u64)>(Variant(_18, 0), 0)).2 = _20.2;
place!(Field::<(u16, char, u64)>(Variant(_18, 0), 0)).1 = _20.1;
_5 = [Field::<(u16, char, u64)>(Variant(_18, 0), 0).2,Field::<(u16, char, u64)>(Variant(_18, 0), 0).2,_20.2,Field::<(u16, char, u64)>(Variant(_18, 0), 0).2,Field::<(u16, char, u64)>(Variant(_18, 0), 0).2,_20.2];
_16 = _20.1;
_20.1 = _16;
match Field::<(u16, char, u64)>(Variant(_18, 0), 0).0 {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
4 => bb7,
5 => bb8,
6 => bb9,
36630 => bb11,
_ => bb10
}
}
bb3 = {
_11 = 126_isize;
_15.0 = !_13;
_13 = _15.0;
_7 = _15.0 > _1;
_5 = [6582018200723972461_u64,17054862244046875856_u64,14733857904091979465_u64,16110207308902981237_u64,8749377891493500378_u64,4323875509874466535_u64];
_2 = _7;
_15 = (_12, 4752237837752194427_i64);
_11 = 9223372036854775807_isize & (-9223372036854775808_isize);
_13 = _15.0;
_6 = !_12;
_16 = '\u{5833d}';
_2 = !_7;
_1 = _12 * _6;
_13 = 30950_i16 as u32;
_2 = _7 ^ _7;
_17 = !(-10396_i16);
_8 = _3 | _3;
_20.0 = 54516_u16;
_19 = -_9.0;
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
_19 = -_9.0;
place!(Field::<(u16, char, u64)>(Variant(_18, 0), 0)).0 = !_20.0;
_12 = _6;
_15.1 = 82_u8 as i64;
_11 = 123372713151831389415769281663781600037_i128 as isize;
_20.1 = _16;
_7 = _2;
_11 = -(-66_isize);
_1 = _15.1 as u32;
_1 = _15.0 >> _8;
SetDiscriminant(_18, 1);
_15 = (_1, 6920367029217312545_i64);
_7 = _8 <= _8;
_21 = _19;
_6 = _12;
_14 = [_20.2];
_4 = [1232507747_i32,(-477560348_i32),(-1626685304_i32),(-272562152_i32),1901597471_i32,(-1852717578_i32),(-843849955_i32)];
_11 = 65966897620773582389317109076954602139_i128 as isize;
_22 = [_20.0,_20.0,_20.0,_20.0];
Goto(bb12)
}
bb12 = {
_20.0 = _20.2 as u16;
_20.0 = _16 as u16;
_20 = (49609_u16, _16, 8013886487379376830_u64);
match _15.1 {
0 => bb5,
1 => bb11,
2 => bb13,
3 => bb14,
4 => bb15,
5 => bb16,
6920367029217312545 => bb18,
_ => bb17
}
}
bb13 = {
_11 = 126_isize;
_15.0 = !_13;
_13 = _15.0;
_7 = _15.0 > _1;
_5 = [6582018200723972461_u64,17054862244046875856_u64,14733857904091979465_u64,16110207308902981237_u64,8749377891493500378_u64,4323875509874466535_u64];
_2 = _7;
_15 = (_12, 4752237837752194427_i64);
_11 = 9223372036854775807_isize & (-9223372036854775808_isize);
_13 = _15.0;
_6 = !_12;
_16 = '\u{5833d}';
_2 = !_7;
_1 = _12 * _6;
_13 = 30950_i16 as u32;
_2 = _7 ^ _7;
_17 = !(-10396_i16);
_8 = _3 | _3;
_20.0 = 54516_u16;
_19 = -_9.0;
Goto(bb2)
}
bb14 = {
Return()
}
bb15 = {
Return()
}
bb16 = {
Return()
}
bb17 = {
Return()
}
bb18 = {
_18 = Adt43::Variant0 { fld0: _20 };
_20.2 = Field::<(u16, char, u64)>(Variant(_18, 0), 0).2;
_14 = [Field::<(u16, char, u64)>(Variant(_18, 0), 0).2];
_1 = _15.0 >> _15.0;
_24 = _4;
_23 = _14;
_15.0 = !_1;
_6 = !_15.0;
_5 = [Field::<(u16, char, u64)>(Variant(_18, 0), 0).2,_20.2,_20.2,_20.2,Field::<(u16, char, u64)>(Variant(_18, 0), 0).2,Field::<(u16, char, u64)>(Variant(_18, 0), 0).2];
_15 = (_1, 7408423084749735900_i64);
SetDiscriminant(_18, 0);
_15.1 = -1547246557737042607_i64;
_15 = (_1, (-3832458912555237683_i64));
_11 = (-9223372036854775808_isize);
_15.1 = !(-1927489714411720889_i64);
_12 = !_1;
place!(Field::<(u16, char, u64)>(Variant(_18, 0), 0)).1 = _16;
_13 = !_6;
_11 = !10_isize;
_13 = _6 + _6;
place!(Field::<(u16, char, u64)>(Variant(_18, 0), 0)).0 = _20.0;
place!(Field::<(u16, char, u64)>(Variant(_18, 0), 0)).1 = _16;
_15.0 = !_1;
Goto(bb19)
}
bb19 = {
_25.3.0 = _12;
_24 = [2112947206_i32,1916912407_i32,1518905128_i32,(-458018235_i32),1529626092_i32,1855485683_i32,64910127_i32];
_18 = Adt43::Variant0 { fld0: _20 };
_25.2 = !99_u8;
place!(Field::<(u16, char, u64)>(Variant(_18, 0), 0)) = (_20.0, _20.1, _20.2);
_13 = _12;
_24 = [(-711477162_i32),(-1731009258_i32),397333351_i32,(-1719650738_i32),(-714458760_i32),1276619754_i32,2086114605_i32];
_20.0 = Field::<(u16, char, u64)>(Variant(_18, 0), 0).0 | Field::<(u16, char, u64)>(Variant(_18, 0), 0).0;
_2 = _7;
_9.0 = _17 as f32;
_5 = [Field::<(u16, char, u64)>(Variant(_18, 0), 0).2,Field::<(u16, char, u64)>(Variant(_18, 0), 0).2,Field::<(u16, char, u64)>(Variant(_18, 0), 0).2,Field::<(u16, char, u64)>(Variant(_18, 0), 0).2,_20.2,_20.2];
_19 = -_21;
_25.3 = _15;
_28.3.1 = _25.3.1;
_20.1 = _16;
_15.0 = _8 as u32;
_27 = (-1922230305_i32) >> _8;
match _20.2 {
8013886487379376830 => bb21,
_ => bb20
}
}
bb20 = {
Return()
}
bb21 = {
_28.3.0 = _12 ^ _25.3.0;
_4 = [_27,_27,_27,_27,_27,_27,_27];
SetDiscriminant(_18, 0);
_25.3 = (_1, _15.1);
Goto(bb22)
}
bb22 = {
_15 = (_25.3.0, _25.3.1);
_24 = _4;
match _20.2 {
0 => bb6,
1 => bb2,
2 => bb21,
3 => bb23,
8013886487379376830 => bb25,
_ => bb24
}
}
bb23 = {
_28.3.0 = _12 ^ _25.3.0;
_4 = [_27,_27,_27,_27,_27,_27,_27];
SetDiscriminant(_18, 0);
_25.3 = (_1, _15.1);
Goto(bb22)
}
bb24 = {
_25.3.0 = _12;
_24 = [2112947206_i32,1916912407_i32,1518905128_i32,(-458018235_i32),1529626092_i32,1855485683_i32,64910127_i32];
_18 = Adt43::Variant0 { fld0: _20 };
_25.2 = !99_u8;
place!(Field::<(u16, char, u64)>(Variant(_18, 0), 0)) = (_20.0, _20.1, _20.2);
_13 = _12;
_24 = [(-711477162_i32),(-1731009258_i32),397333351_i32,(-1719650738_i32),(-714458760_i32),1276619754_i32,2086114605_i32];
_20.0 = Field::<(u16, char, u64)>(Variant(_18, 0), 0).0 | Field::<(u16, char, u64)>(Variant(_18, 0), 0).0;
_2 = _7;
_9.0 = _17 as f32;
_5 = [Field::<(u16, char, u64)>(Variant(_18, 0), 0).2,Field::<(u16, char, u64)>(Variant(_18, 0), 0).2,Field::<(u16, char, u64)>(Variant(_18, 0), 0).2,Field::<(u16, char, u64)>(Variant(_18, 0), 0).2,_20.2,_20.2];
_19 = -_21;
_25.3 = _15;
_28.3.1 = _25.3.1;
_20.1 = _16;
_15.0 = _8 as u32;
_27 = (-1922230305_i32) >> _8;
match _20.2 {
8013886487379376830 => bb21,
_ => bb20
}
}
bb25 = {
_29.0 = _20.0;
_21 = _19 * _9.0;
_28.2 = _25.2;
_31 = [_15.0,_28.3.0];
_28.0 = [_20.2,_20.2,_20.2,_20.2,_20.2,_20.2];
_29.0 = !_20.0;
_27 = (-1951017971_i32);
_11 = (-9223372036854775808_isize) + 9223372036854775807_isize;
_22 = [_20.0,_29.0,_20.0,_29.0];
_29.1 = _16;
_29 = (_20.0, _16, _20.2);
_25.3.0 = _28.3.0 >> _28.3.0;
place!(Field::<(u16, char, u64)>(Variant(_18, 0), 0)).2 = _29.2 / _29.2;
_31 = [_1,_13];
_6 = _12 | _12;
RET = core::ptr::addr_of_mut!(_26);
_25.3.0 = _1;
_22 = [_20.0,_20.0,_20.0,_29.0];
_34 = [327888801154806499109173607501456190214_u128,25289098564221640632078120160880198045_u128,86809802844956022933264014190019874272_u128,160156865009882731202373021438078371304_u128,62400197811112942566267204396156136567_u128,255856405199365225172351550234906199983_u128];
_9.0 = -_19;
place!(Field::<(u16, char, u64)>(Variant(_18, 0), 0)).1 = _16;
_4 = _24;
_32 = (_12, _25.3.1);
_5 = _10;
Goto(bb26)
}
bb26 = {
Call(_36 = dump_var(16_usize, 12_usize, Move(_12), 29_usize, Move(_29), 15_usize, Move(_15), 10_usize, Move(_10)), ReturnTo(bb27), UnwindUnreachable())
}
bb27 = {
Call(_36 = dump_var(16_usize, 11_usize, Move(_11), 14_usize, Move(_14), 3_usize, Move(_3), 6_usize, Move(_6)), ReturnTo(bb28), UnwindUnreachable())
}
bb28 = {
Call(_36 = dump_var(16_usize, 20_usize, Move(_20), 4_usize, Move(_4), 27_usize, Move(_27), 13_usize, Move(_13)), ReturnTo(bb29), UnwindUnreachable())
}
bb29 = {
Return()
}

}
}
pub fn main() {
                fn0(std::hint::black_box(false), std::hint::black_box('\u{d61c7}'), std::hint::black_box((-9223372036854775808_isize)), std::hint::black_box(71_i8), std::hint::black_box(17932_i16), std::hint::black_box(1968523330_i32), std::hint::black_box(11851619697125367476_u64), std::hint::black_box(95821604731370265109744389580811669205_i128), std::hint::black_box(0_usize), std::hint::black_box(129_u8), std::hint::black_box(3772_u16), std::hint::black_box(1076878682_u32));
                
            }
#[derive(Debug)]
pub enum Adt42 {
Variant0{
fld0: [bool; 5],
fld1: *mut f64,

},
Variant1{
fld0: i32,
fld1: [u16; 4],
fld2: u64,
fld3: (*mut f64, (*mut *mut u32, usize), *mut (f32,), i64),

},
Variant2{
fld0: [u128; 6],
fld1: [u64; 6],
fld2: u16,
fld3: f64,
fld4: u8,
fld5: *const f64,
fld6: ([u64; 6], [u128; 6], u8, (u32, i64)),
fld7: i128,

}}
#[derive(Debug,Copy,Clone)]
pub enum Adt43 {
Variant0{
fld0: (u16, char, u64),

},
Variant1{
fld0: *mut *mut u32,

}}
#[derive(Debug,Copy,Clone)]
pub enum Adt44 {
Variant0{
fld0: u128,
fld1: char,
fld2: *mut *mut u32,
fld3: *const [u128; 6],
fld4: [u128; 6],
fld5: u8,

},
Variant1{
fld0: Adt43,
fld1: *mut f32,

},
Variant2{
fld0: [u64; 1],
fld1: u64,
fld2: *const i128,
fld3: i64,
fld4: i16,

},
Variant3{
fld0: i32,
fld1: char,
fld2: (*mut *mut u32, usize),
fld3: [u64; 6],
fld4: i16,

}}
#[derive(Debug,Copy,Clone)]
pub enum Adt45 {
Variant0{
fld0: *mut (f32,),
fld1: *mut (*mut *mut u32, char),
fld2: u8,
fld3: ((u32, i64), (*mut *mut u32, char)),
fld4: *mut f32,
fld5: (*mut *mut u32, char),

},
Variant1{
fld0: u16,
fld1: *mut *mut u32,

}}
#[derive(Debug,Copy,Clone)]
pub struct Adt46 {
fld0: bool,
fld1: *mut (f32,),
fld2: (u16, char, u64),
fld3: Adt43,
fld4: (*mut f64, (*mut *mut u32, usize), *mut (f32,), i64),
}
#[derive(Debug)]
pub enum Adt47 {
Variant0{
fld0: ([u64; 6], [u128; 6], u8, (u32, i64)),
fld1: *mut f32,
fld2: [u64; 1],
fld3: *mut u32,
fld4: f64,

},
Variant1{
fld0: *mut f32,
fld1: (*mut *mut u32, usize),
fld2: *mut (*mut *mut u32, char),
fld3: Adt46,
fld4: [bool; 5],

},
Variant2{
fld0: [u128; 6],
fld1: Adt46,

}}
#[derive(Debug)]
pub enum Adt48 {
Variant0{
fld0: Adt47,

},
Variant1{
fld0: [u64; 1],
fld1: u128,

}}
#[derive(Debug)]
pub struct Adt49 {
fld0: Adt47,
fld1: ([u64; 6], [u128; 6], u8, (u32, i64)),
fld2: Adt42,
fld3: (f32,),
fld4: *mut f32,
fld5: ((u32, i64), (*mut *mut u32, char)),
fld6: i64,
fld7: usize,
}
#[derive(Debug)]
pub enum Adt50 {
Variant0{
fld0: i16,
fld1: char,
fld2: (*mut *mut u32, char),

},
Variant1{
fld0: u8,
fld1: Adt45,
fld2: Adt42,
fld3: [u64; 1],

}}
#[derive(Debug,Copy,Clone)]
pub struct Adt51 {
fld0: u32,
fld1: usize,
fld2: [u64; 6],
}
#[derive(Debug,Copy,Clone)]
pub struct Adt52 {
fld0: i64,
fld1: (*mut *mut u32, char),
}
#[derive(Debug)]
pub struct Adt53 {
fld0: (*mut *mut u32, char),
}
#[derive(Debug)]
pub enum Adt54 {
Variant0{
fld0: [bool; 5],
fld1: *mut (*mut *mut u32, char),
fld2: isize,
fld3: *mut u32,

},
Variant1{
fld0: [u32; 2],
fld1: *const [u128; 6],
fld2: u128,
fld3: Adt46,

},
Variant2{
fld0: *mut f32,
fld1: Adt42,
fld2: isize,
fld3: Adt48,
fld4: (*mut *mut u32, char),
fld5: [u128; 6],
fld6: (*mut *mut u32, usize),
fld7: ((u32, i64), (*mut *mut u32, char)),

},
Variant3{
fld0: ((u32, i64), (*mut *mut u32, char)),
fld1: (*mut *mut u32, char),
fld2: [bool; 5],
fld3: [u64; 6],
fld4: i16,
fld5: [u16; 4],
fld6: (f32,),

}}
#[derive(Debug,Copy,Clone)]
pub struct Adt55 {
fld0: *const [u128; 6],
fld1: i64,
fld2: isize,
fld3: Adt45,
fld4: *const i128,
}
#[derive(Debug)]
pub enum Adt56 {
Variant0{
fld0: f64,

},
Variant1{
fld0: [u16; 4],
fld1: Adt52,
fld2: Adt55,
fld3: (f32,),
fld4: Adt47,
fld5: Adt49,
fld6: i64,

},
Variant2{
fld0: (*mut *mut u32, char),
fld1: (*mut f64, (*mut *mut u32, usize), *mut (f32,), i64),
fld2: *mut (f32,),
fld3: f32,
fld4: *mut f64,

},
Variant3{
fld0: [u64; 6],
fld1: i128,

}}
#[derive(Debug)]
pub struct Adt57 {
fld0: (f32,),
fld1: *const i128,
fld2: [u64; 1],
}
#[derive(Debug,Copy,Clone)]
pub enum Adt58 {
Variant0{
fld0: [u32; 2],
fld1: *mut (f32,),
fld2: *mut *mut u32,
fld3: (*mut f64, (*mut *mut u32, usize), *mut (f32,), i64),
fld4: *mut (*mut *mut u32, char),
fld5: *const f64,
fld6: [u16; 4],

},
Variant1{
fld0: Adt44,

},
Variant2{
fld0: Adt55,
fld1: *mut (f32,),
fld2: u16,
fld3: [u64; 1],
fld4: *mut *mut u32,
fld5: i32,
fld6: [i32; 7],

}}

