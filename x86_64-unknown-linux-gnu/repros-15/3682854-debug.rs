#![recursion_limit = "1024"]
    #![feature(custom_mir, core_intrinsics, const_hash)]
    #![allow(unused_parens, unused_assignments, overflowing_literals)]
    extern crate core;
    use core::intrinsics::mir::*;

    use std::fmt::Debug;

    #[inline(never)]
    fn dump_var(
        f: usize,
        var0: usize, val0: impl Debug,
        var1: usize, val1: impl Debug,
        var2: usize, val2: impl Debug,
        var3: usize, val3: impl Debug,
    ) {
        println!("fn{f}:_{var0} = {val0:?}\n_{var1} = {val1:?}\n_{var2} = {val2:?}\n_{var3} = {val3:?}");
    }
    #[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn0(mut _1: bool,mut _2: char,mut _3: isize,mut _4: i8,mut _5: i16,mut _6: i32,mut _7: i64,mut _8: i128,mut _9: usize,mut _10: u8,mut _11: u16,mut _12: u128) -> Adt56 {
mir! {
type RET = Adt56;
let _13: Adt59;
let _14: f64;
let _15: (f32, *mut (isize,), (i32, u8, f32, u8, char, bool));
let _16: [isize; 2];
let _17: u16;
let _18: [char; 3];
let _19: [usize; 1];
let _20: char;
let _21: Adt48;
let _22: u64;
let _23: (i8, char, u128);
let _24: bool;
let _25: isize;
let _26: f64;
let _27: isize;
let _28: isize;
let _29: char;
let _30: [i8; 7];
let _31: [usize; 1];
let _32: f64;
let _33: Adt50;
let _34: Adt50;
let _35: Adt48;
let _36: f32;
let _37: (f32, *mut (isize,), (i32, u8, f32, u8, char, bool));
let _38: [bool; 7];
let _39: f64;
let _40: f32;
let _41: Adt56;
let _42: ((i32, u8, f32, u8, char, bool),);
let _43: *const (i32, u8, f32, u8, char, bool);
let _44: *const [char; 5];
let _45: (*mut [u128; 1], i32);
let _46: u32;
let _47: Adt52;
let _48: Adt61;
let _49: [usize; 1];
let _50: ([u128; 1], (isize,), isize);
let _51: [i8; 7];
let _52: ((i32, u8, f32, u8, char, bool),);
let _53: isize;
let _54: (i32, i64, f32, u128, (f32, *mut (isize,), (i32, u8, f32, u8, char, bool)), (i32, u8, f32, u8, char, bool), (isize,));
let _55: Adt48;
let _56: [char; 2];
let _57: i128;
let _58: isize;
let _59: isize;
let _60: (i8, char, u128);
let _61: (f32, *mut (isize,), (i32, u8, f32, u8, char, bool));
let _62: i64;
let _63: Adt61;
let _64: u8;
let _65: u64;
let _66: f64;
let _67: ([u128; 1], (isize,), isize);
let _68: (i8, char, u128);
let _69: usize;
let _70: u128;
let _71: char;
let _72: i32;
let _73: ();
let _74: ();
{
_2 = '\u{246f1}';
_7 = 1538246944396346383_i64;
_8 = -84698543737060768863729845581726040551_i128;
_9 = _7 as usize;
_11 = !43693_u16;
_7 = 8006270774084909792_u64 as i64;
_13.fld0.fld0 = (-673539721_i32) as f32;
_13.fld1 = 193_u8 ^ 144_u8;
_6 = (-1581669223_i32) - 565966025_i32;
_9 = 1_usize + 16018853236352345105_usize;
_7 = !(-3066620496588089638_i64);
_4 = !61_i8;
Goto(bb1)
}
bb1 = {
_10 = _13.fld1;
_13.fld3.2 = 9223372036854775807_isize - (-9223372036854775808_isize);
_13.fld3.2 = 9223372036854775807_isize;
_13.fld3.3 = core::ptr::addr_of!(_8);
_14 = 17090161949022572070194249617906892399_u128 as f64;
_13.fld3.5 = !_9;
_13.fld3.3 = core::ptr::addr_of!(_8);
_8 = (-133804208609268839449080146498656204342_i128) & 145596019177054609514779467701365096691_i128;
_10 = !_13.fld1;
_15.2.5 = _10 >= _13.fld1;
_13.fld3.2 = !(-9223372036854775808_isize);
_8 = (-165852778608059042318215559205350683194_i128) * (-48031195497031641859247997725512790251_i128);
_3 = _13.fld3.2 & _13.fld3.2;
_15.2 = (_6, _10, _13.fld0.fld0, _13.fld1, _2, true);
_10 = !_15.2.1;
_13.fld3.5 = _9 + _9;
_15.2.5 = _13.fld1 != _10;
_16 = [_3,_13.fld3.2];
_3 = _13.fld3.2;
Goto(bb2)
}
bb2 = {
_15.2 = (_6, _13.fld1, _13.fld0.fld0, _10, _2, false);
_10 = _15.2.1;
Call(_6 = core::intrinsics::transmute(_15.2.4), bb3, UnwindUnreachable())
}
bb3 = {
_13.fld4 = Adt50::Variant1 { fld0: _15.2 };
_17 = _11;
_12 = 101480177170338970613018090928933824449_u128;
Call(_13.fld1 = fn1(_15.2.5, Field::<(i32, u8, f32, u8, char, bool)>(Variant(_13.fld4, 1), 0).4, _15.2.5, _8, _2, Move(_13.fld4), _7, _15.2.2, _15.2), bb4, UnwindUnreachable())
}
bb4 = {
_4 = _14 as i8;
_13.fld1 = !_15.2.3;
_13.fld0 = Adt48 { fld0: _15.2.2 };
_18 = [_15.2.4,_15.2.4,_15.2.4];
_13.fld4 = Adt50::Variant1 { fld0: _15.2 };
_4 = _8 as i8;
_13.fld3.3 = core::ptr::addr_of!(_8);
_18 = [_2,Field::<(i32, u8, f32, u8, char, bool)>(Variant(_13.fld4, 1), 0).4,_15.2.4];
_15.2.4 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_13.fld4, 1), 0).4;
_11 = _17 >> Field::<(i32, u8, f32, u8, char, bool)>(Variant(_13.fld4, 1), 0).3;
_15.2.3 = !_15.2.1;
SetDiscriminant(_13.fld4, 0);
_4 = _17 as i8;
_12 = 266562998707291262843835237529838848430_u128 & 7304542398785479528227865841121460457_u128;
_13.fld0 = Adt48 { fld0: _15.2.2 };
_15.0 = _13.fld0.fld0 + _13.fld0.fld0;
_13.fld3.1.0 = core::ptr::addr_of_mut!(place!(Field::<[u128; 1]>(Variant(_13.fld4, 0), 2)));
_11 = _17 ^ _17;
_2 = _15.2.4;
_13.fld3.1.1 = _7 as i32;
_7 = 1947644333212756282_i64;
_8 = _15.2.5 as i128;
_22 = !834171343164652160_u64;
_15.2.3 = _14 as u8;
_7 = _12 as i64;
Goto(bb5)
}
bb5 = {
place!(Field::<Adt48>(Variant(_13.fld4, 0), 0)).fld0 = _13.fld0.fld0 * _13.fld0.fld0;
place!(Field::<[i8; 7]>(Variant(_13.fld4, 0), 3)) = [_4,_4,_4,_4,_4,_4,_4];
_13.fld3.1.0 = core::ptr::addr_of_mut!(place!(Field::<[u128; 1]>(Variant(_13.fld4, 0), 2)));
_15.2.3 = _15.2.1 << _13.fld3.5;
_13.fld0.fld0 = _15.0 - _15.2.2;
_1 = !_15.2.5;
_19 = [_13.fld3.5];
place!(Field::<Adt48>(Variant(_13.fld4, 0), 0)) = Adt48 { fld0: _15.2.2 };
place!(Field::<[u128; 1]>(Variant(_13.fld4, 0), 2)) = [_12];
_21 = Adt48 { fld0: _13.fld0.fld0 };
_22 = 10703198857786007778_u64 << _8;
_14 = _13.fld3.2 as f64;
_19 = [_13.fld3.5];
_13.fld3.0 = -(-11291_i16);
_24 = !_15.2.5;
_23.2 = !_12;
place!(Field::<Adt48>(Variant(_13.fld4, 0), 0)).fld0 = _13.fld0.fld0;
_29 = _2;
Call(_15 = fn17(_16, _22, _1, _13.fld3.3, _2, _13.fld3.1, Field::<Adt48>(Variant(_13.fld4, 0), 0).fld0), bb6, UnwindUnreachable())
}
bb6 = {
_2 = _29;
place!(Field::<[i8; 7]>(Variant(_13.fld4, 0), 3)) = [_4,_4,_4,_4,_4,_4,_4];
_20 = _2;
_31 = _19;
_26 = _11 as f64;
_24 = _15.2.1 >= _15.2.3;
_8 = 1285939174_u32 as i128;
_3 = _11 as isize;
_3 = _13.fld3.2;
_6 = _7 as i32;
_23.1 = _20;
_13.fld3.0 = _22 as i16;
_22 = !10479007786565959850_u64;
_13.fld1 = _15.2.1;
_5 = !_13.fld3.0;
Call(_11 = core::intrinsics::bswap(_17), bb7, UnwindUnreachable())
}
bb7 = {
_24 = _13.fld1 >= _15.2.3;
_13.fld3.1.1 = _15.2.0 << _15.2.1;
_13.fld4 = Adt50::Variant3 { fld0: _16,fld1: _23.2 };
_13.fld3.2 = _3;
SetDiscriminant(_13.fld4, 3);
_13.fld3.2 = _3;
_2 = _23.1;
_7 = (-1860084864703611651_i64) >> _15.2.1;
_35.fld0 = -_13.fld0.fld0;
_11 = _17 & _17;
_18 = [_2,_23.1,_15.2.4];
_24 = !_15.2.5;
_23 = (_4, _15.2.4, _12);
_37.2.4 = _15.2.4;
_13.fld3.6 = _7 <= _7;
Goto(bb8)
}
bb8 = {
_12 = _23.2 << _15.2.3;
_37.2.5 = _13.fld3.6 & _13.fld3.6;
_25 = _13.fld3.2 << _15.2.3;
_37.2.3 = _13.fld1 | _15.2.1;
_37.2.4 = _23.1;
_30 = [_23.0,_23.0,_23.0,_23.0,_23.0,_4,_23.0];
_37.2.1 = !_13.fld1;
_33 = Adt50::Variant3 { fld0: _16,fld1: _12 };
_28 = _25 + _25;
_15.2.0 = _4 as i32;
_37.2 = (_13.fld3.1.1, _15.2.1, _15.2.2, _15.2.1, _23.1, _13.fld3.6);
_19 = _31;
_3 = !_28;
_8 = Field::<u128>(Variant(_33, 3), 1) as i128;
_2 = _15.2.4;
_13.fld3.4 = _37.2.4;
_37.2.3 = _37.2.1;
place!(Field::<u128>(Variant(_13.fld4, 3), 1)) = _8 as u128;
_32 = _7 as f64;
_37.2.2 = Field::<u128>(Variant(_13.fld4, 3), 1) as f32;
_40 = _37.2.2 + _37.2.2;
Call(_42.0.1 = fn18(Move(_33), _13.fld3, _15, _12, _3, _37.2.1, _28), bb9, UnwindUnreachable())
}
bb9 = {
_42.0.3 = _15.2.3 * _42.0.1;
_15.2.1 = _37.2.3 >> _28;
_41 = Adt56::Variant0 { fld0: Field::<u128>(Variant(_13.fld4, 3), 1) };
_21 = Adt48 { fld0: _37.2.2 };
_16 = [_28,_25];
_15.2.5 = !_24;
_2 = _23.1;
Call(_13.fld1 = core::intrinsics::transmute(_42.0.1), bb10, UnwindUnreachable())
}
bb10 = {
_13.fld3.3 = core::ptr::addr_of!(_8);
_8 = (-60563167247425952385661280809564790505_i128);
_37.2.4 = _15.2.4;
_37.2.5 = !_15.2.5;
_42.0.3 = _13.fld3.1.1 as u8;
_13.fld0.fld0 = _15.0;
Call(_13.fld3.5 = fn19(_37.2.5, Move(_21), _42.0.1, _13.fld3.6, _37.2.0, _37.2, _15, _13.fld3.1, _37.2, Move(_41), _15, _37.2.5), bb11, UnwindUnreachable())
}
bb11 = {
_37 = (_40, _15.1, _15.2);
_42.0.5 = _15.2.3 != _42.0.3;
_36 = -_40;
_32 = _14 - _14;
_27 = _22 as isize;
_1 = _13.fld3.6;
_36 = _40;
_9 = _17 as usize;
_31 = _19;
_30 = [_23.0,_23.0,_23.0,_4,_4,_4,_23.0];
_13.fld0 = Adt48 { fld0: _36 };
_13.fld0 = Adt48 { fld0: _40 };
Call(_5 = core::intrinsics::bswap(_13.fld3.0), bb12, UnwindUnreachable())
}
bb12 = {
_24 = _37.2.5;
_20 = _2;
_13.fld3.0 = _5;
_1 = !_13.fld3.6;
_13.fld0 = Move(_35);
_31 = [_13.fld3.5];
_9 = _13.fld3.5;
_15.2.4 = _29;
_30 = [_23.0,_23.0,_4,_4,_23.0,_23.0,_23.0];
_45.1 = -_13.fld3.1.1;
_42 = (_15.2,);
_35.fld0 = _40 * _40;
_10 = _13.fld1 + _42.0.1;
_34 = Adt50::Variant3 { fld0: _16,fld1: Field::<u128>(Variant(_13.fld4, 3), 1) };
_13.fld3.5 = !_9;
_45.0 = _13.fld3.1.0;
_12 = Field::<u128>(Variant(_34, 3), 1);
_26 = _14;
_33 = Move(_34);
place!(Field::<u128>(Variant(_33, 3), 1)) = _4 as u128;
_13.fld3.5 = _9;
_42.0 = _37.2;
_23.0 = _4 + _4;
match _9 {
0 => bb4,
1 => bb13,
2 => bb14,
3 => bb15,
4 => bb16,
8821449220732972847 => bb18,
_ => bb17
}
}
bb13 = {
_4 = _14 as i8;
_13.fld1 = !_15.2.3;
_13.fld0 = Adt48 { fld0: _15.2.2 };
_18 = [_15.2.4,_15.2.4,_15.2.4];
_13.fld4 = Adt50::Variant1 { fld0: _15.2 };
_4 = _8 as i8;
_13.fld3.3 = core::ptr::addr_of!(_8);
_18 = [_2,Field::<(i32, u8, f32, u8, char, bool)>(Variant(_13.fld4, 1), 0).4,_15.2.4];
_15.2.4 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_13.fld4, 1), 0).4;
_11 = _17 >> Field::<(i32, u8, f32, u8, char, bool)>(Variant(_13.fld4, 1), 0).3;
_15.2.3 = !_15.2.1;
SetDiscriminant(_13.fld4, 0);
_4 = _17 as i8;
_12 = 266562998707291262843835237529838848430_u128 & 7304542398785479528227865841121460457_u128;
_13.fld0 = Adt48 { fld0: _15.2.2 };
_15.0 = _13.fld0.fld0 + _13.fld0.fld0;
_13.fld3.1.0 = core::ptr::addr_of_mut!(place!(Field::<[u128; 1]>(Variant(_13.fld4, 0), 2)));
_11 = _17 ^ _17;
_2 = _15.2.4;
_13.fld3.1.1 = _7 as i32;
_7 = 1947644333212756282_i64;
_8 = _15.2.5 as i128;
_22 = !834171343164652160_u64;
_15.2.3 = _14 as u8;
_7 = _12 as i64;
Goto(bb5)
}
bb14 = {
_13.fld3.3 = core::ptr::addr_of!(_8);
_8 = (-60563167247425952385661280809564790505_i128);
_37.2.4 = _15.2.4;
_37.2.5 = !_15.2.5;
_42.0.3 = _13.fld3.1.1 as u8;
_13.fld0.fld0 = _15.0;
Call(_13.fld3.5 = fn19(_37.2.5, Move(_21), _42.0.1, _13.fld3.6, _37.2.0, _37.2, _15, _13.fld3.1, _37.2, Move(_41), _15, _37.2.5), bb11, UnwindUnreachable())
}
bb15 = {
_10 = _13.fld1;
_13.fld3.2 = 9223372036854775807_isize - (-9223372036854775808_isize);
_13.fld3.2 = 9223372036854775807_isize;
_13.fld3.3 = core::ptr::addr_of!(_8);
_14 = 17090161949022572070194249617906892399_u128 as f64;
_13.fld3.5 = !_9;
_13.fld3.3 = core::ptr::addr_of!(_8);
_8 = (-133804208609268839449080146498656204342_i128) & 145596019177054609514779467701365096691_i128;
_10 = !_13.fld1;
_15.2.5 = _10 >= _13.fld1;
_13.fld3.2 = !(-9223372036854775808_isize);
_8 = (-165852778608059042318215559205350683194_i128) * (-48031195497031641859247997725512790251_i128);
_3 = _13.fld3.2 & _13.fld3.2;
_15.2 = (_6, _10, _13.fld0.fld0, _13.fld1, _2, true);
_10 = !_15.2.1;
_13.fld3.5 = _9 + _9;
_15.2.5 = _13.fld1 != _10;
_16 = [_3,_13.fld3.2];
_3 = _13.fld3.2;
Goto(bb2)
}
bb16 = {
place!(Field::<Adt48>(Variant(_13.fld4, 0), 0)).fld0 = _13.fld0.fld0 * _13.fld0.fld0;
place!(Field::<[i8; 7]>(Variant(_13.fld4, 0), 3)) = [_4,_4,_4,_4,_4,_4,_4];
_13.fld3.1.0 = core::ptr::addr_of_mut!(place!(Field::<[u128; 1]>(Variant(_13.fld4, 0), 2)));
_15.2.3 = _15.2.1 << _13.fld3.5;
_13.fld0.fld0 = _15.0 - _15.2.2;
_1 = !_15.2.5;
_19 = [_13.fld3.5];
place!(Field::<Adt48>(Variant(_13.fld4, 0), 0)) = Adt48 { fld0: _15.2.2 };
place!(Field::<[u128; 1]>(Variant(_13.fld4, 0), 2)) = [_12];
_21 = Adt48 { fld0: _13.fld0.fld0 };
_22 = 10703198857786007778_u64 << _8;
_14 = _13.fld3.2 as f64;
_19 = [_13.fld3.5];
_13.fld3.0 = -(-11291_i16);
_24 = !_15.2.5;
_23.2 = !_12;
place!(Field::<Adt48>(Variant(_13.fld4, 0), 0)).fld0 = _13.fld0.fld0;
_29 = _2;
Call(_15 = fn17(_16, _22, _1, _13.fld3.3, _2, _13.fld3.1, Field::<Adt48>(Variant(_13.fld4, 0), 0).fld0), bb6, UnwindUnreachable())
}
bb17 = {
_24 = _13.fld1 >= _15.2.3;
_13.fld3.1.1 = _15.2.0 << _15.2.1;
_13.fld4 = Adt50::Variant3 { fld0: _16,fld1: _23.2 };
_13.fld3.2 = _3;
SetDiscriminant(_13.fld4, 3);
_13.fld3.2 = _3;
_2 = _23.1;
_7 = (-1860084864703611651_i64) >> _15.2.1;
_35.fld0 = -_13.fld0.fld0;
_11 = _17 & _17;
_18 = [_2,_23.1,_15.2.4];
_24 = !_15.2.5;
_23 = (_4, _15.2.4, _12);
_37.2.4 = _15.2.4;
_13.fld3.6 = _7 <= _7;
Goto(bb8)
}
bb18 = {
SetDiscriminant(_33, 2);
place!(Field::<*mut [u128; 1]>(Variant(_33, 2), 0)) = _13.fld3.1.0;
_28 = _25 << _13.fld3.1.1;
_13.fld0 = Adt48 { fld0: _40 };
_9 = !_13.fld3.5;
_50.1 = (_28,);
match _13.fld3.5 {
8821449220732972847 => bb19,
_ => bb2
}
}
bb19 = {
_21.fld0 = _50.1.0 as f32;
_10 = _42.0.1;
_15.2.3 = !_42.0.3;
_30 = [_23.0,_23.0,_4,_23.0,_23.0,_23.0,_23.0];
_42.0.5 = !_15.2.5;
_52 = (_42.0,);
_42.0.4 = _13.fld3.4;
_50.1.0 = -_28;
_42.0.5 = _13.fld3.6 <= _37.2.5;
_20 = _2;
_9 = _17 as usize;
_15.2.5 = !_37.2.5;
_19 = [_9];
_15.2 = (_45.1, _10, _37.0, _52.0.3, _42.0.4, _1);
_23 = (_4, _13.fld3.4, Field::<u128>(Variant(_13.fld4, 3), 1));
_38 = [_1,_15.2.5,_13.fld3.6,_24,_13.fld3.6,_42.0.5,_13.fld3.6];
Goto(bb20)
}
bb20 = {
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_33, 2), 3)).0 = !_15.2.0;
_13.fld3.1.1 = _45.1 & _15.2.0;
_25 = _50.1.0;
_42.0.5 = _24;
place!(Field::<[isize; 2]>(Variant(_13.fld4, 3), 0)) = [_28,_50.1.0];
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_33, 2), 3)).3 = !_52.0.1;
_37 = _15;
_52.0.1 = _5 as u8;
_42.0.0 = !_13.fld3.1.1;
_33 = Adt50::Variant1 { fld0: _37.2 };
_13.fld3.5 = _32 as usize;
_36 = _37.2.2;
Goto(bb21)
}
bb21 = {
_56 = [_2,_23.1];
_30 = [_4,_4,_4,_4,_4,_4,_4];
_37.1 = core::ptr::addr_of_mut!(_50.1);
_43 = core::ptr::addr_of!(place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_33, 1), 0)));
_54.4.0 = _15.2.2;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_33, 1), 0)).3 = _37.2.1;
_37.2.2 = _52.0.3 as f32;
_50.1.0 = _25 & _28;
_37.2.1 = _5 as u8;
_42.0.5 = _37.2.5;
_21 = Adt48 { fld0: _15.2.2 };
_54.4.2.3 = !_37.2.3;
_52.0.2 = _13.fld3.0 as f32;
_20 = _29;
_37 = (_15.2.2, _15.1, (*_43));
_23.2 = !_12;
_54.5.5 = _1;
_12 = _3 as u128;
_49 = _31;
_55 = Adt48 { fld0: _13.fld0.fld0 };
(*_43).5 = _52.0.5;
_54.3 = !_23.2;
_18 = [_15.2.4,(*_43).4,_37.2.4];
_42.0.4 = _29;
_46 = _4 as u32;
Goto(bb22)
}
bb22 = {
_54.1 = -_7;
_2 = _37.2.4;
_8 = _25 as i128;
_54.1 = Field::<u128>(Variant(_13.fld4, 3), 1) as i64;
_15.2.2 = _13.fld0.fld0 + _35.fld0;
_60 = (_23.0, _20, _54.3);
_54.4.0 = _13.fld0.fld0 - _37.2.2;
_15.2.3 = (*_43).3;
_54 = ((*_43).0, _7, (*_43).2, _12, _15, _15.2, _50.1);
_23.0 = _4;
SetDiscriminant(_13.fld4, 0);
_28 = -_3;
_54.5 = (*_43);
_24 = (*_43).5;
_54.3 = _23.2 << _10;
(*_43) = _42.0;
_53 = _50.1.0 & _50.1.0;
_13.fld0.fld0 = -_37.0;
_13.fld3.4 = _20;
Goto(bb23)
}
bb23 = {
_21 = Adt48 { fld0: _40 };
_61.2.3 = _8 as u8;
(*_43).3 = _54.4.2.3;
place!(Field::<Adt48>(Variant(_13.fld4, 0), 0)).fld0 = _40;
_15.2.2 = _13.fld1 as f32;
_15.2.0 = (*_43).0 >> _28;
_13.fld3.1 = (_45.0, _42.0.0);
_13.fld3.6 = (*_43).5;
_42.0.4 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_33, 1), 0).4;
SetDiscriminant(_33, 2);
_61 = _15;
_37 = (_54.5.2, _54.4.1, _54.4.2);
_28 = _60.0 as isize;
_55 = Adt48 { fld0: _61.2.2 };
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_33, 2), 3)) = _54.5;
place!(Field::<u128>(Variant(_33, 2), 6)) = _12 ^ _60.2;
_52.0.5 = !_54.4.2.5;
_20 = _54.5.4;
_37.2.5 = _1;
RET = Adt56::Variant0 { fld0: _12 };
_42 = (_54.5,);
SetDiscriminant(RET, 1);
_67.0 = [Field::<u128>(Variant(_33, 2), 6)];
_28 = _25 >> _60.2;
Call(_54.5.0 = core::intrinsics::bswap(_15.2.0), bb24, UnwindUnreachable())
}
bb24 = {
_52.0.2 = _54.2;
_23.2 = _60.2 ^ _12;
Goto(bb25)
}
bb25 = {
_60.1 = _15.2.4;
_23.2 = !_60.2;
_54.5 = _42.0;
place!(Field::<f32>(Variant(RET, 1), 1)) = _35.fld0;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_33, 2), 3)).2 = _13.fld3.0 as f32;
_6 = _60.2 as i32;
_52.0.3 = !_54.4.2.3;
place!(Field::<u128>(Variant(_33, 2), 6)) = _32 as u128;
_61.2.5 = _54.1 > _7;
_54.3 = _23.2;
_37.1 = _61.1;
_54 = (_42.0.0, _7, _15.2.2, _23.2, _37, _37.2, _50.1);
_53 = _3;
_61.2.3 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_33, 2), 3).1 | _13.fld1;
RET = Adt56::Variant0 { fld0: _54.3 };
_45 = (_13.fld3.1.0, _37.2.0);
_43 = core::ptr::addr_of!(_54.5);
_42 = (Field::<(i32, u8, f32, u8, char, bool)>(Variant(_33, 2), 3),);
_35 = Move(Field::<Adt48>(Variant(_13.fld4, 0), 0));
_54 = (_42.0.0, _7, _55.fld0, Field::<u128>(Variant(RET, 0), 0), _61, _37.2, _50.1);
_37.2.1 = _15.2.1;
_55.fld0 = _54.2 - _54.2;
place!(Field::<*const *mut (isize,)>(Variant(_33, 2), 5)) = core::ptr::addr_of!(_15.1);
_50.2 = _28 + _53;
Goto(bb26)
}
bb26 = {
Call(_73 = dump_var(0_usize, 30_usize, Move(_30), 11_usize, Move(_11), 38_usize, Move(_38), 3_usize, Move(_3)), bb27, UnwindUnreachable())
}
bb27 = {
Call(_73 = dump_var(0_usize, 12_usize, Move(_12), 10_usize, Move(_10), 22_usize, Move(_22), 28_usize, Move(_28)), bb28, UnwindUnreachable())
}
bb28 = {
Call(_73 = dump_var(0_usize, 9_usize, Move(_9), 1_usize, Move(_1), 49_usize, Move(_49), 16_usize, Move(_16)), bb29, UnwindUnreachable())
}
bb29 = {
Call(_73 = dump_var(0_usize, 6_usize, Move(_6), 2_usize, Move(_2), 7_usize, Move(_7), 20_usize, Move(_20)), bb30, UnwindUnreachable())
}
bb30 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn1(mut _1: bool,mut _2: char,mut _3: bool,mut _4: i128,mut _5: char,mut _6: Adt50,mut _7: i64,mut _8: f32,mut _9: (i32, u8, f32, u8, char, bool)) -> u8 {
mir! {
type RET = u8;
let _10: (i32, u8, f32, u8, char, bool);
let _11: f64;
let _12: bool;
let _13: isize;
let _14: u16;
let _15: f64;
let _16: i32;
let _17: (isize,);
let _18: ((i32, u8, f32, u8, char, bool),);
let _19: f64;
let _20: Adt50;
let _21: f32;
let _22: f32;
let _23: bool;
let _24: isize;
let _25: isize;
let _26: isize;
let _27: [u128; 1];
let _28: Adt48;
let _29: [char; 2];
let _30: isize;
let _31: f64;
let _32: (i8, char, u128);
let _33: *mut u32;
let _34: [char; 2];
let _35: Adt52;
let _36: bool;
let _37: [i8; 7];
let _38: f32;
let _39: isize;
let _40: Adt51;
let _41: f32;
let _42: [char; 3];
let _43: u8;
let _44: [i128; 2];
let _45: Adt62;
let _46: Adt54;
let _47: i64;
let _48: char;
let _49: [usize; 1];
let _50: (f32, i64);
let _51: bool;
let _52: i32;
let _53: Adt62;
let _54: u32;
let _55: isize;
let _56: bool;
let _57: i32;
let _58: bool;
let _59: ();
let _60: ();
{
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0)).5 = _3;
_9.3 = !Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0).1;
_9.5 = _1;
_9.4 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0).4;
_9.1 = !Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0).3;
_1 = !_9.5;
_10.0 = _9.0;
_9.4 = _2;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0)).1 = _9.1 ^ _9.3;
_11 = _9.2 as f64;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0)).3 = _9.1;
_2 = _9.4;
RET = _3 as u8;
Goto(bb1)
}
bb1 = {
_9 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0);
_10.4 = _2;
_10.2 = -_9.2;
_10.4 = _5;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0)).0 = 7_usize as i32;
_10.3 = _7 as u8;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0)) = _9;
_15 = _7 as f64;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0)).3 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0).1;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0)).1 = !_9.1;
_9.4 = _2;
_5 = _9.4;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0)).0 = 46656_u16 as i32;
_3 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0).5;
_9.0 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0).0;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0)).0 = _10.0;
_9.1 = 9223372036854775807_isize as u8;
_1 = !_3;
_13 = _7 as isize;
_18.0 = (_9.0, RET, Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0).2, Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0).1, Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0).4, _1);
_18.0.1 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0).3 - RET;
Goto(bb2)
}
bb2 = {
_9.0 = _10.0 ^ Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0).0;
_9.5 = !_1;
_18.0.1 = !RET;
_10 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0);
_10.5 = !_9.5;
_18.0.4 = _9.4;
_9.4 = _2;
_22 = -_18.0.2;
_21 = 3899489987_u32 as f32;
_12 = _9.5;
_4 = 120443154744719940481123213270724795042_i128;
RET = _10.3 | _18.0.3;
_16 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0).0;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0)).2 = 3_usize as f32;
Goto(bb3)
}
bb3 = {
_26 = 2_usize as isize;
_23 = _10.1 < _10.1;
RET = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0).1;
_25 = _13 | _13;
_24 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0).1 as isize;
_14 = 47745_u16 << _18.0.1;
_9.3 = _10.1 - _18.0.3;
_18 = (Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0),);
_9 = (_16, _18.0.1, Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0).2, Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0).3, _10.4, _10.5);
_18.0.5 = !_3;
_23 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0).5;
_24 = -_25;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0)) = (_9.0, _10.3, _10.2, RET, _5, _18.0.5);
Goto(bb4)
}
bb4 = {
SetDiscriminant(_6, 2);
_6 = Adt50::Variant1 { fld0: _18.0 };
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0)).0 = 195576001673324798928410172145688268248_u128 as i32;
_4 = 165090574589993959799565294913030409609_i128 & 9999279178040498791084601548321785293_i128;
_18.0.1 = !_10.1;
_10 = (_16, _18.0.1, _8, RET, _5, _3);
SetDiscriminant(_6, 3);
_19 = _11 * _11;
_7 = !1861333823612885710_i64;
_10.4 = _2;
_12 = _10.5 ^ _1;
_18.0.3 = !_10.3;
_29 = [_18.0.4,_9.4];
_17 = (_25,);
_18.0.5 = !_9.5;
_29 = [_5,_18.0.4];
_28.fld0 = -_10.2;
_23 = _12 < _12;
_9 = (_18.0.0, _10.3, _18.0.2, _10.3, _18.0.4, _1);
_12 = _23;
_29 = [_2,_2];
Goto(bb5)
}
bb5 = {
_30 = _4 as isize;
_18.0.0 = _16;
_18.0.4 = _9.4;
_10 = (_16, _9.1, _22, _9.1, _9.4, _23);
_11 = 222594276002937102365751684682469610996_u128 as f64;
_10.0 = -_9.0;
_9.1 = _10.1;
_17 = (_24,);
_3 = _10.5 <= _12;
_24 = _7 as isize;
_7 = (-56_i16) as i64;
_8 = _22 * _10.2;
RET = _11 as u8;
_9.2 = _18.0.2 * _10.2;
_5 = _18.0.4;
_18.0.5 = _12;
_18.0.2 = -_21;
_9.3 = !_10.3;
_21 = _22;
_10.2 = -_18.0.2;
_3 = _12;
_10.0 = _16;
_28 = Adt48 { fld0: _8 };
_18.0.1 = _10.0 as u8;
Goto(bb6)
}
bb6 = {
_27 = [264573033007289528397408394527688102350_u128];
_32 = (96_i8, _9.4, 8464217457494212395396886825451429235_u128);
_10.3 = _18.0.3;
_9.0 = -_10.0;
_10.5 = !_18.0.5;
Goto(bb7)
}
bb7 = {
_9 = (_10.0, _10.3, _22, _10.3, _18.0.4, _12);
_32 = (110_i8, _10.4, 332851723280116985546263274089582667178_u128);
_2 = _9.4;
_17 = (_30,);
place!(Field::<u128>(Variant(_6, 3), 1)) = !_32.2;
place!(Field::<[isize; 2]>(Variant(_6, 3), 0)) = [_17.0,_17.0];
_10.4 = _32.1;
_10 = (_9.0, _18.0.1, _28.fld0, _18.0.3, _32.1, _18.0.5);
RET = _9.1;
SetDiscriminant(_6, 1);
_10.1 = _18.0.3;
_27 = [_32.2];
_10.0 = !_16;
_28.fld0 = _18.0.2;
_31 = -_11;
_26 = _30;
match _32.2 {
0 => bb8,
332851723280116985546263274089582667178 => bb10,
_ => bb9
}
}
bb8 = {
_9.0 = _10.0 ^ Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0).0;
_9.5 = !_1;
_18.0.1 = !RET;
_10 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0);
_10.5 = !_9.5;
_18.0.4 = _9.4;
_9.4 = _2;
_22 = -_18.0.2;
_21 = 3899489987_u32 as f32;
_12 = _9.5;
_4 = 120443154744719940481123213270724795042_i128;
RET = _10.3 | _18.0.3;
_16 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0).0;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0)).2 = 3_usize as f32;
Goto(bb3)
}
bb9 = {
_30 = _4 as isize;
_18.0.0 = _16;
_18.0.4 = _9.4;
_10 = (_16, _9.1, _22, _9.1, _9.4, _23);
_11 = 222594276002937102365751684682469610996_u128 as f64;
_10.0 = -_9.0;
_9.1 = _10.1;
_17 = (_24,);
_3 = _10.5 <= _12;
_24 = _7 as isize;
_7 = (-56_i16) as i64;
_8 = _22 * _10.2;
RET = _11 as u8;
_9.2 = _18.0.2 * _10.2;
_5 = _18.0.4;
_18.0.5 = _12;
_18.0.2 = -_21;
_9.3 = !_10.3;
_21 = _22;
_10.2 = -_18.0.2;
_3 = _12;
_10.0 = _16;
_28 = Adt48 { fld0: _8 };
_18.0.1 = _10.0 as u8;
Goto(bb6)
}
bb10 = {
_10.2 = _28.fld0;
_39 = _26 - _24;
Goto(bb11)
}
bb11 = {
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0)).2 = _25 as f32;
_43 = _4 as u8;
_10.3 = !RET;
_11 = _32.2 as f64;
_27 = [_32.2];
_10.3 = 2_usize as u8;
_17.0 = _25 << _26;
_3 = _9.5;
_30 = -_39;
_18.0.2 = 2769796924_u32 as f32;
_9.4 = _18.0.4;
_4 = (-34446736208672389215659517341731117587_i128);
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0)).0 = _16;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0)).4 = _9.4;
_10.3 = !_9.1;
_10.1 = _18.0.3;
_32.1 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0).4;
Goto(bb12)
}
bb12 = {
_32.2 = _8 as u128;
_18.0 = (_9.0, _9.1, _22, _10.1, Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0).4, _10.5);
_39 = _13 & _30;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0)).1 = _10.1;
_5 = _2;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0)).1 = RET;
_49 = [2_usize];
_44 = [_4,_4];
Call(_18.0.3 = fn2(_23, _10.5), bb13, UnwindUnreachable())
}
bb13 = {
_9.3 = _7 as u8;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0)) = _10;
_47 = _7 & _7;
_7 = !_47;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0)).1 = _24 as u8;
_38 = _18.0.2;
_24 = _39;
Goto(bb14)
}
bb14 = {
_18.0.2 = _14 as f32;
_41 = _18.0.2 - _38;
_9.4 = _32.1;
_9.3 = !_18.0.3;
_23 = !_3;
_10.4 = _9.4;
_44 = [_4,_4];
_31 = _14 as f64;
_51 = !_9.5;
_50.1 = _47;
_50 = (_41, _7);
_1 = _12;
_27 = [_32.2];
SetDiscriminant(_6, 1);
_24 = _30;
_13 = -_39;
_10.0 = -_16;
_32 = (54_i8, _10.4, 131242006224431816760380297710881414308_u128);
_2 = _18.0.4;
_51 = !_9.5;
_30 = _13 * _13;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_6, 1), 0)) = (_18.0.0, _18.0.3, _41, _9.3, _5, _1);
SetDiscriminant(_6, 2);
_18.0.3 = _14 as u8;
_51 = !_9.5;
_4 = _10.0 as i128;
Goto(bb15)
}
bb15 = {
Call(_59 = dump_var(1_usize, 43_usize, Move(_43), 23_usize, Move(_23), 1_usize, Move(_1), 12_usize, Move(_12)), bb16, UnwindUnreachable())
}
bb16 = {
Call(_59 = dump_var(1_usize, 39_usize, Move(_39), 26_usize, Move(_26), 32_usize, Move(_32), 5_usize, Move(_5)), bb17, UnwindUnreachable())
}
bb17 = {
Call(_59 = dump_var(1_usize, 30_usize, Move(_30), 17_usize, Move(_17), 2_usize, Move(_2), 27_usize, Move(_27)), bb18, UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn2(mut _1: bool,mut _2: bool) -> u8 {
mir! {
type RET = u8;
let _3: [i128; 2];
let _4: (isize,);
let _5: [usize; 1];
let _6: [char; 5];
let _7: ([u128; 1], (isize,), isize);
let _8: (i32,);
let _9: Adt62;
let _10: i128;
let _11: u128;
let _12: (isize,);
let _13: isize;
let _14: (f32, i64);
let _15: (i32, u8, f32, u8, char, bool);
let _16: ();
let _17: ();
{
RET = 90_i8 as u8;
RET = 193_u8;
_2 = !_1;
_1 = _2;
_2 = !_1;
RET = !146_u8;
RET = (-51_isize) as u8;
_2 = _1 <= _1;
_3 = [(-135287327176866401840446472893192270438_i128),21143601992400179384753342355191596462_i128];
RET = !96_u8;
_3 = [(-98207438565878887529545022950554164526_i128),(-139901523771407231880288795875193844520_i128)];
_2 = _1;
_1 = _2 & _2;
_3 = [(-12400658484330564038980657853154026572_i128),(-21005589310681544855733936508999958757_i128)];
RET = 9072156323676148906784585446616773263_u128 as u8;
_4 = (31_isize,);
RET = 13_u8;
_5 = [0_usize];
_2 = _1;
_3 = [(-133384464789432839289386018113209335096_i128),(-45493365585803340779351087670685860308_i128)];
_2 = _1 > _1;
_1 = _2 <= _2;
Call(_7.0 = fn3(_1, _1, _1, _2, _2, _1, _1), bb1, UnwindUnreachable())
}
bb1 = {
_7.1.0 = 2792430697736975896_u64 as isize;
_7.1.0 = _4.0 + _4.0;
_1 = _2 != _2;
_7.2 = _7.1.0;
_5 = [1_usize];
_7.0 = [9268208859244526768657047154391611404_u128];
_8 = ((-581230547_i32),);
_1 = _2 ^ _2;
_3 = [(-12573382697239377167331011869534136216_i128),65115586131556674013541384682902355486_i128];
match _8.0 {
340282366920938463463374607431186980909 => bb3,
_ => bb2
}
}
bb2 = {
Return()
}
bb3 = {
_7.1.0 = _4.0 + _7.2;
_6 = ['\u{6086f}','\u{ede8f}','\u{96160}','\u{fde90}','\u{5a05f}'];
_2 = _1;
RET = 197_u8;
_7.1.0 = _7.2;
_2 = _1;
_2 = _1 ^ _1;
_12 = (_7.1.0,);
_2 = _1;
_8 = ((-1315917667_i32),);
RET = 9_u8;
_7.0 = [275033236136900137715191279311348886689_u128];
_10 = !80368817851150080607298121569728082872_i128;
RET = _10 as u8;
_8.0 = -1740046742_i32;
_3 = [_10,_10];
_14.0 = 2317475681054656444_u64 as f32;
RET = _2 as u8;
_11 = 324296198200553952213751055481655736259_u128;
_7.0 = [_11];
_10 = 125250494161516502053261699245895093500_i128;
_1 = !_2;
Goto(bb4)
}
bb4 = {
Call(_16 = dump_var(2_usize, 6_usize, Move(_6), 11_usize, Move(_11), 10_usize, Move(_10), 4_usize, Move(_4)), bb5, UnwindUnreachable())
}
bb5 = {
Call(_16 = dump_var(2_usize, 2_usize, Move(_2), 17_usize, _17, 17_usize, _17, 17_usize, _17), bb6, UnwindUnreachable())
}
bb6 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn3(mut _1: bool,mut _2: bool,mut _3: bool,mut _4: bool,mut _5: bool,mut _6: bool,mut _7: bool) -> [u128; 1] {
mir! {
type RET = [u128; 1];
let _8: (i32, i64, f32, u128, (f32, *mut (isize,), (i32, u8, f32, u8, char, bool)), (i32, u8, f32, u8, char, bool), (isize,));
let _9: i64;
let _10: Adt55;
let _11: [char; 2];
let _12: Adt50;
let _13: Adt48;
let _14: [char; 2];
let _15: *const *const *mut (isize,);
let _16: *const [char; 5];
let _17: u16;
let _18: Adt60;
let _19: (i16, (*mut [u128; 1], i32), isize, *const i128, char, usize, bool);
let _20: u8;
let _21: bool;
let _22: ([u128; 1], (isize,), isize);
let _23: ();
let _24: ();
{
_4 = !_1;
_1 = _3;
RET = [234391381948001207397502073019357789108_u128];
_6 = !_1;
RET = [294929210420325429311346684701067987026_u128];
_7 = !_6;
_5 = _1;
_2 = _3;
Goto(bb1)
}
bb1 = {
_5 = _7;
_2 = !_5;
RET = [63394157889046097699324970164285914115_u128];
_8.0 = (-1509_i16) as i32;
_8.4.2.0 = _8.0;
_8.6 = (9223372036854775807_isize,);
_4 = !_2;
_8.5.4 = '\u{1b620}';
_8.3 = _8.6.0 as u128;
_8.6 = (6_isize,);
_8.4.0 = 1864686590626940930_u64 as f32;
_8.3 = 114798523335679230022311478066852485823_u128 << _8.0;
Goto(bb2)
}
bb2 = {
_8.5 = (_8.0, 202_u8, _8.4.0, 95_u8, '\u{f70dd}', _4);
_8.4.2.5 = _1;
_8.4.2.3 = _8.5.3 * _8.5.1;
_8.4.2.2 = (-6615024473485102784_i64) as f32;
RET = [_8.3];
_8.5.0 = _8.4.2.0 & _8.0;
_8.4.2 = _8.5;
_8.6.0 = -9223372036854775807_isize;
_8.6.0 = 9223372036854775807_isize ^ 9223372036854775807_isize;
_9 = (-7292_i16) as i64;
_8.4.2.4 = _8.5.4;
_6 = _5;
_5 = _3 > _8.5.5;
_8.4.2.0 = _8.5.0 - _8.0;
_7 = _8.4.2.5 != _8.4.2.5;
Call(_8.2 = fn4(_8.4.2.3, _8.5.1, _4, _8.5.4, _8.4.2.1, _3, _8.5.4, _8.4.2.1, _8.4.2.4, _8.5.1, _4, _8.4.2.3, _8.4.2.5, _8.4.2.3, _8.4.2.3, _4), bb3, UnwindUnreachable())
}
bb3 = {
_1 = _4;
_5 = !_8.5.5;
_9 = (-5339768394777538412_i64) - (-9039474385054247705_i64);
_5 = _8.4.2.3 < _8.5.1;
_8.4.2.1 = !_8.5.1;
_8.0 = _8.5.4 as i32;
Call(_8.4.2.5 = fn9(_8.4.2.3, _8.5.4, _8.2, _2, _8.0, _8.5.3, _8.4.2.3, _8.2, _7, _8.4.2.1, _5, _5), bb4, UnwindUnreachable())
}
bb4 = {
_8.6.0 = !(-9223372036854775808_isize);
_8.5 = _8.4.2;
_5 = !_2;
_8.4.0 = _8.2;
_8.5.2 = _8.4.0;
_14 = [_8.5.4,_8.4.2.4];
_13.fld0 = _8.2;
_8.2 = 2776597399627529937_u64 as f32;
_6 = !_8.4.2.5;
_8.4.2.4 = _8.5.4;
_8.4.2.0 = 12534202982005137586_u64 as i32;
_8.4.1 = core::ptr::addr_of_mut!(_8.6);
_8.4.2.5 = _2;
_8.0 = _8.4.2.0;
_12 = Adt50::Variant1 { fld0: _8.5 };
SetDiscriminant(_12, 0);
_8.4.2 = (_8.5.0, _8.5.1, _8.4.0, _8.5.3, _8.5.4, _1);
_8.5.1 = _8.4.2.2 as u8;
Call(_10.fld0 = fn10(_8.5.5, _14, _8.5.3, _5, _8.4.2.4, _8.4, _8.4.2.2, _8.5, _8.4.2.4, _8.4.1), bb5, UnwindUnreachable())
}
bb5 = {
place!(Field::<u8>(Variant(_10.fld0, 1), 4)) = !_8.5.1;
_3 = !_8.5.5;
_19.1.1 = Field::<i32>(Variant(_10.fld0, 1), 1);
_13 = Adt48 { fld0: _8.5.2 };
place!(Field::<u8>(Variant(_10.fld0, 1), 4)) = _8.4.2.1;
_8.5.2 = _13.fld0;
_19.5 = _7 as usize;
_14 = [_8.4.2.4,_8.5.4];
_8.1 = _9;
_18.fld0 = Adt50::Variant3 { fld0: Field::<[isize; 2]>(Variant(_10.fld0, 1), 0),fld1: _8.3 };
place!(Field::<[u128; 1]>(Variant(_12, 0), 2)) = Field::<[u128; 1]>(Variant(_10.fld0, 1), 2);
RET = Field::<[u128; 1]>(Variant(_12, 0), 2);
_8.5.3 = _8.4.2.1;
Goto(bb6)
}
bb6 = {
Call(_23 = dump_var(3_usize, 6_usize, Move(_6), 4_usize, Move(_4), 14_usize, Move(_14), 3_usize, Move(_3)), bb7, UnwindUnreachable())
}
bb7 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn4(mut _1: u8,mut _2: u8,mut _3: bool,mut _4: char,mut _5: u8,mut _6: bool,mut _7: char,mut _8: u8,mut _9: char,mut _10: u8,mut _11: bool,mut _12: u8,mut _13: bool,mut _14: u8,mut _15: u8,mut _16: bool) -> f32 {
mir! {
type RET = f32;
let _17: Adt53;
let _18: f64;
let _19: f64;
let _20: isize;
let _21: u8;
let _22: ();
let _23: ();
{
_5 = _2 % _2;
_4 = _7;
_8 = !_12;
RET = 1792591207_i32 as f32;
_9 = _7;
_9 = _7;
_12 = (-769_i16) as u8;
_15 = _2 + _1;
_9 = _4;
_5 = (-32566_i16) as u8;
_6 = _16 <= _13;
_12 = _2;
_2 = !_14;
_7 = _4;
_1 = _2 - _12;
_2 = _12;
_5 = (-124554091857230314158739825677034776129_i128) as u8;
_12 = _8 / _2;
_12 = (-9223372036854775808_isize) as u8;
_8 = !_1;
_5 = !_1;
_11 = _16 & _16;
_8 = _9 as u8;
_18 = 113_i8 as f64;
Call(_1 = core::intrinsics::transmute(_15), bb1, UnwindUnreachable())
}
bb1 = {
_15 = _2;
_11 = !_13;
_5 = (-34_isize) as u8;
_8 = _1 + _2;
_8 = 132957829171605834581507485876996103728_u128 as u8;
_18 = (-125_isize) as f64;
_13 = _11;
_5 = 44192_u16 as u8;
_11 = _16;
_12 = _1;
RET = _18 as f32;
_19 = _18 + _18;
_1 = !_2;
_1 = !_12;
_8 = _15 / _14;
_12 = _15 | _2;
_18 = _19;
RET = 158948767321438957466170482943279970973_i128 as f32;
_5 = !_10;
_9 = _4;
Call(_7 = fn5(_5, _9, _8), bb2, UnwindUnreachable())
}
bb2 = {
_16 = !_6;
RET = _5 as f32;
_4 = _9;
_16 = _13;
Goto(bb3)
}
bb3 = {
Call(_22 = dump_var(4_usize, 1_usize, Move(_1), 7_usize, Move(_7), 12_usize, Move(_12), 16_usize, Move(_16)), bb4, UnwindUnreachable())
}
bb4 = {
Call(_22 = dump_var(4_usize, 8_usize, Move(_8), 10_usize, Move(_10), 9_usize, Move(_9), 13_usize, Move(_13)), bb5, UnwindUnreachable())
}
bb5 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn5(mut _1: u8,mut _2: char,mut _3: u8) -> char {
mir! {
type RET = char;
let _4: *mut u32;
let _5: isize;
let _6: f64;
let _7: bool;
let _8: (i8, char, u128);
let _9: char;
let _10: (usize, (isize,), *const (i32, u8, f32, u8, char, bool));
let _11: *mut [u128; 1];
let _12: [char; 3];
let _13: [usize; 1];
let _14: isize;
let _15: [bool; 7];
let _16: [char; 5];
let _17: isize;
let _18: i16;
let _19: Adt51;
let _20: Adt61;
let _21: Adt47;
let _22: (f32, *mut (isize,), (i32, u8, f32, u8, char, bool));
let _23: ([u128; 1], (isize,), isize);
let _24: [u128; 1];
let _25: *const *const *mut (isize,);
let _26: f64;
let _27: u128;
let _28: f64;
let _29: [usize; 1];
let _30: [char; 2];
let _31: [i8; 7];
let _32: Adt49;
let _33: ();
let _34: ();
{
_2 = '\u{cd749}';
RET = _2;
RET = _2;
_6 = 129306945489964897000254058817959156177_u128 as f64;
_3 = _1;
_1 = _3 - _3;
_5 = 114_isize * 58_isize;
_3 = 31115_i16 as u8;
_5 = -9223372036854775807_isize;
_1 = _3;
_1 = _3;
_3 = 5_i8 as u8;
_2 = RET;
Goto(bb1)
}
bb1 = {
_7 = !true;
RET = _2;
_7 = false;
_1 = _3;
RET = _2;
RET = _2;
RET = _2;
RET = _2;
_2 = RET;
RET = _2;
RET = _2;
RET = _2;
_8.0 = 30_i8;
_9 = RET;
_8 = ((-2_i8), _9, 34340659382395639215547034829314689978_u128);
RET = _2;
RET = _9;
_8.1 = RET;
_8.1 = _2;
_3 = _1 << _8.0;
_8.2 = !230271317084085238309397874585374822554_u128;
_8.1 = _9;
_3 = _1;
_8 = (73_i8, _9, 13385982991279798071251365617162085357_u128);
_8.1 = _9;
_7 = !true;
Call(_8 = fn6(RET, _1, _5, _7, _1, _5, _6, _9, _5, _9, _9, _5, _7), bb2, UnwindUnreachable())
}
bb2 = {
RET = _9;
_8.1 = _2;
_10.1.0 = -_5;
_10.0 = !0_usize;
RET = _9;
_8 = ((-64_i8), _9, 3049142779371312131886001348282766040_u128);
_5 = _10.1.0 ^ _10.1.0;
_5 = -_10.1.0;
_10.1 = (_5,);
_2 = RET;
_2 = _8.1;
_8 = ((-85_i8), _9, 127917224858444613258933591058637623481_u128);
_10.0 = 10318507712194735170_usize;
_2 = _9;
_5 = 589705211_i32 as isize;
_8.0 = 2723282236_u32 as i8;
RET = _8.1;
_6 = 11712835561107280619_u64 as f64;
_8 = (71_i8, RET, 197695914371579728770798930318515142822_u128);
_8.0 = (-87_i8);
_8 = ((-94_i8), _2, 262484241557962991193548334252865211431_u128);
_10.1 = (_5,);
match _10.0 {
10318507712194735170 => bb4,
_ => bb3
}
}
bb3 = {
_7 = !true;
RET = _2;
_7 = false;
_1 = _3;
RET = _2;
RET = _2;
RET = _2;
RET = _2;
_2 = RET;
RET = _2;
RET = _2;
RET = _2;
_8.0 = 30_i8;
_9 = RET;
_8 = ((-2_i8), _9, 34340659382395639215547034829314689978_u128);
RET = _2;
RET = _9;
_8.1 = RET;
_8.1 = _2;
_3 = _1 << _8.0;
_8.2 = !230271317084085238309397874585374822554_u128;
_8.1 = _9;
_3 = _1;
_8 = (73_i8, _9, 13385982991279798071251365617162085357_u128);
_8.1 = _9;
_7 = !true;
Call(_8 = fn6(RET, _1, _5, _7, _1, _5, _6, _9, _5, _9, _9, _5, _7), bb2, UnwindUnreachable())
}
bb4 = {
_3 = !_1;
_5 = (-72121049284804053951613491489495532043_i128) as isize;
_8.1 = _9;
_1 = _3;
_2 = _9;
_10.1 = (_5,);
_9 = RET;
_10.1 = (_5,);
_8.1 = _2;
_10.1.0 = !_5;
_7 = !true;
RET = _8.1;
_8 = ((-94_i8), RET, 20922912864958632554132127417786253453_u128);
_3 = _2 as u8;
_3 = !_1;
_13 = [_10.0];
_12 = [RET,_8.1,RET];
_8.1 = _2;
_14 = -_10.1.0;
_1 = !_3;
_12 = [RET,_9,_9];
match _8.0 {
0 => bb1,
1 => bb2,
2 => bb3,
340282366920938463463374607431768211362 => bb6,
_ => bb5
}
}
bb5 = {
RET = _9;
_8.1 = _2;
_10.1.0 = -_5;
_10.0 = !0_usize;
RET = _9;
_8 = ((-64_i8), _9, 3049142779371312131886001348282766040_u128);
_5 = _10.1.0 ^ _10.1.0;
_5 = -_10.1.0;
_10.1 = (_5,);
_2 = RET;
_2 = _8.1;
_8 = ((-85_i8), _9, 127917224858444613258933591058637623481_u128);
_10.0 = 10318507712194735170_usize;
_2 = _9;
_5 = 589705211_i32 as isize;
_8.0 = 2723282236_u32 as i8;
RET = _8.1;
_6 = 11712835561107280619_u64 as f64;
_8 = (71_i8, RET, 197695914371579728770798930318515142822_u128);
_8.0 = (-87_i8);
_8 = ((-94_i8), _2, 262484241557962991193548334252865211431_u128);
_10.1 = (_5,);
match _10.0 {
10318507712194735170 => bb4,
_ => bb3
}
}
bb6 = {
_13 = [_10.0];
_10.0 = 2_usize + 7_usize;
_8.2 = _6 as u128;
_15 = [_7,_7,_7,_7,_7,_7,_7];
_5 = _10.1.0;
RET = _2;
_6 = (-1596534666864247623_i64) as f64;
_6 = (-25967_i16) as f64;
RET = _9;
_10.1.0 = RET as isize;
_7 = false;
_8.2 = 106968585725260156462089166614683500390_u128 & 169159437095838377965772521871060539087_u128;
_10.1.0 = _5 ^ _5;
_1 = !_3;
_10.0 = 4_usize ^ 5_usize;
_18 = -15752_i16;
_8 = ((-88_i8), _2, 302319929766801242612959222660596854031_u128);
_8.0 = !(-63_i8);
_8 = (36_i8, _9, 254512855364871306823870223506111309327_u128);
_6 = 18422650828475964729_u64 as f64;
_3 = _1 >> _14;
_15 = [_7,_7,_7,_7,_7,_7,_7];
Call(_6 = core::intrinsics::transmute(_10.0), bb7, UnwindUnreachable())
}
bb7 = {
_14 = _5 + _5;
_9 = RET;
_10.1 = (_14,);
_10.0 = 7377327706925485550_usize;
_17 = _14 ^ _10.1.0;
_2 = RET;
_8.2 = 229348995837761397476522548007101521640_u128;
_12 = [RET,_2,RET];
_8 = (2_i8, _9, 221959334915137697398617225380249583564_u128);
Call(_14 = fn7(_10.1, _17, _17, _1, _10.1.0, _10.1, _8.0, _8.2, _10.1.0, _8.1, _17, _17, _7, RET, _8.0), bb8, UnwindUnreachable())
}
bb8 = {
_18 = _14 as i16;
RET = _8.1;
_14 = _17;
_10.1 = (_17,);
_8.0 = (-27_i8) ^ (-95_i8);
_15 = [_7,_7,_7,_7,_7,_7,_7];
RET = _8.1;
_6 = _10.1.0 as f64;
_10.0 = (-1560075449187222885_i64) as usize;
_15 = [_7,_7,_7,_7,_7,_7,_7];
_18 = (-18978_i16) - 5676_i16;
RET = _9;
_6 = _1 as f64;
RET = _8.1;
_3 = _1 ^ _1;
_8.2 = _14 as u128;
_10.1 = (_14,);
_7 = false ^ false;
_5 = -_17;
_7 = !true;
_8.0 = 20_i8;
RET = _9;
_22.2.1 = _14 as u8;
_8 = ((-44_i8), RET, 29068517641762902699392317822001253299_u128);
_16 = [_9,_8.1,_8.1,_2,_2];
_16 = [_9,_2,RET,_2,_2];
_10.0 = 16090285921289357453_usize + 7_usize;
_22.1 = core::ptr::addr_of_mut!(_10.1);
_8.0 = (-119_i8);
match _8.0 {
0 => bb6,
1 => bb5,
2 => bb3,
3 => bb4,
340282366920938463463374607431768211337 => bb10,
_ => bb9
}
}
bb9 = {
_7 = !true;
RET = _2;
_7 = false;
_1 = _3;
RET = _2;
RET = _2;
RET = _2;
RET = _2;
_2 = RET;
RET = _2;
RET = _2;
RET = _2;
_8.0 = 30_i8;
_9 = RET;
_8 = ((-2_i8), _9, 34340659382395639215547034829314689978_u128);
RET = _2;
RET = _9;
_8.1 = RET;
_8.1 = _2;
_3 = _1 << _8.0;
_8.2 = !230271317084085238309397874585374822554_u128;
_8.1 = _9;
_3 = _1;
_8 = (73_i8, _9, 13385982991279798071251365617162085357_u128);
_8.1 = _9;
_7 = !true;
Call(_8 = fn6(RET, _1, _5, _7, _1, _5, _6, _9, _5, _9, _9, _5, _7), bb2, UnwindUnreachable())
}
bb10 = {
_17 = _10.1.0 - _10.1.0;
_22.0 = 9989070668760280354_u64 as f32;
_5 = !_14;
_22.2.1 = !_1;
_2 = _8.1;
_10.2 = core::ptr::addr_of!(_22.2);
_23.0 = [_8.2];
_22.2.3 = 326515409_i32 as u8;
_22.0 = 4825949052572320875_u64 as f32;
_13 = [_10.0];
_13 = [_10.0];
_23.1.0 = _6 as isize;
_22.2.0 = _2 as i32;
match _8.2 {
0 => bb1,
1 => bb8,
29068517641762902699392317822001253299 => bb12,
_ => bb11
}
}
bb11 = {
RET = _9;
_8.1 = _2;
_10.1.0 = -_5;
_10.0 = !0_usize;
RET = _9;
_8 = ((-64_i8), _9, 3049142779371312131886001348282766040_u128);
_5 = _10.1.0 ^ _10.1.0;
_5 = -_10.1.0;
_10.1 = (_5,);
_2 = RET;
_2 = _8.1;
_8 = ((-85_i8), _9, 127917224858444613258933591058637623481_u128);
_10.0 = 10318507712194735170_usize;
_2 = _9;
_5 = 589705211_i32 as isize;
_8.0 = 2723282236_u32 as i8;
RET = _8.1;
_6 = 11712835561107280619_u64 as f64;
_8 = (71_i8, RET, 197695914371579728770798930318515142822_u128);
_8.0 = (-87_i8);
_8 = ((-94_i8), _2, 262484241557962991193548334252865211431_u128);
_10.1 = (_5,);
match _10.0 {
10318507712194735170 => bb4,
_ => bb3
}
}
bb12 = {
RET = _2;
_22.2.4 = _9;
Goto(bb13)
}
bb13 = {
_22.2.4 = _2;
_23.1 = (_5,);
_2 = _22.2.4;
_10.0 = 3647338842_u32 as usize;
_22.2.5 = _7;
_22.2.2 = _22.0;
_3 = _6 as u8;
_23.1.0 = 4612436389832143566_u64 as isize;
_27 = _8.2 - _8.2;
_23.1 = (_14,);
_22.2.4 = _2;
_23.2 = _23.1.0 | _17;
_23.1 = (_17,);
_22.2.3 = _7 as u8;
RET = _9;
_5 = _10.1.0 ^ _23.1.0;
_26 = (-4890969770252185767_i64) as f64;
_8.1 = RET;
_16 = [_22.2.4,_22.2.4,RET,_2,_8.1];
_8.0 = (-41_i8);
Goto(bb14)
}
bb14 = {
_22.2.3 = !_22.2.1;
_23.1 = (_10.1.0,);
_8.0 = (-48_i8);
_8 = (48_i8, _9, _27);
_17 = !_23.2;
_18 = -1153_i16;
_6 = _22.0 as f64;
_10.1.0 = _7 as isize;
RET = _22.2.4;
_14 = !_10.1.0;
_13 = [_10.0];
_22.2.3 = _8.0 as u8;
_5 = _22.2.3 as isize;
_14 = -_5;
RET = _22.2.4;
_2 = _9;
RET = _2;
Goto(bb15)
}
bb15 = {
Call(_33 = dump_var(5_usize, 15_usize, Move(_15), 5_usize, Move(_5), 13_usize, Move(_13), 17_usize, Move(_17)), bb16, UnwindUnreachable())
}
bb16 = {
Call(_33 = dump_var(5_usize, 8_usize, Move(_8), 14_usize, Move(_14), 3_usize, Move(_3), 23_usize, Move(_23)), bb17, UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn6(mut _1: char,mut _2: u8,mut _3: isize,mut _4: bool,mut _5: u8,mut _6: isize,mut _7: f64,mut _8: char,mut _9: isize,mut _10: char,mut _11: char,mut _12: isize,mut _13: bool) -> (i8, char, u128) {
mir! {
type RET = (i8, char, u128);
let _14: Adt47;
let _15: u128;
let _16: [usize; 1];
let _17: (i32,);
let _18: (isize,);
let _19: [char; 2];
let _20: f64;
let _21: ([u128; 1], (isize,), isize);
let _22: *const (i32, u8, f32, u8, char, bool);
let _23: [usize; 1];
let _24: Adt48;
let _25: (i32, i64, f32, u128, (f32, *mut (isize,), (i32, u8, f32, u8, char, bool)), (i32, u8, f32, u8, char, bool), (isize,));
let _26: (i32, u8, f32, u8, char, bool);
let _27: Adt50;
let _28: isize;
let _29: ();
let _30: ();
{
RET.2 = !238757897115467592403460279778699409188_u128;
_5 = !_2;
RET.2 = _8 as u128;
_10 = _11;
RET = (55_i8, _8, 47820202560841543506160779255276621118_u128);
RET.2 = 239617782517573584732577225306474834073_u128 & 203901357680538503836394400114332073202_u128;
_9 = -_12;
_10 = _11;
_4 = _13 ^ _13;
_1 = _10;
RET.0 = 117_i8 + 124_i8;
RET.0 = (-46_i8) + 69_i8;
_10 = _1;
_12 = !_9;
RET.0 = 43_i8;
RET.0 = !(-50_i8);
_8 = _10;
RET.2 = 28298623620333367158197449886980589820_u128;
_10 = _1;
RET.2 = 721999729004948037_i64 as u128;
Goto(bb1)
}
bb1 = {
_15 = RET.2;
_17 = ((-679374125_i32),);
_16 = [4_usize];
_17 = ((-812106881_i32),);
_12 = !_9;
_18.0 = _3 >> _17.0;
RET.0 = (-119_i8) ^ 120_i8;
_17.0 = 945145026_i32 >> _5;
_7 = 16275886667081279869_usize as f64;
RET.0 = (-40_i8);
_8 = _1;
_16 = [2910858617874533233_usize];
_10 = RET.1;
_11 = _10;
_18.0 = _6 >> _6;
_4 = !_13;
_19 = [RET.1,_10];
_21.1.0 = _12 & _18.0;
_1 = _10;
match RET.0 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
6 => bb8,
340282366920938463463374607431768211416 => bb10,
_ => bb9
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_21.1.0 = _6 >> _17.0;
RET = (46_i8, _1, _15);
_15 = RET.2 | RET.2;
_21.0 = [RET.2];
_7 = 31390_i16 as f64;
_10 = _8;
_6 = 57951_u16 as isize;
RET = (98_i8, _11, _15);
_25.5.4 = _8;
_21.2 = _3 ^ _18.0;
_3 = _21.2;
_25.5.5 = !_13;
_25.4.2.3 = _2 << _9;
_25.6.0 = _3 - _3;
_20 = -_7;
_25.5.1 = _2 & _25.4.2.3;
_5 = _25.5.1 >> _9;
_25.4.2.2 = _3 as f32;
_25.4.2.0 = _17.0 ^ _17.0;
Goto(bb11)
}
bb11 = {
_23 = [2773521039229640833_usize];
_25.4.2.4 = _8;
_18.0 = -_25.6.0;
match RET.0 {
0 => bb8,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb10,
5 => bb6,
6 => bb12,
98 => bb14,
_ => bb13
}
}
bb12 = {
Return()
}
bb13 = {
Return()
}
bb14 = {
RET.0 = (-103_i8);
_22 = core::ptr::addr_of!(_26);
_6 = _13 as isize;
(*_22).5 = !_25.5.5;
_25.2 = -_25.4.2.2;
_25.4.2 = (_17.0, _25.5.1, _25.2, _5, _10, _26.5);
_25.4.2.2 = _25.2;
_5 = !_25.4.2.1;
Goto(bb15)
}
bb15 = {
Call(_29 = dump_var(6_usize, 12_usize, Move(_12), 15_usize, Move(_15), 23_usize, Move(_23), 10_usize, Move(_10)), bb16, UnwindUnreachable())
}
bb16 = {
Call(_29 = dump_var(6_usize, 11_usize, Move(_11), 19_usize, Move(_19), 2_usize, Move(_2), 1_usize, Move(_1)), bb17, UnwindUnreachable())
}
bb17 = {
Call(_29 = dump_var(6_usize, 6_usize, Move(_6), 30_usize, _30, 30_usize, _30, 30_usize, _30), bb18, UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn7(mut _1: (isize,),mut _2: isize,mut _3: isize,mut _4: u8,mut _5: isize,mut _6: (isize,),mut _7: i8,mut _8: u128,mut _9: isize,mut _10: char,mut _11: isize,mut _12: isize,mut _13: bool,mut _14: char,mut _15: i8) -> isize {
mir! {
type RET = isize;
let _16: Adt50;
let _17: i8;
let _18: isize;
let _19: [char; 5];
let _20: u32;
let _21: isize;
let _22: u8;
let _23: bool;
let _24: (i32,);
let _25: *const *const *mut (isize,);
let _26: Adt58;
let _27: isize;
let _28: *const *mut (isize,);
let _29: (*mut [u128; 1], i32);
let _30: (f32, *mut (isize,), (i32, u8, f32, u8, char, bool));
let _31: (i32, i64, f32, u128, (f32, *mut (isize,), (i32, u8, f32, u8, char, bool)), (i32, u8, f32, u8, char, bool), (isize,));
let _32: Adt54;
let _33: f32;
let _34: isize;
let _35: u32;
let _36: bool;
let _37: u128;
let _38: Adt63;
let _39: i128;
let _40: Adt63;
let _41: ((i32, u8, f32, u8, char, bool),);
let _42: ();
let _43: ();
{
_10 = _14;
Goto(bb1)
}
bb1 = {
_12 = 63913296102490847_u64 as isize;
_4 = _8 as u8;
_15 = !_7;
_12 = !_11;
_10 = _14;
_11 = (-3468135_i32) as isize;
_17 = _15 << _5;
Goto(bb2)
}
bb2 = {
_6 = (_2,);
RET = -_9;
RET = 2679002913_u32 as isize;
_11 = _12;
_18 = _9 + _3;
_7 = _15;
_8 = 215175518321479322720782408974994171886_u128 ^ 310745029616990688550299440541737795573_u128;
_7 = _15 >> _17;
_15 = _17 ^ _7;
_12 = _3 * _18;
_8 = 189125313914220420048731422419500612421_u128;
_1.0 = -_3;
_2 = _6.0 + _12;
_5 = -_2;
_4 = 106_u8;
_21 = _2 + _5;
_12 = 4995407022557940986_u64 as isize;
RET = (-26118_i16) as isize;
_18 = _21 - _12;
_10 = _14;
_9 = -_21;
Goto(bb3)
}
bb3 = {
_10 = _14;
_13 = false;
_23 = _18 != _2;
_3 = 24799_u16 as isize;
_6.0 = _23 as isize;
_6 = (_18,);
_12 = (-28508_i16) as isize;
_7 = _17 >> _21;
_21 = _1.0 & _6.0;
_4 = 127_u8;
_15 = _17 * _7;
Call(_1.0 = fn8(_15, _15, _18, _18, _9), bb4, UnwindUnreachable())
}
bb4 = {
_22 = _4;
_17 = _15;
_30.2.5 = !_23;
_31.5.0 = 2015039343_i32 | (-802940545_i32);
_23 = _30.2.5 | _30.2.5;
_3 = _5 + _21;
_31.4.2.4 = _10;
_3 = 8235518863163221939_i64 as isize;
_30.2.2 = 814819690277511414_usize as f32;
_30.2.5 = _23;
_31.3 = 46242_u16 as u128;
Goto(bb5)
}
bb5 = {
_20 = !2003969359_u32;
_19 = [_14,_31.4.2.4,_10,_10,_14];
_14 = _10;
_31.3 = _9 as u128;
_31.4.2.3 = 17711812899350720020_usize as u8;
_1 = _6;
_31.2 = (-600671496266881739_i64) as f32;
_8 = 37941_u16 as u128;
_31.5.1 = !_31.4.2.3;
_18 = _21;
_1 = (_18,);
_33 = _30.2.2 * _30.2.2;
Goto(bb6)
}
bb6 = {
_12 = 13251089234077647677_u64 as isize;
_31.4.2.2 = _33 - _30.2.2;
_31.4.2.5 = !_30.2.5;
_24.0 = _31.5.0 | _31.5.0;
_31.5.5 = _1.0 == _21;
_31.4.2 = (_24.0, _22, _31.2, _31.5.1, _14, _31.5.5);
_31.5.4 = _14;
RET = _1.0 * _1.0;
_31.4.2.2 = _8 as f32;
_37 = _10 as u128;
_36 = _31.4.2.5;
_31.5.3 = _31.5.1 << RET;
_31.4.1 = core::ptr::addr_of_mut!(_6);
_30.2.0 = _31.4.2.5 as i32;
_40.fld6 = 32969_u16;
_40.fld0 = _31.5.5;
_38.fld2 = (_30.2.0, _31.5.3, _31.4.2.2, _31.5.3, _31.5.4, _31.5.5);
_40.fld2.5 = !_31.4.2.5;
_31.1 = -6049545004093280982_i64;
_40.fld2.0 = _38.fld2.0 * _30.2.0;
_18 = _2;
_18 = _5 & _6.0;
_25 = core::ptr::addr_of!(_28);
RET = _18 * _18;
_34 = _7 as isize;
Goto(bb7)
}
bb7 = {
Call(_42 = dump_var(7_usize, 21_usize, Move(_21), 7_usize, Move(_7), 4_usize, Move(_4), 13_usize, Move(_13)), bb8, UnwindUnreachable())
}
bb8 = {
Call(_42 = dump_var(7_usize, 9_usize, Move(_9), 19_usize, Move(_19), 22_usize, Move(_22), 12_usize, Move(_12)), bb9, UnwindUnreachable())
}
bb9 = {
Call(_42 = dump_var(7_usize, 20_usize, Move(_20), 34_usize, Move(_34), 11_usize, Move(_11), 3_usize, Move(_3)), bb10, UnwindUnreachable())
}
bb10 = {
Call(_42 = dump_var(7_usize, 8_usize, Move(_8), 43_usize, _43, 43_usize, _43, 43_usize, _43), bb11, UnwindUnreachable())
}
bb11 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn8(mut _1: i8,mut _2: i8,mut _3: isize,mut _4: isize,mut _5: isize) -> isize {
mir! {
type RET = isize;
let _6: isize;
let _7: (*mut [u128; 1], i32);
let _8: Adt49;
let _9: (f32, i64);
let _10: char;
let _11: ();
let _12: ();
{
_4 = 2969155963973712436_i64 as isize;
_6 = 64_u8 as isize;
_5 = _3;
RET = !_5;
_3 = -_6;
_6 = _5;
_6 = -RET;
RET = -_6;
_1 = (-18967_i16) as i8;
RET = _6 | _5;
_8 = Adt49 { fld0: 62_u8 };
_4 = _5 >> _6;
_5 = !_4;
RET = -_5;
_3 = _5 << _6;
_5 = !_4;
RET = _4;
_8.fld0 = 151_u8 - 179_u8;
_7.1 = !(-1044056429_i32);
_8 = Adt49 { fld0: 80_u8 };
_5 = 7731174709575270900_i64 as isize;
_4 = _3;
_5 = _4;
_4 = !_3;
_9.0 = _8.fld0 as f32;
_5 = _4 << _4;
_9.1 = 11953784695174869741_u64 as i64;
Goto(bb1)
}
bb1 = {
Call(_11 = dump_var(8_usize, 4_usize, Move(_4), 5_usize, Move(_5), 6_usize, Move(_6), 12_usize, _12), bb2, UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn9(mut _1: u8,mut _2: char,mut _3: f32,mut _4: bool,mut _5: i32,mut _6: u8,mut _7: u8,mut _8: f32,mut _9: bool,mut _10: u8,mut _11: bool,mut _12: bool) -> bool {
mir! {
type RET = bool;
let _13: [char; 2];
let _14: ();
let _15: ();
{
RET = _11;
_13 = [_2,_2];
Goto(bb1)
}
bb1 = {
Call(_14 = dump_var(9_usize, 6_usize, Move(_6), 10_usize, Move(_10), 5_usize, Move(_5), 11_usize, Move(_11)), bb2, UnwindUnreachable())
}
bb2 = {
Call(_14 = dump_var(9_usize, 12_usize, Move(_12), 15_usize, _15, 15_usize, _15, 15_usize, _15), bb3, UnwindUnreachable())
}
bb3 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn10(mut _1: bool,mut _2: [char; 2],mut _3: u8,mut _4: bool,mut _5: char,mut _6: (f32, *mut (isize,), (i32, u8, f32, u8, char, bool)),mut _7: f32,mut _8: (i32, u8, f32, u8, char, bool),mut _9: char,mut _10: *mut (isize,)) -> Adt47 {
mir! {
type RET = Adt47;
let _11: Adt50;
let _12: Adt58;
let _13: bool;
let _14: i16;
let _15: Adt51;
let _16: [char; 5];
let _17: *mut (isize,);
let _18: Adt55;
let _19: *mut u32;
let _20: (i8, char, u128);
let _21: [i8; 7];
let _22: f32;
let _23: Adt49;
let _24: (f32, *mut (isize,), (i32, u8, f32, u8, char, bool));
let _25: Adt63;
let _26: f64;
let _27: [char; 2];
let _28: [i128; 2];
let _29: Adt47;
let _30: [char; 2];
let _31: *mut (isize,);
let _32: (i8, char, u128);
let _33: u64;
let _34: u16;
let _35: char;
let _36: [bool; 7];
let _37: [u128; 1];
let _38: [u128; 1];
let _39: Adt54;
let _40: isize;
let _41: f32;
let _42: u32;
let _43: i8;
let _44: Adt56;
let _45: u8;
let _46: u32;
let _47: isize;
let _48: *const i128;
let _49: bool;
let _50: Adt55;
let _51: i32;
let _52: (i8, char, u128);
let _53: [u128; 1];
let _54: i16;
let _55: Adt63;
let _56: u16;
let _57: *const [char; 5];
let _58: Adt63;
let _59: Adt62;
let _60: Adt47;
let _61: Adt50;
let _62: *const [char; 5];
let _63: Adt51;
let _64: ([u128; 1], (isize,), isize);
let _65: f32;
let _66: i32;
let _67: char;
let _68: ([u128; 1], (isize,), isize);
let _69: Adt52;
let _70: [u128; 1];
let _71: (i8, char, u128);
let _72: [char; 3];
let _73: isize;
let _74: bool;
let _75: (*mut [u128; 1], i32);
let _76: (f32, *mut (isize,), (i32, u8, f32, u8, char, bool));
let _77: (i8, char, u128);
let _78: isize;
let _79: ((i32, u8, f32, u8, char, bool),);
let _80: Adt56;
let _81: f32;
let _82: (i32,);
let _83: [char; 3];
let _84: bool;
let _85: Adt49;
let _86: u16;
let _87: char;
let _88: char;
let _89: Adt47;
let _90: f32;
let _91: [i128; 2];
let _92: i8;
let _93: [i128; 2];
let _94: Adt56;
let _95: i32;
let _96: isize;
let _97: isize;
let _98: bool;
let _99: isize;
let _100: f64;
let _101: (i8, char, u128);
let _102: ([u128; 1], (isize,), isize);
let _103: ((i32, u8, f32, u8, char, bool),);
let _104: f32;
let _105: Adt48;
let _106: u16;
let _107: (*mut [u128; 1], i32);
let _108: [isize; 2];
let _109: bool;
let _110: [u128; 1];
let _111: (usize, (isize,), *const (i32, u8, f32, u8, char, bool));
let _112: char;
let _113: [i8; 7];
let _114: i128;
let _115: Adt61;
let _116: i64;
let _117: Adt56;
let _118: bool;
let _119: [isize; 2];
let _120: Adt54;
let _121: Adt49;
let _122: ([u128; 1], (isize,), isize);
let _123: ();
let _124: ();
{
_8.4 = _6.2.4;
_10 = core::ptr::addr_of_mut!((*_10));
_6.2 = _8;
(*_10).0 = 122_isize;
_1 = !_6.2.5;
_2 = [_8.4,_8.4];
_8.2 = -_6.0;
(*_10) = ((-26_isize),);
_7 = -_6.0;
_6.2.5 = _4 & _1;
_11 = Adt50::Variant1 { fld0: _8 };
_3 = 11931902001789350873_u64 as u8;
_8.5 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).2 != Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).2;
_8.5 = !_1;
_7 = -Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).2;
_4 = _6.2.5;
_8.5 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).5 > _1;
_6 = (_7, _10, Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0));
_4 = _6.2.4 != _6.2.4;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0)).1 = _8.3 >> _6.2.1;
_13 = !_6.2.5;
(*_10).0 = !(-94_isize);
_3 = !_8.3;
_6.0 = (*_10).0 as f32;
_8 = (Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).0, Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).3, _6.2.2, _3, Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).4, _4);
_8.2 = (-148211755057789239411173136852625758693_i128) as f32;
match Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).3 {
0 => bb1,
95 => bb3,
_ => bb2
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
_5 = _9;
match _6.2.3 {
0 => bb4,
1 => bb5,
2 => bb6,
95 => bb8,
_ => bb7
}
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_8.5 = !_4;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0)).5 = !_4;
_10 = _6.1;
_5 = _8.4;
_14 = _13 as i16;
_20.1 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).4;
_20.2 = 249782892411938141770320604217382287385_u128 ^ 313707068261243952978431616274112451794_u128;
_20 = (28_i8, Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).4, 96113262606105596479103217573460033408_u128);
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0)).5 = _1 | _8.5;
_1 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).5;
_21 = [_20.0,_20.0,_20.0,_20.0,_20.0,_20.0,_20.0];
_6.0 = _14 as f32;
_20.0 = 8_i8;
_21 = [_20.0,_20.0,_20.0,_20.0,_20.0,_20.0,_20.0];
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0)).1 = !_8.3;
_6.2.1 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).3 - _6.2.3;
_4 = !_8.5;
_17 = _6.1;
match _6.2.3 {
0 => bb9,
95 => bb11,
_ => bb10
}
}
bb9 = {
_5 = _9;
match _6.2.3 {
0 => bb4,
1 => bb5,
2 => bb6,
95 => bb8,
_ => bb7
}
}
bb10 = {
Return()
}
bb11 = {
_14 = 3483955681_u32 as i16;
_5 = _20.1;
_24.2.3 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).1;
_25.fld2.4 = _5;
_24.1 = _6.1;
_24.2.1 = _9 as u8;
_24.0 = _6.0;
_25.fld2.4 = _5;
SetDiscriminant(_11, 0);
place!(Field::<Adt48>(Variant(_11, 0), 0)).fld0 = -_6.0;
place!(Field::<[u128; 1]>(Variant(_11, 0), 2)) = [_20.2];
match _6.2.3 {
0 => bb12,
1 => bb13,
95 => bb15,
_ => bb14
}
}
bb12 = {
Return()
}
bb13 = {
_5 = _9;
match _6.2.3 {
0 => bb4,
1 => bb5,
2 => bb6,
95 => bb8,
_ => bb7
}
}
bb14 = {
_8.5 = !_4;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0)).5 = !_4;
_10 = _6.1;
_5 = _8.4;
_14 = _13 as i16;
_20.1 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).4;
_20.2 = 249782892411938141770320604217382287385_u128 ^ 313707068261243952978431616274112451794_u128;
_20 = (28_i8, Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).4, 96113262606105596479103217573460033408_u128);
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0)).5 = _1 | _8.5;
_1 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).5;
_21 = [_20.0,_20.0,_20.0,_20.0,_20.0,_20.0,_20.0];
_6.0 = _14 as f32;
_20.0 = 8_i8;
_21 = [_20.0,_20.0,_20.0,_20.0,_20.0,_20.0,_20.0];
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0)).1 = !_8.3;
_6.2.1 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).3 - _6.2.3;
_4 = !_8.5;
_17 = _6.1;
match _6.2.3 {
0 => bb9,
95 => bb11,
_ => bb10
}
}
bb15 = {
_6.2.0 = _8.0 << _8.1;
Call(place!(Field::<[i8; 7]>(Variant(_11, 0), 3)) = core::intrinsics::transmute(_21), bb16, UnwindUnreachable())
}
bb16 = {
_25.fld0 = !_1;
_25.fld2.2 = _7 + _6.2.2;
_24.2.5 = _6.2.5 > _8.5;
_6.1 = core::ptr::addr_of_mut!((*_10));
_6.1 = core::ptr::addr_of_mut!((*_17));
Call(_25.fld2.2 = fn11(_9, _6, _4, _20.2, _24.2.3, _20.2, _9, _25.fld0, _6.1, _6.2.4, _3, _6.2, _5, _6.2), bb17, UnwindUnreachable())
}
bb17 = {
_6.2.5 = _8.5;
_25.fld2.0 = !_6.2.0;
_24.2 = _6.2;
_25.fld7 = [_9,_6.2.4,_9];
_6.2.1 = _6.2.3;
(*_10) = (9223372036854775807_isize,);
_28 = [4525837260194642479580558905443961074_i128,95905581819738644295577929053470117297_i128];
_6 = _24;
_26 = _6.2.0 as f64;
match _6.2.3 {
0 => bb18,
95 => bb20,
_ => bb19
}
}
bb18 = {
Return()
}
bb19 = {
Return()
}
bb20 = {
_14 = !(-13725_i16);
_8.2 = _24.2.2;
_32 = (_20.0, _9, _20.2);
_25.fld2 = (_6.2.0, _24.2.3, _6.2.2, _8.3, _9, _13);
_24 = _6;
_14 = (-12420_i16);
_26 = _24.2.0 as f64;
_3 = _6.2.1;
(*_17) = ((-9223372036854775808_isize),);
(*_10) = ((-9223372036854775808_isize),);
_24.2.3 = (-145437010637213298643703767217144794454_i128) as u8;
_25.fld0 = _4 ^ _24.2.5;
_17 = _10;
_24.2.3 = _24.2.1;
_25.fld2.2 = -_6.0;
_6.2.5 = !_25.fld0;
_8.1 = _8.3;
_25.fld2.4 = _32.1;
place!(Field::<[i128; 2]>(Variant(_11, 0), 1)) = [(-89680992968133077557238781000332211092_i128),(-101108811409585457699083343144770887280_i128)];
_33 = 908660962075526831_u64;
Goto(bb21)
}
bb21 = {
_31 = core::ptr::addr_of_mut!((*_10));
_27 = _2;
(*_31) = ((-9223372036854775808_isize),);
_25.fld2.4 = _6.2.4;
_6.2.4 = _32.1;
_6.2.5 = _24.2.5;
_32.0 = _20.0 << _25.fld2.1;
(*_31).0 = 9223372036854775807_isize;
_22 = _25.fld2.2;
_25.fld5 = [_32.0,_32.0,_32.0,_32.0,_32.0,_32.0,_32.0];
_25.fld6 = 24681_u16 ^ 33423_u16;
_24.0 = -_22;
_17 = _6.1;
_25.fld2 = _6.2;
_25.fld2.1 = !_8.1;
_23 = Adt49 { fld0: _8.3 };
_20 = (_32.0, _5, _32.2);
_25.fld2.5 = _20.2 == _20.2;
_13 = !_1;
_8.3 = !_6.2.1;
SetDiscriminant(_11, 1);
match _32.2 {
0 => bb18,
1 => bb16,
2 => bb9,
3 => bb4,
4 => bb5,
5 => bb6,
6 => bb7,
96113262606105596479103217573460033408 => bb23,
_ => bb22
}
}
bb22 = {
Return()
}
bb23 = {
_24.2.2 = _22;
_27 = [_5,_25.fld2.4];
_17 = _6.1;
_8.1 = _25.fld6 as u8;
_34 = !_25.fld6;
_25.fld6 = _34 + _34;
_25.fld2.1 = _3 | _3;
_30 = [_24.2.4,_32.1];
_32 = (_20.0, _20.1, _20.2);
(*_17) = (9223372036854775807_isize,);
_24.2.4 = _9;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0)).2 = _6.2.2;
_14 = -20856_i16;
_8 = _24.2;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0)).5 = _25.fld2.5 ^ _8.5;
_8 = (_24.2.0, _3, _24.2.2, _25.fld2.1, _25.fld2.4, _4);
_37 = [_32.2];
(*_17) = ((-9223372036854775808_isize),);
_24.2.3 = _6.2.1 % _6.2.3;
_35 = _9;
_24.0 = _25.fld6 as f32;
_6.2.1 = !_24.2.1;
_8.1 = !_25.fld2.1;
_11 = Adt50::Variant1 { fld0: _24.2 };
_8.2 = _26 as f32;
Goto(bb24)
}
bb24 = {
_32.2 = _23.fld0 as u128;
_25.fld2.5 = _4;
_30 = [_8.4,_8.4];
_6.2.0 = -Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).0;
_32 = _20;
(*_17) = (9223372036854775807_isize,);
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0)).1 = (*_31).0 as u8;
_4 = _6.2.5;
_2 = [_6.2.4,_8.4];
_35 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).4;
_4 = !_6.2.5;
_25.fld2.2 = _8.2 * _22;
match _25.fld2.3 {
0 => bb1,
1 => bb12,
2 => bb9,
3 => bb23,
4 => bb5,
5 => bb22,
95 => bb25,
_ => bb15
}
}
bb25 = {
(*_10).0 = (-9223372036854775808_isize) + (-9223372036854775808_isize);
_25.fld5 = [_20.0,_20.0,_20.0,_32.0,_20.0,_32.0,_20.0];
_24.1 = core::ptr::addr_of_mut!((*_31));
(*_10).0 = !9223372036854775807_isize;
(*_31).0 = 3792793144_u32 as isize;
_8.2 = -_6.2.2;
_32 = (_20.0, _9, _20.2);
_24.2.0 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).0;
_5 = _20.1;
_20.1 = _25.fld2.4;
_13 = !_24.2.5;
_36 = [_13,_25.fld2.5,_4,_8.5,_4,_24.2.5,_4];
(*_17).0 = (-9223372036854775808_isize);
_25.fld2.4 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).4;
(*_10).0 = !9223372036854775807_isize;
_25.fld3 = Adt54::Variant3 { fld0: 1836757297_u32 };
_8.4 = _20.1;
_24.0 = -_6.0;
_5 = _20.1;
_25.fld2.2 = _7 + _24.2.2;
_6.0 = -_6.2.2;
_17 = _10;
SetDiscriminant(_11, 2);
Call((*_17).0 = fn12(_20, _24, _32.2, _20.1, _6.2.2, _24.2.4, _24, _9, _8.5, _23, _6.2.3, _20), bb26, UnwindUnreachable())
}
bb26 = {
_44 = Adt56::Variant0 { fld0: _32.2 };
_37 = [_32.2];
_10 = core::ptr::addr_of_mut!((*_10));
_25.fld0 = _6.2.5;
place!(Field::<*const *mut (isize,)>(Variant(_11, 2), 5)) = core::ptr::addr_of!(_24.1);
place!(Field::<[bool; 7]>(Variant(_11, 2), 1)) = _36;
_1 = !_8.5;
_25.fld1 = _24.2.4;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3)).0 = _20.0 as i32;
_3 = _8.1;
_6.2 = _8;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3)).2 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).0 as f32;
_10 = core::ptr::addr_of_mut!((*_17));
_38 = [_32.2];
_24 = (_6.0, _31, _25.fld2);
_6.2.1 = 13415374254402469824_usize as u8;
SetDiscriminant(_44, 2);
Goto(bb27)
}
bb27 = {
_8.0 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).0;
(*_10).0 = 2_isize ^ 9223372036854775807_isize;
(*_31) = ((-9223372036854775808_isize),);
_20.2 = !_32.2;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3)).5 = !_25.fld0;
_2 = _30;
Goto(bb28)
}
bb28 = {
place!(Field::<*const *mut (isize,)>(Variant(_11, 2), 5)) = core::ptr::addr_of!(_10);
Goto(bb29)
}
bb29 = {
_8.3 = _24.2.1;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_44, 2), 2)).2 = _24.2.2;
(*_10) = (9223372036854775807_isize,);
place!(Field::<(isize,)>(Variant(_44, 2), 3)).0 = _24.2.1 as isize;
_2 = [_5,_32.1];
_25.fld1 = _35;
place!(Field::<u32>(Variant(_25.fld3, 3), 0)) = _25.fld2.4 as u32;
_40 = Field::<(isize,)>(Variant(_44, 2), 3).0 * Field::<(isize,)>(Variant(_44, 2), 3).0;
_51 = _20.0 as i32;
_47 = _40 + _40;
_26 = Field::<(isize,)>(Variant(_44, 2), 3).0 as f64;
_16 = [_8.4,_20.1,_6.2.4,_20.1,_24.2.4];
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_44, 2), 2)).3 = _3 + _25.fld2.1;
_6.2.3 = 8852060834157544185_usize as u8;
(*_31) = (Field::<(isize,)>(Variant(_44, 2), 3).0,);
_28 = [(-108034159791401652129129475206152731575_i128),(-103766445073871858911711050684837462306_i128)];
_25.fld0 = _8.5;
Goto(bb30)
}
bb30 = {
_6 = (_8.2, _24.1, _24.2);
_51 = _8.0;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3)).3 = _24.2.1;
_6.2.4 = _5;
_20.2 = _32.2 - _32.2;
_25.fld2.5 = _8.5 ^ _4;
(*_10) = (_47,);
_41 = _25.fld2.3 as f32;
_13 = _8.3 <= Field::<(i32, u8, f32, u8, char, bool)>(Variant(_44, 2), 2).3;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3)).1 = !_8.3;
_9 = _25.fld2.4;
_8.5 = _13 | _25.fld2.5;
_25.fld2.1 = _3 >> _6.2.1;
_24 = (_6.0, _10, _8);
(*_17).0 = Field::<(isize,)>(Variant(_44, 2), 3).0 + _40;
_25.fld1 = _8.4;
match _25.fld2.3 {
0 => bb7,
1 => bb11,
2 => bb31,
95 => bb33,
_ => bb32
}
}
bb31 = {
_32.2 = _23.fld0 as u128;
_25.fld2.5 = _4;
_30 = [_8.4,_8.4];
_6.2.0 = -Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).0;
_32 = _20;
(*_17) = (9223372036854775807_isize,);
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0)).1 = (*_31).0 as u8;
_4 = _6.2.5;
_2 = [_6.2.4,_8.4];
_35 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).4;
_4 = !_6.2.5;
_25.fld2.2 = _8.2 * _22;
match _25.fld2.3 {
0 => bb1,
1 => bb12,
2 => bb9,
3 => bb23,
4 => bb5,
5 => bb22,
95 => bb25,
_ => bb15
}
}
bb32 = {
Return()
}
bb33 = {
_14 = 24333_i16 >> _3;
place!(Field::<[usize; 1]>(Variant(_11, 2), 4)) = [16275762224153437751_usize];
SetDiscriminant(_25.fld3, 3);
_8 = _6.2;
_52.1 = _8.4;
match _8.3 {
0 => bb7,
95 => bb35,
_ => bb34
}
}
bb34 = {
Return()
}
bb35 = {
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_44, 2), 2)) = (_25.fld2.0, _6.2.1, _6.2.2, _24.2.1, _24.2.4, _1);
_25.fld0 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).5;
place!(Field::<(isize,)>(Variant(_44, 2), 3)) = ((*_10).0,);
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3)) = _25.fld2;
_55.fld0 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_44, 2), 2).1 != _6.2.1;
place!(Field::<[usize; 1]>(Variant(_11, 2), 4)) = [5_usize];
_5 = _6.2.4;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3)).0 = -_51;
(*_17) = (_47,);
_5 = _9;
_22 = _6.0 * _24.2.2;
place!(Field::<isize>(Variant(_11, 2), 2)) = (*_31).0 & Field::<(isize,)>(Variant(_44, 2), 3).0;
_8.5 = !_4;
_24 = (_25.fld2.2, _31, Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3));
_23 = Adt49 { fld0: _6.2.3 };
(*_10).0 = _40 ^ _47;
Goto(bb36)
}
bb36 = {
_34 = _25.fld6;
Call(_58.fld2.1 = core::intrinsics::bswap(_3), bb37, UnwindUnreachable())
}
bb37 = {
_24.2.3 = !_25.fld2.1;
_8 = (_51, Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).3, _24.2.2, _25.fld2.3, _25.fld2.4, _25.fld2.5);
_20.2 = _25.fld6 as u128;
_54 = !_14;
_44 = Adt56::Variant0 { fld0: _32.2 };
_34 = _22 as u16;
_22 = -Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).2;
_52.0 = _32.0;
_56 = _34 + _34;
Call(_58.fld2.3 = fn13(_24.2.0, (*_10).0, (*_10), _6, _9, _26, _25.fld2.3, (*_10).0, _26, _24, Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).3, _6.2.3, _6.1), bb38, UnwindUnreachable())
}
bb38 = {
_52.1 = _5;
_58.fld0 = _24.2.5;
place!(Field::<isize>(Variant(_11, 2), 2)) = !(*_17).0;
_24.2.0 = -_51;
(*_31) = (Field::<isize>(Variant(_11, 2), 2),);
_25.fld1 = _9;
_58.fld2.0 = 12674552143816856183_usize as i32;
place!(Field::<u128>(Variant(_44, 0), 0)) = 8261854_u32 as u128;
_6.2.3 = _58.fld2.3 & _58.fld2.3;
_24.2.2 = -Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).2;
SetDiscriminant(_44, 1);
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3)).1 = _24.2.3 << _47;
_24.2.0 = 2656298210_u32 as i32;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3)) = (_51, _8.1, _24.0, _24.2.1, _20.1, _24.2.5);
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3)).0 = _6.2.0 ^ _25.fld2.0;
_35 = _25.fld2.4;
match _8.3 {
0 => bb39,
1 => bb40,
2 => bb41,
3 => bb42,
4 => bb43,
5 => bb44,
6 => bb45,
95 => bb47,
_ => bb46
}
}
bb39 = {
Return()
}
bb40 = {
Return()
}
bb41 = {
Return()
}
bb42 = {
(*_10).0 = (-9223372036854775808_isize) + (-9223372036854775808_isize);
_25.fld5 = [_20.0,_20.0,_20.0,_32.0,_20.0,_32.0,_20.0];
_24.1 = core::ptr::addr_of_mut!((*_31));
(*_10).0 = !9223372036854775807_isize;
(*_31).0 = 3792793144_u32 as isize;
_8.2 = -_6.2.2;
_32 = (_20.0, _9, _20.2);
_24.2.0 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).0;
_5 = _20.1;
_20.1 = _25.fld2.4;
_13 = !_24.2.5;
_36 = [_13,_25.fld2.5,_4,_8.5,_4,_24.2.5,_4];
(*_17).0 = (-9223372036854775808_isize);
_25.fld2.4 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).4;
(*_10).0 = !9223372036854775807_isize;
_25.fld3 = Adt54::Variant3 { fld0: 1836757297_u32 };
_8.4 = _20.1;
_24.0 = -_6.0;
_5 = _20.1;
_25.fld2.2 = _7 + _24.2.2;
_6.0 = -_6.2.2;
_17 = _10;
SetDiscriminant(_11, 2);
Call((*_17).0 = fn12(_20, _24, _32.2, _20.1, _6.2.2, _24.2.4, _24, _9, _8.5, _23, _6.2.3, _20), bb26, UnwindUnreachable())
}
bb43 = {
_14 = !(-13725_i16);
_8.2 = _24.2.2;
_32 = (_20.0, _9, _20.2);
_25.fld2 = (_6.2.0, _24.2.3, _6.2.2, _8.3, _9, _13);
_24 = _6;
_14 = (-12420_i16);
_26 = _24.2.0 as f64;
_3 = _6.2.1;
(*_17) = ((-9223372036854775808_isize),);
(*_10) = ((-9223372036854775808_isize),);
_24.2.3 = (-145437010637213298643703767217144794454_i128) as u8;
_25.fld0 = _4 ^ _24.2.5;
_17 = _10;
_24.2.3 = _24.2.1;
_25.fld2.2 = -_6.0;
_6.2.5 = !_25.fld0;
_8.1 = _8.3;
_25.fld2.4 = _32.1;
place!(Field::<[i128; 2]>(Variant(_11, 0), 1)) = [(-89680992968133077557238781000332211092_i128),(-101108811409585457699083343144770887280_i128)];
_33 = 908660962075526831_u64;
Goto(bb21)
}
bb44 = {
Return()
}
bb45 = {
_32.2 = _23.fld0 as u128;
_25.fld2.5 = _4;
_30 = [_8.4,_8.4];
_6.2.0 = -Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).0;
_32 = _20;
(*_17) = (9223372036854775807_isize,);
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0)).1 = (*_31).0 as u8;
_4 = _6.2.5;
_2 = [_6.2.4,_8.4];
_35 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).4;
_4 = !_6.2.5;
_25.fld2.2 = _8.2 * _22;
match _25.fld2.3 {
0 => bb1,
1 => bb12,
2 => bb9,
3 => bb23,
4 => bb5,
5 => bb22,
95 => bb25,
_ => bb15
}
}
bb46 = {
_5 = _9;
match _6.2.3 {
0 => bb4,
1 => bb5,
2 => bb6,
95 => bb8,
_ => bb7
}
}
bb47 = {
_61 = Adt50::Variant1 { fld0: _25.fld2 };
SetDiscriminant(_61, 3);
_6.1 = _31;
_52.0 = _32.0;
_55.fld2.4 = _5;
_55.fld2.1 = _3 / Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).1;
_55.fld2.1 = _6.2.1 >> _14;
(*_10).0 = !_47;
_5 = _55.fld2.4;
place!(Field::<f32>(Variant(_44, 1), 1)) = -_25.fld2.2;
_45 = 44489031867985190994296087067209379758_i128 as u8;
_55.fld1 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).4;
Goto(bb48)
}
bb48 = {
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3)).0 = _25.fld2.0;
Call(place!(Field::<u128>(Variant(_61, 3), 1)) = fn14(_32.2, (*_10), Field::<isize>(Variant(_11, 2), 2), Field::<isize>(Variant(_11, 2), 2), _6.2.4, _25.fld2.3, _6, _17, _25.fld1, Field::<*const *mut (isize,)>(Variant(_11, 2), 5), Field::<f32>(Variant(_44, 1), 1), _24.2, _24.1), bb49, UnwindUnreachable())
}
bb49 = {
_33 = 12760754091677289792_u64 * 6184568203627978251_u64;
_57 = core::ptr::addr_of!(_16);
_58.fld7 = [_5,_5,_32.1];
_54 = _14;
_8.5 = _47 != (*_10).0;
Goto(bb50)
}
bb50 = {
_52.2 = _32.2 % _32.2;
_6.1 = core::ptr::addr_of_mut!((*_17));
_24.2.1 = _23.fld0 % Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).1;
_68.2 = !_40;
_55.fld0 = !_8.5;
_6.2 = (_51, _25.fld2.1, _8.2, _24.2.1, _25.fld2.4, _4);
place!(Field::<Adt49>(Variant(_44, 1), 0)) = Adt49 { fld0: _6.2.1 };
_62 = _57;
_25.fld2.4 = _55.fld2.4;
place!(Field::<[isize; 2]>(Variant(_61, 3), 0)) = [(*_17).0,(*_10).0];
_66 = _51 - _25.fld2.0;
place!(Field::<[isize; 2]>(Variant(_61, 3), 0)) = [(*_31).0,(*_17).0];
_45 = _6.2.1;
match _25.fld2.3 {
0 => bb51,
1 => bb52,
2 => bb53,
3 => bb54,
4 => bb55,
95 => bb57,
_ => bb56
}
}
bb51 = {
Return()
}
bb52 = {
Return()
}
bb53 = {
_5 = _9;
match _6.2.3 {
0 => bb4,
1 => bb5,
2 => bb6,
95 => bb8,
_ => bb7
}
}
bb54 = {
_14 = !(-13725_i16);
_8.2 = _24.2.2;
_32 = (_20.0, _9, _20.2);
_25.fld2 = (_6.2.0, _24.2.3, _6.2.2, _8.3, _9, _13);
_24 = _6;
_14 = (-12420_i16);
_26 = _24.2.0 as f64;
_3 = _6.2.1;
(*_17) = ((-9223372036854775808_isize),);
(*_10) = ((-9223372036854775808_isize),);
_24.2.3 = (-145437010637213298643703767217144794454_i128) as u8;
_25.fld0 = _4 ^ _24.2.5;
_17 = _10;
_24.2.3 = _24.2.1;
_25.fld2.2 = -_6.0;
_6.2.5 = !_25.fld0;
_8.1 = _8.3;
_25.fld2.4 = _32.1;
place!(Field::<[i128; 2]>(Variant(_11, 0), 1)) = [(-89680992968133077557238781000332211092_i128),(-101108811409585457699083343144770887280_i128)];
_33 = 908660962075526831_u64;
Goto(bb21)
}
bb55 = {
Return()
}
bb56 = {
_32.2 = _23.fld0 as u128;
_25.fld2.5 = _4;
_30 = [_8.4,_8.4];
_6.2.0 = -Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).0;
_32 = _20;
(*_17) = (9223372036854775807_isize,);
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0)).1 = (*_31).0 as u8;
_4 = _6.2.5;
_2 = [_6.2.4,_8.4];
_35 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).4;
_4 = !_6.2.5;
_25.fld2.2 = _8.2 * _22;
match _25.fld2.3 {
0 => bb1,
1 => bb12,
2 => bb9,
3 => bb23,
4 => bb5,
5 => bb22,
95 => bb25,
_ => bb15
}
}
bb57 = {
_55.fld2.0 = _34 as i32;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3)).3 = _8.3;
SetDiscriminant(_61, 1);
_71 = _52;
_4 = !_13;
_53 = [_32.2];
_4 = !Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).5;
_13 = !_55.fld0;
_68.0 = [_52.2];
_58.fld7 = [_35,Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).4,_9];
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3)) = (_8.0, _45, _41, _8.1, _6.2.4, _24.2.5);
_32.1 = _6.2.4;
_4 = !_13;
_32.1 = _25.fld1;
_2 = [_32.1,_25.fld2.4];
_55.fld2.2 = _6.2.2;
_25.fld2.0 = !_6.2.0;
_55.fld1 = _32.1;
_58.fld7 = [_52.1,_25.fld1,_24.2.4];
_30 = [_6.2.4,_6.2.4];
_52.2 = _3 as u128;
match _8.1 {
0 => bb8,
1 => bb20,
2 => bb31,
3 => bb39,
4 => bb58,
95 => bb60,
_ => bb59
}
}
bb58 = {
_32.2 = _23.fld0 as u128;
_25.fld2.5 = _4;
_30 = [_8.4,_8.4];
_6.2.0 = -Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).0;
_32 = _20;
(*_17) = (9223372036854775807_isize,);
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0)).1 = (*_31).0 as u8;
_4 = _6.2.5;
_2 = [_6.2.4,_8.4];
_35 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).4;
_4 = !_6.2.5;
_25.fld2.2 = _8.2 * _22;
match _25.fld2.3 {
0 => bb1,
1 => bb12,
2 => bb9,
3 => bb23,
4 => bb5,
5 => bb22,
95 => bb25,
_ => bb15
}
}
bb59 = {
Return()
}
bb60 = {
SetDiscriminant(_44, 0);
_52.1 = _71.1;
_8.0 = !Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).0;
_58.fld2.0 = -Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).0;
(*_10) = (_68.2,);
_56 = _34 + _34;
_58.fld1 = _8.4;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_61, 1), 0)).5 = _55.fld0;
Goto(bb61)
}
bb61 = {
_58.fld2.4 = _32.1;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3)).5 = _8.3 > _45;
Goto(bb62)
}
bb62 = {
_25.fld5 = [_52.0,_32.0,_71.0,_32.0,_52.0,_52.0,_52.0];
_65 = -_24.0;
_24.0 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).2 + _41;
(*_57) = [_24.2.4,_25.fld1,_71.1,_6.2.4,_58.fld2.4];
_17 = core::ptr::addr_of_mut!(_64.1);
_6.2 = _8;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3)).0 = _34 as i32;
_55.fld2.1 = !_23.fld0;
_75.0 = core::ptr::addr_of_mut!(_37);
_52.0 = _32.0;
_6.2.5 = !_25.fld0;
match _32.2 {
0 => bb53,
1 => bb49,
2 => bb44,
3 => bb63,
96113262606105596479103217573460033408 => bb65,
_ => bb64
}
}
bb63 = {
_14 = 24333_i16 >> _3;
place!(Field::<[usize; 1]>(Variant(_11, 2), 4)) = [16275762224153437751_usize];
SetDiscriminant(_25.fld3, 3);
_8 = _6.2;
_52.1 = _8.4;
match _8.3 {
0 => bb7,
95 => bb35,
_ => bb34
}
}
bb64 = {
(*_10).0 = (-9223372036854775808_isize) + (-9223372036854775808_isize);
_25.fld5 = [_20.0,_20.0,_20.0,_32.0,_20.0,_32.0,_20.0];
_24.1 = core::ptr::addr_of_mut!((*_31));
(*_10).0 = !9223372036854775807_isize;
(*_31).0 = 3792793144_u32 as isize;
_8.2 = -_6.2.2;
_32 = (_20.0, _9, _20.2);
_24.2.0 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).0;
_5 = _20.1;
_20.1 = _25.fld2.4;
_13 = !_24.2.5;
_36 = [_13,_25.fld2.5,_4,_8.5,_4,_24.2.5,_4];
(*_17).0 = (-9223372036854775808_isize);
_25.fld2.4 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).4;
(*_10).0 = !9223372036854775807_isize;
_25.fld3 = Adt54::Variant3 { fld0: 1836757297_u32 };
_8.4 = _20.1;
_24.0 = -_6.0;
_5 = _20.1;
_25.fld2.2 = _7 + _24.2.2;
_6.0 = -_6.2.2;
_17 = _10;
SetDiscriminant(_11, 2);
Call((*_17).0 = fn12(_20, _24, _32.2, _20.1, _6.2.2, _24.2.4, _24, _9, _8.5, _23, _6.2.3, _20), bb26, UnwindUnreachable())
}
bb65 = {
_6.2.0 = _51 ^ _58.fld2.0;
_68.1.0 = -(*_10).0;
_77.0 = _32.0;
_8.0 = _26 as i32;
_64.1.0 = -_68.1.0;
_25.fld3 = Adt54::Variant3 { fld0: 721139323_u32 };
(*_31) = ((*_17).0,);
(*_57) = [_35,_71.1,_55.fld1,_32.1,_8.4];
_35 = _6.2.4;
_55.fld2 = _24.2;
_79.0.4 = _5;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3)).0 = _51 * _6.2.0;
place!(Field::<u128>(Variant(_11, 2), 6)) = _71.2;
(*_31) = _64.1;
_32.2 = !_52.2;
_76.2.1 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).3;
_72 = [_71.1,_79.0.4,_20.1];
_59 = Adt62::Variant0 { fld0: Field::<[usize; 1]>(Variant(_11, 2), 4),fld1: _23 };
_61 = Adt50::Variant1 { fld0: _8 };
_64 = (_68.0, (*_10), _40);
_32.1 = _35;
_42 = !2416848568_u32;
_71.1 = _20.1;
_25.fld2.0 = !_58.fld2.0;
match _23.fld0 {
0 => bb20,
1 => bb39,
2 => bb52,
3 => bb23,
4 => bb18,
5 => bb66,
6 => bb67,
95 => bb69,
_ => bb68
}
}
bb66 = {
_32.2 = _23.fld0 as u128;
_25.fld2.5 = _4;
_30 = [_8.4,_8.4];
_6.2.0 = -Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).0;
_32 = _20;
(*_17) = (9223372036854775807_isize,);
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0)).1 = (*_31).0 as u8;
_4 = _6.2.5;
_2 = [_6.2.4,_8.4];
_35 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).4;
_4 = !_6.2.5;
_25.fld2.2 = _8.2 * _22;
match _25.fld2.3 {
0 => bb1,
1 => bb12,
2 => bb9,
3 => bb23,
4 => bb5,
5 => bb22,
95 => bb25,
_ => bb15
}
}
bb67 = {
Return()
}
bb68 = {
_32.2 = _23.fld0 as u128;
_25.fld2.5 = _4;
_30 = [_8.4,_8.4];
_6.2.0 = -Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).0;
_32 = _20;
(*_17) = (9223372036854775807_isize,);
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0)).1 = (*_31).0 as u8;
_4 = _6.2.5;
_2 = [_6.2.4,_8.4];
_35 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).4;
_4 = !_6.2.5;
_25.fld2.2 = _8.2 * _22;
match _25.fld2.3 {
0 => bb1,
1 => bb12,
2 => bb9,
3 => bb23,
4 => bb5,
5 => bb22,
95 => bb25,
_ => bb15
}
}
bb69 = {
_25.fld0 = !_1;
_68 = _64;
_76.0 = _55.fld2.2 * Field::<(i32, u8, f32, u8, char, bool)>(Variant(_61, 1), 0).2;
_70 = _64.0;
_23.fld0 = _55.fld2.3;
SetDiscriminant(_61, 0);
_51 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).0;
_58.fld2.2 = _41;
match Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).3 {
0 => bb70,
1 => bb71,
95 => bb73,
_ => bb72
}
}
bb70 = {
_8.5 = !_4;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0)).5 = !_4;
_10 = _6.1;
_5 = _8.4;
_14 = _13 as i16;
_20.1 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).4;
_20.2 = 249782892411938141770320604217382287385_u128 ^ 313707068261243952978431616274112451794_u128;
_20 = (28_i8, Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).4, 96113262606105596479103217573460033408_u128);
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0)).5 = _1 | _8.5;
_1 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).5;
_21 = [_20.0,_20.0,_20.0,_20.0,_20.0,_20.0,_20.0];
_6.0 = _14 as f32;
_20.0 = 8_i8;
_21 = [_20.0,_20.0,_20.0,_20.0,_20.0,_20.0,_20.0];
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0)).1 = !_8.3;
_6.2.1 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).3 - _6.2.3;
_4 = !_8.5;
_17 = _6.1;
match _6.2.3 {
0 => bb9,
95 => bb11,
_ => bb10
}
}
bb71 = {
_5 = _9;
match _6.2.3 {
0 => bb4,
1 => bb5,
2 => bb6,
95 => bb8,
_ => bb7
}
}
bb72 = {
Return()
}
bb73 = {
_79.0.5 = _4;
_55.fld3 = Adt54::Variant3 { fld0: _42 };
(*_62) = [_24.2.4,_55.fld1,_79.0.4,_79.0.4,_58.fld2.4];
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3)) = _24.2;
_19 = core::ptr::addr_of_mut!(place!(Field::<u32>(Variant(_25.fld3, 3), 0)));
SetDiscriminant(_59, 1);
_39 = Move(_55.fld3);
_64 = _68;
_32.1 = _25.fld1;
match _8.3 {
0 => bb51,
1 => bb71,
2 => bb69,
95 => bb75,
_ => bb74
}
}
bb74 = {
_25.fld5 = [_52.0,_32.0,_71.0,_32.0,_52.0,_52.0,_52.0];
_65 = -_24.0;
_24.0 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).2 + _41;
(*_57) = [_24.2.4,_25.fld1,_71.1,_6.2.4,_58.fld2.4];
_17 = core::ptr::addr_of_mut!(_64.1);
_6.2 = _8;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3)).0 = _34 as i32;
_55.fld2.1 = !_23.fld0;
_75.0 = core::ptr::addr_of_mut!(_37);
_52.0 = _32.0;
_6.2.5 = !_25.fld0;
match _32.2 {
0 => bb53,
1 => bb49,
2 => bb44,
3 => bb63,
96113262606105596479103217573460033408 => bb65,
_ => bb64
}
}
bb75 = {
_76.2.2 = _6.0;
(*_19) = !_42;
_40 = _64.2 * (*_17).0;
_68.2 = Field::<isize>(Variant(_11, 2), 2);
_62 = core::ptr::addr_of!((*_62));
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3)).4 = _9;
_76.1 = core::ptr::addr_of_mut!(place!(Field::<(isize,)>(Variant(_59, 1), 5)));
_77.0 = _32.0 | _71.0;
(*_17) = (_40,);
_77.1 = _55.fld1;
place!(Field::<u32>(Variant(_25.fld3, 3), 0)) = !_42;
place!(Field::<u8>(Variant(_59, 1), 4)) = !_76.2.1;
SetDiscriminant(_25.fld3, 1);
_56 = _34;
match _76.2.1 {
0 => bb71,
1 => bb53,
2 => bb76,
3 => bb77,
95 => bb79,
_ => bb78
}
}
bb76 = {
_5 = _9;
match _6.2.3 {
0 => bb4,
1 => bb5,
2 => bb6,
95 => bb8,
_ => bb7
}
}
bb77 = {
_8.5 = !_4;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0)).5 = !_4;
_10 = _6.1;
_5 = _8.4;
_14 = _13 as i16;
_20.1 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).4;
_20.2 = 249782892411938141770320604217382287385_u128 ^ 313707068261243952978431616274112451794_u128;
_20 = (28_i8, Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).4, 96113262606105596479103217573460033408_u128);
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0)).5 = _1 | _8.5;
_1 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).5;
_21 = [_20.0,_20.0,_20.0,_20.0,_20.0,_20.0,_20.0];
_6.0 = _14 as f32;
_20.0 = 8_i8;
_21 = [_20.0,_20.0,_20.0,_20.0,_20.0,_20.0,_20.0];
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0)).1 = !_8.3;
_6.2.1 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).3 - _6.2.3;
_4 = !_8.5;
_17 = _6.1;
match _6.2.3 {
0 => bb9,
95 => bb11,
_ => bb10
}
}
bb78 = {
_32.2 = _23.fld0 as u128;
_25.fld2.5 = _4;
_30 = [_8.4,_8.4];
_6.2.0 = -Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).0;
_32 = _20;
(*_17) = (9223372036854775807_isize,);
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0)).1 = (*_31).0 as u8;
_4 = _6.2.5;
_2 = [_6.2.4,_8.4];
_35 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).4;
_4 = !_6.2.5;
_25.fld2.2 = _8.2 * _22;
match _25.fld2.3 {
0 => bb1,
1 => bb12,
2 => bb9,
3 => bb23,
4 => bb5,
5 => bb22,
95 => bb25,
_ => bb15
}
}
bb79 = {
_5 = _8.4;
_25.fld2.3 = _58.fld2.3 << (*_10).0;
_24.2 = _8;
_82 = (_51,);
_32.2 = _52.2 - _71.2;
_79.0.0 = _66;
match _8.3 {
0 => bb34,
1 => bb44,
2 => bb75,
3 => bb45,
95 => bb80,
_ => bb27
}
}
bb80 = {
_23.fld0 = !_25.fld2.1;
_55.fld2.0 = -_25.fld2.0;
_70 = [_52.2];
_55.fld2.1 = _25.fld2.3;
place!(Field::<((i32, u8, f32, u8, char, bool),)>(Variant(_25.fld3, 1), 0)) = (_24.2,);
_51 = _66 + _55.fld2.0;
_76 = (_25.fld2.2, _10, Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3));
_25.fld2.2 = -_55.fld2.2;
_43 = _20.0;
_25.fld7 = [_71.1,_79.0.4,_58.fld1];
_85 = _23;
_19 = core::ptr::addr_of_mut!(place!(Field::<u32>(Variant(_39, 3), 0)));
_72 = [_55.fld1,_6.2.4,_9];
_77.2 = !_52.2;
_58.fld2.1 = _24.2.3;
_71 = (_43, _76.2.4, _77.2);
place!(Field::<((i32, u8, f32, u8, char, bool),)>(Variant(_25.fld3, 1), 0)).0.0 = -_58.fld2.0;
_55.fld2 = (_24.2.0, Field::<((i32, u8, f32, u8, char, bool),)>(Variant(_25.fld3, 1), 0).0.1, _76.0, _76.2.1, Field::<((i32, u8, f32, u8, char, bool),)>(Variant(_25.fld3, 1), 0).0.4, _6.2.5);
_55.fld1 = _58.fld2.4;
_35 = _32.1;
_38 = [_32.2];
place!(Field::<((i32, u8, f32, u8, char, bool),)>(Variant(_25.fld3, 1), 0)).0.5 = _58.fld0;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_59, 1), 1)).4 = _76.2.4;
Goto(bb81)
}
bb81 = {
_25.fld2.2 = -_76.0;
place!(Field::<[i128; 2]>(Variant(_61, 0), 1)) = [89391735296838172752984323101631151165_i128,(-9560938183488795460110023099915563103_i128)];
Goto(bb82)
}
bb82 = {
(*_10) = (_64.2,);
_91 = Field::<[i128; 2]>(Variant(_61, 0), 1);
_14 = _54;
_76.0 = _8.2 * _55.fld2.2;
_88 = _25.fld2.4;
_76.2.5 = _52.1 < _20.1;
_82.0 = _79.0.0 >> _45;
_85 = Adt49 { fld0: _76.2.1 };
_53 = _68.0;
_23 = Adt49 { fld0: _45 };
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_59, 1), 1)) = (_79.0.0, Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).1, _7, _45, _24.2.4, _55.fld2.5);
_67 = _77.1;
_43 = _32.0;
_68.1 = (*_17);
_74 = _1;
_24.2.3 = _25.fld2.1 / _24.2.1;
place!(Field::<(isize,)>(Variant(_59, 1), 5)).0 = _47 ^ _47;
place!(Field::<u128>(Variant(_11, 2), 6)) = _52.2;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_59, 1), 1)).4 = _25.fld1;
_68.1.0 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_59, 1), 1).1 as isize;
place!(Field::<[i8; 7]>(Variant(_61, 0), 3)) = [_20.0,_43,_71.0,_52.0,_20.0,_32.0,_32.0];
Goto(bb83)
}
bb83 = {
_43 = _52.0 | _20.0;
_55.fld6 = !_25.fld6;
_7 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_59, 1), 1).0 as f32;
SetDiscriminant(_39, 3);
_58.fld7 = _25.fld7;
_8.5 = !Field::<(i32, u8, f32, u8, char, bool)>(Variant(_59, 1), 1).5;
place!(Field::<((i32, u8, f32, u8, char, bool),)>(Variant(_25.fld3, 1), 0)).0.3 = _34 as u8;
place!(Field::<bool>(Variant(_59, 1), 0)) = _13;
_58.fld7 = [_32.1,_76.2.4,_88];
_19 = core::ptr::addr_of_mut!(_46);
_55.fld1 = _35;
_71.2 = Field::<u128>(Variant(_11, 2), 6) << (*_10).0;
_25.fld2.2 = 16569912786210416457_usize as f32;
_20.2 = _32.2;
_55.fld7 = [_77.1,_8.4,_71.1];
_81 = -_7;
_79.0.3 = !Field::<(i32, u8, f32, u8, char, bool)>(Variant(_59, 1), 1).1;
_83 = _58.fld7;
match Field::<((i32, u8, f32, u8, char, bool),)>(Variant(_25.fld3, 1), 0).0.1 {
0 => bb10,
1 => bb23,
2 => bb71,
3 => bb84,
4 => bb85,
5 => bb86,
95 => bb88,
_ => bb87
}
}
bb84 = {
_14 = !(-13725_i16);
_8.2 = _24.2.2;
_32 = (_20.0, _9, _20.2);
_25.fld2 = (_6.2.0, _24.2.3, _6.2.2, _8.3, _9, _13);
_24 = _6;
_14 = (-12420_i16);
_26 = _24.2.0 as f64;
_3 = _6.2.1;
(*_17) = ((-9223372036854775808_isize),);
(*_10) = ((-9223372036854775808_isize),);
_24.2.3 = (-145437010637213298643703767217144794454_i128) as u8;
_25.fld0 = _4 ^ _24.2.5;
_17 = _10;
_24.2.3 = _24.2.1;
_25.fld2.2 = -_6.0;
_6.2.5 = !_25.fld0;
_8.1 = _8.3;
_25.fld2.4 = _32.1;
place!(Field::<[i128; 2]>(Variant(_11, 0), 1)) = [(-89680992968133077557238781000332211092_i128),(-101108811409585457699083343144770887280_i128)];
_33 = 908660962075526831_u64;
Goto(bb21)
}
bb85 = {
Return()
}
bb86 = {
Return()
}
bb87 = {
_61 = Adt50::Variant1 { fld0: _25.fld2 };
SetDiscriminant(_61, 3);
_6.1 = _31;
_52.0 = _32.0;
_55.fld2.4 = _5;
_55.fld2.1 = _3 / Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).1;
_55.fld2.1 = _6.2.1 >> _14;
(*_10).0 = !_47;
_5 = _55.fld2.4;
place!(Field::<f32>(Variant(_44, 1), 1)) = -_25.fld2.2;
_45 = 44489031867985190994296087067209379758_i128 as u8;
_55.fld1 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).4;
Goto(bb48)
}
bb88 = {
(*_31) = (Field::<isize>(Variant(_11, 2), 2),);
_25.fld0 = _7 <= Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).2;
_58.fld7 = [_5,_25.fld2.4,_58.fld1];
_6.2.3 = Field::<((i32, u8, f32, u8, char, bool),)>(Variant(_25.fld3, 1), 0).0.1;
_21 = [_43,_77.0,_43,_52.0,_32.0,_71.0,_77.0];
_25.fld0 = !_76.2.5;
_58.fld6 = _56;
match _8.3 {
0 => bb83,
1 => bb32,
2 => bb17,
3 => bb13,
4 => bb71,
95 => bb90,
_ => bb89
}
}
bb89 = {
_5 = _9;
match _6.2.3 {
0 => bb4,
1 => bb5,
2 => bb6,
95 => bb8,
_ => bb7
}
}
bb90 = {
_55.fld2.1 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_59, 1), 1).4 as u8;
_37 = [_52.2];
_65 = -Field::<(i32, u8, f32, u8, char, bool)>(Variant(_59, 1), 1).2;
_61 = Adt50::Variant2 { fld0: _75.0,fld1: _36,fld2: (*_31).0,fld3: _76.2,fld4: Field::<[usize; 1]>(Variant(_11, 2), 4),fld5: Field::<*const *mut (isize,)>(Variant(_11, 2), 5),fld6: _52.2 };
_75.1 = !_55.fld2.0;
(*_31) = (Field::<(isize,)>(Variant(_59, 1), 5).0,);
_32.2 = Field::<u128>(Variant(_61, 2), 6);
_58.fld6 = _34;
_58.fld2.1 = Field::<((i32, u8, f32, u8, char, bool),)>(Variant(_25.fld3, 1), 0).0.3 >> _79.0.3;
_24.2.3 = (-130677685660716654387177037684898384483_i128) as u8;
_82 = (_25.fld2.0,);
_31 = core::ptr::addr_of_mut!((*_17));
_91 = [98971583409214644938650740685083169814_i128,118963630170156897905368725380850849481_i128];
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3)).1 = _76.2.3 << Field::<(isize,)>(Variant(_59, 1), 5).0;
_102 = _64;
match _24.2.1 {
0 => bb63,
95 => bb91,
_ => bb39
}
}
bb91 = {
Goto(bb92)
}
bb92 = {
_95 = _8.1 as i32;
_53 = [_77.2];
_65 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_59, 1), 1).2 + _55.fld2.2;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3)).5 = !_55.fld2.5;
_93 = _28;
_76.2.1 = _14 as u8;
(*_17).0 = _64.2;
_71.0 = _77.0;
_79.0.4 = _25.fld2.4;
_76.2.2 = -_24.2.2;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_59, 1), 1)).0 = !_6.2.0;
_101.2 = (*_17).0 as u128;
(*_19) = _26 as u32;
(*_10) = ((*_17).0,);
SetDiscriminant(_61, 2);
_17 = _76.1;
_49 = _55.fld2.5;
_6.2.5 = !_79.0.5;
_68.1 = ((*_10).0,);
_27 = [_76.2.4,_20.1];
_81 = _24.2.2 - _24.2.2;
_76 = (_58.fld2.2, _31, _24.2);
_105 = Adt48 { fld0: _7 };
_55.fld5 = [_77.0,_77.0,_77.0,_52.0,_32.0,_43,_20.0];
_101.1 = _77.1;
_39 = Adt54::Variant1 { fld0: Field::<((i32, u8, f32, u8, char, bool),)>(Variant(_25.fld3, 1), 0),fld1: Field::<*const *mut (isize,)>(Variant(_11, 2), 5) };
match Field::<((i32, u8, f32, u8, char, bool),)>(Variant(_39, 1), 0).0.1 {
0 => bb9,
1 => bb60,
2 => bb28,
3 => bb69,
4 => bb68,
5 => bb11,
6 => bb70,
95 => bb93,
_ => bb54
}
}
bb93 = {
_85.fld0 = (*_19) as u8;
_101.0 = _9 as i8;
(*_57) = [_55.fld2.4,_55.fld1,Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).4,_32.1,_8.4];
_4 = _74 > _25.fld2.5;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3)).0 = _24.2.0;
_75.0 = core::ptr::addr_of_mut!(_70);
_25.fld3 = Move(_39);
place!(Field::<(isize,)>(Variant(_59, 1), 5)).0 = -_40;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_61, 2), 3)).0 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).0 | _24.2.0;
_71.0 = _43;
_71.2 = _58.fld6 as u128;
_58.fld2.1 = _25.fld2.1;
match _8.1 {
0 => bb33,
95 => bb94,
_ => bb72
}
}
bb94 = {
place!(Field::<((i32, u8, f32, u8, char, bool),)>(Variant(_25.fld3, 1), 0)).0.3 = _25.fld2.3;
(*_10).0 = (*_31).0 << _23.fld0;
_59 = Adt62::Variant0 { fld0: Field::<[usize; 1]>(Variant(_11, 2), 4),fld1: _23 };
_10 = _6.1;
_103.0.5 = !_55.fld0;
_58.fld2.4 = _35;
_32.0 = _76.0 as i8;
Goto(bb95)
}
bb95 = {
_19 = core::ptr::addr_of_mut!((*_19));
_68.2 = _32.0 as isize;
_77.0 = _32.0 >> _51;
_84 = _1;
_57 = _62;
_108 = [(*_10).0,(*_17).0];
_58.fld2.1 = !Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).1;
match _24.2.1 {
0 => bb92,
1 => bb23,
2 => bb16,
3 => bb44,
4 => bb46,
95 => bb96,
_ => bb90
}
}
bb96 = {
_53 = [_77.2];
_24.2.0 = _58.fld2.0;
_68.1 = (_64.1.0,);
_76.2.4 = _52.1;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3)).4 = _6.2.4;
_24.2.2 = 8678500612977401279_i64 as f32;
_19 = core::ptr::addr_of_mut!(_46);
_101.0 = -_20.0;
_71 = _77;
place!(Field::<u128>(Variant(_44, 0), 0)) = _26 as u128;
RET = Adt47::Variant1 { fld0: _108,fld1: _75.1,fld2: _68.0,fld3: _55.fld7,fld4: _55.fld2.1 };
_58.fld2 = Field::<((i32, u8, f32, u8, char, bool),)>(Variant(_25.fld3, 1), 0).0;
_50.fld0 = Adt47::Variant0 { fld0: _27,fld1: _75.0,fld2: Field::<[usize; 1]>(Variant(_11, 2), 4),fld3: _34,fld4: 1218349580108688092_i64,fld5: _75 };
_52 = _32;
_76.2.2 = -_6.2.2;
_23 = Adt49 { fld0: _3 };
SetDiscriminant(RET, 0);
place!(Field::<((i32, u8, f32, u8, char, bool),)>(Variant(_25.fld3, 1), 0)).0.2 = _22;
_32.1 = _79.0.4;
_50.fld0 = Adt47::Variant0 { fld0: _2,fld1: _75.0,fld2: Field::<[usize; 1]>(Variant(_59, 0), 0),fld3: _34,fld4: (-597170339341504106_i64),fld5: _75 };
match _6.2.3 {
0 => bb97,
1 => bb98,
95 => bb100,
_ => bb99
}
}
bb97 = {
Return()
}
bb98 = {
_23.fld0 = !_25.fld2.1;
_55.fld2.0 = -_25.fld2.0;
_70 = [_52.2];
_55.fld2.1 = _25.fld2.3;
place!(Field::<((i32, u8, f32, u8, char, bool),)>(Variant(_25.fld3, 1), 0)) = (_24.2,);
_51 = _66 + _55.fld2.0;
_76 = (_25.fld2.2, _10, Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3));
_25.fld2.2 = -_55.fld2.2;
_43 = _20.0;
_25.fld7 = [_71.1,_79.0.4,_58.fld1];
_85 = _23;
_19 = core::ptr::addr_of_mut!(place!(Field::<u32>(Variant(_39, 3), 0)));
_72 = [_55.fld1,_6.2.4,_9];
_77.2 = !_52.2;
_58.fld2.1 = _24.2.3;
_71 = (_43, _76.2.4, _77.2);
place!(Field::<((i32, u8, f32, u8, char, bool),)>(Variant(_25.fld3, 1), 0)).0.0 = -_58.fld2.0;
_55.fld2 = (_24.2.0, Field::<((i32, u8, f32, u8, char, bool),)>(Variant(_25.fld3, 1), 0).0.1, _76.0, _76.2.1, Field::<((i32, u8, f32, u8, char, bool),)>(Variant(_25.fld3, 1), 0).0.4, _6.2.5);
_55.fld1 = _58.fld2.4;
_35 = _32.1;
_38 = [_32.2];
place!(Field::<((i32, u8, f32, u8, char, bool),)>(Variant(_25.fld3, 1), 0)).0.5 = _58.fld0;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_59, 1), 1)).4 = _76.2.4;
Goto(bb81)
}
bb99 = {
_14 = !(-13725_i16);
_8.2 = _24.2.2;
_32 = (_20.0, _9, _20.2);
_25.fld2 = (_6.2.0, _24.2.3, _6.2.2, _8.3, _9, _13);
_24 = _6;
_14 = (-12420_i16);
_26 = _24.2.0 as f64;
_3 = _6.2.1;
(*_17) = ((-9223372036854775808_isize),);
(*_10) = ((-9223372036854775808_isize),);
_24.2.3 = (-145437010637213298643703767217144794454_i128) as u8;
_25.fld0 = _4 ^ _24.2.5;
_17 = _10;
_24.2.3 = _24.2.1;
_25.fld2.2 = -_6.0;
_6.2.5 = !_25.fld0;
_8.1 = _8.3;
_25.fld2.4 = _32.1;
place!(Field::<[i128; 2]>(Variant(_11, 0), 1)) = [(-89680992968133077557238781000332211092_i128),(-101108811409585457699083343144770887280_i128)];
_33 = 908660962075526831_u64;
Goto(bb21)
}
bb100 = {
(*_17).0 = _64.2 - Field::<isize>(Variant(_11, 2), 2);
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_61, 2), 3)).5 = !_8.5;
place!(Field::<[bool; 7]>(Variant(_11, 2), 1)) = [_1,_55.fld0,_49,_8.5,Field::<((i32, u8, f32, u8, char, bool),)>(Variant(_25.fld3, 1), 0).0.5,_103.0.5,_13];
_55.fld0 = !_84;
_24.2.1 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).1 | _76.2.1;
match Field::<((i32, u8, f32, u8, char, bool),)>(Variant(_25.fld3, 1), 0).0.1 {
95 => bb102,
_ => bb101
}
}
bb101 = {
Goto(bb92)
}
bb102 = {
_111.1.0 = _102.1.0;
_103.0 = (_25.fld2.0, Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).3, _6.2.2, _55.fld2.1, _25.fld2.4, _4);
_8.3 = _25.fld2.3 % _8.1;
_57 = _62;
_25.fld2 = (_76.2.0, _85.fld0, _81, Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).1, _32.1, _103.0.5);
match Field::<((i32, u8, f32, u8, char, bool),)>(Variant(_25.fld3, 1), 0).0.1 {
0 => bb26,
1 => bb82,
2 => bb103,
3 => bb104,
4 => bb105,
95 => bb107,
_ => bb106
}
}
bb103 = {
_31 = core::ptr::addr_of_mut!((*_10));
_27 = _2;
(*_31) = ((-9223372036854775808_isize),);
_25.fld2.4 = _6.2.4;
_6.2.4 = _32.1;
_6.2.5 = _24.2.5;
_32.0 = _20.0 << _25.fld2.1;
(*_31).0 = 9223372036854775807_isize;
_22 = _25.fld2.2;
_25.fld5 = [_32.0,_32.0,_32.0,_32.0,_32.0,_32.0,_32.0];
_25.fld6 = 24681_u16 ^ 33423_u16;
_24.0 = -_22;
_17 = _6.1;
_25.fld2 = _6.2;
_25.fld2.1 = !_8.1;
_23 = Adt49 { fld0: _8.3 };
_20 = (_32.0, _5, _32.2);
_25.fld2.5 = _20.2 == _20.2;
_13 = !_1;
_8.3 = !_6.2.1;
SetDiscriminant(_11, 1);
match _32.2 {
0 => bb18,
1 => bb16,
2 => bb9,
3 => bb4,
4 => bb5,
5 => bb6,
6 => bb7,
96113262606105596479103217573460033408 => bb23,
_ => bb22
}
}
bb104 = {
_76.2.2 = _6.0;
(*_19) = !_42;
_40 = _64.2 * (*_17).0;
_68.2 = Field::<isize>(Variant(_11, 2), 2);
_62 = core::ptr::addr_of!((*_62));
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3)).4 = _9;
_76.1 = core::ptr::addr_of_mut!(place!(Field::<(isize,)>(Variant(_59, 1), 5)));
_77.0 = _32.0 | _71.0;
(*_17) = (_40,);
_77.1 = _55.fld1;
place!(Field::<u32>(Variant(_25.fld3, 3), 0)) = !_42;
place!(Field::<u8>(Variant(_59, 1), 4)) = !_76.2.1;
SetDiscriminant(_25.fld3, 1);
_56 = _34;
match _76.2.1 {
0 => bb71,
1 => bb53,
2 => bb76,
3 => bb77,
95 => bb79,
_ => bb78
}
}
bb105 = {
_55.fld2.1 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_59, 1), 1).4 as u8;
_37 = [_52.2];
_65 = -Field::<(i32, u8, f32, u8, char, bool)>(Variant(_59, 1), 1).2;
_61 = Adt50::Variant2 { fld0: _75.0,fld1: _36,fld2: (*_31).0,fld3: _76.2,fld4: Field::<[usize; 1]>(Variant(_11, 2), 4),fld5: Field::<*const *mut (isize,)>(Variant(_11, 2), 5),fld6: _52.2 };
_75.1 = !_55.fld2.0;
(*_31) = (Field::<(isize,)>(Variant(_59, 1), 5).0,);
_32.2 = Field::<u128>(Variant(_61, 2), 6);
_58.fld6 = _34;
_58.fld2.1 = Field::<((i32, u8, f32, u8, char, bool),)>(Variant(_25.fld3, 1), 0).0.3 >> _79.0.3;
_24.2.3 = (-130677685660716654387177037684898384483_i128) as u8;
_82 = (_25.fld2.0,);
_31 = core::ptr::addr_of_mut!((*_17));
_91 = [98971583409214644938650740685083169814_i128,118963630170156897905368725380850849481_i128];
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3)).1 = _76.2.3 << Field::<(isize,)>(Variant(_59, 1), 5).0;
_102 = _64;
match _24.2.1 {
0 => bb63,
95 => bb91,
_ => bb39
}
}
bb106 = {
_32.2 = _23.fld0 as u128;
_25.fld2.5 = _4;
_30 = [_8.4,_8.4];
_6.2.0 = -Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).0;
_32 = _20;
(*_17) = (9223372036854775807_isize,);
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0)).1 = (*_31).0 as u8;
_4 = _6.2.5;
_2 = [_6.2.4,_8.4];
_35 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 1), 0).4;
_4 = !_6.2.5;
_25.fld2.2 = _8.2 * _22;
match _25.fld2.3 {
0 => bb1,
1 => bb12,
2 => bb9,
3 => bb23,
4 => bb5,
5 => bb22,
95 => bb25,
_ => bb15
}
}
bb107 = {
_19 = core::ptr::addr_of_mut!((*_19));
_113 = [_101.0,_43,_32.0,_77.0,_32.0,_77.0,_77.0];
place!(Field::<u128>(Variant(_61, 2), 6)) = !_101.2;
_40 = !_102.1.0;
_66 = -_58.fld2.0;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_61, 2), 3)).4 = _20.1;
_74 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_61, 2), 3).5 != Field::<(i32, u8, f32, u8, char, bool)>(Variant(_61, 2), 3).5;
_76.2.5 = _8.1 < _8.3;
_45 = !Field::<Adt49>(Variant(_59, 0), 1).fld0;
_104 = -_103.0.2;
_82.0 = _26 as i32;
place!(Field::<[char; 2]>(Variant(_50.fld0, 0), 0)) = [_103.0.4,_55.fld1];
_113 = [_32.0,_71.0,_77.0,_52.0,_101.0,_43,_77.0];
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3)) = (_82.0, _45, _105.fld0, _8.1, Field::<(i32, u8, f32, u8, char, bool)>(Variant(_61, 2), 3).4, _74);
_24.2.3 = Field::<((i32, u8, f32, u8, char, bool),)>(Variant(_25.fld3, 1), 0).0.3;
place!(Field::<u16>(Variant(RET, 0), 3)) = _55.fld2.5 as u16;
_55.fld3 = Move(_25.fld3);
_103.0.2 = -_104;
_6.0 = -_58.fld2.2;
_24.1 = core::ptr::addr_of_mut!((*_31));
_58.fld2.5 = _25.fld1 > _25.fld1;
_97 = _20.1 as isize;
(*_62) = [_25.fld2.4,_79.0.4,_35,_8.4,_58.fld2.4];
place!(Field::<[bool; 7]>(Variant(_11, 2), 1)) = _36;
_113 = [_52.0,_101.0,_20.0,_52.0,_71.0,_20.0,_20.0];
_58.fld1 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).4;
_102.2 = (*_10).0;
place!(Field::<u16>(Variant(_50.fld0, 0), 3)) = Field::<u16>(Variant(RET, 0), 3);
_101.1 = _55.fld1;
Goto(bb108)
}
bb108 = {
_25.fld5 = [_52.0,_43,_52.0,_71.0,_101.0,_43,_71.0];
SetDiscriminant(_59, 0);
_40 = _24.2.5 as isize;
Goto(bb109)
}
bb109 = {
SetDiscriminant(_44, 3);
place!(Field::<(*mut [u128; 1], i32)>(Variant(RET, 0), 5)).1 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_61, 2), 3).5 as i32;
_58.fld2 = _55.fld2;
place!(Field::<Adt49>(Variant(_59, 0), 1)).fld0 = _101.2 as u8;
_58.fld5 = [_52.0,_43,_77.0,_77.0,_43,_43,_43];
_79 = (_25.fld2,);
_119 = [(*_10).0,(*_10).0];
_58.fld0 = _49;
place!(Field::<i64>(Variant(_50.fld0, 0), 4)) = -(-2033410617373380110_i64);
_29 = Adt47::Variant1 { fld0: _119,fld1: Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).0,fld2: _53,fld3: _72,fld4: _8.1 };
(*_10) = (_40,);
RET = Move(_29);
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_61, 2), 3)) = (_95, Field::<Adt49>(Variant(_59, 0), 1).fld0, Field::<((i32, u8, f32, u8, char, bool),)>(Variant(_55.fld3, 1), 0).0.2, _8.3, _58.fld2.4, _25.fld0);
_6.0 = _79.0.2 - Field::<(i32, u8, f32, u8, char, bool)>(Variant(_61, 2), 3).2;
(*_10) = (Field::<isize>(Variant(_11, 2), 2),);
_25.fld0 = _6.2.5 & _49;
_58.fld2.3 = !_103.0.1;
_64 = (_68.0, _102.1, _68.2);
_54 = !_14;
_75.1 = -Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).0;
_101 = (_71.0, _71.1, Field::<u128>(Variant(_11, 2), 6));
_25.fld0 = _6.2.5 ^ _13;
_6.2.2 = -_76.0;
place!(Field::<[char; 3]>(Variant(RET, 1), 3)) = [_9,Field::<(i32, u8, f32, u8, char, bool)>(Variant(_61, 2), 3).4,_24.2.4];
place!(Field::<Adt49>(Variant(_59, 0), 1)) = Adt49 { fld0: Field::<(i32, u8, f32, u8, char, bool)>(Variant(_11, 2), 3).1 };
_67 = _103.0.4;
Goto(bb110)
}
bb110 = {
Call(_123 = dump_var(10_usize, 95_usize, Move(_95), 16_usize, Move(_16), 20_usize, Move(_20), 30_usize, Move(_30)), bb111, UnwindUnreachable())
}
bb111 = {
Call(_123 = dump_var(10_usize, 38_usize, Move(_38), 36_usize, Move(_36), 27_usize, Move(_27), 101_usize, Move(_101)), bb112, UnwindUnreachable())
}
bb112 = {
Call(_123 = dump_var(10_usize, 56_usize, Move(_56), 91_usize, Move(_91), 47_usize, Move(_47), 64_usize, Move(_64)), bb113, UnwindUnreachable())
}
bb113 = {
Call(_123 = dump_var(10_usize, 21_usize, Move(_21), 66_usize, Move(_66), 67_usize, Move(_67), 37_usize, Move(_37)), bb114, UnwindUnreachable())
}
bb114 = {
Call(_123 = dump_var(10_usize, 97_usize, Move(_97), 35_usize, Move(_35), 108_usize, Move(_108), 3_usize, Move(_3)), bb115, UnwindUnreachable())
}
bb115 = {
Call(_123 = dump_var(10_usize, 33_usize, Move(_33), 46_usize, Move(_46), 14_usize, Move(_14), 53_usize, Move(_53)), bb116, UnwindUnreachable())
}
bb116 = {
Call(_123 = dump_var(10_usize, 4_usize, Move(_4), 1_usize, Move(_1), 5_usize, Move(_5), 124_usize, _124), bb117, UnwindUnreachable())
}
bb117 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn11(mut _1: char,mut _2: (f32, *mut (isize,), (i32, u8, f32, u8, char, bool)),mut _3: bool,mut _4: u128,mut _5: u8,mut _6: u128,mut _7: char,mut _8: bool,mut _9: *mut (isize,),mut _10: char,mut _11: u8,mut _12: (i32, u8, f32, u8, char, bool),mut _13: char,mut _14: (i32, u8, f32, u8, char, bool)) -> f32 {
mir! {
type RET = f32;
let _15: (i32, u8, f32, u8, char, bool);
let _16: f32;
let _17: Adt48;
let _18: bool;
let _19: Adt49;
let _20: [char; 5];
let _21: i8;
let _22: ();
let _23: ();
{
_12.2 = -_2.0;
_12.1 = _12.3 + _2.2.3;
_12.1 = !_14.3;
_15.5 = !_2.2.5;
_10 = _13;
_15.5 = _2.2.1 == _14.1;
_15.5 = _8 & _14.5;
_14.4 = _1;
_15.0 = 2077548453099038393_usize as i32;
_18 = _14.5;
_4 = !_6;
RET = -_2.0;
_2.2.2 = RET * _2.0;
_15 = (_2.2.0, _14.3, _2.2.2, _2.2.3, _12.4, _18);
_12.2 = _15.2 + _2.2.2;
Goto(bb1)
}
bb1 = {
Call(_22 = dump_var(11_usize, 3_usize, Move(_3), 18_usize, Move(_18), 7_usize, Move(_7), 8_usize, Move(_8)), bb2, UnwindUnreachable())
}
bb2 = {
Call(_22 = dump_var(11_usize, 1_usize, Move(_1), 23_usize, _23, 23_usize, _23, 23_usize, _23), bb3, UnwindUnreachable())
}
bb3 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn12(mut _1: (i8, char, u128),mut _2: (f32, *mut (isize,), (i32, u8, f32, u8, char, bool)),mut _3: u128,mut _4: char,mut _5: f32,mut _6: char,mut _7: (f32, *mut (isize,), (i32, u8, f32, u8, char, bool)),mut _8: char,mut _9: bool,mut _10: Adt49,mut _11: u8,mut _12: (i8, char, u128)) -> isize {
mir! {
type RET = isize;
let _13: (i32,);
let _14: u8;
let _15: isize;
let _16: Adt52;
let _17: Adt59;
let _18: ();
let _19: ();
{
_8 = _4;
_2.2 = (_7.2.0, _10.fld0, _7.0, _7.2.3, _1.1, _7.2.5);
_2.1 = _7.1;
_2.2 = (_7.2.0, _7.2.1, _2.0, _11, _4, _7.2.5);
_5 = _7.0 * _2.2.2;
_2 = (_5, _7.1, _7.2);
Goto(bb1)
}
bb1 = {
_7.2.3 = _2.2.1 >> _1.0;
_7 = (_5, _2.1, _2.2);
_7.2.4 = _2.2.4;
_7.1 = _2.1;
_7.2.4 = _1.1;
_12.0 = _1.0 ^ _1.0;
_10 = Adt49 { fld0: _11 };
_10.fld0 = _1.2 as u8;
_1.2 = _7.2.0 as u128;
_8 = _2.2.4;
_2 = (_5, _7.1, _7.2);
_1.2 = _12.2 - _12.2;
_1 = (_12.0, _4, _3);
_3 = _12.2 >> _7.2.0;
_12.1 = _2.2.4;
_2 = (_7.0, _7.1, _7.2);
_2.2.5 = _7.2.5 ^ _7.2.5;
_12.2 = _3 ^ _1.2;
_2.2.5 = !_7.2.5;
_7.1 = _2.1;
match _11 {
0 => bb2,
95 => bb4,
_ => bb3
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
_3 = !_1.2;
RET = 9223372036854775807_isize;
_9 = _2.2.5 | _2.2.5;
_1.1 = _7.2.4;
_8 = _4;
_12.2 = !_1.2;
_11 = !_2.2.3;
_2.2.5 = !_7.2.5;
_2.0 = -_7.0;
_2 = (_5, _7.1, _7.2);
_12 = (_1.0, _8, _1.2);
_7.0 = -_2.0;
_13.0 = _7.2.0 ^ _2.2.0;
_1 = (_12.0, _12.1, _12.2);
_9 = _7.2.5;
_17.fld3.0 = -(-16407_i16);
_7.2.5 = _4 != _8;
_2 = (_7.2.2, _7.1, _7.2);
_2.2.0 = _13.0;
_17.fld3.6 = _7.2.2 != _2.0;
_17.fld0.fld0 = 4_usize as f32;
_17.fld3.4 = _8;
_12.1 = _8;
_2.0 = _2.2.2 + _7.0;
_2.2 = (_13.0, _11, _2.0, _11, _17.fld3.4, _17.fld3.6);
_14 = 365154010719848451_i64 as u8;
_17.fld3.1.1 = _2.2.0;
RET = (-9223372036854775808_isize) << _7.2.1;
_5 = _2.0 + _7.0;
Goto(bb5)
}
bb5 = {
Call(_18 = dump_var(12_usize, 9_usize, Move(_9), 1_usize, Move(_1), 14_usize, Move(_14), 8_usize, Move(_8)), bb6, UnwindUnreachable())
}
bb6 = {
Call(_18 = dump_var(12_usize, 6_usize, Move(_6), 19_usize, _19, 19_usize, _19, 19_usize, _19), bb7, UnwindUnreachable())
}
bb7 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn13(mut _1: i32,mut _2: isize,mut _3: (isize,),mut _4: (f32, *mut (isize,), (i32, u8, f32, u8, char, bool)),mut _5: char,mut _6: f64,mut _7: u8,mut _8: isize,mut _9: f64,mut _10: (f32, *mut (isize,), (i32, u8, f32, u8, char, bool)),mut _11: u8,mut _12: u8,mut _13: *mut (isize,)) -> u8 {
mir! {
type RET = u8;
let _14: Adt51;
let _15: u128;
let _16: Adt50;
let _17: char;
let _18: u8;
let _19: u64;
let _20: ();
let _21: ();
{
_10.2.2 = _4.2.2 * _10.0;
_12 = _11 % _11;
(*_13) = (_2,);
_6 = _9 - _9;
_13 = _10.1;
_4.2.3 = 20584_i16 as u8;
RET = !_7;
_4.2 = (_10.2.0, _12, _10.2.2, _10.2.3, _10.2.4, _10.2.5);
_3 = (*_13);
_10.1 = core::ptr::addr_of_mut!((*_13));
RET = _4.2.3 - _11;
(*_13).0 = _1 as isize;
_10.2 = _4.2;
(*_13).0 = _3.0;
_4.2.1 = _10.2.3;
_4.2.5 = _10.2.5;
_10.2.3 = !_11;
_4.2.0 = 326443518091960305787410531720021391877_u128 as i32;
_15 = 53135022769694136797304868248557829704_u128 + 289652672474076916121064444589581940787_u128;
_4.1 = core::ptr::addr_of_mut!(_3);
Goto(bb1)
}
bb1 = {
Call(_20 = dump_var(13_usize, 3_usize, Move(_3), 2_usize, Move(_2), 5_usize, Move(_5), 7_usize, Move(_7)), bb2, UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn14(mut _1: u128,mut _2: (isize,),mut _3: isize,mut _4: isize,mut _5: char,mut _6: u8,mut _7: (f32, *mut (isize,), (i32, u8, f32, u8, char, bool)),mut _8: *mut (isize,),mut _9: char,mut _10: *const *mut (isize,),mut _11: f32,mut _12: (i32, u8, f32, u8, char, bool),mut _13: *mut (isize,)) -> u128 {
mir! {
type RET = u128;
let _14: [char; 5];
let _15: Adt59;
let _16: f64;
let _17: Adt54;
let _18: u16;
let _19: Adt60;
let _20: i32;
let _21: *const *const *mut (isize,);
let _22: u64;
let _23: i16;
let _24: bool;
let _25: (i32, u8, f32, u8, char, bool);
let _26: f64;
let _27: usize;
let _28: (f32, i64);
let _29: [usize; 1];
let _30: [u128; 1];
let _31: ((i32, u8, f32, u8, char, bool),);
let _32: char;
let _33: Adt49;
let _34: u128;
let _35: usize;
let _36: i8;
let _37: char;
let _38: u64;
let _39: u64;
let _40: i128;
let _41: *mut (isize,);
let _42: u16;
let _43: (i32, u8, f32, u8, char, bool);
let _44: i64;
let _45: char;
let _46: Adt59;
let _47: [char; 2];
let _48: isize;
let _49: (i32, u8, f32, u8, char, bool);
let _50: Adt62;
let _51: isize;
let _52: i128;
let _53: u64;
let _54: Adt49;
let _55: usize;
let _56: (i32, u8, f32, u8, char, bool);
let _57: [char; 3];
let _58: *const [char; 5];
let _59: isize;
let _60: Adt47;
let _61: ([u128; 1], (isize,), isize);
let _62: [i8; 7];
let _63: f64;
let _64: [isize; 2];
let _65: char;
let _66: char;
let _67: *mut [u128; 1];
let _68: [usize; 1];
let _69: *mut u32;
let _70: ();
let _71: ();
{
_7.2.4 = _12.4;
RET = 31_i8 as u128;
(*_13).0 = _3;
_12.1 = _6 * _6;
_11 = _12.2;
(*_8).0 = _3 & _4;
_7.2.4 = _5;
_7.0 = -_12.2;
_4 = (*_8).0;
Goto(bb1)
}
bb1 = {
_7.1 = core::ptr::addr_of_mut!((*_13));
_6 = _12.5 as u8;
_12.2 = (-15278_i16) as f32;
_15.fld0.fld0 = _11;
(*_13) = (_3,);
_12.2 = _7.2.2 + _7.2.2;
_7.2.2 = _12.3 as f32;
_15.fld3.2 = _2.0 - (*_8).0;
(*_13).0 = -_2.0;
_12.1 = !_7.2.3;
_13 = _8;
(*_10) = core::ptr::addr_of_mut!(_2);
_15.fld3.1.1 = !_7.2.0;
_7 = (_15.fld0.fld0, (*_10), _12);
_10 = core::ptr::addr_of!((*_10));
_20 = _15.fld3.1.1;
_21 = core::ptr::addr_of!(_10);
_2.0 = _15.fld3.2;
_15.fld3.2 = _2.0;
Goto(bb2)
}
bb2 = {
_12.1 = 7340_i16 as u8;
_7.2 = (_15.fld3.1.1, _12.3, _7.0, _12.3, _12.4, _12.5);
_2.0 = (*_13).0;
_8 = _13;
_6 = 3_usize as u8;
(*_8) = (_4,);
Goto(bb3)
}
bb3 = {
(*_10) = core::ptr::addr_of_mut!((*_13));
(*_21) = core::ptr::addr_of!(_7.1);
_5 = _12.4;
_6 = _12.3;
_15.fld1 = _6 >> (*_13).0;
_13 = core::ptr::addr_of_mut!(_2);
Call(_12.1 = fn15(_8, (*_13).0, _7), bb4, UnwindUnreachable())
}
bb4 = {
_7 = (_12.2, _13, _12);
(*_13) = (*_8);
(*_21) = core::ptr::addr_of!((*_10));
_14 = [_7.2.4,_5,_12.4,_12.4,_9];
_11 = _15.fld0.fld0;
_5 = _9;
(*_8) = (*_13);
_3 = _15.fld3.2;
_1 = RET * RET;
_7 = (_11, _13, _12);
_6 = _15.fld1 >> _7.2.1;
(*_13) = (_4,);
(*_8) = (_4,);
(*_8).0 = !_4;
_25.3 = _7.2.1 | _7.2.3;
(*_13).0 = (*_8).0;
(*_13).0 = _15.fld3.2;
_25.3 = 11242060521362060581_usize as u8;
_18 = !59747_u16;
(*_8).0 = -(*_13).0;
_31.0.4 = _7.2.4;
_12.5 = _7.2.5;
_7.0 = _7.2.2;
_15.fld3.2 = -(*_13).0;
_19.fld0 = Adt50::Variant1 { fld0: _7.2 };
Call(_28.1 = core::intrinsics::bswap((-5069895165098246821_i64)), bb5, UnwindUnreachable())
}
bb5 = {
_24 = _7.2.5;
_26 = _2.0 as f64;
_25.4 = _5;
_18 = _26 as u16;
_24 = !_7.2.5;
_15.fld1 = _7.2.3;
_21 = core::ptr::addr_of!((*_21));
_33.fld0 = _3 as u8;
Goto(bb6)
}
bb6 = {
_33.fld0 = _15.fld1;
_27 = !2_usize;
Call(_15.fld1 = core::intrinsics::transmute(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_19.fld0, 1), 0).3), bb7, UnwindUnreachable())
}
bb7 = {
_25.2 = _7.0 + _7.2.2;
_13 = core::ptr::addr_of_mut!((*_8));
_8 = core::ptr::addr_of_mut!((*_8));
_34 = _1;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_19.fld0, 1), 0)).2 = -_11;
_28.0 = -_7.2.2;
Call((*_10) = fn16(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_19.fld0, 1), 0).2, _12.2, Move(_19.fld0), _15.fld0.fld0, (*_21), _7.2.4, _5, (*_13), (*_8).0, Move(_15.fld0), (*_8), _26), bb8, UnwindUnreachable())
}
bb8 = {
(*_13).0 = _4 | _15.fld3.2;
_4 = _7.2.1 as isize;
_15.fld3.5 = _27 & _27;
_6 = _15.fld1 * _7.2.1;
_3 = _4 - (*_13).0;
_7 = (_12.2, _13, _12);
_16 = _26 - _26;
_15.fld3.4 = _12.4;
_37 = _31.0.4;
_15.fld3.6 = !_12.5;
(*_8).0 = -_2.0;
_8 = core::ptr::addr_of_mut!((*_8));
_15.fld3.6 = _15.fld1 < _7.2.3;
_18 = 2882282556_u32 as u16;
_33.fld0 = _6 + _7.2.3;
Goto(bb9)
}
bb9 = {
_22 = 15267198237904617263_u64;
_6 = !_33.fld0;
_25 = _12;
_5 = _37;
_7.2.1 = _7.2.3 ^ _12.1;
_15.fld0.fld0 = _11;
_15.fld3.1.1 = -_20;
_38 = _22;
_15.fld3.4 = _12.4;
_15.fld4 = Adt50::Variant1 { fld0: _7.2 };
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_15.fld4, 1), 0)).5 = _12.5;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_15.fld4, 1), 0)).5 = _12.5;
(*_13) = _2;
_31.0.1 = (-28240_i16) as u8;
_43.2 = _12.2 - _25.2;
_14 = [_37,_7.2.4,_37,_5,_12.4];
_21 = core::ptr::addr_of!((*_21));
_31.0.3 = !_12.3;
_12.3 = _27 as u8;
(*_13).0 = _15.fld3.2 << _4;
_31.0.1 = _6;
SetDiscriminant(_15.fld4, 0);
_25.5 = _7.2.5;
_33.fld0 = _15.fld1;
Goto(bb10)
}
bb10 = {
_7.0 = _12.2;
_4 = 1702913935_u32 as isize;
(*_8) = (_15.fld3.2,);
Goto(bb11)
}
bb11 = {
_44 = (-5656971158369335053_i64) + 7715570002864960876_i64;
_43.4 = _7.2.4;
place!(Field::<[u128; 1]>(Variant(_15.fld4, 0), 2)) = [_1];
_46.fld3.1.0 = core::ptr::addr_of_mut!(place!(Field::<[u128; 1]>(Variant(_15.fld4, 0), 2)));
_49.5 = !_15.fld3.6;
Goto(bb12)
}
bb12 = {
_15.fld3.1.0 = _46.fld3.1.0;
(*_10) = core::ptr::addr_of_mut!((*_8));
_46.fld3.4 = _9;
_24 = _7.2.5;
_47 = [_43.4,_15.fld3.4];
_46.fld3.3 = core::ptr::addr_of!(_40);
_46.fld1 = _1 as u8;
_33.fld0 = 29_i8 as u8;
(*_10) = _8;
_15.fld0.fld0 = _28.0 - _7.2.2;
_49.3 = _38 as u8;
_49 = _12;
_49.1 = _7.2.1 * _12.1;
(*_21) = core::ptr::addr_of!(_13);
_46.fld3.1.1 = _15.fld3.1.1;
_46.fld3.6 = _7.2.5 | _49.5;
(*_13) = _2;
_56.0 = _15.fld3.1.1 ^ _15.fld3.1.1;
place!(Field::<Adt48>(Variant(_15.fld4, 0), 0)) = Adt48 { fld0: _7.0 };
_30 = [_34];
_31.0 = _7.2;
_59 = (*_13).0;
Goto(bb13)
}
bb13 = {
place!(Field::<[i8; 7]>(Variant(_15.fld4, 0), 3)) = [(-44_i8),(-33_i8),68_i8,7_i8,27_i8,(-24_i8),(-62_i8)];
(*_21) = core::ptr::addr_of!(_7.1);
(*_10) = core::ptr::addr_of_mut!((*_8));
_4 = (*_13).0;
_36 = 84_i8 << _15.fld1;
_4 = (*_8).0;
_31.0.3 = (*_8).0 as u8;
_46.fld4 = Adt50::Variant1 { fld0: _12 };
_43.0 = _22 as i32;
_7 = (_12.2, _13, _31.0);
_15.fld3.1.1 = _20;
_56.4 = _37;
_56 = (_46.fld3.1.1, Field::<(i32, u8, f32, u8, char, bool)>(Variant(_46.fld4, 1), 0).1, Field::<Adt48>(Variant(_15.fld4, 0), 0).fld0, _6, _12.4, _12.5);
SetDiscriminant(_46.fld4, 1);
_7.2.4 = _25.4;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_46.fld4, 1), 0)).5 = !_15.fld3.6;
_37 = _5;
_43.4 = _37;
_43.2 = _31.0.2;
_15.fld3.3 = core::ptr::addr_of!(_52);
_5 = _12.4;
_29 = [_27];
_56.0 = _16 as i32;
_13 = core::ptr::addr_of_mut!(_2);
Goto(bb14)
}
bb14 = {
_2.0 = -(*_8).0;
_41 = _13;
_45 = _25.4;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_46.fld4, 1), 0)) = _56;
_46.fld1 = !_31.0.3;
_56.5 = !_12.5;
(*_21) = core::ptr::addr_of!((*_10));
_26 = _22 as f64;
_2 = (*_8);
_28.1 = !_44;
_56.2 = _28.0 * _43.2;
_55 = _15.fld3.5 - _15.fld3.5;
_46.fld3.5 = !_15.fld3.5;
_54 = Adt49 { fld0: Field::<(i32, u8, f32, u8, char, bool)>(Variant(_46.fld4, 1), 0).1 };
_56.3 = _12.1 ^ _15.fld1;
_23 = (-13842_i16);
_44 = !_28.1;
_58 = core::ptr::addr_of!(_14);
_31.0 = _12;
_43.3 = _36 as u8;
_3 = (*_41).0 | (*_13).0;
Goto(bb15)
}
bb15 = {
Call(_70 = dump_var(14_usize, 20_usize, Move(_20), 9_usize, Move(_9), 1_usize, Move(_1), 22_usize, Move(_22)), bb16, UnwindUnreachable())
}
bb16 = {
Call(_70 = dump_var(14_usize, 2_usize, Move(_2), 23_usize, Move(_23), 44_usize, Move(_44), 55_usize, Move(_55)), bb17, UnwindUnreachable())
}
bb17 = {
Call(_70 = dump_var(14_usize, 4_usize, Move(_4), 18_usize, Move(_18), 29_usize, Move(_29), 45_usize, Move(_45)), bb18, UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn15(mut _1: *mut (isize,),mut _2: isize,mut _3: (f32, *mut (isize,), (i32, u8, f32, u8, char, bool))) -> u8 {
mir! {
type RET = u8;
let _4: *const *const *mut (isize,);
let _5: i8;
let _6: isize;
let _7: i64;
let _8: [isize; 2];
let _9: ();
let _10: ();
{
(*_1).0 = 78_i8 as isize;
Goto(bb1)
}
bb1 = {
_2 = (*_1).0;
RET = _3.2.1;
_3.1 = core::ptr::addr_of_mut!((*_1));
(*_1) = (_2,);
_3.0 = _3.2.2 + _3.2.2;
_3.2.1 = !RET;
_3.1 = _1;
(*_1).0 = _2 - _2;
_3.2.1 = RET | _3.2.3;
_2 = (*_1).0 + (*_1).0;
RET = _3.2.1;
(*_1) = (_2,);
(*_1) = (_2,);
_5 = (-29_i8);
(*_1) = (_2,);
_3.2.5 = true;
_3.2 = ((-681731704_i32), RET, _3.0, RET, '\u{322cd}', false);
_6 = 16477335654822122507_u64 as isize;
RET = _3.2.3 * _3.2.1;
(*_1).0 = _6 ^ _6;
(*_1) = (_2,);
RET = _3.2.3 & _3.2.1;
_2 = (*_1).0;
_3.2.0 = 629252657_i32;
_1 = core::ptr::addr_of_mut!((*_1));
Goto(bb2)
}
bb2 = {
Call(_9 = dump_var(15_usize, 6_usize, Move(_6), 10_usize, _10, 10_usize, _10, 10_usize, _10), bb3, UnwindUnreachable())
}
bb3 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn16(mut _1: f32,mut _2: f32,mut _3: Adt50,mut _4: f32,mut _5: *const *mut (isize,),mut _6: char,mut _7: char,mut _8: (isize,),mut _9: isize,mut _10: Adt48,mut _11: (isize,),mut _12: f64) -> *mut (isize,) {
mir! {
type RET = *mut (isize,);
let _13: (isize,);
let _14: i128;
let _15: i32;
let _16: ();
let _17: ();
{
SetDiscriminant(_3, 1);
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_3, 1), 0)).1 = 179_u8;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_3, 1), 0)).2 = -_4;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_3, 1), 0)).1 = 100_u8 << _11.0;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_3, 1), 0)) = ((-1510313879_i32), 136_u8, _2, 45_u8, _6, true);
_10.fld0 = _4;
_13.0 = _11.0;
_11 = _8;
_7 = _6;
_1 = -_2;
_1 = _2;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_3, 1), 0)).0 = !(-2108245672_i32);
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_3, 1), 0)).5 = !true;
RET = core::ptr::addr_of_mut!(_8);
_7 = _6;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_3, 1), 0)) = ((-684827873_i32), 18_u8, _1, 194_u8, _7, false);
(*RET).0 = _13.0 | _11.0;
_15 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_3, 1), 0).0 - Field::<(i32, u8, f32, u8, char, bool)>(Variant(_3, 1), 0).0;
_5 = core::ptr::addr_of!(RET);
_7 = Field::<(i32, u8, f32, u8, char, bool)>(Variant(_3, 1), 0).4;
Goto(bb1)
}
bb1 = {
Call(_16 = dump_var(16_usize, 13_usize, Move(_13), 8_usize, Move(_8), 9_usize, Move(_9), 17_usize, _17), bb2, UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn17(mut _1: [isize; 2],mut _2: u64,mut _3: bool,mut _4: *const i128,mut _5: char,mut _6: (*mut [u128; 1], i32),mut _7: f32) -> (f32, *mut (isize,), (i32, u8, f32, u8, char, bool)) {
mir! {
type RET = (f32, *mut (isize,), (i32, u8, f32, u8, char, bool));
let _8: i16;
let _9: [usize; 1];
let _10: *mut [u128; 1];
let _11: bool;
let _12: Adt59;
let _13: Adt55;
let _14: usize;
let _15: bool;
let _16: (i16, (*mut [u128; 1], i32), isize, *const i128, char, usize, bool);
let _17: f32;
let _18: Adt62;
let _19: char;
let _20: isize;
let _21: f32;
let _22: isize;
let _23: bool;
let _24: f32;
let _25: f32;
let _26: (i32,);
let _27: (i32,);
let _28: isize;
let _29: *const (i8, char, u128);
let _30: [u128; 1];
let _31: f32;
let _32: Adt52;
let _33: bool;
let _34: [usize; 1];
let _35: (usize, (isize,), *const (i32, u8, f32, u8, char, bool));
let _36: (i16, (*mut [u128; 1], i32), isize, *const i128, char, usize, bool);
let _37: isize;
let _38: *mut (isize,);
let _39: i16;
let _40: [i128; 2];
let _41: bool;
let _42: ();
let _43: ();
{
RET.2.4 = _5;
RET.2.1 = 236_u8;
_4 = core::ptr::addr_of!((*_4));
RET.2 = (_6.1, 66_u8, _7, 205_u8, _5, _3);
_3 = !RET.2.5;
_9 = [3951165616835947396_usize];
RET.0 = _7;
Goto(bb1)
}
bb1 = {
(*_4) = 3322517301244683153304889882607029667_i128 * (-70515345432201185824289171233176263642_i128);
_10 = _6.0;
_4 = core::ptr::addr_of!((*_4));
RET.0 = _7 * RET.2.2;
_3 = _2 < _2;
_10 = core::ptr::addr_of_mut!((*_10));
RET.2.5 = _3;
(*_4) = 26310_u16 as i128;
RET.2.3 = RET.2.1;
RET.0 = 102_isize as f32;
RET.2.4 = _5;
Goto(bb2)
}
bb2 = {
_10 = core::ptr::addr_of_mut!((*_10));
RET.2 = (_6.1, 191_u8, RET.0, 24_u8, _5, _3);
RET.2.0 = !_6.1;
_7 = -RET.0;
RET.2.4 = _5;
_12.fld3.1.1 = _6.1;
RET.0 = -RET.2.2;
_6.0 = _10;
_12.fld1 = RET.2.1;
_12.fld3.4 = _5;
(*_10) = [272539595562391578807323950841480105762_u128];
_2 = !17872928527538677601_u64;
_9 = [9313946934903961584_usize];
_12.fld3.2 = 9223372036854775807_isize;
_12.fld3.6 = _3;
_16.1.0 = core::ptr::addr_of_mut!((*_10));
_16.1 = _6;
_16.0 = -(-18908_i16);
_16.1 = (_10, _6.1);
_3 = RET.2.3 != RET.2.1;
_7 = RET.2.2;
match _12.fld1 {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
191 => bb8,
_ => bb7
}
}
bb3 = {
(*_4) = 3322517301244683153304889882607029667_i128 * (-70515345432201185824289171233176263642_i128);
_10 = _6.0;
_4 = core::ptr::addr_of!((*_4));
RET.0 = _7 * RET.2.2;
_3 = _2 < _2;
_10 = core::ptr::addr_of_mut!((*_10));
RET.2.5 = _3;
(*_4) = 26310_u16 as i128;
RET.2.3 = RET.2.1;
RET.0 = 102_isize as f32;
RET.2.4 = _5;
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_16 = ((-10130_i16), _6, _12.fld3.2, _4, _12.fld3.4, 12382713496456919169_usize, _12.fld3.6);
_8 = _16.0;
_4 = core::ptr::addr_of!((*_4));
_16.3 = core::ptr::addr_of!((*_4));
(*_4) = _16.4 as i128;
RET.2.3 = _2 as u8;
_12.fld3 = _16;
RET.2.2 = _12.fld3.5 as f32;
_12.fld3.1.0 = core::ptr::addr_of_mut!((*_10));
RET.2.3 = _16.4 as u8;
RET.2 = (_6.1, _12.fld1, _7, _12.fld1, _12.fld3.4, _3);
(*_10) = [145229965527602867383038683433964769734_u128];
RET.2.5 = _12.fld3.6;
RET.2.2 = -RET.0;
match _16.0 {
0 => bb6,
1 => bb2,
2 => bb9,
3 => bb10,
4 => bb11,
5 => bb12,
340282366920938463463374607431768201326 => bb14,
_ => bb13
}
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
_10 = core::ptr::addr_of_mut!((*_10));
RET.2 = (_6.1, 191_u8, RET.0, 24_u8, _5, _3);
RET.2.0 = !_6.1;
_7 = -RET.0;
RET.2.4 = _5;
_12.fld3.1.1 = _6.1;
RET.0 = -RET.2.2;
_6.0 = _10;
_12.fld1 = RET.2.1;
_12.fld3.4 = _5;
(*_10) = [272539595562391578807323950841480105762_u128];
_2 = !17872928527538677601_u64;
_9 = [9313946934903961584_usize];
_12.fld3.2 = 9223372036854775807_isize;
_12.fld3.6 = _3;
_16.1.0 = core::ptr::addr_of_mut!((*_10));
_16.1 = _6;
_16.0 = -(-18908_i16);
_16.1 = (_10, _6.1);
_3 = RET.2.3 != RET.2.1;
_7 = RET.2.2;
match _12.fld1 {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
191 => bb8,
_ => bb7
}
}
bb12 = {
(*_4) = 3322517301244683153304889882607029667_i128 * (-70515345432201185824289171233176263642_i128);
_10 = _6.0;
_4 = core::ptr::addr_of!((*_4));
RET.0 = _7 * RET.2.2;
_3 = _2 < _2;
_10 = core::ptr::addr_of_mut!((*_10));
RET.2.5 = _3;
(*_4) = 26310_u16 as i128;
RET.2.3 = RET.2.1;
RET.0 = 102_isize as f32;
RET.2.4 = _5;
Goto(bb2)
}
bb13 = {
(*_4) = 3322517301244683153304889882607029667_i128 * (-70515345432201185824289171233176263642_i128);
_10 = _6.0;
_4 = core::ptr::addr_of!((*_4));
RET.0 = _7 * RET.2.2;
_3 = _2 < _2;
_10 = core::ptr::addr_of_mut!((*_10));
RET.2.5 = _3;
(*_4) = 26310_u16 as i128;
RET.2.3 = RET.2.1;
RET.0 = 102_isize as f32;
RET.2.4 = _5;
Goto(bb2)
}
bb14 = {
_12.fld3.5 = _16.5;
_12.fld0 = Adt48 { fld0: RET.2.2 };
RET.2.0 = _6.1;
(*_4) = -51463469590501916287818103481397045284_i128;
_12.fld1 = RET.2.1;
RET.2.1 = 116801866496656885993343131292522124601_u128 as u8;
_16.2 = _12.fld3.2;
_4 = _16.3;
RET.2.1 = RET.2.3;
_16.2 = _12.fld3.2 & _12.fld3.2;
RET.2 = (_12.fld3.1.1, _12.fld1, _12.fld0.fld0, _12.fld1, _16.4, _12.fld3.6);
_16.5 = !_12.fld3.5;
RET.2.3 = RET.2.2 as u8;
RET.2.4 = _5;
match RET.2.1 {
0 => bb13,
191 => bb15,
_ => bb3
}
}
bb15 = {
RET.0 = _12.fld3.2 as f32;
_12.fld4 = Adt50::Variant3 { fld0: _1,fld1: 93603960805067963311828389657188839265_u128 };
_12.fld4 = Adt50::Variant1 { fld0: RET.2 };
SetDiscriminant(_12.fld4, 0);
_12.fld3.3 = core::ptr::addr_of!((*_4));
RET.2.0 = !_12.fld3.1.1;
place!(Field::<[u128; 1]>(Variant(_12.fld4, 0), 2)) = [212021846147842212291464135384189906824_u128];
_12.fld3.0 = !_16.0;
_16.0 = _8 * _12.fld3.0;
place!(Field::<Adt48>(Variant(_12.fld4, 0), 0)) = Adt48 { fld0: RET.0 };
place!(Field::<[i8; 7]>(Variant(_12.fld4, 0), 3)) = [52_i8,(-126_i8),(-17_i8),(-31_i8),(-25_i8),(-28_i8),(-123_i8)];
RET.2.3 = RET.2.1;
_10 = _12.fld3.1.0;
_4 = _12.fld3.3;
_10 = core::ptr::addr_of_mut!(place!(Field::<[u128; 1]>(Variant(_12.fld4, 0), 2)));
_14 = _12.fld3.5 + _16.5;
_16.3 = core::ptr::addr_of!((*_4));
_23 = !RET.2.5;
_15 = RET.2.2 >= RET.0;
_20 = -_16.2;
place!(Field::<[i128; 2]>(Variant(_12.fld4, 0), 1)) = [(*_4),(*_4)];
RET.2.1 = RET.2.3 & _12.fld1;
_11 = _3;
_6 = (_12.fld3.1.0, _16.1.1);
_12.fld3.2 = _20 - _20;
_6 = (_12.fld3.1.0, _16.1.1);
_12.fld3.5 = _16.4 as usize;
Goto(bb16)
}
bb16 = {
_3 = _11;
_23 = RET.2.1 != RET.2.1;
_10 = core::ptr::addr_of_mut!((*_10));
match _12.fld1 {
0 => bb3,
1 => bb7,
2 => bb17,
3 => bb18,
4 => bb19,
5 => bb20,
191 => bb22,
_ => bb21
}
}
bb17 = {
Return()
}
bb18 = {
_12.fld3.5 = _16.5;
_12.fld0 = Adt48 { fld0: RET.2.2 };
RET.2.0 = _6.1;
(*_4) = -51463469590501916287818103481397045284_i128;
_12.fld1 = RET.2.1;
RET.2.1 = 116801866496656885993343131292522124601_u128 as u8;
_16.2 = _12.fld3.2;
_4 = _16.3;
RET.2.1 = RET.2.3;
_16.2 = _12.fld3.2 & _12.fld3.2;
RET.2 = (_12.fld3.1.1, _12.fld1, _12.fld0.fld0, _12.fld1, _16.4, _12.fld3.6);
_16.5 = !_12.fld3.5;
RET.2.3 = RET.2.2 as u8;
RET.2.4 = _5;
match RET.2.1 {
0 => bb13,
191 => bb15,
_ => bb3
}
}
bb19 = {
Return()
}
bb20 = {
Return()
}
bb21 = {
(*_4) = 3322517301244683153304889882607029667_i128 * (-70515345432201185824289171233176263642_i128);
_10 = _6.0;
_4 = core::ptr::addr_of!((*_4));
RET.0 = _7 * RET.2.2;
_3 = _2 < _2;
_10 = core::ptr::addr_of_mut!((*_10));
RET.2.5 = _3;
(*_4) = 26310_u16 as i128;
RET.2.3 = RET.2.1;
RET.0 = 102_isize as f32;
RET.2.4 = _5;
Goto(bb2)
}
bb22 = {
RET.2.4 = _12.fld3.4;
SetDiscriminant(_12.fld4, 0);
_4 = core::ptr::addr_of!((*_4));
_12.fld4 = Adt50::Variant3 { fld0: _1,fld1: 323236842445419110994612418786842101079_u128 };
_16 = _12.fld3;
_24 = RET.2.2 + RET.2.2;
_16.1.0 = _6.0;
RET.0 = RET.2.2 * RET.2.2;
_26.0 = RET.2.0;
_6.0 = _16.1.0;
RET.0 = (*_4) as f32;
RET.2.2 = _24 + _24;
_12.fld3.2 = _16.2 | _16.2;
_27.0 = _26.0;
_15 = _16.6;
_27 = (RET.2.0,);
_11 = !RET.2.5;
RET.2.5 = !_23;
_12.fld3.5 = !_14;
match RET.2.3 {
0 => bb23,
1 => bb24,
2 => bb25,
191 => bb27,
_ => bb26
}
}
bb23 = {
(*_4) = 3322517301244683153304889882607029667_i128 * (-70515345432201185824289171233176263642_i128);
_10 = _6.0;
_4 = core::ptr::addr_of!((*_4));
RET.0 = _7 * RET.2.2;
_3 = _2 < _2;
_10 = core::ptr::addr_of_mut!((*_10));
RET.2.5 = _3;
(*_4) = 26310_u16 as i128;
RET.2.3 = RET.2.1;
RET.0 = 102_isize as f32;
RET.2.4 = _5;
Goto(bb2)
}
bb24 = {
(*_4) = 3322517301244683153304889882607029667_i128 * (-70515345432201185824289171233176263642_i128);
_10 = _6.0;
_4 = core::ptr::addr_of!((*_4));
RET.0 = _7 * RET.2.2;
_3 = _2 < _2;
_10 = core::ptr::addr_of_mut!((*_10));
RET.2.5 = _3;
(*_4) = 26310_u16 as i128;
RET.2.3 = RET.2.1;
RET.0 = 102_isize as f32;
RET.2.4 = _5;
Goto(bb2)
}
bb25 = {
Return()
}
bb26 = {
RET.0 = _12.fld3.2 as f32;
_12.fld4 = Adt50::Variant3 { fld0: _1,fld1: 93603960805067963311828389657188839265_u128 };
_12.fld4 = Adt50::Variant1 { fld0: RET.2 };
SetDiscriminant(_12.fld4, 0);
_12.fld3.3 = core::ptr::addr_of!((*_4));
RET.2.0 = !_12.fld3.1.1;
place!(Field::<[u128; 1]>(Variant(_12.fld4, 0), 2)) = [212021846147842212291464135384189906824_u128];
_12.fld3.0 = !_16.0;
_16.0 = _8 * _12.fld3.0;
place!(Field::<Adt48>(Variant(_12.fld4, 0), 0)) = Adt48 { fld0: RET.0 };
place!(Field::<[i8; 7]>(Variant(_12.fld4, 0), 3)) = [52_i8,(-126_i8),(-17_i8),(-31_i8),(-25_i8),(-28_i8),(-123_i8)];
RET.2.3 = RET.2.1;
_10 = _12.fld3.1.0;
_4 = _12.fld3.3;
_10 = core::ptr::addr_of_mut!(place!(Field::<[u128; 1]>(Variant(_12.fld4, 0), 2)));
_14 = _12.fld3.5 + _16.5;
_16.3 = core::ptr::addr_of!((*_4));
_23 = !RET.2.5;
_15 = RET.2.2 >= RET.0;
_20 = -_16.2;
place!(Field::<[i128; 2]>(Variant(_12.fld4, 0), 1)) = [(*_4),(*_4)];
RET.2.1 = RET.2.3 & _12.fld1;
_11 = _3;
_6 = (_12.fld3.1.0, _16.1.1);
_12.fld3.2 = _20 - _20;
_6 = (_12.fld3.1.0, _16.1.1);
_12.fld3.5 = _16.4 as usize;
Goto(bb16)
}
bb27 = {
_16.4 = _12.fld3.4;
_15 = !_23;
_31 = -RET.2.2;
RET.2.3 = RET.2.1 >> RET.2.1;
_33 = !_23;
_26 = _27;
_12.fld3.1.1 = _6.1;
RET.0 = _24;
_16.2 = -_12.fld3.2;
_30 = [189145958560619711537709090961642219896_u128];
RET.2.5 = _33;
RET.2.0 = -_12.fld3.1.1;
_3 = _33 & RET.2.5;
_7 = RET.0;
_16.1 = _12.fld3.1;
RET.2.1 = RET.2.3 % _12.fld1;
_28 = _2 as isize;
Goto(bb28)
}
bb28 = {
RET.2.2 = _31 * _31;
_16.6 = _3;
RET.2.2 = RET.0;
place!(Field::<u128>(Variant(_12.fld4, 3), 1)) = 191951160103600351532171188319386027771_u128 | 86820681298747973726946607419678026450_u128;
_35.2 = core::ptr::addr_of!(RET.2);
_15 = _23;
SetDiscriminant(_12.fld4, 0);
(*_4) = !55688170788817383651621802785945573915_i128;
_12.fld3.1.1 = !RET.2.0;
_26 = _27;
_25 = _24 * RET.0;
_22 = RET.2.0 as isize;
RET.2.1 = RET.2.3;
RET.0 = _16.2 as f32;
_12.fld1 = 99_i8 as u8;
place!(Field::<Adt48>(Variant(_12.fld4, 0), 0)) = Adt48 { fld0: _31 };
_35.1.0 = _12.fld3.2 * _16.2;
_28 = _35.1.0;
Goto(bb29)
}
bb29 = {
_17 = _25;
_16.4 = _5;
RET.2.5 = !_3;
_12.fld3 = (_16.0, _6, _35.1.0, _4, _16.4, _14, RET.2.5);
RET.1 = core::ptr::addr_of_mut!(_35.1);
_33 = _15;
_12.fld3.4 = RET.2.4;
_11 = _33 ^ _15;
_36.1.1 = RET.2.0 >> RET.2.3;
_12.fld3.2 = !_28;
RET.2.5 = _3 & _12.fld3.6;
_6 = _16.1;
_36 = (_8, _16.1, _28, _16.3, _16.4, _12.fld3.5, _23);
Goto(bb30)
}
bb30 = {
Call(_42 = dump_var(17_usize, 5_usize, Move(_5), 11_usize, Move(_11), 26_usize, Move(_26), 33_usize, Move(_33)), bb31, UnwindUnreachable())
}
bb31 = {
Call(_42 = dump_var(17_usize, 28_usize, Move(_28), 1_usize, Move(_1), 23_usize, Move(_23), 9_usize, Move(_9)), bb32, UnwindUnreachable())
}
bb32 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn18(mut _1: Adt50,mut _2: (i16, (*mut [u128; 1], i32), isize, *const i128, char, usize, bool),mut _3: (f32, *mut (isize,), (i32, u8, f32, u8, char, bool)),mut _4: u128,mut _5: isize,mut _6: u8,mut _7: isize) -> u8 {
mir! {
type RET = u8;
let _8: isize;
let _9: bool;
let _10: i8;
let _11: f64;
let _12: ();
let _13: ();
{
_2.4 = _3.2.4;
_2.6 = _3.2.5;
_6 = _3.2.1 >> _4;
_3.2.1 = 13765_u16 as u8;
_2.5 = 2_usize ^ 5676362478577839649_usize;
_2.6 = _5 > _7;
RET = _3.2.3 * _3.2.3;
_2.5 = 2186933536164037477_usize >> _6;
_3.2.5 = !_2.6;
_2.1.1 = _3.2.0;
SetDiscriminant(_1, 2);
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_1, 2), 3)).0 = _2.1.1 + _2.1.1;
place!(Field::<[usize; 1]>(Variant(_1, 2), 4)) = [_2.5];
RET = _6 + _6;
_3.2.2 = _3.0;
_3.2.5 = !_2.6;
_10 = 73_i8;
place!(Field::<(i32, u8, f32, u8, char, bool)>(Variant(_1, 2), 3)).1 = _6;
_9 = _2.6;
Goto(bb1)
}
bb1 = {
Call(_12 = dump_var(18_usize, 10_usize, Move(_10), 5_usize, Move(_5), 7_usize, Move(_7), 13_usize, _13), bb2, UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn19(mut _1: bool,mut _2: Adt48,mut _3: u8,mut _4: bool,mut _5: i32,mut _6: (i32, u8, f32, u8, char, bool),mut _7: (f32, *mut (isize,), (i32, u8, f32, u8, char, bool)),mut _8: (*mut [u128; 1], i32),mut _9: (i32, u8, f32, u8, char, bool),mut _10: Adt56,mut _11: (f32, *mut (isize,), (i32, u8, f32, u8, char, bool)),mut _12: bool) -> usize {
mir! {
type RET = usize;
let _13: Adt47;
let _14: Adt51;
let _15: Adt50;
let _16: (i32, i64, f32, u128, (f32, *mut (isize,), (i32, u8, f32, u8, char, bool)), (i32, u8, f32, u8, char, bool), (isize,));
let _17: (i32, u8, f32, u8, char, bool);
let _18: u16;
let _19: f32;
let _20: Adt62;
let _21: [char; 2];
let _22: [char; 2];
let _23: *const (i32, u8, f32, u8, char, bool);
let _24: [char; 2];
let _25: [i128; 2];
let _26: (i8, char, u128);
let _27: Adt60;
let _28: i64;
let _29: (i32, u8, f32, u8, char, bool);
let _30: isize;
let _31: f64;
let _32: char;
let _33: [i8; 7];
let _34: [char; 2];
let _35: u32;
let _36: (i32, u8, f32, u8, char, bool);
let _37: bool;
let _38: char;
let _39: f64;
let _40: Adt55;
let _41: isize;
let _42: [usize; 1];
let _43: [isize; 2];
let _44: [bool; 7];
let _45: [i8; 7];
let _46: Adt48;
let _47: u32;
let _48: char;
let _49: bool;
let _50: Adt54;
let _51: f64;
let _52: u8;
let _53: ();
let _54: ();
{
_11.2 = (_6.0, _3, _2.fld0, _9.1, _6.4, _4);
_7 = (_6.2, _11.1, _9);
_11.2.4 = _6.4;
_9.5 = !_12;
_7 = (_11.2.2, _11.1, _6);
SetDiscriminant(_10, 3);
_1 = _12;
_11.0 = -_6.2;
_6.0 = _5 << _11.2.0;
_1 = _7.2.2 < _7.0;
place!(Field::<i8>(Variant(_10, 3), 3)) = -(-111_i8);
_11.2 = _9;
place!(Field::<[i128; 2]>(Variant(_10, 3), 1)) = [101883064307299027506281210711930532072_i128,97947801586789275006881315556488388515_i128];
_11.0 = -_2.fld0;
_7.2.5 = _11.2.5 > _4;
_6 = _7.2;
_16.3 = 73765681362390322785837359044457641373_u128 + 211175425957924721806327428780873094839_u128;
Goto(bb1)
}
bb1 = {
_16.4.2.5 = _4;
_16.4.2.5 = _4;
_3 = _9.1;
_16.4.2.2 = 12470122318099293254316811676985097393_i128 as f32;
_16.5.4 = _9.4;
Goto(bb2)
}
bb2 = {
_16.4.2.5 = _9.5 | _7.2.5;
RET = !6494528205481612111_usize;
_2 = Adt48 { fld0: _7.0 };
_6.0 = _8.1 - _9.0;
_16.5.0 = -_11.2.0;
_9.1 = _11.2.1 >> _6.3;
_16.3 = 259003803739090580674906902393342202453_u128 - 196579545387950328903648100626670156492_u128;
_7.2.2 = 9223372036854775807_isize as f32;
_9.0 = -_6.0;
_11.2.0 = !_7.2.0;
_16.5.3 = _6.3 >> _16.5.0;
_17 = (_9.0, _6.3, _11.2.2, _9.1, _9.4, _4);
_22 = [_16.5.4,_7.2.4];
_16.5.5 = _4;
_1 = _16.5.5;
_16.4.2.4 = _6.4;
_16.4.2.4 = _6.4;
_9.3 = _16.5.3;
Goto(bb3)
}
bb3 = {
_16.5.0 = -_7.2.0;
_9.0 = -_8.1;
_16.4.2.0 = 8942171808434706463_i64 as i32;
_21 = [_16.4.2.4,_11.2.4];
_7 = (_9.2, _11.1, _11.2);
_16.5 = _11.2;
_16.5.3 = _17.3;
_6.2 = -_17.2;
_17.0 = (-31081_i16) as i32;
_28 = 868495676751764151_i64;
_16.4 = _11;
_25 = [21160309261599123828711184075767300383_i128,(-18881102895452341074184556934645856086_i128)];
_29 = (_16.4.2.0, _16.5.3, _11.2.2, _7.2.1, _16.5.4, _6.5);
_24 = [_16.5.4,_6.4];
_8.1 = _29.0 - _16.4.2.0;
_16.6 = (86_isize,);
_19 = -_16.5.2;
_26.2 = _16.3;
_9.2 = -_11.2.2;
place!(Field::<i8>(Variant(_10, 3), 3)) = !(-112_i8);
_4 = _11.2.5;
_26 = (Field::<i8>(Variant(_10, 3), 3), _11.2.4, _16.3);
_6.1 = 7022473103382457180_u64 as u8;
match _28 {
0 => bb1,
1 => bb2,
868495676751764151 => bb5,
_ => bb4
}
}
bb4 = {
_16.4.2.5 = _4;
_16.4.2.5 = _4;
_3 = _9.1;
_16.4.2.2 = 12470122318099293254316811676985097393_i128 as f32;
_16.5.4 = _9.4;
Goto(bb2)
}
bb5 = {
_17.5 = _1;
RET = 20837_u16 as usize;
_7.2.0 = _16.4.2.0;
_23 = core::ptr::addr_of!(_16.4.2);
(*_23) = (_16.5.0, _16.5.1, _7.2.2, _29.3, _26.1, _29.5);
_16.5.4 = (*_23).4;
_16.3 = RET as u128;
(*_23).3 = !_11.2.1;
_16.5.3 = !_29.1;
_16.4.2.3 = 5524911378411868332_u64 as u8;
_16.2 = _29.2;
_17.2 = _2.fld0;
(*_23).3 = _7.2.3 >> _17.3;
_8.1 = -_29.0;
_7.2.4 = _26.1;
_11.2 = (_16.4.2.0, _17.3, _16.5.2, _9.3, _16.4.2.4, _16.4.2.5);
(*_23).2 = _16.3 as f32;
_7 = (_9.2, _16.4.1, _11.2);
_11.2.0 = 17145647007779943527_u64 as i32;
_7.2.5 = !_6.5;
_30 = !_16.6.0;
(*_23).5 = _6.2 == _16.2;
(*_23).4 = _9.4;
Goto(bb6)
}
bb6 = {
_16.6.0 = 64115_u16 as isize;
_2.fld0 = _16.4.0;
_16.4.2.3 = _29.3 << _6.3;
_7 = (_11.0, _16.4.1, _9);
_11.2 = (_7.2.0, _17.3, _29.2, _9.1, _26.1, _4);
_36.2 = _29.2 + _16.5.2;
_16.4.2.0 = _5;
_9.1 = _11.2.1 - (*_23).1;
_11.2.0 = _5;
_39 = 3548397749_u32 as f64;
_32 = _17.4;
(*_23).0 = _39 as i32;
RET = 8821449220732972847_usize;
_7.2.4 = _11.2.4;
_16.1 = !_28;
_36.0 = _16.5.0 & _11.2.0;
_21 = [_16.5.4,_32];
_26.0 = (*_23).1 as i8;
_16.5.1 = _17.1;
_34 = [_29.4,_16.4.2.4];
_7.2.2 = _2.fld0;
match RET {
8821449220732972847 => bb8,
_ => bb7
}
}
bb7 = {
_17.5 = _1;
RET = 20837_u16 as usize;
_7.2.0 = _16.4.2.0;
_23 = core::ptr::addr_of!(_16.4.2);
(*_23) = (_16.5.0, _16.5.1, _7.2.2, _29.3, _26.1, _29.5);
_16.5.4 = (*_23).4;
_16.3 = RET as u128;
(*_23).3 = !_11.2.1;
_16.5.3 = !_29.1;
_16.4.2.3 = 5524911378411868332_u64 as u8;
_16.2 = _29.2;
_17.2 = _2.fld0;
(*_23).3 = _7.2.3 >> _17.3;
_8.1 = -_29.0;
_7.2.4 = _26.1;
_11.2 = (_16.4.2.0, _17.3, _16.5.2, _9.3, _16.4.2.4, _16.4.2.5);
(*_23).2 = _16.3 as f32;
_7 = (_9.2, _16.4.1, _11.2);
_11.2.0 = 17145647007779943527_u64 as i32;
_7.2.5 = !_6.5;
_30 = !_16.6.0;
(*_23).5 = _6.2 == _16.2;
(*_23).4 = _9.4;
Goto(bb6)
}
bb8 = {
_6.0 = _16.5.0 - _5;
_38 = _32;
_32 = _16.4.2.4;
_36.3 = !_16.5.1;
_6.5 = (*_23).5;
place!(Field::<[i128; 2]>(Variant(_10, 3), 1)) = [129199613019074116972607463465448956469_i128,(-37025363491550919637244967814079708954_i128)];
_31 = 22669_u16 as f64;
_9.2 = _11.0 + _36.2;
_26.2 = _16.3 ^ _16.3;
_30 = _16.6.0;
_24 = [_7.2.4,_16.4.2.4];
Goto(bb9)
}
bb9 = {
_16.4.2.0 = _16.5.0;
_36.4 = _32;
_38 = (*_23).4;
(*_23).2 = RET as f32;
_24 = _22;
(*_23).2 = 720864992_u32 as f32;
_16.4.2.4 = _6.4;
(*_23).1 = _3;
_35 = 994266216_u32 + 135914382_u32;
(*_23).5 = _11.2.1 == _29.1;
_43 = [_30,_16.6.0];
_19 = _2.fld0 - _2.fld0;
(*_23).3 = 27142_u16 as u8;
_7.1 = _16.4.1;
_45 = [_26.0,_26.0,_26.0,_26.0,_26.0,_26.0,_26.0];
(*_23).0 = _30 as i32;
_36.5 = _29.5 & _12;
_6.5 = !_7.2.5;
(*_23) = (_36.0, _7.2.3, _7.2.2, _36.3, _36.4, _7.2.5);
match RET {
0 => bb5,
1 => bb2,
2 => bb10,
3 => bb11,
4 => bb12,
5 => bb13,
6 => bb14,
8821449220732972847 => bb16,
_ => bb15
}
}
bb10 = {
_6.0 = _16.5.0 - _5;
_38 = _32;
_32 = _16.4.2.4;
_36.3 = !_16.5.1;
_6.5 = (*_23).5;
place!(Field::<[i128; 2]>(Variant(_10, 3), 1)) = [129199613019074116972607463465448956469_i128,(-37025363491550919637244967814079708954_i128)];
_31 = 22669_u16 as f64;
_9.2 = _11.0 + _36.2;
_26.2 = _16.3 ^ _16.3;
_30 = _16.6.0;
_24 = [_7.2.4,_16.4.2.4];
Goto(bb9)
}
bb11 = {
_17.5 = _1;
RET = 20837_u16 as usize;
_7.2.0 = _16.4.2.0;
_23 = core::ptr::addr_of!(_16.4.2);
(*_23) = (_16.5.0, _16.5.1, _7.2.2, _29.3, _26.1, _29.5);
_16.5.4 = (*_23).4;
_16.3 = RET as u128;
(*_23).3 = !_11.2.1;
_16.5.3 = !_29.1;
_16.4.2.3 = 5524911378411868332_u64 as u8;
_16.2 = _29.2;
_17.2 = _2.fld0;
(*_23).3 = _7.2.3 >> _17.3;
_8.1 = -_29.0;
_7.2.4 = _26.1;
_11.2 = (_16.4.2.0, _17.3, _16.5.2, _9.3, _16.4.2.4, _16.4.2.5);
(*_23).2 = _16.3 as f32;
_7 = (_9.2, _16.4.1, _11.2);
_11.2.0 = 17145647007779943527_u64 as i32;
_7.2.5 = !_6.5;
_30 = !_16.6.0;
(*_23).5 = _6.2 == _16.2;
(*_23).4 = _9.4;
Goto(bb6)
}
bb12 = {
_16.4.2.5 = _4;
_16.4.2.5 = _4;
_3 = _9.1;
_16.4.2.2 = 12470122318099293254316811676985097393_i128 as f32;
_16.5.4 = _9.4;
Goto(bb2)
}
bb13 = {
_17.5 = _1;
RET = 20837_u16 as usize;
_7.2.0 = _16.4.2.0;
_23 = core::ptr::addr_of!(_16.4.2);
(*_23) = (_16.5.0, _16.5.1, _7.2.2, _29.3, _26.1, _29.5);
_16.5.4 = (*_23).4;
_16.3 = RET as u128;
(*_23).3 = !_11.2.1;
_16.5.3 = !_29.1;
_16.4.2.3 = 5524911378411868332_u64 as u8;
_16.2 = _29.2;
_17.2 = _2.fld0;
(*_23).3 = _7.2.3 >> _17.3;
_8.1 = -_29.0;
_7.2.4 = _26.1;
_11.2 = (_16.4.2.0, _17.3, _16.5.2, _9.3, _16.4.2.4, _16.4.2.5);
(*_23).2 = _16.3 as f32;
_7 = (_9.2, _16.4.1, _11.2);
_11.2.0 = 17145647007779943527_u64 as i32;
_7.2.5 = !_6.5;
_30 = !_16.6.0;
(*_23).5 = _6.2 == _16.2;
(*_23).4 = _9.4;
Goto(bb6)
}
bb14 = {
_16.4.2.5 = _4;
_16.4.2.5 = _4;
_3 = _9.1;
_16.4.2.2 = 12470122318099293254316811676985097393_i128 as f32;
_16.5.4 = _9.4;
Goto(bb2)
}
bb15 = {
_16.5.0 = -_7.2.0;
_9.0 = -_8.1;
_16.4.2.0 = 8942171808434706463_i64 as i32;
_21 = [_16.4.2.4,_11.2.4];
_7 = (_9.2, _11.1, _11.2);
_16.5 = _11.2;
_16.5.3 = _17.3;
_6.2 = -_17.2;
_17.0 = (-31081_i16) as i32;
_28 = 868495676751764151_i64;
_16.4 = _11;
_25 = [21160309261599123828711184075767300383_i128,(-18881102895452341074184556934645856086_i128)];
_29 = (_16.4.2.0, _16.5.3, _11.2.2, _7.2.1, _16.5.4, _6.5);
_24 = [_16.5.4,_6.4];
_8.1 = _29.0 - _16.4.2.0;
_16.6 = (86_isize,);
_19 = -_16.5.2;
_26.2 = _16.3;
_9.2 = -_11.2.2;
place!(Field::<i8>(Variant(_10, 3), 3)) = !(-112_i8);
_4 = _11.2.5;
_26 = (Field::<i8>(Variant(_10, 3), 3), _11.2.4, _16.3);
_6.1 = 7022473103382457180_u64 as u8;
match _28 {
0 => bb1,
1 => bb2,
868495676751764151 => bb5,
_ => bb4
}
}
bb16 = {
_42 = [RET];
(*_23) = (_8.1, _29.3, _6.2, _16.5.1, _29.4, _17.5);
_11.2 = ((*_23).0, (*_23).1, _9.2, _16.4.2.1, _16.5.4, _12);
_45 = [_26.0,_26.0,_26.0,_26.0,_26.0,_26.0,_26.0];
_5 = _16.6.0 as i32;
_39 = _28 as f64;
_37 = !_17.5;
_40.fld0 = Adt47::Variant0 { fld0: _34,fld1: _8.0,fld2: _42,fld3: 7484_u16,fld4: _28,fld5: _8 };
_7.2.3 = (*_23).3;
_41 = _30 | _30;
_16.0 = _16.4.2.0;
_36.1 = _35 as u8;
_46 = Adt48 { fld0: _2.fld0 };
place!(Field::<(*mut [u128; 1], i32)>(Variant(_40.fld0, 0), 5)) = (_8.0, _8.1);
(*_23).2 = -_19;
_7.2.2 = -_6.2;
_38 = (*_23).4;
place!(Field::<i64>(Variant(_40.fld0, 0), 4)) = _16.1;
_16.5.1 = _17.1;
(*_23) = (_11.2.0, _16.5.3, _46.fld0, _6.3, _32, _17.5);
_42 = [RET];
_36 = (_6.0, _16.4.2.1, _7.2.2, _16.4.2.1, (*_23).4, _16.5.5);
_6.3 = Field::<i64>(Variant(_40.fld0, 0), 4) as u8;
_42 = [RET];
_7.2.5 = (*_23).5;
place!(Field::<[usize; 1]>(Variant(_40.fld0, 0), 2)) = [RET];
Goto(bb17)
}
bb17 = {
Call(_53 = dump_var(19_usize, 25_usize, Move(_25), 45_usize, Move(_45), 5_usize, Move(_5), 42_usize, Move(_42)), bb18, UnwindUnreachable())
}
bb18 = {
Call(_53 = dump_var(19_usize, 30_usize, Move(_30), 21_usize, Move(_21), 24_usize, Move(_24), 41_usize, Move(_41)), bb19, UnwindUnreachable())
}
bb19 = {
Call(_53 = dump_var(19_usize, 38_usize, Move(_38), 1_usize, Move(_1), 54_usize, _54, 54_usize, _54), bb20, UnwindUnreachable())
}
bb20 = {
Return()
}

}
}
pub fn main() {
                fn0(std::hint::black_box(true), std::hint::black_box('\u{b7103}'), std::hint::black_box((-41_isize)), std::hint::black_box((-7_i8)), std::hint::black_box(12969_i16), std::hint::black_box((-291917867_i32)), std::hint::black_box((-738310721182951012_i64)), std::hint::black_box(158434305955711551108454197037532281995_i128), std::hint::black_box(0_usize), std::hint::black_box(42_u8), std::hint::black_box(22688_u16), std::hint::black_box(5219523901032206783481810451296579549_u128));
                
            }
#[derive(Debug)]
pub enum Adt47 {
Variant0{
fld0: [char; 2],
fld1: *mut [u128; 1],
fld2: [usize; 1],
fld3: u16,
fld4: i64,
fld5: (*mut [u128; 1], i32),

},
Variant1{
fld0: [isize; 2],
fld1: i32,
fld2: [u128; 1],
fld3: [char; 3],
fld4: u8,

}}
#[derive(Debug)]
pub struct Adt48 {
fld0: f32,
}
#[derive(Debug,Copy,Clone)]
pub struct Adt49 {
fld0: u8,
}
#[derive(Debug)]
pub enum Adt50 {
Variant0{
fld0: Adt48,
fld1: [i128; 2],
fld2: [u128; 1],
fld3: [i8; 7],

},
Variant1{
fld0: (i32, u8, f32, u8, char, bool),

},
Variant2{
fld0: *mut [u128; 1],
fld1: [bool; 7],
fld2: isize,
fld3: (i32, u8, f32, u8, char, bool),
fld4: [usize; 1],
fld5: *const *mut (isize,),
fld6: u128,

},
Variant3{
fld0: [isize; 2],
fld1: u128,

}}
#[derive(Debug,Copy,Clone)]
pub enum Adt51 {
Variant0{
fld0: (isize,),
fld1: (i32,),
fld2: *const (i32, u8, f32, u8, char, bool),
fld3: [char; 2],
fld4: i64,

},
Variant1{
fld0: *mut u32,
fld1: (f32, i64),
fld2: *mut [u128; 1],

},
Variant2{
fld0: i128,
fld1: usize,
fld2: f64,
fld3: (usize, (isize,), *const (i32, u8, f32, u8, char, bool)),
fld4: i16,
fld5: (i8, char, u128),
fld6: *mut (isize,),

}}
#[derive(Debug)]
pub enum Adt52 {
Variant0{
fld0: ([u128; 1], (isize,), isize),
fld1: *mut u32,
fld2: [char; 5],
fld3: (usize, (isize,), *const (i32, u8, f32, u8, char, bool)),
fld4: *const (i8, char, u128),
fld5: [i8; 7],

},
Variant1{
fld0: (i32, u8, f32, u8, char, bool),
fld1: u8,
fld2: *const [char; 5],
fld3: i8,
fld4: Adt48,

},
Variant2{
fld0: u32,
fld1: Adt47,
fld2: *const (i32, u8, f32, u8, char, bool),
fld3: (i32,),

}}
#[derive(Debug,Copy,Clone)]
pub enum Adt53 {
Variant0{
fld0: f64,
fld1: *const *mut (isize,),
fld2: [char; 2],
fld3: (isize,),
fld4: [char; 5],
fld5: [i128; 2],

},
Variant1{
fld0: *const *mut (isize,),
fld1: (f32, i64),
fld2: isize,
fld3: [char; 3],
fld4: i16,

},
Variant2{
fld0: Adt51,
fld1: f32,
fld2: [usize; 1],
fld3: [isize; 2],
fld4: (i16, (*mut [u128; 1], i32), isize, *const i128, char, usize, bool),
fld5: i32,
fld6: *const *mut (isize,),

},
Variant3{
fld0: *const (i32, u8, f32, u8, char, bool),
fld1: ([u128; 1], (isize,), isize),

}}
#[derive(Debug)]
pub enum Adt54 {
Variant0{
fld0: ((i32, u8, f32, u8, char, bool),),
fld1: i128,
fld2: (i16, (*mut [u128; 1], i32), isize, *const i128, char, usize, bool),
fld3: [i8; 7],
fld4: usize,
fld5: i32,
fld6: u32,

},
Variant1{
fld0: ((i32, u8, f32, u8, char, bool),),
fld1: *const *mut (isize,),

},
Variant2{
fld0: *mut u32,
fld1: Adt52,
fld2: (i32, u8, f32, u8, char, bool),

},
Variant3{
fld0: u32,

}}
#[derive(Debug)]
pub struct Adt55 {
fld0: Adt47,
}
#[derive(Debug)]
pub enum Adt56 {
Variant0{
fld0: u128,

},
Variant1{
fld0: Adt49,
fld1: f32,

},
Variant2{
fld0: *const (i8, char, u128),
fld1: char,
fld2: (i32, u8, f32, u8, char, bool),
fld3: (isize,),

},
Variant3{
fld0: Adt53,
fld1: [i128; 2],
fld2: *const *const *mut (isize,),
fld3: i8,

}}
#[derive(Debug,Copy,Clone)]
pub enum Adt57 {
Variant0{
fld0: bool,
fld1: i16,

},
Variant1{
fld0: *mut [u128; 1],
fld1: Adt53,
fld2: (usize, (isize,), *const (i32, u8, f32, u8, char, bool)),
fld3: (i32,),
fld4: i16,
fld5: u32,
fld6: *mut u32,
fld7: (f32, *mut (isize,), (i32, u8, f32, u8, char, bool)),

},
Variant2{
fld0: (f32, i64),

}}
#[derive(Debug)]
pub enum Adt58 {
Variant0{
fld0: u8,
fld1: (usize, (isize,), *const (i32, u8, f32, u8, char, bool)),
fld2: (i32, i64, f32, u128, (f32, *mut (isize,), (i32, u8, f32, u8, char, bool)), (i32, u8, f32, u8, char, bool), (isize,)),
fld3: (isize,),
fld4: *mut [u128; 1],
fld5: *const *mut (isize,),
fld6: u16,

},
Variant1{
fld0: [usize; 1],
fld1: (i32, u8, f32, u8, char, bool),
fld2: (f32, *mut (isize,), (i32, u8, f32, u8, char, bool)),
fld3: u128,
fld4: (usize, (isize,), *const (i32, u8, f32, u8, char, bool)),
fld5: Adt54,
fld6: [u128; 1],

}}
#[derive(Debug)]
pub struct Adt59 {
fld0: Adt48,
fld1: u8,
fld2: Adt58,
fld3: (i16, (*mut [u128; 1], i32), isize, *const i128, char, usize, bool),
fld4: Adt50,
}
#[derive(Debug)]
pub struct Adt60 {
fld0: Adt50,
}
#[derive(Debug)]
pub enum Adt61 {
Variant0{
fld0: Adt55,
fld1: (i32, u8, f32, u8, char, bool),
fld2: Adt50,
fld3: (i8, char, u128),
fld4: Adt57,
fld5: *mut (isize,),
fld6: [i8; 7],

},
Variant1{
fld0: [char; 5],
fld1: [i8; 7],
fld2: Adt47,
fld3: Adt49,
fld4: ((i32, u8, f32, u8, char, bool),),
fld5: (i32, i64, f32, u128, (f32, *mut (isize,), (i32, u8, f32, u8, char, bool)), (i32, u8, f32, u8, char, bool), (isize,)),
fld6: i128,

}}
#[derive(Debug)]
pub enum Adt62 {
Variant0{
fld0: [usize; 1],
fld1: Adt49,

},
Variant1{
fld0: bool,
fld1: (i32, u8, f32, u8, char, bool),
fld2: Adt60,
fld3: usize,
fld4: u8,
fld5: (isize,),
fld6: Adt58,

},
Variant2{
fld0: [i8; 7],
fld1: ([u128; 1], (isize,), isize),
fld2: (usize, (isize,), *const (i32, u8, f32, u8, char, bool)),
fld3: [usize; 1],
fld4: Adt53,

}}
#[derive(Debug)]
pub struct Adt63 {
fld0: bool,
fld1: char,
fld2: (i32, u8, f32, u8, char, bool),
fld3: Adt54,
fld4: Adt58,
fld5: [i8; 7],
fld6: u16,
fld7: [char; 3],
}

