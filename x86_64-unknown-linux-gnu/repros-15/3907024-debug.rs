#![recursion_limit = "1024"]
    #![feature(custom_mir, core_intrinsics, const_hash)]
    #![allow(unused_parens, unused_assignments, overflowing_literals)]
    extern crate core;
    use core::intrinsics::mir::*;

    use std::fmt::Debug;

    #[inline(never)]
    fn dump_var(
        f: usize,
        var0: usize, val0: impl Debug,
        var1: usize, val1: impl Debug,
        var2: usize, val2: impl Debug,
        var3: usize, val3: impl Debug,
    ) {
        println!("fn{f}:_{var0} = {val0:?}\n_{var1} = {val1:?}\n_{var2} = {val2:?}\n_{var3} = {val3:?}");
    }
    #[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn0(mut _1: u16,mut _2: usize,mut _3: u32,mut _4: u64,mut _5: i16,mut _6: i32,mut _7: i64) -> *mut *const f32 {
mir! {
type RET = *mut *const f32;
let _8: [u32; 6];
let _9: [bool; 6];
let _10: f64;
let _11: ((u16, isize, *const f32, u64, i16), (([bool; 6], isize),), u128);
let _12: [char; 1];
let _13: *mut isize;
let _14: u16;
let _15: i128;
let _16: *const (i64, *mut [u64; 5], i64);
let _17: char;
let _18: i32;
let _19: bool;
let _20: bool;
let _21: i128;
let _22: isize;
let _23: i32;
let _24: u128;
let _25: [u64; 5];
let _26: i16;
let _27: isize;
let _28: (i32, f64, i32);
let _29: isize;
let _30: (u32, u16, u64);
let _31: isize;
let _32: (([bool; 6], isize),);
let _33: i64;
let _34: isize;
let _35: isize;
let _36: usize;
let _37: ();
let _38: ();
{
_2 = !5_usize;
_4 = !5787476868744913504_u64;
_7 = (-6606207002409000622_i64) + (-3296521081087608389_i64);
_2 = 5_usize;
_7 = !2398606254707150290_i64;
_8 = [3599283397_u32,4042637714_u32,877908390_u32,354853655_u32,406122508_u32,3081364830_u32];
_6 = 2038829767_i32;
_6 = -(-1059436836_i32);
Goto(bb1)
}
bb1 = {
_7 = (-5762902089362353086_i64);
_3 = !_8[_2];
_4 = _2 as u64;
_2 = 7_usize ^ 1_usize;
_2 = 3_usize | 0_usize;
_9 = [false,false,true,false,true,true];
_2 = 2_usize;
_7 = 722135437297224292_i64;
_9[_2] = false;
_9[_2] = !true;
_5 = 29038_i16;
_8[_2] = _3 + _3;
_2 = 2_usize;
_8 = [_3,_3,_3,_3,_3,_3];
_1 = 42526_u16;
_2 = _7 as usize;
_11.1.0.0 = _9;
_11.2 = 80371362907413811518765903784391243688_u128 | 54219609888076738691458829039909006834_u128;
_2 = 16207181931870148959_usize;
RET = core::ptr::addr_of_mut!(_11.0.2);
_11.0.0 = !_1;
_11.1.0.0 = [true,true,false,false,true,false];
_11.0.4 = !_5;
_5 = -_11.0.4;
_11.1.0.1 = _2 as isize;
_11.0.0 = _6 as u16;
_10 = (-107_i8) as f64;
Call((*RET) = fn1(_11.1.0.1, _3, _8, _11.1), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_13 = core::ptr::addr_of_mut!(_11.0.1);
_12 = ['\u{b23f6}'];
_8 = [_3,_3,_3,_3,_3,_3];
_7 = 6408921205505561922_i64 << _3;
RET = core::ptr::addr_of_mut!((*RET));
_11.2 = !254750157327373010933120008014570198715_u128;
_2 = 4650530451211791352_usize >> _11.2;
_6 = 545110049_i32 << _7;
Goto(bb3)
}
bb3 = {
(*_13) = _11.1.0.1 ^ _11.1.0.1;
_14 = _6 as u16;
_11.0.0 = _14;
_9 = [false,false,false,true,true,false];
_12 = ['\u{103b64}'];
Goto(bb4)
}
bb4 = {
_15 = _2 as i128;
(*_13) = -_11.1.0.1;
_10 = _11.1.0.1 as f64;
_11.1.0.1 = (*_13) * _11.0.1;
RET = core::ptr::addr_of_mut!((*RET));
_11.1.0 = (_9, _11.0.1);
_11.1.0.0 = [true,false,true,true,true,false];
_11.0.0 = _14 % _1;
_8 = [_3,_3,_3,_3,_3,_3];
_1 = _11.0.0;
_15 = -64575160700295018248402570957194340722_i128;
_5 = _11.0.4 - _11.0.4;
_17 = '\u{16bcc}';
_1 = !_14;
_11.0.0 = !_1;
_13 = core::ptr::addr_of_mut!(_11.0.1);
_11.0.1 = _11.1.0.1 + _11.1.0.1;
_5 = _4 as i16;
RET = core::ptr::addr_of_mut!((*RET));
RET = core::ptr::addr_of_mut!((*RET));
_15 = 104539235507275260029679438971551042613_i128;
Goto(bb5)
}
bb5 = {
_11.1.0 = (_9, (*_13));
_12 = [_17];
_20 = _14 > _11.0.0;
RET = core::ptr::addr_of_mut!((*RET));
(*_13) = _11.1.0.1 - _11.1.0.1;
_9 = [_20,_20,_20,_20,_20,_20];
_6 = 1497796498_i32 + (-1508703254_i32);
_9 = [_20,_20,_20,_20,_20,_20];
_17 = '\u{28b84}';
_11.1.0 = (_9, (*_13));
_1 = !_14;
(*_13) = _11.1.0.1 + _11.1.0.1;
_2 = 7639383632640388551_usize;
_11.0.0 = !_1;
Goto(bb6)
}
bb6 = {
_11.1.0.1 = (*_13);
_12 = [_17];
_11.1.0.0 = _9;
_3 = !2949036356_u32;
(*_13) = -_11.1.0.1;
_11.1.0 = (_9, (*_13));
_17 = '\u{1fe9}';
_11.1.0.1 = (*_13) - (*_13);
match _15 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb5,
104539235507275260029679438971551042613 => bb8,
_ => bb7
}
}
bb7 = {
_11.1.0 = (_9, (*_13));
_12 = [_17];
_20 = _14 > _11.0.0;
RET = core::ptr::addr_of_mut!((*RET));
(*_13) = _11.1.0.1 - _11.1.0.1;
_9 = [_20,_20,_20,_20,_20,_20];
_6 = 1497796498_i32 + (-1508703254_i32);
_9 = [_20,_20,_20,_20,_20,_20];
_17 = '\u{28b84}';
_11.1.0 = (_9, (*_13));
_1 = !_14;
(*_13) = _11.1.0.1 + _11.1.0.1;
_2 = 7639383632640388551_usize;
_11.0.0 = !_1;
Goto(bb6)
}
bb8 = {
_19 = _11.0.0 != _14;
_8 = [_3,_3,_3,_3,_3,_3];
_18 = !_6;
(*_13) = _6 as isize;
_11.0.3 = _4;
match _15 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb7,
4 => bb5,
104539235507275260029679438971551042613 => bb9,
_ => bb6
}
}
bb9 = {
_11.0.1 = _11.1.0.1;
_18 = _1 as i32;
_11.0.3 = 15_i8 as u64;
_11.1.0.1 = _1 as isize;
_12 = [_17];
_25 = [_11.0.3,_11.0.3,_4,_11.0.3,_4];
_21 = _15;
_13 = core::ptr::addr_of_mut!(_22);
_13 = core::ptr::addr_of_mut!(_22);
_23 = _18;
_18 = _2 as i32;
RET = core::ptr::addr_of_mut!((*RET));
(*_13) = _11.1.0.1 ^ _11.1.0.1;
_24 = !_11.2;
_26 = !_5;
_27 = -(*_13);
_11.0.4 = _26 * _5;
_28 = (_23, _10, _23);
_28.0 = _23;
RET = core::ptr::addr_of_mut!((*RET));
_11.1.0.1 = _11.0.4 as isize;
_9 = [_20,_20,_19,_19,_19,_19];
match _21 {
0 => bb4,
1 => bb10,
2 => bb11,
3 => bb12,
104539235507275260029679438971551042613 => bb14,
_ => bb13
}
}
bb10 = {
_19 = _11.0.0 != _14;
_8 = [_3,_3,_3,_3,_3,_3];
_18 = !_6;
(*_13) = _6 as isize;
_11.0.3 = _4;
match _15 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb7,
4 => bb5,
104539235507275260029679438971551042613 => bb9,
_ => bb6
}
}
bb11 = {
_13 = core::ptr::addr_of_mut!(_11.0.1);
_12 = ['\u{b23f6}'];
_8 = [_3,_3,_3,_3,_3,_3];
_7 = 6408921205505561922_i64 << _3;
RET = core::ptr::addr_of_mut!((*RET));
_11.2 = !254750157327373010933120008014570198715_u128;
_2 = 4650530451211791352_usize >> _11.2;
_6 = 545110049_i32 << _7;
Goto(bb3)
}
bb12 = {
(*_13) = _11.1.0.1 ^ _11.1.0.1;
_14 = _6 as u16;
_11.0.0 = _14;
_9 = [false,false,false,true,true,false];
_12 = ['\u{103b64}'];
Goto(bb4)
}
bb13 = {
_15 = _2 as i128;
(*_13) = -_11.1.0.1;
_10 = _11.1.0.1 as f64;
_11.1.0.1 = (*_13) * _11.0.1;
RET = core::ptr::addr_of_mut!((*RET));
_11.1.0 = (_9, _11.0.1);
_11.1.0.0 = [true,false,true,true,true,false];
_11.0.0 = _14 % _1;
_8 = [_3,_3,_3,_3,_3,_3];
_1 = _11.0.0;
_15 = -64575160700295018248402570957194340722_i128;
_5 = _11.0.4 - _11.0.4;
_17 = '\u{16bcc}';
_1 = !_14;
_11.0.0 = !_1;
_13 = core::ptr::addr_of_mut!(_11.0.1);
_11.0.1 = _11.1.0.1 + _11.1.0.1;
_5 = _4 as i16;
RET = core::ptr::addr_of_mut!((*RET));
RET = core::ptr::addr_of_mut!((*RET));
_15 = 104539235507275260029679438971551042613_i128;
Goto(bb5)
}
bb14 = {
_19 = !_20;
_26 = !_11.0.4;
_29 = _27 & _22;
_11.0.1 = -_27;
_11.2 = _24 + _24;
_11.2 = _24 ^ _24;
_11.0.3 = _4 & _4;
_3 = 3625776006_u32 << _11.0.0;
_30.2 = !_4;
_11.0.3 = _17 as u64;
_13 = core::ptr::addr_of_mut!(_11.1.0.1);
_20 = !_19;
_11.2 = _24;
_27 = _11.0.0 as isize;
_11.1.0 = (_9, _27);
_13 = core::ptr::addr_of_mut!(_27);
_11.0.0 = _14 ^ _14;
_27 = _11.0.4 as isize;
_29 = !_22;
_30.0 = _3;
_30.1 = _11.0.0;
_10 = _28.1;
_32.0.1 = _7 as isize;
_21 = _15;
Goto(bb15)
}
bb15 = {
Call(_37 = dump_var(0_usize, 1_usize, Move(_1), 3_usize, Move(_3), 14_usize, Move(_14), 22_usize, Move(_22)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_37 = dump_var(0_usize, 8_usize, Move(_8), 29_usize, Move(_29), 25_usize, Move(_25), 30_usize, Move(_30)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_37 = dump_var(0_usize, 2_usize, Move(_2), 15_usize, Move(_15), 21_usize, Move(_21), 4_usize, Move(_4)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn1(mut _1: isize,mut _2: u32,mut _3: [u32; 6],mut _4: (([bool; 6], isize),)) -> *const f32 {
mir! {
type RET = *const f32;
let _5: isize;
let _6: i128;
let _7: Adt61;
let _8: [u32; 2];
let _9: char;
let _10: [i32; 1];
let _11: *mut *const f32;
let _12: f64;
let _13: char;
let _14: usize;
let _15: f32;
let _16: u32;
let _17: f32;
let _18: f64;
let _19: f32;
let _20: i8;
let _21: i32;
let _22: *mut *const f32;
let _23: [isize; 2];
let _24: ();
let _25: ();
{
_1 = _4.0.1 + _4.0.1;
_4.0.1 = !_1;
_3 = [_2,_2,_2,_2,_2,_2];
_1 = '\u{c51b8}' as isize;
_4.0.0 = [true,false,true,true,true,true];
Goto(bb1)
}
bb1 = {
_5 = _4.0.1 >> _2;
_6 = (-23817466945071139728055530709481629838_i128) >> _4.0.1;
_3 = [_2,_2,_2,_2,_2,_2];
_4.0.1 = 1479694151605695199_u64 as isize;
_4.0.1 = 12937914386956163360_u64 as isize;
_4.0.1 = _1;
_4.0.1 = 122_i8 as isize;
_5 = _1;
_8 = [_2,_2];
_6 = (-159632224344813712733959999426442833435_i128);
_1 = 4078677034649135727_u64 as isize;
_5 = _2 as isize;
_2 = true as u32;
_5 = _1;
_8 = [_2,_2];
_9 = '\u{4658a}';
_4.0.0 = [true,false,false,false,false,false];
_3 = [_2,_2,_2,_2,_2,_2];
_8 = [_2,_2];
_10 = [2139560359_i32];
_5 = 8340121715676210656_u64 as isize;
Goto(bb2)
}
bb2 = {
_6 = !11505083073530495248254679171208006254_i128;
_11 = core::ptr::addr_of_mut!(RET);
_6 = 25346822270116314620682902918199397938_i128 - 157765262110385991918792383409479673677_i128;
_10 = [377149726_i32];
_3 = [_2,_2,_2,_2,_2,_2];
_12 = 39901_u16 as f64;
_1 = _5;
_4.0.1 = -_1;
_4.0.0 = [false,false,true,false,false,false];
_9 = '\u{2c552}';
_8 = [_2,_2];
_10 = [1254226304_i32];
_12 = 107990180315973224052687924619662393677_u128 as f64;
_9 = '\u{6a710}';
_5 = _4.0.1;
_4.0.1 = 42589_u16 as isize;
_1 = _4.0.1;
_14 = _12 as usize;
_14 = 11745420640560903620_usize ^ 3358692102829766386_usize;
_14 = 6_usize * 16290963588239950901_usize;
_13 = _9;
_1 = _4.0.1 ^ _5;
_4.0.1 = _1;
_11 = core::ptr::addr_of_mut!((*_11));
Call(_12 = core::intrinsics::transmute(_5), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_4.0.1 = _1;
_2 = _9 as u32;
_3 = [_2,_2,_2,_2,_2,_2];
_2 = !3219535724_u32;
_10 = [817501722_i32];
_13 = _9;
_3 = [_2,_2,_2,_2,_2,_2];
_4.0.1 = _5;
_2 = !400482127_u32;
_13 = _9;
_1 = -_4.0.1;
_13 = _9;
_10 = [422007071_i32];
_4.0.1 = _1;
_2 = !2303900372_u32;
_9 = _13;
_10 = [2051166697_i32];
_3 = [_2,_2,_2,_2,_2,_2];
Call(RET = fn2(_4.0, _4.0, _4, _4), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_4.0.1 = !_1;
_9 = _13;
_8 = [_2,_2];
_3 = [_2,_2,_2,_2,_2,_2];
_11 = core::ptr::addr_of_mut!(RET);
_14 = 15057539905968017935_usize;
_3 = [_2,_2,_2,_2,_2,_2];
_13 = _9;
_11 = core::ptr::addr_of_mut!((*_11));
RET = core::ptr::addr_of!(_15);
RET = core::ptr::addr_of!(_15);
_8 = [_2,_2];
_6 = _12 as i128;
_2 = 1696360496_u32;
_8 = [_2,_2];
_9 = _13;
(*RET) = _6 as f32;
_6 = (-33039415736430612633147412539662169655_i128);
_3 = [_2,_2,_2,_2,_2,_2];
_10 = [972807272_i32];
_17 = (*RET) + (*RET);
Goto(bb5)
}
bb5 = {
RET = core::ptr::addr_of!(_17);
_2 = !935062297_u32;
_13 = _9;
_10 = [(-1765121962_i32)];
_17 = _15 * _15;
Goto(bb6)
}
bb6 = {
RET = core::ptr::addr_of!(_17);
(*RET) = _15 - _15;
_1 = 9087658187610531340_i64 as isize;
_2 = 2545147756_u32;
(*_11) = core::ptr::addr_of!(_15);
(*RET) = 121031388625349055876866540812069303925_u128 as f32;
RET = core::ptr::addr_of!(_15);
_10 = [979815550_i32];
match _6 {
307242951184507850830227194892106041801 => bb8,
_ => bb7
}
}
bb7 = {
_4.0.1 = _1;
_2 = _9 as u32;
_3 = [_2,_2,_2,_2,_2,_2];
_2 = !3219535724_u32;
_10 = [817501722_i32];
_13 = _9;
_3 = [_2,_2,_2,_2,_2,_2];
_4.0.1 = _5;
_2 = !400482127_u32;
_13 = _9;
_1 = -_4.0.1;
_13 = _9;
_10 = [422007071_i32];
_4.0.1 = _1;
_2 = !2303900372_u32;
_9 = _13;
_10 = [2051166697_i32];
_3 = [_2,_2,_2,_2,_2,_2];
Call(RET = fn2(_4.0, _4.0, _4, _4), ReturnTo(bb4), UnwindUnreachable())
}
bb8 = {
_14 = !13316457953936631518_usize;
RET = core::ptr::addr_of!(_15);
_13 = _9;
_9 = _13;
(*_11) = core::ptr::addr_of!(_19);
_20 = (-76_i8);
_3 = [_2,_2,_2,_2,_2,_2];
_2 = (-1258875045321050957_i64) as u32;
_9 = _13;
_2 = 2026024938_u32;
(*_11) = core::ptr::addr_of!(_19);
_21 = -335554971_i32;
_4.0.1 = _5 << _6;
RET = core::ptr::addr_of!(_19);
Goto(bb9)
}
bb9 = {
_12 = 98371961461097142858764687363403567044_u128 as f64;
_1 = _4.0.1 * _5;
_20 = 173_u8 as i8;
match _6 {
0 => bb7,
307242951184507850830227194892106041801 => bb10,
_ => bb5
}
}
bb10 = {
_11 = core::ptr::addr_of_mut!((*_11));
_16 = !_2;
match _6 {
0 => bb9,
1 => bb7,
2 => bb8,
3 => bb4,
4 => bb11,
5 => bb12,
307242951184507850830227194892106041801 => bb14,
_ => bb13
}
}
bb11 = {
RET = core::ptr::addr_of!(_17);
(*RET) = _15 - _15;
_1 = 9087658187610531340_i64 as isize;
_2 = 2545147756_u32;
(*_11) = core::ptr::addr_of!(_15);
(*RET) = 121031388625349055876866540812069303925_u128 as f32;
RET = core::ptr::addr_of!(_15);
_10 = [979815550_i32];
match _6 {
307242951184507850830227194892106041801 => bb8,
_ => bb7
}
}
bb12 = {
_14 = !13316457953936631518_usize;
RET = core::ptr::addr_of!(_15);
_13 = _9;
_9 = _13;
(*_11) = core::ptr::addr_of!(_19);
_20 = (-76_i8);
_3 = [_2,_2,_2,_2,_2,_2];
_2 = (-1258875045321050957_i64) as u32;
_9 = _13;
_2 = 2026024938_u32;
(*_11) = core::ptr::addr_of!(_19);
_21 = -335554971_i32;
_4.0.1 = _5 << _6;
RET = core::ptr::addr_of!(_19);
Goto(bb9)
}
bb13 = {
_4.0.1 = _1;
_2 = _9 as u32;
_3 = [_2,_2,_2,_2,_2,_2];
_2 = !3219535724_u32;
_10 = [817501722_i32];
_13 = _9;
_3 = [_2,_2,_2,_2,_2,_2];
_4.0.1 = _5;
_2 = !400482127_u32;
_13 = _9;
_1 = -_4.0.1;
_13 = _9;
_10 = [422007071_i32];
_4.0.1 = _1;
_2 = !2303900372_u32;
_9 = _13;
_10 = [2051166697_i32];
_3 = [_2,_2,_2,_2,_2,_2];
Call(RET = fn2(_4.0, _4.0, _4, _4), ReturnTo(bb4), UnwindUnreachable())
}
bb14 = {
(*_11) = core::ptr::addr_of!((*RET));
(*_11) = core::ptr::addr_of!((*RET));
(*RET) = -_17;
(*RET) = _20 as f32;
(*_11) = core::ptr::addr_of!(_15);
Goto(bb15)
}
bb15 = {
Call(_24 = dump_var(1_usize, 9_usize, Move(_9), 5_usize, Move(_5), 1_usize, Move(_1), 14_usize, Move(_14)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_24 = dump_var(1_usize, 6_usize, Move(_6), 8_usize, Move(_8), 10_usize, Move(_10), 25_usize, _25), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn2(mut _1: ([bool; 6], isize),mut _2: ([bool; 6], isize),mut _3: (([bool; 6], isize),),mut _4: (([bool; 6], isize),)) -> *const f32 {
mir! {
type RET = *const f32;
let _5: f32;
let _6: u32;
let _7: f64;
let _8: char;
let _9: [u32; 2];
let _10: Adt50;
let _11: Adt63;
let _12: (([bool; 6], isize),);
let _13: u64;
let _14: [u64; 5];
let _15: *const f32;
let _16: isize;
let _17: [u64; 5];
let _18: u16;
let _19: ([i32; 1], [isize; 2], char);
let _20: f32;
let _21: *mut f32;
let _22: f32;
let _23: u128;
let _24: char;
let _25: i128;
let _26: isize;
let _27: bool;
let _28: *const *const *mut isize;
let _29: isize;
let _30: u64;
let _31: [i32; 1];
let _32: i32;
let _33: i32;
let _34: Adt63;
let _35: [u32; 2];
let _36: Adt62;
let _37: isize;
let _38: [u64; 5];
let _39: Adt48;
let _40: [u32; 2];
let _41: u32;
let _42: bool;
let _43: [i16; 4];
let _44: f32;
let _45: f64;
let _46: i32;
let _47: *const (i64, *mut [u64; 5], i64);
let _48: u64;
let _49: f64;
let _50: *const i32;
let _51: [isize; 2];
let _52: char;
let _53: usize;
let _54: (([bool; 6], isize),);
let _55: bool;
let _56: i8;
let _57: f64;
let _58: i64;
let _59: (i32, *mut isize, *mut f32, usize, [u64; 5], isize, u128);
let _60: i16;
let _61: ();
let _62: ();
{
_1.1 = _3.0.1;
_5 = 125215756342010483156403598942316214394_i128 as f32;
_1 = (_2.0, _3.0.1);
_4 = (_2,);
RET = core::ptr::addr_of!(_5);
_3.0.0 = [false,true,true,true,false,false];
Goto(bb1)
}
bb1 = {
_2.0 = _1.0;
_6 = 2286406009_u32;
_1 = (_4.0.0, _3.0.1);
_4 = (_2,);
_4.0 = (_2.0, _3.0.1);
(*RET) = 6_usize as f32;
_2.1 = 47215441503680597294119150115137878291_u128 as isize;
(*RET) = _6 as f32;
_1.1 = _2.1;
RET = core::ptr::addr_of!((*RET));
(*RET) = 181923864137069069392885668002534176083_u128 as f32;
_2 = (_1.0, _1.1);
_2 = _4.0;
_8 = '\u{10f8ce}';
_7 = 12737603482087149416_u64 as f64;
_3.0.1 = !_1.1;
_6 = 472319705_u32 | 3394906746_u32;
_2.1 = -_1.1;
_7 = _4.0.1 as f64;
(*RET) = (-15277_i16) as f32;
_9 = [_6,_6];
_4.0.0 = _1.0;
_2 = (_4.0.0, _4.0.1);
(*RET) = 8534764358454903616_u64 as f32;
_4.0 = (_3.0.0, _2.1);
Call(_3.0 = fn3(_1.1, _4.0, _1.0, _4, _4.0.0, _1, _4.0.0, _9, _4.0), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_4 = (_1,);
(*RET) = _7 as f32;
_2 = (_3.0.0, _3.0.1);
_2.1 = !_3.0.1;
RET = core::ptr::addr_of!((*RET));
_6 = !1775900397_u32;
_1 = (_4.0.0, _3.0.1);
_4.0.0 = [false,false,false,true,true,false];
(*RET) = 37773_u16 as f32;
_3.0.1 = _1.1;
_1 = (_4.0.0, _3.0.1);
_9 = [_6,_6];
_9 = [_6,_6];
_4.0.1 = _2.1;
(*RET) = _6 as f32;
_4.0.1 = _1.1;
_3.0.1 = _1.1;
_4.0.0 = [true,false,false,false,true,false];
RET = core::ptr::addr_of!((*RET));
_3.0.1 = !_4.0.1;
_10.fld5.0.2 = 220528629442111061858105908857476190937_u128 as u64;
_5 = 52276_u16 as f32;
_4 = (_2,);
Call(RET = fn10(_3.0, _2.1, _2.0, _3, _3, _2, _3.0.1, _3.0.1, _4.0, _3, _1.1, _4.0.1, _1.1, _2.1, _2.1, _3.0), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_10.fld2.2 = core::ptr::addr_of_mut!(_5);
_11.fld0 = (-466023464_i32) as i16;
_10.fld3 = [_3.0.1,_1.1];
_10.fld5.0.2 = !12275259155909766228_u64;
_2.1 = !_3.0.1;
_10.fld4 = 43809_u16 * 46304_u16;
_5 = _6 as f32;
_10.fld5.0.1 = _10.fld4 >> _1.1;
_11.fld1 = core::ptr::addr_of!(_10.fld7);
_3 = (_4.0,);
_10.fld5.0.0 = _6 ^ _6;
_10.fld1 = [_10.fld5.0.2,_10.fld5.0.2,_10.fld5.0.2,_10.fld5.0.2,_10.fld5.0.2];
_2 = (_4.0.0, _3.0.1);
_10.fld2.6 = (-27_i8) as u128;
_10.fld2.5 = _4.0.1 * _3.0.1;
_10.fld2.5 = _3.0.1;
_10.fld7.1 = core::ptr::addr_of_mut!(_14);
_10.fld2.6 = 21893473250808348579570145565913808720_u128 << _3.0.1;
_2.1 = _3.0.1 - _4.0.1;
_10.fld7.2 = (-8884452111076011484_i64) & 3824412298455900930_i64;
_10.fld2.0 = _10.fld2.6 as i32;
_8 = '\u{d99e7}';
_10.fld4 = _10.fld2.0 as u16;
Call(_10.fld7.1 = fn11(_2.1, _3.0, _3, _4.0, _10.fld2.5, _10.fld5.0, _3.0.1, _4.0.1, _2.1, _4.0, _1, _3.0.1, _2.1, _1, _10.fld3, _1.1), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_1.0 = [true,false,true,true,false,true];
_14 = _10.fld1;
_10.fld1 = [_10.fld5.0.2,_10.fld5.0.2,_10.fld5.0.2,_10.fld5.0.2,_10.fld5.0.2];
_1.0 = [false,false,true,false,true,true];
_11.fld1 = core::ptr::addr_of!(_10.fld7);
_14 = _10.fld1;
_6 = !_10.fld5.0.0;
_10.fld5.0.0 = _6;
RET = core::ptr::addr_of!(_5);
_12.0.1 = _3.0.1 - _10.fld2.5;
_11.fld1 = core::ptr::addr_of!(_10.fld7);
RET = core::ptr::addr_of!(_5);
_2 = (_3.0.0, _3.0.1);
_10.fld7.0 = !_10.fld7.2;
_4.0.0 = [false,true,true,false,false,true];
(*RET) = _10.fld5.0.0 as f32;
_10.fld5.0.2 = 12367498893282041329_u64;
_2.0 = [true,false,false,true,false,false];
Goto(bb5)
}
bb5 = {
_8 = '\u{7620e}';
_18 = (*RET) as u16;
_10.fld2.4 = [_10.fld5.0.2,_10.fld5.0.2,_10.fld5.0.2,_10.fld5.0.2,_10.fld5.0.2];
_16 = 178_u8 as isize;
_21 = core::ptr::addr_of_mut!(_20);
_21 = core::ptr::addr_of_mut!((*RET));
_13 = !_10.fld5.0.2;
_10.fld5.0 = (_6, _10.fld4, _13);
_19.1 = _10.fld3;
_10.fld2.2 = core::ptr::addr_of_mut!((*_21));
(*_21) = _6 as f32;
_16 = _12.0.1;
_4 = (_2,);
(*RET) = _10.fld5.0.2 as f32;
Goto(bb6)
}
bb6 = {
_2.0 = _1.0;
_12.0.0 = _1.0;
_3.0.0 = [true,false,true,false,true,false];
_10.fld3 = [_10.fld2.5,_1.1];
_12.0.0 = _1.0;
_10.fld2.6 = _8 as u128;
_2.1 = -_4.0.1;
_16 = -_10.fld2.5;
_6 = _10.fld7.0 as u32;
_4 = (_2,);
_10.fld3 = _19.1;
_21 = core::ptr::addr_of_mut!((*RET));
_4 = _12;
_1.1 = (*_21) as isize;
_1 = (_3.0.0, _12.0.1);
Call(_1 = fn18(_3, _11, _11.fld1, _11.fld1, _12.0.1, _3, _11, _11, _4.0, _12.0, _10.fld7, _10.fld7), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
(*RET) = _4.0.1 as f32;
_9 = [_10.fld5.0.0,_6];
(*_21) = _10.fld5.0.2 as f32;
(*_21) = 113658754831433061899468475798794594884_i128 as f32;
_10.fld3 = [_3.0.1,_3.0.1];
_2.1 = !_4.0.1;
RET = core::ptr::addr_of!(_22);
_4.0 = _1;
_10.fld2.3 = !4_usize;
_1.1 = _10.fld2.5 * _4.0.1;
_10.fld2.1 = core::ptr::addr_of_mut!(_29);
(*RET) = (*_21) * _5;
_1.1 = !_4.0.1;
_4 = (_2,);
_4 = (_1,);
_19.2 = _8;
_5 = (*RET) - _22;
Goto(bb8)
}
bb8 = {
_27 = false ^ false;
_10.fld5.0.2 = _13 * _13;
_23 = _10.fld2.6 << _1.1;
_26 = _1.1;
_10.fld3 = [_16,_4.0.1];
_3.0.0 = [_27,_27,_27,_27,_27,_27];
Goto(bb9)
}
bb9 = {
_10.fld1 = [_10.fld5.0.2,_10.fld5.0.2,_10.fld5.0.2,_10.fld5.0.2,_10.fld5.0.2];
_3 = _12;
_27 = _23 < _23;
_4.0.1 = _26;
_30 = _10.fld5.0.2 >> _10.fld4;
_19.2 = _8;
_16 = _7 as isize;
_35 = [_10.fld5.0.0,_6];
_12.0.1 = _10.fld7.2 as isize;
(*_21) = (*RET);
_10.fld1 = [_30,_30,_30,_30,_30];
_38 = [_30,_30,_10.fld5.0.2,_30,_30];
_29 = -_3.0.1;
_1.1 = _29;
RET = core::ptr::addr_of!((*_21));
_24 = _8;
_12.0 = _3.0;
_12 = _4;
Goto(bb10)
}
bb10 = {
_12 = (_4.0,);
_1 = _4.0;
_15 = RET;
RET = core::ptr::addr_of!((*RET));
_33 = _10.fld2.0 | _10.fld2.0;
_17 = _38;
(*_21) = _22 - _22;
_30 = !_10.fld5.0.2;
_31 = [_33];
_41 = _10.fld5.0.0 | _10.fld5.0.0;
_10.fld5.1 = _10.fld2.3 >> _4.0.1;
(*RET) = -_22;
_13 = _30 ^ _10.fld5.0.2;
_13 = _30 * _30;
_10.fld2.2 = _21;
_10.fld2.5 = _27 as isize;
_40 = [_41,_41];
(*_15) = _23 as f32;
_10.fld2.2 = core::ptr::addr_of_mut!(_22);
Goto(bb11)
}
bb11 = {
_12.0.1 = _10.fld2.5 ^ _29;
_12.0 = (_4.0.0, _29);
_2.1 = _10.fld2.5;
Goto(bb12)
}
bb12 = {
_13 = !_10.fld5.0.2;
_21 = _10.fld2.2;
RET = core::ptr::addr_of!(_20);
(*RET) = (*_15);
_48 = _10.fld5.0.2 >> _10.fld5.1;
_46 = -_33;
_22 = -(*_15);
_34.fld1 = _11.fld1;
_51 = [_2.1,_2.1];
Goto(bb13)
}
bb13 = {
_11.fld1 = core::ptr::addr_of!(_10.fld7);
_3.0.0 = _1.0;
_54.0.1 = _23 as isize;
_41 = _6 | _10.fld5.0.0;
_19.2 = _8;
_55 = !_27;
_34 = _11;
_58 = _27 as i64;
_46 = _33 & _10.fld2.0;
_48 = _10.fld5.0.2;
_10.fld2.3 = !_10.fld5.1;
_34.fld1 = _11.fld1;
_44 = _10.fld2.5 as f32;
_27 = _10.fld5.0.1 < _10.fld4;
_45 = _7 + _7;
_19.2 = _8;
Goto(bb14)
}
bb14 = {
_36 = Adt62::Variant1 { fld0: _23 };
_59.1 = core::ptr::addr_of_mut!(_10.fld2.5);
_25 = !54353232299665608464101299088125169769_i128;
_4.0.0 = [_27,_55,_55,_55,_27,_55];
_37 = _1.1 >> _12.0.1;
(*_15) = _30 as f32;
_10.fld1 = _17;
_11 = _34;
_1.0 = [_27,_27,_55,_55,_55,_27];
_4.0.0 = [_55,_55,_55,_55,_55,_27];
_1.1 = _29 - _10.fld2.5;
_11 = Adt63 { fld0: _34.fld0,fld1: _34.fld1 };
_56 = -13_i8;
_52 = _8;
_10.fld5.0.2 = _48;
_10.fld2.3 = Field::<u128>(Variant(_36, 1), 0) as usize;
_3.0.1 = -_1.1;
_54 = (_12.0,);
_1 = (_54.0.0, _37);
Goto(bb15)
}
bb15 = {
Call(_61 = dump_var(2_usize, 13_usize, Move(_13), 14_usize, Move(_14), 55_usize, Move(_55), 8_usize, Move(_8)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_61 = dump_var(2_usize, 35_usize, Move(_35), 38_usize, Move(_38), 33_usize, Move(_33), 25_usize, Move(_25)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_61 = dump_var(2_usize, 29_usize, Move(_29), 48_usize, Move(_48), 58_usize, Move(_58), 3_usize, Move(_3)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_61 = dump_var(2_usize, 51_usize, Move(_51), 46_usize, Move(_46), 9_usize, Move(_9), 41_usize, Move(_41)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_61 = dump_var(2_usize, 31_usize, Move(_31), 62_usize, _62, 62_usize, _62, 62_usize, _62), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn3(mut _1: isize,mut _2: ([bool; 6], isize),mut _3: [bool; 6],mut _4: (([bool; 6], isize),),mut _5: [bool; 6],mut _6: ([bool; 6], isize),mut _7: [bool; 6],mut _8: [u32; 2],mut _9: ([bool; 6], isize)) -> ([bool; 6], isize) {
mir! {
type RET = ([bool; 6], isize);
let _10: isize;
let _11: Adt54;
let _12: isize;
let _13: i32;
let _14: *mut f32;
let _15: bool;
let _16: u64;
let _17: (i32, f64, i32);
let _18: Adt53;
let _19: ([i32; 1], [isize; 2], char);
let _20: (u32, u16, u64);
let _21: u16;
let _22: isize;
let _23: ();
let _24: ();
{
_4.0.1 = _9.1;
_2.1 = _4.0.1 - _4.0.1;
_7 = [true,true,false,true,true,false];
_3 = [false,true,false,false,false,false];
_9.1 = 46076_u16 as isize;
_6.0 = [false,false,true,true,false,true];
_2.1 = _6.1 * _9.1;
RET.0 = [false,true,true,false,false,true];
RET.1 = _2.1 * _4.0.1;
RET.1 = _1 >> _4.0.1;
RET.1 = (-3344_i16) as isize;
_4.0 = (_5, _1);
RET.1 = (-2060274895_i32) as isize;
_4 = (_6,);
_2.1 = _6.1;
_6.1 = RET.1 << _1;
_5 = _2.0;
RET.1 = _6.1;
RET = (_5, _9.1);
Goto(bb1)
}
bb1 = {
_9.0 = _4.0.0;
_2.0 = [false,true,false,true,false,true];
Call(_6.0 = fn4(_9, _4.0.0, _9, _5, _6.1, _4, _4.0, _2, RET, _2.1, _9.0, _6.1, _2, _9, _4.0.0, _4.0), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_9 = _6;
_10 = -_6.1;
_8 = [637290049_u32,2610244471_u32];
_5 = [false,false,true,false,false,false];
_4 = (_2,);
_9.0 = [false,false,false,true,true,false];
RET = (_5, _6.1);
_4.0 = _9;
_5 = _7;
RET.0 = [false,true,false,false,false,true];
_9.0 = _6.0;
_6.1 = RET.1;
RET = (_3, _4.0.1);
RET.1 = -_4.0.1;
_9.0 = [false,true,false,false,true,false];
_10 = _4.0.1;
RET.0 = _2.0;
_6 = (_5, RET.1);
_9 = (_5, RET.1);
RET.0 = _5;
_1 = _2.1 & _6.1;
Goto(bb3)
}
bb3 = {
RET = (_4.0.0, _1);
_13 = 430238162_i32 ^ 710943703_i32;
_5 = [true,true,false,false,true,false];
_16 = 10616099950249383995_u64 << RET.1;
Call(RET = fn5(_4.0, _4.0, _2, _3, _13, _9.1, _6.0), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_15 = true;
_17.1 = _13 as f64;
_12 = RET.1 * RET.1;
_19.1 = [_12,_12];
_10 = -RET.1;
_7 = [_15,_15,_15,_15,_15,_15];
_16 = !14055466389781579564_u64;
_20 = (560106807_u32, 20968_u16, _16);
_20 = (3507788161_u32, 12211_u16, _16);
_2 = (_4.0.0, _12);
_19.2 = '\u{9cabd}';
_7 = [_15,_15,_15,_15,_15,_15];
_13 = _16 as i32;
_13 = 197437046439141523340702680055338646554_u128 as i32;
_18 = Adt53::Variant0 { fld0: _20.2,fld1: 78_i8 };
_20.1 = 46084_u16;
_9.1 = RET.1 << _10;
_4.0 = (_9.0, _10);
_6 = _9;
_18 = Adt53::Variant0 { fld0: _16,fld1: (-75_i8) };
_13 = (-1570809786_i32) << _12;
_17.2 = -_13;
_4 = (_6,);
Goto(bb5)
}
bb5 = {
Call(_23 = dump_var(3_usize, 9_usize, Move(_9), 15_usize, Move(_15), 20_usize, Move(_20), 5_usize, Move(_5)), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
Call(_23 = dump_var(3_usize, 3_usize, Move(_3), 10_usize, Move(_10), 6_usize, Move(_6), 24_usize, _24), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn4(mut _1: ([bool; 6], isize),mut _2: [bool; 6],mut _3: ([bool; 6], isize),mut _4: [bool; 6],mut _5: isize,mut _6: (([bool; 6], isize),),mut _7: ([bool; 6], isize),mut _8: ([bool; 6], isize),mut _9: ([bool; 6], isize),mut _10: isize,mut _11: [bool; 6],mut _12: isize,mut _13: ([bool; 6], isize),mut _14: ([bool; 6], isize),mut _15: [bool; 6],mut _16: ([bool; 6], isize)) -> [bool; 6] {
mir! {
type RET = [bool; 6];
let _17: f32;
let _18: [char; 1];
let _19: u8;
let _20: (i32, f64, i32);
let _21: ([bool; 6], isize);
let _22: i64;
let _23: isize;
let _24: Adt59;
let _25: i128;
let _26: *mut [u64; 5];
let _27: ([i32; 1], [isize; 2], char);
let _28: [i128; 5];
let _29: isize;
let _30: bool;
let _31: ();
let _32: ();
{
_3.0 = _15;
_14 = (_3.0, _1.1);
_13.0 = _8.0;
_3.0 = _14.0;
RET = [false,true,true,true,true,true];
_5 = _14.1 ^ _1.1;
_16 = (_8.0, _10);
_17 = _5 as f32;
Goto(bb1)
}
bb1 = {
_14.0 = [true,true,true,true,false,true];
_19 = _17 as u8;
_21 = (_6.0.0, _6.0.1);
_6.0.0 = _3.0;
_20.2 = 1273536135_i32;
_21.0 = _2;
_18 = ['\u{1dabe}'];
RET = [false,true,true,true,false,false];
RET = [true,true,true,false,false,true];
_16.0 = _2;
_8.1 = _19 as isize;
_17 = _20.2 as f32;
_3.1 = 54915_u16 as isize;
_8.0 = [false,false,false,false,false,true];
_13.1 = _6.0.1;
_6 = (_21,);
_3 = _7;
_10 = (-30_i8) as isize;
_20.1 = 8058_i16 as f64;
_12 = _21.1 | _5;
_21 = (_1.0, _9.1);
_12 = 121101392886449161687562787344961379108_i128 as isize;
_7.0 = _3.0;
_21.1 = -_16.1;
_14 = _16;
_2 = _7.0;
match _20.2 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
6 => bb8,
1273536135 => bb10,
_ => bb9
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_20.0 = !_20.2;
_3 = (_1.0, _6.0.1);
_10 = false as isize;
_7.0 = [false,false,true,true,true,false];
_13.1 = -_8.1;
match _20.2 {
1273536135 => bb12,
_ => bb11
}
}
bb11 = {
Return()
}
bb12 = {
_19 = 220_u8;
_6.0.1 = !_10;
_6.0 = (_14.0, _8.1);
_1.0 = [true,true,false,false,true,false];
RET = _6.0.0;
_19 = 244_u8 & 46_u8;
_16 = (_9.0, _6.0.1);
_9.1 = _8.1;
_22 = (-8304014791293027094_i64) | 2007147988609741519_i64;
_23 = _19 as isize;
_14 = _7;
Goto(bb13)
}
bb13 = {
_7.0 = [true,true,false,false,true,true];
_27.1 = [_5,_16.1];
_20.2 = !_20.0;
_17 = 20290_i16 as f32;
_11 = [true,true,true,false,true,false];
_18 = ['\u{789de}'];
_9.1 = -_16.1;
_8.0 = _4;
_25 = -142554395779798732001941149509020469673_i128;
_14 = _9;
_18 = ['\u{578b6}'];
_13.1 = 3_usize as isize;
_14.1 = _16.1;
_28 = [_25,_25,_25,_25,_25];
_8 = _9;
Goto(bb14)
}
bb14 = {
RET = _7.0;
_27.1 = [_21.1,_16.1];
_19 = 39_u8;
RET = [false,true,false,true,true,false];
_18 = ['\u{1b4ae}'];
_4 = [false,true,false,true,true,false];
_22 = (-7535841259432654524_i64) | 4394086070419942114_i64;
_27.1 = [_9.1,_1.1];
_29 = _21.1;
_6.0.0 = _13.0;
_5 = !_1.1;
_12 = _6.0.1 + _1.1;
_7.0 = [true,false,true,true,false,true];
_29 = !_9.1;
Goto(bb15)
}
bb15 = {
Call(_31 = dump_var(4_usize, 29_usize, Move(_29), 7_usize, Move(_7), 12_usize, Move(_12), 4_usize, Move(_4)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_31 = dump_var(4_usize, 13_usize, Move(_13), 22_usize, Move(_22), 25_usize, Move(_25), 2_usize, Move(_2)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_31 = dump_var(4_usize, 28_usize, Move(_28), 19_usize, Move(_19), 1_usize, Move(_1), 23_usize, Move(_23)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn5(mut _1: ([bool; 6], isize),mut _2: ([bool; 6], isize),mut _3: ([bool; 6], isize),mut _4: [bool; 6],mut _5: i32,mut _6: isize,mut _7: [bool; 6]) -> ([bool; 6], isize) {
mir! {
type RET = ([bool; 6], isize);
let _8: [u32; 2];
let _9: isize;
let _10: *const f32;
let _11: u64;
let _12: (([bool; 6], isize),);
let _13: ((u16, isize, *const f32, u64, i16), (([bool; 6], isize),), u128);
let _14: f64;
let _15: Adt50;
let _16: char;
let _17: ((u32, u16, u64), usize);
let _18: Adt50;
let _19: Adt64;
let _20: f64;
let _21: isize;
let _22: char;
let _23: ();
let _24: ();
{
_3.0 = [false,true,false,false,false,true];
_3 = (_7, _6);
RET.1 = _6;
_4 = _3.0;
RET = (_7, _1.1);
_9 = 161136055819577328120290585221543197881_i128 as isize;
_9 = _1.1;
Call(_10 = fn6(_2, RET.0, _3.1, _9), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
RET = _3;
_2 = (_3.0, _9);
_7 = [true,true,false,true,true,true];
_8 = [3869644637_u32,1406551260_u32];
_1 = (_7, _9);
_12.0.0 = [false,true,false,true,true,true];
Call(_1 = fn8(_8, _2, _10, _10), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
RET.0 = _7;
_12.0.0 = [false,false,true,false,true,true];
_3.0 = [false,false,true,false,true,true];
_2.0 = [true,false,true,true,false,false];
RET.0 = [false,true,false,true,true,true];
_13.0.0 = 27206_u16 - 8351_u16;
_1.0 = [false,false,true,true,true,true];
_13.0.0 = (-2167534122649425851_i64) as u16;
_13.0.4 = (-20933_i16);
_12.0.1 = _1.1;
_14 = 234_u8 as f64;
RET.1 = 165_u8 as isize;
_13.1 = _12;
_13.0.2 = _10;
_11 = 3551659805_u32 as u64;
_2.0 = [true,true,false,false,true,true];
_15.fld3 = [_13.1.0.1,_13.1.0.1];
_15.fld5.0.0 = !3560919151_u32;
_12.0.0 = _1.0;
_6 = -_13.1.0.1;
_15.fld1 = [_11,_11,_11,_11,_11];
match _13.0.4 {
0 => bb3,
340282366920938463463374607431768190523 => bb5,
_ => bb4
}
}
bb3 = {
RET = _3;
_2 = (_3.0, _9);
_7 = [true,true,false,true,true,true];
_8 = [3869644637_u32,1406551260_u32];
_1 = (_7, _9);
_12.0.0 = [false,true,false,true,true,true];
Call(_1 = fn8(_8, _2, _10, _10), ReturnTo(bb2), UnwindUnreachable())
}
bb4 = {
Return()
}
bb5 = {
_9 = true as isize;
_15.fld7.2 = !3839934169399465833_i64;
_15.fld7.1 = core::ptr::addr_of_mut!(_15.fld2.4);
_15.fld2.4 = [_11,_11,_11,_11,_11];
_15.fld7.1 = core::ptr::addr_of_mut!(_15.fld1);
_16 = '\u{7fcdc}';
_12.0 = (_13.1.0.0, _6);
_12.0 = (_3.0, _1.1);
_7 = RET.0;
_17.0.1 = _13.0.0 ^ _13.0.0;
_18.fld3 = _15.fld3;
_13.2 = 124345912978262142772148717531401947455_u128;
_18.fld2.6 = !_13.2;
_15.fld1 = [_11,_11,_11,_11,_11];
_13.1.0.0 = _7;
_17.0.0 = _15.fld5.0.0;
_9 = _13.1.0.1 * _13.1.0.1;
_18.fld2.5 = _13.1.0.1 - _13.1.0.1;
RET.1 = _13.1.0.1;
_15.fld2.3 = !5_usize;
_18.fld3 = [_6,_6];
_8 = [_17.0.0,_15.fld5.0.0];
_15.fld4 = !_17.0.1;
_18.fld5.0.2 = !_11;
RET.0 = [true,false,true,true,false,false];
_20 = -_14;
Goto(bb6)
}
bb6 = {
Call(_23 = dump_var(5_usize, 16_usize, Move(_16), 4_usize, Move(_4), 1_usize, Move(_1), 6_usize, Move(_6)), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
Call(_23 = dump_var(5_usize, 9_usize, Move(_9), 5_usize, Move(_5), 24_usize, _24, 24_usize, _24), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn6(mut _1: ([bool; 6], isize),mut _2: [bool; 6],mut _3: isize,mut _4: isize) -> *const f32 {
mir! {
type RET = *const f32;
let _5: i8;
let _6: [i16; 4];
let _7: f32;
let _8: ((u32, u16, u64), usize);
let _9: u128;
let _10: (isize, f32, i8);
let _11: *const (i64, *mut [u64; 5], i64);
let _12: (u32, u16, u64);
let _13: *const f32;
let _14: ([i32; 1], [isize; 2], char);
let _15: [i128; 5];
let _16: u64;
let _17: ((u16, isize, *const f32, u64, i16), (([bool; 6], isize),), u128);
let _18: f32;
let _19: char;
let _20: isize;
let _21: isize;
let _22: *const i32;
let _23: f64;
let _24: *const (i64, *mut [u64; 5], i64);
let _25: [i128; 5];
let _26: [i16; 4];
let _27: [bool; 6];
let _28: i128;
let _29: f32;
let _30: f32;
let _31: (isize, f32, i8);
let _32: u16;
let _33: ();
let _34: ();
{
_4 = _3;
_1 = (_2, _3);
_1.1 = _4;
_2 = [false,true,false,false,false,false];
_2 = [true,false,true,false,false,true];
_5 = 36502_u16 as i8;
_3 = _4;
_1.0 = _2;
_5 = -(-62_i8);
Goto(bb1)
}
bb1 = {
_5 = _4 as i8;
_4 = -_3;
_3 = _1.1 | _1.1;
_4 = _1.1 * _3;
_1.0 = [true,true,false,false,true,false];
_1 = (_2, _3);
_3 = _4 + _4;
_1.0 = [true,false,true,false,false,false];
_1 = (_2, _3);
_1.1 = _3;
_1.1 = !_3;
_5 = 89_i8 + (-26_i8);
RET = core::ptr::addr_of!(_7);
_1.0 = [false,false,true,true,false,false];
(*RET) = _1.1 as f32;
_2 = _1.0;
_5 = 2775413456632963620_u64 as i8;
(*RET) = 7422264724789160952_i64 as f32;
_8.0.2 = 14582142322913626456_u64;
_5 = (-126_i8);
_5 = !(-50_i8);
_8.0.1 = !46077_u16;
_3 = -_1.1;
_8.0 = (1147999231_u32, 51427_u16, 715202898558445856_u64);
RET = core::ptr::addr_of!((*RET));
Goto(bb2)
}
bb2 = {
_10.2 = _3 as i8;
(*RET) = _8.0.2 as f32;
_8.0.1 = 64507_u16;
(*RET) = 229_u8 as f32;
RET = core::ptr::addr_of!((*RET));
_9 = 164687752526134206184328020519275241846_u128;
_1.1 = 3638153603233884039_i64 as isize;
_10.1 = _8.0.2 as f32;
_12.0 = _8.0.0;
(*RET) = _10.1;
_10.0 = _3;
(*RET) = _8.0.2 as f32;
_12.1 = _10.2 as u16;
_6 = [(-17515_i16),17707_i16,28852_i16,(-133_i16)];
RET = core::ptr::addr_of!((*RET));
_10.1 = -_7;
Goto(bb3)
}
bb3 = {
_1.0 = [false,true,false,false,false,true];
_12 = _8.0;
_12.1 = 14608796628694704235_usize as u16;
_8 = (_12, 18144979573960539813_usize);
_7 = _10.1;
_15 = [55447626815234497029255969029534702908_i128,118219332688676879683018611275811695088_i128,(-48224507284780422830240585345992083527_i128),42734739888420801917352336906097092702_i128,(-156493905801558514914317879630135079109_i128)];
_14.1 = [_10.0,_3];
match _12.2 {
0 => bb1,
715202898558445856 => bb4,
_ => bb2
}
}
bb4 = {
_13 = RET;
_14.2 = '\u{36411}';
_2 = _1.0;
_1.0 = [false,true,false,true,false,false];
_12.1 = !_8.0.1;
_8 = (_12, 7_usize);
_14.1 = [_4,_10.0];
(*RET) = _10.1 - _10.1;
Goto(bb5)
}
bb5 = {
_17.0.3 = !_8.0.2;
Call(_10.2 = fn7(_3, (*RET), _10.0, (*_13), _12.0, _10.0, _12.2, _10.0, _14.1, (*RET)), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
_6 = [(-15356_i16),(-5547_i16),1135_i16,(-27384_i16)];
_4 = 212_u8 as isize;
_17.0.4 = 23183_i16;
_10 = (_3, (*_13), _5);
_17.0.3 = (*_13) as u64;
_17.1 = (_1,);
_6 = [_17.0.4,_17.0.4,_17.0.4,_17.0.4];
_17.0 = (_12.1, _10.0, RET, _8.0.2, (-1968_i16));
_8.0 = _12;
(*RET) = _10.1 * _10.1;
_3 = !_10.0;
_15 = [123366791137906193639846592550234920421_i128,(-156192603103444249796647578518667898565_i128),148066422803023306883521476487653446898_i128,(-73181828202871787693032736614870827951_i128),(-7159266717048875679433758815473602084_i128)];
_17.0.4 = 6333_i16 | 12249_i16;
(*_13) = -_10.1;
_6 = [_17.0.4,_17.0.4,_17.0.4,_17.0.4];
_14.0 = [1124771572_i32];
_17.0.1 = !_10.0;
_20 = !_10.0;
Goto(bb7)
}
bb7 = {
_17.0.4 = (*RET) as i16;
_17.1.0 = (_1.0, _3);
(*RET) = _17.0.4 as f32;
_21 = _10.0 & _10.0;
_1.0 = [false,false,false,false,false,true];
_23 = _8.1 as f64;
(*RET) = _10.1 - _10.1;
_12.0 = 143_u8 as u32;
_10.2 = _5 << _3;
_4 = -_10.0;
_3 = _9 as isize;
(*RET) = -_10.1;
_25 = [(-102483301498406178461799989696613009977_i128),(-139468457316999628614964787340846221002_i128),556311772029012504322986204769750601_i128,(-164209133918795805688133712157961858500_i128),118123812041224768496511746717010720138_i128];
_17.0.2 = _13;
_19 = _14.2;
_17.0.2 = core::ptr::addr_of!((*RET));
_1.1 = (-922410698_i32) as isize;
match _12.2 {
0 => bb8,
715202898558445856 => bb10,
_ => bb9
}
}
bb8 = {
_10.2 = _3 as i8;
(*RET) = _8.0.2 as f32;
_8.0.1 = 64507_u16;
(*RET) = 229_u8 as f32;
RET = core::ptr::addr_of!((*RET));
_9 = 164687752526134206184328020519275241846_u128;
_1.1 = 3638153603233884039_i64 as isize;
_10.1 = _8.0.2 as f32;
_12.0 = _8.0.0;
(*RET) = _10.1;
_10.0 = _3;
(*RET) = _8.0.2 as f32;
_12.1 = _10.2 as u16;
_6 = [(-17515_i16),17707_i16,28852_i16,(-133_i16)];
RET = core::ptr::addr_of!((*RET));
_10.1 = -_7;
Goto(bb3)
}
bb9 = {
_1.0 = [false,true,false,false,false,true];
_12 = _8.0;
_12.1 = 14608796628694704235_usize as u16;
_8 = (_12, 18144979573960539813_usize);
_7 = _10.1;
_15 = [55447626815234497029255969029534702908_i128,118219332688676879683018611275811695088_i128,(-48224507284780422830240585345992083527_i128),42734739888420801917352336906097092702_i128,(-156493905801558514914317879630135079109_i128)];
_14.1 = [_10.0,_3];
match _12.2 {
0 => bb1,
715202898558445856 => bb4,
_ => bb2
}
}
bb10 = {
_14.0 = [(-1323103472_i32)];
_16 = !_12.2;
_14.1 = [_4,_10.0];
_17.0.0 = !_8.0.1;
(*RET) = _10.1;
_17.0 = (_12.1, _17.1.0.1, RET, _16, (-5367_i16));
_8.0.0 = !_12.0;
_8.0.2 = _16 / _12.2;
_25 = [(-74860267501028836767532633560973908503_i128),137466394314487359431590486093107313178_i128,(-104061342932024408950262124519817890175_i128),(-101087993866296560608102587652818255778_i128),(-120836533456007448111835706354826285838_i128)];
_15 = [(-26873421067332217710006958717142594806_i128),32317023389158732732504481621626059501_i128,(-60669517965790413750969901601447532569_i128),(-151919301809967206353416427523231980915_i128),(-65871562285696008255759685159031688976_i128)];
match _12.2 {
0 => bb3,
1 => bb11,
2 => bb12,
715202898558445856 => bb14,
_ => bb13
}
}
bb11 = {
_1.0 = [false,true,false,false,false,true];
_12 = _8.0;
_12.1 = 14608796628694704235_usize as u16;
_8 = (_12, 18144979573960539813_usize);
_7 = _10.1;
_15 = [55447626815234497029255969029534702908_i128,118219332688676879683018611275811695088_i128,(-48224507284780422830240585345992083527_i128),42734739888420801917352336906097092702_i128,(-156493905801558514914317879630135079109_i128)];
_14.1 = [_10.0,_3];
match _12.2 {
0 => bb1,
715202898558445856 => bb4,
_ => bb2
}
}
bb12 = {
_10.2 = _3 as i8;
(*RET) = _8.0.2 as f32;
_8.0.1 = 64507_u16;
(*RET) = 229_u8 as f32;
RET = core::ptr::addr_of!((*RET));
_9 = 164687752526134206184328020519275241846_u128;
_1.1 = 3638153603233884039_i64 as isize;
_10.1 = _8.0.2 as f32;
_12.0 = _8.0.0;
(*RET) = _10.1;
_10.0 = _3;
(*RET) = _8.0.2 as f32;
_12.1 = _10.2 as u16;
_6 = [(-17515_i16),17707_i16,28852_i16,(-133_i16)];
RET = core::ptr::addr_of!((*RET));
_10.1 = -_7;
Goto(bb3)
}
bb13 = {
_17.0.4 = (*RET) as i16;
_17.1.0 = (_1.0, _3);
(*RET) = _17.0.4 as f32;
_21 = _10.0 & _10.0;
_1.0 = [false,false,false,false,false,true];
_23 = _8.1 as f64;
(*RET) = _10.1 - _10.1;
_12.0 = 143_u8 as u32;
_10.2 = _5 << _3;
_4 = -_10.0;
_3 = _9 as isize;
(*RET) = -_10.1;
_25 = [(-102483301498406178461799989696613009977_i128),(-139468457316999628614964787340846221002_i128),556311772029012504322986204769750601_i128,(-164209133918795805688133712157961858500_i128),118123812041224768496511746717010720138_i128];
_17.0.2 = _13;
_19 = _14.2;
_17.0.2 = core::ptr::addr_of!((*RET));
_1.1 = (-922410698_i32) as isize;
match _12.2 {
0 => bb8,
715202898558445856 => bb10,
_ => bb9
}
}
bb14 = {
_17.1 = (_1,);
_8.0.1 = !_12.1;
(*RET) = -_10.1;
_8.0.0 = !_12.0;
_8.0.1 = _8.0.0 as u16;
_14.0 = [(-470529661_i32)];
_17.2 = !_9;
_10.2 = !_5;
(*_13) = _8.0.2 as f32;
_15 = _25;
_3 = !_21;
_15 = _25;
_12.1 = _17.0.0;
_17.0.4 = (-1414_i16) >> _21;
_29 = -(*_13);
_20 = _21;
_13 = core::ptr::addr_of!(_7);
_17.1.0.1 = 95_u8 as isize;
_6 = [_17.0.4,_17.0.4,_17.0.4,_17.0.4];
RET = core::ptr::addr_of!((*_13));
Goto(bb15)
}
bb15 = {
Call(_33 = dump_var(6_usize, 16_usize, Move(_16), 6_usize, Move(_6), 4_usize, Move(_4), 12_usize, Move(_12)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_33 = dump_var(6_usize, 14_usize, Move(_14), 2_usize, Move(_2), 25_usize, Move(_25), 15_usize, Move(_15)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn7(mut _1: isize,mut _2: f32,mut _3: isize,mut _4: f32,mut _5: u32,mut _6: isize,mut _7: u64,mut _8: isize,mut _9: [isize; 2],mut _10: f32) -> i8 {
mir! {
type RET = i8;
let _11: i128;
let _12: (isize, f32, i8);
let _13: ();
let _14: ();
{
RET = -(-68_i8);
_6 = _1;
RET = !(-64_i8);
_11 = true as i128;
_8 = _11 as isize;
Goto(bb1)
}
bb1 = {
_6 = !_1;
_10 = _2 - _2;
_9 = [_3,_1];
RET = 18_i8;
RET = 17_i8 << _3;
_9 = [_1,_6];
_11 = (-23732173156509980096166816868959294990_i128) * 119877899120255286311461679705064097143_i128;
_11 = (-44865415678057735734143422409068147458_i128);
_12.0 = _3;
Goto(bb2)
}
bb2 = {
Call(_13 = dump_var(7_usize, 11_usize, Move(_11), 5_usize, Move(_5), 1_usize, Move(_1), 7_usize, Move(_7)), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn8(mut _1: [u32; 2],mut _2: ([bool; 6], isize),mut _3: *const f32,mut _4: *const f32) -> ([bool; 6], isize) {
mir! {
type RET = ([bool; 6], isize);
let _5: ([bool; 6], isize);
let _6: isize;
let _7: *const f32;
let _8: (([bool; 6], isize),);
let _9: isize;
let _10: i64;
let _11: f32;
let _12: Adt52;
let _13: Adt60;
let _14: i16;
let _15: Adt48;
let _16: isize;
let _17: ([i32; 1], [isize; 2], char);
let _18: [u32; 2];
let _19: [i128; 5];
let _20: (isize, f32, i8);
let _21: [i16; 4];
let _22: [i128; 5];
let _23: u128;
let _24: [u32; 2];
let _25: usize;
let _26: u32;
let _27: (i64, *mut [u64; 5], i64);
let _28: char;
let _29: bool;
let _30: isize;
let _31: *const (isize, f32, i8);
let _32: (([bool; 6], isize),);
let _33: bool;
let _34: isize;
let _35: i128;
let _36: isize;
let _37: bool;
let _38: (i32, *mut isize, *mut f32, usize, [u64; 5], isize, u128);
let _39: [i16; 4];
let _40: Adt51;
let _41: ();
let _42: ();
{
RET = (_2.0, _2.1);
RET.0 = [true,false,true,false,true,false];
_2.0 = [true,false,false,false,false,true];
_2 = (RET.0, RET.1);
_2 = (RET.0, RET.1);
_3 = _4;
_1 = [2707861242_u32,1846201187_u32];
_5 = (_2.0, _2.1);
_6 = _5.1;
_5.1 = _2.1;
_5.1 = -_2.1;
_2.1 = 21003_u16 as isize;
_7 = _4;
_3 = _7;
_2.1 = _5.1;
_2.1 = _6;
RET.1 = _6;
Goto(bb1)
}
bb1 = {
_5.1 = -RET.1;
_5.0 = [true,false,true,false,false,false];
_6 = RET.1 ^ _5.1;
RET = _5;
RET = (_5.0, _2.1);
_6 = !_5.1;
_8.0 = (_2.0, _2.1);
_6 = _8.0.1;
_7 = _4;
_3 = _7;
_5.1 = _6 - _8.0.1;
_5.1 = !_2.1;
_3 = _7;
RET.0 = _8.0.0;
_4 = core::ptr::addr_of!(_11);
(*_4) = 42669_u16 as f32;
_4 = core::ptr::addr_of!(_11);
_13.fld2 = _2.1 >> _6;
Goto(bb2)
}
bb2 = {
_14 = (-9706_i16);
_5.1 = 124_i8 as isize;
_13.fld3.3 = (-1983042576936810191_i64) as usize;
RET.1 = !_13.fld2;
_13.fld3.0 = (-816719834_i32) >> _6;
_5.0 = [true,false,false,false,false,true];
_13.fld3.6 = 82_i8 as u128;
_13.fld4 = -(-22037846669835025476365783447284992096_i128);
_9 = -_6;
_11 = 16863_u16 as f32;
_3 = core::ptr::addr_of!(_11);
_5.1 = -_6;
_5.1 = RET.1 & _8.0.1;
_13.fld0 = 4048342014_u32;
Goto(bb3)
}
bb3 = {
_13.fld0 = 4226282827_u32 | 4093285426_u32;
_13.fld3.1 = core::ptr::addr_of_mut!(_13.fld3.5);
_13.fld3.4 = [2597966026714785950_u64,13394783217473945313_u64,12406591846739758617_u64,884799231630235152_u64,1762296758875333912_u64];
_13.fld1 = core::ptr::addr_of_mut!((*_3));
_7 = core::ptr::addr_of!(_11);
RET = (_8.0.0, _5.1);
RET.0 = [false,true,true,false,false,true];
_13.fld0 = _13.fld3.0 as u32;
RET.1 = !_13.fld2;
_5 = (_2.0, _13.fld2);
_17.1 = [RET.1,_5.1];
_13.fld3.5 = -RET.1;
_14 = (-7220_i16) | 7513_i16;
(*_3) = 42620_u16 as f32;
RET = (_8.0.0, _8.0.1);
_13.fld1 = core::ptr::addr_of_mut!((*_3));
_4 = core::ptr::addr_of!((*_7));
_2 = _5;
_5.1 = -_13.fld2;
_13.fld3.2 = _13.fld1;
_13.fld3.2 = _13.fld1;
Goto(bb4)
}
bb4 = {
RET.1 = _5.1 + _13.fld2;
_8.0.0 = [false,false,true,true,true,true];
_13.fld4 = _13.fld3.6 as i128;
_20.0 = _5.1;
Goto(bb5)
}
bb5 = {
(*_7) = _14 as f32;
_20.1 = _13.fld0 as f32;
_3 = _4;
_21 = [_14,_14,_14,_14];
_20.0 = -RET.1;
_9 = _20.0;
_17.2 = '\u{3a16}';
_8 = (_5,);
_22 = [_13.fld4,_13.fld4,_13.fld4,_13.fld4,_13.fld4];
_17.0 = [_13.fld3.0];
_6 = _9 + _20.0;
_21 = [_14,_14,_14,_14];
(*_3) = _20.1 + _20.1;
_13.fld3.6 = 139376717241063108508860973033344621968_u128;
_23 = !_13.fld3.6;
_9 = _13.fld2 - _6;
(*_7) = -_20.1;
_13.fld3.1 = core::ptr::addr_of_mut!(_2.1);
_21 = [_14,_14,_14,_14];
_13.fld3.0 = (-813715507_i32);
_28 = _17.2;
_15 = Adt48::Variant2 { fld0: _21,fld1: _17.2,fld2: _7,fld3: _13.fld3.1,fld4: 59_u8 };
place!(Field::<u8>(Variant(_15, 2), 4)) = !217_u8;
_16 = _9;
_9 = _20.0;
match _13.fld3.6 {
0 => bb6,
1 => bb7,
2 => bb8,
139376717241063108508860973033344621968 => bb10,
_ => bb9
}
}
bb6 = {
RET.1 = _5.1 + _13.fld2;
_8.0.0 = [false,false,true,true,true,true];
_13.fld4 = _13.fld3.6 as i128;
_20.0 = _5.1;
Goto(bb5)
}
bb7 = {
_13.fld0 = 4226282827_u32 | 4093285426_u32;
_13.fld3.1 = core::ptr::addr_of_mut!(_13.fld3.5);
_13.fld3.4 = [2597966026714785950_u64,13394783217473945313_u64,12406591846739758617_u64,884799231630235152_u64,1762296758875333912_u64];
_13.fld1 = core::ptr::addr_of_mut!((*_3));
_7 = core::ptr::addr_of!(_11);
RET = (_8.0.0, _5.1);
RET.0 = [false,true,true,false,false,true];
_13.fld0 = _13.fld3.0 as u32;
RET.1 = !_13.fld2;
_5 = (_2.0, _13.fld2);
_17.1 = [RET.1,_5.1];
_13.fld3.5 = -RET.1;
_14 = (-7220_i16) | 7513_i16;
(*_3) = 42620_u16 as f32;
RET = (_8.0.0, _8.0.1);
_13.fld1 = core::ptr::addr_of_mut!((*_3));
_4 = core::ptr::addr_of!((*_7));
_2 = _5;
_5.1 = -_13.fld2;
_13.fld3.2 = _13.fld1;
_13.fld3.2 = _13.fld1;
Goto(bb4)
}
bb8 = {
_14 = (-9706_i16);
_5.1 = 124_i8 as isize;
_13.fld3.3 = (-1983042576936810191_i64) as usize;
RET.1 = !_13.fld2;
_13.fld3.0 = (-816719834_i32) >> _6;
_5.0 = [true,false,false,false,false,true];
_13.fld3.6 = 82_i8 as u128;
_13.fld4 = -(-22037846669835025476365783447284992096_i128);
_9 = -_6;
_11 = 16863_u16 as f32;
_3 = core::ptr::addr_of!(_11);
_5.1 = -_6;
_5.1 = RET.1 & _8.0.1;
_13.fld0 = 4048342014_u32;
Goto(bb3)
}
bb9 = {
_5.1 = -RET.1;
_5.0 = [true,false,true,false,false,false];
_6 = RET.1 ^ _5.1;
RET = _5;
RET = (_5.0, _2.1);
_6 = !_5.1;
_8.0 = (_2.0, _2.1);
_6 = _8.0.1;
_7 = _4;
_3 = _7;
_5.1 = _6 - _8.0.1;
_5.1 = !_2.1;
_3 = _7;
RET.0 = _8.0.0;
_4 = core::ptr::addr_of!(_11);
(*_4) = 42669_u16 as f32;
_4 = core::ptr::addr_of!(_11);
_13.fld2 = _2.1 >> _6;
Goto(bb2)
}
bb10 = {
_19 = [_13.fld4,_13.fld4,_13.fld4,_13.fld4,_13.fld4];
_17.0 = [_13.fld3.0];
_17.0 = [_13.fld3.0];
_23 = _14 as u128;
(*_3) = _14 as f32;
_30 = _13.fld4 as isize;
_31 = core::ptr::addr_of!(_20);
_10 = 6844287547708574869_i64 | 7539562160000734314_i64;
_32.0.1 = _10 as isize;
(*_4) = (*_31).1 * _20.1;
(*_31).1 = (*_3);
_32.0 = (_5.0, _6);
_18 = _1;
(*_31).2 = _13.fld4 as i8;
_33 = !true;
_17.0 = [_13.fld3.0];
_2.0 = [_33,_33,_33,_33,_33,_33];
_4 = core::ptr::addr_of!((*_4));
_23 = !_13.fld3.6;
_27.1 = core::ptr::addr_of_mut!(_13.fld3.4);
RET = _5;
_24 = [_13.fld0,_13.fld0];
_27.0 = _10 >> _6;
_13.fld2 = !_32.0.1;
Goto(bb11)
}
bb11 = {
_8.0 = (_2.0, _32.0.1);
RET = (_32.0.0, _5.1);
SetDiscriminant(_15, 1);
_32 = (_8.0,);
_8.0.1 = (*_31).0 - _13.fld2;
_8.0 = (RET.0, _9);
_20 = (_6, (*_3), (-45_i8));
place!(Field::<isize>(Variant(_15, 1), 2)) = _13.fld0 as isize;
_13.fld3.1 = core::ptr::addr_of_mut!(_20.0);
RET.1 = 27862_u16 as isize;
place!(Field::<(([bool; 6], isize),)>(Variant(_15, 1), 5)).0.1 = !(*_31).0;
(*_7) = (*_31).1 - (*_31).1;
place!(Field::<i128>(Variant(_15, 1), 0)) = _13.fld4;
_12 = Adt52::Variant1 { fld0: _17 };
_13.fld3.3 = 3_usize + 14926145641727104180_usize;
(*_31).0 = _32.0.1;
_5.0 = [_33,_33,_33,_33,_33,_33];
place!(Field::<(([bool; 6], isize),)>(Variant(_15, 1), 5)).0 = _32.0;
_7 = _4;
_3 = core::ptr::addr_of!(_11);
_13.fld1 = core::ptr::addr_of_mut!((*_7));
_35 = -_13.fld4;
(*_31) = (_13.fld2, _11, (-103_i8));
_25 = _13.fld3.3;
_13.fld3.0 = (-542998967_i32);
Goto(bb12)
}
bb12 = {
_20 = (_5.1, (*_3), (-5_i8));
_16 = _13.fld2;
_32.0 = _8.0;
RET.0 = _32.0.0;
RET.0 = [_33,_33,_33,_33,_33,_33];
_30 = -_6;
place!(Field::<*mut f32>(Variant(_15, 1), 4)) = core::ptr::addr_of_mut!((*_4));
_13.fld3.6 = _23 * _23;
_38.1 = _13.fld3.1;
_2.1 = _13.fld3.3 as isize;
SetDiscriminant(_12, 2);
place!(Field::<([bool; 6], isize)>(Variant(_12, 2), 4)).1 = _9 >> _9;
_5.0 = Field::<(([bool; 6], isize),)>(Variant(_15, 1), 5).0.0;
_13.fld3.6 = _23;
_39 = [_14,_14,_14,_14];
_25 = !_13.fld3.3;
_27.1 = core::ptr::addr_of_mut!(_38.4);
Call(_12 = fn9(_13.fld3, _31, _4, _8.0, _30, _30, _33), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
_38.3 = _25 - _25;
_6 = !_30;
Goto(bb14)
}
bb14 = {
SetDiscriminant(_12, 2);
RET = (_5.0, _16);
Goto(bb15)
}
bb15 = {
Call(_41 = dump_var(8_usize, 9_usize, Move(_9), 14_usize, Move(_14), 19_usize, Move(_19), 28_usize, Move(_28)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_41 = dump_var(8_usize, 21_usize, Move(_21), 17_usize, Move(_17), 10_usize, Move(_10), 16_usize, Move(_16)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_41 = dump_var(8_usize, 1_usize, Move(_1), 5_usize, Move(_5), 35_usize, Move(_35), 42_usize, _42), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn9(mut _1: (i32, *mut isize, *mut f32, usize, [u64; 5], isize, u128),mut _2: *const (isize, f32, i8),mut _3: *const f32,mut _4: ([bool; 6], isize),mut _5: isize,mut _6: isize,mut _7: bool) -> Adt52 {
mir! {
type RET = Adt52;
let _8: bool;
let _9: ([i32; 1], [isize; 2], char);
let _10: [i128; 5];
let _11: (u32, u16, u64);
let _12: f32;
let _13: bool;
let _14: u128;
let _15: [bool; 6];
let _16: u16;
let _17: ((u16, isize, *const f32, u64, i16),);
let _18: ();
let _19: ();
{
_4.0 = [_7,_7,_7,_7,_7,_7];
(*_2).0 = !_5;
_4.0 = [_7,_7,_7,_7,_7,_7];
_1.5 = (*_2).2 as isize;
_1.3 = !2_usize;
_3 = core::ptr::addr_of!((*_2).1);
_1.4 = [5453882687648203045_u64,12152477107823466576_u64,13534236606393516800_u64,5023535314711602291_u64,15590138843158993335_u64];
_8 = _7;
(*_2).2 = 49_i8;
(*_2).1 = 16368_i16 as f32;
_1.2 = core::ptr::addr_of_mut!((*_2).1);
_5 = _1.5 << _4.1;
_1.0 = 881121020_i32;
(*_3) = 5635679233555920737_u64 as f32;
(*_2).0 = _1.5 - _4.1;
_4.1 = _1.5 & _1.5;
(*_3) = _1.6 as f32;
_2 = core::ptr::addr_of!((*_2));
_2 = core::ptr::addr_of!((*_2));
_4.0 = [_8,_8,_7,_8,_7,_7];
_1.0 = -234028592_i32;
_8 = !_7;
_1.0 = 1858419410_i32 ^ (-1588775621_i32);
(*_3) = _5 as f32;
_1.6 = !255771286831006518698620817242864143971_u128;
_9.0 = [_1.0];
match (*_2).2 {
49 => bb2,
_ => bb1
}
}
bb1 = {
Return()
}
bb2 = {
(*_2).0 = -_5;
(*_2).2 = !124_i8;
(*_3) = _1.3 as f32;
_9.0 = [_1.0];
(*_2).2 = -(-10_i8);
Goto(bb3)
}
bb3 = {
_10 = [(-80325357495138642828605161404731600573_i128),(-104769428192311551358583200358468765000_i128),159627255006578440700645438142541182063_i128,(-4242490584714646300632823443269758565_i128),(-14071147632408131009454518337234136543_i128)];
_9.2 = '\u{3b492}';
_11.2 = 9504013424126866302_u64;
(*_3) = 59194_u16 as f32;
_8 = _7;
(*_3) = 29835_u16 as f32;
_4.1 = _1.3 as isize;
_12 = _6 as f32;
_12 = (*_2).1 - (*_2).1;
_9.1 = [_5,_6];
_10 = [156289181780306863530056184635298210756_i128,1880688823248924792403529461698167168_i128,(-15492189521707922899210447979527608354_i128),(-45000253546806031946023312106293278135_i128),(-120868349249453751375808838025478003430_i128)];
_1.0 = 31878_i16 as i32;
_8 = !_7;
_1.6 = 230053635926786102675834239814508414148_u128 ^ 305031137446412825296361794457068410596_u128;
(*_3) = -_12;
(*_3) = -_12;
match _11.2 {
0 => bb1,
1 => bb2,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
9504013424126866302 => bb9,
_ => bb8
}
}
bb4 = {
(*_2).0 = -_5;
(*_2).2 = !124_i8;
(*_3) = _1.3 as f32;
_9.0 = [_1.0];
(*_2).2 = -(-10_i8);
Goto(bb3)
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
_1.5 = 3912809516_u32 as isize;
_9.2 = '\u{a5930}';
(*_2).2 = 2978177209640352042_i64 as i8;
Goto(bb10)
}
bb10 = {
_11.0 = !1993934947_u32;
_9.0 = [_1.0];
_6 = (*_2).0;
_9.1 = [(*_2).0,_5];
_13 = !_8;
(*_3) = _11.2 as f32;
_7 = _8;
_11 = (2459004272_u32, 24118_u16, 488960318227142418_u64);
(*_2).1 = (*_2).2 as f32;
_13 = _8;
RET = Adt52::Variant1 { fld0: _9 };
_14 = _1.6;
(*_2).0 = _6 ^ _6;
_13 = !_8;
_9.2 = Field::<([i32; 1], [isize; 2], char)>(Variant(RET, 1), 0).2;
(*_2).2 = _11.1 as i8;
_13 = _8 & _7;
_11 = (1414138529_u32, 33907_u16, 2237919549157692734_u64);
place!(Field::<([i32; 1], [isize; 2], char)>(Variant(RET, 1), 0)).1 = _9.1;
_11.1 = 8729_u16 << (*_2).0;
(*_2).1 = _12;
_16 = !_11.1;
_11.1 = _16;
place!(Field::<([i32; 1], [isize; 2], char)>(Variant(RET, 1), 0)) = (_9.0, _9.1, _9.2);
_14 = _1.6;
place!(Field::<([i32; 1], [isize; 2], char)>(Variant(RET, 1), 0)) = (_9.0, _9.1, _9.2);
_17.0.3 = !_11.2;
Goto(bb11)
}
bb11 = {
Call(_18 = dump_var(9_usize, 7_usize, Move(_7), 4_usize, Move(_4), 6_usize, Move(_6), 13_usize, Move(_13)), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
Call(_18 = dump_var(9_usize, 10_usize, Move(_10), 19_usize, _19, 19_usize, _19, 19_usize, _19), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn10(mut _1: ([bool; 6], isize),mut _2: isize,mut _3: [bool; 6],mut _4: (([bool; 6], isize),),mut _5: (([bool; 6], isize),),mut _6: ([bool; 6], isize),mut _7: isize,mut _8: isize,mut _9: ([bool; 6], isize),mut _10: (([bool; 6], isize),),mut _11: isize,mut _12: isize,mut _13: isize,mut _14: isize,mut _15: isize,mut _16: ([bool; 6], isize)) -> *const f32 {
mir! {
type RET = *const f32;
let _17: usize;
let _18: Adt58;
let _19: ([bool; 6], isize);
let _20: *mut [u64; 5];
let _21: [u32; 6];
let _22: [isize; 2];
let _23: isize;
let _24: Adt62;
let _25: *mut f32;
let _26: [u32; 6];
let _27: i32;
let _28: ((u32, u16, u64), usize);
let _29: char;
let _30: Adt62;
let _31: i8;
let _32: [isize; 2];
let _33: isize;
let _34: i128;
let _35: f32;
let _36: [i32; 1];
let _37: Adt60;
let _38: bool;
let _39: *const i32;
let _40: [i16; 4];
let _41: i16;
let _42: Adt54;
let _43: bool;
let _44: f32;
let _45: isize;
let _46: [char; 1];
let _47: (([bool; 6], isize),);
let _48: ([i32; 1], [isize; 2], char);
let _49: [i16; 4];
let _50: Adt50;
let _51: ();
let _52: ();
{
_5.0 = _10.0;
_17 = 15545631354090137236_usize;
_18.fld1.0.1 = _13 | _11;
_19.0 = _16.0;
_18.fld3.1 = !_6.1;
_1.0 = [false,false,true,false,false,false];
_4.0 = _9;
_19.1 = _9.1;
_18.fld0 = !false;
_18.fld1.0.0 = '\u{5e7e8}' as u16;
_15 = !_18.fld3.1;
_9.0 = _19.0;
_21 = [1485830425_u32,136328606_u32,3680795304_u32,2862244906_u32,2561120454_u32,148226984_u32];
_7 = !_2;
_18.fld1.0.3 = 8205562408738702390_u64;
_9.0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_4.0.0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_18.fld1.0.4 = -(-14027_i16);
_22 = [_18.fld1.0.1,_4.0.1];
_4.0.1 = _17 as isize;
_6.0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_5.0 = _9;
Goto(bb1)
}
bb1 = {
_18.fld3 = _1;
_23 = _1.1 * _13;
_10 = (_1,);
_24 = Adt62::Variant1 { fld0: 310663257449914070313176264924723667082_u128 };
_5.0.1 = _14 | _10.0.1;
_18.fld1.0.1 = _18.fld1.0.0 as isize;
_15 = _7;
_16.0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_8 = 113247908_i32 as isize;
_19 = (_3, _2);
_19.1 = _15;
_4.0.1 = _23;
_4.0.1 = 41_u8 as isize;
_4.0 = (_3, _6.1);
_16.0 = _19.0;
_16.1 = 8757772859997478059_i64 as isize;
_10 = _5;
place!(Field::<u128>(Variant(_24, 1), 0)) = 252469738559230354258211151736267379717_u128;
_5.0 = _6;
_18.fld0 = true;
_6.0 = _1.0;
_26 = [1534400479_u32,2000392650_u32,806612501_u32,1428911745_u32,1604967757_u32,2013930208_u32];
_19.0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_28.0.0 = 1226974599_u32 >> _23;
_28.0 = (1670047629_u32, _18.fld1.0.0, _18.fld1.0.3);
_5 = _10;
SetDiscriminant(_24, 1);
Goto(bb2)
}
bb2 = {
_6.1 = _10.0.1;
_23 = _5.0.1;
_1.0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_4 = (_9,);
_10.0.1 = 2_u8 as isize;
_27 = 1830558601_i32;
_23 = 37459481981083857276699188363802736694_u128 as isize;
_13 = _5.0.1;
_10.0.1 = _9.1;
_6.0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_18.fld1.0.1 = _10.0.1 ^ _18.fld3.1;
_18.fld1.0.1 = _10.0.1;
_19.1 = _28.0.1 as isize;
_26 = [_28.0.0,_28.0.0,_28.0.0,_28.0.0,_28.0.0,_28.0.0];
_18.fld3.1 = -_11;
_28.1 = (-5649213401580832775_i64) as usize;
_4.0 = (_3, _13);
_21 = _26;
_9.1 = _18.fld1.0.1;
_4.0.0 = _18.fld3.0;
_18.fld3.0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_18.fld3 = (_19.0, _15);
_24 = Adt62::Variant1 { fld0: 252875790263944767119697133836015514620_u128 };
_19.0 = _10.0.0;
_28.0.1 = !_18.fld1.0.0;
_16.0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_18.fld1.0.0 = !_28.0.1;
_28.0.1 = !_18.fld1.0.0;
Goto(bb3)
}
bb3 = {
_18.fld3 = _4.0;
_32 = [_11,_1.1];
_4 = (_6,);
_15 = _10.0.1 ^ _5.0.1;
_31 = (-57_i8) + (-110_i8);
place!(Field::<u128>(Variant(_24, 1), 0)) = (-4312060608922015373_i64) as u128;
SetDiscriminant(_24, 0);
_12 = _15 + _11;
_19.1 = _4.0.1;
place!(Field::<i8>(Variant(_24, 0), 3)) = _31;
_28.0.2 = _18.fld1.0.3 << _9.1;
place!(Field::<Adt55>(Variant(_24, 0), 2)).fld0.4 = _18.fld1.0.4 ^ _18.fld1.0.4;
place!(Field::<Adt55>(Variant(_24, 0), 2)).fld0.3 = _28.0.0 as u64;
place!(Field::<i8>(Variant(_24, 0), 3)) = _31 ^ _31;
_37.fld2 = _18.fld3.1;
place!(Field::<Adt55>(Variant(_24, 0), 2)).fld0.2 = core::ptr::addr_of!(_35);
_29 = '\u{96f70}';
_10.0.1 = _4.0.1 >> _5.0.1;
place!(Field::<(i32, f64, i32)>(Variant(_24, 0), 5)).0 = (-6049440091791513298_i64) as i32;
RET = core::ptr::addr_of!(_35);
match _28.0.0 {
0 => bb4,
1 => bb5,
1670047629 => bb7,
_ => bb6
}
}
bb4 = {
_6.1 = _10.0.1;
_23 = _5.0.1;
_1.0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_4 = (_9,);
_10.0.1 = 2_u8 as isize;
_27 = 1830558601_i32;
_23 = 37459481981083857276699188363802736694_u128 as isize;
_13 = _5.0.1;
_10.0.1 = _9.1;
_6.0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_18.fld1.0.1 = _10.0.1 ^ _18.fld3.1;
_18.fld1.0.1 = _10.0.1;
_19.1 = _28.0.1 as isize;
_26 = [_28.0.0,_28.0.0,_28.0.0,_28.0.0,_28.0.0,_28.0.0];
_18.fld3.1 = -_11;
_28.1 = (-5649213401580832775_i64) as usize;
_4.0 = (_3, _13);
_21 = _26;
_9.1 = _18.fld1.0.1;
_4.0.0 = _18.fld3.0;
_18.fld3.0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_18.fld3 = (_19.0, _15);
_24 = Adt62::Variant1 { fld0: 252875790263944767119697133836015514620_u128 };
_19.0 = _10.0.0;
_28.0.1 = !_18.fld1.0.0;
_16.0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_18.fld1.0.0 = !_28.0.1;
_28.0.1 = !_18.fld1.0.0;
Goto(bb3)
}
bb5 = {
_18.fld3 = _1;
_23 = _1.1 * _13;
_10 = (_1,);
_24 = Adt62::Variant1 { fld0: 310663257449914070313176264924723667082_u128 };
_5.0.1 = _14 | _10.0.1;
_18.fld1.0.1 = _18.fld1.0.0 as isize;
_15 = _7;
_16.0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_8 = 113247908_i32 as isize;
_19 = (_3, _2);
_19.1 = _15;
_4.0.1 = _23;
_4.0.1 = 41_u8 as isize;
_4.0 = (_3, _6.1);
_16.0 = _19.0;
_16.1 = 8757772859997478059_i64 as isize;
_10 = _5;
place!(Field::<u128>(Variant(_24, 1), 0)) = 252469738559230354258211151736267379717_u128;
_5.0 = _6;
_18.fld0 = true;
_6.0 = _1.0;
_26 = [1534400479_u32,2000392650_u32,806612501_u32,1428911745_u32,1604967757_u32,2013930208_u32];
_19.0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_28.0.0 = 1226974599_u32 >> _23;
_28.0 = (1670047629_u32, _18.fld1.0.0, _18.fld1.0.3);
_5 = _10;
SetDiscriminant(_24, 1);
Goto(bb2)
}
bb6 = {
Return()
}
bb7 = {
_19.0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
(*RET) = _28.0.1 as f32;
Goto(bb8)
}
bb8 = {
_4 = _5;
match _28.0.0 {
0 => bb9,
1 => bb10,
2 => bb11,
1670047629 => bb13,
_ => bb12
}
}
bb9 = {
_6.1 = _10.0.1;
_23 = _5.0.1;
_1.0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_4 = (_9,);
_10.0.1 = 2_u8 as isize;
_27 = 1830558601_i32;
_23 = 37459481981083857276699188363802736694_u128 as isize;
_13 = _5.0.1;
_10.0.1 = _9.1;
_6.0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_18.fld1.0.1 = _10.0.1 ^ _18.fld3.1;
_18.fld1.0.1 = _10.0.1;
_19.1 = _28.0.1 as isize;
_26 = [_28.0.0,_28.0.0,_28.0.0,_28.0.0,_28.0.0,_28.0.0];
_18.fld3.1 = -_11;
_28.1 = (-5649213401580832775_i64) as usize;
_4.0 = (_3, _13);
_21 = _26;
_9.1 = _18.fld1.0.1;
_4.0.0 = _18.fld3.0;
_18.fld3.0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_18.fld3 = (_19.0, _15);
_24 = Adt62::Variant1 { fld0: 252875790263944767119697133836015514620_u128 };
_19.0 = _10.0.0;
_28.0.1 = !_18.fld1.0.0;
_16.0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_18.fld1.0.0 = !_28.0.1;
_28.0.1 = !_18.fld1.0.0;
Goto(bb3)
}
bb10 = {
Return()
}
bb11 = {
_18.fld3 = _1;
_23 = _1.1 * _13;
_10 = (_1,);
_24 = Adt62::Variant1 { fld0: 310663257449914070313176264924723667082_u128 };
_5.0.1 = _14 | _10.0.1;
_18.fld1.0.1 = _18.fld1.0.0 as isize;
_15 = _7;
_16.0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_8 = 113247908_i32 as isize;
_19 = (_3, _2);
_19.1 = _15;
_4.0.1 = _23;
_4.0.1 = 41_u8 as isize;
_4.0 = (_3, _6.1);
_16.0 = _19.0;
_16.1 = 8757772859997478059_i64 as isize;
_10 = _5;
place!(Field::<u128>(Variant(_24, 1), 0)) = 252469738559230354258211151736267379717_u128;
_5.0 = _6;
_18.fld0 = true;
_6.0 = _1.0;
_26 = [1534400479_u32,2000392650_u32,806612501_u32,1428911745_u32,1604967757_u32,2013930208_u32];
_19.0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_28.0.0 = 1226974599_u32 >> _23;
_28.0 = (1670047629_u32, _18.fld1.0.0, _18.fld1.0.3);
_5 = _10;
SetDiscriminant(_24, 1);
Goto(bb2)
}
bb12 = {
_6.1 = _10.0.1;
_23 = _5.0.1;
_1.0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_4 = (_9,);
_10.0.1 = 2_u8 as isize;
_27 = 1830558601_i32;
_23 = 37459481981083857276699188363802736694_u128 as isize;
_13 = _5.0.1;
_10.0.1 = _9.1;
_6.0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_18.fld1.0.1 = _10.0.1 ^ _18.fld3.1;
_18.fld1.0.1 = _10.0.1;
_19.1 = _28.0.1 as isize;
_26 = [_28.0.0,_28.0.0,_28.0.0,_28.0.0,_28.0.0,_28.0.0];
_18.fld3.1 = -_11;
_28.1 = (-5649213401580832775_i64) as usize;
_4.0 = (_3, _13);
_21 = _26;
_9.1 = _18.fld1.0.1;
_4.0.0 = _18.fld3.0;
_18.fld3.0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_18.fld3 = (_19.0, _15);
_24 = Adt62::Variant1 { fld0: 252875790263944767119697133836015514620_u128 };
_19.0 = _10.0.0;
_28.0.1 = !_18.fld1.0.0;
_16.0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_18.fld1.0.0 = !_28.0.1;
_28.0.1 = !_18.fld1.0.0;
Goto(bb3)
}
bb13 = {
_18.fld3.1 = _4.0.1;
_36 = [Field::<(i32, f64, i32)>(Variant(_24, 0), 5).0];
_18.fld3.1 = _2;
_37.fld1 = core::ptr::addr_of_mut!(_35);
_8 = !_18.fld1.0.1;
_37.fld3.0 = -_27;
_19.1 = _12;
_28.0.1 = !_18.fld1.0.0;
_1.0 = _3;
_37.fld3.3 = !_28.1;
_17 = _27 as usize;
_17 = _37.fld3.3;
_4.0 = (_1.0, _13);
_37.fld3.5 = (-2690610058219790404_i64) as isize;
_13 = -_12;
Goto(bb14)
}
bb14 = {
_18.fld1.0.0 = _28.0.1 + _28.0.1;
_2 = _1.1 - _10.0.1;
_19.0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_10.0.1 = -_2;
_28.0.1 = Field::<i8>(Variant(_24, 0), 3) as u16;
_37.fld3.5 = Field::<i8>(Variant(_24, 0), 3) as isize;
place!(Field::<Adt55>(Variant(_24, 0), 2)).fld0.0 = _28.0.1 ^ _28.0.1;
_8 = _29 as isize;
_44 = (*RET);
_13 = _19.1;
_46 = [_29];
_38 = _10.0.1 > _10.0.1;
_47.0 = (_18.fld3.0, _37.fld2);
place!(Field::<u32>(Variant(_24, 0), 1)) = _28.0.0 - _28.0.0;
_28.0 = (Field::<u32>(Variant(_24, 0), 1), Field::<Adt55>(Variant(_24, 0), 2).fld0.0, Field::<Adt55>(Variant(_24, 0), 2).fld0.3);
_5 = _4;
_19 = _47.0;
_41 = Field::<Adt55>(Variant(_24, 0), 2).fld0.4;
_50.fld2.0 = _27;
_46 = [_29];
place!(Field::<Adt55>(Variant(_24, 0), 2)).fld0 = (_28.0.1, _12, RET, _28.0.2, _41);
_50.fld5.1 = _17;
Goto(bb15)
}
bb15 = {
Call(_51 = dump_var(10_usize, 12_usize, Move(_12), 6_usize, Move(_6), 14_usize, Move(_14), 7_usize, Move(_7)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_51 = dump_var(10_usize, 2_usize, Move(_2), 27_usize, Move(_27), 47_usize, Move(_47), 17_usize, Move(_17)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_51 = dump_var(10_usize, 9_usize, Move(_9), 31_usize, Move(_31), 5_usize, Move(_5), 26_usize, Move(_26)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_51 = dump_var(10_usize, 4_usize, Move(_4), 38_usize, Move(_38), 21_usize, Move(_21), 13_usize, Move(_13)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn11(mut _1: isize,mut _2: ([bool; 6], isize),mut _3: (([bool; 6], isize),),mut _4: ([bool; 6], isize),mut _5: isize,mut _6: (u32, u16, u64),mut _7: isize,mut _8: isize,mut _9: isize,mut _10: ([bool; 6], isize),mut _11: ([bool; 6], isize),mut _12: isize,mut _13: isize,mut _14: ([bool; 6], isize),mut _15: [isize; 2],mut _16: isize) -> *mut [u64; 5] {
mir! {
type RET = *mut [u64; 5];
let _17: [bool; 6];
let _18: ([i32; 1], [isize; 2], char);
let _19: Adt49;
let _20: u8;
let _21: f64;
let _22: i32;
let _23: (isize, f32, i8);
let _24: *mut *const f32;
let _25: u64;
let _26: isize;
let _27: *mut *const f32;
let _28: (i32, f64, i32);
let _29: Adt59;
let _30: char;
let _31: u128;
let _32: f32;
let _33: char;
let _34: i64;
let _35: [bool; 6];
let _36: ((u16, isize, *const f32, u64, i16),);
let _37: Adt62;
let _38: Adt59;
let _39: bool;
let _40: Adt62;
let _41: (isize, f32, i8);
let _42: ((u32, u16, u64), usize);
let _43: f64;
let _44: i32;
let _45: f32;
let _46: bool;
let _47: ([bool; 6], isize);
let _48: *mut [u64; 5];
let _49: u16;
let _50: (isize, f32, i8);
let _51: *mut isize;
let _52: u8;
let _53: [i128; 5];
let _54: *mut *const f32;
let _55: isize;
let _56: (([bool; 6], isize),);
let _57: f64;
let _58: ([i32; 1], [isize; 2], char);
let _59: [i16; 4];
let _60: f64;
let _61: ([i32; 1], [isize; 2], char);
let _62: [i128; 5];
let _63: [bool; 6];
let _64: i16;
let _65: isize;
let _66: i16;
let _67: char;
let _68: ([i32; 1], [isize; 2], char);
let _69: [char; 1];
let _70: u32;
let _71: u16;
let _72: (i32, f64, i32);
let _73: i32;
let _74: bool;
let _75: ([bool; 6], isize);
let _76: u16;
let _77: i64;
let _78: bool;
let _79: [char; 1];
let _80: (([bool; 6], isize),);
let _81: u16;
let _82: bool;
let _83: bool;
let _84: usize;
let _85: char;
let _86: Adt61;
let _87: f32;
let _88: ((u32, u16, u64), usize);
let _89: char;
let _90: *mut *const f32;
let _91: usize;
let _92: [isize; 2];
let _93: Adt53;
let _94: (u16, isize, *const f32, u64, i16);
let _95: (([bool; 6], isize),);
let _96: ([bool; 6], isize);
let _97: bool;
let _98: isize;
let _99: ((u32, u16, u64), usize);
let _100: char;
let _101: i64;
let _102: bool;
let _103: [u64; 5];
let _104: (([bool; 6], isize),);
let _105: f32;
let _106: [bool; 6];
let _107: [i32; 1];
let _108: f32;
let _109: isize;
let _110: Adt49;
let _111: *mut f32;
let _112: isize;
let _113: [i128; 5];
let _114: f32;
let _115: [i16; 4];
let _116: ([i32; 1], [isize; 2], char);
let _117: isize;
let _118: [i32; 1];
let _119: ();
let _120: ();
{
_6.1 = !32413_u16;
_10 = (_2.0, _5);
_10 = (_3.0.0, _2.1);
_4.0 = [true,false,false,true,false,true];
_3 = (_14,);
_6.0 = 3002794379_u32 - 3883319055_u32;
_6.2 = 3_usize as u64;
_8 = !_10.1;
_1 = -_2.1;
_4 = (_3.0.0, _12);
_2.1 = !_16;
_17 = _4.0;
_11 = (_3.0.0, _5);
_10.1 = _6.0 as isize;
_2.1 = 5359191892001654746_i64 as isize;
_10.1 = _4.1 >> _9;
_8 = _9 ^ _12;
_12 = (-4860964919889673622_i64) as isize;
_3.0.1 = _13 | _13;
_15 = [_13,_3.0.1];
_11.0 = [true,true,true,true,true,true];
Goto(bb1)
}
bb1 = {
_11 = (_2.0, _14.1);
_3.0 = _10;
_13 = _3.0.1 * _5;
_16 = 1016393785_i32 as isize;
_3.0 = _10;
_6.2 = !16854338572316817798_u64;
_5 = _9 | _9;
_10.1 = _4.1;
_8 = _5;
_6.0 = !2952557365_u32;
_3.0 = (_14.0, _8);
_14.0 = _4.0;
_14 = (_17, _1);
_3.0.0 = [false,true,true,false,true,false];
_4 = (_17, _8);
_4.1 = _13 | _10.1;
_6 = (1137197769_u32, 36242_u16, 4534640668147518387_u64);
_6.0 = !3306796414_u32;
_2 = (_3.0.0, _13);
Call(_2.0 = fn12(_17, _4.1, _3.0, _13, _4.1, _2.1, _13, _8, _12, _15, _7, _15, _3, _14, _2.1, _2.1), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_14 = _3.0;
_11.0 = [true,true,false,false,true,true];
_6.1 = 52519_u16;
_16 = _13;
_18.1 = [_13,_3.0.1];
_10.1 = _6.1 as isize;
_1 = _8;
_3.0.0 = [true,false,true,true,false,false];
_14.1 = _8 - _8;
_17 = [false,true,true,false,true,true];
_11.0 = _10.0;
_14 = (_3.0.0, _13);
_4 = _14;
_6.1 = 6609_u16;
_13 = !_16;
_16 = _6.0 as isize;
_16 = _2.1;
Goto(bb3)
}
bb3 = {
_14.0 = [false,true,false,false,true,false];
_11 = (_2.0, _1);
_7 = 161_u8 as isize;
_6 = (3030967894_u32, 37295_u16, 2479054002009524117_u64);
_17 = [false,true,true,true,true,true];
_11.0 = _4.0;
_10.0 = _2.0;
_18.0 = [1408292613_i32];
_14.1 = _1 >> _1;
_16 = _3.0.1 >> _2.1;
_2.0 = _4.0;
_8 = _13;
_6.0 = 248_u8 as u32;
_18.0 = [1221570171_i32];
_3.0.1 = _6.0 as isize;
Call(_11.1 = core::intrinsics::bswap(_5), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_4 = (_17, _1);
_6 = (566289488_u32, 1854_u16, 5387592283058602809_u64);
_16 = -_2.1;
_1 = (-70_i8) as isize;
match _6.2 {
0 => bb1,
1 => bb2,
5387592283058602809 => bb5,
_ => bb3
}
}
bb5 = {
_7 = _9 * _2.1;
_3 = (_14,);
_11.1 = _14.1 << _7;
_16 = _2.1 ^ _2.1;
_2.1 = -_5;
_21 = 204518561931873726503564308375261095702_u128 as f64;
_8 = 8944_i16 as isize;
_4 = _3.0;
_22 = (-1678737134_i32);
_17 = _10.0;
_23.1 = 273727597803777173606245077492700814768_u128 as f32;
_23.0 = !_16;
_10.1 = -_11.1;
_3.0 = _10;
_22 = false as i32;
_23.1 = _7 as f32;
_18.0 = [_22];
_3.0.1 = _21 as isize;
_28 = (_22, _21, _22);
match _6.2 {
0 => bb1,
1 => bb2,
2 => bb6,
3 => bb7,
4 => bb8,
5387592283058602809 => bb10,
_ => bb9
}
}
bb6 = {
_4 = (_17, _1);
_6 = (566289488_u32, 1854_u16, 5387592283058602809_u64);
_16 = -_2.1;
_1 = (-70_i8) as isize;
match _6.2 {
0 => bb1,
1 => bb2,
5387592283058602809 => bb5,
_ => bb3
}
}
bb7 = {
_14.0 = [false,true,false,false,true,false];
_11 = (_2.0, _1);
_7 = 161_u8 as isize;
_6 = (3030967894_u32, 37295_u16, 2479054002009524117_u64);
_17 = [false,true,true,true,true,true];
_11.0 = _4.0;
_10.0 = _2.0;
_18.0 = [1408292613_i32];
_14.1 = _1 >> _1;
_16 = _3.0.1 >> _2.1;
_2.0 = _4.0;
_8 = _13;
_6.0 = 248_u8 as u32;
_18.0 = [1221570171_i32];
_3.0.1 = _6.0 as isize;
Call(_11.1 = core::intrinsics::bswap(_5), ReturnTo(bb4), UnwindUnreachable())
}
bb8 = {
_14 = _3.0;
_11.0 = [true,true,false,false,true,true];
_6.1 = 52519_u16;
_16 = _13;
_18.1 = [_13,_3.0.1];
_10.1 = _6.1 as isize;
_1 = _8;
_3.0.0 = [true,false,true,true,false,false];
_14.1 = _8 - _8;
_17 = [false,true,true,false,true,true];
_11.0 = _10.0;
_14 = (_3.0.0, _13);
_4 = _14;
_6.1 = 6609_u16;
_13 = !_16;
_16 = _6.0 as isize;
_16 = _2.1;
Goto(bb3)
}
bb9 = {
_11 = (_2.0, _14.1);
_3.0 = _10;
_13 = _3.0.1 * _5;
_16 = 1016393785_i32 as isize;
_3.0 = _10;
_6.2 = !16854338572316817798_u64;
_5 = _9 | _9;
_10.1 = _4.1;
_8 = _5;
_6.0 = !2952557365_u32;
_3.0 = (_14.0, _8);
_14.0 = _4.0;
_14 = (_17, _1);
_3.0.0 = [false,true,true,false,true,false];
_4 = (_17, _8);
_4.1 = _13 | _10.1;
_6 = (1137197769_u32, 36242_u16, 4534640668147518387_u64);
_6.0 = !3306796414_u32;
_2 = (_3.0.0, _13);
Call(_2.0 = fn12(_17, _4.1, _3.0, _13, _4.1, _2.1, _13, _8, _12, _15, _7, _15, _3, _14, _2.1, _2.1), ReturnTo(bb2), UnwindUnreachable())
}
bb10 = {
_2.0 = [true,false,true,false,true,false];
_23.2 = 97_i8;
_21 = -_28.1;
_18.1 = [_10.1,_10.1];
_25 = _6.2;
_15 = [_2.1,_4.1];
_2 = _14;
_1 = _13 * _10.1;
_3 = (_10,);
_28.1 = -_21;
_30 = '\u{3f398}';
_18.1 = [_3.0.1,_5];
_23.2 = -32_i8;
_3.0 = _4;
_11 = (_2.0, _13);
_2.0 = _4.0;
Goto(bb11)
}
bb11 = {
_14.1 = _2.1;
_28.2 = _22 ^ _28.0;
_23.0 = _1;
_22 = -_28.2;
_26 = !_3.0.1;
_9 = _6.1 as isize;
_20 = 235_u8 << _23.0;
_15 = [_26,_23.0];
_20 = false as u8;
_10 = (_3.0.0, _4.1);
_3.0.0 = [true,true,true,false,false,true];
_6.1 = 42043_u16;
_4 = _11;
_7 = !_16;
_11 = _3.0;
_12 = _2.1 >> _16;
_25 = _6.1 as u64;
_25 = !_6.2;
_23.0 = _14.1 | _1;
_35 = [true,false,false,true,false,false];
_36.0.1 = _12 >> _8;
match _6.0 {
0 => bb10,
1 => bb5,
2 => bb3,
3 => bb4,
4 => bb12,
5 => bb13,
566289488 => bb15,
_ => bb14
}
}
bb12 = {
_2.0 = [true,false,true,false,true,false];
_23.2 = 97_i8;
_21 = -_28.1;
_18.1 = [_10.1,_10.1];
_25 = _6.2;
_15 = [_2.1,_4.1];
_2 = _14;
_1 = _13 * _10.1;
_3 = (_10,);
_28.1 = -_21;
_30 = '\u{3f398}';
_18.1 = [_3.0.1,_5];
_23.2 = -32_i8;
_3.0 = _4;
_11 = (_2.0, _13);
_2.0 = _4.0;
Goto(bb11)
}
bb13 = {
_11 = (_2.0, _14.1);
_3.0 = _10;
_13 = _3.0.1 * _5;
_16 = 1016393785_i32 as isize;
_3.0 = _10;
_6.2 = !16854338572316817798_u64;
_5 = _9 | _9;
_10.1 = _4.1;
_8 = _5;
_6.0 = !2952557365_u32;
_3.0 = (_14.0, _8);
_14.0 = _4.0;
_14 = (_17, _1);
_3.0.0 = [false,true,true,false,true,false];
_4 = (_17, _8);
_4.1 = _13 | _10.1;
_6 = (1137197769_u32, 36242_u16, 4534640668147518387_u64);
_6.0 = !3306796414_u32;
_2 = (_3.0.0, _13);
Call(_2.0 = fn12(_17, _4.1, _3.0, _13, _4.1, _2.1, _13, _8, _12, _15, _7, _15, _3, _14, _2.1, _2.1), ReturnTo(bb2), UnwindUnreachable())
}
bb14 = {
_14 = _3.0;
_11.0 = [true,true,false,false,true,true];
_6.1 = 52519_u16;
_16 = _13;
_18.1 = [_13,_3.0.1];
_10.1 = _6.1 as isize;
_1 = _8;
_3.0.0 = [true,false,true,true,false,false];
_14.1 = _8 - _8;
_17 = [false,true,true,false,true,true];
_11.0 = _10.0;
_14 = (_3.0.0, _13);
_4 = _14;
_6.1 = 6609_u16;
_13 = !_16;
_16 = _6.0 as isize;
_16 = _2.1;
Goto(bb3)
}
bb15 = {
_22 = _28.2 << _36.0.1;
_6.1 = !61050_u16;
_36.0.3 = _6.2 & _6.2;
_35 = _17;
_36.0.0 = _23.1 as u16;
_27 = core::ptr::addr_of_mut!(_36.0.2);
_23.1 = (-1508857090974791743_i64) as f32;
_4.1 = _12 & _1;
_21 = _28.1 + _28.1;
_42 = (_6, 8402160782703037629_usize);
_18.2 = _30;
_6 = (_42.0.0, _36.0.0, _36.0.3);
_6.2 = !_42.0.2;
_23.2 = -(-100_i8);
_18.0 = [_22];
_6.1 = _36.0.0;
(*_27) = core::ptr::addr_of!(_32);
Goto(bb16)
}
bb16 = {
_15 = _18.1;
_18.2 = _30;
_4 = (_35, _3.0.1);
_36.0.1 = -_4.1;
_14 = (_3.0.0, _3.0.1);
_4.1 = _12 >> _12;
_7 = _1 << _2.1;
_41.0 = _7 + _26;
_41.2 = _23.2 << _41.0;
_20 = !6_u8;
Call(_36.0.0 = core::intrinsics::transmute(_6.1), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
_40 = Adt62::Variant1 { fld0: 46740994720398933088025275341728825060_u128 };
_42 = (_6, 12875597183738545969_usize);
_39 = !false;
_4 = _11;
_42.0.0 = _6.0;
_36.0.0 = _42.0.1 << _22;
_35 = _17;
_44 = _20 as i32;
_23.2 = (-993880244160579222_i64) as i8;
_11.0 = _35;
_42 = (_6, 0_usize);
_26 = _11.1 * _4.1;
_2 = (_10.0, _7);
_42.0.1 = _6.1 ^ _6.1;
_42.0 = _6;
_42.0.1 = 42572607089404561942629525787125390238_u128 as u16;
_20 = 229_u8;
_14.0 = [_39,_39,_39,_39,_39,_39];
_47.1 = _3.0.1;
_27 = core::ptr::addr_of_mut!((*_27));
_6.1 = _36.0.0 * _36.0.0;
match _42.1 {
1 => bb14,
2 => bb6,
0 => bb18,
_ => bb15
}
}
bb18 = {
_3.0.1 = _11.1;
_10 = (_2.0, _16);
_28.0 = _22;
_21 = (-125843739185440830115206090988629426662_i128) as f64;
_43 = _28.1;
_23.0 = _39 as isize;
_47 = (_10.0, _26);
_28.2 = _22 - _28.0;
_42.0.2 = !_36.0.3;
_34 = 3919303889022809709_i64;
_18.2 = _30;
_10 = (_3.0.0, _16);
_36.0.4 = (-10981_i16) * (-20050_i16);
_1 = -_7;
_50.1 = _23.1 * _23.1;
_6.1 = !_36.0.0;
_24 = core::ptr::addr_of_mut!(_36.0.2);
_6.0 = _42.0.0 - _42.0.0;
_31 = 306081878206162331276726466754185167488_u128;
_34 = -5123711196474516020_i64;
_3.0 = _10;
_24 = core::ptr::addr_of_mut!((*_27));
_28.0 = -_28.2;
_32 = -_50.1;
_42.1 = 14187757003262507354_usize & 17946516823523561005_usize;
Goto(bb19)
}
bb19 = {
_41.1 = _50.1;
_37 = Adt62::Variant1 { fld0: _31 };
_25 = (-160513371607487247870209243683287613548_i128) as u64;
_11 = (_35, _47.1);
_50.0 = _41.2 as isize;
_51 = core::ptr::addr_of_mut!(_8);
_4.1 = -_1;
_30 = _18.2;
(*_24) = core::ptr::addr_of!(_32);
_41.2 = _23.2;
_36.0.3 = !_42.0.2;
_31 = Field::<u128>(Variant(_37, 1), 0);
_6.0 = !_42.0.0;
(*_24) = core::ptr::addr_of!(_32);
Goto(bb20)
}
bb20 = {
_47.1 = _3.0.1;
_21 = _43 - _28.1;
_28.1 = Field::<u128>(Variant(_37, 1), 0) as f64;
_42.0.0 = _34 as u32;
_31 = Field::<u128>(Variant(_37, 1), 0) * Field::<u128>(Variant(_37, 1), 0);
_11.1 = !_3.0.1;
_41.2 = _18.2 as i8;
_26 = -_14.1;
_56 = (_3.0,);
_9 = _10.1 >> _41.0;
(*_24) = core::ptr::addr_of!(_32);
_25 = _36.0.3;
_1 = _36.0.1;
SetDiscriminant(_37, 1);
_6.2 = _36.0.0 as u64;
_59 = [_36.0.4,_36.0.4,_36.0.4,_36.0.4];
_14 = _10;
_58.2 = _18.2;
_61.2 = _18.2;
_58 = _18;
_28.0 = !_22;
_50.0 = _41.0;
_42.0.0 = !_6.0;
Goto(bb21)
}
bb21 = {
_16 = _50.1 as isize;
place!(Field::<u128>(Variant(_37, 1), 0)) = _31 + _31;
_18.0 = [_28.2];
_36.0.0 = _6.1 * _6.1;
_31 = Field::<u128>(Variant(_37, 1), 0);
_22 = _28.2 + _28.2;
_14 = _11;
_57 = _42.0.0 as f64;
_34 = _32 as i64;
SetDiscriminant(_37, 0);
_6.0 = _42.0.0 + _42.0.0;
match _20 {
0 => bb3,
1 => bb18,
229 => bb23,
_ => bb22
}
}
bb22 = {
_2.0 = [true,false,true,false,true,false];
_23.2 = 97_i8;
_21 = -_28.1;
_18.1 = [_10.1,_10.1];
_25 = _6.2;
_15 = [_2.1,_4.1];
_2 = _14;
_1 = _13 * _10.1;
_3 = (_10,);
_28.1 = -_21;
_30 = '\u{3f398}';
_18.1 = [_3.0.1,_5];
_23.2 = -32_i8;
_3.0 = _4;
_11 = (_2.0, _13);
_2.0 = _4.0;
Goto(bb11)
}
bb23 = {
place!(Field::<i8>(Variant(_37, 0), 3)) = _23.2 * _41.2;
_11.0 = _35;
place!(Field::<(i32, f64, i32)>(Variant(_37, 0), 5)).2 = !_28.2;
_14.1 = _11.1 << Field::<(i32, f64, i32)>(Variant(_37, 0), 5).2;
place!(Field::<Adt55>(Variant(_37, 0), 2)).fld1 = Adt49::Variant1 { fld0: _36.0 };
_60 = _31 as f64;
_8 = _5;
(*_51) = _41.0;
place!(Field::<Adt55>(Variant(_37, 0), 2)).fld0 = _36.0;
place!(Field::<(i32, f64, i32)>(Variant(_37, 0), 5)).1 = _60;
_50 = (_7, _41.1, _41.2);
place!(Field::<(i32, f64, i32)>(Variant(_37, 0), 5)).1 = _43;
_57 = Field::<(u16, isize, *const f32, u64, i16)>(Variant(Field::<Adt55>(Variant(_37, 0), 2).fld1, 1), 0).0 as f64;
place!(Field::<(u16, isize, *const f32, u64, i16)>(Variant(place!(Field::<Adt55>(Variant(_37, 0), 2)).fld1, 1), 0)) = _36.0;
(*_24) = Field::<(u16, isize, *const f32, u64, i16)>(Variant(Field::<Adt55>(Variant(_37, 0), 2).fld1, 1), 0).2;
_14.0 = [_39,_39,_39,_39,_39,_39];
_28.2 = Field::<(u16, isize, *const f32, u64, i16)>(Variant(Field::<Adt55>(Variant(_37, 0), 2).fld1, 1), 0).4 as i32;
place!(Field::<(u16, isize, *const f32, u64, i16)>(Variant(place!(Field::<Adt55>(Variant(_37, 0), 2)).fld1, 1), 0)).1 = _13 << _5;
(*_27) = core::ptr::addr_of!(_41.1);
_10.1 = _36.0.1;
_2.0 = [_39,_39,_39,_39,_39,_39];
_63 = _11.0;
_2 = (_4.0, _50.0);
_37 = Adt62::Variant1 { fld0: _31 };
(*_27) = core::ptr::addr_of!(_50.1);
Goto(bb24)
}
bb24 = {
_23.1 = -_32;
match _20 {
0 => bb7,
1 => bb2,
2 => bb17,
229 => bb25,
_ => bb23
}
}
bb25 = {
_56 = _3;
_45 = _34 as f32;
_64 = -_36.0.4;
_2 = _11;
(*_51) = _10.1;
_19 = Adt49::Variant1 { fld0: _36.0 };
_68 = _58;
_2 = (_56.0.0, _10.1);
_68.1 = [_36.0.1,_14.1];
_6 = _42.0;
_47.0 = [_39,_39,_39,_39,_39,_39];
_24 = core::ptr::addr_of_mut!(place!(Field::<(u16, isize, *const f32, u64, i16)>(Variant(_19, 1), 0)).2);
_58.0 = [_28.0];
SetDiscriminant(_19, 2);
_10.1 = _41.0 - _41.0;
_30 = _61.2;
_23.0 = _41.2 as isize;
Call(place!(Field::<((u32, u16, u64), usize)>(Variant(_19, 2), 1)) = fn14(_28, _28, _41, _56.0, _56.0, _36, _36, _56.0.1, _15), ReturnTo(bb26), UnwindUnreachable())
}
bb26 = {
place!(Field::<((u32, u16, u64), usize)>(Variant(_19, 2), 1)).1 = !_42.1;
_57 = -_60;
_2.1 = _41.1 as isize;
_50 = (_41.0, _41.1, _23.2);
_1 = _41.0 - _26;
_42.1 = Field::<((u32, u16, u64), usize)>(Variant(_19, 2), 1).1;
_70 = _36.0.0 as u32;
_28 = (_22, _57, _22);
_68.0 = [_22];
_56 = (_47,);
_71 = _34 as u16;
_36.0.1 = _58.2 as isize;
_6.0 = _58.2 as u32;
_11.0 = [_39,_39,_39,_39,_39,_39];
_41.1 = 19668075281571490123116305742767627044_i128 as f32;
_53 = [(-18805174749612684926674992768980449740_i128),86917100767575688387549721130044511765_i128,(-148337166474823968340392476544481543575_i128),131610828260658762404674817732646817737_i128,(-78344022833235640912633799177278047174_i128)];
_36.0.4 = _64 << _70;
_19 = Adt49::Variant1 { fld0: _36.0 };
_50.2 = _6.2 as i8;
_45 = _31 as f32;
_69 = [_30];
_15 = _58.1;
place!(Field::<(u16, isize, *const f32, u64, i16)>(Variant(_19, 1), 0)).3 = !_25;
_40 = Adt62::Variant1 { fld0: _31 };
_22 = _28.2;
_42 = (_6, 555230674689739895_usize);
match _42.1 {
0 => bb23,
1 => bb19,
2 => bb22,
3 => bb25,
555230674689739895 => bb27,
_ => bb17
}
}
bb27 = {
_14.0 = [_39,_39,_39,_39,_39,_39];
_24 = core::ptr::addr_of_mut!((*_27));
_28.1 = -_57;
_60 = _28.1;
_8 = _50.0;
_6.2 = _20 as u64;
_46 = !_39;
_36 = (Field::<(u16, isize, *const f32, u64, i16)>(Variant(_19, 1), 0),);
_58.0 = [_28.2];
_75 = _10;
_67 = _30;
_72.0 = _28.0;
_72 = (_28.2, _43, _28.2);
_37 = Move(_40);
_32 = _50.1 - _45;
match _42.1 {
0 => bb16,
1 => bb28,
555230674689739895 => bb30,
_ => bb29
}
}
bb28 = {
_4 = (_17, _1);
_6 = (566289488_u32, 1854_u16, 5387592283058602809_u64);
_16 = -_2.1;
_1 = (-70_i8) as isize;
match _6.2 {
0 => bb1,
1 => bb2,
5387592283058602809 => bb5,
_ => bb3
}
}
bb29 = {
_40 = Adt62::Variant1 { fld0: 46740994720398933088025275341728825060_u128 };
_42 = (_6, 12875597183738545969_usize);
_39 = !false;
_4 = _11;
_42.0.0 = _6.0;
_36.0.0 = _42.0.1 << _22;
_35 = _17;
_44 = _20 as i32;
_23.2 = (-993880244160579222_i64) as i8;
_11.0 = _35;
_42 = (_6, 0_usize);
_26 = _11.1 * _4.1;
_2 = (_10.0, _7);
_42.0.1 = _6.1 ^ _6.1;
_42.0 = _6;
_42.0.1 = 42572607089404561942629525787125390238_u128 as u16;
_20 = 229_u8;
_14.0 = [_39,_39,_39,_39,_39,_39];
_47.1 = _3.0.1;
_27 = core::ptr::addr_of_mut!((*_27));
_6.1 = _36.0.0 * _36.0.0;
match _42.1 {
1 => bb14,
2 => bb6,
0 => bb18,
_ => bb15
}
}
bb30 = {
_72.1 = -_28.1;
_17 = [_46,_46,_39,_39,_46,_46];
_56.0 = _3.0;
Goto(bb31)
}
bb31 = {
_50.2 = _41.2 - _41.2;
_36.0 = (Field::<(u16, isize, *const f32, u64, i16)>(Variant(_19, 1), 0).0, _8, Field::<(u16, isize, *const f32, u64, i16)>(Variant(_19, 1), 0).2, _42.0.2, Field::<(u16, isize, *const f32, u64, i16)>(Variant(_19, 1), 0).4);
(*_24) = core::ptr::addr_of!(_50.1);
(*_51) = _9;
_34 = -2246635551575409334_i64;
_60 = _43;
_6 = (_70, Field::<(u16, isize, *const f32, u64, i16)>(Variant(_19, 1), 0).0, _42.0.2);
_13 = _11.1 + (*_51);
_28.2 = _22 + _28.0;
_18.1 = [_41.0,_10.1];
Goto(bb32)
}
bb32 = {
_54 = _24;
_2.0 = _75.0;
_14 = (_35, (*_51));
_40 = Move(_37);
_61.1 = _15;
_76 = Field::<(u16, isize, *const f32, u64, i16)>(Variant(_19, 1), 0).0;
_45 = _23.1 + _50.1;
_13 = !_10.1;
_36 = (Field::<(u16, isize, *const f32, u64, i16)>(Variant(_19, 1), 0),);
_23.0 = _14.1 << _11.1;
place!(Field::<(u16, isize, *const f32, u64, i16)>(Variant(_19, 1), 0)) = _36.0;
match _42.1 {
0 => bb22,
1 => bb2,
555230674689739895 => bb33,
_ => bb27
}
}
bb33 = {
_22 = _42.0.2 as i32;
_78 = _36.0.0 <= _36.0.0;
_65 = _8 * _75.1;
_41.1 = -_45;
_18.2 = _61.2;
_77 = -_34;
_21 = _28.1;
_58.0 = [_72.2];
place!(Field::<(u16, isize, *const f32, u64, i16)>(Variant(_19, 1), 0)).3 = _41.1 as u64;
_55 = _41.0;
(*_27) = core::ptr::addr_of!(_45);
_81 = _36.0.0;
place!(Field::<(u16, isize, *const f32, u64, i16)>(Variant(_19, 1), 0)).4 = !_36.0.4;
_34 = -_77;
_10 = _4;
_28.2 = _28.0 << _23.0;
_52 = _20 ^ _20;
_68.2 = _58.2;
_6 = _42.0;
_60 = _57 - _72.1;
_42.0.1 = _36.0.0;
_21 = _60 * _60;
match _42.1 {
0 => bb1,
1 => bb18,
2 => bb25,
3 => bb9,
4 => bb34,
5 => bb35,
6 => bb36,
555230674689739895 => bb38,
_ => bb37
}
}
bb34 = {
_14.0 = [false,true,false,false,true,false];
_11 = (_2.0, _1);
_7 = 161_u8 as isize;
_6 = (3030967894_u32, 37295_u16, 2479054002009524117_u64);
_17 = [false,true,true,true,true,true];
_11.0 = _4.0;
_10.0 = _2.0;
_18.0 = [1408292613_i32];
_14.1 = _1 >> _1;
_16 = _3.0.1 >> _2.1;
_2.0 = _4.0;
_8 = _13;
_6.0 = 248_u8 as u32;
_18.0 = [1221570171_i32];
_3.0.1 = _6.0 as isize;
Call(_11.1 = core::intrinsics::bswap(_5), ReturnTo(bb4), UnwindUnreachable())
}
bb35 = {
_50.2 = _41.2 - _41.2;
_36.0 = (Field::<(u16, isize, *const f32, u64, i16)>(Variant(_19, 1), 0).0, _8, Field::<(u16, isize, *const f32, u64, i16)>(Variant(_19, 1), 0).2, _42.0.2, Field::<(u16, isize, *const f32, u64, i16)>(Variant(_19, 1), 0).4);
(*_24) = core::ptr::addr_of!(_50.1);
(*_51) = _9;
_34 = -2246635551575409334_i64;
_60 = _43;
_6 = (_70, Field::<(u16, isize, *const f32, u64, i16)>(Variant(_19, 1), 0).0, _42.0.2);
_13 = _11.1 + (*_51);
_28.2 = _22 + _28.0;
_18.1 = [_41.0,_10.1];
Goto(bb32)
}
bb36 = {
place!(Field::<i8>(Variant(_37, 0), 3)) = _23.2 * _41.2;
_11.0 = _35;
place!(Field::<(i32, f64, i32)>(Variant(_37, 0), 5)).2 = !_28.2;
_14.1 = _11.1 << Field::<(i32, f64, i32)>(Variant(_37, 0), 5).2;
place!(Field::<Adt55>(Variant(_37, 0), 2)).fld1 = Adt49::Variant1 { fld0: _36.0 };
_60 = _31 as f64;
_8 = _5;
(*_51) = _41.0;
place!(Field::<Adt55>(Variant(_37, 0), 2)).fld0 = _36.0;
place!(Field::<(i32, f64, i32)>(Variant(_37, 0), 5)).1 = _60;
_50 = (_7, _41.1, _41.2);
place!(Field::<(i32, f64, i32)>(Variant(_37, 0), 5)).1 = _43;
_57 = Field::<(u16, isize, *const f32, u64, i16)>(Variant(Field::<Adt55>(Variant(_37, 0), 2).fld1, 1), 0).0 as f64;
place!(Field::<(u16, isize, *const f32, u64, i16)>(Variant(place!(Field::<Adt55>(Variant(_37, 0), 2)).fld1, 1), 0)) = _36.0;
(*_24) = Field::<(u16, isize, *const f32, u64, i16)>(Variant(Field::<Adt55>(Variant(_37, 0), 2).fld1, 1), 0).2;
_14.0 = [_39,_39,_39,_39,_39,_39];
_28.2 = Field::<(u16, isize, *const f32, u64, i16)>(Variant(Field::<Adt55>(Variant(_37, 0), 2).fld1, 1), 0).4 as i32;
place!(Field::<(u16, isize, *const f32, u64, i16)>(Variant(place!(Field::<Adt55>(Variant(_37, 0), 2)).fld1, 1), 0)).1 = _13 << _5;
(*_27) = core::ptr::addr_of!(_41.1);
_10.1 = _36.0.1;
_2.0 = [_39,_39,_39,_39,_39,_39];
_63 = _11.0;
_2 = (_4.0, _50.0);
_37 = Adt62::Variant1 { fld0: _31 };
(*_27) = core::ptr::addr_of!(_50.1);
Goto(bb24)
}
bb37 = {
_4 = (_17, _1);
_6 = (566289488_u32, 1854_u16, 5387592283058602809_u64);
_16 = -_2.1;
_1 = (-70_i8) as isize;
match _6.2 {
0 => bb1,
1 => bb2,
5387592283058602809 => bb5,
_ => bb3
}
}
bb38 = {
_62 = [(-110246633048911336596565126975032226657_i128),45107036209722342860811505942636613764_i128,(-116279181489214913577798588506559280212_i128),(-2338996934377824477284721688474016038_i128),(-54447693034037617333441750532671995653_i128)];
_3.0 = (_63, _26);
_52 = !_20;
_47.1 = _50.0;
_10.0 = _35;
_21 = _41.2 as f64;
_44 = !_28.2;
_26 = _3.0.1 + _12;
_3.0 = _75;
_82 = _3.0.1 <= _26;
_60 = _21;
_78 = _42.1 >= _42.1;
_45 = _32;
Goto(bb39)
}
bb39 = {
_36.0.1 = !_10.1;
_3.0.1 = _47.1 | _8;
_3.0.1 = _55 & _47.1;
_16 = _75.1 * _11.1;
_49 = _36.0.0;
SetDiscriminant(_19, 1);
Goto(bb40)
}
bb40 = {
_88.1 = _42.1 & _42.1;
_70 = !_42.0.0;
(*_51) = !_50.0;
Goto(bb41)
}
bb41 = {
_59 = [_36.0.4,_36.0.4,_36.0.4,_36.0.4];
_18 = _68;
_47 = (_35, _12);
_14.0 = [_39,_82,_82,_39,_82,_82];
_58.1 = [_36.0.1,(*_51)];
_42 = (_6, _88.1);
_80.0.1 = _8;
_65 = _50.0;
place!(Field::<(u16, isize, *const f32, u64, i16)>(Variant(_19, 1), 0)).1 = _36.0.4 as isize;
_45 = _32 * _32;
_6.1 = _41.2 as u16;
_88.1 = _42.1;
_88 = (_42.0, _42.1);
_80 = (_75,);
place!(Field::<(u16, isize, *const f32, u64, i16)>(Variant(_19, 1), 0)) = (_76, _1, (*_27), _36.0.3, _36.0.4);
_91 = _42.1 << _23.0;
place!(Field::<(u16, isize, *const f32, u64, i16)>(Variant(_19, 1), 0)) = (_81, _14.1, (*_27), _36.0.3, _36.0.4);
_60 = _28.1 + _28.1;
_91 = _50.2 as usize;
_57 = _60 + _60;
Call(_28.1 = fn15(_56, (*_51), _3, _72.2, _76, _56.0, _18, _58.1, _58.1, _12, (*_27), _4.1, _68), ReturnTo(bb42), UnwindUnreachable())
}
bb42 = {
_6.2 = !_88.0.2;
_7 = _42.1 as isize;
_85 = _30;
_75.0 = _14.0;
_61.2 = _68.2;
_94.0 = _28.1 as u16;
_36.0 = (_76, _55, Field::<(u16, isize, *const f32, u64, i16)>(Variant(_19, 1), 0).2, Field::<(u16, isize, *const f32, u64, i16)>(Variant(_19, 1), 0).3, Field::<(u16, isize, *const f32, u64, i16)>(Variant(_19, 1), 0).4);
_46 = _82;
_94.3 = !_6.2;
Goto(bb43)
}
bb43 = {
_55 = _11.1;
match _20 {
0 => bb17,
1 => bb2,
2 => bb7,
3 => bb22,
229 => bb45,
_ => bb44
}
}
bb44 = {
_2.0 = [true,false,true,false,true,false];
_23.2 = 97_i8;
_21 = -_28.1;
_18.1 = [_10.1,_10.1];
_25 = _6.2;
_15 = [_2.1,_4.1];
_2 = _14;
_1 = _13 * _10.1;
_3 = (_10,);
_28.1 = -_21;
_30 = '\u{3f398}';
_18.1 = [_3.0.1,_5];
_23.2 = -32_i8;
_3.0 = _4;
_11 = (_2.0, _13);
_2.0 = _4.0;
Goto(bb11)
}
bb45 = {
_66 = Field::<(u16, isize, *const f32, u64, i16)>(Variant(_19, 1), 0).4;
_4.0 = _75.0;
Call(_38 = fn16(_46, _3.0.1, _36, _81, _41.0, _23, _75, _56.0.1, _47.1), ReturnTo(bb46), UnwindUnreachable())
}
bb46 = {
_88.0.2 = _25 + Field::<(u16, isize, *const f32, u64, i16)>(Variant(_19, 1), 0).3;
_96 = (_3.0.0, _12);
_3.0.0 = [_46,_82,_82,_82,_46,_46];
_18 = _68;
_73 = _28.0 << _36.0.1;
_23 = ((*_51), _32, _50.2);
SetDiscriminant(_19, 2);
_49 = !_94.0;
_14 = (_4.0, _16);
_6.1 = _56.0.1 as u16;
_50 = (_9, _32, _23.2);
match _20 {
0 => bb9,
1 => bb31,
229 => bb47,
_ => bb27
}
}
bb47 = {
place!(Field::<((u32, u16, u64), usize)>(Variant(_19, 2), 1)) = (_6, _88.1);
_5 = _10.1 & _23.0;
_2.0 = [_82,_82,_46,_46,_46,_46];
_61.0 = [_73];
match _20 {
0 => bb31,
1 => bb34,
2 => bb32,
3 => bb26,
4 => bb5,
5 => bb25,
6 => bb24,
229 => bb49,
_ => bb48
}
}
bb48 = {
place!(Field::<i8>(Variant(_37, 0), 3)) = _23.2 * _41.2;
_11.0 = _35;
place!(Field::<(i32, f64, i32)>(Variant(_37, 0), 5)).2 = !_28.2;
_14.1 = _11.1 << Field::<(i32, f64, i32)>(Variant(_37, 0), 5).2;
place!(Field::<Adt55>(Variant(_37, 0), 2)).fld1 = Adt49::Variant1 { fld0: _36.0 };
_60 = _31 as f64;
_8 = _5;
(*_51) = _41.0;
place!(Field::<Adt55>(Variant(_37, 0), 2)).fld0 = _36.0;
place!(Field::<(i32, f64, i32)>(Variant(_37, 0), 5)).1 = _60;
_50 = (_7, _41.1, _41.2);
place!(Field::<(i32, f64, i32)>(Variant(_37, 0), 5)).1 = _43;
_57 = Field::<(u16, isize, *const f32, u64, i16)>(Variant(Field::<Adt55>(Variant(_37, 0), 2).fld1, 1), 0).0 as f64;
place!(Field::<(u16, isize, *const f32, u64, i16)>(Variant(place!(Field::<Adt55>(Variant(_37, 0), 2)).fld1, 1), 0)) = _36.0;
(*_24) = Field::<(u16, isize, *const f32, u64, i16)>(Variant(Field::<Adt55>(Variant(_37, 0), 2).fld1, 1), 0).2;
_14.0 = [_39,_39,_39,_39,_39,_39];
_28.2 = Field::<(u16, isize, *const f32, u64, i16)>(Variant(Field::<Adt55>(Variant(_37, 0), 2).fld1, 1), 0).4 as i32;
place!(Field::<(u16, isize, *const f32, u64, i16)>(Variant(place!(Field::<Adt55>(Variant(_37, 0), 2)).fld1, 1), 0)).1 = _13 << _5;
(*_27) = core::ptr::addr_of!(_41.1);
_10.1 = _36.0.1;
_2.0 = [_39,_39,_39,_39,_39,_39];
_63 = _11.0;
_2 = (_4.0, _50.0);
_37 = Adt62::Variant1 { fld0: _31 };
(*_27) = core::ptr::addr_of!(_50.1);
Goto(bb24)
}
bb49 = {
_24 = core::ptr::addr_of_mut!((*_27));
place!(Field::<[i128; 5]>(Variant(_19, 2), 3)) = [26852593703989495095645177310514592414_i128,36171224057989056886727282954249782262_i128,122736934143783362989356410554129589012_i128,22327176662006515674299223625244638594_i128,(-146431047014246351873834187027871530486_i128)];
_4.0 = _2.0;
_68.2 = _30;
_23.0 = _72.2 as isize;
_28 = (_72.2, _57, _72.2);
(*_24) = core::ptr::addr_of!(_87);
_87 = _77 as f32;
_63 = _14.0;
Goto(bb50)
}
bb50 = {
_101 = _34 ^ _77;
_68.0 = _61.0;
_19 = Adt49::Variant1 { fld0: _36.0 };
Goto(bb51)
}
bb51 = {
_3.0.1 = !_26;
_69 = [_68.2];
(*_27) = core::ptr::addr_of!(_41.1);
_46 = !_82;
_96 = _4;
_29 = _38;
_53 = _62;
_102 = _46;
_11.0 = [_82,_102,_102,_82,_46,_46];
_56 = (_75,);
_83 = _46;
_88 = _42;
Goto(bb52)
}
bb52 = {
_99.0 = (_6.0, _36.0.0, _88.0.2);
_47.0 = [_102,_102,_82,_46,_83,_83];
_14.1 = _42.0.0 as isize;
_62 = _53;
_21 = (*_51) as f64;
(*_24) = Field::<(u16, isize, *const f32, u64, i16)>(Variant(_19, 1), 0).2;
SetDiscriminant(_19, 2);
place!(Field::<((u32, u16, u64), usize)>(Variant(_19, 2), 1)).0 = _99.0;
_14.0 = _75.0;
(*_24) = core::ptr::addr_of!(_50.1);
_88.1 = _42.1;
place!(Field::<*const *mut isize>(Variant(_19, 2), 6)) = core::ptr::addr_of!(_51);
_103 = [_6.2,_88.0.2,_6.2,_88.0.2,_88.0.2];
place!(Field::<([bool; 6], isize)>(Variant(_19, 2), 4)).0 = _4.0;
_70 = Field::<((u32, u16, u64), usize)>(Variant(_19, 2), 1).0.0 + _88.0.0;
_14.1 = _56.0.1 << (*_51);
_57 = _21 * _21;
match _20 {
0 => bb41,
229 => bb53,
_ => bb15
}
}
bb53 = {
_68.2 = _67;
_68.0 = _58.0;
_108 = _87 + _23.1;
_25 = _6.2 >> _72.0;
_1 = _65;
_99.0.0 = _70 >> _26;
_99.0 = _6;
_93 = Adt53::Variant0 { fld0: _42.0.2,fld1: _50.2 };
_87 = Field::<i8>(Variant(_93, 0), 1) as f32;
_105 = _70 as f32;
_94 = (_81, _41.0, _36.0.2, _6.2, _36.0.4);
_93 = Adt53::Variant0 { fld0: _25,fld1: _50.2 };
_72.0 = _20 as i32;
_12 = _83 as isize;
_79 = _69;
RET = core::ptr::addr_of_mut!(_103);
_102 = _83;
_90 = _24;
_104 = (_2,);
_104.0.0 = [_82,_46,_82,_46,_102,_46];
_87 = _21 as f32;
(*_27) = _94.2;
(*RET) = [_25,Field::<u64>(Variant(_93, 0), 0),Field::<u64>(Variant(_93, 0), 0),_25,Field::<u64>(Variant(_93, 0), 0)];
Goto(bb54)
}
bb54 = {
Call(_119 = dump_var(11_usize, 77_usize, Move(_77), 42_usize, Move(_42), 8_usize, Move(_8), 88_usize, Move(_88)), ReturnTo(bb55), UnwindUnreachable())
}
bb55 = {
Call(_119 = dump_var(11_usize, 91_usize, Move(_91), 9_usize, Move(_9), 104_usize, Move(_104), 62_usize, Move(_62)), ReturnTo(bb56), UnwindUnreachable())
}
bb56 = {
Call(_119 = dump_var(11_usize, 56_usize, Move(_56), 34_usize, Move(_34), 96_usize, Move(_96), 35_usize, Move(_35)), ReturnTo(bb57), UnwindUnreachable())
}
bb57 = {
Call(_119 = dump_var(11_usize, 6_usize, Move(_6), 66_usize, Move(_66), 103_usize, Move(_103), 44_usize, Move(_44)), ReturnTo(bb58), UnwindUnreachable())
}
bb58 = {
Call(_119 = dump_var(11_usize, 30_usize, Move(_30), 69_usize, Move(_69), 67_usize, Move(_67), 10_usize, Move(_10)), ReturnTo(bb59), UnwindUnreachable())
}
bb59 = {
Call(_119 = dump_var(11_usize, 49_usize, Move(_49), 73_usize, Move(_73), 15_usize, Move(_15), 7_usize, Move(_7)), ReturnTo(bb60), UnwindUnreachable())
}
bb60 = {
Call(_119 = dump_var(11_usize, 5_usize, Move(_5), 2_usize, Move(_2), 12_usize, Move(_12), 64_usize, Move(_64)), ReturnTo(bb61), UnwindUnreachable())
}
bb61 = {
Call(_119 = dump_var(11_usize, 83_usize, Move(_83), 14_usize, Move(_14), 16_usize, Move(_16), 65_usize, Move(_65)), ReturnTo(bb62), UnwindUnreachable())
}
bb62 = {
Call(_119 = dump_var(11_usize, 59_usize, Move(_59), 120_usize, _120, 120_usize, _120, 120_usize, _120), ReturnTo(bb63), UnwindUnreachable())
}
bb63 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn12(mut _1: [bool; 6],mut _2: isize,mut _3: ([bool; 6], isize),mut _4: isize,mut _5: isize,mut _6: isize,mut _7: isize,mut _8: isize,mut _9: isize,mut _10: [isize; 2],mut _11: isize,mut _12: [isize; 2],mut _13: (([bool; 6], isize),),mut _14: ([bool; 6], isize),mut _15: isize,mut _16: isize) -> [bool; 6] {
mir! {
type RET = [bool; 6];
let _17: isize;
let _18: [i128; 5];
let _19: (([bool; 6], isize),);
let _20: u64;
let _21: (([bool; 6], isize),);
let _22: (([bool; 6], isize),);
let _23: f64;
let _24: [char; 1];
let _25: Adt63;
let _26: [i16; 4];
let _27: Adt50;
let _28: ((u16, isize, *const f32, u64, i16),);
let _29: [isize; 2];
let _30: (([bool; 6], isize),);
let _31: *const (isize, f32, i8);
let _32: Adt53;
let _33: Adt63;
let _34: *const (i64, *mut [u64; 5], i64);
let _35: (u32, u16, u64);
let _36: u8;
let _37: [u32; 6];
let _38: ();
let _39: ();
{
RET = [true,true,true,true,false,false];
RET = [false,false,false,true,true,false];
_14.0 = RET;
_13.0 = (_14.0, _6);
_3.0 = [false,false,false,false,true,false];
_15 = 58028_u16 as isize;
_8 = -_6;
_12 = [_11,_13.0.1];
_16 = (-718196360_i32) as isize;
_9 = 14651_i16 as isize;
_17 = -_3.1;
_17 = _13.0.1;
_2 = _11 >> _3.1;
_13.0.1 = (-6104419409690526573_i64) as isize;
_3 = (RET, _4);
_2 = _6;
_2 = _8;
_15 = 11404_u16 as isize;
_1 = [false,true,false,true,true,false];
_3.1 = _5 ^ _17;
_16 = !_8;
Call(_17 = fn13(_7, _12), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_15 = (-4746384192777161273_i64) as isize;
RET = [false,false,true,false,false,false];
_14.1 = 10802495323477101755_u64 as isize;
_4 = _16;
_4 = _7;
_13.0.1 = 13733_u16 as isize;
_8 = (-1729_i16) as isize;
_10 = [_5,_5];
Goto(bb2)
}
bb2 = {
_3 = (RET, _11);
RET = [true,false,false,true,true,false];
_14.1 = _16;
RET = [true,false,true,true,false,false];
_9 = _5 | _4;
_2 = _14.1;
_19 = _13;
Goto(bb3)
}
bb3 = {
_19 = (_13.0,);
_3.1 = _16;
_16 = false as isize;
Goto(bb4)
}
bb4 = {
_3 = (_14.0, _7);
_14.1 = _2 + _7;
_19.0.0 = _14.0;
_2 = !_6;
_13.0.0 = [false,false,false,false,false,false];
_14.1 = 3_usize as isize;
_6 = 28_i8 as isize;
_15 = -_2;
_8 = _15;
_13 = _19;
_21 = (_3,);
_4 = 2389016494_u32 as isize;
_19.0 = (_14.0, _2);
_20 = 2511896256_u32 as u64;
_22.0 = _21.0;
_13.0 = (_21.0.0, _8);
_13 = _19;
_22.0 = _3;
Goto(bb5)
}
bb5 = {
_17 = '\u{39ab4}' as isize;
_22 = (_3,);
_17 = _5;
_13.0.0 = _3.0;
_1 = [true,false,false,true,true,true];
_22.0.1 = _3.1 - _19.0.1;
_3.1 = _22.0.1;
_22.0.0 = [false,false,true,true,false,true];
_7 = _19.0.1 >> _19.0.1;
_19 = _21;
_19.0 = (_13.0.0, _3.1);
_22.0.0 = [true,true,true,false,true,true];
Goto(bb6)
}
bb6 = {
_7 = -_21.0.1;
_27.fld2.4 = [_20,_20,_20,_20,_20];
_27.fld7.1 = core::ptr::addr_of_mut!(_27.fld2.4);
_18 = [(-69118590724797404236076973672837366421_i128),(-122927846901886850208690610992570869548_i128),134841922990185973356794144390322645488_i128,92198473405336209789842182184859482553_i128,(-140409082773197781026117603591636227417_i128)];
_23 = _19.0.1 as f64;
Goto(bb7)
}
bb7 = {
_27.fld3 = [_15,_11];
_28.0.4 = _20 as i16;
_19 = (_3,);
_28.0.0 = 63318_u16;
_18 = [(-138756893730521599666914414066380200756_i128),(-17014403797740308477712031360052651626_i128),120825057817842410418584396330819217093_i128,(-74060762081819474431210223129013489012_i128),(-92054237912689263943756016427407388839_i128)];
_11 = _7;
_27.fld5.1 = 14446387257453564676_usize | 4_usize;
_21.0.0 = [false,false,false,false,false,false];
_27.fld5.1 = 2205672038588792013_usize;
Goto(bb8)
}
bb8 = {
_27.fld3 = [_5,_15];
_30.0.1 = _23 as isize;
_23 = 24_i8 as f64;
_27.fld2.1 = core::ptr::addr_of_mut!(_19.0.1);
_13.0.1 = -_9;
_15 = _3.1;
_22.0 = (_19.0.0, _2);
_27.fld5.0.0 = 717593130_u32 - 419682110_u32;
_2 = 99_i8 as isize;
_13 = (_22.0,);
_32 = Adt53::Variant0 { fld0: _20,fld1: 92_i8 };
_19.0 = (_1, _30.0.1);
_21.0.1 = _19.0.1;
_30.0.0 = _19.0.0;
_12 = [_7,_17];
_29 = _10;
_21.0.0 = _13.0.0;
_3.0 = [false,false,true,false,true,true];
_21.0.0 = _22.0.0;
_13.0 = (_21.0.0, _30.0.1);
_27.fld2.5 = 222916348381339135799319948796924757275_u128 as isize;
_35 = (_27.fld5.0.0, _28.0.0, Field::<u64>(Variant(_32, 0), 0));
match _35.1 {
0 => bb5,
1 => bb4,
2 => bb9,
3 => bb10,
4 => bb11,
5 => bb12,
6 => bb13,
63318 => bb15,
_ => bb14
}
}
bb9 = {
_27.fld3 = [_15,_11];
_28.0.4 = _20 as i16;
_19 = (_3,);
_28.0.0 = 63318_u16;
_18 = [(-138756893730521599666914414066380200756_i128),(-17014403797740308477712031360052651626_i128),120825057817842410418584396330819217093_i128,(-74060762081819474431210223129013489012_i128),(-92054237912689263943756016427407388839_i128)];
_11 = _7;
_27.fld5.1 = 14446387257453564676_usize | 4_usize;
_21.0.0 = [false,false,false,false,false,false];
_27.fld5.1 = 2205672038588792013_usize;
Goto(bb8)
}
bb10 = {
_15 = (-4746384192777161273_i64) as isize;
RET = [false,false,true,false,false,false];
_14.1 = 10802495323477101755_u64 as isize;
_4 = _16;
_4 = _7;
_13.0.1 = 13733_u16 as isize;
_8 = (-1729_i16) as isize;
_10 = [_5,_5];
Goto(bb2)
}
bb11 = {
_17 = '\u{39ab4}' as isize;
_22 = (_3,);
_17 = _5;
_13.0.0 = _3.0;
_1 = [true,false,false,true,true,true];
_22.0.1 = _3.1 - _19.0.1;
_3.1 = _22.0.1;
_22.0.0 = [false,false,true,true,false,true];
_7 = _19.0.1 >> _19.0.1;
_19 = _21;
_19.0 = (_13.0.0, _3.1);
_22.0.0 = [true,true,true,false,true,true];
Goto(bb6)
}
bb12 = {
_3 = (_14.0, _7);
_14.1 = _2 + _7;
_19.0.0 = _14.0;
_2 = !_6;
_13.0.0 = [false,false,false,false,false,false];
_14.1 = 3_usize as isize;
_6 = 28_i8 as isize;
_15 = -_2;
_8 = _15;
_13 = _19;
_21 = (_3,);
_4 = 2389016494_u32 as isize;
_19.0 = (_14.0, _2);
_20 = 2511896256_u32 as u64;
_22.0 = _21.0;
_13.0 = (_21.0.0, _8);
_13 = _19;
_22.0 = _3;
Goto(bb5)
}
bb13 = {
_19 = (_13.0,);
_3.1 = _16;
_16 = false as isize;
Goto(bb4)
}
bb14 = {
_3 = (RET, _11);
RET = [true,false,false,true,true,false];
_14.1 = _16;
RET = [true,false,true,true,false,false];
_9 = _5 | _4;
_2 = _14.1;
_19 = _13;
Goto(bb3)
}
bb15 = {
_27.fld2.6 = 112761978611008483656459968118641019938_u128;
_21 = (_19.0,);
_14.1 = _3.1 | _19.0.1;
_27.fld5.0.2 = _20 | _35.2;
place!(Field::<i8>(Variant(_32, 0), 1)) = 47_i8 << _3.1;
_27.fld2.1 = core::ptr::addr_of_mut!(_27.fld2.5);
_27.fld5 = (_35, 16388422530811373933_usize);
_26 = [_28.0.4,_28.0.4,_28.0.4,_28.0.4];
_12 = _27.fld3;
_19.0.1 = _7;
_7 = _14.1 << _30.0.1;
RET = [true,true,false,true,false,true];
_33.fld1 = core::ptr::addr_of!(_27.fld7);
_27.fld4 = !_28.0.0;
_15 = _22.0.1 ^ _3.1;
_34 = core::ptr::addr_of!(_27.fld7);
_16 = _20 as isize;
Goto(bb16)
}
bb16 = {
Call(_38 = dump_var(12_usize, 14_usize, Move(_14), 17_usize, Move(_17), 12_usize, Move(_12), 19_usize, Move(_19)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_38 = dump_var(12_usize, 10_usize, Move(_10), 22_usize, Move(_22), 16_usize, Move(_16), 3_usize, Move(_3)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_38 = dump_var(12_usize, 2_usize, Move(_2), 4_usize, Move(_4), 21_usize, Move(_21), 5_usize, Move(_5)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_38 = dump_var(12_usize, 7_usize, Move(_7), 39_usize, _39, 39_usize, _39, 39_usize, _39), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn13(mut _1: isize,mut _2: [isize; 2]) -> isize {
mir! {
type RET = isize;
let _3: bool;
let _4: bool;
let _5: [isize; 2];
let _6: [i32; 1];
let _7: Adt58;
let _8: ();
let _9: ();
{
RET = 248593891291878639806168633252977462058_u128 as isize;
RET = -_1;
_2 = [_1,_1];
RET = _1;
_3 = !false;
_1 = RET - RET;
RET = 7612724744081125791_i64 as isize;
RET = _1;
_2 = [RET,RET];
RET = !_1;
_1 = -RET;
_4 = _3;
_6 = [(-1197163930_i32)];
_6 = [539159374_i32];
_6 = [1454001143_i32];
_5 = [_1,RET];
_7.fld1.0.4 = (-17795_i16);
_7.fld3.1 = _1 << _1;
_7.fld1.0.1 = _7.fld3.1 * _7.fld3.1;
_5 = [_7.fld3.1,_1];
_7.fld0 = _7.fld3.1 == _7.fld1.0.1;
_7.fld1.0.1 = 8271028781962180665_i64 as isize;
Goto(bb1)
}
bb1 = {
Call(_8 = dump_var(13_usize, 5_usize, Move(_5), 3_usize, Move(_3), 2_usize, Move(_2), 9_usize, _9), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn14(mut _1: (i32, f64, i32),mut _2: (i32, f64, i32),mut _3: (isize, f32, i8),mut _4: ([bool; 6], isize),mut _5: ([bool; 6], isize),mut _6: ((u16, isize, *const f32, u64, i16),),mut _7: ((u16, isize, *const f32, u64, i16),),mut _8: isize,mut _9: [isize; 2]) -> ((u32, u16, u64), usize) {
mir! {
type RET = ((u32, u16, u64), usize);
let _10: bool;
let _11: i128;
let _12: u16;
let _13: [u32; 2];
let _14: [i128; 5];
let _15: ();
let _16: ();
{
RET.0.0 = 475394693_u32 ^ 2530166835_u32;
RET.1 = 60499569458147885962226166092745071675_i128 as usize;
_6.0.0 = !_7.0.0;
RET.0.2 = _7.0.3;
_1.2 = 2464571399330932101_i64 as i32;
_11 = 1183106950408509727_i64 as i128;
_8 = _5.1 + _7.0.1;
_10 = _1.0 == _1.0;
_4.0 = [_10,_10,_10,_10,_10,_10];
_9 = [_6.0.1,_6.0.1];
Goto(bb1)
}
bb1 = {
_2.0 = _1.0;
_13 = [RET.0.0,RET.0.0];
RET.0.1 = !_7.0.0;
_1.2 = _1.0;
_5 = (_4.0, _8);
_6.0.2 = core::ptr::addr_of!(_3.1);
_7.0.0 = _6.0.0 >> _8;
_6.0.3 = RET.0.2 << _6.0.0;
_6.0.4 = !_7.0.4;
_2 = _1;
RET.1 = 0_usize;
Goto(bb2)
}
bb2 = {
Call(_15 = dump_var(14_usize, 8_usize, Move(_8), 11_usize, Move(_11), 4_usize, Move(_4), 16_usize, _16), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn15(mut _1: (([bool; 6], isize),),mut _2: isize,mut _3: (([bool; 6], isize),),mut _4: i32,mut _5: u16,mut _6: ([bool; 6], isize),mut _7: ([i32; 1], [isize; 2], char),mut _8: [isize; 2],mut _9: [isize; 2],mut _10: isize,mut _11: *const f32,mut _12: isize,mut _13: ([i32; 1], [isize; 2], char)) -> f64 {
mir! {
type RET = f64;
let _14: i128;
let _15: i128;
let _16: ();
let _17: ();
{
_1 = (_6,);
_13.1 = [_10,_1.0.1];
_3 = _1;
_5 = 74278583111203515_u64 as u16;
_7.0 = [_4];
_9 = _7.1;
_7.2 = _13.2;
_13 = _7;
(*_11) = _4 as f32;
_13 = (_7.0, _7.1, _7.2);
_7.1 = [_3.0.1,_6.1];
_7 = (_13.0, _9, _13.2);
_3.0.0 = [true,true,true,false,false,false];
(*_11) = (-7962_i16) as f32;
RET = _10 as f64;
_1.0 = (_3.0.0, _2);
_14 = 8607482710895595871_u64 as i128;
_3.0 = (_1.0.0, _2);
_11 = core::ptr::addr_of!((*_11));
Goto(bb1)
}
bb1 = {
Call(_16 = dump_var(15_usize, 5_usize, Move(_5), 12_usize, Move(_12), 8_usize, Move(_8), 2_usize, Move(_2)), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Call(_16 = dump_var(15_usize, 14_usize, Move(_14), 13_usize, Move(_13), 17_usize, _17, 17_usize, _17), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn16(mut _1: bool,mut _2: isize,mut _3: ((u16, isize, *const f32, u64, i16),),mut _4: u16,mut _5: isize,mut _6: (isize, f32, i8),mut _7: ([bool; 6], isize),mut _8: isize,mut _9: isize) -> Adt59 {
mir! {
type RET = Adt59;
let _10: isize;
let _11: bool;
let _12: isize;
let _13: [u64; 5];
let _14: *mut [u64; 5];
let _15: u8;
let _16: Adt54;
let _17: isize;
let _18: [i128; 5];
let _19: f32;
let _20: char;
let _21: isize;
let _22: (i32, f64, i32);
let _23: char;
let _24: isize;
let _25: *mut [u64; 5];
let _26: i16;
let _27: f64;
let _28: Adt57;
let _29: *mut *const f32;
let _30: ([i32; 1], [isize; 2], char);
let _31: isize;
let _32: (u16, isize, *const f32, u64, i16);
let _33: [u64; 5];
let _34: i64;
let _35: ((u16, isize, *const f32, u64, i16),);
let _36: f32;
let _37: ((u16, isize, *const f32, u64, i16), (([bool; 6], isize),), u128);
let _38: [i128; 5];
let _39: [i128; 5];
let _40: u32;
let _41: [u64; 5];
let _42: char;
let _43: u8;
let _44: [i128; 5];
let _45: isize;
let _46: Adt56;
let _47: (u32, u16, u64);
let _48: Adt56;
let _49: char;
let _50: f64;
let _51: u128;
let _52: [i128; 5];
let _53: bool;
let _54: isize;
let _55: i64;
let _56: isize;
let _57: [i32; 1];
let _58: (i32, f64, i32);
let _59: ();
let _60: ();
{
_7.1 = -_5;
_5 = 111589997318699125367481657342298830910_i128 as isize;
_3.0.0 = _4;
_3.0.0 = _4 & _4;
_4 = _3.0.0 & _3.0.0;
_2 = -_6.0;
_2 = _6.1 as isize;
_6.1 = _3.0.3 as f32;
_3.0.0 = '\u{46c36}' as u16;
_4 = _3.0.0 ^ _3.0.0;
_8 = _6.0 * _6.0;
_8 = _3.0.1;
_8 = _7.1 * _9;
_10 = _8;
_12 = -_7.1;
Goto(bb1)
}
bb1 = {
_3.0.2 = core::ptr::addr_of!(_6.1);
_11 = _8 != _7.1;
_10 = !_8;
_8 = -_6.0;
_10 = _9 + _6.0;
_3.0.1 = _3.0.4 as isize;
_3.0.3 = 14539503270812805603_u64 + 4154980093276484274_u64;
_3.0.2 = core::ptr::addr_of!(_6.1);
_3.0.3 = 8519968471521262353_u64;
_12 = _10;
_3.0.1 = _12 << _3.0.4;
_12 = _10;
_9 = !_12;
_13 = [_3.0.3,_3.0.3,_3.0.3,_3.0.3,_3.0.3];
_4 = _3.0.0;
_9 = 207671127223718565137886374150896454013_u128 as isize;
_14 = core::ptr::addr_of_mut!(_13);
_14 = core::ptr::addr_of_mut!((*_14));
_7.0 = [_11,_11,_1,_1,_1,_11];
_4 = _6.1 as u16;
_3.0.4 = 15094_i16 & (-24025_i16);
_3.0.0 = !_4;
Call(_3.0.0 = core::intrinsics::transmute(_4), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_9 = _10 >> _10;
_15 = 31_u8;
_6.0 = _3.0.3 as isize;
_11 = _9 == _10;
_3.0.2 = core::ptr::addr_of!(_6.1);
_6.1 = _6.2 as f32;
_4 = _11 as u16;
_3.0.4 = (-65415782131161945443512222466749897244_i128) as i16;
_10 = _3.0.1;
_8 = !_7.1;
_6.2 = 123_i8 & (-9_i8);
_12 = _3.0.1;
(*_14) = [_3.0.3,_3.0.3,_3.0.3,_3.0.3,_3.0.3];
_5 = _8;
_3.0.2 = core::ptr::addr_of!(_6.1);
(*_14) = [_3.0.3,_3.0.3,_3.0.3,_3.0.3,_3.0.3];
_8 = 9892511975648277966_usize as isize;
_11 = _1;
_9 = _10 & _12;
_13 = [_3.0.3,_3.0.3,_3.0.3,_3.0.3,_3.0.3];
Goto(bb3)
}
bb3 = {
_3.0.1 = _5 ^ _7.1;
_18 = [(-129742436312917189272212511383045056190_i128),151956793504738975769055321966775862003_i128,(-18413654153605261666469328118595764872_i128),139614582426304382857366707414754480315_i128,35196939275651119728264509321696315326_i128];
_15 = 180_u8 << _3.0.1;
(*_14) = [_3.0.3,_3.0.3,_3.0.3,_3.0.3,_3.0.3];
_6.0 = 135698828024178576287946371131135946266_u128 as isize;
_5 = !_10;
_14 = core::ptr::addr_of_mut!((*_14));
_3.0.0 = !_4;
_3.0.1 = _7.1 ^ _7.1;
Goto(bb4)
}
bb4 = {
_6.2 = !(-40_i8);
_6.1 = _3.0.4 as f32;
_6.2 = -103_i8;
_17 = !_12;
_17 = _3.0.1;
_7.1 = !_3.0.1;
_9 = _17;
_17 = _6.1 as isize;
(*_14) = [_3.0.3,_3.0.3,_3.0.3,_3.0.3,_3.0.3];
_20 = '\u{b9219}';
_10 = _7.1 - _3.0.1;
_22.0 = _11 as i32;
_7.0 = [_1,_1,_11,_1,_11,_1];
_21 = -_5;
_22.1 = 14264393485492546296_usize as f64;
_19 = _15 as f32;
(*_14) = [_3.0.3,_3.0.3,_3.0.3,_3.0.3,_3.0.3];
_7.0 = [_1,_11,_1,_1,_11,_1];
_2 = _7.1;
_4 = !_3.0.0;
_5 = _2;
_6 = (_10, _19, (-7_i8));
Goto(bb5)
}
bb5 = {
(*_14) = [_3.0.3,_3.0.3,_3.0.3,_3.0.3,_3.0.3];
_6.2 = 72_i8;
_7.1 = !_21;
_6 = (_3.0.1, _19, (-28_i8));
_3.0.2 = core::ptr::addr_of!(_19);
_3.0.4 = (-2040_i16) << _6.0;
_7.0 = [_11,_11,_11,_11,_11,_11];
_14 = core::ptr::addr_of_mut!((*_14));
_25 = core::ptr::addr_of_mut!((*_14));
_6.2 = (-91_i8) & (-114_i8);
_6 = (_12, _19, (-57_i8));
_24 = _5 | _9;
_23 = _20;
_22.0 = !(-479767916_i32);
_6.0 = _10 & _3.0.1;
(*_25) = [_3.0.3,_3.0.3,_3.0.3,_3.0.3,_3.0.3];
_6.0 = _15 as isize;
_27 = -_22.1;
_18 = [35102773905694992564875775434922519411_i128,49044507471327752596090681071097098492_i128,(-91449351712645642731835591253344711164_i128),(-64055531191249251924076012940972169153_i128),(-42354615330194432192617980421722868457_i128)];
_7.0 = [_1,_1,_1,_11,_11,_1];
_15 = 235359784560347609966186190225565697976_u128 as u8;
_13 = [_3.0.3,_3.0.3,_3.0.3,_3.0.3,_3.0.3];
match _6.2 {
0 => bb1,
1 => bb4,
2 => bb3,
3 => bb6,
340282366920938463463374607431768211399 => bb8,
_ => bb7
}
}
bb6 = {
_6.2 = !(-40_i8);
_6.1 = _3.0.4 as f32;
_6.2 = -103_i8;
_17 = !_12;
_17 = _3.0.1;
_7.1 = !_3.0.1;
_9 = _17;
_17 = _6.1 as isize;
(*_14) = [_3.0.3,_3.0.3,_3.0.3,_3.0.3,_3.0.3];
_20 = '\u{b9219}';
_10 = _7.1 - _3.0.1;
_22.0 = _11 as i32;
_7.0 = [_1,_1,_11,_1,_11,_1];
_21 = -_5;
_22.1 = 14264393485492546296_usize as f64;
_19 = _15 as f32;
(*_14) = [_3.0.3,_3.0.3,_3.0.3,_3.0.3,_3.0.3];
_7.0 = [_1,_11,_1,_1,_11,_1];
_2 = _7.1;
_4 = !_3.0.0;
_5 = _2;
_6 = (_10, _19, (-7_i8));
Goto(bb5)
}
bb7 = {
_3.0.2 = core::ptr::addr_of!(_6.1);
_11 = _8 != _7.1;
_10 = !_8;
_8 = -_6.0;
_10 = _9 + _6.0;
_3.0.1 = _3.0.4 as isize;
_3.0.3 = 14539503270812805603_u64 + 4154980093276484274_u64;
_3.0.2 = core::ptr::addr_of!(_6.1);
_3.0.3 = 8519968471521262353_u64;
_12 = _10;
_3.0.1 = _12 << _3.0.4;
_12 = _10;
_9 = !_12;
_13 = [_3.0.3,_3.0.3,_3.0.3,_3.0.3,_3.0.3];
_4 = _3.0.0;
_9 = 207671127223718565137886374150896454013_u128 as isize;
_14 = core::ptr::addr_of_mut!(_13);
_14 = core::ptr::addr_of_mut!((*_14));
_7.0 = [_11,_11,_1,_1,_1,_11];
_4 = _6.1 as u16;
_3.0.4 = 15094_i16 & (-24025_i16);
_3.0.0 = !_4;
Call(_3.0.0 = core::intrinsics::transmute(_4), ReturnTo(bb2), UnwindUnreachable())
}
bb8 = {
_3.0.2 = core::ptr::addr_of!(_19);
Goto(bb9)
}
bb9 = {
_29 = core::ptr::addr_of_mut!(_3.0.2);
(*_25) = [_3.0.3,_3.0.3,_3.0.3,_3.0.3,_3.0.3];
(*_14) = [_3.0.3,_3.0.3,_3.0.3,_3.0.3,_3.0.3];
(*_14) = [_3.0.3,_3.0.3,_3.0.3,_3.0.3,_3.0.3];
_1 = _11;
_18 = [39609328904145505611266085003122986038_i128,(-64729332460699361714853642776179600502_i128),(-149470021604526567879108174671136807240_i128),(-146689756741932770914865435037035005172_i128),(-103749695326555791963377256755897014814_i128)];
(*_14) = [_3.0.3,_3.0.3,_3.0.3,_3.0.3,_3.0.3];
_30.0 = [_22.0];
_30.2 = _20;
_19 = -_6.1;
_3.0.2 = core::ptr::addr_of!(_6.1);
_24 = _10;
_2 = _6.0 | _21;
(*_14) = [_3.0.3,_3.0.3,_3.0.3,_3.0.3,_3.0.3];
_10 = -_3.0.1;
_15 = 252_u8;
_32.4 = 2_usize as i16;
_32 = (_3.0.0, _3.0.1, (*_29), _3.0.3, _3.0.4);
Goto(bb10)
}
bb10 = {
_15 = 24_u8;
_18 = [71284976426043686458187639590400989013_i128,140449720443829809709958682925550983725_i128,154147212635271951650685866611945772942_i128,55033641216717899703735391682464984998_i128,(-84553187005681730942125841518528149122_i128)];
_7.1 = _32.1 | _6.0;
_5 = _6.0;
_24 = -_21;
_32.0 = _3.0.0 + _4;
(*_29) = core::ptr::addr_of!(_19);
_35.0 = (_3.0.0, _12, _3.0.2, _32.3, _32.4);
(*_25) = [_35.0.3,_32.3,_3.0.3,_35.0.3,_3.0.3];
_32.4 = _35.0.3 as i16;
(*_14) = [_3.0.3,_32.3,_35.0.3,_35.0.3,_3.0.3];
_33 = [_32.3,_32.3,_35.0.3,_32.3,_32.3];
_6.2 = _3.0.3 as i8;
_9 = _10;
_15 = !217_u8;
_23 = _20;
(*_25) = [_32.3,_3.0.3,_3.0.3,_32.3,_35.0.3];
_18 = [(-88256400446437564351133100903964975076_i128),47753417379660059712872285945610369331_i128,(-156428392525341772337925289626576724444_i128),158901084718719284708912328376225045687_i128,(-124097072445055001049605313555623129647_i128)];
_14 = core::ptr::addr_of_mut!(_33);
_21 = _24 | _12;
match _3.0.3 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb8,
4 => bb9,
5 => bb6,
8519968471521262353 => bb11,
_ => bb7
}
}
bb11 = {
_29 = core::ptr::addr_of_mut!(_32.2);
_3.0 = (_32.0, _9, (*_29), _35.0.3, _35.0.4);
_7.1 = _3.0.0 as isize;
_36 = _32.0 as f32;
_4 = _35.0.0;
_33 = [_3.0.3,_3.0.3,_3.0.3,_3.0.3,_32.3];
_6.1 = -_36;
_34 = _22.0 as i64;
_3.0.0 = _32.0 >> _32.0;
_30.0 = [_22.0];
(*_14) = [_3.0.3,_32.3,_35.0.3,_35.0.3,_3.0.3];
(*_29) = _3.0.2;
_5 = _12;
_4 = _35.0.0;
_3.0.3 = _15 as u64;
_24 = -_3.0.1;
_31 = _12;
_8 = !_24;
(*_14) = [_35.0.3,_35.0.3,_32.3,_32.3,_3.0.3];
_31 = -_24;
_35 = (_32,);
_3.0.2 = _32.2;
_6.0 = _32.1 + _2;
_22.1 = 120117017397129528795251380063963339062_u128 as f64;
_3.0.3 = _35.0.3 % _32.3;
_6.0 = 162749442254476945952430471907661868832_u128 as isize;
_32.2 = _35.0.2;
_35.0.1 = !_7.1;
_32.2 = _3.0.2;
(*_25) = [_32.3,_35.0.3,_3.0.3,_35.0.3,_35.0.3];
_34 = 2704429943074182045_i64;
Goto(bb12)
}
bb12 = {
_17 = _15 as isize;
_37.0.2 = core::ptr::addr_of!(_6.1);
_32.0 = !_4;
Call(_30 = fn17(_35.0, _3.0.1, _24, _3.0.1, _31, _6), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
(*_14) = _13;
_10 = _22.0 as isize;
_32 = (_35.0.0, _35.0.1, _35.0.2, _3.0.3, _3.0.4);
_32.4 = _3.0.4;
_3 = (_35.0,);
_32.4 = -_35.0.4;
_8 = _21 >> _21;
_30.0 = [_22.0];
_37.1.0.0 = [_1,_1,_11,_11,_11,_11];
_32 = (_4, _24, _35.0.2, _35.0.3, _3.0.4);
_37.2 = 152344756627890982330675694462362089680_i128 as u128;
_37.1 = (_7,);
_3 = (_32,);
_22.0 = _27 as i32;
_18 = [38660207981811230208115215592095599805_i128,(-136724256275329587256940360865898026998_i128),(-45586300190801778451571940238910340154_i128),14399045944003032270833729440119730826_i128,46902654054871758201173414414416516279_i128];
(*_29) = _3.0.2;
_37.1.0.1 = _32.1;
_3 = (_32,);
_32.1 = _12;
_20 = _23;
_28 = Adt57::Variant2 { fld0: _30.1 };
(*_25) = [_35.0.3,_32.3,_35.0.3,_32.3,_35.0.3];
_24 = _12 | _31;
_32.3 = _15 as u64;
_26 = _6.1 as i16;
match _35.0.3 {
0 => bb1,
1 => bb10,
2 => bb3,
3 => bb4,
4 => bb5,
5 => bb6,
6 => bb9,
8519968471521262353 => bb15,
_ => bb14
}
}
bb14 = {
_17 = _15 as isize;
_37.0.2 = core::ptr::addr_of!(_6.1);
_32.0 = !_4;
Call(_30 = fn17(_35.0, _3.0.1, _24, _3.0.1, _31, _6), ReturnTo(bb13), UnwindUnreachable())
}
bb15 = {
_37.0.4 = _26 ^ _26;
_38 = [82554069588648723557258204364302216037_i128,59263166243377595368282281923180614444_i128,19769456571737802002484107649391167480_i128,97757901774457574262868925879651910894_i128,98044414851396249849576070727845472178_i128];
SetDiscriminant(_28, 0);
_37.1 = (_7,);
_35.0 = (_32.0, _3.0.1, _37.0.2, _32.3, _26);
_12 = !_7.1;
_32.3 = !_35.0.3;
_22 = (958085331_i32, _27, 553010637_i32);
_32 = (_35.0.0, _2, _35.0.2, _35.0.3, _35.0.4);
_12 = _22.2 as isize;
_6.1 = -_19;
match _34 {
2704429943074182045 => bb16,
_ => bb4
}
}
bb16 = {
place!(Field::<((u16, isize, *const f32, u64, i16),)>(Variant(_28, 0), 0)).0.1 = _31;
_3 = (_32,);
_7.0 = [_11,_11,_11,_1,_1,_1];
_37.1.0.1 = _5;
_9 = _31 << _35.0.0;
_47 = (243933209_u32, _4, _32.3);
_3.0.1 = _27 as isize;
_29 = core::ptr::addr_of_mut!((*_29));
_37.0.1 = _7.1;
place!(Field::<isize>(Variant(_28, 0), 2)) = _6.2 as isize;
_50 = 11085425614256068524_usize as f64;
place!(Field::<((u16, isize, *const f32, u64, i16),)>(Variant(_28, 0), 0)) = _3;
_11 = !_1;
_37.0 = _3.0;
_31 = _8;
_35.0.4 = -_32.4;
place!(Field::<(i64, *mut [u64; 5], i64)>(Variant(_28, 0), 5)).1 = core::ptr::addr_of_mut!(_33);
_21 = _22.1 as isize;
_45 = _37.1.0.1;
_3.0.3 = !_32.3;
_37.1 = (_7,);
match _47.0 {
0 => bb17,
1 => bb18,
2 => bb19,
3 => bb20,
4 => bb21,
243933209 => bb23,
_ => bb22
}
}
bb17 = {
_37.0.4 = _26 ^ _26;
_38 = [82554069588648723557258204364302216037_i128,59263166243377595368282281923180614444_i128,19769456571737802002484107649391167480_i128,97757901774457574262868925879651910894_i128,98044414851396249849576070727845472178_i128];
SetDiscriminant(_28, 0);
_37.1 = (_7,);
_35.0 = (_32.0, _3.0.1, _37.0.2, _32.3, _26);
_12 = !_7.1;
_32.3 = !_35.0.3;
_22 = (958085331_i32, _27, 553010637_i32);
_32 = (_35.0.0, _2, _35.0.2, _35.0.3, _35.0.4);
_12 = _22.2 as isize;
_6.1 = -_19;
match _34 {
2704429943074182045 => bb16,
_ => bb4
}
}
bb18 = {
_17 = _15 as isize;
_37.0.2 = core::ptr::addr_of!(_6.1);
_32.0 = !_4;
Call(_30 = fn17(_35.0, _3.0.1, _24, _3.0.1, _31, _6), ReturnTo(bb13), UnwindUnreachable())
}
bb19 = {
_3.0.2 = core::ptr::addr_of!(_19);
Goto(bb9)
}
bb20 = {
_3.0.2 = core::ptr::addr_of!(_6.1);
_11 = _8 != _7.1;
_10 = !_8;
_8 = -_6.0;
_10 = _9 + _6.0;
_3.0.1 = _3.0.4 as isize;
_3.0.3 = 14539503270812805603_u64 + 4154980093276484274_u64;
_3.0.2 = core::ptr::addr_of!(_6.1);
_3.0.3 = 8519968471521262353_u64;
_12 = _10;
_3.0.1 = _12 << _3.0.4;
_12 = _10;
_9 = !_12;
_13 = [_3.0.3,_3.0.3,_3.0.3,_3.0.3,_3.0.3];
_4 = _3.0.0;
_9 = 207671127223718565137886374150896454013_u128 as isize;
_14 = core::ptr::addr_of_mut!(_13);
_14 = core::ptr::addr_of_mut!((*_14));
_7.0 = [_11,_11,_1,_1,_1,_11];
_4 = _6.1 as u16;
_3.0.4 = 15094_i16 & (-24025_i16);
_3.0.0 = !_4;
Call(_3.0.0 = core::intrinsics::transmute(_4), ReturnTo(bb2), UnwindUnreachable())
}
bb21 = {
_3.0.1 = _5 ^ _7.1;
_18 = [(-129742436312917189272212511383045056190_i128),151956793504738975769055321966775862003_i128,(-18413654153605261666469328118595764872_i128),139614582426304382857366707414754480315_i128,35196939275651119728264509321696315326_i128];
_15 = 180_u8 << _3.0.1;
(*_14) = [_3.0.3,_3.0.3,_3.0.3,_3.0.3,_3.0.3];
_6.0 = 135698828024178576287946371131135946266_u128 as isize;
_5 = !_10;
_14 = core::ptr::addr_of_mut!((*_14));
_3.0.0 = !_4;
_3.0.1 = _7.1 ^ _7.1;
Goto(bb4)
}
bb22 = {
_15 = 24_u8;
_18 = [71284976426043686458187639590400989013_i128,140449720443829809709958682925550983725_i128,154147212635271951650685866611945772942_i128,55033641216717899703735391682464984998_i128,(-84553187005681730942125841518528149122_i128)];
_7.1 = _32.1 | _6.0;
_5 = _6.0;
_24 = -_21;
_32.0 = _3.0.0 + _4;
(*_29) = core::ptr::addr_of!(_19);
_35.0 = (_3.0.0, _12, _3.0.2, _32.3, _32.4);
(*_25) = [_35.0.3,_32.3,_3.0.3,_35.0.3,_3.0.3];
_32.4 = _35.0.3 as i16;
(*_14) = [_3.0.3,_32.3,_35.0.3,_35.0.3,_3.0.3];
_33 = [_32.3,_32.3,_35.0.3,_32.3,_32.3];
_6.2 = _3.0.3 as i8;
_9 = _10;
_15 = !217_u8;
_23 = _20;
(*_25) = [_32.3,_3.0.3,_3.0.3,_32.3,_35.0.3];
_18 = [(-88256400446437564351133100903964975076_i128),47753417379660059712872285945610369331_i128,(-156428392525341772337925289626576724444_i128),158901084718719284708912328376225045687_i128,(-124097072445055001049605313555623129647_i128)];
_14 = core::ptr::addr_of_mut!(_33);
_21 = _24 | _12;
match _3.0.3 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb8,
4 => bb9,
5 => bb6,
8519968471521262353 => bb11,
_ => bb7
}
}
bb23 = {
_35.0.2 = (*_29);
_17 = _8 ^ _7.1;
_3.0.3 = _37.0.3 ^ _47.2;
_21 = _3.0.0 as isize;
_45 = _37.2 as isize;
_30.0 = [_22.2];
_37.0.2 = (*_29);
_32.4 = -_35.0.4;
_3.0.3 = _35.0.3;
RET.fld0 = core::ptr::addr_of!(place!(Field::<(i64, *mut [u64; 5], i64)>(Variant(_28, 0), 5)));
_32 = Field::<((u16, isize, *const f32, u64, i16),)>(Variant(_28, 0), 0).0;
_28 = Adt57::Variant2 { fld0: _30.1 };
_56 = _37.1.0.1 + _7.1;
Goto(bb24)
}
bb24 = {
Call(_59 = dump_var(16_usize, 15_usize, Move(_15), 8_usize, Move(_8), 2_usize, Move(_2), 56_usize, Move(_56)), ReturnTo(bb25), UnwindUnreachable())
}
bb25 = {
Call(_59 = dump_var(16_usize, 33_usize, Move(_33), 23_usize, Move(_23), 26_usize, Move(_26), 38_usize, Move(_38)), ReturnTo(bb26), UnwindUnreachable())
}
bb26 = {
Call(_59 = dump_var(16_usize, 1_usize, Move(_1), 10_usize, Move(_10), 24_usize, Move(_24), 30_usize, Move(_30)), ReturnTo(bb27), UnwindUnreachable())
}
bb27 = {
Call(_59 = dump_var(16_usize, 31_usize, Move(_31), 60_usize, _60, 60_usize, _60, 60_usize, _60), ReturnTo(bb28), UnwindUnreachable())
}
bb28 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn17(mut _1: (u16, isize, *const f32, u64, i16),mut _2: isize,mut _3: isize,mut _4: isize,mut _5: isize,mut _6: (isize, f32, i8)) -> ([i32; 1], [isize; 2], char) {
mir! {
type RET = ([i32; 1], [isize; 2], char);
let _7: i32;
let _8: [u32; 6];
let _9: i64;
let _10: (i32, f64, i32);
let _11: (u32, u16, u64);
let _12: [char; 1];
let _13: bool;
let _14: Adt53;
let _15: isize;
let _16: [char; 1];
let _17: ();
let _18: ();
{
RET.2 = '\u{f9819}';
_2 = 170133287975330020246944859040545202611_i128 as isize;
RET.0 = [1611007703_i32];
_1.1 = _5 ^ _4;
_5 = false as isize;
_5 = _4 - _1.1;
_1.4 = -32105_i16;
_7 = 2_usize as i32;
_1.4 = 6_usize as i16;
Goto(bb1)
}
bb1 = {
RET.1 = [_3,_1.1];
_8 = [3823004511_u32,2690051333_u32,1590639027_u32,2319650167_u32,6776674_u32,2056690010_u32];
_2 = _4 >> _1.1;
_1.1 = _4 >> _2;
_10.2 = _7;
_6.2 = _6.1 as i8;
_6.2 = !86_i8;
_5 = _2;
_5 = 5_usize as isize;
_11.0 = false as u32;
_6.0 = -_3;
_10.1 = _1.0 as f64;
_12 = [RET.2];
RET.0 = [_7];
_11.2 = (-58235180241935179916901667194481286189_i128) as u64;
_11.1 = _1.0 | _1.0;
_2 = -_4;
RET.1 = [_1.1,_2];
Goto(bb2)
}
bb2 = {
Call(_17 = dump_var(17_usize, 8_usize, Move(_8), 2_usize, Move(_2), 4_usize, Move(_4), 11_usize, Move(_11)), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn18(mut _1: (([bool; 6], isize),),mut _2: Adt63,mut _3: *const (i64, *mut [u64; 5], i64),mut _4: *const (i64, *mut [u64; 5], i64),mut _5: isize,mut _6: (([bool; 6], isize),),mut _7: Adt63,mut _8: Adt63,mut _9: ([bool; 6], isize),mut _10: ([bool; 6], isize),mut _11: (i64, *mut [u64; 5], i64),mut _12: (i64, *mut [u64; 5], i64)) -> ([bool; 6], isize) {
mir! {
type RET = ([bool; 6], isize);
let _13: [i32; 1];
let _14: ((u16, isize, *const f32, u64, i16), (([bool; 6], isize),), u128);
let _15: isize;
let _16: (i32, f64, i32);
let _17: Adt48;
let _18: bool;
let _19: [u64; 5];
let _20: ();
let _21: ();
{
_12 = _11;
_6 = (_10,);
_1 = (_10,);
_12.2 = 42079_u16 as i64;
Goto(bb1)
}
bb1 = {
RET = (_6.0.0, _6.0.1);
(*_4).0 = 0_usize as i64;
_14.0.0 = 1920501032_i32 as u16;
(*_3).2 = (*_4).0 | (*_3).0;
_16.0 = 783481942_i32 >> _10.1;
_14.0.4 = _2.fld0;
_11.0 = 3222171152_u32 as i64;
(*_4) = (_11.0, _12.1, _12.0);
_6.0.0 = [false,false,false,false,false,false];
_13 = [_16.0];
_14.1.0.0 = [true,false,false,true,true,true];
(*_4).2 = (*_4).0;
_1.0.1 = _6.0.1;
_14.0.3 = !12634762540454891631_u64;
_3 = core::ptr::addr_of!((*_4));
_6.0.0 = _14.1.0.0;
Goto(bb2)
}
bb2 = {
Call(_20 = dump_var(18_usize, 10_usize, Move(_10), 1_usize, Move(_1), 13_usize, Move(_13), 21_usize, _21), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Return()
}

}
}
pub fn main() {
                fn0(std::hint::black_box(24052_u16), std::hint::black_box(6_usize), std::hint::black_box(3088486562_u32), std::hint::black_box(8051909042172577497_u64), std::hint::black_box(2001_i16), std::hint::black_box(1223960895_i32), std::hint::black_box((-997834144829119472_i64)));
                
            }
#[derive(Debug)]
pub enum Adt48 {
Variant0{
fld0: u32,
fld1: ([i32; 1], [isize; 2], char),
fld2: [i16; 4],
fld3: u64,
fld4: [bool; 6],
fld5: *mut isize,
fld6: *mut f32,

},
Variant1{
fld0: i128,
fld1: [i128; 5],
fld2: isize,
fld3: u8,
fld4: *mut f32,
fld5: (([bool; 6], isize),),

},
Variant2{
fld0: [i16; 4],
fld1: char,
fld2: *const f32,
fld3: *mut isize,
fld4: u8,

}}
#[derive(Debug)]
pub enum Adt49 {
Variant0{
fld0: (i32, f64, i32),
fld1: ((u32, u16, u64), usize),
fld2: (u16, isize, *const f32, u64, i16),
fld3: [i32; 1],
fld4: i16,
fld5: [bool; 6],
fld6: (i32, *mut isize, *mut f32, usize, [u64; 5], isize, u128),
fld7: [i16; 4],

},
Variant1{
fld0: (u16, isize, *const f32, u64, i16),

},
Variant2{
fld0: [char; 1],
fld1: ((u32, u16, u64), usize),
fld2: Adt48,
fld3: [i128; 5],
fld4: ([bool; 6], isize),
fld5: u128,
fld6: *const *mut isize,

}}
#[derive(Debug)]
pub struct Adt50 {
fld0: Adt48,
fld1: [u64; 5],
fld2: (i32, *mut isize, *mut f32, usize, [u64; 5], isize, u128),
fld3: [isize; 2],
fld4: u16,
fld5: ((u32, u16, u64), usize),
fld6: *const (isize, f32, i8),
fld7: (i64, *mut [u64; 5], i64),
}
#[derive(Debug)]
pub enum Adt51 {
Variant0{
fld0: *mut *const f32,
fld1: Adt48,
fld2: [i16; 4],
fld3: f32,
fld4: u32,
fld5: (([bool; 6], isize),),
fld6: [bool; 6],
fld7: [char; 1],

},
Variant1{
fld0: [char; 1],
fld1: Adt50,
fld2: ((u32, u16, u64), usize),
fld3: *const (i64, *mut [u64; 5], i64),
fld4: u32,
fld5: ((u16, isize, *const f32, u64, i16), (([bool; 6], isize),), u128),
fld6: (([bool; 6], isize),),
fld7: u8,

},
Variant2{
fld0: *mut isize,
fld1: u64,
fld2: i64,

}}
#[derive(Debug,Copy,Clone)]
pub enum Adt52 {
Variant0{
fld0: ((u16, isize, *const f32, u64, i16), (([bool; 6], isize),), u128),
fld1: *mut [u64; 5],
fld2: *const f32,
fld3: u16,
fld4: f32,

},
Variant1{
fld0: ([i32; 1], [isize; 2], char),

},
Variant2{
fld0: u8,
fld1: f32,
fld2: (u32, u16, u64),
fld3: i8,
fld4: ([bool; 6], isize),

},
Variant3{
fld0: u128,
fld1: [isize; 2],
fld2: (i32, *mut isize, *mut f32, usize, [u64; 5], isize, u128),
fld3: ((u16, isize, *const f32, u64, i16), (([bool; 6], isize),), u128),
fld4: ([bool; 6], isize),
fld5: (([bool; 6], isize),),
fld6: i64,

}}
#[derive(Debug)]
pub enum Adt53 {
Variant0{
fld0: u64,
fld1: i8,

},
Variant1{
fld0: [i16; 4],
fld1: Adt49,
fld2: *const (i64, *mut [u64; 5], i64),
fld3: f32,
fld4: [u64; 5],
fld5: [u32; 2],
fld6: i64,
fld7: (u32, u16, u64),

}}
#[derive(Debug)]
pub enum Adt54 {
Variant0{
fld0: [i128; 5],
fld1: *mut *const f32,
fld2: f32,
fld3: ((u32, u16, u64), usize),
fld4: i16,
fld5: i32,
fld6: i64,
fld7: [isize; 2],

},
Variant1{
fld0: Adt48,
fld1: *const f32,
fld2: Adt52,
fld3: *mut isize,
fld4: i16,
fld5: [char; 1],

}}
#[derive(Debug)]
pub struct Adt55 {
fld0: (u16, isize, *const f32, u64, i16),
fld1: Adt49,
}
#[derive(Debug)]
pub enum Adt56 {
Variant0{
fld0: ((u16, isize, *const f32, u64, i16), (([bool; 6], isize),), u128),
fld1: usize,
fld2: [u32; 6],

},
Variant1{
fld0: *mut isize,
fld1: *const *const *mut isize,
fld2: ((u32, u16, u64), usize),
fld3: (isize, f32, i8),
fld4: i16,
fld5: Adt51,

}}
#[derive(Debug)]
pub enum Adt57 {
Variant0{
fld0: ((u16, isize, *const f32, u64, i16),),
fld1: Adt51,
fld2: isize,
fld3: ((u32, u16, u64), usize),
fld4: Adt49,
fld5: (i64, *mut [u64; 5], i64),
fld6: *mut [u64; 5],

},
Variant1{
fld0: [u32; 6],

},
Variant2{
fld0: [isize; 2],

}}
#[derive(Debug)]
pub struct Adt58 {
fld0: bool,
fld1: ((u16, isize, *const f32, u64, i16),),
fld2: *const *const *mut isize,
fld3: ([bool; 6], isize),
}
#[derive(Debug,Copy,Clone)]
pub struct Adt59 {
fld0: *const (i64, *mut [u64; 5], i64),
}
#[derive(Debug,Copy,Clone)]
pub struct Adt60 {
fld0: u32,
fld1: *mut f32,
fld2: isize,
fld3: (i32, *mut isize, *mut f32, usize, [u64; 5], isize, u128),
fld4: i128,
}
#[derive(Debug)]
pub enum Adt61 {
Variant0{
fld0: ((u16, isize, *const f32, u64, i16),),
fld1: *const i32,
fld2: usize,
fld3: [i16; 4],
fld4: *const (i64, *mut [u64; 5], i64),
fld5: i32,
fld6: [isize; 2],

},
Variant1{
fld0: *const *mut isize,
fld1: Adt56,

}}
#[derive(Debug)]
pub enum Adt62 {
Variant0{
fld0: *const i32,
fld1: u32,
fld2: Adt55,
fld3: i8,
fld4: Adt48,
fld5: (i32, f64, i32),
fld6: Adt56,

},
Variant1{
fld0: u128,

}}
#[derive(Debug,Copy,Clone)]
pub struct Adt63 {
fld0: i16,
fld1: *const (i64, *mut [u64; 5], i64),
}
#[derive(Debug,Copy,Clone)]
pub struct Adt64 {
fld0: *const *const *mut isize,
}

