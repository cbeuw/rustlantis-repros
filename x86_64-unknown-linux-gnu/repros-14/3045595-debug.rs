#![recursion_limit = "1024"]
    #![feature(custom_mir, core_intrinsics, const_hash)]
    #![allow(unused_parens, unused_assignments, overflowing_literals)]
    extern crate core;
    use core::intrinsics::mir::*;

    use std::fmt::Debug;

    #[inline(never)]
    fn dump_var(
        f: usize,
        var0: usize, val0: impl Debug,
        var1: usize, val1: impl Debug,
        var2: usize, val2: impl Debug,
        var3: usize, val3: impl Debug,
    ) {
        println!("fn{f}:_{var0} = {val0:?}\n_{var1} = {val1:?}\n_{var2} = {val2:?}\n_{var3} = {val3:?}");
    }
    #[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn0(mut _1: bool,mut _2: char,mut _3: isize,mut _4: i8,mut _5: i16,mut _6: i32,mut _7: i64,mut _8: i128,mut _9: usize,mut _10: u8,mut _11: u16,mut _12: u32,mut _13: u64,mut _14: u128) -> *mut *const i32 {
mir! {
type RET = *mut *const i32;
let _15: u16;
let _16: f32;
let _17: [bool; 2];
let _18: bool;
let _19: [u8; 8];
let _20: isize;
let _21: *mut bool;
let _22: f32;
let _23: *const f32;
let _24: isize;
let _25: [u8; 8];
let _26: u8;
let _27: Adt56;
let _28: u32;
let _29: *const f32;
let _30: char;
let _31: f32;
let _32: (f32, bool, u16, (u8, u16), i64);
let _33: Adt57;
let _34: i16;
let _35: bool;
let _36: [i128; 6];
let _37: usize;
let _38: (bool,);
let _39: isize;
let _40: u8;
let _41: (u64, i32, f64);
let _42: (i16, char, [i16; 5], [usize; 8]);
let _43: *mut *mut bool;
let _44: (u64, *const i32, *mut *const i32);
let _45: *const [usize; 8];
let _46: ();
let _47: ();
{
_8 = -79109113880850741366299957492888719919_i128;
_4 = 47040671038363122876548485312308609226_u128 as i8;
_1 = true;
_3 = (-92_isize) - 9223372036854775807_isize;
_9 = 4264712870599728952_usize;
_1 = _8 > _8;
_7 = !(-3185409569757831652_i64);
_8 = (-163388660340819355336102909189032762960_i128);
_6 = (-2132110055_i32) * 1103982591_i32;
_12 = !901717025_u32;
_13 = _4 as u64;
_15 = 27440_u16 >> _13;
_7 = 8757625465351790450_i64 << _6;
_14 = !28209642410461496753678903603260482660_u128;
_1 = !false;
_15 = '\u{80ac9}' as u16;
_9 = 1_usize - 3_usize;
_5 = (-12168_i16);
_14 = 244808150382488203817909960133937531816_u128 ^ 153306732195493974337048971010615512784_u128;
_12 = 588261302_u32 | 1369599431_u32;
_14 = 169376880505263392010738171401838229854_u128 & 305569018740605120221072515546935382511_u128;
_17 = [_1,_1];
match _8 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
176893706580119108127271698242735448496 => bb6,
_ => bb5
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
_10 = !16_u8;
_1 = true;
_1 = _7 >= _7;
_11 = !_15;
_10 = 94_u8;
_13 = '\u{1ccb6}' as u64;
_4 = 48_i8 ^ 40_i8;
_12 = 3731406616_u32;
_1 = !false;
_4 = _12 as i8;
match _12 {
0 => bb7,
1 => bb8,
3731406616 => bb10,
_ => bb9
}
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_2 = '\u{2f05b}';
_8 = _7 as i128;
_6 = _3 as i32;
_12 = _5 as u32;
_10 = _6 as u8;
_14 = 222778612155933797937739886779569041546_u128;
_6 = 1466404599_i32;
_9 = _1 as usize;
_16 = _14 as f32;
_10 = 111_u8 >> _9;
_7 = (-8711507022708231710_i64) >> _10;
_12 = 1231828809_u32;
_18 = !_1;
_7 = 6849576003119829283_i64;
_10 = 179_u8 & 15_u8;
_1 = _15 != _11;
_17 = [_18,_18];
_1 = _18;
_17 = [_18,_18];
_21 = core::ptr::addr_of_mut!(_1);
_12 = _2 as u32;
_18 = (*_21);
_20 = _3 - _3;
Goto(bb11)
}
bb11 = {
_4 = (-75_i8) & 119_i8;
_14 = 272520488580392785264596238215532932309_u128;
_20 = -_3;
Call(_20 = fn1(_14, _6, _14, _5, _3, _8), bb12, UnwindUnreachable())
}
bb12 = {
_8 = (-70450471159315724988507133347913074031_i128);
_17 = [_18,_1];
_4 = (-4_i8) - 108_i8;
_18 = (*_21);
_22 = _16 - _16;
_19 = [_10,_10,_10,_10,_10,_10,_10,_10];
_22 = -_16;
_23 = core::ptr::addr_of!(_16);
_10 = !73_u8;
_16 = _10 as f32;
_10 = _8 as u8;
match _6 {
0 => bb11,
1 => bb2,
2 => bb3,
3 => bb9,
4 => bb5,
5 => bb6,
1466404599 => bb13,
_ => bb10
}
}
bb13 = {
_12 = _5 as u32;
_18 = (*_21) & (*_21);
_15 = _11 ^ _11;
(*_23) = _22 - _22;
_9 = _20 as usize;
Goto(bb14)
}
bb14 = {
_14 = _15 as u128;
_20 = -_3;
_4 = (-115_i8) & (-10_i8);
_17 = [_18,_18];
_16 = _22 * _22;
_18 = !(*_21);
_11 = _15;
_5 = !5326_i16;
_16 = _22 * _22;
_12 = _13 as u32;
_1 = !_18;
_5 = (-26705_i16);
_21 = core::ptr::addr_of_mut!(_18);
_1 = _22 < _16;
_22 = -_16;
_14 = 214480312423766816752032985826342517564_u128;
_14 = _13 as u128;
_7 = _12 as i64;
_17 = [_18,_1];
_15 = _7 as u16;
_24 = -_20;
_6 = _4 as i32;
_10 = _7 as u8;
_17 = [_1,(*_21)];
_18 = _1;
_7 = (-1393938988510044163_i64);
_24 = (*_21) as isize;
match _8 {
0 => bb15,
1 => bb16,
269831895761622738474867474083855137425 => bb18,
_ => bb17
}
}
bb15 = {
_12 = _5 as u32;
_18 = (*_21) & (*_21);
_15 = _11 ^ _11;
(*_23) = _22 - _22;
_9 = _20 as usize;
Goto(bb14)
}
bb16 = {
_8 = (-70450471159315724988507133347913074031_i128);
_17 = [_18,_1];
_4 = (-4_i8) - 108_i8;
_18 = (*_21);
_22 = _16 - _16;
_19 = [_10,_10,_10,_10,_10,_10,_10,_10];
_22 = -_16;
_23 = core::ptr::addr_of!(_16);
_10 = !73_u8;
_16 = _10 as f32;
_10 = _8 as u8;
match _6 {
0 => bb11,
1 => bb2,
2 => bb3,
3 => bb9,
4 => bb5,
5 => bb6,
1466404599 => bb13,
_ => bb10
}
}
bb17 = {
Return()
}
bb18 = {
_5 = 15425_i16;
_13 = _5 as u64;
_4 = _16 as i8;
_5 = -3060_i16;
_26 = _10;
(*_21) = _1;
_1 = (*_21);
_10 = !_26;
_15 = !_11;
_17 = [(*_21),_18];
(*_23) = _12 as f32;
_13 = 6785083800631619738_u64 << _9;
_21 = core::ptr::addr_of_mut!((*_21));
Call(_14 = fn2(_8, _23, _24, _9, _7, _20, _13, _1, _10, _18), bb19, UnwindUnreachable())
}
bb19 = {
_25 = [_10,_10,_26,_10,_26,_10,_26,_26];
_18 = _15 != _15;
_1 = !(*_21);
Goto(bb20)
}
bb20 = {
_12 = 3979327685_u32;
_10 = _26;
_1 = !(*_21);
_12 = 2645586488_u32 >> _15;
_25 = [_26,_10,_26,_26,_10,_10,_26,_26];
_6 = _24 as i32;
_22 = (*_23);
_7 = (-7335185277957055816_i64) * 8581115175665084364_i64;
_2 = '\u{83358}';
(*_21) = _1 & _1;
_12 = !3937421566_u32;
(*_23) = _22 + _22;
_26 = _10;
_9 = 5574274823102484113_usize;
_21 = core::ptr::addr_of_mut!(_18);
_13 = 13957196666725044584_u64 - 10865997783476753593_u64;
(*_21) = _1;
_19 = [_26,_26,_10,_10,_26,_10,_10,_10];
_3 = !_24;
_17 = [(*_21),_1];
_13 = (*_23) as u64;
_23 = core::ptr::addr_of!((*_23));
_12 = _5 as u32;
_22 = _16 * (*_23);
_5 = 24013_i16;
_6 = _20 as i32;
_21 = core::ptr::addr_of_mut!((*_21));
_22 = (*_23);
_6 = !859329910_i32;
match _5 {
0 => bb15,
1 => bb10,
2 => bb21,
24013 => bb23,
_ => bb22
}
}
bb21 = {
Return()
}
bb22 = {
_12 = _5 as u32;
_18 = (*_21) & (*_21);
_15 = _11 ^ _11;
(*_23) = _22 - _22;
_9 = _20 as usize;
Goto(bb14)
}
bb23 = {
_25 = _19;
_8 = !20713556908731267247650409286056454750_i128;
(*_23) = -_22;
(*_21) = _1;
(*_23) = -_22;
_8 = 167691538658298172341616364017590860956_i128 >> _6;
_28 = _12 - _12;
_21 = core::ptr::addr_of_mut!(_1);
_6 = _7 as i32;
_19 = [_26,_10,_10,_10,_10,_26,_10,_10];
_17 = [(*_21),_18];
(*_23) = _22;
(*_23) = _13 as f32;
_1 = !_18;
_23 = core::ptr::addr_of!(_16);
_11 = _15;
_6 = _13 as i32;
_7 = _6 as i64;
_23 = core::ptr::addr_of!(_16);
_14 = _8 as u128;
(*_21) = _18;
_29 = core::ptr::addr_of!((*_23));
(*_23) = _22;
_21 = core::ptr::addr_of_mut!((*_21));
_4 = !72_i8;
_8 = (-149134732676888327430913144909736420751_i128) * (-158369574024968240669730153016148340581_i128);
_23 = core::ptr::addr_of!((*_23));
_21 = core::ptr::addr_of_mut!(_18);
_16 = -_22;
Goto(bb24)
}
bb24 = {
_17 = [_1,_18];
_32.2 = _11 & _11;
_7 = (-5967220042952550944_i64);
_32.3 = (_26, _32.2);
_31 = _6 as f32;
_14 = !84918778746524339666313301629508943313_u128;
(*_29) = _22 * _22;
_30 = _2;
_32.0 = -(*_29);
match _5 {
0 => bb11,
1 => bb19,
2 => bb3,
3 => bb4,
4 => bb16,
5 => bb6,
6 => bb17,
24013 => bb25,
_ => bb10
}
}
bb25 = {
_3 = _24;
_32.3.0 = _26 & _10;
(*_29) = _22 * _32.0;
_3 = !_20;
_28 = _12;
match _9 {
0 => bb9,
1 => bb16,
2 => bb21,
3 => bb4,
4 => bb5,
5 => bb6,
6 => bb24,
5574274823102484113 => bb27,
_ => bb26
}
}
bb26 = {
_2 = '\u{2f05b}';
_8 = _7 as i128;
_6 = _3 as i32;
_12 = _5 as u32;
_10 = _6 as u8;
_14 = 222778612155933797937739886779569041546_u128;
_6 = 1466404599_i32;
_9 = _1 as usize;
_16 = _14 as f32;
_10 = 111_u8 >> _9;
_7 = (-8711507022708231710_i64) >> _10;
_12 = 1231828809_u32;
_18 = !_1;
_7 = 6849576003119829283_i64;
_10 = 179_u8 & 15_u8;
_1 = _15 != _11;
_17 = [_18,_18];
_1 = _18;
_17 = [_18,_18];
_21 = core::ptr::addr_of_mut!(_1);
_12 = _2 as u32;
_18 = (*_21);
_20 = _3 - _3;
Goto(bb11)
}
bb27 = {
_5 = (*_29) as i16;
_9 = !2_usize;
_34 = -_5;
(*_21) = !_1;
_32.0 = _10 as f32;
_1 = (*_29) > _22;
_14 = _32.3.0 as u128;
_9 = 7971984871822915679_usize + 4_usize;
_24 = _3;
match _7 {
0 => bb28,
1 => bb29,
2 => bb30,
3 => bb31,
4 => bb32,
5 => bb33,
340282366920938463457407387388815660512 => bb35,
_ => bb34
}
}
bb28 = {
Return()
}
bb29 = {
_4 = (-75_i8) & 119_i8;
_14 = 272520488580392785264596238215532932309_u128;
_20 = -_3;
Call(_20 = fn1(_14, _6, _14, _5, _3, _8), bb12, UnwindUnreachable())
}
bb30 = {
Return()
}
bb31 = {
Return()
}
bb32 = {
_5 = 15425_i16;
_13 = _5 as u64;
_4 = _16 as i8;
_5 = -3060_i16;
_26 = _10;
(*_21) = _1;
_1 = (*_21);
_10 = !_26;
_15 = !_11;
_17 = [(*_21),_18];
(*_23) = _12 as f32;
_13 = 6785083800631619738_u64 << _9;
_21 = core::ptr::addr_of_mut!((*_21));
Call(_14 = fn2(_8, _23, _24, _9, _7, _20, _13, _1, _10, _18), bb19, UnwindUnreachable())
}
bb33 = {
_25 = [_10,_10,_26,_10,_26,_10,_26,_26];
_18 = _15 != _15;
_1 = !(*_21);
Goto(bb20)
}
bb34 = {
_12 = 3979327685_u32;
_10 = _26;
_1 = !(*_21);
_12 = 2645586488_u32 >> _15;
_25 = [_26,_10,_26,_26,_10,_10,_26,_26];
_6 = _24 as i32;
_22 = (*_23);
_7 = (-7335185277957055816_i64) * 8581115175665084364_i64;
_2 = '\u{83358}';
(*_21) = _1 & _1;
_12 = !3937421566_u32;
(*_23) = _22 + _22;
_26 = _10;
_9 = 5574274823102484113_usize;
_21 = core::ptr::addr_of_mut!(_18);
_13 = 13957196666725044584_u64 - 10865997783476753593_u64;
(*_21) = _1;
_19 = [_26,_26,_10,_10,_26,_10,_10,_10];
_3 = !_24;
_17 = [(*_21),_1];
_13 = (*_23) as u64;
_23 = core::ptr::addr_of!((*_23));
_12 = _5 as u32;
_22 = _16 * (*_23);
_5 = 24013_i16;
_6 = _20 as i32;
_21 = core::ptr::addr_of_mut!((*_21));
_22 = (*_23);
_6 = !859329910_i32;
match _5 {
0 => bb15,
1 => bb10,
2 => bb21,
24013 => bb23,
_ => bb22
}
}
bb35 = {
_32.0 = -(*_29);
_32.1 = _1;
_22 = _16 + (*_23);
_10 = _32.3.0 & _32.3.0;
_38 = ((*_21),);
_24 = _20 * _20;
_25 = [_10,_10,_32.3.0,_32.3.0,_10,_10,_32.3.0,_10];
_20 = _11 as isize;
_32.1 = !_38.0;
_7 = (-1767582582206201508_i64);
_10 = _22 as u8;
_16 = _22 - _22;
_28 = _12 + _12;
_32.4 = _7;
_2 = _30;
_32.1 = (*_23) < _16;
_31 = (*_29);
_8 = (-128882794439663297620487900961360757667_i128) + (-106982739651251913325324891980774262502_i128);
_26 = !_10;
_17 = [_32.1,(*_21)];
_11 = !_32.2;
Goto(bb36)
}
bb36 = {
_2 = _30;
_5 = _34;
_18 = _32.1 | _32.1;
_32.1 = !_18;
_31 = (*_23) + (*_29);
_5 = _34 - _34;
(*_21) = _32.1;
_32.3.0 = _10 & _10;
_3 = _20 ^ _24;
_29 = core::ptr::addr_of!((*_23));
_41.1 = -_6;
_42.1 = _30;
_22 = _31;
_36 = [_8,_8,_8,_8,_8,_8];
_31 = _16 * (*_29);
_42.2 = [_5,_5,_34,_34,_5];
_42.3 = [_9,_9,_9,_9,_9,_9,_9,_9];
_23 = core::ptr::addr_of!(_22);
_29 = core::ptr::addr_of!(_16);
_32.4 = _7;
_41.2 = _10 as f64;
_37 = !_9;
_41.0 = !_13;
_21 = core::ptr::addr_of_mut!((*_21));
_39 = _3 + _20;
(*_23) = _31;
_30 = _42.1;
match _32.4 {
0 => bb21,
1 => bb9,
2 => bb37,
3 => bb38,
4 => bb39,
5 => bb40,
340282366920938463461607024849562009948 => bb42,
_ => bb41
}
}
bb37 = {
Return()
}
bb38 = {
_12 = 3979327685_u32;
_10 = _26;
_1 = !(*_21);
_12 = 2645586488_u32 >> _15;
_25 = [_26,_10,_26,_26,_10,_10,_26,_26];
_6 = _24 as i32;
_22 = (*_23);
_7 = (-7335185277957055816_i64) * 8581115175665084364_i64;
_2 = '\u{83358}';
(*_21) = _1 & _1;
_12 = !3937421566_u32;
(*_23) = _22 + _22;
_26 = _10;
_9 = 5574274823102484113_usize;
_21 = core::ptr::addr_of_mut!(_18);
_13 = 13957196666725044584_u64 - 10865997783476753593_u64;
(*_21) = _1;
_19 = [_26,_26,_10,_10,_26,_10,_10,_10];
_3 = !_24;
_17 = [(*_21),_1];
_13 = (*_23) as u64;
_23 = core::ptr::addr_of!((*_23));
_12 = _5 as u32;
_22 = _16 * (*_23);
_5 = 24013_i16;
_6 = _20 as i32;
_21 = core::ptr::addr_of_mut!((*_21));
_22 = (*_23);
_6 = !859329910_i32;
match _5 {
0 => bb15,
1 => bb10,
2 => bb21,
24013 => bb23,
_ => bb22
}
}
bb39 = {
_3 = _24;
_32.3.0 = _26 & _10;
(*_29) = _22 * _32.0;
_3 = !_20;
_28 = _12;
match _9 {
0 => bb9,
1 => bb16,
2 => bb21,
3 => bb4,
4 => bb5,
5 => bb6,
6 => bb24,
5574274823102484113 => bb27,
_ => bb26
}
}
bb40 = {
_25 = [_10,_10,_26,_10,_26,_10,_26,_26];
_18 = _15 != _15;
_1 = !(*_21);
Goto(bb20)
}
bb41 = {
_4 = (-75_i8) & 119_i8;
_14 = 272520488580392785264596238215532932309_u128;
_20 = -_3;
Call(_20 = fn1(_14, _6, _14, _5, _3, _8), bb12, UnwindUnreachable())
}
bb42 = {
_22 = -(*_29);
_7 = -_32.4;
_25 = [_10,_32.3.0,_32.3.0,_32.3.0,_32.3.0,_26,_32.3.0,_26];
_10 = !_26;
_38 = (_32.1,);
_12 = _30 as u32;
(*_23) = _31;
_18 = _22 == (*_23);
_28 = _12;
_25 = _19;
_2 = _42.1;
_19 = [_26,_10,_10,_32.3.0,_26,_32.3.0,_26,_32.3.0];
_42.0 = -_5;
_7 = _32.4 ^ _32.4;
_11 = _24 as u16;
_20 = _3 | _3;
_16 = _31;
_28 = _12 << _20;
_3 = _41.1 as isize;
_42.3 = [_37,_9,_9,_37,_9,_37,_37,_37];
_43 = core::ptr::addr_of_mut!(_21);
RET = core::ptr::addr_of_mut!(_44.1);
_29 = _23;
_3 = _39;
_42.0 = _9 as i16;
Goto(bb43)
}
bb43 = {
Call(_46 = dump_var(0_usize, 8_usize, Move(_8), 17_usize, Move(_17), 34_usize, Move(_34), 11_usize, Move(_11)), bb44, UnwindUnreachable())
}
bb44 = {
Call(_46 = dump_var(0_usize, 28_usize, Move(_28), 2_usize, Move(_2), 25_usize, Move(_25), 26_usize, Move(_26)), bb45, UnwindUnreachable())
}
bb45 = {
Call(_46 = dump_var(0_usize, 19_usize, Move(_19), 37_usize, Move(_37), 38_usize, Move(_38), 15_usize, Move(_15)), bb46, UnwindUnreachable())
}
bb46 = {
Call(_46 = dump_var(0_usize, 36_usize, Move(_36), 13_usize, Move(_13), 10_usize, Move(_10), 47_usize, _47), bb47, UnwindUnreachable())
}
bb47 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn1(mut _1: u128,mut _2: i32,mut _3: u128,mut _4: i16,mut _5: isize,mut _6: i128) -> isize {
mir! {
type RET = isize;
let _7: u16;
let _8: char;
let _9: f64;
let _10: char;
let _11: isize;
let _12: (i32, f64, f64);
let _13: *mut bool;
let _14: *const u8;
let _15: bool;
let _16: isize;
let _17: char;
let _18: ();
let _19: ();
{
_4 = (-27938_i16) ^ (-4798_i16);
RET = !_5;
_2 = true as i32;
RET = false as isize;
_3 = _5 as u128;
RET = _5;
_4 = 8938_i16 & (-19516_i16);
_1 = 255_u8 as u128;
_1 = 18_u8 as u128;
_2 = 4_usize as i32;
_2 = -1480665967_i32;
_6 = 28704798992816420762679088052078105888_i128 ^ 51511181399732782595576360118144900852_i128;
_4 = 4266_i16;
_3 = _1;
_7 = !12111_u16;
_7 = (-172385584649094592_i64) as u16;
_2 = 594231805_i32 | (-255091868_i32);
_7 = !4411_u16;
_3 = !_1;
_10 = '\u{861c9}';
_9 = 10122806902408383611_u64 as f64;
_7 = !8933_u16;
_9 = _4 as f64;
_10 = '\u{936a0}';
_3 = 11673549225402728102_usize as u128;
_2 = 16729541501446335242_u64 as i32;
_8 = _10;
Call(_5 = core::intrinsics::transmute(RET), bb1, UnwindUnreachable())
}
bb1 = {
_9 = 215_u8 as f64;
_10 = _8;
_11 = -_5;
_11 = _5 << _4;
RET = -_5;
_12.0 = _2 ^ _2;
RET = _11;
_7 = 20523_u16;
RET = (-37_i8) as isize;
_6 = 164214549103577712173998695500656628887_i128 + (-76720650985945685322847562606809526657_i128);
_12.1 = _9;
_12.1 = -_9;
_3 = _1;
_12.0 = !_2;
_12 = (_2, _9, _9);
_6 = 69235421068333706803452660010734621661_i128 + (-22361385862602723501411339015332851325_i128);
match _4 {
0 => bb2,
4266 => bb4,
_ => bb3
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
_3 = !_1;
_12.0 = _2 ^ _2;
_4 = !(-184_i16);
match _7 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb5,
4 => bb6,
20523 => bb8,
_ => bb7
}
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
_9 = 215_u8 as f64;
_10 = _8;
_11 = -_5;
_11 = _5 << _4;
RET = -_5;
_12.0 = _2 ^ _2;
RET = _11;
_7 = 20523_u16;
RET = (-37_i8) as isize;
_6 = 164214549103577712173998695500656628887_i128 + (-76720650985945685322847562606809526657_i128);
_12.1 = _9;
_12.1 = -_9;
_3 = _1;
_12.0 = !_2;
_12 = (_2, _9, _9);
_6 = 69235421068333706803452660010734621661_i128 + (-22361385862602723501411339015332851325_i128);
match _4 {
0 => bb2,
4266 => bb4,
_ => bb3
}
}
bb8 = {
_6 = !(-41533855691859033680439641786994767812_i128);
_10 = _8;
_4 = -17044_i16;
_4 = _7 as i16;
_1 = _3;
_5 = _11 | _11;
_5 = !_11;
_6 = 148807671131745506405884405288941324866_i128 + 28217075055192843193384841988416664340_i128;
_1 = _3 << _12.0;
_1 = _3 * _3;
_4 = (-16615_i16);
_12.1 = -_12.2;
_4 = (-9358_i16);
_12.0 = -_2;
_9 = _12.1 * _12.1;
Call(_12.2 = core::intrinsics::transmute(_11), bb9, UnwindUnreachable())
}
bb9 = {
_3 = !_1;
_7 = !12705_u16;
_12 = (_2, _9, _9);
_12 = (_2, _9, _9);
_11 = _5;
_7 = 8575791476144627863_u64 as u16;
_5 = RET;
_10 = _8;
_4 = (-30654_i16);
_2 = _12.0 >> _12.0;
_13 = core::ptr::addr_of_mut!(_15);
(*_13) = !true;
_12.1 = -_12.2;
_15 = false;
_13 = core::ptr::addr_of_mut!(_15);
_12.1 = _12.2;
match _4 {
0 => bb10,
1 => bb11,
2 => bb12,
340282366920938463463374607431768180802 => bb14,
_ => bb13
}
}
bb10 = {
Return()
}
bb11 = {
_9 = 215_u8 as f64;
_10 = _8;
_11 = -_5;
_11 = _5 << _4;
RET = -_5;
_12.0 = _2 ^ _2;
RET = _11;
_7 = 20523_u16;
RET = (-37_i8) as isize;
_6 = 164214549103577712173998695500656628887_i128 + (-76720650985945685322847562606809526657_i128);
_12.1 = _9;
_12.1 = -_9;
_3 = _1;
_12.0 = !_2;
_12 = (_2, _9, _9);
_6 = 69235421068333706803452660010734621661_i128 + (-22361385862602723501411339015332851325_i128);
match _4 {
0 => bb2,
4266 => bb4,
_ => bb3
}
}
bb12 = {
Return()
}
bb13 = {
_9 = 215_u8 as f64;
_10 = _8;
_11 = -_5;
_11 = _5 << _4;
RET = -_5;
_12.0 = _2 ^ _2;
RET = _11;
_7 = 20523_u16;
RET = (-37_i8) as isize;
_6 = 164214549103577712173998695500656628887_i128 + (-76720650985945685322847562606809526657_i128);
_12.1 = _9;
_12.1 = -_9;
_3 = _1;
_12.0 = !_2;
_12 = (_2, _9, _9);
_6 = 69235421068333706803452660010734621661_i128 + (-22361385862602723501411339015332851325_i128);
match _4 {
0 => bb2,
4266 => bb4,
_ => bb3
}
}
bb14 = {
_12.0 = _2 & _2;
Goto(bb15)
}
bb15 = {
Call(_18 = dump_var(1_usize, 7_usize, Move(_7), 1_usize, Move(_1), 4_usize, Move(_4), 3_usize, Move(_3)), bb16, UnwindUnreachable())
}
bb16 = {
Call(_18 = dump_var(1_usize, 8_usize, Move(_8), 19_usize, _19, 19_usize, _19, 19_usize, _19), bb17, UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn2(mut _1: i128,mut _2: *const f32,mut _3: isize,mut _4: usize,mut _5: i64,mut _6: isize,mut _7: u64,mut _8: bool,mut _9: u8,mut _10: bool) -> u128 {
mir! {
type RET = u128;
let _11: isize;
let _12: (((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64)), usize);
let _13: [u8; 8];
let _14: (u128,);
let _15: Adt53;
let _16: char;
let _17: (f32, bool, u16, (u8, u16), i64);
let _18: (u8, u16);
let _19: i16;
let _20: char;
let _21: bool;
let _22: [u8; 8];
let _23: (i16, char, [i16; 5], [usize; 8]);
let _24: bool;
let _25: [u32; 4];
let _26: isize;
let _27: f64;
let _28: char;
let _29: char;
let _30: f64;
let _31: (i32, f64, f64);
let _32: u8;
let _33: i32;
let _34: (i32, f64, f64);
let _35: u32;
let _36: i32;
let _37: [usize; 8];
let _38: *mut i16;
let _39: [usize; 8];
let _40: Adt58;
let _41: Adt62;
let _42: (i16, char, [i16; 5], [usize; 8]);
let _43: (i16, char, [i16; 5], [usize; 8]);
let _44: f32;
let _45: f64;
let _46: isize;
let _47: *mut bool;
let _48: (u128,);
let _49: ();
let _50: ();
{
_2 = core::ptr::addr_of!((*_2));
_5 = !3430180440036297161_i64;
_3 = _6 - _6;
_2 = core::ptr::addr_of!((*_2));
RET = 331661630444424243195043105137216304539_u128;
_8 = !_10;
RET = 183387561901359127985603699603483250824_u128 >> _4;
_12.0.0.3 = (_9, 4738_u16);
_12.0.0.2 = _10 as u16;
_12.0.0.3 = (_9, _12.0.0.2);
_12.0.1.2 = !_12.0.0.3.1;
_14.0 = RET >> _12.0.0.2;
_8 = _14.0 >= _14.0;
_12.0.0.0 = _4 as f32;
_12.0.0.1 = _8;
_3 = -_6;
_12.0.1 = (_12.0.0.0, _8, _12.0.0.3.1, _12.0.0.3, _5);
_14.0 = !RET;
_8 = _10;
_11 = _6;
_12.0.1.1 = _12.0.0.1;
_6 = _1 as isize;
_4 = 4127416353916214873_usize ^ 3840978083945092354_usize;
_12.0.0.1 = _12.0.1.1;
_13 = [_12.0.1.3.0,_12.0.1.3.0,_12.0.1.3.0,_12.0.0.3.0,_9,_9,_12.0.1.3.0,_9];
Call(_11 = core::intrinsics::transmute(_5), bb1, UnwindUnreachable())
}
bb1 = {
_14 = (RET,);
_12.0.1.3.1 = !_12.0.0.2;
_12.0.1.3.1 = '\u{abc56}' as u16;
_12.0.0.2 = !_12.0.0.3.1;
_18.1 = _12.0.0.2;
_17.1 = !_12.0.1.1;
_8 = !_12.0.0.1;
_17.3.0 = _9 >> _18.1;
_17 = _12.0.1;
_12.0.0 = ((*_2), _8, _12.0.1.3.1, _12.0.1.3, _17.4);
_19 = -31550_i16;
_17.3 = _12.0.0.3;
_14 = (RET,);
_17.3.1 = _17.2 + _12.0.0.3.1;
_16 = '\u{8e3ec}';
Call(_20 = fn3(_17, _17.3.1, _10, _12.0.0.1, _17.2, _12.0.1.2, _4, _4, _6, _17.0, _12.0, _18.1, RET, _8), bb2, UnwindUnreachable())
}
bb2 = {
_7 = _16 as u64;
_12.0.0 = _12.0.1;
_18 = (_9, _12.0.0.2);
_19 = 2672843850_u32 as i16;
_20 = _16;
_12.0.1.0 = _12.0.0.0;
_17.3 = (_12.0.0.3.0, _12.0.1.3.1);
_18.1 = _12.0.0.2 | _17.2;
_12.0.0.2 = _12.0.1.2 + _12.0.1.3.1;
_17 = _12.0.0;
_12.0.0.2 = !_18.1;
_18 = (_9, _17.2);
RET = _14.0;
_12.0.1.3 = _12.0.0.3;
_12.0.1.3.1 = _12.0.0.2 & _12.0.1.2;
_12.0.1.3.1 = _18.1;
_8 = _17.1;
Call(RET = core::intrinsics::transmute(_14.0), bb3, UnwindUnreachable())
}
bb3 = {
_12.0.1.3 = _17.3;
_18.1 = _17.2;
(*_2) = -_17.0;
_12.0.0.4 = _5 * _5;
_10 = _17.1;
_16 = _20;
_9 = _17.3.0;
_17.0 = -(*_2);
_18 = (_17.3.0, _12.0.0.2);
_23.3 = [_4,_4,_4,_4,_4,_4,_4,_4];
RET = _14.0;
_15 = Adt53::Variant2 { fld0: _12.0.0,fld1: _12.0 };
SetDiscriminant(_15, 2);
_12.1 = !_4;
_18 = (_9, _12.0.1.2);
place!(Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1)).0.3 = (_18.0, _17.3.1);
place!(Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1)).1.3.0 = !_18.0;
place!(Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1)).1.0 = (*_2);
_7 = !4400526551603324129_u64;
place!(Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1)).0.3 = (_12.0.1.3.0, _12.0.0.2);
_17.0 = (*_2) - _12.0.0.0;
_3 = !_11;
place!(Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1)).0.4 = _12.0.1.4;
place!(Field::<(f32, bool, u16, (u8, u16), i64)>(Variant(_15, 2), 0)).4 = -Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1).0.4;
_12.0.1.1 = !_17.1;
Call(place!(Field::<(f32, bool, u16, (u8, u16), i64)>(Variant(_15, 2), 0)).0 = fn6(_12, _12.0.0.1, _14.0, _12.0.0.2, Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1).0.3.1, _17.2, _7, _23.3, _12, _11, _12.0.0.3.1, _17, _2, Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1).0.3.1), bb4, UnwindUnreachable())
}
bb4 = {
_13 = [_12.0.0.3.0,_12.0.0.3.0,_12.0.0.3.0,_12.0.0.3.0,_12.0.1.3.0,_9,Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1).1.3.0,_9];
_22 = [Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1).0.3.0,_17.3.0,_12.0.1.3.0,Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1).1.3.0,Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1).1.3.0,_17.3.0,_12.0.0.3.0,_12.0.0.3.0];
_12.0 = (_17, _17);
_19 = (-9204_i16) & (-11200_i16);
place!(Field::<(f32, bool, u16, (u8, u16), i64)>(Variant(_15, 2), 0)).2 = _12.0.1.2;
place!(Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1)).1.4 = _7 as i64;
RET = (*_2) as u128;
_17 = _12.0.1;
_14.0 = !RET;
place!(Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1)).0.1 = _8;
_18 = (_9, Field::<(f32, bool, u16, (u8, u16), i64)>(Variant(_15, 2), 0).2);
place!(Field::<(f32, bool, u16, (u8, u16), i64)>(Variant(_15, 2), 0)).3.0 = _17.2 as u8;
place!(Field::<(f32, bool, u16, (u8, u16), i64)>(Variant(_15, 2), 0)) = ((*_2), _12.0.0.1, _12.0.0.2, Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1).0.3, _12.0.0.4);
_20 = _16;
_12.0.1.2 = !Field::<(f32, bool, u16, (u8, u16), i64)>(Variant(_15, 2), 0).2;
_18.1 = Field::<(f32, bool, u16, (u8, u16), i64)>(Variant(_15, 2), 0).1 as u16;
_12.0.1.4 = Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1).0.4;
_12.0.1 = _17;
place!(Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1)).0 = _17;
_9 = _18.0;
place!(Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1)).1.1 = _8;
_12.0.0.4 = _14.0 as i64;
place!(Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1)).1.3.1 = _12.0.1.2;
_23.1 = _20;
match _1 {
0 => bb3,
1 => bb5,
269831895761622738474867474083855137425 => bb7,
_ => bb6
}
}
bb5 = {
_14 = (RET,);
_12.0.1.3.1 = !_12.0.0.2;
_12.0.1.3.1 = '\u{abc56}' as u16;
_12.0.0.2 = !_12.0.0.3.1;
_18.1 = _12.0.0.2;
_17.1 = !_12.0.1.1;
_8 = !_12.0.0.1;
_17.3.0 = _9 >> _18.1;
_17 = _12.0.1;
_12.0.0 = ((*_2), _8, _12.0.1.3.1, _12.0.1.3, _17.4);
_19 = -31550_i16;
_17.3 = _12.0.0.3;
_14 = (RET,);
_17.3.1 = _17.2 + _12.0.0.3.1;
_16 = '\u{8e3ec}';
Call(_20 = fn3(_17, _17.3.1, _10, _12.0.0.1, _17.2, _12.0.1.2, _4, _4, _6, _17.0, _12.0, _18.1, RET, _8), bb2, UnwindUnreachable())
}
bb6 = {
_7 = _16 as u64;
_12.0.0 = _12.0.1;
_18 = (_9, _12.0.0.2);
_19 = 2672843850_u32 as i16;
_20 = _16;
_12.0.1.0 = _12.0.0.0;
_17.3 = (_12.0.0.3.0, _12.0.1.3.1);
_18.1 = _12.0.0.2 | _17.2;
_12.0.0.2 = _12.0.1.2 + _12.0.1.3.1;
_17 = _12.0.0;
_12.0.0.2 = !_18.1;
_18 = (_9, _17.2);
RET = _14.0;
_12.0.1.3 = _12.0.0.3;
_12.0.1.3.1 = _12.0.0.2 & _12.0.1.2;
_12.0.1.3.1 = _18.1;
_8 = _17.1;
Call(RET = core::intrinsics::transmute(_14.0), bb3, UnwindUnreachable())
}
bb7 = {
place!(Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1)).1.2 = Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1).0.2 - _12.0.1.2;
_21 = !_12.0.0.1;
_15 = Adt53::Variant2 { fld0: _17,fld1: _12.0 };
_1 = -(-5635056263700564282831919023254637513_i128);
_17.3.0 = !Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1).0.3.0;
_12.0.1.3 = (_18.0, Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1).0.2);
_21 = !Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1).0.1;
_23.0 = _19;
_25 = [2381772873_u32,3972663558_u32,2949198037_u32,3965564880_u32];
_12.1 = (*_2) as usize;
_29 = _16;
_28 = _20;
_12.0.0.1 = !_21;
_17.4 = !Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1).0.4;
place!(Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1)).1.3.1 = !_12.0.1.3.1;
_9 = 1742155398_i32 as u8;
place!(Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1)).1.3.0 = 866677636_u32 as u8;
_18 = Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1).1.3;
place!(Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1)).0.0 = (*_2) + (*_2);
_12 = (Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1), _4);
_17.0 = Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1).0.0;
place!(Field::<(f32, bool, u16, (u8, u16), i64)>(Variant(_15, 2), 0)).1 = _10;
_26 = _1 as isize;
place!(Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1)).1.3 = (Field::<(f32, bool, u16, (u8, u16), i64)>(Variant(_15, 2), 0).3.0, _12.0.1.2);
RET = _14.0;
place!(Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1)).1.3 = (Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1).0.3.0, Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1).1.2);
(*_2) = Field::<(f32, bool, u16, (u8, u16), i64)>(Variant(_15, 2), 0).0;
_17.0 = 155214851_u32 as f32;
_12.0.1.0 = -Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1).0.0;
_17.2 = !Field::<((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64))>(Variant(_15, 2), 1).1.3.1;
Call(RET = core::intrinsics::bswap(_14.0), bb8, UnwindUnreachable())
}
bb8 = {
_18 = _12.0.1.3;
SetDiscriminant(_15, 0);
_8 = _10;
_8 = _21;
_12.0.1.3.0 = _12.0.0.3.0;
_12.0.1.3.0 = 856282815_u32 as u8;
_17.2 = !_12.0.0.2;
_6 = _12.0.0.3.0 as isize;
_14.0 = _4 as u128;
_23.0 = _19;
place!(Field::<([u8; 8], *mut bool, [u32; 4], *const i64)>(Variant(_15, 0), 3)).0 = [_9,_18.0,_12.0.0.3.0,_9,_12.0.0.3.0,_18.0,_12.0.0.3.0,_9];
_8 = _17.1;
place!(Field::<(i32, f64, f64)>(Variant(_15, 0), 4)).0 = !(-960333480_i32);
_5 = !_12.0.0.4;
_11 = _26 + _26;
_17.3.0 = !_12.0.1.3.0;
(*_2) = _12.0.0.0;
_12.0 = (_17, _17);
(*_2) = _12.0.0.0;
_12.0.1 = ((*_2), _12.0.0.1, _12.0.0.2, _18, _12.0.0.4);
_14 = (RET,);
_16 = _23.1;
_12.0.0.3.0 = !_18.0;
Call(place!(Field::<([u8; 8], *mut bool, [u32; 4], *const i64)>(Variant(_15, 0), 3)) = fn9(_18.1, _5), bb9, UnwindUnreachable())
}
bb9 = {
_29 = _23.1;
place!(Field::<u8>(Variant(_15, 0), 2)) = _12.0.0.1 as u8;
_12.0.1.3.1 = _17.2 * _18.1;
_12.0.0.3 = (Field::<u8>(Variant(_15, 0), 2), _12.0.1.3.1);
_12.0 = (_17, _17);
place!(Field::<(i32, f64, f64)>(Variant(_15, 0), 4)).1 = Field::<u8>(Variant(_15, 0), 2) as f64;
_23.2 = [_23.0,_19,_19,_19,_19];
_12.1 = _19 as usize;
_27 = -Field::<(i32, f64, f64)>(Variant(_15, 0), 4).1;
_31 = (Field::<(i32, f64, f64)>(Variant(_15, 0), 4).0, _27, _27);
_31.1 = -_27;
(*_2) = -_12.0.0.0;
_35 = _1 as u32;
_34.0 = _26 as i32;
_34.0 = _31.0 | _31.0;
_23.1 = _20;
_12.0 = (_17, _17);
_18.1 = !_12.0.0.2;
_2 = core::ptr::addr_of!((*_2));
_27 = _31.2 + _31.1;
_20 = _28;
_37 = [_12.1,_4,_12.1,_4,_12.1,_12.1,_12.1,_12.1];
_12.0.1.3.0 = Field::<u8>(Variant(_15, 0), 2);
Goto(bb10)
}
bb10 = {
_12.0.0.3.0 = _18.0;
Goto(bb11)
}
bb11 = {
_34 = (Field::<(i32, f64, f64)>(Variant(_15, 0), 4).0, _31.1, Field::<(i32, f64, f64)>(Variant(_15, 0), 4).1);
_32 = !_18.0;
_12.0.0.2 = !_17.2;
_34.0 = -Field::<(i32, f64, f64)>(Variant(_15, 0), 4).0;
_23.2 = [_23.0,_23.0,_23.0,_23.0,_19];
place!(Field::<u128>(Variant(_15, 0), 0)) = !_14.0;
_33 = Field::<(i32, f64, f64)>(Variant(_15, 0), 4).0;
place!(Field::<([u8; 8], *mut bool, [u32; 4], *const i64)>(Variant(_15, 0), 3)).2 = [_35,_35,_35,_35];
_32 = Field::<u8>(Variant(_15, 0), 2) & _12.0.1.3.0;
_28 = _23.1;
_20 = _23.1;
_40.fld5.0 = [Field::<u8>(Variant(_15, 0), 2),Field::<u8>(Variant(_15, 0), 2),_12.0.1.3.0,_32,_32,_32,Field::<u8>(Variant(_15, 0), 2),_12.0.0.3.0];
_34.2 = -_27;
_5 = _12.0.0.2 as i64;
_41.fld5 = _22;
_14 = (RET,);
_12.0.1.3 = (Field::<u8>(Variant(_15, 0), 2), _17.3.1);
Goto(bb12)
}
bb12 = {
_12.0.1.4 = _12.0.0.4;
_41.fld2.3 = [_4,_4,_4,_4,_12.1,_12.1,_12.1,_4];
_38 = core::ptr::addr_of_mut!(_19);
_12.0.1.4 = !_17.4;
_24 = _14.0 != RET;
_17.4 = _12.0.0.4;
_8 = _10;
_17.1 = _32 >= _32;
Call(_40.fld4 = fn13(_14, _17, _17, _6, _12.0.0.2), bb13, UnwindUnreachable())
}
bb13 = {
_18.0 = _32;
Call(_42.2 = fn17(_21, _17, _17.1, _18, _34.2, _12.0.0.4, _17.1, _12.0.1.3, _40.fld4, _17, _12.0.1.3.0, _40.fld5.0), bb14, UnwindUnreachable())
}
bb14 = {
RET = _16 as u128;
_18 = (_9, _17.3.1);
_33 = (*_2) as i32;
_36 = Field::<(i32, f64, f64)>(Variant(_15, 0), 4).0 & _33;
_40.fld2 = _14.0 as f32;
_13 = [_32,_32,_32,Field::<u8>(Variant(_15, 0), 2),_32,_12.0.1.3.0,_32,_12.0.1.3.0];
_19 = -_23.0;
_12.0.1.2 = _12.0.0.2 << _17.4;
_23.1 = _28;
_12.0.0.3.1 = _12.0.1.2 - _17.2;
place!(Field::<([u8; 8], *mut bool, [u32; 4], *const i64)>(Variant(_15, 0), 3)).2 = [_35,_35,_35,_35];
_46 = -_26;
_41.fld2.1 = _20;
_12.0.1 = _17;
Goto(bb15)
}
bb15 = {
Call(_49 = dump_var(2_usize, 8_usize, Move(_8), 3_usize, Move(_3), 25_usize, Move(_25), 28_usize, Move(_28)), bb16, UnwindUnreachable())
}
bb16 = {
Call(_49 = dump_var(2_usize, 13_usize, Move(_13), 1_usize, Move(_1), 9_usize, Move(_9), 7_usize, Move(_7)), bb17, UnwindUnreachable())
}
bb17 = {
Call(_49 = dump_var(2_usize, 11_usize, Move(_11), 22_usize, Move(_22), 5_usize, Move(_5), 19_usize, Move(_19)), bb18, UnwindUnreachable())
}
bb18 = {
Call(_49 = dump_var(2_usize, 29_usize, Move(_29), 37_usize, Move(_37), 4_usize, Move(_4), 50_usize, _50), bb19, UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn3(mut _1: (f32, bool, u16, (u8, u16), i64),mut _2: u16,mut _3: bool,mut _4: bool,mut _5: u16,mut _6: u16,mut _7: usize,mut _8: usize,mut _9: isize,mut _10: f32,mut _11: ((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64)),mut _12: u16,mut _13: u128,mut _14: bool) -> char {
mir! {
type RET = char;
let _15: isize;
let _16: (f32, bool, u16, (u8, u16), i64);
let _17: ([u8; 8], *mut bool, [u32; 4], *const i64);
let _18: *const [usize; 8];
let _19: *const u8;
let _20: bool;
let _21: [u8; 8];
let _22: [u32; 4];
let _23: bool;
let _24: usize;
let _25: char;
let _26: Adt54;
let _27: (((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64)), usize);
let _28: *const i64;
let _29: bool;
let _30: f64;
let _31: Adt63;
let _32: *mut *const i32;
let _33: f32;
let _34: bool;
let _35: i8;
let _36: bool;
let _37: u128;
let _38: ([u8; 8], *mut bool, [u32; 4], *const i64);
let _39: f64;
let _40: ([u8; 8], *mut bool, [u32; 4], *const i64);
let _41: [u32; 4];
let _42: (((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64)), usize);
let _43: [u32; 4];
let _44: (bool,);
let _45: (bool,);
let _46: i8;
let _47: *const *const i64;
let _48: i8;
let _49: f32;
let _50: f32;
let _51: u32;
let _52: Adt55;
let _53: bool;
let _54: (i32, f64, f64);
let _55: (f32, bool, u16, (u8, u16), i64);
let _56: isize;
let _57: i128;
let _58: f32;
let _59: Adt58;
let _60: char;
let _61: *const u8;
let _62: ();
let _63: ();
{
_11.0.3 = (_1.3.0, _5);
_11.0.1 = _1.1;
_7 = 937433021_u32 as usize;
_11.0.3 = (_11.1.3.0, _5);
_3 = _11.1.1;
_7 = _8;
_11.0.3 = (_1.3.0, _12);
_15 = _9 ^ _9;
_16.2 = _11.1.2;
_11 = (_1, _1);
_1.3 = _11.1.3;
_17.3 = core::ptr::addr_of!(_11.1.4);
_11.0.3.1 = _11.1.3.1;
_16.1 = _3 & _4;
_16.0 = _1.0;
_1.0 = 7234031552289847567_u64 as f32;
_11.0.3 = _11.1.3;
RET = '\u{109e20}';
_11.0.3 = (_1.3.0, _2);
Goto(bb1)
}
bb1 = {
_7 = _8;
_11.1.2 = _6 - _11.0.3.1;
_8 = _7;
_16 = (_1.0, _11.1.1, _12, _11.0.3, _11.0.4);
RET = '\u{2b215}';
_1.3 = (_16.3.0, _16.3.1);
_17.2 = [703951536_u32,549784441_u32,2926151261_u32,2802130914_u32];
_17.2 = [1054351863_u32,441575044_u32,602894127_u32,1915629029_u32];
_11.0.0 = _1.4 as f32;
_11.1.2 = _2 * _5;
_1 = (_11.1.0, _4, _2, _16.3, _11.1.4);
_11.1.2 = _11.0.2;
_13 = !258023107546960276840912451490722306527_u128;
_1.3 = (_11.1.3.0, _11.0.2);
_13 = 298985653551204000690768299123900599641_u128 * 282743027165868948717263940695047403181_u128;
_11.0.3 = (_1.3.0, _12);
_11.1 = (_16.0, _1.1, _1.3.1, _16.3, _11.0.4);
_17.1 = core::ptr::addr_of_mut!(_1.1);
_1.3.0 = _16.3.0 ^ _11.1.3.0;
_16.3 = (_11.0.3.0, _1.2);
_11.0.0 = _1.0 * _11.1.0;
_11.1.3.1 = _1.3.1 << _13;
_16.4 = -_1.4;
_11.0.2 = _11.0.4 as u16;
_1.2 = _11.1.3.1 << _11.1.3.1;
_7 = _8 + _8;
Goto(bb2)
}
bb2 = {
_11.0.1 = _16.1;
_3 = !_11.1.1;
_22 = [65983615_u32,4034020455_u32,478172131_u32,406581503_u32];
_14 = _4;
_1.3 = (_16.3.0, _11.1.3.1);
Goto(bb3)
}
bb3 = {
_4 = !_16.1;
_20 = _4;
RET = '\u{f5960}';
_17.3 = core::ptr::addr_of!(_16.4);
_12 = _1.3.1 | _11.1.2;
_11.1.0 = _10;
_7 = !_8;
_11.0.3 = (_11.1.3.0, _16.3.1);
_11.1.4 = _11.0.4 - _1.4;
_1 = (_16.0, _14, _16.3.1, _11.0.3, _11.1.4);
_1.2 = _7 as u16;
_1.3.0 = _11.1.3.0;
_11.0 = _11.1;
_9 = _15;
_11.1.0 = -_16.0;
_11 = (_1, _1);
_11.0.3.1 = _16.2 - _1.3.1;
_20 = !_16.1;
_17.0 = [_11.1.3.0,_11.1.3.0,_11.0.3.0,_16.3.0,_11.0.3.0,_16.3.0,_1.3.0,_1.3.0];
_11.1.3 = (_1.3.0, _1.2);
_19 = core::ptr::addr_of!(_11.0.3.0);
_14 = _20 & _20;
_19 = core::ptr::addr_of!((*_19));
_16.0 = 20112_i16 as f32;
_11.0 = (_11.1.0, _1.1, _11.1.2, _11.1.3, _11.1.4);
Goto(bb4)
}
bb4 = {
_16.3 = (_1.3.0, _12);
(*_19) = _11.1.3.0;
_16.0 = -_10;
_11.0.4 = _9 as i64;
_21 = [_11.0.3.0,_1.3.0,(*_19),_16.3.0,_11.1.3.0,_1.3.0,_11.0.3.0,_11.1.3.0];
_16.1 = _1.1;
_24 = !_7;
_12 = !_2;
Goto(bb5)
}
bb5 = {
_11.1.3.1 = _1.2;
_11.1.0 = _16.0;
_16.2 = _1.4 as u16;
_23 = !_4;
_1 = _11.0;
_11.1.3.1 = !_16.3.1;
_14 = !_3;
_11.0.4 = _16.4;
_10 = _11.1.0 - _11.0.0;
_8 = _24;
_11.1.1 = _3;
_1.4 = -_11.0.4;
_17.2 = [337523163_u32,1361552760_u32,1243331342_u32,4235469499_u32];
_11.1.1 = !_20;
_16.3 = (_11.1.3.0, _2);
_11.0.3.0 = _13 as u8;
_1.0 = _16.0 + _10;
_23 = _4;
_11.0.2 = _11.1.3.1 + _16.3.1;
_12 = _5 * _6;
_11.0.3.1 = _11.1.3.1;
_27.0.0 = (_11.1.0, _20, _11.1.3.1, _11.1.3, _11.1.4);
_27.0.0.0 = -_10;
_12 = _8 as u16;
_9 = (-84445260_i32) as isize;
Goto(bb6)
}
bb6 = {
_7 = _8 | _8;
_11.0.3.1 = _27.0.0.3.1;
_9 = -_15;
_16.2 = _13 as u16;
Call(_1.1 = fn4(_27.0.0, _16.4, _11.0.3.1, _27.0.0.2, _8, _23), bb7, UnwindUnreachable())
}
bb7 = {
_27.0.1.1 = !_27.0.0.1;
_16.3.1 = _11.1.3.1 << _27.0.0.4;
_6 = _11.1.3.1 + _27.0.0.2;
_11.0.3.1 = _11.0.2;
_27.0.1.3 = _11.0.3;
_27.0.1.4 = 139483242538605821689780535398642738568_i128 as i64;
_25 = RET;
_29 = _11.1.3.1 > _2;
_27.0.0.3 = _11.1.3;
_4 = _1.1;
_10 = -_1.0;
_1.2 = _11.1.3.1 * _11.0.3.1;
_27.0.1 = _1;
_27.0.0.3.1 = !_2;
_16 = (_27.0.0.0, _27.0.1.1, _27.0.1.2, _27.0.0.3, _11.1.4);
_1.1 = _27.0.1.1;
_1.3.1 = _11.1.1 as u16;
_11.0.4 = (-1641062369_i32) as i64;
_16.3 = _1.3;
_8 = (-115_i8) as usize;
_27.0 = (_16, _1);
Goto(bb8)
}
bb8 = {
_11.1.4 = _11.0.4 << _11.0.3.1;
_15 = _9 & _9;
_11.1.1 = _4;
_27.0.0.4 = -_11.1.4;
_25 = RET;
_34 = _1.1 & _27.0.1.1;
Call(_20 = fn5(_11.1, _11.1.1, _27.0.1.1, _27.0.0.1, _1, _1, _27.0.0, _29, _11.0, _27.0.0, _23, _1.3, _27.0.1.1, _29), bb9, UnwindUnreachable())
}
bb9 = {
_27 = (_11, _8);
_11.0.3.1 = !_6;
Goto(bb10)
}
bb10 = {
_17.3 = core::ptr::addr_of!(_1.4);
_10 = 68_i8 as f32;
_27.0.1.1 = !_1.1;
_17.3 = core::ptr::addr_of!(_16.4);
_28 = _17.3;
_1.3.1 = _6;
_28 = core::ptr::addr_of!((*_28));
_21 = [(*_19),(*_19),_11.1.3.0,(*_19),_27.0.0.3.0,(*_19),(*_19),(*_19)];
_27.0.0.3 = _27.0.1.3;
RET = _25;
_27.0.1 = (_16.0, _4, _16.3.1, _1.3, (*_28));
_16.3.0 = _11.1.3.0;
_27.0.1 = _11.1;
_10 = _16.0;
_11.1.1 = _23;
RET = _25;
_11.0.3 = (_27.0.1.3.0, _12);
_27.0.1 = (_11.1.0, _4, _1.2, _1.3, _11.1.4);
_4 = _1.1;
_11.0.1 = !_34;
_1.3.1 = (-69244924722791752515068978545371669640_i128) as u16;
_14 = _27.0.1.1 <= _16.1;
Call(_1.2 = core::intrinsics::bswap(_11.1.3.1), bb11, UnwindUnreachable())
}
bb11 = {
_12 = _1.2;
_38.1 = _17.1;
_11.1 = _1;
_16.4 = _8 as i64;
RET = _25;
_16.3.1 = _12;
_24 = _7 | _7;
_11.1.4 = _27.0.1.4 ^ _27.0.1.4;
_11.1.3.1 = _16.3.1;
Goto(bb12)
}
bb12 = {
_16.2 = _11.0.3.0 as u16;
_27.0.1.3.1 = _15 as u16;
_16 = _1;
_30 = 50828151846910453650695290052457487672_i128 as f64;
_27.0.0.3.1 = !_11.0.3.1;
_16.1 = _27.0.0.1 | _14;
_16.3.0 = _15 as u8;
_11.0.3 = (_16.3.0, _27.0.1.2);
_27.0.0 = (_1.0, _11.0.1, _11.1.2, _27.0.1.3, _11.1.4);
RET = _25;
_7 = !_24;
_42.0.0.1 = _11.0.1;
_19 = core::ptr::addr_of!(_11.1.3.0);
_16.3.1 = _11.1.2;
_42.0.1.4 = !_11.1.4;
_1.4 = _9 as i64;
_1.3 = (_27.0.0.3.0, _11.1.2);
_16.3.0 = !(*_19);
_27.0.0.2 = _11.1.3.1 - _11.1.2;
(*_28) = _42.0.1.4 ^ _11.1.4;
_27.0.1.3.1 = _11.0.2;
_27.0.1 = _16;
_27.0 = _11;
Goto(bb13)
}
bb13 = {
_40.0 = [_11.0.3.0,_11.0.3.0,_11.0.3.0,_11.0.3.0,_11.0.3.0,(*_19),_11.0.3.0,_27.0.0.3.0];
_45.0 = !_42.0.0.1;
_27.0.1.4 = (-120_i8) as i64;
_27.0.1.3.0 = (-6681_i16) as u8;
_15 = _9 ^ _9;
_38.3 = _17.3;
_29 = _16.1;
_20 = (*_28) == _16.4;
_7 = _24;
_42.0.1.0 = _11.1.0 - _1.0;
_42 = _27;
_38.0 = _40.0;
_48 = 54_i8 - 42_i8;
_20 = _14 | _29;
_50 = -_11.1.0;
_38.2 = [888138588_u32,591838086_u32,3347315569_u32,2023946731_u32];
_54 = (1353066154_i32, _30, _30);
_1.3 = (_42.0.0.3.0, _11.0.3.1);
_16.3 = (_27.0.0.3.0, _27.0.0.3.1);
_16 = _42.0.0;
(*_28) = !_42.0.0.4;
Call(_17.3 = core::intrinsics::arith_offset(_28, 118_isize), bb14, UnwindUnreachable())
}
bb14 = {
_44 = _45;
_9 = _15;
_11.1.0 = _27.0.1.0 - _10;
_44.0 = _42.0.1.1 != _42.0.1.1;
_52.fld0.0 = _54.0 - _54.0;
_52.fld2 = [_24,_7,_7,_7,_24,_24,_24,_24];
_54.0 = _52.fld0.0;
_11.0.3.0 = _42.0.0.3.0 ^ _42.0.0.3.0;
_52.fld1 = core::ptr::addr_of_mut!(_51);
_49 = _42.0.1.0 - _27.0.0.0;
_41 = [1105650296_u32,4042910628_u32,881989809_u32,2867696528_u32];
_19 = core::ptr::addr_of!((*_19));
_27.0.0.3.0 = _16.3.0;
_11.0.2 = _11.0.3.1 - _6;
_11.1.0 = _13 as f32;
_55 = (_1.0, _42.0.0.1, _11.0.3.1, _42.0.0.3, _11.1.4);
_16.3.0 = !_55.3.0;
_44.0 = _45.0;
_52.fld2 = [_8,_7,_27.1,_8,_24,_42.1,_8,_7];
Goto(bb15)
}
bb15 = {
Call(_62 = dump_var(3_usize, 44_usize, Move(_44), 3_usize, Move(_3), 24_usize, Move(_24), 4_usize, Move(_4)), bb16, UnwindUnreachable())
}
bb16 = {
Call(_62 = dump_var(3_usize, 8_usize, Move(_8), 7_usize, Move(_7), 21_usize, Move(_21), 22_usize, Move(_22)), bb17, UnwindUnreachable())
}
bb17 = {
Call(_62 = dump_var(3_usize, 25_usize, Move(_25), 48_usize, Move(_48), 13_usize, Move(_13), 2_usize, Move(_2)), bb18, UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn4(mut _1: (f32, bool, u16, (u8, u16), i64),mut _2: i64,mut _3: u16,mut _4: u16,mut _5: usize,mut _6: bool) -> bool {
mir! {
type RET = bool;
let _7: [bool; 2];
let _8: (u128,);
let _9: ();
let _10: ();
{
RET = !_6;
_1.2 = !_1.3.1;
_1.4 = _2;
_2 = _1.4;
_1.3 = (27_u8, _1.2);
_8.0 = 106_isize as u128;
_1.3.0 = 238_u8 ^ 116_u8;
_6 = _1.1 ^ _1.1;
RET = _1.1 ^ _1.1;
_8 = (281141189440599233090094709111729399719_u128,);
_1.1 = _6 & RET;
RET = !_1.1;
_7 = [_6,_1.1];
_1.4 = (-20_isize) as i64;
_5 = '\u{b3094}' as usize;
_1.3.0 = 36_u8 << _3;
Goto(bb1)
}
bb1 = {
Call(_9 = dump_var(4_usize, 8_usize, Move(_8), 3_usize, Move(_3), 6_usize, Move(_6), 10_usize, _10), bb2, UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn5(mut _1: (f32, bool, u16, (u8, u16), i64),mut _2: bool,mut _3: bool,mut _4: bool,mut _5: (f32, bool, u16, (u8, u16), i64),mut _6: (f32, bool, u16, (u8, u16), i64),mut _7: (f32, bool, u16, (u8, u16), i64),mut _8: bool,mut _9: (f32, bool, u16, (u8, u16), i64),mut _10: (f32, bool, u16, (u8, u16), i64),mut _11: bool,mut _12: (u8, u16),mut _13: bool,mut _14: bool) -> bool {
mir! {
type RET = bool;
let _15: [usize; 8];
let _16: [u128; 2];
let _17: [usize; 2];
let _18: f64;
let _19: [i16; 5];
let _20: ();
let _21: ();
{
_1.3 = (_10.3.0, _5.3.1);
_1 = (_10.0, _2, _7.2, _9.3, _10.4);
_1.0 = _6.0 - _9.0;
_1.2 = _6.2;
_5.3.1 = _9.2 & _1.2;
_9.0 = _6.0 - _5.0;
_1.3 = _6.3;
_7.1 = _3;
_15 = [8659669784259490407_usize,4_usize,4_usize,10733960790545902322_usize,2363570492959721982_usize,3_usize,3104927770875037673_usize,7142913459824899425_usize];
_17 = [3_usize,10299725966930759064_usize];
Goto(bb1)
}
bb1 = {
_10.1 = _3;
_12 = (_6.3.0, _5.3.1);
_5.4 = !_10.4;
_5 = (_9.0, _4, _7.3.1, _7.3, _1.4);
_1.3.1 = '\u{4c2b6}' as u16;
_5.3.0 = _12.0;
Goto(bb2)
}
bb2 = {
_12.0 = 13883162421086478514_usize as u8;
_9.3.0 = _10.3.0;
_10.3.0 = !_12.0;
Goto(bb3)
}
bb3 = {
_6.3.0 = (-1607718300_i32) as u8;
_1.2 = _10.2 * _7.3.1;
_10 = (_1.0, _13, _1.2, _12, _7.4);
_6 = (_10.0, _10.1, _12.1, _10.3, _5.4);
_19 = [(-1860_i16),(-14344_i16),14929_i16,(-7149_i16),12075_i16];
_9 = (_6.0, _2, _6.2, _10.3, _1.4);
_1.1 = _4 ^ _4;
_16 = [254035771353979807531123941939778726062_u128,19107136294647271356559360853188269869_u128];
_10 = (_5.0, _8, _6.2, _5.3, _9.4);
_7.4 = _5.4 & _9.4;
RET = _2;
_15 = [7_usize,7_usize,5_usize,1_usize,18437761513968644412_usize,7_usize,0_usize,2688718457385471343_usize];
_5 = (_7.0, _2, _7.3.1, _6.3, _7.4);
RET = _1.1;
_5.3 = (_12.0, _7.3.1);
RET = _1.1 ^ _1.1;
_9 = _1;
_7.1 = _1.1;
_7.2 = _12.1 >> _1.2;
Goto(bb4)
}
bb4 = {
Call(_20 = dump_var(5_usize, 13_usize, Move(_13), 17_usize, Move(_17), 14_usize, Move(_14), 8_usize, Move(_8)), bb5, UnwindUnreachable())
}
bb5 = {
Call(_20 = dump_var(5_usize, 12_usize, Move(_12), 19_usize, Move(_19), 21_usize, _21, 21_usize, _21), bb6, UnwindUnreachable())
}
bb6 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn6(mut _1: (((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64)), usize),mut _2: bool,mut _3: u128,mut _4: u16,mut _5: u16,mut _6: u16,mut _7: u64,mut _8: [usize; 8],mut _9: (((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64)), usize),mut _10: isize,mut _11: u16,mut _12: (f32, bool, u16, (u8, u16), i64),mut _13: *const f32,mut _14: u16) -> f32 {
mir! {
type RET = f32;
let _15: [i16; 5];
let _16: Adt63;
let _17: char;
let _18: [u128; 2];
let _19: f64;
let _20: [i16; 5];
let _21: isize;
let _22: (f32, bool, u16, (u8, u16), i64);
let _23: (u128,);
let _24: f64;
let _25: Adt56;
let _26: [usize; 2];
let _27: isize;
let _28: [bool; 2];
let _29: isize;
let _30: f64;
let _31: u16;
let _32: (i16, char, [i16; 5], [usize; 8]);
let _33: (i32, f64, f64);
let _34: char;
let _35: isize;
let _36: (i32, f64, f64);
let _37: i64;
let _38: f64;
let _39: char;
let _40: char;
let _41: (u8, u16);
let _42: f32;
let _43: isize;
let _44: [u8; 8];
let _45: ();
let _46: ();
{
(*_13) = _5 as f32;
_2 = _12.1 & _1.0.0.1;
_1.0.0.0 = (*_13) * _12.0;
_1.0.0.4 = _1.0.1.4 << _6;
_10 = -9223372036854775807_isize;
_9.0.0.1 = _1.0.0.1 != _9.0.1.1;
(*_13) = 1497290821_i32 as f32;
_1.0.0.2 = !_1.0.1.2;
_9.0.0.3.1 = _12.2 << _9.0.1.4;
Call(_10 = fn7(_1.0.1.3.1, _1.0.1.3, _1.0, _1.0.1, _1.0.1.1, _9.0, _12, _9, _1.0.0.0, _4, _1.0.0, _1.0, _5, _2), bb1, UnwindUnreachable())
}
bb1 = {
_9.0.0.4 = !_1.0.0.4;
_12.3 = (_1.0.0.3.0, _1.0.0.2);
_1.0.0.1 = _9.0.1.2 <= _1.0.0.2;
_12.3.0 = _1.0.1.3.0;
_5 = _12.3.1;
_9.0.1.3.0 = _1.0.1.3.0 * _9.0.0.3.0;
_9.0.1.1 = _9.0.0.1;
_9.0.1.4 = -_1.0.0.4;
_1.0.0.2 = 106471688_u32 as u16;
_8 = [_1.1,_9.1,_1.1,_1.1,_9.1,_9.1,_9.1,_9.1];
_9.0.1.4 = _1.0.0.4 + _9.0.0.4;
_1 = (_9.0, _9.1);
_9.0.1.0 = _12.0;
(*_13) = _9.0.0.0 + _12.0;
_9.0.1.4 = (-1316704877_i32) as i64;
_1.0.1.3.0 = _9.0.0.3.0 + _9.0.0.3.0;
_1.0.0.1 = (*_13) != (*_13);
_12.4 = _1.0.0.4 - _1.0.1.4;
_1.0.1.2 = (-31_i8) as u16;
_14 = _5;
_9.0.0.3.0 = _1.0.1.3.0 << _1.0.0.3.0;
_9.0.1.0 = (*_13) * (*_13);
_9.0.0.1 = _1.0.1.1;
_23 = (_3,);
_6 = !_9.0.0.2;
Call(_1.0.0.3.1 = core::intrinsics::transmute(_4), bb2, UnwindUnreachable())
}
bb2 = {
_9.0.0.2 = !_1.0.0.2;
_1.0.1.0 = -(*_13);
_9.0.0 = _9.0.1;
_1.0.1.3.1 = !_1.0.0.3.1;
_8 = [_9.1,_9.1,_9.1,_1.1,_1.1,_1.1,_1.1,_9.1];
_11 = _9.0.1.2;
_1.0.1.4 = _12.2 as i64;
_9.0.1.3.1 = _9.0.1.3.0 as u16;
_1.0.0.0 = (*_13);
_12.2 = _4;
_12.3 = _1.0.1.3;
_18 = [_3,_3];
_19 = (-694615757_i32) as f64;
_12.3.0 = !_9.0.1.3.0;
_22.1 = _1.0.0.2 > _1.0.1.2;
_22.3 = (_12.3.0, _9.0.0.3.1);
RET = _9.0.0.0;
_7 = 8318383109266834021_u64;
_5 = 18728_i16 as u16;
_9.0.1.3 = _22.3;
_1 = _9;
match _7 {
0 => bb1,
1 => bb3,
2 => bb4,
8318383109266834021 => bb6,
_ => bb5
}
}
bb3 = {
_9.0.0.4 = !_1.0.0.4;
_12.3 = (_1.0.0.3.0, _1.0.0.2);
_1.0.0.1 = _9.0.1.2 <= _1.0.0.2;
_12.3.0 = _1.0.1.3.0;
_5 = _12.3.1;
_9.0.1.3.0 = _1.0.1.3.0 * _9.0.0.3.0;
_9.0.1.1 = _9.0.0.1;
_9.0.1.4 = -_1.0.0.4;
_1.0.0.2 = 106471688_u32 as u16;
_8 = [_1.1,_9.1,_1.1,_1.1,_9.1,_9.1,_9.1,_9.1];
_9.0.1.4 = _1.0.0.4 + _9.0.0.4;
_1 = (_9.0, _9.1);
_9.0.1.0 = _12.0;
(*_13) = _9.0.0.0 + _12.0;
_9.0.1.4 = (-1316704877_i32) as i64;
_1.0.1.3.0 = _9.0.0.3.0 + _9.0.0.3.0;
_1.0.0.1 = (*_13) != (*_13);
_12.4 = _1.0.0.4 - _1.0.1.4;
_1.0.1.2 = (-31_i8) as u16;
_14 = _5;
_9.0.0.3.0 = _1.0.1.3.0 << _1.0.0.3.0;
_9.0.1.0 = (*_13) * (*_13);
_9.0.0.1 = _1.0.1.1;
_23 = (_3,);
_6 = !_9.0.0.2;
Call(_1.0.0.3.1 = core::intrinsics::transmute(_4), bb2, UnwindUnreachable())
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
_9.0.0.1 = !_1.0.0.1;
_21 = _10;
_9.0.0.3 = _9.0.1.3;
_27 = _21;
_9.0.0.1 = _9.0.1.1 | _9.0.1.1;
_21 = _10;
_11 = !_9.0.0.2;
_32.2 = [30723_i16,(-12563_i16),5798_i16,15724_i16,(-4037_i16)];
_15 = [3807_i16,1697_i16,21798_i16,(-4208_i16),32527_i16];
_29 = _21 << _1.0.1.3.0;
_9.0.1.2 = 4077067627_u32 as u16;
_9.0.1 = ((*_13), _2, _14, _1.0.1.3, _12.4);
Goto(bb7)
}
bb7 = {
_31 = _2 as u16;
_22.1 = _9.0.1.1;
_9.0.0.2 = !_4;
_32.1 = '\u{59875}';
match _27 {
0 => bb8,
1 => bb9,
9223372036854775807 => bb11,
_ => bb10
}
}
bb8 = {
_9.0.0.4 = !_1.0.0.4;
_12.3 = (_1.0.0.3.0, _1.0.0.2);
_1.0.0.1 = _9.0.1.2 <= _1.0.0.2;
_12.3.0 = _1.0.1.3.0;
_5 = _12.3.1;
_9.0.1.3.0 = _1.0.1.3.0 * _9.0.0.3.0;
_9.0.1.1 = _9.0.0.1;
_9.0.1.4 = -_1.0.0.4;
_1.0.0.2 = 106471688_u32 as u16;
_8 = [_1.1,_9.1,_1.1,_1.1,_9.1,_9.1,_9.1,_9.1];
_9.0.1.4 = _1.0.0.4 + _9.0.0.4;
_1 = (_9.0, _9.1);
_9.0.1.0 = _12.0;
(*_13) = _9.0.0.0 + _12.0;
_9.0.1.4 = (-1316704877_i32) as i64;
_1.0.1.3.0 = _9.0.0.3.0 + _9.0.0.3.0;
_1.0.0.1 = (*_13) != (*_13);
_12.4 = _1.0.0.4 - _1.0.1.4;
_1.0.1.2 = (-31_i8) as u16;
_14 = _5;
_9.0.0.3.0 = _1.0.1.3.0 << _1.0.0.3.0;
_9.0.1.0 = (*_13) * (*_13);
_9.0.0.1 = _1.0.1.1;
_23 = (_3,);
_6 = !_9.0.0.2;
Call(_1.0.0.3.1 = core::intrinsics::transmute(_4), bb2, UnwindUnreachable())
}
bb9 = {
_9.0.0.4 = !_1.0.0.4;
_12.3 = (_1.0.0.3.0, _1.0.0.2);
_1.0.0.1 = _9.0.1.2 <= _1.0.0.2;
_12.3.0 = _1.0.1.3.0;
_5 = _12.3.1;
_9.0.1.3.0 = _1.0.1.3.0 * _9.0.0.3.0;
_9.0.1.1 = _9.0.0.1;
_9.0.1.4 = -_1.0.0.4;
_1.0.0.2 = 106471688_u32 as u16;
_8 = [_1.1,_9.1,_1.1,_1.1,_9.1,_9.1,_9.1,_9.1];
_9.0.1.4 = _1.0.0.4 + _9.0.0.4;
_1 = (_9.0, _9.1);
_9.0.1.0 = _12.0;
(*_13) = _9.0.0.0 + _12.0;
_9.0.1.4 = (-1316704877_i32) as i64;
_1.0.1.3.0 = _9.0.0.3.0 + _9.0.0.3.0;
_1.0.0.1 = (*_13) != (*_13);
_12.4 = _1.0.0.4 - _1.0.1.4;
_1.0.1.2 = (-31_i8) as u16;
_14 = _5;
_9.0.0.3.0 = _1.0.1.3.0 << _1.0.0.3.0;
_9.0.1.0 = (*_13) * (*_13);
_9.0.0.1 = _1.0.1.1;
_23 = (_3,);
_6 = !_9.0.0.2;
Call(_1.0.0.3.1 = core::intrinsics::transmute(_4), bb2, UnwindUnreachable())
}
bb10 = {
Return()
}
bb11 = {
_10 = _29 << _6;
_22.0 = _7 as f32;
_1.1 = !_9.1;
_34 = _32.1;
_22.4 = 23247_i16 as i64;
_22.3.1 = _9.0.0.3.1;
_36 = ((-111677962_i32), _19, _19);
_21 = _29;
RET = 440488383_u32 as f32;
RET = _9.1 as f32;
_9.0.0.3.0 = !_9.0.1.3.0;
_22.0 = (*_13);
_17 = _34;
_9.0.1.2 = _10 as u16;
_1.0 = (_9.0.0, _9.0.0);
_36.2 = _36.0 as f64;
_14 = _12.2;
_20 = _32.2;
_22.4 = 71_i8 as i64;
_32.3 = [_9.1,_1.1,_1.1,_1.1,_1.1,_9.1,_1.1,_1.1];
_33.2 = -_19;
Call(_21 = core::intrinsics::transmute(_10), bb12, UnwindUnreachable())
}
bb12 = {
_9.0.1.4 = _12.4 << _1.0.1.3.0;
_38 = _36.2;
_9.0.0.3.0 = !_1.0.1.3.0;
_12.3 = (_1.0.1.3.0, _12.2);
_9.0.1.2 = _23.0 as u16;
_28 = [_1.0.1.1,_9.0.0.1];
_12.4 = !_9.0.1.4;
_35 = (-16766279540631835340115169602474641156_i128) as isize;
_22.3.0 = _12.3.0 >> _9.0.1.4;
_11 = !_1.0.0.3.1;
_12.0 = -_1.0.0.0;
_3 = _23.0;
_32 = ((-13056_i16), _34, _15, _8);
Goto(bb13)
}
bb13 = {
(*_13) = _22.0 + _9.0.0.0;
_30 = _19;
_33.0 = !_36.0;
_15 = _32.2;
_22 = _1.0.0;
_12.4 = _9.0.1.4;
match _32.0 {
0 => bb10,
1 => bb14,
340282366920938463463374607431768198400 => bb16,
_ => bb15
}
}
bb14 = {
_9.0.0.4 = !_1.0.0.4;
_12.3 = (_1.0.0.3.0, _1.0.0.2);
_1.0.0.1 = _9.0.1.2 <= _1.0.0.2;
_12.3.0 = _1.0.1.3.0;
_5 = _12.3.1;
_9.0.1.3.0 = _1.0.1.3.0 * _9.0.0.3.0;
_9.0.1.1 = _9.0.0.1;
_9.0.1.4 = -_1.0.0.4;
_1.0.0.2 = 106471688_u32 as u16;
_8 = [_1.1,_9.1,_1.1,_1.1,_9.1,_9.1,_9.1,_9.1];
_9.0.1.4 = _1.0.0.4 + _9.0.0.4;
_1 = (_9.0, _9.1);
_9.0.1.0 = _12.0;
(*_13) = _9.0.0.0 + _12.0;
_9.0.1.4 = (-1316704877_i32) as i64;
_1.0.1.3.0 = _9.0.0.3.0 + _9.0.0.3.0;
_1.0.0.1 = (*_13) != (*_13);
_12.4 = _1.0.0.4 - _1.0.1.4;
_1.0.1.2 = (-31_i8) as u16;
_14 = _5;
_9.0.0.3.0 = _1.0.1.3.0 << _1.0.0.3.0;
_9.0.1.0 = (*_13) * (*_13);
_9.0.0.1 = _1.0.1.1;
_23 = (_3,);
_6 = !_9.0.0.2;
Call(_1.0.0.3.1 = core::intrinsics::transmute(_4), bb2, UnwindUnreachable())
}
bb15 = {
Return()
}
bb16 = {
_12.2 = _9.0.0.2;
_32.2 = [_32.0,_32.0,_32.0,_32.0,_32.0];
_1.0.0.3.1 = _31 | _31;
_36.0 = _1.0.0.3.1 as i32;
_37 = !_9.0.1.4;
_1.0.0.4 = _29 as i64;
_43 = _10 - _10;
_22.3.1 = _1.0.0.3.0 as u16;
_12 = _9.0.1;
_9.0.0.4 = _9.0.0.3.0 as i64;
_22.4 = _37;
_41.0 = _12.3.0 ^ _1.0.0.3.0;
Goto(bb17)
}
bb17 = {
Call(_45 = dump_var(6_usize, 20_usize, Move(_20), 15_usize, Move(_15), 2_usize, Move(_2), 5_usize, Move(_5)), bb18, UnwindUnreachable())
}
bb18 = {
Call(_45 = dump_var(6_usize, 7_usize, Move(_7), 32_usize, Move(_32), 17_usize, Move(_17), 27_usize, Move(_27)), bb19, UnwindUnreachable())
}
bb19 = {
Call(_45 = dump_var(6_usize, 8_usize, Move(_8), 21_usize, Move(_21), 23_usize, Move(_23), 28_usize, Move(_28)), bb20, UnwindUnreachable())
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn7(mut _1: u16,mut _2: (u8, u16),mut _3: ((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64)),mut _4: (f32, bool, u16, (u8, u16), i64),mut _5: bool,mut _6: ((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64)),mut _7: (f32, bool, u16, (u8, u16), i64),mut _8: (((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64)), usize),mut _9: f32,mut _10: u16,mut _11: (f32, bool, u16, (u8, u16), i64),mut _12: ((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64)),mut _13: u16,mut _14: bool) -> isize {
mir! {
type RET = isize;
let _15: Adt52;
let _16: f64;
let _17: bool;
let _18: [usize; 8];
let _19: char;
let _20: char;
let _21: isize;
let _22: bool;
let _23: *const u8;
let _24: f64;
let _25: *const u8;
let _26: char;
let _27: *const f64;
let _28: Adt62;
let _29: Adt51;
let _30: [bool; 2];
let _31: *mut *const i32;
let _32: [usize; 2];
let _33: [usize; 8];
let _34: [i16; 5];
let _35: *const f64;
let _36: [bool; 2];
let _37: u64;
let _38: *const *const f64;
let _39: u16;
let _40: ((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64));
let _41: ((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64));
let _42: u8;
let _43: usize;
let _44: (u128,);
let _45: (f32, bool, u16, (u8, u16), i64);
let _46: bool;
let _47: ();
let _48: ();
{
_2.0 = 13352_i16 as u8;
_8.0.0.2 = _11.2;
_2 = (_7.3.0, _13);
_4.4 = _11.4;
_8.1 = 9223372036854775807_isize as usize;
_12.1.3.0 = _6.1.3.0 >> _10;
_8.0.1.4 = _3.0.4;
_4.3.1 = _3.0.3.1 + _2.1;
RET = 7_isize | (-9223372036854775808_isize);
_5 = !_3.0.1;
_6.1.3.1 = (-961_i16) as u16;
_7.3.1 = !_13;
_7.3.0 = _3.0.3.0 | _8.0.1.3.0;
Goto(bb1)
}
bb1 = {
_7.3 = (_8.0.1.3.0, _3.1.2);
_6.0.3 = (_4.3.0, _8.0.0.3.1);
_12.1.4 = (-88_i8) as i64;
_5 = _3.1.1 ^ _14;
_3.1.1 = _7.1;
_8.0.1.3.0 = !_3.1.3.0;
_6.1.3 = (_11.3.0, _13);
_7.2 = _14 as u16;
_2 = _6.1.3;
_3.0.0 = -_11.0;
_6.1.3.1 = _8.0.0.2;
_12.0.2 = !_6.0.3.1;
_7.2 = !_12.0.2;
_11 = _4;
_8.0.1.3 = (_6.1.3.0, _8.0.0.3.1);
_2.1 = _12.1.1 as u16;
_3.0 = _8.0.0;
_17 = _12.1.1;
Goto(bb2)
}
bb2 = {
_6.1 = _3.1;
_1 = !_7.2;
_12.0 = (_7.0, _12.1.1, _8.0.1.2, _7.3, _11.4);
_12.0.1 = !_5;
_16 = _3.0.4 as f64;
_6.0.3.0 = (-195105642_i32) as u8;
_8.0 = _12;
_6.1.3.1 = !_7.3.1;
_6.0.3.0 = 13950491620474051491_u64 as u8;
_2.0 = _12.1.3.0;
_3.1.4 = !_12.0.4;
_15.fld2 = (114165594435420151450205557941310958166_u128,);
_3.0.3.1 = _7.3.1;
_12.0.1 = _8.0.0.1 ^ _6.0.1;
_7.2 = !_7.3.1;
_3.0.4 = _3.1.4 >> _3.1.2;
Call(_4.3.0 = fn8(_3, _7.1, _8.0, _8.0, _12, _11.3, _7.2, _3, _12.0, _11.1, _12, _3.0), bb3, UnwindUnreachable())
}
bb3 = {
_8.0.1.4 = _3.0.4 & _4.4;
_6.0.2 = _2.1;
_12.0 = (_9, _3.0.1, _2.1, _11.3, _3.0.4);
_15.fld1 = _8.1 * _8.1;
Goto(bb4)
}
bb4 = {
_3.0.0 = -_9;
_14 = _6.0.1 & _6.0.1;
_12.0.4 = _4.4 ^ _4.4;
_11.2 = _12.0.3.1;
_8.0.1.1 = _14;
_4.1 = _6.0.1;
_6.0.3.1 = _12.1.2;
_8.0.1.0 = _12.0.0 + _8.0.0.0;
_6.0.0 = -_8.0.1.0;
_8 = (_12, _15.fld1);
_11.4 = !_12.0.4;
_3.0.0 = _12.1.0 + _12.0.0;
_11.3 = (_7.3.0, _6.0.2);
_3.1.1 = _11.4 >= _3.0.4;
_4.2 = _6.0.2;
_23 = core::ptr::addr_of!(_4.3.0);
_24 = RET as f64;
_3.0.3.1 = !_6.0.3.1;
_15.fld3.0 = !_5;
match _15.fld2.0 {
114165594435420151450205557941310958166 => bb6,
_ => bb5
}
}
bb5 = {
_7.3 = (_8.0.1.3.0, _3.1.2);
_6.0.3 = (_4.3.0, _8.0.0.3.1);
_12.1.4 = (-88_i8) as i64;
_5 = _3.1.1 ^ _14;
_3.1.1 = _7.1;
_8.0.1.3.0 = !_3.1.3.0;
_6.1.3 = (_11.3.0, _13);
_7.2 = _14 as u16;
_2 = _6.1.3;
_3.0.0 = -_11.0;
_6.1.3.1 = _8.0.0.2;
_12.0.2 = !_6.0.3.1;
_7.2 = !_12.0.2;
_11 = _4;
_8.0.1.3 = (_6.1.3.0, _8.0.0.3.1);
_2.1 = _12.1.1 as u16;
_3.0 = _8.0.0;
_17 = _12.1.1;
Goto(bb2)
}
bb6 = {
_6.0.0 = _3.0.0 - _3.0.0;
_6.1.3 = (_6.0.3.0, _1);
_11.4 = _8.0.0.4;
_12.0.4 = !_3.0.4;
_17 = _15.fld3.0 > _15.fld3.0;
_3.0.3 = (_2.0, _6.0.2);
_8.0.0.3.0 = _4.3.0;
_7.2 = _8.0.1.3.1 & _13;
_3.1 = (_8.0.0.0, _14, _2.1, _7.3, _3.0.4);
_11.0 = -_6.0.0;
_9 = _15.fld1 as f32;
_4.0 = -_3.0.0;
_3.0.3.0 = (*_23);
_8.0.0.3.0 = '\u{1d041}' as u8;
_28.fld2.1 = '\u{cba32}';
_22 = _12.0.1 & _14;
_6.0 = _3.1;
Goto(bb7)
}
bb7 = {
_4.2 = _1;
_12.1.3.0 = _2.0 ^ (*_23);
_7.1 = _8.0.1.2 > _11.3.1;
_5 = _15.fld3.0;
_6.0.2 = !_8.0.0.2;
_3 = _6;
_28.fld4.fld0.1 = _24 + _16;
_3.1.4 = _12.1.4;
_3.1.0 = -_8.0.0.0;
_2.0 = _7.3.0;
_6.1.1 = _12.1.1 & _22;
_11.3 = (_6.0.3.0, _13);
_3.1.0 = _24 as f32;
_28.fld1 = -153767200817718486369972285113995587525_i128;
Goto(bb8)
}
bb8 = {
_8.0.1 = (_4.0, _5, _11.3.1, _4.3, _7.4);
_28.fld2.2 = [(-27044_i16),(-9539_i16),25728_i16,19398_i16,(-7134_i16)];
_6.1.2 = !_13;
_8.0.0.3 = _12.1.3;
_8.0.0.1 = !_17;
_6.0.2 = _10 - _10;
_16 = _28.fld4.fld0.1;
_6.0.3.0 = 2435834414_u32 as u8;
_1 = _12.0.3.1;
_33 = [_8.1,_8.1,_15.fld1,_8.1,_8.1,_8.1,_15.fld1,_15.fld1];
RET = 9223372036854775807_isize;
_12.1.4 = _15.fld2.0 as i64;
_21 = -RET;
_4.4 = _3.0.4 + _8.0.0.4;
_12.0.3.0 = 3571212133_u32 as u8;
_30 = [_8.0.1.1,_6.0.1];
_28.fld4.fld2 = _33;
_18 = [_15.fld1,_15.fld1,_15.fld1,_8.1,_15.fld1,_15.fld1,_15.fld1,_8.1];
_6.1 = (_8.0.1.0, _7.1, _10, _4.3, _12.0.4);
match RET {
0 => bb6,
1 => bb5,
2 => bb9,
3 => bb10,
4 => bb11,
9223372036854775807 => bb13,
_ => bb12
}
}
bb9 = {
_4.2 = _1;
_12.1.3.0 = _2.0 ^ (*_23);
_7.1 = _8.0.1.2 > _11.3.1;
_5 = _15.fld3.0;
_6.0.2 = !_8.0.0.2;
_3 = _6;
_28.fld4.fld0.1 = _24 + _16;
_3.1.4 = _12.1.4;
_3.1.0 = -_8.0.0.0;
_2.0 = _7.3.0;
_6.1.1 = _12.1.1 & _22;
_11.3 = (_6.0.3.0, _13);
_3.1.0 = _24 as f32;
_28.fld1 = -153767200817718486369972285113995587525_i128;
Goto(bb8)
}
bb10 = {
_7.3 = (_8.0.1.3.0, _3.1.2);
_6.0.3 = (_4.3.0, _8.0.0.3.1);
_12.1.4 = (-88_i8) as i64;
_5 = _3.1.1 ^ _14;
_3.1.1 = _7.1;
_8.0.1.3.0 = !_3.1.3.0;
_6.1.3 = (_11.3.0, _13);
_7.2 = _14 as u16;
_2 = _6.1.3;
_3.0.0 = -_11.0;
_6.1.3.1 = _8.0.0.2;
_12.0.2 = !_6.0.3.1;
_7.2 = !_12.0.2;
_11 = _4;
_8.0.1.3 = (_6.1.3.0, _8.0.0.3.1);
_2.1 = _12.1.1 as u16;
_3.0 = _8.0.0;
_17 = _12.1.1;
Goto(bb2)
}
bb11 = {
_6.1 = _3.1;
_1 = !_7.2;
_12.0 = (_7.0, _12.1.1, _8.0.1.2, _7.3, _11.4);
_12.0.1 = !_5;
_16 = _3.0.4 as f64;
_6.0.3.0 = (-195105642_i32) as u8;
_8.0 = _12;
_6.1.3.1 = !_7.3.1;
_6.0.3.0 = 13950491620474051491_u64 as u8;
_2.0 = _12.1.3.0;
_3.1.4 = !_12.0.4;
_15.fld2 = (114165594435420151450205557941310958166_u128,);
_3.0.3.1 = _7.3.1;
_12.0.1 = _8.0.0.1 ^ _6.0.1;
_7.2 = !_7.3.1;
_3.0.4 = _3.1.4 >> _3.1.2;
Call(_4.3.0 = fn8(_3, _7.1, _8.0, _8.0, _12, _11.3, _7.2, _3, _12.0, _11.1, _12, _3.0), bb3, UnwindUnreachable())
}
bb12 = {
_8.0.1.4 = _3.0.4 & _4.4;
_6.0.2 = _2.1;
_12.0 = (_9, _3.0.1, _2.1, _11.3, _3.0.4);
_15.fld1 = _8.1 * _8.1;
Goto(bb4)
}
bb13 = {
_6 = (_11, _8.0.1);
_12.1.3 = _11.3;
_28.fld4.fld0.2 = _6.0.0 as f64;
_6.0 = _3.0;
_26 = _28.fld2.1;
_28.fld4.fld0 = (98027391_i32, _24, _24);
_41.0 = _8.0.0;
_40.1.3.0 = !(*_23);
_28.fld4.fld0.2 = -_16;
_15.fld3.0 = _3.0.1;
_41 = (_3.0, _6.1);
_26 = _28.fld2.1;
_3.0.3.1 = !_41.0.2;
(*_23) = !_8.0.0.3.0;
_41.0.3.0 = !_8.0.0.3.0;
_44.0 = _15.fld2.0 / _15.fld2.0;
_11.3.1 = !_4.3.1;
_5 = !_41.1.1;
_3.1.2 = _8.0.1.3.1 | _6.0.2;
_13 = _10 ^ _11.3.1;
_6.1.0 = -_6.0.0;
_17 = _6.0.1 | _8.0.1.1;
_4.3.0 = !_8.0.1.3.0;
_45.3 = (_8.0.1.3.0, _6.1.3.1);
Goto(bb14)
}
bb14 = {
_41.1.2 = !_3.0.3.1;
_11.0 = 110_i8 as f32;
Goto(bb15)
}
bb15 = {
Call(_47 = dump_var(7_usize, 44_usize, Move(_44), 14_usize, Move(_14), 18_usize, Move(_18), 17_usize, Move(_17)), bb16, UnwindUnreachable())
}
bb16 = {
Call(_47 = dump_var(7_usize, 26_usize, Move(_26), 22_usize, Move(_22), 21_usize, Move(_21), 48_usize, _48), bb17, UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn8(mut _1: ((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64)),mut _2: bool,mut _3: ((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64)),mut _4: ((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64)),mut _5: ((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64)),mut _6: (u8, u16),mut _7: u16,mut _8: ((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64)),mut _9: (f32, bool, u16, (u8, u16), i64),mut _10: bool,mut _11: ((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64)),mut _12: (f32, bool, u16, (u8, u16), i64)) -> u8 {
mir! {
type RET = u8;
let _13: isize;
let _14: *const [usize; 8];
let _15: [i128; 6];
let _16: i16;
let _17: bool;
let _18: u128;
let _19: (i32, f64, f64);
let _20: bool;
let _21: f64;
let _22: [usize; 8];
let _23: *const *const i64;
let _24: f32;
let _25: f32;
let _26: ((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64));
let _27: ();
let _28: ();
{
_3.0.3 = (_8.1.3.0, _5.1.2);
_11.1.3.0 = _4.0.4 as u8;
_11.0.3.1 = _1.1.2;
_12.1 = !_5.0.1;
_3.1.3.1 = _8.1.2;
_8.0.2 = _3.1.2;
_5.0.1 = _2 & _1.0.1;
_4.1.1 = !_2;
_8.0.0 = _4.0.0;
_8 = _4;
_2 = !_8.0.1;
Goto(bb1)
}
bb1 = {
_4.1.3.0 = 314171849486905888816450564334772994988_u128 as u8;
_3.1.0 = -_1.1.0;
_5.0.0 = -_5.1.0;
_3.1.3.0 = 2299657783416231843_u64 as u8;
_5.1.4 = _8.0.4;
_1.0.3.0 = _8.1.3.0 | _9.3.0;
_4.1.4 = _4.0.4 - _12.4;
_5.0.3.1 = _6.1;
_3.1.1 = _11.1.2 <= _6.1;
_8.1.3 = (_11.1.3.0, _9.3.1);
_5.0.3.1 = _5.0.1 as u16;
Goto(bb2)
}
bb2 = {
_8.0.3.0 = _8.1.3.0;
_11.1.2 = !_12.3.1;
_4.0.4 = _9.4 - _12.4;
_11.0.0 = _4.0.0;
_5.0.3.0 = 5253118910931415351384314139353552968_i128 as u8;
_5 = (_9, _3.1);
_4.0 = _4.1;
_11.1.4 = _6.0 as i64;
_4.0.2 = _8.1.2;
_8.1.1 = !_2;
_3.1.4 = _5.0.0 as i64;
_11.1.3.0 = _4.0.3.0 & _3.1.3.0;
_2 = _9.1;
_15 = [76207872519097694726130127488600898336_i128,(-38457992677473831591030561316742158348_i128),(-170082871799723639464757695674630409507_i128),(-124264043517531308898204611255233280876_i128),49209276689977468545570421468240920046_i128,(-60339899333009543812362022636911463968_i128)];
_3.0 = (_8.1.0, _11.0.1, _4.0.2, _9.3, _4.1.4);
RET = !_1.0.3.0;
_3.1 = (_11.0.0, _9.1, _11.0.2, _6, _1.0.4);
_5.0.0 = _8.0.0 * _11.0.0;
_8.0.0 = _5.1.0 - _1.1.0;
_12.0 = _1.0.0 + _4.1.0;
_6.0 = !_4.1.3.0;
_5.0 = (_9.0, _11.0.1, _3.0.2, _3.1.3, _1.1.4);
_11.0.3.0 = _4.0.3.0;
Goto(bb3)
}
bb3 = {
_5.1.3.1 = _12.0 as u16;
_4.0.1 = _11.1.3.0 > _8.0.3.0;
_3.1.3 = (RET, _4.0.2);
_1.0.0 = _11.1.0;
_12.3.1 = _5.0.2;
_3.1.1 = _2;
_18 = 76480028995044277445664014764450283863_u128;
_19.2 = (-1927609102949781298549017111920571806_i128) as f64;
_1 = (_3.0, _8.0);
Goto(bb4)
}
bb4 = {
_15 = [(-108616909217256619486555078183694693340_i128),(-143357292983304721346424358342932924684_i128),(-19897285295707645220004515484245798546_i128),112800855702160039146862808411961615883_i128,23802625841013856498473673379021841823_i128,(-20849644849379029891805393186915889451_i128)];
_5.0.3 = (RET, _1.1.3.1);
_14 = core::ptr::addr_of!(_22);
_12.3.0 = !_3.1.3.0;
_4.1.3.1 = !_1.1.3.1;
_5.0.4 = (-16_i8) as i64;
_5.0.1 = _3.1.3.1 > _6.1;
_3.1.1 = !_2;
_8.0.3.1 = _3.1.3.1 ^ _3.0.2;
_22 = [1570816003370426389_usize,4_usize,10764406160292784630_usize,18279705809063482319_usize,969040893710914399_usize,7_usize,16190396079469098264_usize,11278829914841814132_usize];
RET = _8.0.3.0;
_1.0.3.0 = !_3.1.3.0;
_17 = _3.1.1 & _3.0.1;
_5.0.1 = _12.1 | _17;
Goto(bb5)
}
bb5 = {
_5.1.3.0 = _11.1.3.0 >> _6.1;
_4.1.2 = _1.1.3.1;
_5.0 = (_4.1.0, _3.0.1, _3.0.3.1, _8.1.3, _3.1.4);
_4.1.3.0 = _11.0.3.0 ^ _12.3.0;
_3.0 = _8.0;
_1.1 = _3.1;
_11 = (_9, _8.0);
_4.0.0 = _12.0 + _1.0.0;
_12 = (_1.1.0, _1.0.1, _8.0.3.1, _1.1.3, _4.0.4);
_3.1.2 = _6.1 >> _3.1.3.1;
_11.1.2 = 5911_i16 as u16;
_3.1.1 = _11.0.1;
_4.0.4 = _12.4;
match _18 {
0 => bb6,
1 => bb7,
2 => bb8,
3 => bb9,
4 => bb10,
5 => bb11,
6 => bb12,
76480028995044277445664014764450283863 => bb14,
_ => bb13
}
}
bb6 = {
_15 = [(-108616909217256619486555078183694693340_i128),(-143357292983304721346424358342932924684_i128),(-19897285295707645220004515484245798546_i128),112800855702160039146862808411961615883_i128,23802625841013856498473673379021841823_i128,(-20849644849379029891805393186915889451_i128)];
_5.0.3 = (RET, _1.1.3.1);
_14 = core::ptr::addr_of!(_22);
_12.3.0 = !_3.1.3.0;
_4.1.3.1 = !_1.1.3.1;
_5.0.4 = (-16_i8) as i64;
_5.0.1 = _3.1.3.1 > _6.1;
_3.1.1 = !_2;
_8.0.3.1 = _3.1.3.1 ^ _3.0.2;
_22 = [1570816003370426389_usize,4_usize,10764406160292784630_usize,18279705809063482319_usize,969040893710914399_usize,7_usize,16190396079469098264_usize,11278829914841814132_usize];
RET = _8.0.3.0;
_1.0.3.0 = !_3.1.3.0;
_17 = _3.1.1 & _3.0.1;
_5.0.1 = _12.1 | _17;
Goto(bb5)
}
bb7 = {
_5.1.3.1 = _12.0 as u16;
_4.0.1 = _11.1.3.0 > _8.0.3.0;
_3.1.3 = (RET, _4.0.2);
_1.0.0 = _11.1.0;
_12.3.1 = _5.0.2;
_3.1.1 = _2;
_18 = 76480028995044277445664014764450283863_u128;
_19.2 = (-1927609102949781298549017111920571806_i128) as f64;
_1 = (_3.0, _8.0);
Goto(bb4)
}
bb8 = {
_8.0.3.0 = _8.1.3.0;
_11.1.2 = !_12.3.1;
_4.0.4 = _9.4 - _12.4;
_11.0.0 = _4.0.0;
_5.0.3.0 = 5253118910931415351384314139353552968_i128 as u8;
_5 = (_9, _3.1);
_4.0 = _4.1;
_11.1.4 = _6.0 as i64;
_4.0.2 = _8.1.2;
_8.1.1 = !_2;
_3.1.4 = _5.0.0 as i64;
_11.1.3.0 = _4.0.3.0 & _3.1.3.0;
_2 = _9.1;
_15 = [76207872519097694726130127488600898336_i128,(-38457992677473831591030561316742158348_i128),(-170082871799723639464757695674630409507_i128),(-124264043517531308898204611255233280876_i128),49209276689977468545570421468240920046_i128,(-60339899333009543812362022636911463968_i128)];
_3.0 = (_8.1.0, _11.0.1, _4.0.2, _9.3, _4.1.4);
RET = !_1.0.3.0;
_3.1 = (_11.0.0, _9.1, _11.0.2, _6, _1.0.4);
_5.0.0 = _8.0.0 * _11.0.0;
_8.0.0 = _5.1.0 - _1.1.0;
_12.0 = _1.0.0 + _4.1.0;
_6.0 = !_4.1.3.0;
_5.0 = (_9.0, _11.0.1, _3.0.2, _3.1.3, _1.1.4);
_11.0.3.0 = _4.0.3.0;
Goto(bb3)
}
bb9 = {
_4.1.3.0 = 314171849486905888816450564334772994988_u128 as u8;
_3.1.0 = -_1.1.0;
_5.0.0 = -_5.1.0;
_3.1.3.0 = 2299657783416231843_u64 as u8;
_5.1.4 = _8.0.4;
_1.0.3.0 = _8.1.3.0 | _9.3.0;
_4.1.4 = _4.0.4 - _12.4;
_5.0.3.1 = _6.1;
_3.1.1 = _11.1.2 <= _6.1;
_8.1.3 = (_11.1.3.0, _9.3.1);
_5.0.3.1 = _5.0.1 as u16;
Goto(bb2)
}
bb10 = {
Return()
}
bb11 = {
Return()
}
bb12 = {
Return()
}
bb13 = {
Return()
}
bb14 = {
_8.0.3 = (_5.1.3.0, _9.3.1);
_1.0.4 = -_11.1.4;
_8.0.2 = _9.2 << _9.4;
_9.2 = _11.1.3.1;
_3.0.3 = (_5.1.3.0, _8.0.3.1);
_8.0.3.0 = !_3.0.3.0;
_11.0.3.1 = _5.1.3.0 as u16;
_3.0.4 = !_4.1.4;
_1.0.0 = _3.0.0 - _12.0;
_26.1 = _11.0;
_4.1.3.1 = _12.3.1;
_26.0.4 = _1.0.4 * _1.0.4;
_17 = !_9.1;
_26.1.3 = (_1.0.3.0, _11.1.3.1);
_3.0.4 = _5.1.4 << _11.0.2;
_8.1.3 = (_11.0.3.0, _9.3.1);
_15 = [(-135686721748499600261094162533126749336_i128),28641633365390810483302821510618421500_i128,(-98872140285039245434919323410938682820_i128),143584944515833987878469080541384776092_i128,17749793385061508358329565982921052470_i128,(-40655120021762484236526316289880854482_i128)];
_8.1 = _5.0;
_3.1.2 = !_8.0.2;
_12.4 = -_4.1.4;
_11.1.2 = _8.1.2;
Goto(bb15)
}
bb15 = {
Call(_27 = dump_var(8_usize, 18_usize, Move(_18), 22_usize, Move(_22), 7_usize, Move(_7), 2_usize, Move(_2)), bb16, UnwindUnreachable())
}
bb16 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn9(mut _1: u16,mut _2: i64) -> ([u8; 8], *mut bool, [u32; 4], *const i64) {
mir! {
type RET = ([u8; 8], *mut bool, [u32; 4], *const i64);
let _3: Adt54;
let _4: [i16; 5];
let _5: *mut *mut bool;
let _6: i64;
let _7: f32;
let _8: char;
let _9: (u8, u16);
let _10: *const f32;
let _11: [i128; 6];
let _12: (f32, bool, u16, (u8, u16), i64);
let _13: Adt53;
let _14: char;
let _15: *mut i16;
let _16: isize;
let _17: [usize; 8];
let _18: bool;
let _19: Adt50;
let _20: (bool,);
let _21: ();
let _22: ();
{
RET.2 = [1666746970_u32,3753428313_u32,827688801_u32,2604074173_u32];
_1 = 45341_u16;
_2 = 6239270379378650894_i64 + (-2841205225546297176_i64);
RET.3 = core::ptr::addr_of!(_2);
match _1 {
45341 => bb2,
_ => bb1
}
}
bb1 = {
Return()
}
bb2 = {
RET.3 = core::ptr::addr_of!(_2);
RET.2 = [1260150705_u32,3656156743_u32,514942592_u32,3781824090_u32];
RET.0 = [157_u8,236_u8,0_u8,124_u8,131_u8,254_u8,122_u8,158_u8];
_1 = 25077_u16 | 12383_u16;
RET.0 = [36_u8,129_u8,144_u8,74_u8,120_u8,64_u8,192_u8,149_u8];
_1 = 60070_u16 << _2;
RET.3 = core::ptr::addr_of!(_2);
_2 = 3164282310_u32 as i64;
_1 = !39617_u16;
RET.2 = [4237924656_u32,368063741_u32,471037050_u32,1693756342_u32];
RET.3 = core::ptr::addr_of!(_2);
_2 = -7216082075534816980_i64;
RET.3 = core::ptr::addr_of!(_2);
_1 = 24158_u16;
_4 = [31652_i16,8449_i16,(-3178_i16),14958_i16,581_i16];
RET.0 = [60_u8,142_u8,28_u8,25_u8,14_u8,178_u8,238_u8,124_u8];
Call(RET = fn10(_1, _2, _1, _1, _4, _4), bb3, UnwindUnreachable())
}
bb3 = {
RET.3 = core::ptr::addr_of!(_2);
RET.3 = core::ptr::addr_of!(_6);
_5 = core::ptr::addr_of_mut!(RET.1);
RET.3 = core::ptr::addr_of!(_6);
_4 = [25960_i16,(-2020_i16),14948_i16,(-17235_i16),(-21836_i16)];
_7 = 3306515358_u32 as f32;
RET.2 = [3103863663_u32,956770736_u32,1551342447_u32,708990572_u32];
_7 = 13930695280237712582382078250994305205_i128 as f32;
RET.3 = core::ptr::addr_of!(_6);
RET.0 = [113_u8,94_u8,86_u8,193_u8,202_u8,114_u8,42_u8,88_u8];
RET.0 = [163_u8,60_u8,188_u8,11_u8,67_u8,85_u8,83_u8,125_u8];
RET.3 = core::ptr::addr_of!(_2);
_7 = 12438189173204154496_u64 as f32;
_6 = _7 as i64;
_1 = !9528_u16;
_4 = [(-739_i16),(-1209_i16),(-29690_i16),(-20354_i16),(-18195_i16)];
RET.2 = [4127793567_u32,3100727327_u32,25595023_u32,1261312865_u32];
_9 = (187_u8, _1);
_7 = 8966167304137182269_usize as f32;
_1 = _9.1 << _6;
RET.2 = [2898310380_u32,476485900_u32,1542112771_u32,676918605_u32];
_5 = core::ptr::addr_of_mut!((*_5));
_7 = _1 as f32;
match _9.0 {
0 => bb4,
1 => bb5,
2 => bb6,
187 => bb8,
_ => bb7
}
}
bb4 = {
RET.3 = core::ptr::addr_of!(_2);
RET.2 = [1260150705_u32,3656156743_u32,514942592_u32,3781824090_u32];
RET.0 = [157_u8,236_u8,0_u8,124_u8,131_u8,254_u8,122_u8,158_u8];
_1 = 25077_u16 | 12383_u16;
RET.0 = [36_u8,129_u8,144_u8,74_u8,120_u8,64_u8,192_u8,149_u8];
_1 = 60070_u16 << _2;
RET.3 = core::ptr::addr_of!(_2);
_2 = 3164282310_u32 as i64;
_1 = !39617_u16;
RET.2 = [4237924656_u32,368063741_u32,471037050_u32,1693756342_u32];
RET.3 = core::ptr::addr_of!(_2);
_2 = -7216082075534816980_i64;
RET.3 = core::ptr::addr_of!(_2);
_1 = 24158_u16;
_4 = [31652_i16,8449_i16,(-3178_i16),14958_i16,581_i16];
RET.0 = [60_u8,142_u8,28_u8,25_u8,14_u8,178_u8,238_u8,124_u8];
Call(RET = fn10(_1, _2, _1, _1, _4, _4), bb3, UnwindUnreachable())
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
RET.3 = core::ptr::addr_of!(_6);
_1 = _2 as u16;
RET.0 = [_9.0,_9.0,_9.0,_9.0,_9.0,_9.0,_9.0,_9.0];
RET.3 = core::ptr::addr_of!(_2);
RET.0 = [_9.0,_9.0,_9.0,_9.0,_9.0,_9.0,_9.0,_9.0];
_10 = core::ptr::addr_of!(_7);
_10 = core::ptr::addr_of!((*_10));
_12.3.1 = _9.1 * _1;
_7 = 16345210421600070923944798016509874829_u128 as f32;
_12.3.0 = false as u8;
_12.3 = _9;
_12.1 = false ^ true;
_1 = _9.1;
Call(_8 = fn11(RET.2, _12.3.1, _12.3.0), bb9, UnwindUnreachable())
}
bb9 = {
match _9.0 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb6,
4 => bb5,
5 => bb10,
187 => bb12,
_ => bb11
}
}
bb10 = {
RET.3 = core::ptr::addr_of!(_2);
RET.2 = [1260150705_u32,3656156743_u32,514942592_u32,3781824090_u32];
RET.0 = [157_u8,236_u8,0_u8,124_u8,131_u8,254_u8,122_u8,158_u8];
_1 = 25077_u16 | 12383_u16;
RET.0 = [36_u8,129_u8,144_u8,74_u8,120_u8,64_u8,192_u8,149_u8];
_1 = 60070_u16 << _2;
RET.3 = core::ptr::addr_of!(_2);
_2 = 3164282310_u32 as i64;
_1 = !39617_u16;
RET.2 = [4237924656_u32,368063741_u32,471037050_u32,1693756342_u32];
RET.3 = core::ptr::addr_of!(_2);
_2 = -7216082075534816980_i64;
RET.3 = core::ptr::addr_of!(_2);
_1 = 24158_u16;
_4 = [31652_i16,8449_i16,(-3178_i16),14958_i16,581_i16];
RET.0 = [60_u8,142_u8,28_u8,25_u8,14_u8,178_u8,238_u8,124_u8];
Call(RET = fn10(_1, _2, _1, _1, _4, _4), bb3, UnwindUnreachable())
}
bb11 = {
Return()
}
bb12 = {
(*_10) = 56302447529402107277108677649266138722_i128 as f32;
RET.3 = core::ptr::addr_of!(_2);
_14 = _8;
_8 = _14;
_16 = _12.1 as isize;
_11 = [(-102981199020367134015239852701465452364_i128),(-35492508182796746410983751196907015881_i128),104140792009935352084672912852261320709_i128,107704283244826210795718570588393157700_i128,101921757276657171556509192473854474705_i128,145539865780488423687609507744748379309_i128];
RET.3 = core::ptr::addr_of!(_12.4);
(*_5) = core::ptr::addr_of_mut!(_12.1);
(*_10) = 2524692702_u32 as f32;
_14 = _8;
_1 = 51996522192391727585577344532477824566_i128 as u16;
RET.3 = core::ptr::addr_of!(_2);
_12.1 = true;
RET.0 = [_9.0,_12.3.0,_9.0,_9.0,_12.3.0,_12.3.0,_12.3.0,_12.3.0];
_8 = _14;
_9 = (_12.3.0, _1);
match _12.3.0 {
0 => bb5,
1 => bb3,
2 => bb13,
187 => bb15,
_ => bb14
}
}
bb13 = {
RET.3 = core::ptr::addr_of!(_6);
_1 = _2 as u16;
RET.0 = [_9.0,_9.0,_9.0,_9.0,_9.0,_9.0,_9.0,_9.0];
RET.3 = core::ptr::addr_of!(_2);
RET.0 = [_9.0,_9.0,_9.0,_9.0,_9.0,_9.0,_9.0,_9.0];
_10 = core::ptr::addr_of!(_7);
_10 = core::ptr::addr_of!((*_10));
_12.3.1 = _9.1 * _1;
_7 = 16345210421600070923944798016509874829_u128 as f32;
_12.3.0 = false as u8;
_12.3 = _9;
_12.1 = false ^ true;
_1 = _9.1;
Call(_8 = fn11(RET.2, _12.3.1, _12.3.0), bb9, UnwindUnreachable())
}
bb14 = {
Return()
}
bb15 = {
RET.0 = [_12.3.0,_12.3.0,_9.0,_9.0,_9.0,_12.3.0,_12.3.0,_12.3.0];
RET.0 = [_12.3.0,_12.3.0,_12.3.0,_12.3.0,_12.3.0,_9.0,_9.0,_9.0];
_7 = 3_usize as f32;
_18 = _12.1;
(*_5) = core::ptr::addr_of_mut!(_18);
_6 = !_2;
_12.3 = (_9.0, _1);
_12.4 = -_2;
_6 = (-40_i8) as i64;
_17 = [17788676861529405073_usize,13549302809501045140_usize,2_usize,0_usize,6_usize,3_usize,6_usize,4_usize];
_17 = [17078571278815024567_usize,8326154447256355920_usize,5_usize,9965514550500571493_usize,7474182579156115086_usize,12678852842245370625_usize,0_usize,14497963622868101932_usize];
_20 = (_18,);
_14 = _8;
_11 = [130810368971939848653182833473521027286_i128,(-48552679270071489924744203797957855070_i128),147127265791215535081810685299558099246_i128,91744211650008113440914413691387835880_i128,(-105672489686221015434727252995910476527_i128),(-157496499129535256331102691901309346129_i128)];
_8 = _14;
RET.2 = [3461662032_u32,2945730657_u32,2843173221_u32,3879735388_u32];
_6 = -_2;
_18 = _7 > (*_10);
RET.2 = [1153607752_u32,2553230857_u32,2456048137_u32,1482102828_u32];
RET.3 = core::ptr::addr_of!(_2);
RET.2 = [2160550883_u32,3892731792_u32,1122263129_u32,1342635721_u32];
Goto(bb16)
}
bb16 = {
Call(_21 = dump_var(9_usize, 8_usize, Move(_8), 2_usize, Move(_2), 1_usize, Move(_1), 16_usize, Move(_16)), bb17, UnwindUnreachable())
}
bb17 = {
Call(_21 = dump_var(9_usize, 20_usize, Move(_20), 4_usize, Move(_4), 22_usize, _22, 22_usize, _22), bb18, UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn10(mut _1: u16,mut _2: i64,mut _3: u16,mut _4: u16,mut _5: [i16; 5],mut _6: [i16; 5]) -> ([u8; 8], *mut bool, [u32; 4], *const i64) {
mir! {
type RET = ([u8; 8], *mut bool, [u32; 4], *const i64);
let _7: isize;
let _8: (u128,);
let _9: f64;
let _10: i64;
let _11: usize;
let _12: [u32; 4];
let _13: char;
let _14: u64;
let _15: i16;
let _16: i8;
let _17: (i16, char, [i16; 5], [usize; 8]);
let _18: (f32, bool, u16, (u8, u16), i64);
let _19: isize;
let _20: (((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64)), usize);
let _21: isize;
let _22: isize;
let _23: isize;
let _24: i128;
let _25: [i128; 6];
let _26: Adt51;
let _27: usize;
let _28: i16;
let _29: *const i32;
let _30: bool;
let _31: isize;
let _32: Adt55;
let _33: [usize; 8];
let _34: isize;
let _35: (f32, bool, u16, (u8, u16), i64);
let _36: isize;
let _37: [u128; 2];
let _38: (i32, f64, f64);
let _39: Adt56;
let _40: (u128,);
let _41: [u32; 4];
let _42: [usize; 8];
let _43: ();
let _44: ();
{
RET.3 = core::ptr::addr_of!(_2);
RET.0 = [22_u8,71_u8,168_u8,51_u8,201_u8,113_u8,218_u8,152_u8];
RET.2 = [527272488_u32,3603382082_u32,1407233354_u32,4236602844_u32];
_1 = 89_u8 as u16;
RET.2 = [3362293321_u32,2359843520_u32,1320339226_u32,2528515530_u32];
RET.3 = core::ptr::addr_of!(_2);
_7 = 191_u8 as isize;
RET.3 = core::ptr::addr_of!(_2);
_2 = (-8012428346163807177_i64) | 739605996350008498_i64;
_7 = 9223372036854775807_isize | (-9223372036854775808_isize);
_5 = _6;
RET.0 = [61_u8,147_u8,7_u8,229_u8,95_u8,62_u8,110_u8,212_u8];
_8.0 = 39251502496244529533152916264166269053_u128;
RET.3 = core::ptr::addr_of!(_2);
RET.0 = [28_u8,62_u8,79_u8,11_u8,227_u8,65_u8,181_u8,3_u8];
Goto(bb1)
}
bb1 = {
_2 = _3 as i64;
_6 = _5;
_8 = (60657600602119613558165152037376208739_u128,);
_2 = 1902155869126067849_i64 + (-8525635057354388984_i64);
_3 = _1 ^ _4;
RET.2 = [281978838_u32,2084178874_u32,899132947_u32,483626111_u32];
RET.2 = [2471629343_u32,1925258808_u32,3916613899_u32,3628087747_u32];
_5 = [(-7130_i16),(-8913_i16),(-19712_i16),12653_i16,(-13991_i16)];
_6 = [(-3343_i16),1104_i16,(-1847_i16),(-8531_i16),11631_i16];
_12 = [4208430544_u32,2536474281_u32,3093092060_u32,4134496819_u32];
_11 = 3781326970323148532_usize;
_2 = (-5441424676334333418_i64);
_11 = !12096545007582606038_usize;
RET.2 = [2484612250_u32,3374273410_u32,513279193_u32,4171758876_u32];
RET.0 = [75_u8,242_u8,149_u8,196_u8,190_u8,80_u8,226_u8,145_u8];
_15 = 15505_i16 << _4;
Goto(bb2)
}
bb2 = {
RET.3 = core::ptr::addr_of!(_2);
_8.0 = 212823167884851404838522841842812145233_u128;
_10 = _2 ^ _2;
_12 = [3878880170_u32,2131774963_u32,3454037692_u32,2812855692_u32];
_18.1 = _1 == _3;
_16 = _15 as i8;
match _2 {
0 => bb1,
340282366920938463457933182755433878038 => bb4,
_ => bb3
}
}
bb3 = {
_2 = _3 as i64;
_6 = _5;
_8 = (60657600602119613558165152037376208739_u128,);
_2 = 1902155869126067849_i64 + (-8525635057354388984_i64);
_3 = _1 ^ _4;
RET.2 = [281978838_u32,2084178874_u32,899132947_u32,483626111_u32];
RET.2 = [2471629343_u32,1925258808_u32,3916613899_u32,3628087747_u32];
_5 = [(-7130_i16),(-8913_i16),(-19712_i16),12653_i16,(-13991_i16)];
_6 = [(-3343_i16),1104_i16,(-1847_i16),(-8531_i16),11631_i16];
_12 = [4208430544_u32,2536474281_u32,3093092060_u32,4134496819_u32];
_11 = 3781326970323148532_usize;
_2 = (-5441424676334333418_i64);
_11 = !12096545007582606038_usize;
RET.2 = [2484612250_u32,3374273410_u32,513279193_u32,4171758876_u32];
RET.0 = [75_u8,242_u8,149_u8,196_u8,190_u8,80_u8,226_u8,145_u8];
_15 = 15505_i16 << _4;
Goto(bb2)
}
bb4 = {
_20.0.0.4 = -_10;
_20.0.0.3.0 = 201_u8 - 164_u8;
RET.2 = _12;
_18.3.1 = 18445212429323579357_u64 as u16;
_20.0.1.1 = !_18.1;
_20.0.1.0 = _20.0.0.3.0 as f32;
_20.0.0.0 = _20.0.1.0 + _20.0.1.0;
_20.0.1.4 = _2 + _2;
_2 = _20.0.0.4;
_15 = -15811_i16;
RET.3 = core::ptr::addr_of!(_18.4);
_20.0.0.3.1 = 850850373_i32 as u16;
RET.1 = core::ptr::addr_of_mut!(_20.0.0.1);
_20.1 = _11;
_18.3 = _20.0.0.3;
RET.0 = [_18.3.0,_18.3.0,_20.0.0.3.0,_18.3.0,_20.0.0.3.0,_18.3.0,_18.3.0,_20.0.0.3.0];
match _8.0 {
0 => bb1,
1 => bb3,
2 => bb5,
3 => bb6,
212823167884851404838522841842812145233 => bb8,
_ => bb7
}
}
bb5 = {
_2 = _3 as i64;
_6 = _5;
_8 = (60657600602119613558165152037376208739_u128,);
_2 = 1902155869126067849_i64 + (-8525635057354388984_i64);
_3 = _1 ^ _4;
RET.2 = [281978838_u32,2084178874_u32,899132947_u32,483626111_u32];
RET.2 = [2471629343_u32,1925258808_u32,3916613899_u32,3628087747_u32];
_5 = [(-7130_i16),(-8913_i16),(-19712_i16),12653_i16,(-13991_i16)];
_6 = [(-3343_i16),1104_i16,(-1847_i16),(-8531_i16),11631_i16];
_12 = [4208430544_u32,2536474281_u32,3093092060_u32,4134496819_u32];
_11 = 3781326970323148532_usize;
_2 = (-5441424676334333418_i64);
_11 = !12096545007582606038_usize;
RET.2 = [2484612250_u32,3374273410_u32,513279193_u32,4171758876_u32];
RET.0 = [75_u8,242_u8,149_u8,196_u8,190_u8,80_u8,226_u8,145_u8];
_15 = 15505_i16 << _4;
Goto(bb2)
}
bb6 = {
RET.3 = core::ptr::addr_of!(_2);
_8.0 = 212823167884851404838522841842812145233_u128;
_10 = _2 ^ _2;
_12 = [3878880170_u32,2131774963_u32,3454037692_u32,2812855692_u32];
_18.1 = _1 == _3;
_16 = _15 as i8;
match _2 {
0 => bb1,
340282366920938463457933182755433878038 => bb4,
_ => bb3
}
}
bb7 = {
_2 = _3 as i64;
_6 = _5;
_8 = (60657600602119613558165152037376208739_u128,);
_2 = 1902155869126067849_i64 + (-8525635057354388984_i64);
_3 = _1 ^ _4;
RET.2 = [281978838_u32,2084178874_u32,899132947_u32,483626111_u32];
RET.2 = [2471629343_u32,1925258808_u32,3916613899_u32,3628087747_u32];
_5 = [(-7130_i16),(-8913_i16),(-19712_i16),12653_i16,(-13991_i16)];
_6 = [(-3343_i16),1104_i16,(-1847_i16),(-8531_i16),11631_i16];
_12 = [4208430544_u32,2536474281_u32,3093092060_u32,4134496819_u32];
_11 = 3781326970323148532_usize;
_2 = (-5441424676334333418_i64);
_11 = !12096545007582606038_usize;
RET.2 = [2484612250_u32,3374273410_u32,513279193_u32,4171758876_u32];
RET.0 = [75_u8,242_u8,149_u8,196_u8,190_u8,80_u8,226_u8,145_u8];
_15 = 15505_i16 << _4;
Goto(bb2)
}
bb8 = {
_21 = _20.0.0.0 as isize;
_20.0.1.3.0 = _7 as u8;
_20.0.0.2 = !_1;
_18.0 = 2073398035_u32 as f32;
RET.3 = core::ptr::addr_of!(_20.0.0.4);
_20.1 = _16 as usize;
_20.0.0.3.1 = _3;
_20.0.1.3.1 = _20.0.0.3.1;
_17.2 = [_15,_15,_15,_15,_15];
_20.0.1.2 = _11 as u16;
_17.3 = [_11,_11,_20.1,_20.1,_20.1,_11,_20.1,_11];
_9 = 2512745588_u32 as f64;
_23 = !_21;
_18.2 = !_20.0.1.2;
_17.2 = [_15,_15,_15,_15,_15];
_18.3 = (_20.0.0.3.0, _3);
_18.0 = _20.0.0.0;
_24 = 17476817490052825076325498480560642129_i128;
_18.4 = _20.0.1.4;
_13 = '\u{4183c}';
_22 = _7;
_8.0 = !119106942779602893668686017386695294553_u128;
_10 = _20.0.1.3.0 as i64;
_17.0 = _20.0.1.1 as i16;
_18.2 = !_18.3.1;
_20.0.1.2 = _18.3.1;
_20.0.1.2 = _13 as u16;
Goto(bb9)
}
bb9 = {
_20.0.0 = _18;
_20.0.0.0 = -_18.0;
_17.0 = _15 >> _20.0.1.3.0;
_17.1 = _13;
Goto(bb10)
}
bb10 = {
RET.2 = [702705956_u32,3644821960_u32,3104471169_u32,1407223859_u32];
_12 = [2766728780_u32,247984826_u32,2872085113_u32,1565054648_u32];
_22 = _20.0.0.0 as isize;
RET.2 = [2045532941_u32,931425387_u32,1366456267_u32,2710315789_u32];
_2 = !_18.4;
_18.1 = _20.0.1.1;
_7 = _23;
_8.0 = 280654831416383994662802943977076952075_u128;
_12 = [2914367343_u32,1229543797_u32,1886646368_u32,1161783315_u32];
_20.0.1.0 = _18.0 - _18.0;
_16 = _20.0.0.1 as i8;
RET.3 = core::ptr::addr_of!(_20.0.1.4);
_10 = _20.0.0.4;
_20.0.1.2 = !_20.0.0.2;
RET.1 = core::ptr::addr_of_mut!(_18.1);
_20.0.0.3.1 = _3 / _4;
_20.0.1.3.1 = _20.0.1.2 + _20.0.0.3.1;
RET.1 = core::ptr::addr_of_mut!(_20.0.1.1);
_4 = !_20.0.1.3.1;
_20.0.0.1 = !_18.1;
_17.1 = _13;
RET.0 = [_20.0.0.3.0,_18.3.0,_18.3.0,_20.0.0.3.0,_20.0.0.3.0,_20.0.0.3.0,_18.3.0,_18.3.0];
_28 = _17.0;
_32.fld0.1 = -_9;
_18.3.0 = !_20.0.1.3.0;
_18.4 = _2;
RET.1 = core::ptr::addr_of_mut!(_18.1);
match _8.0 {
0 => bb11,
280654831416383994662802943977076952075 => bb13,
_ => bb12
}
}
bb11 = {
RET.3 = core::ptr::addr_of!(_2);
_8.0 = 212823167884851404838522841842812145233_u128;
_10 = _2 ^ _2;
_12 = [3878880170_u32,2131774963_u32,3454037692_u32,2812855692_u32];
_18.1 = _1 == _3;
_16 = _15 as i8;
match _2 {
0 => bb1,
340282366920938463457933182755433878038 => bb4,
_ => bb3
}
}
bb12 = {
_2 = _3 as i64;
_6 = _5;
_8 = (60657600602119613558165152037376208739_u128,);
_2 = 1902155869126067849_i64 + (-8525635057354388984_i64);
_3 = _1 ^ _4;
RET.2 = [281978838_u32,2084178874_u32,899132947_u32,483626111_u32];
RET.2 = [2471629343_u32,1925258808_u32,3916613899_u32,3628087747_u32];
_5 = [(-7130_i16),(-8913_i16),(-19712_i16),12653_i16,(-13991_i16)];
_6 = [(-3343_i16),1104_i16,(-1847_i16),(-8531_i16),11631_i16];
_12 = [4208430544_u32,2536474281_u32,3093092060_u32,4134496819_u32];
_11 = 3781326970323148532_usize;
_2 = (-5441424676334333418_i64);
_11 = !12096545007582606038_usize;
RET.2 = [2484612250_u32,3374273410_u32,513279193_u32,4171758876_u32];
RET.0 = [75_u8,242_u8,149_u8,196_u8,190_u8,80_u8,226_u8,145_u8];
_15 = 15505_i16 << _4;
Goto(bb2)
}
bb13 = {
_14 = 3503157650060635863_u64 - 4397366748828823164_u64;
_21 = _23;
_23 = _7 ^ _22;
_6 = [_28,_28,_28,_17.0,_17.0];
_27 = _11 << _8.0;
_7 = _18.0 as isize;
_25 = [_24,_24,_24,_24,_24,_24];
RET.3 = core::ptr::addr_of!(_10);
_20.0.0.2 = _20.0.0.3.1;
_32.fld0.2 = _9;
_20.0.0.0 = _18.0 * _20.0.1.0;
_4 = _20.0.0.2;
_33 = _17.3;
_20.0.1.3 = _20.0.0.3;
_6 = _5;
_35.3.1 = _20.0.0.1 as u16;
_21 = _32.fld0.1 as isize;
_20.0.0.3.1 = _20.0.1.2;
_32.fld0 = ((-1384306971_i32), _9, _9);
_20.0.0.0 = _20.0.1.0;
RET.1 = core::ptr::addr_of_mut!(_30);
_13 = _17.1;
_38.2 = _16 as f64;
_35.0 = -_20.0.1.0;
_32.fld0 = ((-1532500325_i32), _38.2, _38.2);
Goto(bb14)
}
bb14 = {
_17 = (_15, _13, _5, _33);
_33 = [_20.1,_20.1,_27,_27,_20.1,_27,_20.1,_27];
_20.0.0.3 = (_20.0.1.3.0, _18.2);
_20.0.1.3 = _20.0.0.3;
_29 = core::ptr::addr_of!(_38.0);
_20.0.1.1 = _20.0.0.1 | _20.0.0.1;
_8.0 = 75960018706819502626450872864558216048_u128;
_35.4 = _2 + _2;
_35.3 = (_20.0.0.3.0, _18.3.1);
_29 = core::ptr::addr_of!((*_29));
_32.fld0.1 = _20.0.0.3.0 as f64;
Goto(bb15)
}
bb15 = {
Call(_43 = dump_var(10_usize, 16_usize, Move(_16), 24_usize, Move(_24), 12_usize, Move(_12), 22_usize, Move(_22)), bb16, UnwindUnreachable())
}
bb16 = {
Call(_43 = dump_var(10_usize, 3_usize, Move(_3), 28_usize, Move(_28), 4_usize, Move(_4), 11_usize, Move(_11)), bb17, UnwindUnreachable())
}
bb17 = {
Call(_43 = dump_var(10_usize, 33_usize, Move(_33), 23_usize, Move(_23), 25_usize, Move(_25), 14_usize, Move(_14)), bb18, UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn11(mut _1: [u32; 4],mut _2: u16,mut _3: u8) -> char {
mir! {
type RET = char;
let _4: char;
let _5: [bool; 2];
let _6: (u128,);
let _7: Adt50;
let _8: u128;
let _9: u128;
let _10: (i16, char, [i16; 5], [usize; 8]);
let _11: i32;
let _12: isize;
let _13: (bool,);
let _14: isize;
let _15: (u64, *const i32, *mut *const i32);
let _16: char;
let _17: u32;
let _18: f32;
let _19: (((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64)), usize);
let _20: f64;
let _21: [usize; 2];
let _22: i32;
let _23: i32;
let _24: [i16; 5];
let _25: *mut u32;
let _26: (u128,);
let _27: f32;
let _28: isize;
let _29: bool;
let _30: *mut *mut bool;
let _31: ();
let _32: ();
{
_3 = 186_u8;
RET = '\u{646bd}';
_3 = 6_u8;
Goto(bb1)
}
bb1 = {
RET = '\u{90bca}';
_4 = RET;
_5 = [false,true];
_6.0 = 1612579931172316888_u64 as u128;
_2 = 23377_u16 >> _3;
Goto(bb2)
}
bb2 = {
_3 = 31_u8 >> _2;
_5 = [true,true];
_3 = !121_u8;
RET = _4;
_3 = 230_u8 * 155_u8;
_3 = 25_u8;
_2 = RET as u16;
_6.0 = !140100468105089165486913202666150344634_u128;
_4 = RET;
_3 = !116_u8;
_4 = RET;
_5 = [true,true];
_5 = [true,true];
_6 = (81709839794324557032371178878110738790_u128,);
RET = _4;
_4 = RET;
_1 = [1263989408_u32,2500035781_u32,3470728658_u32,1740560636_u32];
_6 = (149428186999864849779843398799742407146_u128,);
_8 = _6.0 | _6.0;
_3 = _4 as u8;
_3 = 44_u8 | 164_u8;
_5 = [true,false];
_3 = !75_u8;
_4 = RET;
_9 = _8 & _6.0;
RET = _4;
Goto(bb3)
}
bb3 = {
_4 = RET;
RET = _4;
_6 = (_8,);
_11 = 13921654102037260676_u64 as i32;
_9 = _8;
_10.1 = _4;
_12 = 56_isize;
_10.3 = [13269765723986659078_usize,9086417830535273699_usize,4_usize,1_usize,3_usize,0_usize,5_usize,3_usize];
RET = _4;
_10.0 = 32017_i16 << _9;
_2 = 63556_u16;
_8 = _6.0;
_13.0 = !false;
_6.0 = !_9;
_15.2 = core::ptr::addr_of_mut!(_15.1);
_16 = _10.1;
_10.1 = _4;
_15.0 = _4 as u64;
_11 = !(-1370234585_i32);
Goto(bb4)
}
bb4 = {
_15.1 = core::ptr::addr_of!(_11);
_10.3 = [2_usize,3_usize,6060017141594836136_usize,2_usize,3_usize,4_usize,14054274061351802667_usize,11136121512149421940_usize];
_9 = _8;
_16 = _10.1;
_16 = _10.1;
_8 = !_9;
_10.1 = RET;
_11 = _16 as i32;
_10.3 = [7_usize,12740690732723798875_usize,17885506761825172360_usize,11129330557576031493_usize,9668653886474523610_usize,5_usize,5499105012337622034_usize,11896803234824562974_usize];
_10.2 = [_10.0,_10.0,_10.0,_10.0,_10.0];
_14 = _12 - _12;
_8 = !_6.0;
_15.1 = core::ptr::addr_of!(_11);
_18 = _10.0 as f32;
_17 = 408123463_u32;
RET = _16;
_19.0.0.4 = 4258701956855603378_i64 >> _6.0;
_19.0.1.2 = !_2;
_4 = RET;
_19.0.0.3.0 = _8 as u8;
_12 = _15.0 as isize;
_19.0.1.3.0 = !_3;
RET = _16;
match _2 {
0 => bb1,
1 => bb2,
2 => bb5,
3 => bb6,
4 => bb7,
5 => bb8,
6 => bb9,
63556 => bb11,
_ => bb10
}
}
bb5 = {
_4 = RET;
RET = _4;
_6 = (_8,);
_11 = 13921654102037260676_u64 as i32;
_9 = _8;
_10.1 = _4;
_12 = 56_isize;
_10.3 = [13269765723986659078_usize,9086417830535273699_usize,4_usize,1_usize,3_usize,0_usize,5_usize,3_usize];
RET = _4;
_10.0 = 32017_i16 << _9;
_2 = 63556_u16;
_8 = _6.0;
_13.0 = !false;
_6.0 = !_9;
_15.2 = core::ptr::addr_of_mut!(_15.1);
_16 = _10.1;
_10.1 = _4;
_15.0 = _4 as u64;
_11 = !(-1370234585_i32);
Goto(bb4)
}
bb6 = {
_3 = 31_u8 >> _2;
_5 = [true,true];
_3 = !121_u8;
RET = _4;
_3 = 230_u8 * 155_u8;
_3 = 25_u8;
_2 = RET as u16;
_6.0 = !140100468105089165486913202666150344634_u128;
_4 = RET;
_3 = !116_u8;
_4 = RET;
_5 = [true,true];
_5 = [true,true];
_6 = (81709839794324557032371178878110738790_u128,);
RET = _4;
_4 = RET;
_1 = [1263989408_u32,2500035781_u32,3470728658_u32,1740560636_u32];
_6 = (149428186999864849779843398799742407146_u128,);
_8 = _6.0 | _6.0;
_3 = _4 as u8;
_3 = 44_u8 | 164_u8;
_5 = [true,false];
_3 = !75_u8;
_4 = RET;
_9 = _8 & _6.0;
RET = _4;
Goto(bb3)
}
bb7 = {
RET = '\u{90bca}';
_4 = RET;
_5 = [false,true];
_6.0 = 1612579931172316888_u64 as u128;
_2 = 23377_u16 >> _3;
Goto(bb2)
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
_19.1 = 4_usize;
_19.0.1.1 = !_13.0;
_18 = _17 as f32;
_19.0.1.3.0 = (-84_i8) as u8;
_5 = [_19.0.1.1,_19.0.1.1];
_10.3 = [_19.1,_19.1,_19.1,_19.1,_19.1,_19.1,_19.1,_19.1];
_19.0.0.3 = (_3, _19.0.1.2);
_19.0.1.3.0 = _19.0.0.3.0 * _3;
_13 = (_19.0.1.1,);
_18 = _9 as f32;
_19.0.1.0 = _18 - _18;
_6 = (_8,);
_19.0.0.3.0 = !_3;
_19.0.0.4 = !4472310666305462699_i64;
RET = _10.1;
Call(_19.0.0.4 = fn12(_19.0.1.2, _19.0.1.1, _10.2, _13, _19.0.1.1, _1, _10.2, _3, _10.2), bb12, UnwindUnreachable())
}
bb12 = {
_19.0.1.3 = (_19.0.0.3.0, _19.0.0.3.1);
_19.1 = 2_usize + 1_usize;
_19.0.0.1 = !_19.0.1.1;
_19.0.0.2 = _19.0.1.3.1;
_5 = [_13.0,_13.0];
_24 = [_10.0,_10.0,_10.0,_10.0,_10.0];
_19.0.0.0 = -_19.0.1.0;
_5 = [_19.0.0.1,_19.0.0.1];
_19.0.0.1 = _14 == _14;
_22 = _11 >> _19.0.0.3.1;
_6 = (_8,);
_25 = core::ptr::addr_of_mut!(_17);
_19.0.1 = _19.0.0;
_6 = (_9,);
_19.0.0.3.0 = _3;
_11 = _22;
_23 = (*_25) as i32;
Goto(bb13)
}
bb13 = {
_8 = _6.0 - _6.0;
(*_25) = 572229624_u32;
_17 = (-14_i8) as u32;
_21 = [_19.1,_19.1];
_21 = [_19.1,_19.1];
_19.0.0.3 = (_3, _19.0.0.2);
_27 = _19.1 as f32;
_10.1 = _4;
_19.0.0.2 = _19.0.1.3.1;
_26 = _6;
_20 = _19.0.1.2 as f64;
_15.2 = core::ptr::addr_of_mut!(_15.1);
_19.0.1.3.1 = RET as u16;
Goto(bb14)
}
bb14 = {
_19.0.0.3 = (_19.0.1.3.0, _2);
Goto(bb15)
}
bb15 = {
Call(_31 = dump_var(11_usize, 23_usize, Move(_23), 9_usize, Move(_9), 8_usize, Move(_8), 16_usize, Move(_16)), bb16, UnwindUnreachable())
}
bb16 = {
Call(_31 = dump_var(11_usize, 2_usize, Move(_2), 12_usize, Move(_12), 13_usize, Move(_13), 10_usize, Move(_10)), bb17, UnwindUnreachable())
}
bb17 = {
Call(_31 = dump_var(11_usize, 11_usize, Move(_11), 4_usize, Move(_4), 32_usize, _32, 32_usize, _32), bb18, UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn12(mut _1: u16,mut _2: bool,mut _3: [i16; 5],mut _4: (bool,),mut _5: bool,mut _6: [u32; 4],mut _7: [i16; 5],mut _8: u8,mut _9: [i16; 5]) -> i64 {
mir! {
type RET = i64;
let _10: f32;
let _11: u64;
let _12: u16;
let _13: ((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64));
let _14: bool;
let _15: (u64, i32, f64);
let _16: [u8; 8];
let _17: [usize; 2];
let _18: f64;
let _19: bool;
let _20: Adt55;
let _21: (bool,);
let _22: isize;
let _23: f32;
let _24: i16;
let _25: *const *const f64;
let _26: i32;
let _27: i8;
let _28: i16;
let _29: isize;
let _30: (f32, bool, u16, (u8, u16), i64);
let _31: [i128; 6];
let _32: isize;
let _33: ();
let _34: ();
{
_8 = 211046001205582290040592023964892780070_u128 as u8;
_7 = _3;
RET = (-79667399861632238435814552198931062088_i128) as i64;
RET = _8 as i64;
_9 = [(-14553_i16),19476_i16,9077_i16,29468_i16,(-10118_i16)];
_4 = (_2,);
_7 = [27736_i16,22449_i16,31592_i16,(-27291_i16),6323_i16];
_4.0 = !_5;
_8 = 166_u8 ^ 157_u8;
Goto(bb1)
}
bb1 = {
_5 = _2;
_4 = (_5,);
_2 = _4.0;
_8 = 48_u8 - 139_u8;
_1 = 59670_u16 & 15304_u16;
_10 = _8 as f32;
_10 = 18044513651529260699_u64 as f32;
_3 = [(-20695_i16),9416_i16,32165_i16,19552_i16,20728_i16];
_4 = (_5,);
_11 = 9736596648574995694_u64;
_13.1.2 = !_1;
Goto(bb2)
}
bb2 = {
_1 = !_13.1.2;
_13.0.1 = !_5;
_13.0.0 = _10;
match _11 {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
4 => bb7,
9736596648574995694 => bb9,
_ => bb8
}
}
bb3 = {
_5 = _2;
_4 = (_5,);
_2 = _4.0;
_8 = 48_u8 - 139_u8;
_1 = 59670_u16 & 15304_u16;
_10 = _8 as f32;
_10 = 18044513651529260699_u64 as f32;
_3 = [(-20695_i16),9416_i16,32165_i16,19552_i16,20728_i16];
_4 = (_5,);
_11 = 9736596648574995694_u64;
_13.1.2 = !_1;
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
_13.1.3.1 = _13.1.2 - _1;
RET = _8 as i64;
_12 = !_1;
_13.1.4 = 63550900655070269210448201365568378803_u128 as i64;
_13.0.4 = _13.1.4 << _8;
_13.1.0 = _13.0.0 + _13.0.0;
_13.0.2 = _13.1.3.1 + _13.1.3.1;
_3 = [(-26250_i16),(-4087_i16),(-5870_i16),20567_i16,1247_i16];
_18 = RET as f64;
RET = -_13.1.4;
RET = _13.0.4;
_13.0.4 = _13.1.4 >> _13.0.2;
_13.0.3 = (_8, _13.0.2);
_15.2 = -_18;
Goto(bb10)
}
bb10 = {
_1 = _13.1.3.1 & _13.1.2;
_15.0 = _11 ^ _11;
_13.1.0 = _13.0.0 - _13.0.0;
_17 = [6529171946831879190_usize,5100879435978784533_usize];
_2 = RET < _13.0.4;
_20.fld0 = ((-1740387847_i32), _18, _18);
_12 = _15.0 as u16;
_21 = _4;
_3 = [(-15945_i16),(-17345_i16),12908_i16,12614_i16,13655_i16];
_6 = [2956031713_u32,1639674621_u32,2228811859_u32,3095077121_u32];
_13.1.4 = _13.0.4;
_13.1 = (_13.0.0, _13.0.1, _13.0.3.1, _13.0.3, _13.0.4);
Goto(bb11)
}
bb11 = {
_10 = _13.0.3.0 as f32;
_5 = _2 <= _2;
_20.fld2 = [2_usize,12690495786438921883_usize,1743360293289021296_usize,6_usize,0_usize,1_usize,14678332579848964992_usize,12121894683961953012_usize];
_13.1.3 = (_13.0.3.0, _13.0.2);
_5 = _13.1.1 | _2;
_1 = _13.1.2;
_16 = [_8,_13.1.3.0,_13.1.3.0,_8,_13.1.3.0,_8,_13.1.3.0,_13.1.3.0];
_7 = [7390_i16,(-21891_i16),(-16488_i16),14969_i16,(-28595_i16)];
_13.0.4 = _13.1.4;
_9 = [(-32035_i16),(-26285_i16),4131_i16,16904_i16,29573_i16];
_13.1.3.0 = !_8;
_6 = [3894516533_u32,3818738071_u32,504111509_u32,3358919832_u32];
_13.1.2 = !_13.0.3.1;
_7 = _3;
_4.0 = !_2;
_13.1.2 = _13.0.2;
_1 = 290290537050633148626950469489663055696_u128 as u16;
_15.1 = -_20.fld0.0;
_13.0.0 = _20.fld0.1 as f32;
_17 = [12289896416174735089_usize,11647500899636471414_usize];
_8 = !_13.0.3.0;
_20.fld0.0 = _11 as i32;
_13.1.2 = _13.1.4 as u16;
_13.1.4 = _13.0.0 as i64;
Goto(bb12)
}
bb12 = {
_9 = [823_i16,7841_i16,(-10854_i16),16830_i16,(-28849_i16)];
_24 = (-94_i16) >> _13.0.3.1;
_15.0 = !_11;
_22 = (-9223372036854775808_isize);
_23 = _13.1.0;
_13.0.1 = _20.fld0.1 == _18;
_7 = _3;
_13.1.3.0 = _8 * _13.0.3.0;
_1 = _13.0.2 * _13.0.3.1;
_6 = [110743647_u32,2449781617_u32,993449309_u32,1512750467_u32];
RET = 166779894619372662001399883550164452623_i128 as i64;
RET = -_13.0.4;
RET = _13.0.4;
_13.1.1 = !_4.0;
_5 = _13.1.1;
_12 = _1 >> _1;
_13.1.4 = -_13.0.4;
match _22 {
0 => bb1,
1 => bb2,
2 => bb7,
3 => bb9,
4 => bb5,
5 => bb6,
340282366920938463454151235394913435648 => bb14,
_ => bb13
}
}
bb13 = {
Return()
}
bb14 = {
Goto(bb15)
}
bb15 = {
Call(_33 = dump_var(12_usize, 4_usize, Move(_4), 21_usize, Move(_21), 1_usize, Move(_1), 12_usize, Move(_12)), bb16, UnwindUnreachable())
}
bb16 = {
Call(_33 = dump_var(12_usize, 24_usize, Move(_24), 6_usize, Move(_6), 11_usize, Move(_11), 3_usize, Move(_3)), bb17, UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn13(mut _1: (u128,),mut _2: (f32, bool, u16, (u8, u16), i64),mut _3: (f32, bool, u16, (u8, u16), i64),mut _4: isize,mut _5: u16) -> *const f32 {
mir! {
type RET = *const f32;
let _6: Adt50;
let _7: isize;
let _8: *const i32;
let _9: (u64, i32, f64);
let _10: u128;
let _11: Adt64;
let _12: char;
let _13: char;
let _14: [i128; 6];
let _15: ();
let _16: ();
{
_2.3.0 = _1.0 as u8;
_2.4 = _3.4;
_7 = _4;
_3.1 = _3.3.1 >= _5;
_1 = (126062351999841347424655031055335705083_u128,);
_2.0 = -_3.0;
RET = core::ptr::addr_of!(_2.0);
_5 = _3.3.1 * _3.2;
_2.3.0 = _3.3.0;
Call(_3 = fn14(_2.1, _2.1, _2, _2.1, _7, _2.1, _2), bb1, UnwindUnreachable())
}
bb1 = {
_5 = !_3.3.1;
_3.2 = !_5;
(*RET) = _3.3.0 as f32;
_2.3.1 = _3.2;
_3.3 = (_2.3.0, _2.3.1);
(*RET) = _3.0;
(*RET) = _3.0;
_1 = (327651398016877733170429026315256232310_u128,);
(*RET) = _3.3.0 as f32;
_7 = _4 & _4;
_3.0 = _1.0 as f32;
_2.3 = (_3.3.0, _3.3.1);
match _1.0 {
327651398016877733170429026315256232310 => bb3,
_ => bb2
}
}
bb2 = {
Return()
}
bb3 = {
_1.0 = 217141211590382688218201340054729506938_u128 * 227107099208609911990155402994265497312_u128;
_2.2 = (-33_i8) as u16;
RET = core::ptr::addr_of!(_3.0);
_2.2 = !_5;
Call((*RET) = fn15(_3.1, _2.1, _2.1, RET), bb4, UnwindUnreachable())
}
bb4 = {
_9.0 = !3412718335781875713_u64;
_2.0 = (*RET);
_2.1 = _3.1 > _3.1;
_9.2 = 3592706414_u32 as f64;
_2.3 = (_3.3.0, _3.2);
_2.3.0 = _3.3.0 - _3.3.0;
Goto(bb5)
}
bb5 = {
(*RET) = _2.0;
(*RET) = _7 as f32;
(*RET) = _2.0 + _2.0;
_2.3.0 = _3.3.0 - _3.3.0;
_2.1 = _3.1;
_2.3.0 = (*RET) as u8;
_2.4 = _3.4;
_8 = core::ptr::addr_of!(_9.1);
(*_8) = -1129529810_i32;
_2.1 = !_3.1;
_2.1 = _3.1;
_3.3.0 = _2.3.0;
_12 = '\u{37a62}';
_10 = !_1.0;
_3.0 = _2.0 - _2.0;
_2.3.1 = _3.2 | _3.3.1;
_9.2 = _4 as f64;
(*_8) = -(-986862790_i32);
_3.2 = !_3.3.1;
_2.4 = _3.4;
_2 = (_3.0, _3.1, _5, _3.3, _3.4);
_1 = (_10,);
_3.1 = _2.0 > _2.0;
_3.3 = (_2.3.0, _3.2);
(*RET) = -_2.0;
_12 = '\u{280e0}';
_3.3.1 = _2.2 >> _2.2;
_5 = !_3.3.1;
Goto(bb6)
}
bb6 = {
_10 = _1.0;
_13 = _12;
_2.4 = 7_i8 as i64;
_1.0 = _10 << _3.4;
_5 = _13 as u16;
_2.3 = (_3.3.0, _3.3.1);
_2.3 = (_3.3.0, _2.2);
_2.2 = !_3.3.1;
_10 = _1.0 >> _3.4;
_4 = !_7;
(*_8) = _4 as i32;
_9.2 = _3.4 as f64;
RET = core::ptr::addr_of!(_3.0);
Goto(bb7)
}
bb7 = {
Call(_15 = dump_var(13_usize, 13_usize, Move(_13), 4_usize, Move(_4), 5_usize, Move(_5), 16_usize, _16), bb8, UnwindUnreachable())
}
bb8 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn14(mut _1: bool,mut _2: bool,mut _3: (f32, bool, u16, (u8, u16), i64),mut _4: bool,mut _5: isize,mut _6: bool,mut _7: (f32, bool, u16, (u8, u16), i64)) -> (f32, bool, u16, (u8, u16), i64) {
mir! {
type RET = (f32, bool, u16, (u8, u16), i64);
let _8: isize;
let _9: *mut *const i32;
let _10: ();
let _11: ();
{
_3.3 = (_7.3.0, _7.3.1);
RET.3.1 = _3.2 * _7.2;
_7 = _3;
RET.4 = _7.4 - _3.4;
_7.1 = !_2;
_4 = !_1;
_3.3.1 = _7.2 + RET.3.1;
_4 = _6 != _6;
_7.4 = 647468645_u32 as i64;
_8 = !_5;
_7.1 = !_4;
RET = (_3.0, _6, _3.3.1, _3.3, _3.4);
_2 = !_1;
_3.1 = _4;
_3.4 = -RET.4;
_3.0 = _7.3.0 as f32;
_7.4 = 26357_i16 as i64;
_7.3 = (RET.3.0, RET.3.1);
RET.3.1 = 1309881809_u32 as u16;
RET.3 = (_3.3.0, RET.2);
RET.3.0 = _7.3.0;
RET.3 = _7.3;
RET.2 = 1584990622_i32 as u16;
_3.3 = RET.3;
Goto(bb1)
}
bb1 = {
Call(_10 = dump_var(14_usize, 1_usize, Move(_1), 8_usize, Move(_8), 6_usize, Move(_6), 11_usize, _11), bb2, UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn15(mut _1: bool,mut _2: bool,mut _3: bool,mut _4: *const f32) -> f32 {
mir! {
type RET = f32;
let _5: f32;
let _6: [bool; 2];
let _7: usize;
let _8: isize;
let _9: Adt54;
let _10: i32;
let _11: u8;
let _12: isize;
let _13: [u32; 4];
let _14: (u128,);
let _15: f32;
let _16: i32;
let _17: isize;
let _18: Adt57;
let _19: u128;
let _20: u16;
let _21: *const i32;
let _22: isize;
let _23: char;
let _24: [u128; 2];
let _25: [bool; 2];
let _26: i8;
let _27: *const f32;
let _28: *mut *const i32;
let _29: [u32; 4];
let _30: (u8, u16);
let _31: Adt59;
let _32: [u128; 2];
let _33: [usize; 8];
let _34: f32;
let _35: isize;
let _36: ();
let _37: ();
{
_5 = 24_i8 as f32;
_1 = !_2;
_3 = _2 < _2;
RET = _5 * _5;
_5 = RET;
RET = 304620251373726796870518531068719896056_u128 as f32;
_2 = _3;
RET = _5;
_2 = _1;
_2 = _3;
_2 = !_3;
_1 = _2 <= _2;
_6 = [_2,_3];
RET = _5 - _5;
_6 = [_1,_2];
_2 = _1 & _1;
_6 = [_1,_3];
RET = 2063214210_i32 as f32;
_7 = 13177534968183253448_u64 as usize;
Goto(bb1)
}
bb1 = {
_8 = 26090055637708387357766918335831192247_i128 as isize;
Call(_8 = core::intrinsics::bswap((-9223372036854775808_isize)), bb2, UnwindUnreachable())
}
bb2 = {
_7 = 5_usize + 212216285220078799_usize;
_5 = 2004722446_i32 as f32;
_11 = 134_u8;
RET = _5;
RET = -_5;
_3 = !_2;
_6 = [_1,_3];
_8 = (-9223372036854775808_isize) ^ 107_isize;
_1 = _3;
_7 = 42228845277143402_usize - 6_usize;
_3 = !_2;
_8 = 106_isize;
_3 = _2 <= _1;
_1 = !_2;
_10 = (-1571359283_i32);
_6 = [_3,_2];
RET = _5 * _5;
_12 = _8 + _8;
_7 = 1_usize | 2_usize;
Goto(bb3)
}
bb3 = {
_2 = !_1;
_4 = core::ptr::addr_of!(RET);
(*_4) = -_5;
_7 = 4887174103159438054_usize << _12;
_11 = 100_u8 << _8;
_3 = !_1;
(*_4) = -_5;
_12 = -_8;
_7 = 3_usize;
_12 = 6_i8 as isize;
_13[_7] = _8 as u32;
_1 = !_2;
_7 = 11815294977155164725_usize;
_14 = (339246251787134183387644539788962148765_u128,);
_8 = _12 >> _11;
RET = -_5;
_12 = !_8;
_11 = 140_u8 & 38_u8;
_14.0 = 117940940565898815479264749498582368634_u128 | 79827879545870376902638897433313147097_u128;
_7 = !1767127025457123339_usize;
RET = _5;
_7 = 17979405163856698221_usize ^ 0_usize;
_17 = _12 - _12;
_13 = [21448392_u32,3869151129_u32,792203307_u32,3222714967_u32];
_7 = !14600648021337335959_usize;
_11 = 230_u8;
_12 = -_8;
match _11 {
230 => bb5,
_ => bb4
}
}
bb4 = {
_8 = 26090055637708387357766918335831192247_i128 as isize;
Call(_8 = core::intrinsics::bswap((-9223372036854775808_isize)), bb2, UnwindUnreachable())
}
bb5 = {
_2 = !_3;
_11 = 28_u8;
RET = _5 * _5;
_16 = _8 as i32;
_1 = !_3;
(*_4) = _5;
_7 = 2620242342494774571_usize;
_1 = _2;
_7 = 12271498473726362505_usize;
_1 = !_3;
_10 = _16 << _16;
_5 = -RET;
_13 = [4112906695_u32,2535680048_u32,3237306148_u32,3199369684_u32];
_13 = [3160363260_u32,1051777472_u32,1462427583_u32,2557881463_u32];
_19 = !_14.0;
_10 = _16 << _16;
_1 = _2;
_15 = -_5;
RET = _5;
_15 = (*_4) * RET;
_19 = !_14.0;
(*_4) = _15 * _15;
_3 = !_2;
_2 = _3;
_5 = -(*_4);
_19 = _14.0 * _14.0;
_2 = _1 > _1;
_2 = !_1;
Call(_20 = fn16(_8, _1, _6), bb6, UnwindUnreachable())
}
bb6 = {
_17 = _11 as isize;
Goto(bb7)
}
bb7 = {
(*_4) = _15;
_2 = _3;
_14.0 = !_19;
_13 = [1771666680_u32,1230012552_u32,2865344579_u32,2937793949_u32];
_5 = -(*_4);
_13 = [2745739334_u32,2765965161_u32,591276988_u32,1967840584_u32];
RET = _7 as f32;
_20 = 57460_u16 ^ 62310_u16;
_19 = _14.0;
_6 = [_2,_3];
_1 = !_3;
RET = 22390_i16 as f32;
RET = -_15;
(*_4) = _5 - _5;
_23 = '\u{f2f04}';
_24 = [_14.0,_19];
_5 = (-89742626726961890602745471004149403125_i128) as f32;
_20 = !8773_u16;
_24 = [_14.0,_19];
_14.0 = _19 ^ _19;
_11 = 217_u8 << _17;
match _7 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb8,
4 => bb9,
5 => bb10,
12271498473726362505 => bb12,
_ => bb11
}
}
bb8 = {
_7 = 5_usize + 212216285220078799_usize;
_5 = 2004722446_i32 as f32;
_11 = 134_u8;
RET = _5;
RET = -_5;
_3 = !_2;
_6 = [_1,_3];
_8 = (-9223372036854775808_isize) ^ 107_isize;
_1 = _3;
_7 = 42228845277143402_usize - 6_usize;
_3 = !_2;
_8 = 106_isize;
_3 = _2 <= _1;
_1 = !_2;
_10 = (-1571359283_i32);
_6 = [_3,_2];
RET = _5 * _5;
_12 = _8 + _8;
_7 = 1_usize | 2_usize;
Goto(bb3)
}
bb9 = {
_8 = 26090055637708387357766918335831192247_i128 as isize;
Call(_8 = core::intrinsics::bswap((-9223372036854775808_isize)), bb2, UnwindUnreachable())
}
bb10 = {
_8 = 26090055637708387357766918335831192247_i128 as isize;
Call(_8 = core::intrinsics::bswap((-9223372036854775808_isize)), bb2, UnwindUnreachable())
}
bb11 = {
_2 = !_1;
_4 = core::ptr::addr_of!(RET);
(*_4) = -_5;
_7 = 4887174103159438054_usize << _12;
_11 = 100_u8 << _8;
_3 = !_1;
(*_4) = -_5;
_12 = -_8;
_7 = 3_usize;
_12 = 6_i8 as isize;
_13[_7] = _8 as u32;
_1 = !_2;
_7 = 11815294977155164725_usize;
_14 = (339246251787134183387644539788962148765_u128,);
_8 = _12 >> _11;
RET = -_5;
_12 = !_8;
_11 = 140_u8 & 38_u8;
_14.0 = 117940940565898815479264749498582368634_u128 | 79827879545870376902638897433313147097_u128;
_7 = !1767127025457123339_usize;
RET = _5;
_7 = 17979405163856698221_usize ^ 0_usize;
_17 = _12 - _12;
_13 = [21448392_u32,3869151129_u32,792203307_u32,3222714967_u32];
_7 = !14600648021337335959_usize;
_11 = 230_u8;
_12 = -_8;
match _11 {
230 => bb5,
_ => bb4
}
}
bb12 = {
_15 = _10 as f32;
_5 = _15;
_10 = _16;
_22 = -_8;
_22 = _8;
_11 = 198_u8;
_25 = _6;
_22 = _17;
_21 = core::ptr::addr_of!(_10);
_4 = core::ptr::addr_of!((*_4));
_15 = (*_4) * _5;
_21 = core::ptr::addr_of!(_10);
_1 = _2;
_2 = _1 < _3;
_3 = _2;
_26 = 73_i8;
_9 = Adt54::Variant0 { fld0: _24 };
_24 = Field::<[u128; 2]>(Variant(_9, 0), 0);
_21 = core::ptr::addr_of!(_10);
_20 = 21921_u16;
_4 = core::ptr::addr_of!((*_4));
SetDiscriminant(_9, 0);
_9 = Adt54::Variant0 { fld0: _24 };
_12 = _22 ^ _17;
_3 = _2 < _1;
_1 = _16 == (*_21);
_20 = 20048_u16;
_11 = 2075512029366206641_i64 as u8;
match _20 {
0 => bb4,
1 => bb10,
20048 => bb14,
_ => bb13
}
}
bb13 = {
_8 = 26090055637708387357766918335831192247_i128 as isize;
Call(_8 = core::intrinsics::bswap((-9223372036854775808_isize)), bb2, UnwindUnreachable())
}
bb14 = {
(*_4) = _15 + _15;
_22 = -_12;
SetDiscriminant(_9, 1);
RET = -_5;
_1 = !_3;
_2 = !_3;
_16 = !_10;
place!(Field::<[usize; 8]>(Variant(_9, 1), 2)) = [_7,_7,_7,_7,_7,_7,_7,_7];
place!(Field::<(((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64)), usize)>(Variant(_9, 1), 1)).0.1.1 = (*_21) <= (*_21);
_29 = _13;
_29 = [323304314_u32,1598648336_u32,1010187675_u32,3346695702_u32];
RET = _5;
place!(Field::<(((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64)), usize)>(Variant(_9, 1), 1)).0.0.2 = (*_21) as u16;
_6 = [_2,_3];
_19 = _14.0 >> _10;
place!(Field::<(((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64)), usize)>(Variant(_9, 1), 1)).0.1.3 = (_11, Field::<(((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64)), usize)>(Variant(_9, 1), 1).0.0.2);
place!(Field::<(((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64)), usize)>(Variant(_9, 1), 1)).0.1.4 = _8 as i64;
place!(Field::<(((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64)), usize)>(Variant(_9, 1), 1)).0.0.3.1 = !Field::<(((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64)), usize)>(Variant(_9, 1), 1).0.0.2;
_16 = (*_21) >> Field::<(((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64)), usize)>(Variant(_9, 1), 1).0.0.2;
Goto(bb15)
}
bb15 = {
Call(_36 = dump_var(15_usize, 24_usize, Move(_24), 7_usize, Move(_7), 20_usize, Move(_20), 22_usize, Move(_22)), bb16, UnwindUnreachable())
}
bb16 = {
Call(_36 = dump_var(15_usize, 14_usize, Move(_14), 13_usize, Move(_13), 23_usize, Move(_23), 16_usize, Move(_16)), bb17, UnwindUnreachable())
}
bb17 = {
Call(_36 = dump_var(15_usize, 12_usize, Move(_12), 1_usize, Move(_1), 37_usize, _37, 37_usize, _37), bb18, UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn16(mut _1: isize,mut _2: bool,mut _3: [bool; 2]) -> u16 {
mir! {
type RET = u16;
let _4: i16;
let _5: isize;
let _6: u64;
let _7: [usize; 2];
let _8: bool;
let _9: Adt50;
let _10: f32;
let _11: u32;
let _12: f64;
let _13: (u128,);
let _14: ((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64));
let _15: [usize; 8];
let _16: [bool; 2];
let _17: Adt50;
let _18: isize;
let _19: (f32, bool, u16, (u8, u16), i64);
let _20: [bool; 2];
let _21: f64;
let _22: [usize; 8];
let _23: u128;
let _24: u64;
let _25: isize;
let _26: *const i64;
let _27: Adt62;
let _28: isize;
let _29: i16;
let _30: (u128,);
let _31: Adt50;
let _32: [usize; 8];
let _33: i32;
let _34: char;
let _35: isize;
let _36: Adt62;
let _37: ();
let _38: ();
{
RET = 47378_u16;
_4 = 6801_i16 | 2593_i16;
_4 = -23555_i16;
Goto(bb1)
}
bb1 = {
_3 = [_2,_2];
_1 = -(-9223372036854775808_isize);
_6 = 15181833175806969005_u64 << _4;
_5 = _1 >> _6;
_6 = (-1595572713_i32) as u64;
_3 = [_2,_2];
_7 = [17337314198503487771_usize,5_usize];
RET = 139500915917967355727642437860868241245_i128 as u16;
_1 = _5;
_3 = [_2,_2];
_6 = (-84776215874745577_i64) as u64;
_2 = !false;
_5 = -_1;
_6 = 932673220_u32 as u64;
RET = (-1810153071_i32) as u16;
_11 = !234833440_u32;
RET = 43400_u16;
_3 = [_2,_2];
_13.0 = 205908814233749501931436190831463986987_u128;
_4 = 29935_i16;
Call(_11 = core::intrinsics::bswap(381549809_u32), bb2, UnwindUnreachable())
}
bb2 = {
_5 = 67_u8 as isize;
_12 = 152_u8 as f64;
RET = 118_i8 as u16;
_7 = [6_usize,1176046861350124859_usize];
_2 = false;
_13.0 = !323708424682010941251134282459310561699_u128;
_14.0.1 = _1 <= _1;
_14.1.3.1 = _14.0.1 as u16;
Goto(bb3)
}
bb3 = {
_3 = [_14.0.1,_14.0.1];
_4 = 15985_i16;
_14.0.2 = _1 as u16;
_14.1.2 = !_14.0.2;
_14.1.3 = (150_u8, _14.1.2);
_14.1.4 = -7992851213330450100_i64;
_3 = [_14.0.1,_2];
_14.1.1 = !_14.0.1;
_14.1.3.1 = !_14.0.2;
_14.1.1 = !_14.0.1;
RET = _14.1.2;
_14.1.2 = _14.1.3.1;
_1 = _6 as isize;
_14.0.4 = _14.1.4 - _14.1.4;
_14.0.3.0 = _13.0 as u8;
_4 = !8441_i16;
_10 = (-99343898769208541935802977849603262135_i128) as f32;
_1 = _5;
_14.0.4 = _14.1.4 - _14.1.4;
_7 = [4_usize,3_usize];
_14.0 = (_10, _14.1.1, _14.1.2, _14.1.3, _14.1.4);
_14.1.3 = (_14.0.3.0, _14.1.2);
RET = _14.0.3.1 ^ _14.1.2;
_8 = _14.0.3.1 <= RET;
RET = !_14.1.3.1;
RET = !_14.1.3.1;
_13.0 = 24921065580640802595524034430481946453_u128 * 242402928192073405116319375852694075966_u128;
_15 = [3_usize,7_usize,0_usize,6_usize,4413046657695505058_usize,4_usize,6_usize,7917644635096214429_usize];
_14.0.3.0 = _14.1.3.0;
Goto(bb4)
}
bb4 = {
_8 = !_14.1.1;
_16 = [_14.0.1,_14.0.1];
_14.0.3 = (_14.1.3.0, _14.1.3.1);
_14.1 = (_14.0.0, _2, _14.0.3.1, _14.0.3, _14.0.4);
_14.1.0 = -_10;
_18 = _1;
_5 = _1;
_14.0.3.1 = !RET;
_19.2 = _14.0.2 >> _14.1.4;
_6 = !10518929267123719180_u64;
RET = '\u{f438d}' as u16;
_4 = 26180_i16 - 13849_i16;
_3 = _16;
_14.1.4 = !_14.0.4;
_3 = [_14.0.1,_8];
_14.0.1 = !_2;
_12 = _14.1.4 as f64;
_14.0.1 = _8 | _8;
_2 = _14.0.3.0 >= _14.0.3.0;
Goto(bb5)
}
bb5 = {
_13 = (101943765866641670826770978975718496393_u128,);
_7 = [13168670407391671017_usize,5727008232421779483_usize];
_14.1.3 = (_14.0.3.0, _14.0.3.1);
_19.3 = (_14.0.3.0, _14.1.3.1);
_14.1.2 = (-532591525_i32) as u16;
_19.0 = _10;
_19.2 = _14.0.3.1 & _14.1.3.1;
_14.0.4 = _8 as i64;
_14.1.3.0 = _14.0.3.0 << _14.0.2;
Goto(bb6)
}
bb6 = {
_14.1.0 = -_10;
_14.0.3.0 = _14.1.3.0 ^ _14.1.3.0;
_14.1.4 = !_14.0.4;
_14.0.2 = !_19.3.1;
_19.4 = _14.1.4;
_3 = _16;
_3 = [_2,_8];
_20 = [_8,_8];
RET = !_14.0.2;
_6 = 4586718424246728478_u64 & 16724612327623094945_u64;
_14.1.2 = !RET;
_19 = (_10, _14.0.1, _14.0.2, _14.1.3, _14.1.4);
_14 = (_19, _19);
_19.0 = -_10;
_14.1.1 = _19.1;
_14.1.4 = _12 as i64;
_22 = [6_usize,0_usize,6_usize,1_usize,6_usize,11621196040870986071_usize,6157622973540378892_usize,2_usize];
_14.0.3 = _14.1.3;
_19.3.1 = _14.0.4 as u16;
_13 = (37197469876388595620407876186975268167_u128,);
_21 = _6 as f64;
_14.0.3.1 = _12 as u16;
_3 = [_8,_19.1];
_27.fld2.1 = '\u{8681a}';
_27.fld2.0 = _5 as i16;
match _13.0 {
0 => bb1,
1 => bb2,
2 => bb7,
37197469876388595620407876186975268167 => bb9,
_ => bb8
}
}
bb7 = {
_13 = (101943765866641670826770978975718496393_u128,);
_7 = [13168670407391671017_usize,5727008232421779483_usize];
_14.1.3 = (_14.0.3.0, _14.0.3.1);
_19.3 = (_14.0.3.0, _14.1.3.1);
_14.1.2 = (-532591525_i32) as u16;
_19.0 = _10;
_19.2 = _14.0.3.1 & _14.1.3.1;
_14.0.4 = _8 as i64;
_14.1.3.0 = _14.0.3.0 << _14.0.2;
Goto(bb6)
}
bb8 = {
_5 = 67_u8 as isize;
_12 = 152_u8 as f64;
RET = 118_i8 as u16;
_7 = [6_usize,1176046861350124859_usize];
_2 = false;
_13.0 = !323708424682010941251134282459310561699_u128;
_14.0.1 = _1 <= _1;
_14.1.3.1 = _14.0.1 as u16;
Goto(bb3)
}
bb9 = {
_27.fld4.fld2 = [3_usize,7549082745850974453_usize,8883792901016945395_usize,2_usize,3746315417869686835_usize,13440238787289024164_usize,4371326048939272971_usize,8338196943054436980_usize];
_27.fld4.fld0.0 = 700244963_i32;
_7 = [10586992758144421421_usize,13876268294705826429_usize];
_14.1 = (_19.0, _2, _14.0.2, _14.0.3, _19.4);
_14 = (_19, _19);
_14.1.3.1 = _13.0 as u16;
_25 = _14.0.3.1 as isize;
RET = _21 as u16;
_14.0.0 = _14.1.3.0 as f32;
_23 = _25 as u128;
_14.1.0 = 66719496681731960427179038226204674534_i128 as f32;
_19.4 = _19.3.0 as i64;
_10 = _14.0.0;
_30 = _13;
_27.fld0 = _21 + _21;
match _13.0 {
0 => bb1,
1 => bb2,
2 => bb6,
3 => bb4,
4 => bb10,
37197469876388595620407876186975268167 => bb12,
_ => bb11
}
}
bb10 = {
_13 = (101943765866641670826770978975718496393_u128,);
_7 = [13168670407391671017_usize,5727008232421779483_usize];
_14.1.3 = (_14.0.3.0, _14.0.3.1);
_19.3 = (_14.0.3.0, _14.1.3.1);
_14.1.2 = (-532591525_i32) as u16;
_19.0 = _10;
_19.2 = _14.0.3.1 & _14.1.3.1;
_14.0.4 = _8 as i64;
_14.1.3.0 = _14.0.3.0 << _14.0.2;
Goto(bb6)
}
bb11 = {
_14.1.0 = -_10;
_14.0.3.0 = _14.1.3.0 ^ _14.1.3.0;
_14.1.4 = !_14.0.4;
_14.0.2 = !_19.3.1;
_19.4 = _14.1.4;
_3 = _16;
_3 = [_2,_8];
_20 = [_8,_8];
RET = !_14.0.2;
_6 = 4586718424246728478_u64 & 16724612327623094945_u64;
_14.1.2 = !RET;
_19 = (_10, _14.0.1, _14.0.2, _14.1.3, _14.1.4);
_14 = (_19, _19);
_19.0 = -_10;
_14.1.1 = _19.1;
_14.1.4 = _12 as i64;
_22 = [6_usize,0_usize,6_usize,1_usize,6_usize,11621196040870986071_usize,6157622973540378892_usize,2_usize];
_14.0.3 = _14.1.3;
_19.3.1 = _14.0.4 as u16;
_13 = (37197469876388595620407876186975268167_u128,);
_21 = _6 as f64;
_14.0.3.1 = _12 as u16;
_3 = [_8,_19.1];
_27.fld2.1 = '\u{8681a}';
_27.fld2.0 = _5 as i16;
match _13.0 {
0 => bb1,
1 => bb2,
2 => bb7,
37197469876388595620407876186975268167 => bb9,
_ => bb8
}
}
bb12 = {
_25 = _27.fld4.fld0.0 as isize;
_14.1.3.0 = _19.3.0 + _14.0.3.0;
Goto(bb13)
}
bb13 = {
_1 = _5 >> _14.1.3.0;
_4 = _27.fld2.0 ^ _27.fld2.0;
_19.3.1 = !_14.0.3.1;
_1 = _25;
_26 = core::ptr::addr_of!(_19.4);
_27.fld2.2 = [_4,_4,_4,_4,_27.fld2.0];
_13 = _30;
_18 = -_1;
_11 = 3763823017_u32;
_27.fld2.2 = [_27.fld2.0,_4,_27.fld2.0,_4,_27.fld2.0];
_27.fld2.1 = '\u{725a5}';
_25 = !_1;
_29 = !_4;
_14.0.3.1 = _14.1.2 * _19.3.1;
_27.fld2.2 = [_27.fld2.0,_27.fld2.0,_29,_4,_27.fld2.0];
_27.fld0 = _14.1.3.0 as f64;
_10 = _14.1.4 as f32;
_20 = [_2,_2];
_14.1 = (_14.0.0, _19.1, _19.3.1, _14.0.3, (*_26));
_27.fld5 = [_19.3.0,_19.3.0,_19.3.0,_14.1.3.0,_14.1.3.0,_19.3.0,_14.1.3.0,_19.3.0];
_27.fld5 = [_14.1.3.0,_14.0.3.0,_19.3.0,_14.0.3.0,_14.1.3.0,_19.3.0,_14.1.3.0,_14.1.3.0];
_27.fld2.0 = _29 + _4;
Goto(bb14)
}
bb14 = {
_36.fld0 = _23 as f64;
_36.fld4.fld0.2 = _10 as f64;
Goto(bb15)
}
bb15 = {
Call(_37 = dump_var(16_usize, 3_usize, Move(_3), 7_usize, Move(_7), 13_usize, Move(_13), 11_usize, Move(_11)), bb16, UnwindUnreachable())
}
bb16 = {
Call(_37 = dump_var(16_usize, 15_usize, Move(_15), 1_usize, Move(_1), 6_usize, Move(_6), 29_usize, Move(_29)), bb17, UnwindUnreachable())
}
bb17 = {
Call(_37 = dump_var(16_usize, 23_usize, Move(_23), 38_usize, _38, 38_usize, _38, 38_usize, _38), bb18, UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn17(mut _1: bool,mut _2: (f32, bool, u16, (u8, u16), i64),mut _3: bool,mut _4: (u8, u16),mut _5: f64,mut _6: i64,mut _7: bool,mut _8: (u8, u16),mut _9: *const f32,mut _10: (f32, bool, u16, (u8, u16), i64),mut _11: u8,mut _12: [u8; 8]) -> [i16; 5] {
mir! {
type RET = [i16; 5];
let _13: u64;
let _14: Adt63;
let _15: (f32, bool, u16, (u8, u16), i64);
let _16: [i16; 5];
let _17: bool;
let _18: (i32, f64, f64);
let _19: f32;
let _20: Adt52;
let _21: f64;
let _22: Adt62;
let _23: *const f32;
let _24: u16;
let _25: *const *const i64;
let _26: (u64, i32, f64);
let _27: [bool; 2];
let _28: Adt64;
let _29: *const f64;
let _30: (u8, u16);
let _31: isize;
let _32: [i128; 6];
let _33: Adt61;
let _34: u128;
let _35: Adt53;
let _36: u32;
let _37: (bool,);
let _38: i32;
let _39: (u128,);
let _40: (((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64)), usize);
let _41: Adt58;
let _42: bool;
let _43: *mut *mut bool;
let _44: f64;
let _45: [u32; 4];
let _46: ();
let _47: ();
{
_2.1 = _10.1 > _3;
_2.3.1 = _2.4 as u16;
_2.1 = _3;
_10.1 = _2.1 == _7;
_7 = _2.1;
_4.1 = _2.3.1 << _2.4;
_3 = _10.1;
_15.0 = _2.0;
RET = [15494_i16,(-14833_i16),(-12844_i16),30110_i16,3282_i16];
_10.4 = -_2.4;
_10.4 = _6;
_15 = (_2.0, _2.1, _4.1, _4, _10.4);
_16 = [11834_i16,(-25468_i16),5748_i16,(-430_i16),24691_i16];
_10.2 = _4.1;
_9 = core::ptr::addr_of!(_2.0);
_15.1 = !_10.1;
_8.0 = _15.3.0;
_15.3.0 = !_8.0;
RET = [(-30202_i16),31374_i16,2256_i16,(-11846_i16),(-17551_i16)];
_10.3.1 = _2.3.1 | _4.1;
_13 = 677750273792460004_u64;
_15.1 = _2.1;
_7 = _10.1;
_17 = !_10.1;
_16 = [20150_i16,(-19780_i16),16505_i16,30298_i16,(-32366_i16)];
match _13 {
0 => bb1,
1 => bb2,
677750273792460004 => bb4,
_ => bb3
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
_10 = (_2.0, _3, _15.2, _15.3, _15.4);
_2.3.1 = !_15.3.1;
_3 = _10.1;
_10.2 = !_15.3.1;
_20.fld2.0 = 103268278317995531110913659626031105402_u128 ^ 227745752403452683848844642389307224599_u128;
_20.fld3 = (_15.1,);
_20.fld3.0 = _15.1 | _17;
_21 = _5 + _5;
Goto(bb5)
}
bb5 = {
_17 = _20.fld3.0;
_16 = [16039_i16,(-22589_i16),(-30994_i16),(-6410_i16),25256_i16];
_2.2 = !_4.1;
_2.3 = _8;
_18.2 = _5 - _21;
_15.3 = (_8.0, _4.1);
_15.4 = !_2.4;
_18.1 = _21 * _21;
_15.4 = _2.4;
_22.fld2.3 = [1484335935706984963_usize,8265839010617644686_usize,10842534852989677779_usize,8895686315610693833_usize,7_usize,0_usize,8068463252927854780_usize,5_usize];
_3 = _17;
_18 = (290202930_i32, _21, _21);
_1 = _7 < _3;
_21 = 63971883951170676676062194236190659325_i128 as f64;
_12 = [_15.3.0,_4.0,_10.3.0,_4.0,_4.0,_15.3.0,_15.3.0,_4.0];
_22.fld4.fld2 = _22.fld2.3;
_22.fld2 = (4660_i16, '\u{9eb58}', _16, _22.fld4.fld2);
_15.1 = !_1;
_15.0 = _2.0;
_20.fld1 = 1035520884_u32 as usize;
_23 = core::ptr::addr_of!(_10.0);
_15.4 = !_2.4;
_10.4 = _6;
Goto(bb6)
}
bb6 = {
(*_23) = _2.0;
_22.fld4.fld0 = (_18.0, _5, _18.2);
_10.0 = _20.fld2.0 as f32;
_20.fld2.0 = 213046567025366945863063240432705687040_u128;
_16 = [_22.fld2.0,_22.fld2.0,_22.fld2.0,_22.fld2.0,_22.fld2.0];
_11 = _15.3.0;
_2.3.1 = !_2.2;
_10.3 = _4;
_27 = [_1,_10.1];
_15.1 = _17;
_4.0 = _15.1 as u8;
_15.1 = _17;
_9 = core::ptr::addr_of!(_15.0);
_20.fld3.0 = _7;
_12 = [_11,_15.3.0,_4.0,_4.0,_4.0,_4.0,_4.0,_4.0];
_15.0 = (-38_i8) as f32;
_22.fld5 = [_11,_4.0,_8.0,_4.0,_4.0,_11,_8.0,_4.0];
_10.3.0 = _13 as u8;
_22.fld2.0 = (-64_isize) as i16;
_26.2 = 9223372036854775807_isize as f64;
_20.fld3.0 = _2.1;
Goto(bb7)
}
bb7 = {
_10.3.0 = _20.fld3.0 as u8;
_4.0 = _15.3.0 * _8.0;
_18.2 = _22.fld4.fld0.1 - _22.fld4.fld0.2;
_27 = [_15.1,_15.1];
_18.0 = _20.fld1 as i32;
_22.fld4.fld0.0 = !_18.0;
_26.1 = !_18.0;
_22.fld2 = (22404_i16, '\u{41003}', _16, _22.fld4.fld2);
_15.3.0 = _2.3.0 | _4.0;
_22.fld2.0 = (-31483_i16) >> _11;
_10.3.1 = _15.2 + _15.2;
_15.3 = (_10.3.0, _2.3.1);
_26.1 = _22.fld4.fld0.0;
_15.0 = _2.0 - (*_23);
_22.fld2 = (16925_i16, '\u{63a}', _16, _22.fld4.fld2);
_21 = _18.1 - _22.fld4.fld0.1;
_15.2 = _4.1 * _10.3.1;
_31 = -(-9223372036854775808_isize);
_2 = _10;
_22.fld1 = 117181787939667816787707705651829074346_i128 + 95124887113532623241026280105719837218_i128;
_15.4 = !_6;
_2.3.0 = _10.3.0;
_10 = (_15.0, _1, _15.2, _4, _6);
Goto(bb8)
}
bb8 = {
_2 = _15;
_18.0 = -_26.1;
_10.2 = !_15.3.1;
_2.2 = !_15.2;
_22.fld4.fld2 = _22.fld2.3;
_18.0 = _22.fld4.fld0.0;
_10.3.1 = _31 as u16;
_15.1 = !_10.1;
_27 = [_2.1,_7];
_24 = _3 as u16;
_20.fld3.0 = _1;
_2.1 = !_17;
_4 = (_2.3.0, _15.2);
_22.fld0 = -_18.1;
Call(_8.1 = core::intrinsics::bswap(_4.1), bb9, UnwindUnreachable())
}
bb9 = {
_10.0 = -_15.0;
_2.1 = !_7;
_4.1 = !_24;
_36 = !1277786999_u32;
_3 = !_7;
_10 = (_2.0, _15.1, _24, _4, _6);
_2.2 = _24;
Call(_18.0 = fn18(_10.3.1, _12, _22.fld2, _17, _22.fld2, _2.1, _18.1, _10, _2, _1, _1), bb10, UnwindUnreachable())
}
bb10 = {
_30.0 = _10.3.0;
_15.3 = (_8.0, _2.2);
_26 = (_13, _18.0, _22.fld0);
_10.3.1 = !_15.2;
_37 = (_7,);
_2.3.1 = _15.3.1;
_20.fld0 = core::ptr::addr_of_mut!(_36);
_15.0 = (*_23);
_6 = -_10.4;
_18.1 = -_18.2;
_31 = _10.3.0 as isize;
_22.fld4.fld1 = core::ptr::addr_of_mut!(_36);
_22.fld1 = 123669950853557274200845863508676608804_i128 | 136979933119318210721538051786664027382_i128;
_3 = _20.fld3.0;
_34 = _20.fld2.0 ^ _20.fld2.0;
_10.3.1 = _10.2 * _4.1;
_40.0.0.0 = _2.0 + _10.0;
_22.fld4 = Adt55 { fld0: _18,fld1: _20.fld0,fld2: _22.fld2.3 };
_23 = core::ptr::addr_of!(_19);
_26.0 = _13;
_22.fld2.1 = '\u{14}';
_22.fld2.0 = 16419_i16 - (-19194_i16);
_29 = core::ptr::addr_of!(_18.2);
Goto(bb11)
}
bb11 = {
_30.1 = 112_i8 as u16;
_9 = core::ptr::addr_of!(_15.0);
_27 = [_3,_20.fld3.0];
_10 = (_40.0.0.0, _3, _2.2, _4, _2.4);
_22.fld2.0 = 50_i8 as i16;
_23 = _9;
_34 = !_20.fld2.0;
_40.0.0.3.1 = _5 as u16;
_2.3 = (_10.3.0, _15.3.1);
_38 = !_22.fld4.fld0.0;
_1 = _11 <= _4.0;
_40.0.0.2 = !_15.3.1;
_20.fld0 = _22.fld4.fld1;
_41.fld2 = _40.0.0.0 - _10.0;
_41.fld5.2 = [_36,_36,_36,_36];
_40.0.1.1 = _1 ^ _10.1;
_41.fld1 = _22.fld4.fld1;
Goto(bb12)
}
bb12 = {
_26 = (_13, _38, (*_29));
(*_9) = _10.0 - _41.fld2;
_37 = _20.fld3;
_20.fld2 = (_34,);
_42 = !_15.1;
(*_23) = _40.0.0.0;
_39 = (_20.fld2.0,);
_20 = Adt52 { fld0: _22.fld4.fld1,fld1: 2_usize,fld2: _39,fld3: _37 };
_15.0 = _20.fld1 as f32;
match _20.fld1 {
0 => bb9,
1 => bb13,
2 => bb16,
_ => bb15
}
}
bb13 = {
_30.1 = 112_i8 as u16;
_9 = core::ptr::addr_of!(_15.0);
_27 = [_3,_20.fld3.0];
_10 = (_40.0.0.0, _3, _2.2, _4, _2.4);
_22.fld2.0 = 50_i8 as i16;
_23 = _9;
_34 = !_20.fld2.0;
_40.0.0.3.1 = _5 as u16;
_2.3 = (_10.3.0, _15.3.1);
_38 = !_22.fld4.fld0.0;
_1 = _11 <= _4.0;
_40.0.0.2 = !_15.3.1;
_20.fld0 = _22.fld4.fld1;
_41.fld2 = _40.0.0.0 - _10.0;
_41.fld5.2 = [_36,_36,_36,_36];
_40.0.1.1 = _1 ^ _10.1;
_41.fld1 = _22.fld4.fld1;
Goto(bb12)
}
bb14 = {
Return()
}
bb15 = {
_10.0 = -_15.0;
_2.1 = !_7;
_4.1 = !_24;
_36 = !1277786999_u32;
_3 = !_7;
_10 = (_2.0, _15.1, _24, _4, _6);
_2.2 = _24;
Call(_18.0 = fn18(_10.3.1, _12, _22.fld2, _17, _22.fld2, _2.1, _18.1, _10, _2, _1, _1), bb10, UnwindUnreachable())
}
bb16 = {
_38 = -_26.1;
_40.0.0.3 = _4;
_15.1 = _1 <= _40.0.1.1;
_40.0.0 = (_41.fld2, _17, _15.3.1, _10.3, _10.4);
_8.1 = _15.3.1;
_20.fld2.0 = !_39.0;
_40.0.1.2 = _10.3.1;
_30 = (_15.3.0, _40.0.0.2);
_41.fld2 = (*_23) + (*_9);
_20.fld2.0 = _20.fld1 as u128;
_39.0 = _4.1 as u128;
RET = [_22.fld2.0,_22.fld2.0,_22.fld2.0,_22.fld2.0,_22.fld2.0];
_10.1 = _37.0;
Goto(bb17)
}
bb17 = {
Call(_46 = dump_var(17_usize, 12_usize, Move(_12), 3_usize, Move(_3), 1_usize, Move(_1), 6_usize, Move(_6)), bb18, UnwindUnreachable())
}
bb18 = {
Call(_46 = dump_var(17_usize, 39_usize, Move(_39), 17_usize, Move(_17), 11_usize, Move(_11), 37_usize, Move(_37)), bb19, UnwindUnreachable())
}
bb19 = {
Call(_46 = dump_var(17_usize, 42_usize, Move(_42), 38_usize, Move(_38), 47_usize, _47, 47_usize, _47), bb20, UnwindUnreachable())
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn18(mut _1: u16,mut _2: [u8; 8],mut _3: (i16, char, [i16; 5], [usize; 8]),mut _4: bool,mut _5: (i16, char, [i16; 5], [usize; 8]),mut _6: bool,mut _7: f64,mut _8: (f32, bool, u16, (u8, u16), i64),mut _9: (f32, bool, u16, (u8, u16), i64),mut _10: bool,mut _11: bool) -> i32 {
mir! {
type RET = i32;
let _12: ();
let _13: ();
{
RET = _10 as i32;
_3.0 = -_5.0;
_2 = [_8.3.0,_8.3.0,_9.3.0,_8.3.0,_8.3.0,_9.3.0,_9.3.0,_9.3.0];
_11 = _4;
Goto(bb1)
}
bb1 = {
Call(_12 = dump_var(18_usize, 4_usize, Move(_4), 6_usize, Move(_6), 1_usize, Move(_1), 5_usize, Move(_5)), bb2, UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
pub fn main() {
                fn0(std::hint::black_box(true), std::hint::black_box('\u{d636e}'), std::hint::black_box((-9223372036854775808_isize)), std::hint::black_box((-127_i8)), std::hint::black_box(14441_i16), std::hint::black_box(1567129911_i32), std::hint::black_box((-3782022225449680223_i64)), std::hint::black_box(135597903192961544730491288027719979996_i128), std::hint::black_box(9757302109620101601_usize), std::hint::black_box(150_u8), std::hint::black_box(14171_u16), std::hint::black_box(1833315606_u32), std::hint::black_box(16854510674273136065_u64), std::hint::black_box(116192942399644253855536643328747291812_u128));
                
            }
#[derive(Debug)]
pub enum Adt49 {
Variant0{
fld0: *mut i16,
fld1: *mut *const i32,
fld2: *const *const f64,
fld3: (u128,),
fld4: (u64, *const i32, *mut *const i32),
fld5: u64,
fld6: [i128; 6],
fld7: *const [usize; 8],

},
Variant1{
fld0: u8,
fld1: f32,
fld2: i64,

},
Variant2{
fld0: f32,
fld1: u64,
fld2: *const f64,
fld3: *mut bool,
fld4: (u128,),
fld5: *const i32,

},
Variant3{
fld0: *mut u32,
fld1: [u8; 8],
fld2: usize,
fld3: i8,
fld4: u128,
fld5: i32,
fld6: i64,

}}
#[derive(Debug,Copy,Clone)]
pub enum Adt50 {
Variant0{
fld0: *const f32,
fld1: (u64, i32, f64),
fld2: (bool,),
fld3: *const u8,
fld4: [usize; 8],
fld5: ([u8; 8], *mut bool, [u32; 4], *const i64),

},
Variant1{
fld0: [i16; 5],
fld1: [i128; 6],
fld2: isize,
fld3: *mut *const i32,
fld4: i16,
fld5: [usize; 2],

},
Variant2{
fld0: [u32; 4],
fld1: *mut bool,
fld2: f64,
fld3: (u64, *const i32, *mut *const i32),
fld4: *const f32,

},
Variant3{
fld0: *const i32,
fld1: [usize; 2],

}}
#[derive(Debug,Copy,Clone)]
pub enum Adt51 {
Variant0{
fld0: f32,
fld1: Adt50,
fld2: f64,
fld3: *const f32,
fld4: *const *const i64,

},
Variant1{
fld0: *const f32,
fld1: *mut bool,

}}
#[derive(Debug,Copy,Clone)]
pub struct Adt52 {
fld0: *mut u32,
fld1: usize,
fld2: (u128,),
fld3: (bool,),
}
#[derive(Debug,Copy,Clone)]
pub enum Adt53 {
Variant0{
fld0: u128,
fld1: *const *const f64,
fld2: u8,
fld3: ([u8; 8], *mut bool, [u32; 4], *const i64),
fld4: (i32, f64, f64),

},
Variant1{
fld0: f32,
fld1: *mut *const i32,
fld2: [i128; 6],

},
Variant2{
fld0: (f32, bool, u16, (u8, u16), i64),
fld1: ((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64)),

}}
#[derive(Debug,Copy,Clone)]
pub enum Adt54 {
Variant0{
fld0: [u128; 2],

},
Variant1{
fld0: Adt53,
fld1: (((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64)), usize),
fld2: [usize; 8],

}}
#[derive(Debug,Copy,Clone)]
pub struct Adt55 {
fld0: (i32, f64, f64),
fld1: *mut u32,
fld2: [usize; 8],
}
#[derive(Debug,Copy,Clone)]
pub enum Adt56 {
Variant0{
fld0: u16,
fld1: [i16; 5],
fld2: usize,
fld3: *const *const f64,

},
Variant1{
fld0: (u64, *const i32, *mut *const i32),
fld1: u16,

},
Variant2{
fld0: *mut *const i32,
fld1: *const i32,
fld2: (((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64)), usize),
fld3: Adt51,

},
Variant3{
fld0: *mut *const i32,
fld1: Adt52,
fld2: (u8, u16),
fld3: (((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64)), usize),

}}
#[derive(Debug,Copy,Clone)]
pub enum Adt57 {
Variant0{
fld0: *mut i16,
fld1: u32,
fld2: isize,
fld3: (f32, bool, u16, (u8, u16), i64),
fld4: u16,
fld5: i32,
fld6: *const i64,

},
Variant1{
fld0: [i16; 5],
fld1: ([u8; 8], *mut bool, [u32; 4], *const i64),
fld2: *mut *mut bool,
fld3: *const i32,
fld4: *const [usize; 8],

},
Variant2{
fld0: *mut bool,
fld1: u64,
fld2: f32,
fld3: [usize; 2],
fld4: i16,

}}
#[derive(Debug,Copy,Clone)]
pub struct Adt58 {
fld0: bool,
fld1: *mut u32,
fld2: f32,
fld3: [usize; 8],
fld4: *const f32,
fld5: ([u8; 8], *mut bool, [u32; 4], *const i64),
}
#[derive(Debug,Copy,Clone)]
pub enum Adt59 {
Variant0{
fld0: ([u8; 8], *mut bool, [u32; 4], *const i64),
fld1: f32,
fld2: *mut *mut bool,
fld3: Adt55,
fld4: [u32; 4],
fld5: [i128; 6],

},
Variant1{
fld0: f64,
fld1: ([u8; 8], *mut bool, [u32; 4], *const i64),
fld2: Adt54,
fld3: Adt55,

}}
#[derive(Debug)]
pub struct Adt60 {
fld0: (u64, i32, f64),
fld1: Adt56,
fld2: Adt55,
}
#[derive(Debug)]
pub enum Adt61 {
Variant0{
fld0: i8,

},
Variant1{
fld0: Adt60,
fld1: char,
fld2: f32,
fld3: Adt51,

}}
#[derive(Debug,Copy,Clone)]
pub struct Adt62 {
fld0: f64,
fld1: i128,
fld2: (i16, char, [i16; 5], [usize; 8]),
fld3: *mut *mut bool,
fld4: Adt55,
fld5: [u8; 8],
}
#[derive(Debug)]
pub enum Adt63 {
Variant0{
fld0: Adt54,
fld1: *const *const f64,
fld2: i64,
fld3: i16,

},
Variant1{
fld0: Adt53,
fld1: char,
fld2: [u8; 8],
fld3: *mut u32,
fld4: u128,
fld5: u32,
fld6: Adt62,

}}
#[derive(Debug,Copy,Clone)]
pub enum Adt64 {
Variant0{
fld0: bool,
fld1: (i32, f64, f64),
fld2: [bool; 2],
fld3: [u8; 8],
fld4: *const f64,

},
Variant1{
fld0: [u32; 4],
fld1: *const u8,
fld2: isize,
fld3: *const [usize; 8],
fld4: f64,
fld5: Adt54,
fld6: *mut *const i32,
fld7: Adt52,

}}
#[derive(Debug)]
pub enum Adt65 {
Variant0{
fld0: *const f64,
fld1: u64,

},
Variant1{
fld0: f32,
fld1: Adt63,
fld2: ((f32, bool, u16, (u8, u16), i64), (f32, bool, u16, (u8, u16), i64)),
fld3: *const [usize; 8],

},
Variant2{
fld0: bool,
fld1: *mut *mut bool,
fld2: u8,
fld3: *mut bool,
fld4: Adt58,
fld5: [usize; 2],

}}

