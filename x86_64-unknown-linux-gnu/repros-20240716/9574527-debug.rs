#![recursion_limit = "1024"]
    #![feature(custom_mir, core_intrinsics, const_hash)]
    #![allow(unused_parens, unused_assignments, overflowing_literals)]
    extern crate core;
    use core::intrinsics::mir::*;

    use std::fmt::Debug;

    #[inline(never)]
    fn dump_var(
        f: usize,
        var0: usize, val0: impl Debug,
        var1: usize, val1: impl Debug,
        var2: usize, val2: impl Debug,
        var3: usize, val3: impl Debug,
    ) {
        println!("fn{f}:_{var0} = {val0:?}\n_{var1} = {val1:?}\n_{var2} = {val2:?}\n_{var3} = {val3:?}");
    }
    #[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn0(mut _1: bool,mut _2: char,mut _3: u32,mut _4: i8,mut _5: i16,mut _6: u128,mut _7: u64,mut _8: i128,mut _9: u8) -> u16 {
mir! {
type RET = u16;
let _10: f64;
let _11: u64;
let _12: u32;
let _13: &'static &'static isize;
let _14: i16;
let _15: f64;
let _16: *const *const (i8, [u32; 2], [i32; 7], u32);
let _17: [bool; 6];
let _18: *mut *const i128;
let _19: i64;
let _20: (Adt55, *const (i8,));
let _21: bool;
let _22: (usize, &'static bool);
let _23: i32;
let _24: [i64; 6];
let _25: isize;
let _26: (&'static mut (*mut i16, usize, char), *mut i16);
let _27: f64;
let _28: &'static mut (*mut i16, usize, char);
let _29: ();
let _30: ();
{
_4 = (-89_i8);
Goto(bb1)
}
bb1 = {
_9 = 169_u8 << _4;
_2 = '\u{e542c}';
RET = !27797_u16;
_3 = 9223372036854775807_isize as u32;
_9 = 230_u8 ^ 55_u8;
_3 = _4 as u32;
_8 = -(-95827131703215384328661361843567591306_i128);
_7 = 16536441350261511595_u64;
_5 = -7046_i16;
_7 = (-683553860191204402_i64) as u64;
RET = !44394_u16;
_8 = (-17578805966654549052043897451052572744_i128) ^ 88197343668139581957728478016979963109_i128;
_1 = false;
_14 = !_5;
_15 = _3 as f64;
_8 = (-18919654921870096677968042107393010610_i128) ^ (-43711251219659857847894546176597155777_i128);
_11 = _7 + _7;
_6 = 38183007772241801600297132224836121900_u128;
_1 = false & false;
_10 = _15;
_8 = !162945306605810147605620363354491650212_i128;
Call(_11 = fn1(RET, _6, _10, RET, RET, _2, _14, _2, _8, _7, _10, _1), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_12 = _3;
_4 = _5 as i8;
_8 = (-86192203954516202968562024879370386257_i128);
_14 = _5 * _5;
_14 = !_5;
_15 = _10 - _10;
_6 = !80486751153455590150001950042784219858_u128;
_14 = _5 >> _11;
_3 = _12;
_2 = '\u{50d8b}';
_1 = _11 == _11;
_12 = _3 << _14;
_11 = 2865945316484847021_i64 as u64;
RET = 62481_u16;
_15 = -_10;
_2 = '\u{d28cb}';
_10 = 1399536257_i32 as f64;
_17 = [_1,_1,_1,_1,_1,_1];
_8 = _12 as i128;
_12 = _3 - _3;
_19 = 7112107013718487289_i64 | 2580396655878766715_i64;
Goto(bb3)
}
bb3 = {
_7 = _12 as u64;
_22.0 = 1_usize - 2_usize;
_11 = _7 + _7;
_11 = _7 + _7;
_15 = _8 as f64;
_17 = [_1,_1,_1,_1,_1,_1];
_12 = _15 as u32;
_9 = 5_u8 ^ 203_u8;
_11 = _4 as u64;
_7 = _6 as u64;
_23 = (-1276288398_i32) & (-1867394484_i32);
_26.1 = core::ptr::addr_of_mut!(_5);
_25 = -(-9223372036854775808_isize);
_22.1 = &_1;
_8 = _15 as i128;
_27 = -_15;
Goto(bb4)
}
bb4 = {
_21 = _1 ^ _1;
_22.1 = &_21;
_5 = _14 ^ _14;
RET = _25 as u16;
_8 = 133142528346746092694925884712504850111_i128 ^ 99481620071447018287720491118623757068_i128;
_27 = -_15;
_8 = 110336429396932896170008635355526946390_i128 * 45341387174445125985581731464389580685_i128;
_2 = '\u{81f0e}';
_21 = _1 ^ _1;
_14 = _5 | _5;
_12 = _3;
_11 = _7;
_22.0 = RET as usize;
_5 = -_14;
_10 = _15 - _27;
_5 = _14 ^ _14;
_22.1 = &_1;
_19 = _23 as i64;
_14 = _4 as i16;
_1 = _10 == _10;
_1 = _21;
_25 = (-55_isize) >> _5;
_26.1 = core::ptr::addr_of_mut!(_5);
_15 = _10 + _27;
RET = 44766_u16 >> _5;
Goto(bb5)
}
bb5 = {
Call(_29 = dump_var(0_usize, 17_usize, Move(_17), 8_usize, Move(_8), 19_usize, Move(_19), 21_usize, Move(_21)), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
Call(_29 = dump_var(0_usize, 3_usize, Move(_3), 12_usize, Move(_12), 7_usize, Move(_7), 6_usize, Move(_6)), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn1(mut _1: u16,mut _2: u128,mut _3: f64,mut _4: u16,mut _5: u16,mut _6: char,mut _7: i16,mut _8: char,mut _9: i128,mut _10: u64,mut _11: f64,mut _12: bool) -> u64 {
mir! {
type RET = u64;
let _13: Adt55;
let _14: (Adt51, &'static i64, *const Adt28);
let _15: [i32; 2];
let _16: Adt51;
let _17: (&'static i64, u16, (i8,));
let _18: [i32; 2];
let _19: *mut &'static i64;
let _20: &'static mut (*mut i16, usize, char);
let _21: isize;
let _22: &'static mut i16;
let _23: usize;
let _24: bool;
let _25: *const i128;
let _26: (*mut i16, usize, char);
let _27: char;
let _28: char;
let _29: u64;
let _30: bool;
let _31: u16;
let _32: isize;
let _33: (*const (i8, [u32; 2], [i32; 7], u32), [u8; 7]);
let _34: [i16; 7];
let _35: isize;
let _36: ();
let _37: ();
{
_10 = 11665112208761209079_u64;
_5 = _1 ^ _1;
_10 = 883869950002461995_u64 & 17528109256980575990_u64;
_3 = _11;
_10 = 11401259455835241990_u64 ^ 7696732169770483145_u64;
RET = !_10;
_10 = RET >> _5;
_8 = _6;
RET = !_10;
_7 = -21225_i16;
_3 = 193_u8 as f64;
_12 = true;
_3 = _11;
_10 = RET + RET;
_7 = (-13301_i16) & (-30215_i16);
RET = _10;
_3 = _11;
Goto(bb1)
}
bb1 = {
_11 = _3;
_10 = 26_u8 as u64;
_14.0.fld0.2 = !_12;
Call(_15 = fn2(_6, _2, _14.0.fld0.2, RET), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_14.0.fld4 = [(-580436876_i32),(-1374896651_i32)];
RET = !_10;
_14.0.fld4 = _15;
_4 = _5;
_14.0.fld0.0 = _3;
_1 = !_4;
_16.fld0.1 = !361260509143912220_usize;
_14.0.fld1 = [_2,_2,_2,_2,_2];
_14.0.fld3 = 2967068931_u32 ^ 4237076206_u32;
_14.0.fld6 = core::ptr::addr_of_mut!(_7);
_16.fld0.0 = _14.0.fld3 as f64;
match _2 {
0 => bb3,
1 => bb4,
38183007772241801600297132224836121900 => bb6,
_ => bb5
}
}
bb3 = {
_11 = _3;
_10 = 26_u8 as u64;
_14.0.fld0.2 = !_12;
Call(_15 = fn2(_6, _2, _14.0.fld0.2, RET), ReturnTo(bb2), UnwindUnreachable())
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
_17.2 = (58_i8,);
_16.fld3 = _14.0.fld3 << _16.fld0.1;
_16.fld6 = core::ptr::addr_of_mut!(_7);
_14.0.fld1 = [_2,_2,_2,_2,_2];
_18 = _15;
_16.fld0 = (_14.0.fld0.0, 11204008396105611642_usize, _12);
_18 = _14.0.fld4;
_14.0.fld3 = _16.fld3;
_14.0.fld1 = [_2,_2,_2,_2,_2];
_16.fld1 = _14.0.fld1;
_17.1 = _4;
_14.0.fld3 = !_16.fld3;
_16.fld2 = Adt28::Variant0 { fld0: _16.fld0.2,fld1: _8,fld2: _16.fld0,fld3: 1272894381_i32,fld4: _14.0.fld0.0 };
_4 = _1 * _1;
_17.2.0 = 32_i8;
_21 = 5422374502205907482_i64 as isize;
_21 = (-3_isize) + (-9223372036854775808_isize);
_14.2 = core::ptr::addr_of!(_14.0.fld2);
Goto(bb7)
}
bb7 = {
_14.0.fld0.1 = _16.fld0.1 | _16.fld0.1;
_16.fld0.0 = -_3;
_16.fld4 = _15;
_16.fld6 = core::ptr::addr_of_mut!(_7);
_16.fld6 = core::ptr::addr_of_mut!(_7);
_21 = (-9223372036854775808_isize);
_14.0.fld3 = !_16.fld3;
Goto(bb8)
}
bb8 = {
_9 = (-15079370143014150392538555929160103402_i128) * (-2305826082844700137759997391892881791_i128);
_8 = Field::<char>(Variant(_16.fld2, 0), 1);
match _16.fld0.1 {
0 => bb1,
1 => bb6,
2 => bb9,
3 => bb10,
4 => bb11,
5 => bb12,
11204008396105611642 => bb14,
_ => bb13
}
}
bb9 = {
_14.0.fld0.1 = _16.fld0.1 | _16.fld0.1;
_16.fld0.0 = -_3;
_16.fld4 = _15;
_16.fld6 = core::ptr::addr_of_mut!(_7);
_16.fld6 = core::ptr::addr_of_mut!(_7);
_21 = (-9223372036854775808_isize);
_14.0.fld3 = !_16.fld3;
Goto(bb8)
}
bb10 = {
_14.0.fld4 = [(-580436876_i32),(-1374896651_i32)];
RET = !_10;
_14.0.fld4 = _15;
_4 = _5;
_14.0.fld0.0 = _3;
_1 = !_4;
_16.fld0.1 = !361260509143912220_usize;
_14.0.fld1 = [_2,_2,_2,_2,_2];
_14.0.fld3 = 2967068931_u32 ^ 4237076206_u32;
_14.0.fld6 = core::ptr::addr_of_mut!(_7);
_16.fld0.0 = _14.0.fld3 as f64;
match _2 {
0 => bb3,
1 => bb4,
38183007772241801600297132224836121900 => bb6,
_ => bb5
}
}
bb11 = {
_11 = _3;
_10 = 26_u8 as u64;
_14.0.fld0.2 = !_12;
Call(_15 = fn2(_6, _2, _14.0.fld0.2, RET), ReturnTo(bb2), UnwindUnreachable())
}
bb12 = {
Return()
}
bb13 = {
_11 = _3;
_10 = 26_u8 as u64;
_14.0.fld0.2 = !_12;
Call(_15 = fn2(_6, _2, _14.0.fld0.2, RET), ReturnTo(bb2), UnwindUnreachable())
}
bb14 = {
_14.0.fld4 = [(-975888307_i32),46111682_i32];
place!(Field::<(f64, usize, bool)>(Variant(_16.fld2, 0), 2)).2 = !_16.fld0.2;
RET = _10 ^ _10;
place!(Field::<(f64, usize, bool)>(Variant(_16.fld2, 0), 2)).0 = Field::<f64>(Variant(_16.fld2, 0), 4) + _14.0.fld0.0;
_17.2 = ((-114_i8),);
place!(Field::<(f64, usize, bool)>(Variant(_16.fld2, 0), 2)).1 = _16.fld0.1 << _14.0.fld0.1;
_16.fld0.1 = (-568824244_i32) as usize;
Goto(bb15)
}
bb15 = {
_17.1 = _5 | _4;
_14.0.fld2 = Adt28::Variant0 { fld0: Field::<bool>(Variant(_16.fld2, 0), 0),fld1: _6,fld2: _14.0.fld0,fld3: (-807306681_i32),fld4: Field::<(f64, usize, bool)>(Variant(_16.fld2, 0), 2).0 };
_17.2 = (123_i8,);
place!(Field::<bool>(Variant(_16.fld2, 0), 0)) = _14.0.fld0.2;
_22 = &mut _7;
_14.0.fld2 = Adt28::Variant0 { fld0: _16.fld0.2,fld1: Field::<char>(Variant(_16.fld2, 0), 1),fld2: Field::<(f64, usize, bool)>(Variant(_16.fld2, 0), 2),fld3: 2104666364_i32,fld4: Field::<(f64, usize, bool)>(Variant(_16.fld2, 0), 2).0 };
_14.0.fld0.1 = 227_u8 as usize;
(*_22) = _14.0.fld3 as i16;
place!(Field::<i32>(Variant(_14.0.fld2, 0), 3)) = _2 as i32;
(*_22) = (-24846_i16);
(*_22) = 16059_i16 | (-16356_i16);
_11 = Field::<(f64, usize, bool)>(Variant(_16.fld2, 0), 2).0 + Field::<(f64, usize, bool)>(Variant(_14.0.fld2, 0), 2).0;
place!(Field::<(f64, usize, bool)>(Variant(_14.0.fld2, 0), 2)).2 = !_16.fld0.2;
_16.fld2 = Adt28::Variant0 { fld0: _14.0.fld0.2,fld1: _6,fld2: _16.fld0,fld3: Field::<i32>(Variant(_14.0.fld2, 0), 3),fld4: _3 };
match _2 {
0 => bb16,
1 => bb17,
38183007772241801600297132224836121900 => bb19,
_ => bb18
}
}
bb16 = {
_11 = _3;
_10 = 26_u8 as u64;
_14.0.fld0.2 = !_12;
Call(_15 = fn2(_6, _2, _14.0.fld0.2, RET), ReturnTo(bb2), UnwindUnreachable())
}
bb17 = {
_14.0.fld4 = [(-580436876_i32),(-1374896651_i32)];
RET = !_10;
_14.0.fld4 = _15;
_4 = _5;
_14.0.fld0.0 = _3;
_1 = !_4;
_16.fld0.1 = !361260509143912220_usize;
_14.0.fld1 = [_2,_2,_2,_2,_2];
_14.0.fld3 = 2967068931_u32 ^ 4237076206_u32;
_14.0.fld6 = core::ptr::addr_of_mut!(_7);
_16.fld0.0 = _14.0.fld3 as f64;
match _2 {
0 => bb3,
1 => bb4,
38183007772241801600297132224836121900 => bb6,
_ => bb5
}
}
bb18 = {
Return()
}
bb19 = {
_3 = _17.1 as f64;
place!(Field::<f64>(Variant(_14.0.fld2, 0), 4)) = _3 + Field::<(f64, usize, bool)>(Variant(_14.0.fld2, 0), 2).0;
_14.0.fld0.2 = (*_22) == (*_22);
_17.1 = _1 >> (*_22);
_16.fld0 = Field::<(f64, usize, bool)>(Variant(_16.fld2, 0), 2);
place!(Field::<i32>(Variant(_14.0.fld2, 0), 3)) = _17.2.0 as i32;
_26.1 = Field::<(f64, usize, bool)>(Variant(_14.0.fld2, 0), 2).1 - _16.fld0.1;
(*_22) = Field::<f64>(Variant(_14.0.fld2, 0), 4) as i16;
place!(Field::<(f64, usize, bool)>(Variant(_14.0.fld2, 0), 2)).2 = _14.0.fld0.2;
_14.0.fld0.2 = !Field::<(f64, usize, bool)>(Variant(_14.0.fld2, 0), 2).2;
_26.0 = core::ptr::addr_of_mut!((*_22));
(*_22) = !(-18066_i16);
_16.fld2 = _14.0.fld2;
_16.fld2 = _14.0.fld2;
_10 = 156_u8 as u64;
_24 = _16.fld0.2;
place!(Field::<(f64, usize, bool)>(Variant(_16.fld2, 0), 2)).0 = Field::<f64>(Variant(_14.0.fld2, 0), 4) - _3;
place!(Field::<i32>(Variant(_16.fld2, 0), 3)) = Field::<i32>(Variant(_14.0.fld2, 0), 3);
_21 = 9223372036854775807_isize << _16.fld3;
_29 = _10 << Field::<(f64, usize, bool)>(Variant(_16.fld2, 0), 2).1;
(*_22) = Field::<i32>(Variant(_16.fld2, 0), 3) as i16;
place!(Field::<f64>(Variant(_14.0.fld2, 0), 4)) = -Field::<(f64, usize, bool)>(Variant(_16.fld2, 0), 2).0;
Goto(bb20)
}
bb20 = {
_1 = _17.1 << (*_22);
_4 = _17.1 * _17.1;
RET = _29 >> Field::<(f64, usize, bool)>(Variant(_14.0.fld2, 0), 2).1;
_26.2 = Field::<char>(Variant(_14.0.fld2, 0), 1);
place!(Field::<(f64, usize, bool)>(Variant(_14.0.fld2, 0), 2)).2 = Field::<bool>(Variant(_14.0.fld2, 0), 0) & _14.0.fld0.2;
_20 = &mut _26;
(*_20) = (Move(_14.0.fld6), Field::<(f64, usize, bool)>(Variant(_14.0.fld2, 0), 2).1, _8);
(*_20).1 = _2 as usize;
(*_20).1 = Field::<(f64, usize, bool)>(Variant(_16.fld2, 0), 2).1 * Field::<(f64, usize, bool)>(Variant(_16.fld2, 0), 2).1;
_16.fld0 = _14.0.fld0;
Goto(bb21)
}
bb21 = {
Call(_36 = dump_var(1_usize, 5_usize, Move(_5), 4_usize, Move(_4), 8_usize, Move(_8), 6_usize, Move(_6)), ReturnTo(bb22), UnwindUnreachable())
}
bb22 = {
Call(_36 = dump_var(1_usize, 21_usize, Move(_21), 9_usize, Move(_9), 7_usize, Move(_7), 37_usize, _37), ReturnTo(bb23), UnwindUnreachable())
}
bb23 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn2(mut _1: char,mut _2: u128,mut _3: bool,mut _4: u64) -> [i32; 2] {
mir! {
type RET = [i32; 2];
let _5: isize;
let _6: isize;
let _7: [i128; 8];
let _8: [i32; 2];
let _9: f32;
let _10: &'static mut (*mut i16, usize, char);
let _11: &'static (i8,);
let _12: [u64; 5];
let _13: *const [u128; 5];
let _14: Adt64;
let _15: *const &'static *const (i8, [u32; 2], [i32; 7], u32);
let _16: isize;
let _17: &'static mut i16;
let _18: f32;
let _19: f32;
let _20: &'static mut &'static mut (*mut i16, usize, char);
let _21: char;
let _22: Adt84;
let _23: *mut i16;
let _24: *mut i16;
let _25: [u8; 1];
let _26: u32;
let _27: *mut &'static i64;
let _28: (*mut i16, usize, char);
let _29: u64;
let _30: &'static [u8; 1];
let _31: Adt28;
let _32: i16;
let _33: char;
let _34: f64;
let _35: &'static &'static isize;
let _36: Adt64;
let _37: &'static usize;
let _38: &'static bool;
let _39: char;
let _40: Adt28;
let _41: i64;
let _42: f64;
let _43: i8;
let _44: u128;
let _45: i128;
let _46: f32;
let _47: isize;
let _48: u64;
let _49: &'static mut (*mut i16, usize, char);
let _50: bool;
let _51: (i8,);
let _52: isize;
let _53: &'static mut &'static mut isize;
let _54: (&'static mut (*mut i16, usize, char), *mut i16);
let _55: char;
let _56: ((*mut i16, u64), bool, [u32; 2]);
let _57: bool;
let _58: &'static mut (*mut i16, usize, char);
let _59: isize;
let _60: &'static mut isize;
let _61: *const &'static usize;
let _62: bool;
let _63: bool;
let _64: usize;
let _65: [i32; 2];
let _66: ([u8; 1],);
let _67: isize;
let _68: (*const (i8, [u32; 2], [i32; 7], u32), [u8; 7]);
let _69: (Adt55, *const (i8,));
let _70: i32;
let _71: f64;
let _72: isize;
let _73: u16;
let _74: char;
let _75: [u128; 5];
let _76: [i32; 2];
let _77: *mut (&'static i64, u16, (i8,));
let _78: *const *const (i8, [u32; 2], [i32; 7], u32);
let _79: isize;
let _80: Adt64;
let _81: [i64; 4];
let _82: *const (i8, [u32; 2], [i32; 7], u32);
let _83: &'static bool;
let _84: ();
let _85: ();
{
_3 = _1 >= _1;
RET = [905420731_i32,1629202962_i32];
_2 = !304368901691643057432966344846905757146_u128;
_4 = !13495678243932785911_u64;
_2 = 275184281149367033309161169720169795398_u128 * 202652951471805243927784336921382262999_u128;
Call(_2 = fn3(_1, _3, RET), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_5 = _1 as isize;
_5 = (-9223372036854775808_isize) >> _4;
_6 = !_5;
_4 = 169396413043167935_u64 ^ 827849640267675428_u64;
_2 = _1 as u128;
RET = [1663446089_i32,1866134387_i32];
_4 = !13107858732334095229_u64;
_6 = !_5;
_7 = [(-58849241249718357215719654023970740319_i128),63645343769675223154829530754278819928_i128,(-109386564184475575535780324474348076218_i128),(-92275305349880331813594074195093793380_i128),(-50500798519789563202847775682662158493_i128),(-127520532242984536138935836863294553657_i128),(-158152403468727691811777439728336434056_i128),50288439809836738414344398625004921964_i128];
_7 = [97366595222833566603652497447512156481_i128,164211141914867070558642681893946012406_i128,109305538426498422785514256645250939345_i128,(-119622677629318258072776407751517093087_i128),(-89301744417243732993997573797816227094_i128),62634193115487229092156274098373825141_i128,105459177296910527327815236112317864487_i128,(-2015539689357979215708574411093105477_i128)];
_5 = _6 + _6;
_4 = 14967173872501080405_u64;
_1 = '\u{dd55e}';
_9 = 15267_i16 as f32;
_8 = [(-211544952_i32),1791036989_i32];
_3 = _6 > _5;
_4 = 63379913866645560_u64;
_6 = !_5;
_6 = -_5;
_6 = _5 * _5;
_7 = [81926892111156922927390714300370098372_i128,(-54688970769120670126913943131941554864_i128),(-20498014104978846741624949014554853340_i128),81833519321441904063543852675602384639_i128,(-50894422139840636556129499081754193895_i128),99074533862980862740169793405024366005_i128,(-139289384477379863699643341783199021347_i128),(-31426211239786654205242522877754787690_i128)];
_12 = [_4,_4,_4,_4,_4];
Goto(bb2)
}
bb2 = {
_3 = false ^ true;
_12 = [_4,_4,_4,_4,_4];
_7 = [(-76331197363606171552376329399949963732_i128),11153354456492540120130489285007398120_i128,26439341532563199115142366283885340313_i128,23792473681862474286658900259380967663_i128,9424117564324031663995578881735338349_i128,36848376090107854819118697549256049493_i128,47781436728431323554916159669677406354_i128,(-136560185373049757115968507235710544031_i128)];
_1 = '\u{c0368}';
_8 = [1473511794_i32,(-1957589215_i32)];
_12 = [_4,_4,_4,_4,_4];
_2 = 99309095325476490618606969468492020744_u128;
match _2 {
0 => bb1,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
99309095325476490618606969468492020744 => bb8,
_ => bb7
}
}
bb3 = {
_5 = _1 as isize;
_5 = (-9223372036854775808_isize) >> _4;
_6 = !_5;
_4 = 169396413043167935_u64 ^ 827849640267675428_u64;
_2 = _1 as u128;
RET = [1663446089_i32,1866134387_i32];
_4 = !13107858732334095229_u64;
_6 = !_5;
_7 = [(-58849241249718357215719654023970740319_i128),63645343769675223154829530754278819928_i128,(-109386564184475575535780324474348076218_i128),(-92275305349880331813594074195093793380_i128),(-50500798519789563202847775682662158493_i128),(-127520532242984536138935836863294553657_i128),(-158152403468727691811777439728336434056_i128),50288439809836738414344398625004921964_i128];
_7 = [97366595222833566603652497447512156481_i128,164211141914867070558642681893946012406_i128,109305538426498422785514256645250939345_i128,(-119622677629318258072776407751517093087_i128),(-89301744417243732993997573797816227094_i128),62634193115487229092156274098373825141_i128,105459177296910527327815236112317864487_i128,(-2015539689357979215708574411093105477_i128)];
_5 = _6 + _6;
_4 = 14967173872501080405_u64;
_1 = '\u{dd55e}';
_9 = 15267_i16 as f32;
_8 = [(-211544952_i32),1791036989_i32];
_3 = _6 > _5;
_4 = 63379913866645560_u64;
_6 = !_5;
_6 = -_5;
_6 = _5 * _5;
_7 = [81926892111156922927390714300370098372_i128,(-54688970769120670126913943131941554864_i128),(-20498014104978846741624949014554853340_i128),81833519321441904063543852675602384639_i128,(-50894422139840636556129499081754193895_i128),99074533862980862740169793405024366005_i128,(-139289384477379863699643341783199021347_i128),(-31426211239786654205242522877754787690_i128)];
_12 = [_4,_4,_4,_4,_4];
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_4 = _3 as u64;
_4 = 460755566849111424_u64;
_6 = -_5;
_5 = (-1070420157267177863_i64) as isize;
_6 = _5 * _5;
_4 = 12259209236150163742_u64;
_1 = '\u{1d9a2}';
_9 = _2 as f32;
_7 = [(-88972858366369960401514849473544957952_i128),37066129939591306862728855986290627947_i128,127028106107288249268305842022939059736_i128,35138593511874598905692158622202341044_i128,99468150972234033897445989794320482923_i128,(-52043433508389945098663553795210009534_i128),68813489777840461540189148025713409089_i128,138580024436026760801414204154675880379_i128];
_3 = false;
_3 = !true;
_12 = [_4,_4,_4,_4,_4];
_6 = _5 * _5;
_1 = '\u{12cf0}';
_9 = (-1135186022_i32) as f32;
_9 = 63907_u16 as f32;
_8 = [1422423864_i32,605322764_i32];
_9 = 4622521831643365410_usize as f32;
_4 = 44_u8 as u64;
_16 = _6;
Goto(bb9)
}
bb9 = {
_5 = _16 + _6;
_4 = 4989012304214336814_u64 << _5;
_9 = 3470768952551482930_usize as f32;
_4 = !7338020740197376354_u64;
RET = [(-1827386650_i32),(-1535204445_i32)];
_1 = '\u{48461}';
_9 = (-607946337321475186_i64) as f32;
_8 = [237650082_i32,(-128236658_i32)];
_2 = _9 as u128;
_3 = false;
_4 = 18176229757529852469_u64;
RET = _8;
_5 = (-32514_i16) as isize;
_16 = _6 >> _2;
_3 = true;
_9 = _16 as f32;
_8 = RET;
_1 = '\u{6f9e3}';
_6 = 0_usize as isize;
Goto(bb10)
}
bb10 = {
_4 = 4260155793032882848_u64;
_9 = 7310624737989076203_i64 as f32;
_19 = _9;
_3 = false | false;
_8 = [17317086_i32,(-1848023381_i32)];
_25 = [136_u8];
_18 = -_19;
_22.fld0 = (_16,);
_22.fld2 = -_22.fld0.0;
_12 = [_4,_4,_4,_4,_4];
_22.fld0.0 = -_16;
_19 = _18;
_1 = '\u{759d5}';
_21 = _1;
RET = [(-1398353580_i32),(-1027694965_i32)];
_12 = [_4,_4,_4,_4,_4];
Goto(bb11)
}
bb11 = {
_21 = _1;
_16 = _6;
_2 = _1 as u128;
_22.fld2 = 6785860751606327199_i64 as isize;
_16 = _6 & _22.fld0.0;
_22.fld1 = core::ptr::addr_of!(_8);
_12 = [_4,_4,_4,_4,_4];
_5 = _16 - _16;
_18 = _19;
_21 = _1;
_22.fld2 = !_22.fld0.0;
_12 = [_4,_4,_4,_4,_4];
_9 = _19;
_7 = [(-14756723735392296921523250061149527209_i128),(-166357311678935288727523740927536061935_i128),(-126459766806968221335722003572736151710_i128),(-58152320309936485374885058034527794861_i128),128077705581935505163571674297342741989_i128,87595811148229535659291912719091688047_i128,(-119455695812621675314059775037080437526_i128),(-163083297922345532121328273172949281048_i128)];
_21 = _1;
_22.fld0 = (_5,);
_22.fld2 = _22.fld0.0;
_19 = _9 + _9;
match _4 {
0 => bb7,
1 => bb10,
4260155793032882848 => bb13,
_ => bb12
}
}
bb12 = {
_5 = _16 + _6;
_4 = 4989012304214336814_u64 << _5;
_9 = 3470768952551482930_usize as f32;
_4 = !7338020740197376354_u64;
RET = [(-1827386650_i32),(-1535204445_i32)];
_1 = '\u{48461}';
_9 = (-607946337321475186_i64) as f32;
_8 = [237650082_i32,(-128236658_i32)];
_2 = _9 as u128;
_3 = false;
_4 = 18176229757529852469_u64;
RET = _8;
_5 = (-32514_i16) as isize;
_16 = _6 >> _2;
_3 = true;
_9 = _16 as f32;
_8 = RET;
_1 = '\u{6f9e3}';
_6 = 0_usize as isize;
Goto(bb10)
}
bb13 = {
_25 = [212_u8];
_26 = 1839199476_u32;
_9 = (-76_i8) as f32;
_22.fld0.0 = _5 << _5;
_16 = _3 as isize;
_22.fld0 = (_22.fld2,);
_4 = 8358701722972871627_u64 << _22.fld2;
RET = [1755578099_i32,(-1193607934_i32)];
_22.fld1 = core::ptr::addr_of!(RET);
_22.fld2 = _22.fld0.0 & _5;
_3 = false & true;
_12 = [_4,_4,_4,_4,_4];
Goto(bb14)
}
bb14 = {
_29 = !_4;
_5 = _22.fld2 + _22.fld2;
_30 = &_25;
_9 = _19 + _19;
_22.fld0.0 = _5 >> _22.fld2;
_5 = _1 as isize;
_23 = core::ptr::addr_of_mut!(_32);
(*_23) = !(-15550_i16);
(*_23) = 14546_i16;
(*_23) = 79472983334808775835290067563966102246_i128 as i16;
_7 = [(-42691560098069101392726868627539257932_i128),(-64471576945370930551695466744093864372_i128),17470708275104904506503218918012656697_i128,(-128355111881888371953901031120073178844_i128),(-138977340573674409690800857816874249973_i128),92792093909189404885965036716667213364_i128,(-3909561571614480036419006935677212867_i128),(-165990977299742230722015421507911797794_i128)];
_16 = _3 as isize;
match _26 {
0 => bb2,
1 => bb15,
2 => bb16,
3 => bb17,
4 => bb18,
1839199476 => bb20,
_ => bb19
}
}
bb15 = {
_25 = [212_u8];
_26 = 1839199476_u32;
_9 = (-76_i8) as f32;
_22.fld0.0 = _5 << _5;
_16 = _3 as isize;
_22.fld0 = (_22.fld2,);
_4 = 8358701722972871627_u64 << _22.fld2;
RET = [1755578099_i32,(-1193607934_i32)];
_22.fld1 = core::ptr::addr_of!(RET);
_22.fld2 = _22.fld0.0 & _5;
_3 = false & true;
_12 = [_4,_4,_4,_4,_4];
Goto(bb14)
}
bb16 = {
_5 = _16 + _6;
_4 = 4989012304214336814_u64 << _5;
_9 = 3470768952551482930_usize as f32;
_4 = !7338020740197376354_u64;
RET = [(-1827386650_i32),(-1535204445_i32)];
_1 = '\u{48461}';
_9 = (-607946337321475186_i64) as f32;
_8 = [237650082_i32,(-128236658_i32)];
_2 = _9 as u128;
_3 = false;
_4 = 18176229757529852469_u64;
RET = _8;
_5 = (-32514_i16) as isize;
_16 = _6 >> _2;
_3 = true;
_9 = _16 as f32;
_8 = RET;
_1 = '\u{6f9e3}';
_6 = 0_usize as isize;
Goto(bb10)
}
bb17 = {
_5 = _1 as isize;
_5 = (-9223372036854775808_isize) >> _4;
_6 = !_5;
_4 = 169396413043167935_u64 ^ 827849640267675428_u64;
_2 = _1 as u128;
RET = [1663446089_i32,1866134387_i32];
_4 = !13107858732334095229_u64;
_6 = !_5;
_7 = [(-58849241249718357215719654023970740319_i128),63645343769675223154829530754278819928_i128,(-109386564184475575535780324474348076218_i128),(-92275305349880331813594074195093793380_i128),(-50500798519789563202847775682662158493_i128),(-127520532242984536138935836863294553657_i128),(-158152403468727691811777439728336434056_i128),50288439809836738414344398625004921964_i128];
_7 = [97366595222833566603652497447512156481_i128,164211141914867070558642681893946012406_i128,109305538426498422785514256645250939345_i128,(-119622677629318258072776407751517093087_i128),(-89301744417243732993997573797816227094_i128),62634193115487229092156274098373825141_i128,105459177296910527327815236112317864487_i128,(-2015539689357979215708574411093105477_i128)];
_5 = _6 + _6;
_4 = 14967173872501080405_u64;
_1 = '\u{dd55e}';
_9 = 15267_i16 as f32;
_8 = [(-211544952_i32),1791036989_i32];
_3 = _6 > _5;
_4 = 63379913866645560_u64;
_6 = !_5;
_6 = -_5;
_6 = _5 * _5;
_7 = [81926892111156922927390714300370098372_i128,(-54688970769120670126913943131941554864_i128),(-20498014104978846741624949014554853340_i128),81833519321441904063543852675602384639_i128,(-50894422139840636556129499081754193895_i128),99074533862980862740169793405024366005_i128,(-139289384477379863699643341783199021347_i128),(-31426211239786654205242522877754787690_i128)];
_12 = [_4,_4,_4,_4,_4];
Goto(bb2)
}
bb18 = {
Return()
}
bb19 = {
_5 = _16 + _6;
_4 = 4989012304214336814_u64 << _5;
_9 = 3470768952551482930_usize as f32;
_4 = !7338020740197376354_u64;
RET = [(-1827386650_i32),(-1535204445_i32)];
_1 = '\u{48461}';
_9 = (-607946337321475186_i64) as f32;
_8 = [237650082_i32,(-128236658_i32)];
_2 = _9 as u128;
_3 = false;
_4 = 18176229757529852469_u64;
RET = _8;
_5 = (-32514_i16) as isize;
_16 = _6 >> _2;
_3 = true;
_9 = _16 as f32;
_8 = RET;
_1 = '\u{6f9e3}';
_6 = 0_usize as isize;
Goto(bb10)
}
bb20 = {
_21 = _1;
_29 = _4 << _22.fld0.0;
_34 = _26 as f64;
_38 = &_3;
_24 = core::ptr::addr_of_mut!((*_23));
_22.fld0 = (_22.fld2,);
_2 = !66028405705008943054959627849617279558_u128;
_32 = (*_38) as i16;
(*_23) = 19865_i16;
(*_23) = (-13445_i16) ^ 21064_i16;
(*_23) = 31639_i16;
(*_23) = 15071_i16 ^ 3177_i16;
_17 = &mut (*_23);
_41 = (-8556278957179505822_i64);
_28 = (Move(_24), 8973382806886440885_usize, _1);
_37 = &_28.1;
_29 = _4 ^ _4;
_7 = [140008153197433595892723199387430956762_i128,162746446290000132356551320004835862538_i128,(-69555693957708146975290007389495517259_i128),(-93041282363273256938960853161257977429_i128),(-90803556085640343154369931449384934377_i128),18361297352788677999065650117123462415_i128,131047015274359325664419580517366405206_i128,17878371353966897727747499525048539040_i128];
_44 = _2 << (*_17);
Goto(bb21)
}
bb21 = {
(*_17) = (-28081_i16) & (-23827_i16);
_46 = _19;
match (*_37) {
0 => bb22,
1 => bb23,
8973382806886440885 => bb25,
_ => bb24
}
}
bb22 = {
Return()
}
bb23 = {
Return()
}
bb24 = {
Return()
}
bb25 = {
_45 = -71024905553464227954274478064198040292_i128;
_28.2 = _21;
_8 = RET;
_4 = _26 as u64;
_33 = _28.2;
_34 = _44 as f64;
_3 = !false;
_26 = 3129000445_u32 ^ 1957680635_u32;
_29 = !_4;
(*_17) = 3003_i16;
_24 = Move(_23);
_51.0 = 62_i8 >> _22.fld0.0;
_42 = _34;
_22.fld2 = -_22.fld0.0;
(*_17) = !(-14420_i16);
_21 = _1;
_8 = [1011665191_i32,1184032639_i32];
_28.2 = _1;
_48 = !_29;
_3 = (*_37) > (*_37);
_24 = core::ptr::addr_of_mut!((*_17));
(*_17) = -21644_i16;
_8 = [941832149_i32,1807294849_i32];
_5 = _22.fld0.0 >> (*_37);
match (*_37) {
0 => bb26,
8973382806886440885 => bb28,
_ => bb27
}
}
bb26 = {
_25 = [212_u8];
_26 = 1839199476_u32;
_9 = (-76_i8) as f32;
_22.fld0.0 = _5 << _5;
_16 = _3 as isize;
_22.fld0 = (_22.fld2,);
_4 = 8358701722972871627_u64 << _22.fld2;
RET = [1755578099_i32,(-1193607934_i32)];
_22.fld1 = core::ptr::addr_of!(RET);
_22.fld2 = _22.fld0.0 & _5;
_3 = false & true;
_12 = [_4,_4,_4,_4,_4];
Goto(bb14)
}
bb27 = {
_5 = _16 + _6;
_4 = 4989012304214336814_u64 << _5;
_9 = 3470768952551482930_usize as f32;
_4 = !7338020740197376354_u64;
RET = [(-1827386650_i32),(-1535204445_i32)];
_1 = '\u{48461}';
_9 = (-607946337321475186_i64) as f32;
_8 = [237650082_i32,(-128236658_i32)];
_2 = _9 as u128;
_3 = false;
_4 = 18176229757529852469_u64;
RET = _8;
_5 = (-32514_i16) as isize;
_16 = _6 >> _2;
_3 = true;
_9 = _16 as f32;
_8 = RET;
_1 = '\u{6f9e3}';
_6 = 0_usize as isize;
Goto(bb10)
}
bb28 = {
_50 = _3 ^ _3;
(*_17) = -(-10493_i16);
_12 = [_4,_4,_29,_48,_29];
_16 = _22.fld2 & _22.fld2;
_10 = &mut _28;
_11 = &_51;
_22.fld0.0 = (*_10).1 as isize;
(*_17) = _44 as i16;
(*_10).0 = core::ptr::addr_of_mut!((*_17));
(*_17) = 22158_i16;
(*_17) = 5_u8 as i16;
(*_10).2 = _1;
(*_10).0 = core::ptr::addr_of_mut!((*_17));
_44 = _2 ^ _2;
(*_10).2 = _33;
(*_17) = 30437_i16 ^ 10890_i16;
Goto(bb29)
}
bb29 = {
_34 = -_42;
_8 = [404422143_i32,1929683456_i32];
_23 = core::ptr::addr_of_mut!((*_17));
_56.1 = (*_11).0 != (*_11).0;
_54 = (Move(_10), Move((*_10).0));
_1 = _33;
_38 = &_50;
_56.0 = (Move(_24), _4);
(*_23) = _44 as i16;
_23 = core::ptr::addr_of_mut!((*_23));
_24 = core::ptr::addr_of_mut!((*_23));
_34 = -_42;
_59 = _16;
_19 = _18 - _9;
_24 = core::ptr::addr_of_mut!((*_23));
_22.fld1 = core::ptr::addr_of!(_8);
(*_17) = 17634_i16 | (-12028_i16);
_55 = _1;
_57 = !(*_38);
_43 = _19 as i8;
_34 = _42 + _42;
_22.fld0 = (_59,);
_6 = 7_usize as isize;
_51 = (_43,);
_60 = &mut _6;
_43 = _51.0;
match _41 {
0 => bb15,
1 => bb13,
2 => bb25,
3 => bb30,
340282366920938463454818328474588705634 => bb32,
_ => bb31
}
}
bb30 = {
_4 = 4260155793032882848_u64;
_9 = 7310624737989076203_i64 as f32;
_19 = _9;
_3 = false | false;
_8 = [17317086_i32,(-1848023381_i32)];
_25 = [136_u8];
_18 = -_19;
_22.fld0 = (_16,);
_22.fld2 = -_22.fld0.0;
_12 = [_4,_4,_4,_4,_4];
_22.fld0.0 = -_16;
_19 = _18;
_1 = '\u{759d5}';
_21 = _1;
RET = [(-1398353580_i32),(-1027694965_i32)];
_12 = [_4,_4,_4,_4,_4];
Goto(bb11)
}
bb31 = {
Return()
}
bb32 = {
_45 = _41 as i128;
_47 = _16;
_39 = _1;
(*_17) = _47 as i16;
_47 = _22.fld0.0 - _22.fld2;
_16 = _34 as isize;
_56.0.0 = core::ptr::addr_of_mut!((*_17));
_34 = -_42;
_43 = _51.0 | _51.0;
(*_17) = 782_i16;
_1 = _55;
_19 = _9 * _9;
Goto(bb33)
}
bb33 = {
(*_17) = -30208_i16;
(*_60) = _59 << _59;
(*_60) = 212_u8 as isize;
_4 = !_29;
_22.fld2 = _47 - _22.fld0.0;
(*_60) = _22.fld2 - _5;
Goto(bb34)
}
bb34 = {
(*_17) = (-16979_i16) - 20696_i16;
_59 = -(*_60);
_48 = !_29;
_16 = -(*_60);
(*_17) = -(-5284_i16);
(*_17) = 7899_i16;
(*_17) = (-2642_i16);
(*_17) = (-7134_i16) >> (*_60);
(*_17) = (-18892_i16);
Goto(bb35)
}
bb35 = {
_56.0.1 = _4 * _29;
_52 = (*_60);
(*_17) = (-18475_i16) ^ (-4784_i16);
_22.fld2 = (*_60);
(*_17) = 30537_i16 >> (*_60);
_62 = (*_38) ^ (*_38);
_52 = _4 as isize;
_66 = ((*_30),);
(*_17) = (-21390_i16) * 7432_i16;
_62 = (*_60) >= (*_60);
_19 = (*_17) as f32;
_68.1 = [228_u8,234_u8,193_u8,199_u8,59_u8,127_u8,161_u8];
_70 = 2127076730_i32 & (-386387595_i32);
_47 = _26 as isize;
(*_60) = _22.fld2 & _16;
(*_17) = -(-20768_i16);
_25 = [16_u8];
_61 = core::ptr::addr_of!(_37);
_66.0 = [125_u8];
(*_60) = _34 as isize;
_66.0 = [92_u8];
Goto(bb36)
}
bb36 = {
_39 = _33;
(*_60) = -_16;
(*_60) = _59 * _5;
(*_60) = _16;
(*_17) = (-25741_i16) >> (*_60);
match _41 {
0 => bb37,
340282366920938463454818328474588705634 => bb39,
_ => bb38
}
}
bb37 = {
_4 = _3 as u64;
_4 = 460755566849111424_u64;
_6 = -_5;
_5 = (-1070420157267177863_i64) as isize;
_6 = _5 * _5;
_4 = 12259209236150163742_u64;
_1 = '\u{1d9a2}';
_9 = _2 as f32;
_7 = [(-88972858366369960401514849473544957952_i128),37066129939591306862728855986290627947_i128,127028106107288249268305842022939059736_i128,35138593511874598905692158622202341044_i128,99468150972234033897445989794320482923_i128,(-52043433508389945098663553795210009534_i128),68813489777840461540189148025713409089_i128,138580024436026760801414204154675880379_i128];
_3 = false;
_3 = !true;
_12 = [_4,_4,_4,_4,_4];
_6 = _5 * _5;
_1 = '\u{12cf0}';
_9 = (-1135186022_i32) as f32;
_9 = 63907_u16 as f32;
_8 = [1422423864_i32,605322764_i32];
_9 = 4622521831643365410_usize as f32;
_4 = 44_u8 as u64;
_16 = _6;
Goto(bb9)
}
bb38 = {
Return()
}
bb39 = {
_67 = (*_60) + (*_60);
(*_60) = -_16;
_8 = [_70,_70];
(*_60) = _67;
_38 = &_62;
(*_17) = -30532_i16;
_50 = (*_60) != (*_60);
_56.2 = [_26,_26];
Goto(bb40)
}
bb40 = {
_5 = 64_u8 as isize;
(*_17) = 12253_i16 * 30726_i16;
(*_60) = _4 as isize;
_46 = -_19;
(*_60) = _22.fld0.0;
(*_60) = _22.fld0.0 << _16;
_54.1 = Move(_24);
_19 = _9 - _18;
_56.0.0 = core::ptr::addr_of_mut!((*_17));
_75 = [_44,_44,_44,_44,_2];
_56.0.1 = _29;
_42 = _34;
(*_60) = _67;
match _41 {
0 => bb12,
1 => bb41,
340282366920938463454818328474588705634 => bb43,
_ => bb42
}
}
bb41 = {
_34 = -_42;
_8 = [404422143_i32,1929683456_i32];
_23 = core::ptr::addr_of_mut!((*_17));
_56.1 = (*_11).0 != (*_11).0;
_54 = (Move(_10), Move((*_10).0));
_1 = _33;
_38 = &_50;
_56.0 = (Move(_24), _4);
(*_23) = _44 as i16;
_23 = core::ptr::addr_of_mut!((*_23));
_24 = core::ptr::addr_of_mut!((*_23));
_34 = -_42;
_59 = _16;
_19 = _18 - _9;
_24 = core::ptr::addr_of_mut!((*_23));
_22.fld1 = core::ptr::addr_of!(_8);
(*_17) = 17634_i16 | (-12028_i16);
_55 = _1;
_57 = !(*_38);
_43 = _19 as i8;
_34 = _42 + _42;
_22.fld0 = (_59,);
_6 = 7_usize as isize;
_51 = (_43,);
_60 = &mut _6;
_43 = _51.0;
match _41 {
0 => bb15,
1 => bb13,
2 => bb25,
3 => bb30,
340282366920938463454818328474588705634 => bb32,
_ => bb31
}
}
bb42 = {
Return()
}
bb43 = {
_57 = (*_38);
_30 = &_66.0;
_51 = (_43,);
_42 = 18335_u16 as f64;
(*_60) = _59 ^ _22.fld2;
_67 = (*_17) as isize;
_23 = Move(_56.0.0);
_22.fld0 = ((*_60),);
(*_17) = 26669_i16 + (-30721_i16);
_72 = _22.fld0.0;
_25 = (*_30);
(*_17) = 31972_i16;
_68.1 = [212_u8,94_u8,245_u8,228_u8,83_u8,196_u8,117_u8];
_51.0 = 58896_u16 as i8;
_63 = _62;
_19 = _9 * _9;
_71 = _34 - _34;
_66.0 = _25;
(*_60) = _16;
(*_60) = !_22.fld2;
_19 = _18;
_21 = _33;
match (*_17) {
31972 => bb45,
_ => bb44
}
}
bb44 = {
(*_17) = -30208_i16;
(*_60) = _59 << _59;
(*_60) = 212_u8 as isize;
_4 = !_29;
_22.fld2 = _47 - _22.fld0.0;
(*_60) = _22.fld2 - _5;
Goto(bb34)
}
bb45 = {
(*_17) = 32085_i16;
_56.0.1 = _48;
_2 = _44;
_29 = _4;
_56.1 = (*_38);
_55 = _33;
_19 = -_9;
_30 = &_25;
match (*_17) {
0 => bb19,
1 => bb37,
2 => bb46,
3 => bb47,
4 => bb48,
5 => bb49,
6 => bb50,
32085 => bb52,
_ => bb51
}
}
bb46 = {
Return()
}
bb47 = {
_4 = _3 as u64;
_4 = 460755566849111424_u64;
_6 = -_5;
_5 = (-1070420157267177863_i64) as isize;
_6 = _5 * _5;
_4 = 12259209236150163742_u64;
_1 = '\u{1d9a2}';
_9 = _2 as f32;
_7 = [(-88972858366369960401514849473544957952_i128),37066129939591306862728855986290627947_i128,127028106107288249268305842022939059736_i128,35138593511874598905692158622202341044_i128,99468150972234033897445989794320482923_i128,(-52043433508389945098663553795210009534_i128),68813489777840461540189148025713409089_i128,138580024436026760801414204154675880379_i128];
_3 = false;
_3 = !true;
_12 = [_4,_4,_4,_4,_4];
_6 = _5 * _5;
_1 = '\u{12cf0}';
_9 = (-1135186022_i32) as f32;
_9 = 63907_u16 as f32;
_8 = [1422423864_i32,605322764_i32];
_9 = 4622521831643365410_usize as f32;
_4 = 44_u8 as u64;
_16 = _6;
Goto(bb9)
}
bb48 = {
_5 = _1 as isize;
_5 = (-9223372036854775808_isize) >> _4;
_6 = !_5;
_4 = 169396413043167935_u64 ^ 827849640267675428_u64;
_2 = _1 as u128;
RET = [1663446089_i32,1866134387_i32];
_4 = !13107858732334095229_u64;
_6 = !_5;
_7 = [(-58849241249718357215719654023970740319_i128),63645343769675223154829530754278819928_i128,(-109386564184475575535780324474348076218_i128),(-92275305349880331813594074195093793380_i128),(-50500798519789563202847775682662158493_i128),(-127520532242984536138935836863294553657_i128),(-158152403468727691811777439728336434056_i128),50288439809836738414344398625004921964_i128];
_7 = [97366595222833566603652497447512156481_i128,164211141914867070558642681893946012406_i128,109305538426498422785514256645250939345_i128,(-119622677629318258072776407751517093087_i128),(-89301744417243732993997573797816227094_i128),62634193115487229092156274098373825141_i128,105459177296910527327815236112317864487_i128,(-2015539689357979215708574411093105477_i128)];
_5 = _6 + _6;
_4 = 14967173872501080405_u64;
_1 = '\u{dd55e}';
_9 = 15267_i16 as f32;
_8 = [(-211544952_i32),1791036989_i32];
_3 = _6 > _5;
_4 = 63379913866645560_u64;
_6 = !_5;
_6 = -_5;
_6 = _5 * _5;
_7 = [81926892111156922927390714300370098372_i128,(-54688970769120670126913943131941554864_i128),(-20498014104978846741624949014554853340_i128),81833519321441904063543852675602384639_i128,(-50894422139840636556129499081754193895_i128),99074533862980862740169793405024366005_i128,(-139289384477379863699643341783199021347_i128),(-31426211239786654205242522877754787690_i128)];
_12 = [_4,_4,_4,_4,_4];
Goto(bb2)
}
bb49 = {
_25 = [212_u8];
_26 = 1839199476_u32;
_9 = (-76_i8) as f32;
_22.fld0.0 = _5 << _5;
_16 = _3 as isize;
_22.fld0 = (_22.fld2,);
_4 = 8358701722972871627_u64 << _22.fld2;
RET = [1755578099_i32,(-1193607934_i32)];
_22.fld1 = core::ptr::addr_of!(RET);
_22.fld2 = _22.fld0.0 & _5;
_3 = false & true;
_12 = [_4,_4,_4,_4,_4];
Goto(bb14)
}
bb50 = {
_5 = _16 + _6;
_4 = 4989012304214336814_u64 << _5;
_9 = 3470768952551482930_usize as f32;
_4 = !7338020740197376354_u64;
RET = [(-1827386650_i32),(-1535204445_i32)];
_1 = '\u{48461}';
_9 = (-607946337321475186_i64) as f32;
_8 = [237650082_i32,(-128236658_i32)];
_2 = _9 as u128;
_3 = false;
_4 = 18176229757529852469_u64;
RET = _8;
_5 = (-32514_i16) as isize;
_16 = _6 >> _2;
_3 = true;
_9 = _16 as f32;
_8 = RET;
_1 = '\u{6f9e3}';
_6 = 0_usize as isize;
Goto(bb10)
}
bb51 = {
_39 = _33;
(*_60) = -_16;
(*_60) = _59 * _5;
(*_60) = _16;
(*_17) = (-25741_i16) >> (*_60);
match _41 {
0 => bb37,
340282366920938463454818328474588705634 => bb39,
_ => bb38
}
}
bb52 = {
(*_17) = 23932_i16 * (-19657_i16);
_69.1 = core::ptr::addr_of!(_51);
(*_17) = (-8294_i16) + (-3857_i16);
_63 = !(*_38);
Goto(bb53)
}
bb53 = {
Call(_84 = dump_var(2_usize, 45_usize, Move(_45), 47_usize, Move(_47), 43_usize, Move(_43), 44_usize, Move(_44)), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Call(_84 = dump_var(2_usize, 72_usize, Move(_72), 51_usize, Move(_51), 55_usize, Move(_55), 29_usize, Move(_29)), ReturnTo(bb55), UnwindUnreachable())
}
bb55 = {
Call(_84 = dump_var(2_usize, 48_usize, Move(_48), 25_usize, Move(_25), 3_usize, Move(_3), 33_usize, Move(_33)), ReturnTo(bb56), UnwindUnreachable())
}
bb56 = {
Call(_84 = dump_var(2_usize, 7_usize, Move(_7), 62_usize, Move(_62), 32_usize, Move(_32), 1_usize, Move(_1)), ReturnTo(bb57), UnwindUnreachable())
}
bb57 = {
Call(_84 = dump_var(2_usize, 4_usize, Move(_4), 2_usize, Move(_2), 85_usize, _85, 85_usize, _85), ReturnTo(bb58), UnwindUnreachable())
}
bb58 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn3(mut _1: char,mut _2: bool,mut _3: [i32; 2]) -> u128 {
mir! {
type RET = u128;
let _4: u8;
let _5: f32;
let _6: (&'static i64, u16, (i8,));
let _7: (bool, u128, usize);
let _8: &'static [u8; 1];
let _9: &'static isize;
let _10: &'static mut (*mut i16, usize, char);
let _11: isize;
let _12: bool;
let _13: &'static (i8,);
let _14: bool;
let _15: isize;
let _16: &'static [u8; 1];
let _17: i16;
let _18: *mut i16;
let _19: [bool; 6];
let _20: f64;
let _21: char;
let _22: isize;
let _23: &'static &'static isize;
let _24: i8;
let _25: Adt47;
let _26: [i64; 6];
let _27: Adt84;
let _28: Adt72;
let _29: (*mut i16, usize, char);
let _30: *const i128;
let _31: *const &'static *const (i8, [u32; 2], [i32; 7], u32);
let _32: char;
let _33: &'static mut &'static mut (*mut i16, usize, char);
let _34: *const &'static mut &'static mut (*mut i16, usize, char);
let _35: *const &'static usize;
let _36: &'static &'static isize;
let _37: (i8, [u32; 2], [i32; 7], u32);
let _38: bool;
let _39: f32;
let _40: u64;
let _41: *const Adt51;
let _42: ((isize,), u32);
let _43: usize;
let _44: (isize,);
let _45: (usize, &'static bool);
let _46: *const Adt28;
let _47: *mut [u32; 2];
let _48: *mut *const i128;
let _49: &'static mut (*mut i16, usize, char);
let _50: isize;
let _51: bool;
let _52: bool;
let _53: i8;
let _54: f64;
let _55: (*mut i16, usize, char);
let _56: Adt84;
let _57: f64;
let _58: bool;
let _59: (*mut i16, usize, char);
let _60: f64;
let _61: *const Adt28;
let _62: [i16; 7];
let _63: u64;
let _64: u16;
let _65: f32;
let _66: *const &'static *const (i8, [u32; 2], [i32; 7], u32);
let _67: &'static i64;
let _68: char;
let _69: &'static mut (*mut i16, usize, char);
let _70: *const [i32; 2];
let _71: ();
let _72: ();
{
_2 = true ^ true;
RET = 37270482262202413016779930149742075521_u128 + 66614644203540459703690161884539320728_u128;
_1 = '\u{6d41f}';
_4 = !61_u8;
_4 = 224_u8 << RET;
_6.2.0 = (-87_i8) & (-90_i8);
_6.1 = 45861_u16 | 15049_u16;
_6.1 = !51950_u16;
_1 = '\u{101636}';
_5 = (-80036695148280918284223080682034926397_i128) as f32;
RET = 333656274965227647041773531038969807291_u128 << _4;
Goto(bb1)
}
bb1 = {
_2 = RET >= RET;
_4 = _6.2.0 as u8;
_3 = [774978035_i32,1447078882_i32];
_6.1 = 53335_u16 ^ 46138_u16;
_1 = '\u{8d77d}';
Goto(bb2)
}
bb2 = {
RET = 216107292599970871895752193671039452643_u128 * 165869678763169026011575708476788085159_u128;
_4 = 22_u8;
_4 = 229_u8;
_4 = 58_u8;
_6.1 = 36905_u16 - 51992_u16;
_6.1 = 56180_u16 ^ 46337_u16;
_5 = (-121535245807535990544492360991405518230_i128) as f32;
_6.2.0 = -127_i8;
RET = 129843493922447976301164173474622919972_u128;
_6.1 = RET as u16;
_7 = (_2, RET, 1_usize);
RET = _6.2.0 as u128;
Call(_7 = fn4(_4, RET, _4, _4, _1, _2, _4, _2, _1, _1), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_7 = (_2, RET, 5_usize);
_6.1 = !28585_u16;
_7.0 = _7.2 == _7.2;
_6.2.0 = 56_i8 ^ 76_i8;
_6.1 = 24066_u16 & 17733_u16;
RET = _7.1 & _7.1;
_11 = (-9223372036854775808_isize);
_7.2 = 0_usize + 14232514102870445411_usize;
_1 = '\u{6c790}';
_6.2.0 = 16_i8;
_6.2 = (16_i8,);
_7.2 = 9423935103571617895_usize >> _4;
_6.2.0 = !85_i8;
_13 = &_6.2;
_1 = '\u{ca24a}';
Goto(bb4)
}
bb4 = {
_12 = _7.0 | _2;
_3 = [(-605827671_i32),1702189586_i32];
RET = _1 as u128;
_6.2.0 = (-86_i8) & (-99_i8);
_6.2 = (62_i8,);
_6.2.0 = 64_i8 << _11;
_7.1 = _11 as u128;
_2 = _6.2.0 < _6.2.0;
_6.2 = ((-43_i8),);
_5 = _7.1 as f32;
_9 = &_11;
_3 = [1450549255_i32,(-485090097_i32)];
_11 = (-9223372036854775808_isize);
_2 = _12 > _12;
_1 = '\u{ea4c0}';
_5 = (-19819_i16) as f32;
RET = _5 as u128;
_6.2.0 = 12_i8;
match _4 {
0 => bb1,
1 => bb3,
2 => bb5,
3 => bb6,
4 => bb7,
5 => bb8,
58 => bb10,
_ => bb9
}
}
bb5 = {
_7 = (_2, RET, 5_usize);
_6.1 = !28585_u16;
_7.0 = _7.2 == _7.2;
_6.2.0 = 56_i8 ^ 76_i8;
_6.1 = 24066_u16 & 17733_u16;
RET = _7.1 & _7.1;
_11 = (-9223372036854775808_isize);
_7.2 = 0_usize + 14232514102870445411_usize;
_1 = '\u{6c790}';
_6.2.0 = 16_i8;
_6.2 = (16_i8,);
_7.2 = 9423935103571617895_usize >> _4;
_6.2.0 = !85_i8;
_13 = &_6.2;
_1 = '\u{ca24a}';
Goto(bb4)
}
bb6 = {
RET = 216107292599970871895752193671039452643_u128 * 165869678763169026011575708476788085159_u128;
_4 = 22_u8;
_4 = 229_u8;
_4 = 58_u8;
_6.1 = 36905_u16 - 51992_u16;
_6.1 = 56180_u16 ^ 46337_u16;
_5 = (-121535245807535990544492360991405518230_i128) as f32;
_6.2.0 = -127_i8;
RET = 129843493922447976301164173474622919972_u128;
_6.1 = RET as u16;
_7 = (_2, RET, 1_usize);
RET = _6.2.0 as u128;
Call(_7 = fn4(_4, RET, _4, _4, _1, _2, _4, _2, _1, _1), ReturnTo(bb3), UnwindUnreachable())
}
bb7 = {
_2 = RET >= RET;
_4 = _6.2.0 as u8;
_3 = [774978035_i32,1447078882_i32];
_6.1 = 53335_u16 ^ 46138_u16;
_1 = '\u{8d77d}';
Goto(bb2)
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_7 = (_12, RET, 0_usize);
_14 = _12 < _12;
_11 = (-66_isize) & (-70_isize);
_7.0 = _2;
_14 = _7.0 < _7.0;
_7.2 = 7737445303012213557_u64 as usize;
_15 = _6.2.0 as isize;
_12 = !_14;
_2 = !_12;
_6.1 = _7.2 as u16;
_9 = &_15;
_7.1 = RET & RET;
_7.2 = (-74774124983842856996071633152141554352_i128) as usize;
match _6.2.0 {
0 => bb11,
12 => bb13,
_ => bb12
}
}
bb11 = {
_12 = _7.0 | _2;
_3 = [(-605827671_i32),1702189586_i32];
RET = _1 as u128;
_6.2.0 = (-86_i8) & (-99_i8);
_6.2 = (62_i8,);
_6.2.0 = 64_i8 << _11;
_7.1 = _11 as u128;
_2 = _6.2.0 < _6.2.0;
_6.2 = ((-43_i8),);
_5 = _7.1 as f32;
_9 = &_11;
_3 = [1450549255_i32,(-485090097_i32)];
_11 = (-9223372036854775808_isize);
_2 = _12 > _12;
_1 = '\u{ea4c0}';
_5 = (-19819_i16) as f32;
RET = _5 as u128;
_6.2.0 = 12_i8;
match _4 {
0 => bb1,
1 => bb3,
2 => bb5,
3 => bb6,
4 => bb7,
5 => bb8,
58 => bb10,
_ => bb9
}
}
bb12 = {
Return()
}
bb13 = {
_7.0 = _12 != _14;
_6.2 = (45_i8,);
_7 = (_14, RET, 0_usize);
_5 = 16654744465075287159_u64 as f32;
_17 = 3101_i16 << (*_9);
_17 = _7.1 as i16;
_7.0 = _2;
_1 = '\u{ca8d4}';
_4 = 37_u8 >> _7.2;
_7 = (_2, RET, 5_usize);
_2 = _7.0 ^ _14;
_7.1 = !RET;
_3 = [(-2104231067_i32),(-371867760_i32)];
_7.2 = 13631336695222936092_usize;
_1 = '\u{c09b5}';
_7.2 = _5 as usize;
_4 = 199_u8 - 43_u8;
_19 = [_14,_7.0,_12,_2,_14,_14];
_12 = _14 > _14;
_14 = _7.0 <= _12;
_7 = (_2, RET, 2341015991378494155_usize);
_1 = '\u{72c6f}';
_11 = 1683668122073935070_i64 as isize;
_6.1 = 2339_u16 | 50275_u16;
_2 = _12;
_3 = [1227704155_i32,1138746000_i32];
Call(_17 = fn5((*_9), (*_9)), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
_7.0 = _2;
_12 = _2;
Goto(bb15)
}
bb15 = {
_9 = &_11;
_15 = (*_9);
_6.2.0 = 64_i8;
_4 = 120_u8 & 121_u8;
_15 = (*_9) + (*_9);
match _7.2 {
0 => bb11,
1 => bb16,
2341015991378494155 => bb18,
_ => bb17
}
}
bb16 = {
_2 = RET >= RET;
_4 = _6.2.0 as u8;
_3 = [774978035_i32,1447078882_i32];
_6.1 = 53335_u16 ^ 46138_u16;
_1 = '\u{8d77d}';
Goto(bb2)
}
bb17 = {
Return()
}
bb18 = {
_18 = core::ptr::addr_of_mut!(_17);
_6.1 = _7.2 as u16;
_17 = 10427_i16 << _11;
(*_18) = _7.2 as i16;
(*_18) = 18343_i16 | (-29881_i16);
_11 = _15 ^ _15;
RET = !_7.1;
_7.2 = !1_usize;
(*_18) = 29399_i16 >> _6.1;
_7.1 = RET ^ RET;
(*_18) = (-15708_i16) & 30368_i16;
_21 = _1;
_7 = (_2, RET, 7964675897567460626_usize);
_26 = [3370832851479489164_i64,8345927957440592541_i64,3882420486192592327_i64,7036507542510654077_i64,(-3314378435074532535_i64),5831955381569129672_i64];
_27.fld1 = core::ptr::addr_of!(_3);
Goto(bb19)
}
bb19 = {
_5 = _6.1 as f32;
match _7.2 {
0 => bb12,
1 => bb16,
2 => bb3,
3 => bb15,
7964675897567460626 => bb20,
_ => bb11
}
}
bb20 = {
(*_18) = _2 as i16;
RET = _7.1 + _7.1;
(*_18) = -6381_i16;
_20 = (-5342825109853763420_i64) as f64;
_27.fld2 = 3565503267_u32 as isize;
_26 = [(-3484412975739394262_i64),(-2512915837663053636_i64),(-3321910865735285668_i64),(-6883022775642408236_i64),5646260008447887638_i64,(-6112255194898011806_i64)];
(*_18) = 14260_i16 | 24936_i16;
(*_18) = 22977_i16 >> _7.2;
_29 = (Move(_18), _7.2, _1);
_14 = _12;
_7.2 = _29.1;
_27.fld0.0 = _11 * _15;
_6.2.0 = 96_i8 | (-83_i8);
_17 = !16531_i16;
Goto(bb21)
}
bb21 = {
_18 = Move(_29.0);
_29.0 = core::ptr::addr_of_mut!(_17);
_7 = (_14, RET, _29.1);
RET = _7.1;
_29.1 = _7.2;
_27.fld0 = (_11,);
_7.1 = RET * RET;
RET = _7.1;
_7.1 = (-1039057826_i32) as u128;
_18 = core::ptr::addr_of_mut!(_17);
(*_18) = 6883233921971543966_i64 as i16;
(*_18) = (-28139_i16) ^ 18820_i16;
_26 = [5803240947303505717_i64,7533792148050454995_i64,156002848058462735_i64,1949913547986059215_i64,945745758846166421_i64,(-1554833118614291022_i64)];
_20 = 3009799528046660851_u64 as f64;
_11 = !_27.fld0.0;
Goto(bb22)
}
bb22 = {
_6.2 = (87_i8,);
(*_18) = 24266_i16;
_6.2 = (48_i8,);
_29 = (Move(_18), _7.2, _1);
_6.2.0 = 114_i8 + (-82_i8);
_6.2.0 = (-119_i8) << _29.1;
_6.1 = 40541_u16;
_18 = core::ptr::addr_of_mut!(_17);
_6.2.0 = (-80_i8);
_14 = !_7.0;
(*_18) = 23413_i16;
_12 = _14;
_26 = [6454997002467527284_i64,6661580253390470013_i64,(-6387620379027573992_i64),(-4852321150652861992_i64),4882662603840794446_i64,(-8835699569771315855_i64)];
_1 = _21;
_20 = _6.1 as f64;
_6.2.0 = (-113_i8) - 14_i8;
match _29.1 {
0 => bb18,
1 => bb23,
7964675897567460626 => bb25,
_ => bb24
}
}
bb23 = {
_7 = (_2, RET, 5_usize);
_6.1 = !28585_u16;
_7.0 = _7.2 == _7.2;
_6.2.0 = 56_i8 ^ 76_i8;
_6.1 = 24066_u16 & 17733_u16;
RET = _7.1 & _7.1;
_11 = (-9223372036854775808_isize);
_7.2 = 0_usize + 14232514102870445411_usize;
_1 = '\u{6c790}';
_6.2.0 = 16_i8;
_6.2 = (16_i8,);
_7.2 = 9423935103571617895_usize >> _4;
_6.2.0 = !85_i8;
_13 = &_6.2;
_1 = '\u{ca24a}';
Goto(bb4)
}
bb24 = {
_7 = (_12, RET, 0_usize);
_14 = _12 < _12;
_11 = (-66_isize) & (-70_isize);
_7.0 = _2;
_14 = _7.0 < _7.0;
_7.2 = 7737445303012213557_u64 as usize;
_15 = _6.2.0 as isize;
_12 = !_14;
_2 = !_12;
_6.1 = _7.2 as u16;
_9 = &_15;
_7.1 = RET & RET;
_7.2 = (-74774124983842856996071633152141554352_i128) as usize;
match _6.2.0 {
0 => bb11,
12 => bb13,
_ => bb12
}
}
bb25 = {
_29.2 = _21;
(*_18) = (-8523_i16) & 6971_i16;
(*_18) = _4 as i16;
_10 = &mut _29;
_14 = (*_10).1 > (*_10).1;
RET = _7.1;
_1 = (*_10).2;
(*_10).0 = core::ptr::addr_of_mut!((*_18));
(*_18) = _2 as i16;
(*_10).0 = core::ptr::addr_of_mut!((*_18));
(*_10) = (Move(_18), _7.2, _21);
_7.2 = 113107812_u32 as usize;
(*_10).0 = core::ptr::addr_of_mut!(_17);
(*_10).0 = core::ptr::addr_of_mut!(_17);
(*_10).2 = _1;
_36 = &_9;
(*_10).1 = _7.2 ^ _7.2;
(*_10).2 = _21;
(*_10).2 = _1;
(*_10).0 = core::ptr::addr_of_mut!(_17);
(*_10).0 = core::ptr::addr_of_mut!(_17);
RET = !_7.1;
_14 = _7.0;
(*_10).2 = _1;
(*_10).0 = core::ptr::addr_of_mut!(_17);
match _6.1 {
0 => bb26,
40541 => bb28,
_ => bb27
}
}
bb26 = {
Return()
}
bb27 = {
_5 = _6.1 as f32;
match _7.2 {
0 => bb12,
1 => bb16,
2 => bb3,
3 => bb15,
7964675897567460626 => bb20,
_ => bb11
}
}
bb28 = {
_39 = _5 * _5;
(*_10).0 = core::ptr::addr_of_mut!(_17);
(*_10).1 = !_7.2;
(*_10).1 = _7.2;
(*_10).0 = core::ptr::addr_of_mut!(_17);
(*_10).2 = _1;
(*_10).2 = _1;
(*_10).0 = core::ptr::addr_of_mut!(_17);
_37.2 = [(-321836327_i32),675986549_i32,(-1731796023_i32),1581386084_i32,(-1680038166_i32),78086350_i32,(-794639163_i32)];
(*_10).2 = _1;
(*_10).1 = _7.2 | _7.2;
_40 = 7815004845851953795_u64 - 1709189973839978562_u64;
_9 = &_27.fld2;
_24 = _17 as i8;
(*_10).1 = _7.2 >> (*_9);
_7.1 = _40 as u128;
(*_10).2 = _21;
_26 = [7284096177089293452_i64,(-2095594688086571695_i64),(-5504045559242468236_i64),185722169955810042_i64,4987971695269209745_i64,(-8432773380487074549_i64)];
_3 = [367096387_i32,2056143195_i32];
(*_10).2 = _21;
(*_10).1 = _7.2;
Goto(bb29)
}
bb29 = {
_7.1 = RET;
(*_10).0 = core::ptr::addr_of_mut!(_17);
(*_10).1 = _7.2 | _7.2;
(*_10).2 = _1;
_37.1 = [1628112008_u32,1703523440_u32];
_26 = [(-6045880468608835921_i64),(-7386034310185492640_i64),8047458086691966338_i64,(-6295509080652069790_i64),5793971750724522991_i64,2275707257965980033_i64];
(*_10).1 = !_7.2;
(*_10).1 = _7.2 << _24;
_5 = (-3692929104074855031_i64) as f32;
_20 = _39 as f64;
_3 = [(-756894503_i32),(-1278843626_i32)];
_7.0 = _14 ^ _12;
_27.fld3 = core::ptr::addr_of_mut!(_37.2);
_18 = core::ptr::addr_of_mut!(_17);
(*_10).1 = _40 as usize;
match _6.1 {
0 => bb25,
1 => bb9,
2 => bb16,
3 => bb24,
4 => bb28,
5 => bb6,
6 => bb7,
40541 => bb31,
_ => bb30
}
}
bb30 = {
_18 = Move(_29.0);
_29.0 = core::ptr::addr_of_mut!(_17);
_7 = (_14, RET, _29.1);
RET = _7.1;
_29.1 = _7.2;
_27.fld0 = (_11,);
_7.1 = RET * RET;
RET = _7.1;
_7.1 = (-1039057826_i32) as u128;
_18 = core::ptr::addr_of_mut!(_17);
(*_18) = 6883233921971543966_i64 as i16;
(*_18) = (-28139_i16) ^ 18820_i16;
_26 = [5803240947303505717_i64,7533792148050454995_i64,156002848058462735_i64,1949913547986059215_i64,945745758846166421_i64,(-1554833118614291022_i64)];
_20 = 3009799528046660851_u64 as f64;
_11 = !_27.fld0.0;
Goto(bb22)
}
bb31 = {
(*_18) = (-23599_i16) >> _24;
_42.1 = 7267743015490440740_i64 as u32;
(*_18) = -(-25068_i16);
(*_10) = (Move(_18), _7.2, _21);
(*_10).1 = _7.2;
(*_10).2 = _21;
_4 = !55_u8;
_45.1 = &_12;
_12 = _7.0;
_37.0 = _24 << _27.fld0.0;
(*_10).1 = !_7.2;
(*_10).0 = core::ptr::addr_of_mut!(_17);
Goto(bb32)
}
bb32 = {
(*_10).0 = core::ptr::addr_of_mut!(_17);
_44.0 = -_15;
_32 = (*_10).2;
(*_10).1 = _7.2;
_38 = _12;
_40 = !6369010674511862725_u64;
(*_10).0 = core::ptr::addr_of_mut!(_17);
_42 = (_44, 3804508767_u32);
_7.0 = _38 > _14;
_37.1 = [_42.1,_42.1];
_33 = &mut _10;
_42.1 = !693790428_u32;
RET = (-590271962671544716_i64) as u128;
_21 = _32;
match _6.1 {
0 => bb33,
1 => bb34,
2 => bb35,
3 => bb36,
4 => bb37,
5 => bb38,
40541 => bb40,
_ => bb39
}
}
bb33 = {
_12 = _7.0 | _2;
_3 = [(-605827671_i32),1702189586_i32];
RET = _1 as u128;
_6.2.0 = (-86_i8) & (-99_i8);
_6.2 = (62_i8,);
_6.2.0 = 64_i8 << _11;
_7.1 = _11 as u128;
_2 = _6.2.0 < _6.2.0;
_6.2 = ((-43_i8),);
_5 = _7.1 as f32;
_9 = &_11;
_3 = [1450549255_i32,(-485090097_i32)];
_11 = (-9223372036854775808_isize);
_2 = _12 > _12;
_1 = '\u{ea4c0}';
_5 = (-19819_i16) as f32;
RET = _5 as u128;
_6.2.0 = 12_i8;
match _4 {
0 => bb1,
1 => bb3,
2 => bb5,
3 => bb6,
4 => bb7,
5 => bb8,
58 => bb10,
_ => bb9
}
}
bb34 = {
_7 = (_2, RET, 5_usize);
_6.1 = !28585_u16;
_7.0 = _7.2 == _7.2;
_6.2.0 = 56_i8 ^ 76_i8;
_6.1 = 24066_u16 & 17733_u16;
RET = _7.1 & _7.1;
_11 = (-9223372036854775808_isize);
_7.2 = 0_usize + 14232514102870445411_usize;
_1 = '\u{6c790}';
_6.2.0 = 16_i8;
_6.2 = (16_i8,);
_7.2 = 9423935103571617895_usize >> _4;
_6.2.0 = !85_i8;
_13 = &_6.2;
_1 = '\u{ca24a}';
Goto(bb4)
}
bb35 = {
_7.0 = _2;
_12 = _2;
Goto(bb15)
}
bb36 = {
RET = 216107292599970871895752193671039452643_u128 * 165869678763169026011575708476788085159_u128;
_4 = 22_u8;
_4 = 229_u8;
_4 = 58_u8;
_6.1 = 36905_u16 - 51992_u16;
_6.1 = 56180_u16 ^ 46337_u16;
_5 = (-121535245807535990544492360991405518230_i128) as f32;
_6.2.0 = -127_i8;
RET = 129843493922447976301164173474622919972_u128;
_6.1 = RET as u16;
_7 = (_2, RET, 1_usize);
RET = _6.2.0 as u128;
Call(_7 = fn4(_4, RET, _4, _4, _1, _2, _4, _2, _1, _1), ReturnTo(bb3), UnwindUnreachable())
}
bb37 = {
_6.2 = (87_i8,);
(*_18) = 24266_i16;
_6.2 = (48_i8,);
_29 = (Move(_18), _7.2, _1);
_6.2.0 = 114_i8 + (-82_i8);
_6.2.0 = (-119_i8) << _29.1;
_6.1 = 40541_u16;
_18 = core::ptr::addr_of_mut!(_17);
_6.2.0 = (-80_i8);
_14 = !_7.0;
(*_18) = 23413_i16;
_12 = _14;
_26 = [6454997002467527284_i64,6661580253390470013_i64,(-6387620379027573992_i64),(-4852321150652861992_i64),4882662603840794446_i64,(-8835699569771315855_i64)];
_1 = _21;
_20 = _6.1 as f64;
_6.2.0 = (-113_i8) - 14_i8;
match _29.1 {
0 => bb18,
1 => bb23,
7964675897567460626 => bb25,
_ => bb24
}
}
bb38 = {
_5 = _6.1 as f32;
match _7.2 {
0 => bb12,
1 => bb16,
2 => bb3,
3 => bb15,
7964675897567460626 => bb20,
_ => bb11
}
}
bb39 = {
_29.2 = _21;
(*_18) = (-8523_i16) & 6971_i16;
(*_18) = _4 as i16;
_10 = &mut _29;
_14 = (*_10).1 > (*_10).1;
RET = _7.1;
_1 = (*_10).2;
(*_10).0 = core::ptr::addr_of_mut!((*_18));
(*_18) = _2 as i16;
(*_10).0 = core::ptr::addr_of_mut!((*_18));
(*_10) = (Move(_18), _7.2, _21);
_7.2 = 113107812_u32 as usize;
(*_10).0 = core::ptr::addr_of_mut!(_17);
(*_10).0 = core::ptr::addr_of_mut!(_17);
(*_10).2 = _1;
_36 = &_9;
(*_10).1 = _7.2 ^ _7.2;
(*_10).2 = _21;
(*_10).2 = _1;
(*_10).0 = core::ptr::addr_of_mut!(_17);
(*_10).0 = core::ptr::addr_of_mut!(_17);
RET = !_7.1;
_14 = _7.0;
(*_10).2 = _1;
(*_10).0 = core::ptr::addr_of_mut!(_17);
match _6.1 {
0 => bb26,
40541 => bb28,
_ => bb27
}
}
bb40 = {
_4 = 208_u8 >> _24;
_47 = core::ptr::addr_of_mut!(_37.1);
(*_47) = [_42.1,_42.1];
_48 = core::ptr::addr_of_mut!(_30);
(*_47) = [_42.1,_42.1];
_34 = core::ptr::addr_of!(_33);
_42.0 = ((*_9),);
_6.2 = (_24,);
_43 = _7.2 >> _44.0;
_27.fld3 = core::ptr::addr_of_mut!(_37.2);
match _6.1 {
40541 => bb41,
_ => bb19
}
}
bb41 = {
(*_47) = [_42.1,_42.1];
_28 = Adt72::Variant1 { fld0: _40,fld1: _17,fld2: _44 };
_27.fld2 = _27.fld0.0;
_21 = _32;
_45.0 = _43 - _7.2;
_48 = core::ptr::addr_of_mut!((*_48));
_56.fld3 = core::ptr::addr_of_mut!(_37.2);
(*_47) = [_42.1,_42.1];
(*_47) = [_42.1,_42.1];
_3 = [(-1849886931_i32),(-1594143421_i32)];
(*_47) = [_42.1,_42.1];
_4 = 47_u8 & 39_u8;
Goto(bb42)
}
bb42 = {
_56 = Move(_27);
_5 = _39 - _39;
_45.0 = _7.2;
_34 = core::ptr::addr_of!((*_34));
_52 = _7.0 >= _38;
_2 = !_38;
_27.fld2 = _56.fld0.0 ^ _42.0.0;
match _6.1 {
0 => bb23,
1 => bb2,
2 => bb13,
3 => bb18,
4 => bb22,
5 => bb11,
6 => bb7,
40541 => bb44,
_ => bb43
}
}
bb43 = {
_7 = (_12, RET, 0_usize);
_14 = _12 < _12;
_11 = (-66_isize) & (-70_isize);
_7.0 = _2;
_14 = _7.0 < _7.0;
_7.2 = 7737445303012213557_u64 as usize;
_15 = _6.2.0 as isize;
_12 = !_14;
_2 = !_12;
_6.1 = _7.2 as u16;
_9 = &_15;
_7.1 = RET & RET;
_7.2 = (-74774124983842856996071633152141554352_i128) as usize;
match _6.2.0 {
0 => bb11,
12 => bb13,
_ => bb12
}
}
bb44 = {
_19 = [_2,_38,_7.0,_38,_12,_2];
(*_47) = [_42.1,_42.1];
_48 = core::ptr::addr_of_mut!((*_48));
_37.2 = [(-649728761_i32),(-1773093037_i32),82914655_i32,1355791610_i32,(-136784570_i32),667460558_i32,424429288_i32];
_7.0 = _52 & _38;
_62 = [Field::<i16>(Variant(_28, 1), 1),Field::<i16>(Variant(_28, 1), 1),Field::<i16>(Variant(_28, 1), 1),Field::<i16>(Variant(_28, 1), 1),_17,_17,_17];
_7.1 = _38 as u128;
_27.fld0 = Field::<(isize,)>(Variant(_28, 1), 2);
_55.2 = _21;
_20 = _27.fld0.0 as f64;
_52 = _38 < _14;
_27.fld1 = core::ptr::addr_of!(_3);
_62 = [_17,Field::<i16>(Variant(_28, 1), 1),_17,Field::<i16>(Variant(_28, 1), 1),_17,Field::<i16>(Variant(_28, 1), 1),_17];
_39 = _5;
_11 = Field::<(isize,)>(Variant(_28, 1), 2).0;
_42 = (_44, 430480312_u32);
_27.fld1 = core::ptr::addr_of!(_3);
_37.1 = [_42.1,_42.1];
_51 = _7.0 ^ _7.0;
_55.1 = !_43;
_37.3 = _42.1 * _42.1;
_49 = Move((*_33));
Goto(bb45)
}
bb45 = {
_48 = core::ptr::addr_of_mut!(_30);
match _6.1 {
0 => bb13,
1 => bb16,
2 => bb21,
3 => bb6,
40541 => bb47,
_ => bb46
}
}
bb46 = {
Return()
}
bb47 = {
(*_47) = [_37.3,_42.1];
_48 = core::ptr::addr_of_mut!((*_48));
match _42.1 {
0 => bb17,
1 => bb34,
2 => bb3,
3 => bb28,
430480312 => bb49,
_ => bb48
}
}
bb48 = {
Return()
}
bb49 = {
(*_47) = [_37.3,_42.1];
_18 = core::ptr::addr_of_mut!(place!(Field::<i16>(Variant(_28, 1), 1)));
_26 = [3410210323473443332_i64,5998620795449880950_i64,6889812125268713385_i64,7670967765523151569_i64,4846494998150614405_i64,602534912099531695_i64];
_27.fld1 = core::ptr::addr_of!(_3);
_56.fld3 = core::ptr::addr_of_mut!(_37.2);
_59.2 = _21;
(*_47) = [_37.3,_37.3];
Goto(bb50)
}
bb50 = {
Call(_71 = dump_var(3_usize, 17_usize, Move(_17), 1_usize, Move(_1), 7_usize, Move(_7), 4_usize, Move(_4)), ReturnTo(bb51), UnwindUnreachable())
}
bb51 = {
Call(_71 = dump_var(3_usize, 21_usize, Move(_21), 51_usize, Move(_51), 43_usize, Move(_43), 26_usize, Move(_26)), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
Call(_71 = dump_var(3_usize, 44_usize, Move(_44), 38_usize, Move(_38), 24_usize, Move(_24), 32_usize, Move(_32)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn4(mut _1: u8,mut _2: u128,mut _3: u8,mut _4: u8,mut _5: char,mut _6: bool,mut _7: u8,mut _8: bool,mut _9: char,mut _10: char) -> (bool, u128, usize) {
mir! {
type RET = (bool, u128, usize);
let _11: &'static i64;
let _12: ();
let _13: ();
{
RET.0 = _6 >= _6;
_3 = _10 as u8;
_8 = RET.0 < RET.0;
_1 = _7 << _4;
_5 = _9;
RET.2 = 0_usize;
_4 = _7;
_3 = _7 % _7;
_6 = !RET.0;
RET.1 = !_2;
_9 = _10;
_5 = _9;
Goto(bb1)
}
bb1 = {
Call(_12 = dump_var(4_usize, 8_usize, Move(_8), 5_usize, Move(_5), 1_usize, Move(_1), 10_usize, Move(_10)), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Call(_12 = dump_var(4_usize, 6_usize, Move(_6), 13_usize, _13, 13_usize, _13, 13_usize, _13), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn5(mut _1: isize,mut _2: isize) -> i16 {
mir! {
type RET = i16;
let _3: Adt64;
let _4: usize;
let _5: bool;
let _6: f32;
let _7: [i128; 8];
let _8: char;
let _9: ([u8; 1],);
let _10: f64;
let _11: char;
let _12: char;
let _13: Adt84;
let _14: &'static mut (*mut i16, usize, char);
let _15: u64;
let _16: u32;
let _17: u8;
let _18: u32;
let _19: (bool, u128, usize);
let _20: f32;
let _21: u128;
let _22: usize;
let _23: isize;
let _24: (&'static mut (*mut i16, usize, char), *mut i16);
let _25: isize;
let _26: ((Adt51, &'static i64, *const Adt28), [u128; 5], i64);
let _27: *const &'static *const (i8, [u32; 2], [i32; 7], u32);
let _28: i16;
let _29: isize;
let _30: i32;
let _31: i128;
let _32: isize;
let _33: u128;
let _34: (Adt51, &'static i64, *const Adt28);
let _35: isize;
let _36: *const *const (i8, [u32; 2], [i32; 7], u32);
let _37: bool;
let _38: &'static bool;
let _39: u64;
let _40: isize;
let _41: (i8, [u32; 2], [i32; 7], u32);
let _42: &'static (i8,);
let _43: &'static isize;
let _44: &'static bool;
let _45: i8;
let _46: Adt47;
let _47: f32;
let _48: &'static bool;
let _49: i128;
let _50: (&'static mut (*mut i16, usize, char), *mut i16);
let _51: bool;
let _52: isize;
let _53: i8;
let _54: (i8, [u32; 2], [i32; 7], u32);
let _55: Adt55;
let _56: f32;
let _57: ();
let _58: ();
{
RET = 51_u8 as i16;
_2 = !_1;
_2 = _1 ^ _1;
_2 = 1612100531_u32 as isize;
RET = 17492684482721445429_usize as i16;
RET = _2 as i16;
_1 = _2 | _2;
_1 = RET as isize;
RET = 13655448713777482115004698685576799188_i128 as i16;
_1 = 162732686565419092781249235657986326950_i128 as isize;
RET = 28007_i16;
_2 = -_1;
Goto(bb1)
}
bb1 = {
RET = 65086_u16 as i16;
_2 = _1 * _1;
_1 = -_2;
_2 = !_1;
_2 = _1;
RET = -(-1456_i16);
Call(RET = fn6(_1, _1, _1, _2, _2, _1, _1, _1, _1, _2), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_4 = 17029689725827043420_usize << RET;
_5 = false ^ false;
_5 = true ^ true;
_5 = !true;
_6 = RET as f32;
_5 = _4 == _4;
_5 = !true;
_6 = 15152760406594410766_u64 as f32;
RET = (-30073_i16) | (-30497_i16);
_2 = -_1;
_6 = 631183873_i32 as f32;
_6 = 20757_u16 as f32;
Goto(bb3)
}
bb3 = {
_2 = _1 & _1;
_4 = 6_usize ^ 4_usize;
_2 = !_1;
_6 = 78679064089501353320763308966178648914_u128 as f32;
_5 = true;
_4 = 5_usize - 3_usize;
_10 = (-645238133267529535_i64) as f64;
RET = !(-17812_i16);
RET = _5 as i16;
Goto(bb4)
}
bb4 = {
RET = (-23813_i16) + 7077_i16;
_7 = [(-25831437487598559011625172138530196326_i128),156978347624612537663887035051678705214_i128,36218337076570897563251922822418899586_i128,(-53948541711078080917394238864765241989_i128),40650763605059234336887189193539934959_i128,78654475664153592980014424183308888075_i128,107012303584813352181153191206797642776_i128,(-86912537277242367199090937635213292276_i128)];
_11 = '\u{746a2}';
RET = (-20897_i16);
_10 = 238403193677418648412356402815071593178_u128 as f64;
_9.0 = [247_u8];
RET = 28197_i16 * 439_i16;
_2 = _1 >> _1;
_2 = _1 - _1;
_10 = 33751_u16 as f64;
_8 = _11;
Call(_4 = core::intrinsics::bswap(12154075747649350270_usize), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
_2 = _1;
_8 = _11;
_7 = [51802281596408045179265929410500997719_i128,(-83651705622603346673213430366799596910_i128),132563605600212748169428674659628201760_i128,(-37008185029852888686282500577305423837_i128),(-132070106154262750998435224505857468112_i128),49768490505843497817693442666985986454_i128,(-147880039587313964478596425976127082075_i128),113957452496338086207703164315119964944_i128];
Goto(bb6)
}
bb6 = {
_9.0 = [24_u8];
_5 = _6 != _6;
_7 = [(-28240626789030413901943046975150840020_i128),(-44971568382074380615772703308718756090_i128),27595886718698968587510144562822404265_i128,121786492910427495768130929957424491933_i128,136933802822016719643670177188800901852_i128,(-154327498537350795688829434335356403887_i128),93123065963286438026400066087933613499_i128,32776499410661500664296066864237002062_i128];
_11 = _8;
RET = 10456_i16 - (-2624_i16);
_5 = false | false;
RET = 12991_i16;
_12 = _8;
_11 = _8;
_4 = 7329456685571658446_usize;
_9.0 = [209_u8];
_1 = _2;
_13.fld0.0 = _2;
_9.0 = [203_u8];
_7 = [1702676301236296151335104092494699940_i128,7827868571998844336894632339842416096_i128,162566982943413684969527308989502653208_i128,144785413929703802714264629327307180041_i128,(-152810013789455976679783490892270500928_i128),(-87214187253982594834830428595280291513_i128),(-105775749178126783991358928151864464173_i128),(-136839644316358829127651647510180243080_i128)];
_13.fld2 = _2;
_13.fld0 = (_2,);
_10 = RET as f64;
match _4 {
0 => bb5,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb7,
5 => bb8,
6 => bb9,
7329456685571658446 => bb11,
_ => bb10
}
}
bb7 = {
_2 = _1;
_8 = _11;
_7 = [51802281596408045179265929410500997719_i128,(-83651705622603346673213430366799596910_i128),132563605600212748169428674659628201760_i128,(-37008185029852888686282500577305423837_i128),(-132070106154262750998435224505857468112_i128),49768490505843497817693442666985986454_i128,(-147880039587313964478596425976127082075_i128),113957452496338086207703164315119964944_i128];
Goto(bb6)
}
bb8 = {
RET = 65086_u16 as i16;
_2 = _1 * _1;
_1 = -_2;
_2 = !_1;
_2 = _1;
RET = -(-1456_i16);
Call(RET = fn6(_1, _1, _1, _2, _2, _1, _1, _1, _1, _2), ReturnTo(bb2), UnwindUnreachable())
}
bb9 = {
_2 = _1 & _1;
_4 = 6_usize ^ 4_usize;
_2 = !_1;
_6 = 78679064089501353320763308966178648914_u128 as f32;
_5 = true;
_4 = 5_usize - 3_usize;
_10 = (-645238133267529535_i64) as f64;
RET = !(-17812_i16);
RET = _5 as i16;
Goto(bb4)
}
bb10 = {
_4 = 17029689725827043420_usize << RET;
_5 = false ^ false;
_5 = true ^ true;
_5 = !true;
_6 = RET as f32;
_5 = _4 == _4;
_5 = !true;
_6 = 15152760406594410766_u64 as f32;
RET = (-30073_i16) | (-30497_i16);
_2 = -_1;
_6 = 631183873_i32 as f32;
_6 = 20757_u16 as f32;
Goto(bb3)
}
bb11 = {
_13.fld0.0 = _1 + _2;
_9.0 = [209_u8];
_1 = _13.fld2 * _2;
_7 = [(-88911726380600258766266152983746032198_i128),(-78839981563802498737513669886466184890_i128),(-55565127441176168043175821754208929445_i128),(-139121800866161889898735754245339899858_i128),(-163859599043296329445416717584364904900_i128),(-55624703488721214731353504797326707181_i128),139842108317400500634365646466717646541_i128,9061767586412222345686342688047924183_i128];
_8 = _12;
_8 = _12;
_13.fld0.0 = _13.fld2 * _13.fld2;
_16 = 2030177781_u32;
Goto(bb12)
}
bb12 = {
RET = (-15682_i16);
_19 = (_5, 231909760380881493887136227962280744689_u128, _4);
_7 = [(-43514893879681265405237405303979252625_i128),(-9492494585493112210412066072086180860_i128),(-106883193540208355169537389428088604649_i128),74058480440594518301579531634585109106_i128,95406491500452383173517822205546418527_i128,44970708276325719125455168342906948557_i128,(-146735322477492658654772293349527353076_i128),117626165170526410688824267335421003773_i128];
_15 = 1263021671991510438_u64 * 14728863029107845142_u64;
_19 = (_5, 85375483099092006535338852825725734277_u128, _4);
_6 = _15 as f32;
_13.fld0 = (_2,);
_11 = _12;
_17 = 180_u8 + 169_u8;
_19.1 = RET as u128;
_4 = _6 as usize;
_19.0 = _13.fld0.0 <= _13.fld2;
_5 = _19.0;
_15 = _12 as u64;
_20 = -_6;
_10 = _6 as f64;
Call(_21 = core::intrinsics::transmute(_19.1), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
_19.2 = _4 - _4;
_19.2 = _4 | _4;
_19 = (_5, _21, _4);
_17 = _16 as u8;
_13.fld0 = (_13.fld2,);
_7 = [1137519587030707999372467390592489875_i128,148361727194195006190147985202300701473_i128,107642339641797255317727564085305745366_i128,(-95942532417131468876415506713519279604_i128),109807940518654727156927910502432188245_i128,(-74858330763458048481815527327077127913_i128),46863327254796486970301919253071282937_i128,(-146351193143898178480736640751386996016_i128)];
_13.fld0 = (_1,);
_18 = _16 ^ _16;
match RET {
0 => bb14,
1 => bb15,
340282366920938463463374607431768195774 => bb17,
_ => bb16
}
}
bb14 = {
RET = (-15682_i16);
_19 = (_5, 231909760380881493887136227962280744689_u128, _4);
_7 = [(-43514893879681265405237405303979252625_i128),(-9492494585493112210412066072086180860_i128),(-106883193540208355169537389428088604649_i128),74058480440594518301579531634585109106_i128,95406491500452383173517822205546418527_i128,44970708276325719125455168342906948557_i128,(-146735322477492658654772293349527353076_i128),117626165170526410688824267335421003773_i128];
_15 = 1263021671991510438_u64 * 14728863029107845142_u64;
_19 = (_5, 85375483099092006535338852825725734277_u128, _4);
_6 = _15 as f32;
_13.fld0 = (_2,);
_11 = _12;
_17 = 180_u8 + 169_u8;
_19.1 = RET as u128;
_4 = _6 as usize;
_19.0 = _13.fld0.0 <= _13.fld2;
_5 = _19.0;
_15 = _12 as u64;
_20 = -_6;
_10 = _6 as f64;
Call(_21 = core::intrinsics::transmute(_19.1), ReturnTo(bb13), UnwindUnreachable())
}
bb15 = {
_2 = _1;
_8 = _11;
_7 = [51802281596408045179265929410500997719_i128,(-83651705622603346673213430366799596910_i128),132563605600212748169428674659628201760_i128,(-37008185029852888686282500577305423837_i128),(-132070106154262750998435224505857468112_i128),49768490505843497817693442666985986454_i128,(-147880039587313964478596425976127082075_i128),113957452496338086207703164315119964944_i128];
Goto(bb6)
}
bb16 = {
_2 = _1 & _1;
_4 = 6_usize ^ 4_usize;
_2 = !_1;
_6 = 78679064089501353320763308966178648914_u128 as f32;
_5 = true;
_4 = 5_usize - 3_usize;
_10 = (-645238133267529535_i64) as f64;
RET = !(-17812_i16);
RET = _5 as i16;
Goto(bb4)
}
bb17 = {
_13.fld2 = _1 << _1;
_18 = _16;
_17 = 127_u8;
_15 = 14560869453442022367_u64 * 16930993847749503301_u64;
_13.fld2 = _13.fld0.0 >> _1;
Goto(bb18)
}
bb18 = {
_2 = _13.fld2 + _13.fld0.0;
_16 = _5 as u32;
_23 = _10 as isize;
_15 = _2 as u64;
_7 = [128231102249430066286559301920672892080_i128,(-169546771165742578284483233659153278830_i128),(-108331058254089872244208122863360685173_i128),72880613643516698405062389285431765194_i128,32603976079945000938398784578952356509_i128,(-66969561221672253337398620375797596549_i128),82510677671232257315435443995813730004_i128,86338158372027409392121675386908636390_i128];
_2 = -_13.fld0.0;
_6 = _10 as f32;
_8 = _11;
_12 = _11;
_6 = _20 * _20;
_1 = (-3285783201116015378_i64) as isize;
RET = 31111_i16;
_18 = 7812311545158079155_i64 as u32;
_11 = _8;
_6 = -_20;
_16 = _18 - _18;
_25 = -_13.fld0.0;
_20 = 16203_u16 as f32;
_16 = _18 >> _18;
_23 = _13.fld2 & _25;
_8 = _12;
_4 = (-95_i8) as usize;
Goto(bb19)
}
bb19 = {
_11 = _8;
_26.0.0.fld0.1 = _19.2 >> _23;
_2 = (-11_i8) as isize;
_26.2 = 7460237715543229750_i64 & 645015687600656080_i64;
_26.0.0.fld0.2 = _15 < _15;
_26.1 = [_21,_19.1,_19.1,_21,_21];
_17 = 44_u8 + 0_u8;
_7 = [(-2314339012719066487668197740947330598_i128),85288214807297260523178914730156649958_i128,25905351692452366057249410384426541804_i128,101345474106640960797927772524628609563_i128,100334155957188244241527047830097755397_i128,48394540397564771495195409610355479861_i128,130543690913493390634717632085594840201_i128,(-89801932296621923107221866727188771063_i128)];
_22 = _26.0.0.fld0.1;
_13.fld0 = (_25,);
_13.fld1 = core::ptr::addr_of!(_26.0.0.fld4);
_13.fld2 = _16 as isize;
_26.0.0.fld6 = core::ptr::addr_of_mut!(RET);
_13.fld2 = !_23;
RET = !(-14543_i16);
_17 = 185_u8;
_26.0.0.fld3 = _16;
_7 = [(-161362877977209248721069413539384771521_i128),(-96601681765220958519661847069474561715_i128),(-106699074637793756497124106954570380329_i128),58546152950292351100108963719210245945_i128,54647685981762302857268150524651430391_i128,(-169417159896427894748624220653058157543_i128),(-160195932243131286045275039008718163717_i128),168250320271705465638743522865795985931_i128];
_28 = RET | RET;
_18 = !_16;
_26.0.0.fld4 = [1949340782_i32,2054075296_i32];
_5 = _26.0.0.fld0.2;
Goto(bb20)
}
bb20 = {
_18 = !_26.0.0.fld3;
_28 = RET >> _26.0.0.fld0.1;
_26.0.0.fld3 = (-43487207488841152960174393415786836654_i128) as u32;
_13.fld0 = (_1,);
_30 = _20 as i32;
_20 = _6 * _6;
_19.0 = _22 >= _26.0.0.fld0.1;
_26.0.2 = core::ptr::addr_of!(_26.0.0.fld2);
_32 = _13.fld2;
_9.0 = [_17];
_26.0.0.fld4 = [_30,_30];
_26.0.0.fld0.2 = _19.0;
_24.1 = core::ptr::addr_of_mut!(RET);
_19.2 = _22;
_8 = _11;
_34.0.fld1 = [_19.1,_21,_21,_21,_21];
_22 = _26.0.0.fld0.1 * _26.0.0.fld0.1;
Goto(bb21)
}
bb21 = {
_9.0 = [_17];
_34.0.fld3 = !_16;
_34.0.fld0.0 = _10 + _10;
_10 = _34.0.fld0.0 * _34.0.fld0.0;
_34.0.fld0.0 = 55834_u16 as f64;
_34.0.fld4 = _26.0.0.fld4;
_34.2 = core::ptr::addr_of!(_34.0.fld2);
_34.0.fld1 = _26.1;
_29 = _23 << _25;
_18 = _26.0.0.fld3 ^ _26.0.0.fld3;
_34.0.fld6 = Move(_26.0.0.fld6);
_18 = _16;
_1 = -_23;
_21 = !_19.1;
_36 = core::ptr::addr_of!(_26.0.0.fld5);
_31 = 90662944615173880047706443389485121987_i128 >> _23;
_33 = _19.1;
_1 = _6 as isize;
_11 = _12;
_30 = _19.1 as i32;
_34.0.fld6 = Move(_24.1);
_38 = &_19.0;
match _17 {
0 => bb17,
1 => bb22,
2 => bb23,
185 => bb25,
_ => bb24
}
}
bb22 = {
_4 = 17029689725827043420_usize << RET;
_5 = false ^ false;
_5 = true ^ true;
_5 = !true;
_6 = RET as f32;
_5 = _4 == _4;
_5 = !true;
_6 = 15152760406594410766_u64 as f32;
RET = (-30073_i16) | (-30497_i16);
_2 = -_1;
_6 = 631183873_i32 as f32;
_6 = 20757_u16 as f32;
Goto(bb3)
}
bb23 = {
_13.fld0.0 = _1 + _2;
_9.0 = [209_u8];
_1 = _13.fld2 * _2;
_7 = [(-88911726380600258766266152983746032198_i128),(-78839981563802498737513669886466184890_i128),(-55565127441176168043175821754208929445_i128),(-139121800866161889898735754245339899858_i128),(-163859599043296329445416717584364904900_i128),(-55624703488721214731353504797326707181_i128),139842108317400500634365646466717646541_i128,9061767586412222345686342688047924183_i128];
_8 = _12;
_8 = _12;
_13.fld0.0 = _13.fld2 * _13.fld2;
_16 = 2030177781_u32;
Goto(bb12)
}
bb24 = {
_2 = _1 & _1;
_4 = 6_usize ^ 4_usize;
_2 = !_1;
_6 = 78679064089501353320763308966178648914_u128 as f32;
_5 = true;
_4 = 5_usize - 3_usize;
_10 = (-645238133267529535_i64) as f64;
RET = !(-17812_i16);
RET = _5 as i16;
Goto(bb4)
}
bb25 = {
_34.0.fld0.1 = _15 as usize;
_26.0.1 = &_26.2;
_26.0.0.fld0 = (_10, _34.0.fld0.1, (*_38));
_19.0 = _5 ^ _26.0.0.fld0.2;
_13.fld0.0 = _23 ^ _23;
_25 = _13.fld0.0 >> _13.fld2;
_13.fld0 = (_25,);
(*_36) = core::ptr::addr_of!(_41);
(*_36) = core::ptr::addr_of!(_41);
_24.1 = core::ptr::addr_of_mut!(_28);
_1 = _13.fld0.0 & _29;
_12 = _11;
_26.0.0.fld0 = (_10, _19.2, _5);
_8 = _12;
_22 = _26.0.0.fld0.1;
_36 = core::ptr::addr_of!(_26.0.0.fld5);
_34.1 = &_26.2;
_19.0 = _5;
(*_36) = core::ptr::addr_of!(_41);
(*_36) = core::ptr::addr_of!(_41);
_41.2 = [_30,_30,_30,_30,_30,_30,_30];
_26.0.0.fld0.2 = !_19.0;
_34.0.fld2 = Adt28::Variant0 { fld0: _19.0,fld1: _8,fld2: _26.0.0.fld0,fld3: _30,fld4: _10 };
(*_36) = core::ptr::addr_of!(_41);
(*_36) = core::ptr::addr_of!(_41);
place!(Field::<char>(Variant(_34.0.fld2, 0), 1)) = _11;
(*_36) = core::ptr::addr_of!(_41);
match _17 {
0 => bb1,
1 => bb22,
2 => bb14,
3 => bb8,
4 => bb16,
5 => bb26,
6 => bb27,
185 => bb29,
_ => bb28
}
}
bb26 = {
RET = (-15682_i16);
_19 = (_5, 231909760380881493887136227962280744689_u128, _4);
_7 = [(-43514893879681265405237405303979252625_i128),(-9492494585493112210412066072086180860_i128),(-106883193540208355169537389428088604649_i128),74058480440594518301579531634585109106_i128,95406491500452383173517822205546418527_i128,44970708276325719125455168342906948557_i128,(-146735322477492658654772293349527353076_i128),117626165170526410688824267335421003773_i128];
_15 = 1263021671991510438_u64 * 14728863029107845142_u64;
_19 = (_5, 85375483099092006535338852825725734277_u128, _4);
_6 = _15 as f32;
_13.fld0 = (_2,);
_11 = _12;
_17 = 180_u8 + 169_u8;
_19.1 = RET as u128;
_4 = _6 as usize;
_19.0 = _13.fld0.0 <= _13.fld2;
_5 = _19.0;
_15 = _12 as u64;
_20 = -_6;
_10 = _6 as f64;
Call(_21 = core::intrinsics::transmute(_19.1), ReturnTo(bb13), UnwindUnreachable())
}
bb27 = {
_11 = _8;
_26.0.0.fld0.1 = _19.2 >> _23;
_2 = (-11_i8) as isize;
_26.2 = 7460237715543229750_i64 & 645015687600656080_i64;
_26.0.0.fld0.2 = _15 < _15;
_26.1 = [_21,_19.1,_19.1,_21,_21];
_17 = 44_u8 + 0_u8;
_7 = [(-2314339012719066487668197740947330598_i128),85288214807297260523178914730156649958_i128,25905351692452366057249410384426541804_i128,101345474106640960797927772524628609563_i128,100334155957188244241527047830097755397_i128,48394540397564771495195409610355479861_i128,130543690913493390634717632085594840201_i128,(-89801932296621923107221866727188771063_i128)];
_22 = _26.0.0.fld0.1;
_13.fld0 = (_25,);
_13.fld1 = core::ptr::addr_of!(_26.0.0.fld4);
_13.fld2 = _16 as isize;
_26.0.0.fld6 = core::ptr::addr_of_mut!(RET);
_13.fld2 = !_23;
RET = !(-14543_i16);
_17 = 185_u8;
_26.0.0.fld3 = _16;
_7 = [(-161362877977209248721069413539384771521_i128),(-96601681765220958519661847069474561715_i128),(-106699074637793756497124106954570380329_i128),58546152950292351100108963719210245945_i128,54647685981762302857268150524651430391_i128,(-169417159896427894748624220653058157543_i128),(-160195932243131286045275039008718163717_i128),168250320271705465638743522865795985931_i128];
_28 = RET | RET;
_18 = !_16;
_26.0.0.fld4 = [1949340782_i32,2054075296_i32];
_5 = _26.0.0.fld0.2;
Goto(bb20)
}
bb28 = {
_13.fld2 = _1 << _1;
_18 = _16;
_17 = 127_u8;
_15 = 14560869453442022367_u64 * 16930993847749503301_u64;
_13.fld2 = _13.fld0.0 >> _1;
Goto(bb18)
}
bb29 = {
_33 = _21 | _19.1;
_34.0.fld0.2 = !_19.0;
(*_36) = core::ptr::addr_of!(_41);
(*_36) = core::ptr::addr_of!(_41);
_24.1 = Move(_34.0.fld6);
_34.2 = core::ptr::addr_of!(_26.0.0.fld2);
_20 = _6 * _6;
_26.0.0.fld6 = core::ptr::addr_of_mut!(RET);
Goto(bb30)
}
bb30 = {
_28 = Field::<(f64, usize, bool)>(Variant(_34.0.fld2, 0), 2).2 as i16;
_34.2 = core::ptr::addr_of!(_26.0.0.fld2);
_26.1 = [_21,_33,_33,_21,_21];
_26.0.0.fld5 = core::ptr::addr_of!(_41);
_34.0.fld4 = [Field::<i32>(Variant(_34.0.fld2, 0), 3),Field::<i32>(Variant(_34.0.fld2, 0), 3)];
_26.0.0.fld0.0 = _32 as f64;
(*_36) = core::ptr::addr_of!(_41);
_34.0.fld0.2 = Field::<bool>(Variant(_34.0.fld2, 0), 0);
_35 = _1 | _25;
_32 = _29 >> _23;
(*_36) = core::ptr::addr_of!(_41);
_26.0.0.fld0.1 = _19.2 + _22;
_26.0.0.fld0.1 = Field::<(f64, usize, bool)>(Variant(_34.0.fld2, 0), 2).1 + _19.2;
(*_36) = core::ptr::addr_of!(_41);
place!(Field::<(f64, usize, bool)>(Variant(_34.0.fld2, 0), 2)).0 = -Field::<f64>(Variant(_34.0.fld2, 0), 4);
_41.2 = [_30,_30,_30,Field::<i32>(Variant(_34.0.fld2, 0), 3),_30,Field::<i32>(Variant(_34.0.fld2, 0), 3),_30];
(*_36) = core::ptr::addr_of!(_41);
_34.0.fld3 = !_16;
_12 = Field::<char>(Variant(_34.0.fld2, 0), 1);
_38 = &_34.0.fld0.2;
(*_36) = core::ptr::addr_of!(_41);
_26.0.0.fld0.1 = _19.2 * _22;
_44 = &(*_38);
Goto(bb31)
}
bb31 = {
_10 = Field::<(f64, usize, bool)>(Variant(_34.0.fld2, 0), 2).0 + Field::<(f64, usize, bool)>(Variant(_34.0.fld2, 0), 2).0;
place!(Field::<char>(Variant(_34.0.fld2, 0), 1)) = _11;
(*_36) = core::ptr::addr_of!(_41);
_40 = _17 as isize;
_19.0 = !(*_38);
_20 = _6;
_28 = RET + RET;
_34.0.fld1 = [_21,_21,_19.1,_33,_21];
Goto(bb32)
}
bb32 = {
(*_36) = core::ptr::addr_of!(_41);
_13.fld0.0 = _21 as isize;
place!(Field::<(f64, usize, bool)>(Variant(_34.0.fld2, 0), 2)).1 = _22;
_17 = 17_u8 ^ 55_u8;
Goto(bb33)
}
bb33 = {
_34.0.fld0.1 = !_26.0.0.fld0.1;
_8 = _11;
_33 = _21;
_50.1 = Move(_26.0.0.fld6);
_19.0 = !(*_38);
_26.0.0.fld1 = [_19.1,_19.1,_21,_33,_21];
_34.0.fld0 = _26.0.0.fld0;
_40 = _18 as isize;
_13.fld1 = core::ptr::addr_of!(_26.0.0.fld4);
_26.0.0.fld6 = Move(_50.1);
_13.fld1 = core::ptr::addr_of!(_34.0.fld4);
_5 = _35 == _35;
_19.2 = _26.0.0.fld0.1 - _22;
(*_36) = core::ptr::addr_of!(_54);
Goto(bb34)
}
bb34 = {
_26.0.0.fld0.0 = _34.0.fld0.0;
RET = Field::<(f64, usize, bool)>(Variant(_34.0.fld2, 0), 2).1 as i16;
_7 = [_31,_31,_31,_31,_31,_31,_31,_31];
_34.0.fld0.1 = !_26.0.0.fld0.1;
_8 = _12;
_21 = _33;
_26.0.0.fld2 = _34.0.fld2;
_34.0.fld5 = core::ptr::addr_of!(_41);
place!(Field::<(f64, usize, bool)>(Variant(_34.0.fld2, 0), 2)) = _34.0.fld0;
(*_36) = core::ptr::addr_of!(_54);
place!(Field::<(f64, usize, bool)>(Variant(_26.0.0.fld2, 0), 2)) = (_26.0.0.fld0.0, _19.2, _5);
_30 = Field::<i32>(Variant(_26.0.0.fld2, 0), 3) + Field::<i32>(Variant(_26.0.0.fld2, 0), 3);
_34.0.fld4 = [_30,_30];
_54.0 = 42117_u16 as i8;
_13.fld0.0 = _29 >> _35;
_34.0.fld0.1 = _26.0.0.fld0.1;
_13.fld1 = core::ptr::addr_of!(_34.0.fld4);
Goto(bb35)
}
bb35 = {
Call(_57 = dump_var(5_usize, 17_usize, Move(_17), 31_usize, Move(_31), 5_usize, Move(_5), 35_usize, Move(_35)), ReturnTo(bb36), UnwindUnreachable())
}
bb36 = {
Call(_57 = dump_var(5_usize, 7_usize, Move(_7), 21_usize, Move(_21), 1_usize, Move(_1), 23_usize, Move(_23)), ReturnTo(bb37), UnwindUnreachable())
}
bb37 = {
Call(_57 = dump_var(5_usize, 18_usize, Move(_18), 40_usize, Move(_40), 19_usize, Move(_19), 11_usize, Move(_11)), ReturnTo(bb38), UnwindUnreachable())
}
bb38 = {
Call(_57 = dump_var(5_usize, 29_usize, Move(_29), 58_usize, _58, 58_usize, _58, 58_usize, _58), ReturnTo(bb39), UnwindUnreachable())
}
bb39 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn6(mut _1: isize,mut _2: isize,mut _3: isize,mut _4: isize,mut _5: isize,mut _6: isize,mut _7: isize,mut _8: isize,mut _9: isize,mut _10: isize) -> i16 {
mir! {
type RET = i16;
let _11: [i64; 4];
let _12: ((Adt51, &'static i64, *const Adt28), [u128; 5], i64);
let _13: [u8; 1];
let _14: char;
let _15: char;
let _16: &'static (i8,);
let _17: *mut [i32; 7];
let _18: bool;
let _19: (Adt55, *const (i8,));
let _20: *mut [u32; 2];
let _21: isize;
let _22: f64;
let _23: ((isize,), u32);
let _24: (bool, u128, usize);
let _25: i32;
let _26: f32;
let _27: &'static [u8; 1];
let _28: char;
let _29: *mut i16;
let _30: ();
let _31: ();
{
_1 = _5 ^ _3;
RET = (-240_i16) & (-16402_i16);
_6 = _7;
_5 = _6 - _8;
_5 = _1;
_12.0.2 = core::ptr::addr_of!(_12.0.0.fld2);
_7 = _9;
RET = !(-28570_i16);
_12.0.0.fld6 = core::ptr::addr_of_mut!(RET);
_12.1 = [39651678337248069827701985137334478122_u128,176148204378415015739774422832475298582_u128,97628097298744566011368534016609826150_u128,39202479415239488511708699582690470112_u128,227187768326227735001989005802281140510_u128];
_13 = [177_u8];
_8 = _10 - _1;
_6 = !_9;
_11 = [(-6485796537677199980_i64),4857683385671481734_i64,2476921061680563588_i64,9191610867602386970_i64];
_1 = _7;
_12.0.0.fld0.2 = _1 != _10;
_6 = _5;
_12.0.0.fld1 = [298107696288484592887798654299225208904_u128,274431869843756793313736337193679080409_u128,50203448126334140380475744265972460800_u128,183084726288517193850768723929259975969_u128,107418198762130026220589516402271360088_u128];
_6 = _8;
_13 = [24_u8];
_15 = '\u{6924f}';
_12.0.0.fld4 = [735760136_i32,(-593771585_i32)];
_12.0.0.fld0.2 = false | false;
_11 = [(-7032296405729711560_i64),(-8079041760257359802_i64),(-3786446134505552550_i64),8041160083572383163_i64];
Call(_9 = fn7(Move(_12.0.2), _13), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_12.0.0.fld0.1 = 8878371792528628107_usize | 6993808162596215763_usize;
_14 = _15;
_12.0.0.fld6 = core::ptr::addr_of_mut!(RET);
_6 = -_7;
_12.0.0.fld4 = [1379622266_i32,1656164269_i32];
_12.0.0.fld0.0 = _12.0.0.fld0.1 as f64;
_15 = _14;
_7 = _6 + _9;
_12.0.0.fld3 = _12.0.0.fld0.0 as u32;
_12.0.2 = core::ptr::addr_of!(_12.0.0.fld2);
_12.1 = [30743166484728921909209829187203502222_u128,194177793445216320830754922750595415965_u128,96631145513735671101391335404367743651_u128,242205762938268104370470265325724647388_u128,248422863877992677479294866582862570605_u128];
_3 = _8 - _9;
RET = 20235_i16 & 4075_i16;
_12.0.0.fld4 = [(-519234126_i32),328464409_i32];
_10 = _5 | _9;
_11 = [(-1699524666535746541_i64),2762773444783474723_i64,(-2569817236932275319_i64),7925797769407208248_i64];
_12.0.0.fld2 = Adt28::Variant0 { fld0: _12.0.0.fld0.2,fld1: _14,fld2: _12.0.0.fld0,fld3: (-1152841693_i32),fld4: _12.0.0.fld0.0 };
_11 = [(-9186030096198200968_i64),542809472843648999_i64,(-3793051129542898380_i64),(-3296594894531577040_i64)];
Call(place!(Field::<i32>(Variant(_12.0.0.fld2, 0), 3)) = core::intrinsics::transmute(_12.0.0.fld3), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_13 = [45_u8];
place!(Field::<f64>(Variant(_12.0.0.fld2, 0), 4)) = 144962443977730765786127620894637324223_i128 as f64;
_6 = _9;
place!(Field::<(f64, usize, bool)>(Variant(_12.0.0.fld2, 0), 2)).1 = _12.0.0.fld0.1 | _12.0.0.fld0.1;
_12.2 = _12.0.0.fld3 as i64;
place!(Field::<f64>(Variant(_12.0.0.fld2, 0), 4)) = Field::<(f64, usize, bool)>(Variant(_12.0.0.fld2, 0), 2).0 + _12.0.0.fld0.0;
_7 = _6;
_7 = _9;
place!(Field::<f64>(Variant(_12.0.0.fld2, 0), 4)) = -Field::<(f64, usize, bool)>(Variant(_12.0.0.fld2, 0), 2).0;
_15 = Field::<char>(Variant(_12.0.0.fld2, 0), 1);
_12.0.0.fld0.2 = _3 < _7;
_12.0.0.fld6 = core::ptr::addr_of_mut!(RET);
_2 = _12.0.0.fld3 as isize;
_12.0.0.fld0.1 = Field::<(f64, usize, bool)>(Variant(_12.0.0.fld2, 0), 2).1 >> Field::<(f64, usize, bool)>(Variant(_12.0.0.fld2, 0), 2).1;
place!(Field::<(f64, usize, bool)>(Variant(_12.0.0.fld2, 0), 2)).0 = Field::<f64>(Variant(_12.0.0.fld2, 0), 4) + Field::<f64>(Variant(_12.0.0.fld2, 0), 4);
_12.1 = _12.0.0.fld1;
_24.2 = _14 as usize;
_21 = _3 + _3;
_12.0.0.fld4 = [Field::<i32>(Variant(_12.0.0.fld2, 0), 3),Field::<i32>(Variant(_12.0.0.fld2, 0), 3)];
Goto(bb3)
}
bb3 = {
_12.0.0.fld1 = [243750828284520268945184109447095181992_u128,338755672179847205198077451195257109743_u128,78195992819202102305901316563860614599_u128,182514292855214119734993648170435323528_u128,197082929191238069054748238069614691368_u128];
place!(Field::<char>(Variant(_12.0.0.fld2, 0), 1)) = _15;
_8 = _3 | _10;
_3 = -_8;
_3 = _8;
_6 = _8;
_3 = _21;
_29 = core::ptr::addr_of_mut!(RET);
(*_29) = (-4023_i16) >> _6;
Goto(bb4)
}
bb4 = {
Call(_30 = dump_var(6_usize, 3_usize, Move(_3), 8_usize, Move(_8), 15_usize, Move(_15), 14_usize, Move(_14)), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
Call(_30 = dump_var(6_usize, 2_usize, Move(_2), 9_usize, Move(_9), 5_usize, Move(_5), 31_usize, _31), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn7(mut _1: *const Adt28,mut _2: [u8; 1]) -> isize {
mir! {
type RET = isize;
let _3: f64;
let _4: &'static &'static isize;
let _5: char;
let _6: i128;
let _7: i32;
let _8: &'static mut i16;
let _9: i8;
let _10: bool;
let _11: isize;
let _12: [i32; 2];
let _13: *mut [u32; 2];
let _14: i64;
let _15: *const (i8, [u32; 2], [i32; 7], u32);
let _16: f32;
let _17: *mut *const i128;
let _18: u32;
let _19: Adt47;
let _20: *const &'static usize;
let _21: Adt58;
let _22: *const &'static *const (i8, [u32; 2], [i32; 7], u32);
let _23: u64;
let _24: *const (i8, [u32; 2], [i32; 7], u32);
let _25: i32;
let _26: u64;
let _27: isize;
let _28: f32;
let _29: Adt55;
let _30: *const Adt28;
let _31: i16;
let _32: char;
let _33: f64;
let _34: char;
let _35: *const (i8,);
let _36: f64;
let _37: (i8,);
let _38: bool;
let _39: [i128; 3];
let _40: f64;
let _41: isize;
let _42: Adt47;
let _43: i64;
let _44: isize;
let _45: [bool; 6];
let _46: f64;
let _47: *const [i32; 2];
let _48: f32;
let _49: [i64; 4];
let _50: char;
let _51: &'static mut i16;
let _52: u128;
let _53: f64;
let _54: &'static mut isize;
let _55: *const &'static mut &'static mut (*mut i16, usize, char);
let _56: usize;
let _57: [bool; 6];
let _58: Adt47;
let _59: &'static (i8,);
let _60: &'static i64;
let _61: [i16; 7];
let _62: f32;
let _63: bool;
let _64: &'static usize;
let _65: [i64; 6];
let _66: Adt58;
let _67: f64;
let _68: u128;
let _69: [i64; 6];
let _70: [i16; 7];
let _71: ([u8; 1],);
let _72: usize;
let _73: (isize,);
let _74: &'static [u8; 1];
let _75: char;
let _76: &'static mut i64;
let _77: (f64, usize, bool);
let _78: [u128; 5];
let _79: [i128; 3];
let _80: *mut *const i128;
let _81: *const &'static mut &'static mut (*mut i16, usize, char);
let _82: *const &'static *const (i8, [u32; 2], [i32; 7], u32);
let _83: ();
let _84: ();
{
_3 = 32537_i16 as f64;
RET = (-4632959857198954117_i64) as isize;
RET = 9223372036854775807_isize;
RET = 625361405_i32 as isize;
RET = 9223372036854775807_isize;
_2 = [213_u8];
_2 = [203_u8];
_3 = 1409217164467309117_i64 as f64;
_2 = [212_u8];
_2 = [17_u8];
_3 = 11129932514555875065_u64 as f64;
RET = -(-9223372036854775808_isize);
_3 = (-25213_i16) as f64;
_3 = 1081147640_i32 as f64;
_2 = [92_u8];
RET = 30_isize + 9223372036854775807_isize;
RET = 9223372036854775807_isize | (-9223372036854775808_isize);
_2 = [1_u8];
_3 = 181_u8 as f64;
_2 = [34_u8];
RET = (-9223372036854775808_isize);
_3 = (-3494396980227716336_i64) as f64;
_2 = [177_u8];
match RET {
0 => bb1,
1 => bb2,
340282366920938463454151235394913435648 => bb4,
_ => bb3
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
_3 = (-4852070804289174356_i64) as f64;
_2 = [37_u8];
_3 = 604455953_u32 as f64;
_5 = '\u{56eda}';
_2 = [194_u8];
_5 = '\u{d0757}';
RET = (-9223372036854775808_isize) - (-96_isize);
_3 = 1497552981_i32 as f64;
_2 = [61_u8];
_3 = 8188_i16 as f64;
_2 = [86_u8];
RET = 86_isize & (-4_isize);
_3 = 42_u8 as f64;
_2 = [249_u8];
RET = (-55_isize) + 91_isize;
RET = 0_usize as isize;
_6 = !(-84367530416691870424711568243971967591_i128);
_2 = [160_u8];
_2 = [126_u8];
_2 = [80_u8];
_3 = 24436_i16 as f64;
_2 = [115_u8];
RET = (-9223372036854775808_isize) ^ (-9223372036854775808_isize);
_2 = [153_u8];
_2 = [216_u8];
_3 = 4_usize as f64;
_3 = _6 as f64;
_6 = (-197202158_i32) as i128;
_2 = [94_u8];
Goto(bb5)
}
bb5 = {
_6 = 71069719718398298809642168831045760443_i128 >> RET;
_3 = 17548050971725021306_u64 as f64;
RET = !(-5_isize);
_5 = '\u{44cc8}';
_5 = '\u{cd07b}';
_6 = (-913993478_i32) as i128;
_5 = '\u{18bb2}';
RET = !(-85_isize);
_6 = 54241321220794950041376521842925118453_i128 + 140656872786749106725307912149485385757_i128;
RET = -9223372036854775807_isize;
_6 = 848117312_i32 as i128;
_5 = '\u{7798e}';
_3 = 309096009895764459476070751296924191556_u128 as f64;
RET = 5_usize as isize;
_7 = !(-121639812_i32);
_5 = '\u{fe2ff}';
_6 = !156325796603108056645474449574854442350_i128;
_2 = [76_u8];
_3 = 3982632363240074173_u64 as f64;
_6 = _5 as i128;
_7 = (-1163527734_i32);
_7 = (-2108211230_i32) ^ (-1603721004_i32);
RET = 9223372036854775807_isize;
Call(_2 = fn8(Move(_1), _5, _6, RET), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
_5 = '\u{d36b1}';
_2 = [246_u8];
RET = (-34_isize);
_7 = 1079223204_i32;
_7 = (-1669086170_i32);
_3 = 54091863527561497131384782169323210201_u128 as f64;
_6 = (-95243112303593106407743855330060905719_i128);
RET = _7 as isize;
RET = (-9223372036854775808_isize) << _7;
_2 = [31_u8];
_9 = !9_i8;
_6 = (-43125476370044763730320109734802895897_i128) ^ 6909174897809344377750160969292009154_i128;
match _7 {
0 => bb5,
1 => bb2,
2 => bb3,
3 => bb7,
340282366920938463463374607430099125286 => bb9,
_ => bb8
}
}
bb7 = {
_6 = 71069719718398298809642168831045760443_i128 >> RET;
_3 = 17548050971725021306_u64 as f64;
RET = !(-5_isize);
_5 = '\u{44cc8}';
_5 = '\u{cd07b}';
_6 = (-913993478_i32) as i128;
_5 = '\u{18bb2}';
RET = !(-85_isize);
_6 = 54241321220794950041376521842925118453_i128 + 140656872786749106725307912149485385757_i128;
RET = -9223372036854775807_isize;
_6 = 848117312_i32 as i128;
_5 = '\u{7798e}';
_3 = 309096009895764459476070751296924191556_u128 as f64;
RET = 5_usize as isize;
_7 = !(-121639812_i32);
_5 = '\u{fe2ff}';
_6 = !156325796603108056645474449574854442350_i128;
_2 = [76_u8];
_3 = 3982632363240074173_u64 as f64;
_6 = _5 as i128;
_7 = (-1163527734_i32);
_7 = (-2108211230_i32) ^ (-1603721004_i32);
RET = 9223372036854775807_isize;
Call(_2 = fn8(Move(_1), _5, _6, RET), ReturnTo(bb6), UnwindUnreachable())
}
bb8 = {
Return()
}
bb9 = {
_6 = (-11214279477596507211419815157575844457_i128) | (-63043905131130941240318116121483578995_i128);
_7 = 99763917916443142385472410401102153766_u128 as i32;
_9 = !(-123_i8);
_9 = 122_i8;
_9 = (-119_i8) + 108_i8;
RET = 9223372036854775807_isize << _9;
RET = -(-36_isize);
_3 = 11769_u16 as f64;
RET = 24_isize | 97_isize;
_6 = !45115786775931606399033712365875972177_i128;
_10 = true;
_6 = 158976929591566697649698633879667133809_i128 - (-43289287022208099303943520378692635407_i128);
_3 = _7 as f64;
_5 = '\u{94d0}';
_11 = RET - RET;
_6 = 147298753784671743108946024508565062950_i128 + (-166225950971997520693847711124902547780_i128);
RET = _11;
_2 = [65_u8];
_11 = !RET;
_11 = 295372353503019880839639053469834615230_u128 as isize;
_12 = [_7,_7];
_7 = _5 as i32;
Call(_12 = core::intrinsics::transmute(RET), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_14 = 7188125497930575577_i64 + 1794936979513684552_i64;
_7 = -2138970013_i32;
_3 = (-32026_i16) as f64;
_10 = false;
_9 = 3730023979_u32 as i8;
_14 = (-5202993936187506325_i64) << _6;
_7 = _11 as i32;
RET = -_11;
_14 = (-2241083370554249690_i64) >> _6;
_3 = 3423300722346429966_usize as f64;
_10 = !false;
_9 = 24_i8 >> _6;
_12 = [_7,_7];
_12 = [_7,_7];
_9 = 0_i8 ^ (-78_i8);
_7 = -1495228134_i32;
_12 = [_7,_7];
_7 = (-804717963_i32) >> _11;
_7 = (-276943655_i32);
Goto(bb11)
}
bb11 = {
_5 = '\u{51122}';
_14 = 7127630018357166339_i64 | 3739861736531163135_i64;
_16 = _11 as f32;
_5 = '\u{63085}';
_11 = RET * RET;
Goto(bb12)
}
bb12 = {
_14 = (-7256040693696941318_i64);
RET = _5 as isize;
_12 = [_7,_7];
_11 = RET;
RET = _11;
_12 = [_7,_7];
_14 = -9066148276446693642_i64;
_16 = _6 as f32;
_7 = (-1867279914_i32) >> _14;
_3 = _16 as f64;
_14 = _5 as i64;
_5 = '\u{a05d9}';
_18 = 366430495_u32;
_9 = (-12_i8);
_23 = 13884978705631668274_u64;
Goto(bb13)
}
bb13 = {
_6 = (-1561019242545123151039384458248220279_i128);
_14 = !8247462379275379753_i64;
_16 = _11 as f32;
_3 = _23 as f64;
_7 = !(-512786152_i32);
_6 = 146349310335465836950312984077792435752_i128 >> _18;
_23 = !14469867839024587815_u64;
_2 = [99_u8];
_7 = 29662_u16 as i32;
_5 = '\u{931ea}';
_2 = [54_u8];
_10 = _9 >= _9;
_26 = !_23;
_25 = -_7;
_5 = '\u{80d0e}';
_7 = _25 >> _6;
_16 = RET as f32;
_9 = 58_i8 & (-27_i8);
_25 = (-29541_i16) as i32;
_12 = [_25,_7];
_5 = '\u{2967d}';
_27 = _11 + _11;
_27 = _11;
match _18 {
0 => bb14,
366430495 => bb16,
_ => bb15
}
}
bb14 = {
_14 = (-7256040693696941318_i64);
RET = _5 as isize;
_12 = [_7,_7];
_11 = RET;
RET = _11;
_12 = [_7,_7];
_14 = -9066148276446693642_i64;
_16 = _6 as f32;
_7 = (-1867279914_i32) >> _14;
_3 = _16 as f64;
_14 = _5 as i64;
_5 = '\u{a05d9}';
_18 = 366430495_u32;
_9 = (-12_i8);
_23 = 13884978705631668274_u64;
Goto(bb13)
}
bb15 = {
Return()
}
bb16 = {
_7 = _25;
_7 = _25 ^ _25;
_7 = _25 * _25;
_26 = _23 >> _14;
_3 = _16 as f64;
_26 = 9759_i16 as u64;
_11 = _27 * RET;
_3 = 51674479800587035440857336900332352997_u128 as f64;
_10 = !false;
_28 = 129505469025890060142760078156512698413_u128 as f32;
RET = _11 >> _18;
_18 = 3729979479_u32;
_16 = _28 - _28;
_7 = _26 as i32;
_5 = '\u{3b321}';
_6 = 50736216125433808289566794278600234490_i128;
_23 = _26;
_31 = 4154_i16 * (-10581_i16);
_23 = !_26;
_8 = &mut _31;
(*_8) = (-23871_i16) + (-29661_i16);
(*_8) = 27501_i16 & 9083_i16;
_3 = _28 as f64;
match _6 {
50736216125433808289566794278600234490 => bb18,
_ => bb17
}
}
bb17 = {
_3 = (-4852070804289174356_i64) as f64;
_2 = [37_u8];
_3 = 604455953_u32 as f64;
_5 = '\u{56eda}';
_2 = [194_u8];
_5 = '\u{d0757}';
RET = (-9223372036854775808_isize) - (-96_isize);
_3 = 1497552981_i32 as f64;
_2 = [61_u8];
_3 = 8188_i16 as f64;
_2 = [86_u8];
RET = 86_isize & (-4_isize);
_3 = 42_u8 as f64;
_2 = [249_u8];
RET = (-55_isize) + 91_isize;
RET = 0_usize as isize;
_6 = !(-84367530416691870424711568243971967591_i128);
_2 = [160_u8];
_2 = [126_u8];
_2 = [80_u8];
_3 = 24436_i16 as f64;
_2 = [115_u8];
RET = (-9223372036854775808_isize) ^ (-9223372036854775808_isize);
_2 = [153_u8];
_2 = [216_u8];
_3 = 4_usize as f64;
_3 = _6 as f64;
_6 = (-197202158_i32) as i128;
_2 = [94_u8];
Goto(bb5)
}
bb18 = {
(*_8) = !(-24868_i16);
(*_8) = !17620_i16;
(*_8) = 16526_i16;
_6 = 42157110119343474361261940889208242013_i128 >> _9;
(*_8) = 2037_i16 >> _27;
(*_8) = (-28478_i16) << _7;
_6 = (-45041409730062921144195986760639490567_i128) - (-140747948084375997905602779181774597205_i128);
_2 = [10_u8];
_10 = false;
_16 = 41979650796694318119850589045770288933_u128 as f32;
_5 = '\u{2a7}';
(*_8) = 62_u8 as i16;
_12 = [_25,_7];
(*_8) = (-26433_i16) ^ (-8162_i16);
_7 = -_25;
_6 = -(-108684520803862792384162505913478190871_i128);
(*_8) = (-28123_i16) << _27;
(*_8) = 12925_i16 ^ (-3315_i16);
_7 = _25;
Goto(bb19)
}
bb19 = {
(*_8) = (-25289_i16) * 14073_i16;
(*_8) = !15304_i16;
_2 = [139_u8];
_12 = [_25,_7];
_26 = _23;
RET = _27 + _11;
(*_8) = (-2601_i16) | 6104_i16;
_26 = _23 + _23;
_25 = !_7;
(*_8) = _6 as i16;
_14 = (-356802524555490999_i64) << (*_8);
(*_8) = (-8044_i16) & 31735_i16;
_2 = [136_u8];
(*_8) = (-30902_i16) | (-17762_i16);
_9 = -(-1_i8);
_2 = [255_u8];
_14 = -4983475502393562221_i64;
(*_8) = 331048021584481599198082718415975054777_u128 as i16;
_32 = _5;
(*_8) = 32595_i16;
Goto(bb20)
}
bb20 = {
(*_8) = _9 as i16;
_10 = false;
(*_8) = -12514_i16;
_10 = true;
(*_8) = (-15710_i16) - (-4019_i16);
RET = _11 | _27;
_11 = _27;
(*_8) = _18 as i16;
_32 = _5;
_26 = !_23;
(*_8) = (-30724_i16);
_34 = _5;
_34 = _32;
_14 = 2458522754526928939_i64;
_28 = _16;
Goto(bb21)
}
bb21 = {
(*_8) = _6 as i16;
(*_8) = (-32257_i16) << RET;
_2 = [46_u8];
_36 = _14 as f64;
(*_8) = -(-4080_i16);
_5 = _32;
_25 = 40248_u16 as i32;
_37 = (_9,);
_9 = 36815419803746833198207356087588009251_u128 as i8;
_39 = [_6,_6,_6];
_37 = (_9,);
_36 = -_3;
RET = !_11;
_40 = _3 * _3;
(*_8) = _6 as i16;
(*_8) = 6307_i16 ^ 23383_i16;
_10 = true | true;
(*_8) = _9 as i16;
(*_8) = 4688_i16 - (-30386_i16);
_38 = _10 | _10;
_26 = _23 ^ _23;
(*_8) = _18 as i16;
_33 = _36;
(*_8) = (-22273_i16) << _11;
(*_8) = 18698_i16 & 4919_i16;
(*_8) = (-28705_i16) & (-27979_i16);
_37.0 = _9 * _9;
_14 = (-5096020583376442127_i64);
Goto(bb22)
}
bb22 = {
_37 = (_9,);
_11 = -_27;
(*_8) = (-3000_i16) * (-22744_i16);
(*_8) = 140_u8 as i16;
_9 = !_37.0;
_12 = [_25,_25];
(*_8) = (-17706_i16) << _26;
(*_8) = (-1604_i16);
_35 = core::ptr::addr_of!(_37);
(*_35) = (_9,);
(*_8) = 24713_i16;
(*_35) = (_9,);
match (*_8) {
0 => bb23,
1 => bb24,
2 => bb25,
3 => bb26,
4 => bb27,
5 => bb28,
24713 => bb30,
_ => bb29
}
}
bb23 = {
_6 = (-11214279477596507211419815157575844457_i128) | (-63043905131130941240318116121483578995_i128);
_7 = 99763917916443142385472410401102153766_u128 as i32;
_9 = !(-123_i8);
_9 = 122_i8;
_9 = (-119_i8) + 108_i8;
RET = 9223372036854775807_isize << _9;
RET = -(-36_isize);
_3 = 11769_u16 as f64;
RET = 24_isize | 97_isize;
_6 = !45115786775931606399033712365875972177_i128;
_10 = true;
_6 = 158976929591566697649698633879667133809_i128 - (-43289287022208099303943520378692635407_i128);
_3 = _7 as f64;
_5 = '\u{94d0}';
_11 = RET - RET;
_6 = 147298753784671743108946024508565062950_i128 + (-166225950971997520693847711124902547780_i128);
RET = _11;
_2 = [65_u8];
_11 = !RET;
_11 = 295372353503019880839639053469834615230_u128 as isize;
_12 = [_7,_7];
_7 = _5 as i32;
Call(_12 = core::intrinsics::transmute(RET), ReturnTo(bb10), UnwindUnreachable())
}
bb24 = {
Return()
}
bb25 = {
Return()
}
bb26 = {
(*_8) = !(-24868_i16);
(*_8) = !17620_i16;
(*_8) = 16526_i16;
_6 = 42157110119343474361261940889208242013_i128 >> _9;
(*_8) = 2037_i16 >> _27;
(*_8) = (-28478_i16) << _7;
_6 = (-45041409730062921144195986760639490567_i128) - (-140747948084375997905602779181774597205_i128);
_2 = [10_u8];
_10 = false;
_16 = 41979650796694318119850589045770288933_u128 as f32;
_5 = '\u{2a7}';
(*_8) = 62_u8 as i16;
_12 = [_25,_7];
(*_8) = (-26433_i16) ^ (-8162_i16);
_7 = -_25;
_6 = -(-108684520803862792384162505913478190871_i128);
(*_8) = (-28123_i16) << _27;
(*_8) = 12925_i16 ^ (-3315_i16);
_7 = _25;
Goto(bb19)
}
bb27 = {
_5 = '\u{d36b1}';
_2 = [246_u8];
RET = (-34_isize);
_7 = 1079223204_i32;
_7 = (-1669086170_i32);
_3 = 54091863527561497131384782169323210201_u128 as f64;
_6 = (-95243112303593106407743855330060905719_i128);
RET = _7 as isize;
RET = (-9223372036854775808_isize) << _7;
_2 = [31_u8];
_9 = !9_i8;
_6 = (-43125476370044763730320109734802895897_i128) ^ 6909174897809344377750160969292009154_i128;
match _7 {
0 => bb5,
1 => bb2,
2 => bb3,
3 => bb7,
340282366920938463463374607430099125286 => bb9,
_ => bb8
}
}
bb28 = {
_3 = (-4852070804289174356_i64) as f64;
_2 = [37_u8];
_3 = 604455953_u32 as f64;
_5 = '\u{56eda}';
_2 = [194_u8];
_5 = '\u{d0757}';
RET = (-9223372036854775808_isize) - (-96_isize);
_3 = 1497552981_i32 as f64;
_2 = [61_u8];
_3 = 8188_i16 as f64;
_2 = [86_u8];
RET = 86_isize & (-4_isize);
_3 = 42_u8 as f64;
_2 = [249_u8];
RET = (-55_isize) + 91_isize;
RET = 0_usize as isize;
_6 = !(-84367530416691870424711568243971967591_i128);
_2 = [160_u8];
_2 = [126_u8];
_2 = [80_u8];
_3 = 24436_i16 as f64;
_2 = [115_u8];
RET = (-9223372036854775808_isize) ^ (-9223372036854775808_isize);
_2 = [153_u8];
_2 = [216_u8];
_3 = 4_usize as f64;
_3 = _6 as f64;
_6 = (-197202158_i32) as i128;
_2 = [94_u8];
Goto(bb5)
}
bb29 = {
_6 = 71069719718398298809642168831045760443_i128 >> RET;
_3 = 17548050971725021306_u64 as f64;
RET = !(-5_isize);
_5 = '\u{44cc8}';
_5 = '\u{cd07b}';
_6 = (-913993478_i32) as i128;
_5 = '\u{18bb2}';
RET = !(-85_isize);
_6 = 54241321220794950041376521842925118453_i128 + 140656872786749106725307912149485385757_i128;
RET = -9223372036854775807_isize;
_6 = 848117312_i32 as i128;
_5 = '\u{7798e}';
_3 = 309096009895764459476070751296924191556_u128 as f64;
RET = 5_usize as isize;
_7 = !(-121639812_i32);
_5 = '\u{fe2ff}';
_6 = !156325796603108056645474449574854442350_i128;
_2 = [76_u8];
_3 = 3982632363240074173_u64 as f64;
_6 = _5 as i128;
_7 = (-1163527734_i32);
_7 = (-2108211230_i32) ^ (-1603721004_i32);
RET = 9223372036854775807_isize;
Call(_2 = fn8(Move(_1), _5, _6, RET), ReturnTo(bb6), UnwindUnreachable())
}
bb30 = {
(*_35) = (_9,);
(*_8) = 1505_i16 - (-4667_i16);
(*_35) = (_9,);
(*_8) = 4866_i16;
(*_35).0 = _9 ^ _9;
_43 = _14;
(*_35) = (_9,);
(*_35).0 = _9 ^ _9;
(*_8) = 30291_i16 >> (*_35).0;
(*_35) = (_9,);
(*_8) = !(-29951_i16);
_14 = _43;
_32 = _34;
(*_8) = (-28108_i16) - 6095_i16;
(*_35).0 = _9;
_44 = _11 - _11;
(*_35).0 = _9 << _14;
(*_8) = (-9138_i16);
(*_8) = 29619_i16 * (-12937_i16);
_28 = _16;
(*_35) = (_9,);
_35 = core::ptr::addr_of!((*_35));
(*_35) = (_9,);
_36 = _33 * _40;
(*_8) = 2877_i16 + (-32256_i16);
Goto(bb31)
}
bb31 = {
(*_35).0 = -_9;
(*_35) = (_9,);
_6 = !112047720335635092342667259095612781528_i128;
_48 = _28 * _16;
_9 = (*_35).0;
_5 = _32;
(*_35).0 = _9;
(*_8) = 15102_i16;
RET = _11 | _11;
(*_35) = (_9,);
_32 = _5;
_25 = _7;
_38 = (*_8) > (*_8);
(*_35).0 = _9 << (*_8);
(*_35) = (_9,);
_47 = core::ptr::addr_of!(_12);
(*_8) = (-21819_i16);
(*_47) = [_25,_25];
(*_35).0 = _9 << _43;
(*_35).0 = _9;
(*_8) = 7850_i16;
(*_47) = [_7,_25];
Goto(bb32)
}
bb32 = {
(*_35) = (_9,);
(*_35) = (_9,);
_49 = [_14,_14,_43,_14];
_25 = _3 as i32;
(*_47) = [_7,_7];
_28 = 34577964922632034269321002259627239440_u128 as f32;
(*_35) = (_9,);
(*_35).0 = _9;
_32 = _34;
(*_47) = [_7,_7];
(*_35) = (_9,);
(*_35).0 = 149_u8 as i8;
_3 = _36 - _36;
_18 = 3610967194_u32 | 2272723815_u32;
_33 = _3;
(*_47) = [_25,_7];
(*_8) = (-17466_i16) << _11;
_6 = (-19013203042055357769954522770595225065_i128) - 127666448702724851037978540562653506894_i128;
_9 = (*_35).0 ^ (*_35).0;
(*_47) = [_7,_7];
(*_35).0 = _9 | _9;
(*_35).0 = _9 >> (*_8);
(*_47) = [_25,_25];
Goto(bb33)
}
bb33 = {
_14 = _43 ^ _43;
(*_35).0 = _9 >> (*_8);
(*_35).0 = _9 << _27;
_48 = _28 - _16;
(*_47) = [_7,_25];
(*_35) = (_9,);
(*_35) = (_9,);
_54 = &mut _11;
(*_47) = [_25,_25];
(*_8) = (-6424_i16) | (-16455_i16);
(*_8) = (-25944_i16) | (-7486_i16);
(*_47) = [_25,_25];
_12 = [_25,_7];
(*_35) = (_9,);
(*_35) = (_9,);
Goto(bb34)
}
bb34 = {
_27 = (*_54) * (*_54);
_34 = _5;
_40 = -_33;
_38 = _10;
(*_54) = -_27;
_23 = _14 as u64;
_33 = _36;
(*_47) = [_25,_7];
_36 = _40 * _33;
(*_54) = -RET;
Goto(bb35)
}
bb35 = {
(*_47) = [_25,_25];
(*_35).0 = _9;
_34 = _5;
(*_35).0 = 2429_u16 as i8;
_34 = _5;
_26 = 61895_u16 as u64;
(*_8) = _10 as i16;
_54 = &mut RET;
(*_35).0 = _9 + _9;
Goto(bb36)
}
bb36 = {
match _43 {
0 => bb9,
340282366920938463458278586848391769329 => bb38,
_ => bb37
}
}
bb37 = {
_6 = 71069719718398298809642168831045760443_i128 >> RET;
_3 = 17548050971725021306_u64 as f64;
RET = !(-5_isize);
_5 = '\u{44cc8}';
_5 = '\u{cd07b}';
_6 = (-913993478_i32) as i128;
_5 = '\u{18bb2}';
RET = !(-85_isize);
_6 = 54241321220794950041376521842925118453_i128 + 140656872786749106725307912149485385757_i128;
RET = -9223372036854775807_isize;
_6 = 848117312_i32 as i128;
_5 = '\u{7798e}';
_3 = 309096009895764459476070751296924191556_u128 as f64;
RET = 5_usize as isize;
_7 = !(-121639812_i32);
_5 = '\u{fe2ff}';
_6 = !156325796603108056645474449574854442350_i128;
_2 = [76_u8];
_3 = 3982632363240074173_u64 as f64;
_6 = _5 as i128;
_7 = (-1163527734_i32);
_7 = (-2108211230_i32) ^ (-1603721004_i32);
RET = 9223372036854775807_isize;
Call(_2 = fn8(Move(_1), _5, _6, RET), ReturnTo(bb6), UnwindUnreachable())
}
bb38 = {
_59 = &(*_35);
_27 = (*_54) - (*_54);
(*_47) = [_7,_7];
_52 = 140212980822782279337292424694422140103_u128 & 17141834185519343986989049838870436247_u128;
(*_35) = (_9,);
(*_47) = [_7,_25];
(*_35) = (_9,);
(*_35) = (_9,);
(*_35) = (_9,);
(*_54) = _44;
(*_47) = [_25,_7];
(*_8) = (-12855_i16);
(*_35).0 = !_9;
(*_35) = (_9,);
(*_35).0 = _9 + _9;
(*_8) = 3556_i16 & (-6794_i16);
(*_8) = _18 as i16;
_45 = [_10,_10,_38,_10,_10,_38];
(*_47) = [_25,_25];
match _43 {
340282366920938463458278586848391769329 => bb39,
_ => bb37
}
}
bb39 = {
(*_54) = 2964_u16 as isize;
_53 = -_33;
(*_54) = _44;
(*_35).0 = _9;
_60 = &_14;
(*_8) = 22989_i16 << (*_54);
_28 = 214_u8 as f32;
(*_35) = (_9,);
_62 = _28 * _28;
(*_35) = (_9,);
Goto(bb40)
}
bb40 = {
_25 = -_7;
(*_35).0 = _9 << (*_54);
_63 = _38 ^ _38;
_33 = _36 - _3;
(*_8) = -(-11140_i16);
(*_35).0 = _9 | _9;
(*_35).0 = _9 << (*_60);
(*_35).0 = 245_u8 as i8;
_25 = _7 - _7;
(*_35).0 = _9 << _25;
(*_8) = 13031_i16 + (-9206_i16);
Goto(bb41)
}
bb41 = {
_61 = [(*_8),(*_8),(*_8),(*_8),(*_8),(*_8),(*_8)];
_32 = _34;
(*_35) = (_9,);
(*_8) = !(-18047_i16);
_37.0 = _9;
_3 = -_40;
(*_35).0 = (*_8) as i8;
(*_47) = [_7,_25];
(*_8) = -(-26103_i16);
_62 = _16;
_35 = core::ptr::addr_of!((*_35));
(*_35) = (_9,);
(*_35).0 = !_9;
(*_8) = _6 as i16;
(*_54) = _27;
(*_54) = _23 as isize;
(*_54) = !_27;
Goto(bb42)
}
bb42 = {
(*_54) = !_27;
(*_54) = 0_usize as isize;
(*_47) = [_25,_25];
(*_35).0 = _9 << (*_8);
(*_47) = [_25,_25];
(*_8) = -20419_i16;
_72 = !2810380246850146490_usize;
(*_54) = -_27;
_67 = _53 * _33;
_12 = [_7,_25];
(*_54) = _27 + _27;
_72 = 3_usize;
(*_8) = _61[_72] << (*_54);
(*_54) = -_27;
Goto(bb43)
}
bb43 = {
_56 = _72;
(*_35) = (_9,);
(*_35).0 = _9;
(*_54) = -_27;
_73.0 = (*_54);
_65 = [(*_60),(*_60),_14,(*_60),(*_60),(*_60)];
match _43 {
0 => bb41,
1 => bb14,
2 => bb9,
340282366920938463458278586848391769329 => bb44,
_ => bb39
}
}
bb44 = {
(*_35).0 = 33882_u16 as i8;
(*_35) = (_9,);
(*_54) = _27 << (*_8);
(*_8) = _61[_72] | _61[_72];
(*_35).0 = _9 - _9;
(*_35) = (_9,);
(*_35).0 = _23 as i8;
_70 = [(*_8),(*_8),(*_8),(*_8),(*_8),(*_8),(*_8)];
(*_8) = _61[_72];
(*_35) = (_9,);
Goto(bb45)
}
bb45 = {
Call(_83 = dump_var(7_usize, 72_usize, Move(_72), 65_usize, Move(_65), 61_usize, Move(_61), 26_usize, Move(_26)), ReturnTo(bb46), UnwindUnreachable())
}
bb46 = {
Call(_83 = dump_var(7_usize, 37_usize, Move(_37), 9_usize, Move(_9), 31_usize, Move(_31), 39_usize, Move(_39)), ReturnTo(bb47), UnwindUnreachable())
}
bb47 = {
Call(_83 = dump_var(7_usize, 49_usize, Move(_49), 5_usize, Move(_5), 10_usize, Move(_10), 38_usize, Move(_38)), ReturnTo(bb48), UnwindUnreachable())
}
bb48 = {
Call(_83 = dump_var(7_usize, 14_usize, Move(_14), 34_usize, Move(_34), 32_usize, Move(_32), 11_usize, Move(_11)), ReturnTo(bb49), UnwindUnreachable())
}
bb49 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn8(mut _1: *const Adt28,mut _2: char,mut _3: i128,mut _4: isize) -> [u8; 1] {
mir! {
type RET = [u8; 1];
let _5: (Adt55, *const (i8,));
let _6: &'static i64;
let _7: *const &'static mut &'static mut (*mut i16, usize, char);
let _8: bool;
let _9: char;
let _10: isize;
let _11: ((*mut i16, u64), bool, [u32; 2]);
let _12: &'static *const (i8, [u32; 2], [i32; 7], u32);
let _13: *mut *const i128;
let _14: *mut i16;
let _15: i32;
let _16: ([u8; 1],);
let _17: &'static (i8,);
let _18: bool;
let _19: *mut *const i128;
let _20: &'static [u8; 1];
let _21: *const (i8,);
let _22: isize;
let _23: u64;
let _24: (*mut i16, usize, char);
let _25: isize;
let _26: (Adt51, &'static i64, *const Adt28);
let _27: u64;
let _28: i128;
let _29: *const [u128; 5];
let _30: char;
let _31: *const (i8, [u32; 2], [i32; 7], u32);
let _32: u16;
let _33: &'static usize;
let _34: &'static mut &'static mut isize;
let _35: [u8; 7];
let _36: f64;
let _37: *mut [i32; 7];
let _38: isize;
let _39: *const [u128; 5];
let _40: isize;
let _41: bool;
let _42: &'static mut i16;
let _43: usize;
let _44: &'static (i8,);
let _45: (i8,);
let _46: &'static [u8; 1];
let _47: bool;
let _48: bool;
let _49: usize;
let _50: i32;
let _51: [i16; 7];
let _52: i32;
let _53: bool;
let _54: f32;
let _55: f64;
let _56: bool;
let _57: i32;
let _58: *mut [i32; 7];
let _59: &'static isize;
let _60: isize;
let _61: bool;
let _62: [i32; 2];
let _63: usize;
let _64: Adt84;
let _65: ((Adt51, &'static i64, *const Adt28), [u128; 5], i64);
let _66: u64;
let _67: bool;
let _68: u8;
let _69: u64;
let _70: ((f64, usize, bool),);
let _71: *mut (&'static i64, u16, (i8,));
let _72: Adt58;
let _73: char;
let _74: [i64; 6];
let _75: *const [i32; 2];
let _76: i8;
let _77: &'static mut &'static mut isize;
let _78: isize;
let _79: (*const (i8, [u32; 2], [i32; 7], u32), [u8; 7]);
let _80: (bool, u128, usize);
let _81: f64;
let _82: f32;
let _83: *const &'static usize;
let _84: *const i128;
let _85: bool;
let _86: u128;
let _87: *mut i16;
let _88: bool;
let _89: *const &'static *const (i8, [u32; 2], [i32; 7], u32);
let _90: Adt28;
let _91: isize;
let _92: ([u8; 1],);
let _93: [i32; 7];
let _94: &'static isize;
let _95: Adt84;
let _96: ();
let _97: ();
{
RET = [39_u8];
RET = [230_u8];
RET = [196_u8];
_4 = (-9223372036854775808_isize) * 9223372036854775807_isize;
_2 = '\u{41345}';
_3 = (-54624499584577472927185231194473788528_i128) + (-111524528449690401742502624307227242112_i128);
_3 = 83915094000175356977454341950568897545_i128;
_2 = '\u{501fa}';
_4 = _3 as isize;
_2 = '\u{c61e2}';
RET = [197_u8];
_4 = (-9223372036854775808_isize) << _3;
_3 = (-138833326026156326181199531063104310833_i128);
_2 = '\u{cfac6}';
_2 = '\u{4eb1b}';
_3 = 119160347739568736258364351547528871472_i128;
Goto(bb1)
}
bb1 = {
RET = [70_u8];
_2 = '\u{42d5f}';
_4 = (-38_isize) >> _3;
Goto(bb2)
}
bb2 = {
_3 = !(-134510366649249402836290914398986046096_i128);
_4 = !(-20_isize);
RET = [23_u8];
_4 = 9223372036854775807_isize;
RET = [31_u8];
_3 = false as i128;
_4 = -55_isize;
_2 = '\u{bb2cb}';
RET = [188_u8];
_8 = !false;
_4 = !(-74_isize);
_2 = '\u{c77d4}';
_8 = _2 != _2;
_9 = _2;
RET = [95_u8];
_10 = 162_u8 as isize;
_9 = _2;
_4 = 86880943_u32 as isize;
Call(_11.0.0 = fn9(_4, Move(_1), _9, _10, _4, _3, _9, _10, _10, _9), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_11.1 = _8 | _8;
_10 = (-20_i8) as isize;
_11.0.1 = !10255214158414777731_u64;
_4 = !_10;
RET = [5_u8];
_11.2 = [4069210645_u32,1280264902_u32];
_11.2 = [1016252134_u32,2672564548_u32];
_10 = _4 + _4;
_2 = _9;
RET = [3_u8];
_11.0.1 = 446002420690942215_u64 ^ 7935250803883677043_u64;
_16.0 = RET;
_15 = _3 as i32;
_3 = (-167063618595238456789894377506854843338_i128) & 5950696387818490650075209276849050474_i128;
_15 = _3 as i32;
_16 = (RET,);
RET = [72_u8];
_2 = _9;
_14 = Move(_11.0.0);
_8 = _11.1 | _11.1;
_10 = _4 & _4;
Call(_10 = core::intrinsics::bswap(_4), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_16.0 = [148_u8];
_10 = _4 & _4;
_11.1 = _8 >= _8;
_16 = (RET,);
_9 = _2;
_8 = _11.1 < _11.1;
_2 = _9;
_20 = &_16.0;
_18 = _11.1 != _11.1;
RET = [227_u8];
_15 = 1182988069_i32;
_20 = &RET;
_11.0.0 = Move(_14);
_11.1 = _2 < _2;
RET = [68_u8];
_4 = _10 - _10;
_10 = _4 << _4;
_9 = _2;
_3 = (-114200603641936472497497836181425192758_i128);
_8 = _18 != _18;
RET = _16.0;
_20 = &_16.0;
Goto(bb5)
}
bb5 = {
_20 = &RET;
_2 = _9;
_9 = _2;
_9 = _2;
_15 = (-158978361_i32);
_24.1 = !15174984380753250432_usize;
_23 = _11.0.1;
_4 = _10 ^ _10;
_14 = Move(_11.0.0);
_11.0.0 = Move(_14);
_15 = !(-1385893260_i32);
_11.0.1 = _23;
_20 = &_16.0;
_9 = _2;
_11.1 = !_8;
_24.2 = _2;
_20 = &RET;
RET = [96_u8];
_25 = _4 ^ _4;
_11.0.1 = _15 as u64;
_20 = &_16.0;
_11.0.1 = _23 * _23;
_14 = Move(_11.0.0);
match _3 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb6,
226081763279001990965876771250343018698 => bb8,
_ => bb7
}
}
bb6 = {
_16.0 = [148_u8];
_10 = _4 & _4;
_11.1 = _8 >= _8;
_16 = (RET,);
_9 = _2;
_8 = _11.1 < _11.1;
_2 = _9;
_20 = &_16.0;
_18 = _11.1 != _11.1;
RET = [227_u8];
_15 = 1182988069_i32;
_20 = &RET;
_11.0.0 = Move(_14);
_11.1 = _2 < _2;
RET = [68_u8];
_4 = _10 - _10;
_10 = _4 << _4;
_9 = _2;
_3 = (-114200603641936472497497836181425192758_i128);
_8 = _18 != _18;
RET = _16.0;
_20 = &_16.0;
Goto(bb5)
}
bb7 = {
_3 = !(-134510366649249402836290914398986046096_i128);
_4 = !(-20_isize);
RET = [23_u8];
_4 = 9223372036854775807_isize;
RET = [31_u8];
_3 = false as i128;
_4 = -55_isize;
_2 = '\u{bb2cb}';
RET = [188_u8];
_8 = !false;
_4 = !(-74_isize);
_2 = '\u{c77d4}';
_8 = _2 != _2;
_9 = _2;
RET = [95_u8];
_10 = 162_u8 as isize;
_9 = _2;
_4 = 86880943_u32 as isize;
Call(_11.0.0 = fn9(_4, Move(_1), _9, _10, _4, _3, _9, _10, _10, _9), ReturnTo(bb3), UnwindUnreachable())
}
bb8 = {
_24.0 = Move(_14);
_22 = !_25;
_26.0.fld6 = Move(_24.0);
_2 = _9;
_8 = !_11.1;
_26.0.fld1 = [146980873441338327661682023299633235019_u128,244316580084774378073476571505686662489_u128,248448033127530489961356748113670010659_u128,257361209249045409117967726889851064218_u128,83633193765527404461033589400560584386_u128];
_26.0.fld0.0 = 2763725803_u32 as f64;
_25 = _4 & _22;
_11.0.1 = _23 - _23;
_24 = (Move(_26.0.fld6), 4222603653208994370_usize, _9);
_26.0.fld0.2 = _8 < _11.1;
Goto(bb9)
}
bb9 = {
_26.0.fld3 = 9_u8 as u32;
RET = [167_u8];
_3 = (-35409557253636529771572591290475430378_i128);
_27 = !_23;
_29 = core::ptr::addr_of!(_26.0.fld1);
(*_29) = [142664365235274215257966263552908234288_u128,130466676450237713851434849353009735174_u128,6968818772314964489943498735381154473_u128,288533989307655975308057156898641436385_u128,309868969671170735274381876040357953907_u128];
(*_29) = [164048125571299680957046325367432781560_u128,237694215181180854618315285830071881943_u128,199906710867916864577899257396232059082_u128,99081751352789142849356911230392759616_u128,315356492329041317010601600564888369116_u128];
(*_29) = [214352214390250361201682720333316122213_u128,64645078330643681494842427771091394652_u128,156192535916566306850961910193144294947_u128,262663985900713215304918383257599717032_u128,30053905111564242725425779656072839889_u128];
_14 = Move(_24.0);
_24.0 = Move(_14);
match _24.1 {
0 => bb10,
1 => bb11,
2 => bb12,
3 => bb13,
4 => bb14,
5 => bb15,
6 => bb16,
4222603653208994370 => bb18,
_ => bb17
}
}
bb10 = {
_24.0 = Move(_14);
_22 = !_25;
_26.0.fld6 = Move(_24.0);
_2 = _9;
_8 = !_11.1;
_26.0.fld1 = [146980873441338327661682023299633235019_u128,244316580084774378073476571505686662489_u128,248448033127530489961356748113670010659_u128,257361209249045409117967726889851064218_u128,83633193765527404461033589400560584386_u128];
_26.0.fld0.0 = 2763725803_u32 as f64;
_25 = _4 & _22;
_11.0.1 = _23 - _23;
_24 = (Move(_26.0.fld6), 4222603653208994370_usize, _9);
_26.0.fld0.2 = _8 < _11.1;
Goto(bb9)
}
bb11 = {
_3 = !(-134510366649249402836290914398986046096_i128);
_4 = !(-20_isize);
RET = [23_u8];
_4 = 9223372036854775807_isize;
RET = [31_u8];
_3 = false as i128;
_4 = -55_isize;
_2 = '\u{bb2cb}';
RET = [188_u8];
_8 = !false;
_4 = !(-74_isize);
_2 = '\u{c77d4}';
_8 = _2 != _2;
_9 = _2;
RET = [95_u8];
_10 = 162_u8 as isize;
_9 = _2;
_4 = 86880943_u32 as isize;
Call(_11.0.0 = fn9(_4, Move(_1), _9, _10, _4, _3, _9, _10, _10, _9), ReturnTo(bb3), UnwindUnreachable())
}
bb12 = {
_16.0 = [148_u8];
_10 = _4 & _4;
_11.1 = _8 >= _8;
_16 = (RET,);
_9 = _2;
_8 = _11.1 < _11.1;
_2 = _9;
_20 = &_16.0;
_18 = _11.1 != _11.1;
RET = [227_u8];
_15 = 1182988069_i32;
_20 = &RET;
_11.0.0 = Move(_14);
_11.1 = _2 < _2;
RET = [68_u8];
_4 = _10 - _10;
_10 = _4 << _4;
_9 = _2;
_3 = (-114200603641936472497497836181425192758_i128);
_8 = _18 != _18;
RET = _16.0;
_20 = &_16.0;
Goto(bb5)
}
bb13 = {
_20 = &RET;
_2 = _9;
_9 = _2;
_9 = _2;
_15 = (-158978361_i32);
_24.1 = !15174984380753250432_usize;
_23 = _11.0.1;
_4 = _10 ^ _10;
_14 = Move(_11.0.0);
_11.0.0 = Move(_14);
_15 = !(-1385893260_i32);
_11.0.1 = _23;
_20 = &_16.0;
_9 = _2;
_11.1 = !_8;
_24.2 = _2;
_20 = &RET;
RET = [96_u8];
_25 = _4 ^ _4;
_11.0.1 = _15 as u64;
_20 = &_16.0;
_11.0.1 = _23 * _23;
_14 = Move(_11.0.0);
match _3 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb6,
226081763279001990965876771250343018698 => bb8,
_ => bb7
}
}
bb14 = {
_16.0 = [148_u8];
_10 = _4 & _4;
_11.1 = _8 >= _8;
_16 = (RET,);
_9 = _2;
_8 = _11.1 < _11.1;
_2 = _9;
_20 = &_16.0;
_18 = _11.1 != _11.1;
RET = [227_u8];
_15 = 1182988069_i32;
_20 = &RET;
_11.0.0 = Move(_14);
_11.1 = _2 < _2;
RET = [68_u8];
_4 = _10 - _10;
_10 = _4 << _4;
_9 = _2;
_3 = (-114200603641936472497497836181425192758_i128);
_8 = _18 != _18;
RET = _16.0;
_20 = &_16.0;
Goto(bb5)
}
bb15 = {
_11.1 = _8 | _8;
_10 = (-20_i8) as isize;
_11.0.1 = !10255214158414777731_u64;
_4 = !_10;
RET = [5_u8];
_11.2 = [4069210645_u32,1280264902_u32];
_11.2 = [1016252134_u32,2672564548_u32];
_10 = _4 + _4;
_2 = _9;
RET = [3_u8];
_11.0.1 = 446002420690942215_u64 ^ 7935250803883677043_u64;
_16.0 = RET;
_15 = _3 as i32;
_3 = (-167063618595238456789894377506854843338_i128) & 5950696387818490650075209276849050474_i128;
_15 = _3 as i32;
_16 = (RET,);
RET = [72_u8];
_2 = _9;
_14 = Move(_11.0.0);
_8 = _11.1 | _11.1;
_10 = _4 & _4;
Call(_10 = core::intrinsics::bswap(_4), ReturnTo(bb4), UnwindUnreachable())
}
bb16 = {
_3 = !(-134510366649249402836290914398986046096_i128);
_4 = !(-20_isize);
RET = [23_u8];
_4 = 9223372036854775807_isize;
RET = [31_u8];
_3 = false as i128;
_4 = -55_isize;
_2 = '\u{bb2cb}';
RET = [188_u8];
_8 = !false;
_4 = !(-74_isize);
_2 = '\u{c77d4}';
_8 = _2 != _2;
_9 = _2;
RET = [95_u8];
_10 = 162_u8 as isize;
_9 = _2;
_4 = 86880943_u32 as isize;
Call(_11.0.0 = fn9(_4, Move(_1), _9, _10, _4, _3, _9, _10, _10, _9), ReturnTo(bb3), UnwindUnreachable())
}
bb17 = {
RET = [70_u8];
_2 = '\u{42d5f}';
_4 = (-38_isize) >> _3;
Goto(bb2)
}
bb18 = {
_11.1 = _18;
_4 = -_25;
(*_29) = [7566114083671291310574907619749560832_u128,234977846364509985733474422398606565678_u128,258480816242967613516385631184336517584_u128,133819319948056709968367386871636440864_u128,148673486187381886875042514917348725150_u128];
_32 = 14214_u16 ^ 10685_u16;
(*_29) = [226267885355448129505670092872170877948_u128,245238328804642704860263375342664465056_u128,14932183809755222146603150614221484311_u128,116663508522584526705991090074240950890_u128,338364872822942781293826183459639202005_u128];
(*_29) = [175390027380496824007081383383863278579_u128,19808520774094772511287790470715253991_u128,32860375048202322202102103012881671306_u128,249540045567625331747013163348607588388_u128,140924042297111093635127397230104548146_u128];
_26.0.fld4 = [_15,_15];
_11.0 = (Move(_24.0), _27);
_1 = core::ptr::addr_of!(_26.0.fld2);
_30 = _2;
_4 = _32 as isize;
_26.2 = core::ptr::addr_of!((*_1));
Goto(bb19)
}
bb19 = {
RET = (*_20);
_24.2 = _9;
(*_29) = [64408502895852321375435220272845614329_u128,186642690066551529844360775961861515190_u128,3378333134969515846000603688303696877_u128,106935173945526777205776723311111556956_u128,42136547641384167014856347229112299746_u128];
_24.0 = Move(_11.0.0);
_26.0.fld1 = [240850507514681415527091425863277082924_u128,4581152780217108875449808636529258097_u128,90330694559028856909804336347355584964_u128,148424630362043309713128578835406929583_u128,34269164116934389171871622919523469794_u128];
_26.0.fld0.2 = _11.1;
_1 = core::ptr::addr_of!((*_1));
_29 = core::ptr::addr_of!((*_29));
_18 = !_11.1;
(*_29) = [224310431245176299527299201470110566975_u128,253051611555206387603613152760316737425_u128,214028042380249164042076654135344448621_u128,214915660800752311738106764601177664929_u128,317769055554311897307742204178995207784_u128];
_26.0.fld0.2 = !_18;
_22 = -_25;
_25 = -_22;
RET = [44_u8];
_28 = _3 * _3;
(*_29) = [28451483025016351676188510226322343082_u128,333388621781457077534820877712568362188_u128,88104954121112077998334119742134545743_u128,14288295195069770748117147724127729684_u128,122059086195170439334241672567800584051_u128];
(*_29) = [97582476676837133316399776587833624421_u128,4644047610976193619522581438582624410_u128,132134021365102792469403258101497900882_u128,78417955680972770164736498221628854849_u128,8757029689837863234837748424654444316_u128];
_20 = &RET;
_1 = core::ptr::addr_of!((*_1));
_26.0.fld0.1 = _24.1;
_26.0.fld6 = Move(_24.0);
_11.2 = [_26.0.fld3,_26.0.fld3];
(*_1) = Adt28::Variant0 { fld0: _26.0.fld0.2,fld1: _24.2,fld2: _26.0.fld0,fld3: _15,fld4: _26.0.fld0.0 };
_26.2 = core::ptr::addr_of!((*_1));
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)) = (Field::<f64>(Variant((*_1), 0), 4), _24.1, _26.0.fld0.2);
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).0 = -Field::<f64>(Variant((*_1), 0), 4);
place!(Field::<i32>(Variant((*_1), 0), 3)) = _25 as i32;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).0 = (-28116_i16) as f64;
place!(Field::<f64>(Variant(_26.0.fld2, 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).0 + Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).0;
Goto(bb20)
}
bb20 = {
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).2 = _22 >= _25;
place!(Field::<char>(Variant((*_1), 0), 1)) = _9;
place!(Field::<(f64, usize, bool)>(Variant(_26.0.fld2, 0), 2)).1 = _26.0.fld0.1 & _26.0.fld0.1;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).2 = Field::<bool>(Variant((*_1), 0), 0);
(*_29) = [76001712249893389304941046785146059707_u128,309077864228865782784073362205521329637_u128,50238579174946326699904140460831530355_u128,216039895824203985036918231248482280615_u128,76032367204637472244595925175707902548_u128];
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).0 = _3 as f64;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)) = (Field::<f64>(Variant((*_1), 0), 4), _24.1, Field::<bool>(Variant((*_1), 0), 0));
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)) = (Field::<f64>(Variant((*_1), 0), 4), _26.0.fld0.1, Field::<bool>(Variant((*_1), 0), 0));
(*_1) = Adt28::Variant0 { fld0: _8,fld1: _24.2,fld2: _26.0.fld0,fld3: _15,fld4: _26.0.fld0.0 };
(*_29) = [126168221454720548750643564568730558950_u128,68722232724323572578762514023082497718_u128,296584204145610841126186467768527047304_u128,203847579077308776147783962239289483245_u128,91164244968479302495712146707381367167_u128];
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)) = _26.0.fld0;
place!(Field::<i32>(Variant((*_1), 0), 3)) = -_15;
_29 = core::ptr::addr_of!((*_29));
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).2 = Field::<bool>(Variant((*_1), 0), 0) <= Field::<bool>(Variant((*_1), 0), 0);
_20 = &_16.0;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).1 = _24.1;
match _24.1 {
0 => bb18,
1 => bb21,
4222603653208994370 => bb23,
_ => bb22
}
}
bb21 = {
RET = (*_20);
_24.2 = _9;
(*_29) = [64408502895852321375435220272845614329_u128,186642690066551529844360775961861515190_u128,3378333134969515846000603688303696877_u128,106935173945526777205776723311111556956_u128,42136547641384167014856347229112299746_u128];
_24.0 = Move(_11.0.0);
_26.0.fld1 = [240850507514681415527091425863277082924_u128,4581152780217108875449808636529258097_u128,90330694559028856909804336347355584964_u128,148424630362043309713128578835406929583_u128,34269164116934389171871622919523469794_u128];
_26.0.fld0.2 = _11.1;
_1 = core::ptr::addr_of!((*_1));
_29 = core::ptr::addr_of!((*_29));
_18 = !_11.1;
(*_29) = [224310431245176299527299201470110566975_u128,253051611555206387603613152760316737425_u128,214028042380249164042076654135344448621_u128,214915660800752311738106764601177664929_u128,317769055554311897307742204178995207784_u128];
_26.0.fld0.2 = !_18;
_22 = -_25;
_25 = -_22;
RET = [44_u8];
_28 = _3 * _3;
(*_29) = [28451483025016351676188510226322343082_u128,333388621781457077534820877712568362188_u128,88104954121112077998334119742134545743_u128,14288295195069770748117147724127729684_u128,122059086195170439334241672567800584051_u128];
(*_29) = [97582476676837133316399776587833624421_u128,4644047610976193619522581438582624410_u128,132134021365102792469403258101497900882_u128,78417955680972770164736498221628854849_u128,8757029689837863234837748424654444316_u128];
_20 = &RET;
_1 = core::ptr::addr_of!((*_1));
_26.0.fld0.1 = _24.1;
_26.0.fld6 = Move(_24.0);
_11.2 = [_26.0.fld3,_26.0.fld3];
(*_1) = Adt28::Variant0 { fld0: _26.0.fld0.2,fld1: _24.2,fld2: _26.0.fld0,fld3: _15,fld4: _26.0.fld0.0 };
_26.2 = core::ptr::addr_of!((*_1));
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)) = (Field::<f64>(Variant((*_1), 0), 4), _24.1, _26.0.fld0.2);
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).0 = -Field::<f64>(Variant((*_1), 0), 4);
place!(Field::<i32>(Variant((*_1), 0), 3)) = _25 as i32;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).0 = (-28116_i16) as f64;
place!(Field::<f64>(Variant(_26.0.fld2, 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).0 + Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).0;
Goto(bb20)
}
bb22 = {
_3 = !(-134510366649249402836290914398986046096_i128);
_4 = !(-20_isize);
RET = [23_u8];
_4 = 9223372036854775807_isize;
RET = [31_u8];
_3 = false as i128;
_4 = -55_isize;
_2 = '\u{bb2cb}';
RET = [188_u8];
_8 = !false;
_4 = !(-74_isize);
_2 = '\u{c77d4}';
_8 = _2 != _2;
_9 = _2;
RET = [95_u8];
_10 = 162_u8 as isize;
_9 = _2;
_4 = 86880943_u32 as isize;
Call(_11.0.0 = fn9(_4, Move(_1), _9, _10, _4, _3, _9, _10, _10, _9), ReturnTo(bb3), UnwindUnreachable())
}
bb23 = {
place!(Field::<i32>(Variant((*_1), 0), 3)) = -_15;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).1 = _24.1;
place!(Field::<bool>(Variant((*_1), 0), 0)) = !_18;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).2 = Field::<bool>(Variant((*_1), 0), 0) != _8;
place!(Field::<f64>(Variant((*_1), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).0;
_26.0.fld0.1 = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).1;
place!(Field::<i32>(Variant((*_1), 0), 3)) = _15;
place!(Field::<i32>(Variant((*_1), 0), 3)) = _30 as i32;
(*_1) = Adt28::Variant0 { fld0: _18,fld1: _9,fld2: _26.0.fld0,fld3: _15,fld4: _26.0.fld0.0 };
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).1 = _24.1 | _26.0.fld0.1;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)) = (_26.0.fld0.0, _26.0.fld0.1, Field::<bool>(Variant((*_1), 0), 0));
_26.2 = core::ptr::addr_of!((*_1));
place!(Field::<f64>(Variant((*_1), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).0;
_11.0.1 = !_27;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).2 = Field::<bool>(Variant((*_1), 0), 0);
_11.1 = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).2;
match Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).1 {
0 => bb12,
1 => bb18,
2 => bb3,
3 => bb15,
4 => bb19,
4222603653208994370 => bb25,
_ => bb24
}
}
bb24 = {
_3 = !(-134510366649249402836290914398986046096_i128);
_4 = !(-20_isize);
RET = [23_u8];
_4 = 9223372036854775807_isize;
RET = [31_u8];
_3 = false as i128;
_4 = -55_isize;
_2 = '\u{bb2cb}';
RET = [188_u8];
_8 = !false;
_4 = !(-74_isize);
_2 = '\u{c77d4}';
_8 = _2 != _2;
_9 = _2;
RET = [95_u8];
_10 = 162_u8 as isize;
_9 = _2;
_4 = 86880943_u32 as isize;
Call(_11.0.0 = fn9(_4, Move(_1), _9, _10, _4, _3, _9, _10, _10, _9), ReturnTo(bb3), UnwindUnreachable())
}
bb25 = {
(*_29) = [308977418030265958524933662488192074918_u128,190968478524517535461847569459188040372_u128,89734108401671270330799957186630100579_u128,31836380409879586968484745986242621261_u128,226276216020025912800196251997776304028_u128];
_24.2 = Field::<char>(Variant((*_1), 0), 1);
place!(Field::<f64>(Variant((*_1), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).0;
place!(Field::<char>(Variant((*_1), 0), 1)) = _30;
place!(Field::<i32>(Variant((*_1), 0), 3)) = -_15;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).1 = 7860604189829725467_i64 as usize;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).2 = Field::<bool>(Variant((*_1), 0), 0) <= Field::<bool>(Variant((*_1), 0), 0);
place!(Field::<i32>(Variant((*_1), 0), 3)) = !_15;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).1 = _24.1 ^ _26.0.fld0.1;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).2 = !Field::<bool>(Variant((*_1), 0), 0);
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).1 = _26.0.fld0.1 << _25;
Goto(bb26)
}
bb26 = {
place!(Field::<f64>(Variant((*_1), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).0;
place!(Field::<char>(Variant((*_1), 0), 1)) = _30;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).2 = Field::<bool>(Variant((*_1), 0), 0) | Field::<bool>(Variant((*_1), 0), 0);
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).2 = _18;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)) = _26.0.fld0;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).0 = Field::<f64>(Variant((*_1), 0), 4) * Field::<f64>(Variant((*_1), 0), 4);
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).2 = _26.0.fld0.2 >= Field::<bool>(Variant((*_1), 0), 0);
_28 = !_3;
place!(Field::<char>(Variant((*_1), 0), 1)) = _2;
_14 = Move(_26.0.fld6);
place!(Field::<bool>(Variant((*_1), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).2;
place!(Field::<bool>(Variant((*_1), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).2 != Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).2;
_36 = -Field::<f64>(Variant((*_1), 0), 4);
Goto(bb27)
}
bb27 = {
_32 = _28 as u16;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).1 = _24.1;
_24.1 = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).1;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).2 = Field::<bool>(Variant(_26.0.fld2, 0), 0);
_11.0 = (Move(_14), _27);
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).1 = _24.1;
_40 = _11.0.1 as isize;
place!(Field::<bool>(Variant((*_1), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).2 ^ Field::<(f64, usize, bool)>(Variant(_26.0.fld2, 0), 2).2;
_38 = _25 * _25;
_24.0 = Move(_11.0.0);
place!(Field::<bool>(Variant((*_1), 0), 0)) = !Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).2;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).1 = _26.0.fld0.1 / _24.1;
Goto(bb28)
}
bb28 = {
place!(Field::<f64>(Variant((*_1), 0), 4)) = -Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).0;
place!(Field::<i32>(Variant((*_1), 0), 3)) = _15 * _15;
_47 = Field::<bool>(Variant((*_1), 0), 0) >= Field::<bool>(Variant((*_1), 0), 0);
place!(Field::<f64>(Variant((*_1), 0), 4)) = _26.0.fld3 as f64;
(*_29) = [138337203566174933427650506015029547860_u128,107891168850121978641170289612037162263_u128,170161190300938325125603120780099007707_u128,270473932087989052153724556926024284581_u128,257948768444022721028975036815972887439_u128];
(*_1) = Adt28::Variant0 { fld0: _47,fld1: _24.2,fld2: _26.0.fld0,fld3: _15,fld4: _26.0.fld0.0 };
(*_29) = [58716898081041819294995132444095719912_u128,134501379376191949228118098600901503341_u128,283455033507547732421848622225931557060_u128,38367223165498433916321218261718958795_u128,84626709939833888497511058015576852160_u128];
place!(Field::<char>(Variant((*_1), 0), 1)) = _9;
place!(Field::<char>(Variant((*_1), 0), 1)) = _2;
Goto(bb29)
}
bb29 = {
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).1 = _24.1;
place!(Field::<f64>(Variant((*_1), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).0 + _26.0.fld0.0;
place!(Field::<char>(Variant((*_1), 0), 1)) = _2;
_45 = (55_i8,);
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)) = (Field::<f64>(Variant((*_1), 0), 4), _26.0.fld0.1, Field::<bool>(Variant((*_1), 0), 0));
_23 = _11.0.1 * _11.0.1;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)) = (Field::<f64>(Variant((*_1), 0), 4), _26.0.fld0.1, Field::<bool>(Variant((*_1), 0), 0));
_39 = core::ptr::addr_of!((*_29));
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).0 = _36 + Field::<f64>(Variant((*_1), 0), 4);
_26.0.fld1 = [145896879821561921500069656918944290461_u128,94991107733558038649546676539948747472_u128,218917956695975307531590891861589361490_u128,29114118539818234783716412376799306272_u128,47231645264535618784284164658006372404_u128];
place!(Field::<i32>(Variant((*_1), 0), 3)) = !_15;
place!(Field::<f64>(Variant((*_1), 0), 4)) = _28 as f64;
_18 = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).2 == Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).2;
_9 = _24.2;
Call(place!(Field::<i32>(Variant((*_1), 0), 3)) = core::intrinsics::bswap(_15), ReturnTo(bb30), UnwindUnreachable())
}
bb30 = {
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).0 = Field::<f64>(Variant((*_1), 0), 4) * Field::<f64>(Variant((*_1), 0), 4);
place!(Field::<char>(Variant((*_1), 0), 1)) = _30;
place!(Field::<f64>(Variant((*_1), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).0 + Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).0;
_27 = 74_u8 as u64;
place!(Field::<char>(Variant((*_1), 0), 1)) = _30;
place!(Field::<char>(Variant((*_1), 0), 1)) = _9;
(*_29) = [81204158404556150435277114577144964493_u128,206758324464753789092889026525992051310_u128,139805272299186454655331369589242428790_u128,207899677807238831037776122491344644185_u128,160876089572801706108410005299862083935_u128];
place!(Field::<bool>(Variant((*_1), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).2 ^ Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).2;
place!(Field::<char>(Variant((*_1), 0), 1)) = _9;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).0 = _23 as f64;
(*_29) = [24281757521429777069391893435815824549_u128,260802180770748377799038362889469761903_u128,109800114875439238044655521105515450334_u128,201574253220690571476936401342964903907_u128,103078578312025904703562481219732926818_u128];
_10 = _38 << Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).1;
place!(Field::<f64>(Variant((*_1), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).0 * Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).0;
(*_29) = [111781013164714010127247299428812991913_u128,65830742618103064549558474191740663216_u128,269509239396687309352937031834349105862_u128,47462283377503885851129031218253827395_u128,255533939348152684074039719712820719934_u128];
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)) = (Field::<f64>(Variant((*_1), 0), 4), _26.0.fld0.1, Field::<bool>(Variant((*_1), 0), 0));
(*_29) = [95489299654160797974527154196385884857_u128,252399080524292749651424222348020897505_u128,155484901132404789073189491163327972567_u128,150787659418955189113254921941228974502_u128,319109194064615326868815156021885793483_u128];
Call(place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).1 = core::intrinsics::transmute(_10), ReturnTo(bb31), UnwindUnreachable())
}
bb31 = {
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).2 = Field::<bool>(Variant((*_1), 0), 0);
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).2 = Field::<bool>(Variant((*_1), 0), 0) | Field::<bool>(Variant((*_1), 0), 0);
_64.fld0 = (_10,);
(*_1) = Adt28::Variant0 { fld0: _8,fld1: _30,fld2: _26.0.fld0,fld3: _15,fld4: _26.0.fld0.0 };
(*_1) = Adt28::Variant0 { fld0: _8,fld1: _24.2,fld2: _26.0.fld0,fld3: _15,fld4: _36 };
place!(Field::<bool>(Variant((*_1), 0), 0)) = _11.1 >= _47;
(*_29) = [3425193939447259280797842441980707161_u128,208606181629650108995941447350469440058_u128,273167159097237378740862439030858643914_u128,327346557242990308719544858793202572752_u128,289360755690150897223752641346539670704_u128];
place!(Field::<i32>(Variant(_26.0.fld2, 0), 3)) = _15 * _15;
match Field::<(f64, usize, bool)>(Variant(_26.0.fld2, 0), 2).1 {
0 => bb1,
1 => bb2,
2 => bb23,
3 => bb17,
4 => bb32,
4222603653208994370 => bb34,
_ => bb33
}
}
bb32 = {
RET = [70_u8];
_2 = '\u{42d5f}';
_4 = (-38_isize) >> _3;
Goto(bb2)
}
bb33 = {
place!(Field::<i32>(Variant((*_1), 0), 3)) = -_15;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).1 = _24.1;
place!(Field::<bool>(Variant((*_1), 0), 0)) = !_18;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).2 = Field::<bool>(Variant((*_1), 0), 0) != _8;
place!(Field::<f64>(Variant((*_1), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).0;
_26.0.fld0.1 = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).1;
place!(Field::<i32>(Variant((*_1), 0), 3)) = _15;
place!(Field::<i32>(Variant((*_1), 0), 3)) = _30 as i32;
(*_1) = Adt28::Variant0 { fld0: _18,fld1: _9,fld2: _26.0.fld0,fld3: _15,fld4: _26.0.fld0.0 };
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).1 = _24.1 | _26.0.fld0.1;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)) = (_26.0.fld0.0, _26.0.fld0.1, Field::<bool>(Variant((*_1), 0), 0));
_26.2 = core::ptr::addr_of!((*_1));
place!(Field::<f64>(Variant((*_1), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).0;
_11.0.1 = !_27;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).2 = Field::<bool>(Variant((*_1), 0), 0);
_11.1 = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).2;
match Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).1 {
0 => bb12,
1 => bb18,
2 => bb3,
3 => bb15,
4 => bb19,
4222603653208994370 => bb25,
_ => bb24
}
}
bb34 = {
place!(Field::<char>(Variant((*_1), 0), 1)) = _24.2;
_64.fld1 = core::ptr::addr_of!(_62);
_26.0.fld3 = 3023106549_u32;
_70.0.2 = !Field::<bool>(Variant((*_1), 0), 0);
_9 = Field::<char>(Variant((*_1), 0), 1);
_44 = &_45;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).2 = _18;
(*_29) = [205627276789319635145851116086650326506_u128,187271810224755147064525957747110655006_u128,140039721108510123073410271954676108239_u128,250719188937900423323161632648699362401_u128,223830260788810923597209600450783677414_u128];
_11.0.0 = Move(_24.0);
_14 = Move(_11.0.0);
_63 = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).1;
_65.0.0.fld0.1 = !Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).1;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).0 = -_26.0.fld0.0;
_45 = (40_i8,);
_17 = Move(_44);
_24.0 = Move(_14);
_57 = Field::<i32>(Variant((*_1), 0), 3) & Field::<i32>(Variant((*_1), 0), 3);
_16 = (RET,);
(*_29) = [220438898148859975489620575374264947685_u128,144227870038585708792809609706585156753_u128,251845003776690392710717392222439729408_u128,269950633284289329577648300502142988143_u128,96671947624156436983231089418047795658_u128];
place!(Field::<f64>(Variant((*_1), 0), 4)) = -Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).0;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)) = _26.0.fld0;
place!(Field::<bool>(Variant((*_1), 0), 0)) = !_18;
_59 = &_4;
_65.2 = Field::<f64>(Variant((*_1), 0), 4) as i64;
match Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).1 {
0 => bb35,
1 => bb36,
2 => bb37,
3 => bb38,
4 => bb39,
4222603653208994370 => bb41,
_ => bb40
}
}
bb35 = {
RET = (*_20);
_24.2 = _9;
(*_29) = [64408502895852321375435220272845614329_u128,186642690066551529844360775961861515190_u128,3378333134969515846000603688303696877_u128,106935173945526777205776723311111556956_u128,42136547641384167014856347229112299746_u128];
_24.0 = Move(_11.0.0);
_26.0.fld1 = [240850507514681415527091425863277082924_u128,4581152780217108875449808636529258097_u128,90330694559028856909804336347355584964_u128,148424630362043309713128578835406929583_u128,34269164116934389171871622919523469794_u128];
_26.0.fld0.2 = _11.1;
_1 = core::ptr::addr_of!((*_1));
_29 = core::ptr::addr_of!((*_29));
_18 = !_11.1;
(*_29) = [224310431245176299527299201470110566975_u128,253051611555206387603613152760316737425_u128,214028042380249164042076654135344448621_u128,214915660800752311738106764601177664929_u128,317769055554311897307742204178995207784_u128];
_26.0.fld0.2 = !_18;
_22 = -_25;
_25 = -_22;
RET = [44_u8];
_28 = _3 * _3;
(*_29) = [28451483025016351676188510226322343082_u128,333388621781457077534820877712568362188_u128,88104954121112077998334119742134545743_u128,14288295195069770748117147724127729684_u128,122059086195170439334241672567800584051_u128];
(*_29) = [97582476676837133316399776587833624421_u128,4644047610976193619522581438582624410_u128,132134021365102792469403258101497900882_u128,78417955680972770164736498221628854849_u128,8757029689837863234837748424654444316_u128];
_20 = &RET;
_1 = core::ptr::addr_of!((*_1));
_26.0.fld0.1 = _24.1;
_26.0.fld6 = Move(_24.0);
_11.2 = [_26.0.fld3,_26.0.fld3];
(*_1) = Adt28::Variant0 { fld0: _26.0.fld0.2,fld1: _24.2,fld2: _26.0.fld0,fld3: _15,fld4: _26.0.fld0.0 };
_26.2 = core::ptr::addr_of!((*_1));
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)) = (Field::<f64>(Variant((*_1), 0), 4), _24.1, _26.0.fld0.2);
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).0 = -Field::<f64>(Variant((*_1), 0), 4);
place!(Field::<i32>(Variant((*_1), 0), 3)) = _25 as i32;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).0 = (-28116_i16) as f64;
place!(Field::<f64>(Variant(_26.0.fld2, 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).0 + Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).0;
Goto(bb20)
}
bb36 = {
RET = [70_u8];
_2 = '\u{42d5f}';
_4 = (-38_isize) >> _3;
Goto(bb2)
}
bb37 = {
_3 = !(-134510366649249402836290914398986046096_i128);
_4 = !(-20_isize);
RET = [23_u8];
_4 = 9223372036854775807_isize;
RET = [31_u8];
_3 = false as i128;
_4 = -55_isize;
_2 = '\u{bb2cb}';
RET = [188_u8];
_8 = !false;
_4 = !(-74_isize);
_2 = '\u{c77d4}';
_8 = _2 != _2;
_9 = _2;
RET = [95_u8];
_10 = 162_u8 as isize;
_9 = _2;
_4 = 86880943_u32 as isize;
Call(_11.0.0 = fn9(_4, Move(_1), _9, _10, _4, _3, _9, _10, _10, _9), ReturnTo(bb3), UnwindUnreachable())
}
bb38 = {
place!(Field::<i32>(Variant((*_1), 0), 3)) = -_15;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).1 = _24.1;
place!(Field::<bool>(Variant((*_1), 0), 0)) = !_18;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).2 = Field::<bool>(Variant((*_1), 0), 0) != _8;
place!(Field::<f64>(Variant((*_1), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).0;
_26.0.fld0.1 = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).1;
place!(Field::<i32>(Variant((*_1), 0), 3)) = _15;
place!(Field::<i32>(Variant((*_1), 0), 3)) = _30 as i32;
(*_1) = Adt28::Variant0 { fld0: _18,fld1: _9,fld2: _26.0.fld0,fld3: _15,fld4: _26.0.fld0.0 };
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).1 = _24.1 | _26.0.fld0.1;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)) = (_26.0.fld0.0, _26.0.fld0.1, Field::<bool>(Variant((*_1), 0), 0));
_26.2 = core::ptr::addr_of!((*_1));
place!(Field::<f64>(Variant((*_1), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).0;
_11.0.1 = !_27;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).2 = Field::<bool>(Variant((*_1), 0), 0);
_11.1 = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).2;
match Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).1 {
0 => bb12,
1 => bb18,
2 => bb3,
3 => bb15,
4 => bb19,
4222603653208994370 => bb25,
_ => bb24
}
}
bb39 = {
_26.0.fld3 = 9_u8 as u32;
RET = [167_u8];
_3 = (-35409557253636529771572591290475430378_i128);
_27 = !_23;
_29 = core::ptr::addr_of!(_26.0.fld1);
(*_29) = [142664365235274215257966263552908234288_u128,130466676450237713851434849353009735174_u128,6968818772314964489943498735381154473_u128,288533989307655975308057156898641436385_u128,309868969671170735274381876040357953907_u128];
(*_29) = [164048125571299680957046325367432781560_u128,237694215181180854618315285830071881943_u128,199906710867916864577899257396232059082_u128,99081751352789142849356911230392759616_u128,315356492329041317010601600564888369116_u128];
(*_29) = [214352214390250361201682720333316122213_u128,64645078330643681494842427771091394652_u128,156192535916566306850961910193144294947_u128,262663985900713215304918383257599717032_u128,30053905111564242725425779656072839889_u128];
_14 = Move(_24.0);
_24.0 = Move(_14);
match _24.1 {
0 => bb10,
1 => bb11,
2 => bb12,
3 => bb13,
4 => bb14,
5 => bb15,
6 => bb16,
4222603653208994370 => bb18,
_ => bb17
}
}
bb40 = {
_3 = !(-134510366649249402836290914398986046096_i128);
_4 = !(-20_isize);
RET = [23_u8];
_4 = 9223372036854775807_isize;
RET = [31_u8];
_3 = false as i128;
_4 = -55_isize;
_2 = '\u{bb2cb}';
RET = [188_u8];
_8 = !false;
_4 = !(-74_isize);
_2 = '\u{c77d4}';
_8 = _2 != _2;
_9 = _2;
RET = [95_u8];
_10 = 162_u8 as isize;
_9 = _2;
_4 = 86880943_u32 as isize;
Call(_11.0.0 = fn9(_4, Move(_1), _9, _10, _4, _3, _9, _10, _10, _9), ReturnTo(bb3), UnwindUnreachable())
}
bb41 = {
_20 = &RET;
place!(Field::<f64>(Variant((*_1), 0), 4)) = _38 as f64;
_26.0.fld1 = [319362957767074524306444985348302357879_u128,156320344312652223355488382563644892887_u128,86367922819584686979611091616761391747_u128,54870412902424777506498068339901038081_u128,145235008113588663412571734031925049012_u128];
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).1 = !_26.0.fld0.1;
place!(Field::<i32>(Variant((*_1), 0), 3)) = _15;
_70.0 = (Field::<f64>(Variant((*_1), 0), 4), Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).1, Field::<bool>(Variant((*_1), 0), 0));
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).2 = Field::<bool>(Variant((*_1), 0), 0) | Field::<bool>(Variant((*_1), 0), 0);
(*_29) = [147899951705066653415255935464074995298_u128,178299136733496117680608029864817247496_u128,329250378429734391589655356838350159192_u128,39851645028659551188212980544270879480_u128,254240336173859944108022295177293449399_u128];
place!(Field::<char>(Variant((*_1), 0), 1)) = _9;
_70 = (Field::<(f64, usize, bool)>(Variant((*_1), 0), 2),);
place!(Field::<i32>(Variant((*_1), 0), 3)) = _15 << Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).1;
_62 = [Field::<i32>(Variant((*_1), 0), 3),Field::<i32>(Variant((*_1), 0), 3)];
_49 = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).1 / _24.1;
place!(Field::<bool>(Variant((*_1), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).2;
_48 = Field::<f64>(Variant((*_1), 0), 4) != Field::<f64>(Variant((*_1), 0), 4);
place!(Field::<f64>(Variant((*_1), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).0;
place!(Field::<char>(Variant((*_1), 0), 1)) = _30;
_26.0.fld0 = (Field::<f64>(Variant((*_1), 0), 4), Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).1, Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).2);
Goto(bb42)
}
bb42 = {
place!(Field::<char>(Variant((*_1), 0), 1)) = _30;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).1 = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).2 as usize;
_56 = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).2;
_70.0 = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2);
_46 = &(*_20);
place!(Field::<bool>(Variant((*_1), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).2 >= Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).2;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)) = _70.0;
(*_29) = [239444316461135272859941442614755409928_u128,255190515548102870012554383667775556294_u128,177717375456444778776825042421050438800_u128,219915635840577003498996491192051804161_u128,194840380455318919733559981125158806487_u128];
Goto(bb43)
}
bb43 = {
(*_1) = Adt28::Variant1 { fld0: _70.0.2,fld1: _70,fld2: _26.0.fld3 };
_65.0.0.fld0 = Field::<((f64, usize, bool),)>(Variant((*_1), 1), 1).0;
_3 = _28 * _28;
place!(Field::<((f64, usize, bool),)>(Variant((*_1), 1), 1)).0.2 = Field::<bool>(Variant((*_1), 1), 0);
place!(Field::<((f64, usize, bool),)>(Variant((*_1), 1), 1)).0.2 = !Field::<bool>(Variant((*_1), 1), 0);
place!(Field::<((f64, usize, bool),)>(Variant((*_1), 1), 1)).0.0 = _70.0.0;
_33 = &place!(Field::<((f64, usize, bool),)>(Variant((*_1), 1), 1)).0.1;
place!(Field::<((f64, usize, bool),)>(Variant((*_1), 1), 1)) = (_26.0.fld0,);
place!(Field::<((f64, usize, bool),)>(Variant((*_1), 1), 1)) = (_26.0.fld0,);
place!(Field::<u32>(Variant((*_1), 1), 2)) = _26.0.fld3 & _26.0.fld3;
_26.0.fld0.0 = -Field::<((f64, usize, bool),)>(Variant((*_1), 1), 1).0.0;
_55 = -_65.0.0.fld0.0;
_60 = -_22;
_69 = _32 as u64;
match _63 {
0 => bb13,
1 => bb7,
2 => bb14,
4222603653208994370 => bb45,
_ => bb44
}
}
bb44 = {
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).1 = _24.1;
place!(Field::<f64>(Variant((*_1), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).0 + _26.0.fld0.0;
place!(Field::<char>(Variant((*_1), 0), 1)) = _2;
_45 = (55_i8,);
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)) = (Field::<f64>(Variant((*_1), 0), 4), _26.0.fld0.1, Field::<bool>(Variant((*_1), 0), 0));
_23 = _11.0.1 * _11.0.1;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)) = (Field::<f64>(Variant((*_1), 0), 4), _26.0.fld0.1, Field::<bool>(Variant((*_1), 0), 0));
_39 = core::ptr::addr_of!((*_29));
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).0 = _36 + Field::<f64>(Variant((*_1), 0), 4);
_26.0.fld1 = [145896879821561921500069656918944290461_u128,94991107733558038649546676539948747472_u128,218917956695975307531590891861589361490_u128,29114118539818234783716412376799306272_u128,47231645264535618784284164658006372404_u128];
place!(Field::<i32>(Variant((*_1), 0), 3)) = !_15;
place!(Field::<f64>(Variant((*_1), 0), 4)) = _28 as f64;
_18 = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).2 == Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).2;
_9 = _24.2;
Call(place!(Field::<i32>(Variant((*_1), 0), 3)) = core::intrinsics::bswap(_15), ReturnTo(bb30), UnwindUnreachable())
}
bb45 = {
place!(Field::<((f64, usize, bool),)>(Variant((*_1), 1), 1)).0.1 = !_65.0.0.fld0.1;
place!(Field::<u32>(Variant(_26.0.fld2, 1), 2)) = _26.0.fld3;
(*_29) = [212910191311644848617552528757069582060_u128,248300696499492713208871864438204671265_u128,313933123119928748513316163947836301648_u128,332254507974970959924357258239060442592_u128,37369788642451110410897285954528928959_u128];
(*_1) = Adt28::Variant1 { fld0: _18,fld1: _70,fld2: _26.0.fld3 };
_26.1 = &_65.2;
_80.2 = !Field::<((f64, usize, bool),)>(Variant((*_1), 1), 1).0.1;
_26.0.fld6 = Move(_24.0);
_70 = (Field::<((f64, usize, bool),)>(Variant((*_1), 1), 1).0,);
place!(Field::<((f64, usize, bool),)>(Variant((*_1), 1), 1)).0 = (_70.0.0, _65.0.0.fld0.1, Field::<bool>(Variant((*_1), 1), 0));
place!(Field::<((f64, usize, bool),)>(Variant((*_1), 1), 1)).0.2 = Field::<bool>(Variant((*_1), 1), 0) & Field::<bool>(Variant((*_1), 1), 0);
place!(Field::<((f64, usize, bool),)>(Variant((*_1), 1), 1)).0 = (_36, _80.2, _8);
(*_29) = [115964802606896832781541151415782019738_u128,22289529438163483209450464208815628705_u128,115459975169116901940984815600949979215_u128,197562996577502029483129169888240079142_u128,218521218237217009635047847128008368958_u128];
(*_29) = [252000346362596867956071498774374878615_u128,305345318192105033442256824993636451928_u128,36628851049067372129749955514089648710_u128,110242296544484114250404129800822563286_u128,340051101968305378144619221143800592989_u128];
place!(Field::<((f64, usize, bool),)>(Variant((*_1), 1), 1)).0.0 = -_36;
place!(Field::<((f64, usize, bool),)>(Variant((*_1), 1), 1)) = (_65.0.0.fld0,);
_81 = Field::<((f64, usize, bool),)>(Variant((*_1), 1), 1).0.0 * _65.0.0.fld0.0;
place!(Field::<((f64, usize, bool),)>(Variant((*_1), 1), 1)).0 = _26.0.fld0;
_68 = 182_u8 * 118_u8;
place!(Field::<((f64, usize, bool),)>(Variant((*_1), 1), 1)).0.0 = _80.2 as f64;
_53 = _65.0.0.fld0.1 >= _80.2;
place!(Field::<((f64, usize, bool),)>(Variant((*_1), 1), 1)).0.2 = Field::<bool>(Variant(_26.0.fld2, 1), 0) | Field::<bool>(Variant((*_1), 1), 0);
place!(Field::<u32>(Variant((*_1), 1), 2)) = !_26.0.fld3;
Goto(bb46)
}
bb46 = {
place!(Field::<u32>(Variant((*_1), 1), 2)) = _26.0.fld3;
place!(Field::<((f64, usize, bool),)>(Variant((*_1), 1), 1)) = _70;
Call(place!(Field::<((f64, usize, bool),)>(Variant((*_1), 1), 1)).0.1 = core::intrinsics::transmute((*_59)), ReturnTo(bb47), UnwindUnreachable())
}
bb47 = {
_78 = _38;
_52 = _9 as i32;
_60 = _22;
place!(Field::<((f64, usize, bool),)>(Variant((*_1), 1), 1)).0.1 = _18 as usize;
place!(Field::<((f64, usize, bool),)>(Variant((*_1), 1), 1)).0.1 = _49 % _24.1;
place!(Field::<((f64, usize, bool),)>(Variant((*_1), 1), 1)).0.1 = _65.0.0.fld0.1;
_19 = core::ptr::addr_of_mut!(_84);
(*_19) = core::ptr::addr_of!(_28);
place!(Field::<((f64, usize, bool),)>(Variant((*_1), 1), 1)).0.0 = _81 - _81;
place!(Field::<((f64, usize, bool),)>(Variant((*_1), 1), 1)) = (_65.0.0.fld0,);
place!(Field::<((f64, usize, bool),)>(Variant((*_1), 1), 1)).0 = _26.0.fld0;
_14 = Move(_26.0.fld6);
place!(Field::<bool>(Variant((*_1), 1), 0)) = !_8;
_85 = Field::<((f64, usize, bool),)>(Variant((*_1), 1), 1).0.2 | _70.0.2;
(*_1) = Adt28::Variant1 { fld0: _65.0.0.fld0.2,fld1: _70,fld2: _26.0.fld3 };
(*_1) = Adt28::Variant0 { fld0: _53,fld1: _2,fld2: _70.0,fld3: _57,fld4: _81 };
(*_19) = core::ptr::addr_of!((*_84));
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).0 = Field::<f64>(Variant((*_1), 0), 4) - Field::<f64>(Variant((*_1), 0), 4);
_26.0.fld0.1 = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).1 - Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).1;
_5.1 = core::ptr::addr_of!(_45);
match _24.1 {
0 => bb42,
4222603653208994370 => bb48,
_ => bb21
}
}
bb48 = {
_79.1 = [_68,_68,_68,_68,_68,_68,_68];
_65.0.0.fld2 = (*_1);
place!(Field::<bool>(Variant((*_1), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).2 & _53;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)) = (Field::<f64>(Variant((*_1), 0), 4), Field::<(f64, usize, bool)>(Variant(_65.0.0.fld2, 0), 2).1, Field::<bool>(Variant((*_1), 0), 0));
(*_84) = _26.0.fld3 as i128;
_76 = _45.0;
(*_29) = [231380911888018962216014671799217091096_u128,75998052566859847185896497997547031543_u128,108671947195397215431216465019983931365_u128,221478844913774284387616351872147068561_u128,56092344072484334497903458500882889613_u128];
place!(Field::<i32>(Variant((*_1), 0), 3)) = Field::<i32>(Variant(_65.0.0.fld2, 0), 3);
place!(Field::<i32>(Variant((*_1), 0), 3)) = -_15;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).1 = _80.2 * _65.0.0.fld0.1;
_65.1 = (*_29);
_54 = _23 as f32;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).2 = Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).1 != Field::<(f64, usize, bool)>(Variant((*_1), 0), 2).1;
place!(Field::<(f64, usize, bool)>(Variant((*_1), 0), 2)).1 = !_26.0.fld0.1;
match _24.1 {
0 => bb22,
1 => bb28,
2 => bb37,
4222603653208994370 => bb50,
_ => bb49
}
}
bb49 = {
_3 = !(-134510366649249402836290914398986046096_i128);
_4 = !(-20_isize);
RET = [23_u8];
_4 = 9223372036854775807_isize;
RET = [31_u8];
_3 = false as i128;
_4 = -55_isize;
_2 = '\u{bb2cb}';
RET = [188_u8];
_8 = !false;
_4 = !(-74_isize);
_2 = '\u{c77d4}';
_8 = _2 != _2;
_9 = _2;
RET = [95_u8];
_10 = 162_u8 as isize;
_9 = _2;
_4 = 86880943_u32 as isize;
Call(_11.0.0 = fn9(_4, Move(_1), _9, _10, _4, _3, _9, _10, _10, _9), ReturnTo(bb3), UnwindUnreachable())
}
bb50 = {
_93 = [_15,Field::<i32>(Variant((*_1), 0), 3),Field::<i32>(Variant(_65.0.0.fld2, 0), 3),Field::<i32>(Variant(_65.0.0.fld2, 0), 3),Field::<i32>(Variant((*_1), 0), 3),Field::<i32>(Variant((*_1), 0), 3),_15];
Goto(bb51)
}
bb51 = {
Call(_96 = dump_var(8_usize, 8_usize, Move(_8), 47_usize, Move(_47), 30_usize, Move(_30), 62_usize, Move(_62)), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
Call(_96 = dump_var(8_usize, 60_usize, Move(_60), 53_usize, Move(_53), 28_usize, Move(_28), 25_usize, Move(_25)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Call(_96 = dump_var(8_usize, 18_usize, Move(_18), 69_usize, Move(_69), 85_usize, Move(_85), 2_usize, Move(_2)), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Call(_96 = dump_var(8_usize, 52_usize, Move(_52), 57_usize, Move(_57), 22_usize, Move(_22), 93_usize, Move(_93)), ReturnTo(bb55), UnwindUnreachable())
}
bb55 = {
Call(_96 = dump_var(8_usize, 45_usize, Move(_45), 97_usize, _97, 97_usize, _97, 97_usize, _97), ReturnTo(bb56), UnwindUnreachable())
}
bb56 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn9(mut _1: isize,mut _2: *const Adt28,mut _3: char,mut _4: isize,mut _5: isize,mut _6: i128,mut _7: char,mut _8: isize,mut _9: isize,mut _10: char) -> *mut i16 {
mir! {
type RET = *mut i16;
let _11: Adt64;
let _12: f32;
let _13: isize;
let _14: ((Adt51, &'static i64, *const Adt28), [u128; 5], i64);
let _15: f32;
let _16: bool;
let _17: (i8, [u32; 2], [i32; 7], u32);
let _18: isize;
let _19: bool;
let _20: char;
let _21: f32;
let _22: i32;
let _23: [i128; 3];
let _24: isize;
let _25: (*const (i8, [u32; 2], [i32; 7], u32), [u8; 7]);
let _26: *mut i16;
let _27: u8;
let _28: bool;
let _29: &'static [u8; 1];
let _30: (usize, &'static bool);
let _31: f32;
let _32: u16;
let _33: u128;
let _34: *mut &'static i64;
let _35: char;
let _36: *const *const (i8, [u32; 2], [i32; 7], u32);
let _37: isize;
let _38: &'static mut i16;
let _39: &'static isize;
let _40: &'static (i8,);
let _41: *mut (&'static i64, u16, (i8,));
let _42: &'static mut i64;
let _43: &'static usize;
let _44: *mut (&'static i64, u16, (i8,));
let _45: *const Adt51;
let _46: f64;
let _47: &'static mut &'static mut (*mut i16, usize, char);
let _48: *const [i32; 2];
let _49: u128;
let _50: [u8; 1];
let _51: isize;
let _52: &'static mut i16;
let _53: Adt64;
let _54: isize;
let _55: Adt51;
let _56: [i64; 6];
let _57: f32;
let _58: f64;
let _59: isize;
let _60: isize;
let _61: &'static mut isize;
let _62: &'static mut (*mut i16, usize, char);
let _63: *mut *const i128;
let _64: [bool; 6];
let _65: Adt58;
let _66: char;
let _67: Adt28;
let _68: &'static mut &'static mut (*mut i16, usize, char);
let _69: char;
let _70: *mut i16;
let _71: f64;
let _72: &'static mut &'static mut isize;
let _73: f64;
let _74: ((f64, usize, bool),);
let _75: &'static mut i16;
let _76: *mut [u32; 2];
let _77: isize;
let _78: *const Adt28;
let _79: isize;
let _80: (i8, [u32; 2], [i32; 7], u32);
let _81: ((*mut i16, u64), bool, [u32; 2]);
let _82: *const (i8,);
let _83: &'static mut i64;
let _84: f64;
let _85: Adt51;
let _86: bool;
let _87: *const [i32; 2];
let _88: ((f64, usize, bool),);
let _89: (f64, usize, bool);
let _90: u8;
let _91: isize;
let _92: *const [u128; 5];
let _93: *const (i8, [u32; 2], [i32; 7], u32);
let _94: f32;
let _95: &'static isize;
let _96: Adt51;
let _97: &'static mut &'static mut (*mut i16, usize, char);
let _98: char;
let _99: i32;
let _100: i16;
let _101: u128;
let _102: (&'static i64, u16, (i8,));
let _103: &'static *const (i8, [u32; 2], [i32; 7], u32);
let _104: f32;
let _105: f32;
let _106: u16;
let _107: f32;
let _108: &'static isize;
let _109: isize;
let _110: &'static mut (*mut i16, usize, char);
let _111: u8;
let _112: &'static usize;
let _113: f64;
let _114: char;
let _115: (Adt55, *const (i8,));
let _116: u8;
let _117: &'static (i8,);
let _118: &'static *const (i8, [u32; 2], [i32; 7], u32);
let _119: *const Adt28;
let _120: *const [i32; 2];
let _121: Adt58;
let _122: (i8, [u32; 2], [i32; 7], u32);
let _123: ();
let _124: ();
{
_7 = _3;
_1 = _7 as isize;
_9 = !_8;
_6 = (-47689239281458178740104293799210792743_i128) * (-81041502363476524195238994755900878415_i128);
_4 = _9 + _5;
_9 = _1;
_9 = (-111_i8) as isize;
_1 = _4 & _4;
_12 = _6 as f32;
_10 = _7;
_3 = _7;
_8 = _4 & _1;
_14.2 = 5156774743586605880_i64 - (-8685317493934951787_i64);
_14.0.2 = core::ptr::addr_of!(_14.0.0.fld2);
_14.1 = [225870581326034364190546196095848346047_u128,252807301883733311036521777925153016455_u128,125293112510067245030134610226911849905_u128,113198761883899505787024320436083987552_u128,281188511739329918903100513376654682061_u128];
Goto(bb1)
}
bb1 = {
_13 = _8 << _1;
_14.0.0.fld0.0 = 59187_u16 as f64;
_14.0.1 = &_14.2;
_15 = _12 * _12;
_14.0.0.fld0.2 = _15 > _15;
_8 = -_13;
_14.0.0.fld1 = [129681093416330581015730840345113151804_u128,40154457897679479259046088429967336901_u128,205905595956901278342451995935488560579_u128,90012656307790421731555752783054115165_u128,44778496037383479955213403364151902959_u128];
_15 = _12 + _12;
_5 = _14.0.0.fld0.0 as isize;
_3 = _7;
_7 = _3;
_14.0.0.fld4 = [67534785_i32,903924904_i32];
_14.0.0.fld1 = _14.1;
_14.0.0.fld0.1 = 901545918_u32 as usize;
_2 = core::ptr::addr_of!(_14.0.0.fld2);
_14.2 = (-52781046271214005_i64);
_15 = -_12;
_14.0.0.fld0.1 = _13 as usize;
(*_2) = Adt28::Variant0 { fld0: _14.0.0.fld0.2,fld1: _10,fld2: _14.0.0.fld0,fld3: (-1607594243_i32),fld4: _14.0.0.fld0.0 };
place!(Field::<f64>(Variant((*_2), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = Field::<f64>(Variant((*_2), 0), 4) + Field::<f64>(Variant((*_2), 0), 4);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = Field::<f64>(Variant(_14.0.0.fld2, 0), 4) - Field::<f64>(Variant((*_2), 0), 4);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = Field::<f64>(Variant((*_2), 0), 4);
Call(place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = fn10(_7, _4, Field::<f64>(Variant((*_2), 0), 4), Field::<char>(Variant((*_2), 0), 1), Field::<char>(Variant((*_2), 0), 1), Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2, _4, Field::<f64>(Variant((*_2), 0), 4), Move(_14.0.1)), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
(*_2) = Adt28::Variant0 { fld0: _14.0.0.fld0.2,fld1: _10,fld2: _14.0.0.fld0,fld3: 220224963_i32,fld4: _14.0.0.fld0.0 };
place!(Field::<bool>(Variant((*_2), 0), 0)) = !Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = !_14.0.0.fld0.1;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)) = (Field::<f64>(Variant((*_2), 0), 4), _14.0.0.fld0.1, Field::<bool>(Variant((*_2), 0), 0));
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2 as usize;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = Field::<f64>(Variant((*_2), 0), 4);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = !_14.0.0.fld0.1;
place!(Field::<char>(Variant((*_2), 0), 1)) = _7;
place!(Field::<i32>(Variant((*_2), 0), 3)) = 954882126_i32 | (-495978955_i32);
_17.2 = [Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3)];
place!(Field::<char>(Variant((*_2), 0), 1)) = _3;
_10 = Field::<char>(Variant((*_2), 0), 1);
_6 = Field::<f64>(Variant((*_2), 0), 4) as i128;
place!(Field::<char>(Variant((*_2), 0), 1)) = _3;
place!(Field::<f64>(Variant((*_2), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
place!(Field::<bool>(Variant((*_2), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
place!(Field::<char>(Variant((*_2), 0), 1)) = _7;
place!(Field::<f64>(Variant((*_2), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).2 = Field::<bool>(Variant((*_2), 0), 0) | Field::<bool>(Variant((*_2), 0), 0);
_14.1 = [283782919687606812569690933088850298423_u128,136641990506009433582804680527018907544_u128,112351347329260887725885587259235423864_u128,174581919551482397769888489713410105873_u128,209789977157130574198342004208917339337_u128];
Goto(bb3)
}
bb3 = {
_19 = !Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
place!(Field::<bool>(Variant((*_2), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2 & Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
_20 = Field::<char>(Variant((*_2), 0), 1);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = _14.0.0.fld0.1 >> Field::<i32>(Variant((*_2), 0), 3);
place!(Field::<bool>(Variant((*_2), 0), 0)) = Field::<f64>(Variant((*_2), 0), 4) == Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
_14.0.0.fld0 = (Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0, Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1, Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2);
place!(Field::<bool>(Variant((*_2), 0), 0)) = !Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
place!(Field::<bool>(Variant((*_2), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2 & _19;
Goto(bb4)
}
bb4 = {
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = !_14.0.0.fld0.1;
place!(Field::<i32>(Variant((*_2), 0), 3)) = (-646078884_i32);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)) = (Field::<f64>(Variant((*_2), 0), 4), _14.0.0.fld0.1, Field::<bool>(Variant((*_2), 0), 0));
place!(Field::<f64>(Variant((*_2), 0), 4)) = -Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = _14.0.0.fld0.1 * _14.0.0.fld0.1;
place!(Field::<i32>(Variant((*_2), 0), 3)) = -(-755596854_i32);
_6 = (-152887609327678765386811778983519642590_i128);
place!(Field::<bool>(Variant((*_2), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1 >= Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1;
_17.2 = [Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3)];
_25.1 = [140_u8,49_u8,118_u8,2_u8,15_u8,154_u8,215_u8];
_21 = _15;
place!(Field::<i32>(Variant((*_2), 0), 3)) = !(-1806105823_i32);
place!(Field::<bool>(Variant((*_2), 0), 0)) = _19 & Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
_16 = !Field::<bool>(Variant((*_2), 0), 0);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).2 = Field::<bool>(Variant((*_2), 0), 0) & Field::<bool>(Variant((*_2), 0), 0);
place!(Field::<(f64, usize, bool)>(Variant(_14.0.0.fld2, 0), 2)) = _14.0.0.fld0;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)) = (Field::<f64>(Variant((*_2), 0), 4), _14.0.0.fld0.1, Field::<bool>(Variant((*_2), 0), 0));
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = Field::<f64>(Variant((*_2), 0), 4) * Field::<f64>(Variant((*_2), 0), 4);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).2 = _14.0.0.fld0.2;
match _14.2 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb5,
4 => bb6,
5 => bb7,
340282366920938463463321826385496997451 => bb9,
_ => bb8
}
}
bb5 = {
_19 = !Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
place!(Field::<bool>(Variant((*_2), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2 & Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
_20 = Field::<char>(Variant((*_2), 0), 1);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = _14.0.0.fld0.1 >> Field::<i32>(Variant((*_2), 0), 3);
place!(Field::<bool>(Variant((*_2), 0), 0)) = Field::<f64>(Variant((*_2), 0), 4) == Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
_14.0.0.fld0 = (Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0, Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1, Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2);
place!(Field::<bool>(Variant((*_2), 0), 0)) = !Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
place!(Field::<bool>(Variant((*_2), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2 & _19;
Goto(bb4)
}
bb6 = {
(*_2) = Adt28::Variant0 { fld0: _14.0.0.fld0.2,fld1: _10,fld2: _14.0.0.fld0,fld3: 220224963_i32,fld4: _14.0.0.fld0.0 };
place!(Field::<bool>(Variant((*_2), 0), 0)) = !Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = !_14.0.0.fld0.1;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)) = (Field::<f64>(Variant((*_2), 0), 4), _14.0.0.fld0.1, Field::<bool>(Variant((*_2), 0), 0));
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2 as usize;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = Field::<f64>(Variant((*_2), 0), 4);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = !_14.0.0.fld0.1;
place!(Field::<char>(Variant((*_2), 0), 1)) = _7;
place!(Field::<i32>(Variant((*_2), 0), 3)) = 954882126_i32 | (-495978955_i32);
_17.2 = [Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3)];
place!(Field::<char>(Variant((*_2), 0), 1)) = _3;
_10 = Field::<char>(Variant((*_2), 0), 1);
_6 = Field::<f64>(Variant((*_2), 0), 4) as i128;
place!(Field::<char>(Variant((*_2), 0), 1)) = _3;
place!(Field::<f64>(Variant((*_2), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
place!(Field::<bool>(Variant((*_2), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
place!(Field::<char>(Variant((*_2), 0), 1)) = _7;
place!(Field::<f64>(Variant((*_2), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).2 = Field::<bool>(Variant((*_2), 0), 0) | Field::<bool>(Variant((*_2), 0), 0);
_14.1 = [283782919687606812569690933088850298423_u128,136641990506009433582804680527018907544_u128,112351347329260887725885587259235423864_u128,174581919551482397769888489713410105873_u128,209789977157130574198342004208917339337_u128];
Goto(bb3)
}
bb7 = {
_13 = _8 << _1;
_14.0.0.fld0.0 = 59187_u16 as f64;
_14.0.1 = &_14.2;
_15 = _12 * _12;
_14.0.0.fld0.2 = _15 > _15;
_8 = -_13;
_14.0.0.fld1 = [129681093416330581015730840345113151804_u128,40154457897679479259046088429967336901_u128,205905595956901278342451995935488560579_u128,90012656307790421731555752783054115165_u128,44778496037383479955213403364151902959_u128];
_15 = _12 + _12;
_5 = _14.0.0.fld0.0 as isize;
_3 = _7;
_7 = _3;
_14.0.0.fld4 = [67534785_i32,903924904_i32];
_14.0.0.fld1 = _14.1;
_14.0.0.fld0.1 = 901545918_u32 as usize;
_2 = core::ptr::addr_of!(_14.0.0.fld2);
_14.2 = (-52781046271214005_i64);
_15 = -_12;
_14.0.0.fld0.1 = _13 as usize;
(*_2) = Adt28::Variant0 { fld0: _14.0.0.fld0.2,fld1: _10,fld2: _14.0.0.fld0,fld3: (-1607594243_i32),fld4: _14.0.0.fld0.0 };
place!(Field::<f64>(Variant((*_2), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = Field::<f64>(Variant((*_2), 0), 4) + Field::<f64>(Variant((*_2), 0), 4);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = Field::<f64>(Variant(_14.0.0.fld2, 0), 4) - Field::<f64>(Variant((*_2), 0), 4);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = Field::<f64>(Variant((*_2), 0), 4);
Call(place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = fn10(_7, _4, Field::<f64>(Variant((*_2), 0), 4), Field::<char>(Variant((*_2), 0), 1), Field::<char>(Variant((*_2), 0), 1), Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2, _4, Field::<f64>(Variant((*_2), 0), 4), Move(_14.0.1)), ReturnTo(bb2), UnwindUnreachable())
}
bb8 = {
Return()
}
bb9 = {
place!(Field::<char>(Variant((*_2), 0), 1)) = _7;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).2 = Field::<bool>(Variant((*_2), 0), 0);
place!(Field::<f64>(Variant(_14.0.0.fld2, 0), 4)) = Field::<(f64, usize, bool)>(Variant(_14.0.0.fld2, 0), 2).0 * Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
place!(Field::<char>(Variant((*_2), 0), 1)) = _10;
place!(Field::<bool>(Variant((*_2), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1 == Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1;
_27 = !244_u8;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = _14.0.0.fld0.1 * _14.0.0.fld0.1;
place!(Field::<char>(Variant((*_2), 0), 1)) = _10;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = _14.0.0.fld0.1 + _14.0.0.fld0.1;
_17.3 = 2532985261_u32 + 3470889698_u32;
place!(Field::<i32>(Variant(_14.0.0.fld2, 0), 3)) = 537369892_i32 ^ (-738845701_i32);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = Field::<f64>(Variant((*_2), 0), 4) - Field::<f64>(Variant((*_2), 0), 4);
place!(Field::<bool>(Variant((*_2), 0), 0)) = !Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
place!(Field::<bool>(Variant((*_2), 0), 0)) = !Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = !_14.0.0.fld0.1;
_3 = Field::<char>(Variant((*_2), 0), 1);
_32 = 1264_u16;
place!(Field::<char>(Variant((*_2), 0), 1)) = _3;
_6 = (-78763694804554615500673026840925375604_i128) * 33328394820273627893702820645092118742_i128;
place!(Field::<i32>(Variant((*_2), 0), 3)) = (-84083927_i32);
place!(Field::<char>(Variant((*_2), 0), 1)) = _20;
Call(_31 = core::intrinsics::transmute(Field::<i32>(Variant((*_2), 0), 3)), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_28 = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2 != Field::<bool>(Variant((*_2), 0), 0);
place!(Field::<i32>(Variant((*_2), 0), 3)) = _21 as i32;
(*_2) = Adt28::Variant0 { fld0: _28,fld1: _3,fld2: _14.0.0.fld0,fld3: (-1130005326_i32),fld4: _14.0.0.fld0.0 };
place!(Field::<i32>(Variant((*_2), 0), 3)) = (-2112832141_i32) - (-656513691_i32);
_19 = !Field::<bool>(Variant(_14.0.0.fld2, 0), 0);
match _32 {
0 => bb6,
1 => bb11,
2 => bb12,
3 => bb13,
4 => bb14,
1264 => bb16,
_ => bb15
}
}
bb11 = {
place!(Field::<char>(Variant((*_2), 0), 1)) = _7;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).2 = Field::<bool>(Variant((*_2), 0), 0);
place!(Field::<f64>(Variant(_14.0.0.fld2, 0), 4)) = Field::<(f64, usize, bool)>(Variant(_14.0.0.fld2, 0), 2).0 * Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
place!(Field::<char>(Variant((*_2), 0), 1)) = _10;
place!(Field::<bool>(Variant((*_2), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1 == Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1;
_27 = !244_u8;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = _14.0.0.fld0.1 * _14.0.0.fld0.1;
place!(Field::<char>(Variant((*_2), 0), 1)) = _10;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = _14.0.0.fld0.1 + _14.0.0.fld0.1;
_17.3 = 2532985261_u32 + 3470889698_u32;
place!(Field::<i32>(Variant(_14.0.0.fld2, 0), 3)) = 537369892_i32 ^ (-738845701_i32);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = Field::<f64>(Variant((*_2), 0), 4) - Field::<f64>(Variant((*_2), 0), 4);
place!(Field::<bool>(Variant((*_2), 0), 0)) = !Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
place!(Field::<bool>(Variant((*_2), 0), 0)) = !Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = !_14.0.0.fld0.1;
_3 = Field::<char>(Variant((*_2), 0), 1);
_32 = 1264_u16;
place!(Field::<char>(Variant((*_2), 0), 1)) = _3;
_6 = (-78763694804554615500673026840925375604_i128) * 33328394820273627893702820645092118742_i128;
place!(Field::<i32>(Variant((*_2), 0), 3)) = (-84083927_i32);
place!(Field::<char>(Variant((*_2), 0), 1)) = _20;
Call(_31 = core::intrinsics::transmute(Field::<i32>(Variant((*_2), 0), 3)), ReturnTo(bb10), UnwindUnreachable())
}
bb12 = {
_19 = !Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
place!(Field::<bool>(Variant((*_2), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2 & Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
_20 = Field::<char>(Variant((*_2), 0), 1);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = _14.0.0.fld0.1 >> Field::<i32>(Variant((*_2), 0), 3);
place!(Field::<bool>(Variant((*_2), 0), 0)) = Field::<f64>(Variant((*_2), 0), 4) == Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
_14.0.0.fld0 = (Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0, Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1, Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2);
place!(Field::<bool>(Variant((*_2), 0), 0)) = !Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
place!(Field::<bool>(Variant((*_2), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2 & _19;
Goto(bb4)
}
bb13 = {
_13 = _8 << _1;
_14.0.0.fld0.0 = 59187_u16 as f64;
_14.0.1 = &_14.2;
_15 = _12 * _12;
_14.0.0.fld0.2 = _15 > _15;
_8 = -_13;
_14.0.0.fld1 = [129681093416330581015730840345113151804_u128,40154457897679479259046088429967336901_u128,205905595956901278342451995935488560579_u128,90012656307790421731555752783054115165_u128,44778496037383479955213403364151902959_u128];
_15 = _12 + _12;
_5 = _14.0.0.fld0.0 as isize;
_3 = _7;
_7 = _3;
_14.0.0.fld4 = [67534785_i32,903924904_i32];
_14.0.0.fld1 = _14.1;
_14.0.0.fld0.1 = 901545918_u32 as usize;
_2 = core::ptr::addr_of!(_14.0.0.fld2);
_14.2 = (-52781046271214005_i64);
_15 = -_12;
_14.0.0.fld0.1 = _13 as usize;
(*_2) = Adt28::Variant0 { fld0: _14.0.0.fld0.2,fld1: _10,fld2: _14.0.0.fld0,fld3: (-1607594243_i32),fld4: _14.0.0.fld0.0 };
place!(Field::<f64>(Variant((*_2), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = Field::<f64>(Variant((*_2), 0), 4) + Field::<f64>(Variant((*_2), 0), 4);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = Field::<f64>(Variant(_14.0.0.fld2, 0), 4) - Field::<f64>(Variant((*_2), 0), 4);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = Field::<f64>(Variant((*_2), 0), 4);
Call(place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = fn10(_7, _4, Field::<f64>(Variant((*_2), 0), 4), Field::<char>(Variant((*_2), 0), 1), Field::<char>(Variant((*_2), 0), 1), Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2, _4, Field::<f64>(Variant((*_2), 0), 4), Move(_14.0.1)), ReturnTo(bb2), UnwindUnreachable())
}
bb14 = {
_13 = _8 << _1;
_14.0.0.fld0.0 = 59187_u16 as f64;
_14.0.1 = &_14.2;
_15 = _12 * _12;
_14.0.0.fld0.2 = _15 > _15;
_8 = -_13;
_14.0.0.fld1 = [129681093416330581015730840345113151804_u128,40154457897679479259046088429967336901_u128,205905595956901278342451995935488560579_u128,90012656307790421731555752783054115165_u128,44778496037383479955213403364151902959_u128];
_15 = _12 + _12;
_5 = _14.0.0.fld0.0 as isize;
_3 = _7;
_7 = _3;
_14.0.0.fld4 = [67534785_i32,903924904_i32];
_14.0.0.fld1 = _14.1;
_14.0.0.fld0.1 = 901545918_u32 as usize;
_2 = core::ptr::addr_of!(_14.0.0.fld2);
_14.2 = (-52781046271214005_i64);
_15 = -_12;
_14.0.0.fld0.1 = _13 as usize;
(*_2) = Adt28::Variant0 { fld0: _14.0.0.fld0.2,fld1: _10,fld2: _14.0.0.fld0,fld3: (-1607594243_i32),fld4: _14.0.0.fld0.0 };
place!(Field::<f64>(Variant((*_2), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = Field::<f64>(Variant((*_2), 0), 4) + Field::<f64>(Variant((*_2), 0), 4);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = Field::<f64>(Variant(_14.0.0.fld2, 0), 4) - Field::<f64>(Variant((*_2), 0), 4);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = Field::<f64>(Variant((*_2), 0), 4);
Call(place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = fn10(_7, _4, Field::<f64>(Variant((*_2), 0), 4), Field::<char>(Variant((*_2), 0), 1), Field::<char>(Variant((*_2), 0), 1), Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2, _4, Field::<f64>(Variant((*_2), 0), 4), Move(_14.0.1)), ReturnTo(bb2), UnwindUnreachable())
}
bb15 = {
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = !_14.0.0.fld0.1;
place!(Field::<i32>(Variant((*_2), 0), 3)) = (-646078884_i32);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)) = (Field::<f64>(Variant((*_2), 0), 4), _14.0.0.fld0.1, Field::<bool>(Variant((*_2), 0), 0));
place!(Field::<f64>(Variant((*_2), 0), 4)) = -Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = _14.0.0.fld0.1 * _14.0.0.fld0.1;
place!(Field::<i32>(Variant((*_2), 0), 3)) = -(-755596854_i32);
_6 = (-152887609327678765386811778983519642590_i128);
place!(Field::<bool>(Variant((*_2), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1 >= Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1;
_17.2 = [Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3)];
_25.1 = [140_u8,49_u8,118_u8,2_u8,15_u8,154_u8,215_u8];
_21 = _15;
place!(Field::<i32>(Variant((*_2), 0), 3)) = !(-1806105823_i32);
place!(Field::<bool>(Variant((*_2), 0), 0)) = _19 & Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
_16 = !Field::<bool>(Variant((*_2), 0), 0);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).2 = Field::<bool>(Variant((*_2), 0), 0) & Field::<bool>(Variant((*_2), 0), 0);
place!(Field::<(f64, usize, bool)>(Variant(_14.0.0.fld2, 0), 2)) = _14.0.0.fld0;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)) = (Field::<f64>(Variant((*_2), 0), 4), _14.0.0.fld0.1, Field::<bool>(Variant((*_2), 0), 0));
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = Field::<f64>(Variant((*_2), 0), 4) * Field::<f64>(Variant((*_2), 0), 4);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).2 = _14.0.0.fld0.2;
match _14.2 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb5,
4 => bb6,
5 => bb7,
340282366920938463463321826385496997451 => bb9,
_ => bb8
}
}
bb16 = {
_17.0 = 153850676723071677342277288095331488349_u128 as i8;
_30.1 = &place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).2;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).2 = _28 != Field::<bool>(Variant((*_2), 0), 0);
place!(Field::<i32>(Variant((*_2), 0), 3)) = !(-1522403493_i32);
_3 = Field::<char>(Variant((*_2), 0), 1);
place!(Field::<bool>(Variant((*_2), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2 & Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
(*_2) = Adt28::Variant0 { fld0: _19,fld1: _3,fld2: _14.0.0.fld0,fld3: 1044844394_i32,fld4: _14.0.0.fld0.0 };
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = -Field::<f64>(Variant((*_2), 0), 4);
_14.0.0.fld3 = _17.3;
(*_2) = Adt28::Variant0 { fld0: _19,fld1: _10,fld2: _14.0.0.fld0,fld3: (-2100970515_i32),fld4: _14.0.0.fld0.0 };
place!(Field::<char>(Variant((*_2), 0), 1)) = _20;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)) = (Field::<f64>(Variant((*_2), 0), 4), _14.0.0.fld0.1, Field::<bool>(Variant(_14.0.0.fld2, 0), 0));
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)) = _14.0.0.fld0;
_36 = core::ptr::addr_of!(_25.0);
Call(place!(Field::<i32>(Variant((*_2), 0), 3)) = core::intrinsics::bswap((-1373885674_i32)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
(*_36) = core::ptr::addr_of!(_17);
place!(Field::<bool>(Variant((*_2), 0), 0)) = Field::<i32>(Variant((*_2), 0), 3) <= Field::<i32>(Variant((*_2), 0), 3);
place!(Field::<bool>(Variant((*_2), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2 & _19;
place!(Field::<char>(Variant((*_2), 0), 1)) = _7;
(*_36) = core::ptr::addr_of!(_17);
_28 = Field::<i32>(Variant((*_2), 0), 3) >= Field::<i32>(Variant((*_2), 0), 3);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)) = (Field::<f64>(Variant((*_2), 0), 4), _14.0.0.fld0.1, Field::<bool>(Variant((*_2), 0), 0));
_14.0.2 = core::ptr::addr_of!((*_2));
_14.0.0.fld0.1 = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1;
_13 = -_1;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = _14.0.0.fld0.1;
place!(Field::<bool>(Variant((*_2), 0), 0)) = _19 | Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
place!(Field::<bool>(Variant((*_2), 0), 0)) = Field::<(f64, usize, bool)>(Variant(_14.0.0.fld2, 0), 2).2;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = !_14.0.0.fld0.1;
_17.3 = _14.0.0.fld3 | _14.0.0.fld3;
place!(Field::<char>(Variant((*_2), 0), 1)) = _7;
place!(Field::<bool>(Variant((*_2), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
place!(Field::<bool>(Variant((*_2), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2 != Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = !_14.0.0.fld0.1;
_17.1 = [_17.3,_17.3];
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).2 = Field::<bool>(Variant((*_2), 0), 0);
Goto(bb18)
}
bb18 = {
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)) = (Field::<f64>(Variant((*_2), 0), 4), _14.0.0.fld0.1, Field::<bool>(Variant((*_2), 0), 0));
place!(Field::<f64>(Variant((*_2), 0), 4)) = _27 as f64;
(*_36) = core::ptr::addr_of!(_17);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = Field::<f64>(Variant((*_2), 0), 4) + Field::<f64>(Variant((*_2), 0), 4);
place!(Field::<f64>(Variant((*_2), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0 - Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
place!(Field::<i32>(Variant((*_2), 0), 3)) = (-1590695690_i32) | 236039605_i32;
_33 = 14170556942136800780_u64 as u128;
_17.2 = [Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3)];
_20 = Field::<char>(Variant((*_2), 0), 1);
_17.3 = Field::<i32>(Variant((*_2), 0), 3) as u32;
(*_2) = Adt28::Variant0 { fld0: _28,fld1: _7,fld2: _14.0.0.fld0,fld3: (-967567962_i32),fld4: _14.0.0.fld0.0 };
(*_36) = core::ptr::addr_of!(_17);
(*_36) = core::ptr::addr_of!(_17);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).2 = Field::<bool>(Variant((*_2), 0), 0) < _16;
_50 = [_27];
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).2 = !Field::<bool>(Variant((*_2), 0), 0);
place!(Field::<i32>(Variant((*_2), 0), 3)) = (-1340625517_i32) - 1825398530_i32;
place!(Field::<bool>(Variant((*_2), 0), 0)) = _28 & Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
_17.2 = [Field::<i32>(Variant(_14.0.0.fld2, 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3)];
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).2 = Field::<bool>(Variant(_14.0.0.fld2, 0), 0);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = !_14.0.0.fld0.1;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = _14.0.0.fld0.1;
match _32 {
0 => bb16,
1 => bb2,
2 => bb3,
1264 => bb19,
_ => bb6
}
}
bb19 = {
place!(Field::<(f64, usize, bool)>(Variant(_14.0.0.fld2, 0), 2)).1 = _14.0.0.fld0.1;
place!(Field::<char>(Variant((*_2), 0), 1)) = _7;
_12 = _15 + _15;
_37 = _13;
_46 = Field::<(f64, usize, bool)>(Variant(_14.0.0.fld2, 0), 2).0 - Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
place!(Field::<i32>(Variant((*_2), 0), 3)) = (-995794615_i32) << Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1;
_37 = _13;
place!(Field::<f64>(Variant((*_2), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0 * Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
_2 = core::ptr::addr_of!((*_2));
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = Field::<f64>(Variant((*_2), 0), 4) + Field::<f64>(Variant((*_2), 0), 4);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = _6 as usize;
_30.1 = &place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).2;
(*_36) = core::ptr::addr_of!(_17);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)) = (Field::<f64>(Variant((*_2), 0), 4), _14.0.0.fld0.1, _19);
_32 = 50587_u16 >> Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1;
place!(Field::<f64>(Variant((*_2), 0), 4)) = -Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
place!(Field::<char>(Variant((*_2), 0), 1)) = _20;
place!(Field::<f64>(Variant((*_2), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0 - Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
_45 = core::ptr::addr_of!(_14.0.0);
(*_45).fld5 = core::ptr::addr_of!(_17);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = Field::<f64>(Variant((*_2), 0), 4) - Field::<f64>(Variant((*_45).fld2, 0), 4);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = Field::<char>(Variant((*_45).fld2, 0), 1) as usize;
(*_45).fld0.1 = !Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = (*_45).fld0.1 | (*_45).fld0.1;
place!(Field::<(f64, usize, bool)>(Variant((*_45).fld2, 0), 2)).2 = Field::<bool>(Variant((*_45).fld2, 0), 0) > Field::<bool>(Variant((*_45).fld2, 0), 0);
_14.0.1 = &_14.2;
place!(Field::<(f64, usize, bool)>(Variant((*_45).fld2, 0), 2)).2 = Field::<bool>(Variant((*_2), 0), 0);
place!(Field::<i32>(Variant((*_45).fld2, 0), 3)) = -1768248884_i32;
place!(Field::<(f64, usize, bool)>(Variant((*_45).fld2, 0), 2)).2 = Field::<bool>(Variant((*_45).fld2, 0), 0) & _16;
match _14.2 {
340282366920938463463321826385496997451 => bb21,
_ => bb20
}
}
bb20 = {
place!(Field::<char>(Variant((*_2), 0), 1)) = _7;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).2 = Field::<bool>(Variant((*_2), 0), 0);
place!(Field::<f64>(Variant(_14.0.0.fld2, 0), 4)) = Field::<(f64, usize, bool)>(Variant(_14.0.0.fld2, 0), 2).0 * Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
place!(Field::<char>(Variant((*_2), 0), 1)) = _10;
place!(Field::<bool>(Variant((*_2), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1 == Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1;
_27 = !244_u8;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = _14.0.0.fld0.1 * _14.0.0.fld0.1;
place!(Field::<char>(Variant((*_2), 0), 1)) = _10;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = _14.0.0.fld0.1 + _14.0.0.fld0.1;
_17.3 = 2532985261_u32 + 3470889698_u32;
place!(Field::<i32>(Variant(_14.0.0.fld2, 0), 3)) = 537369892_i32 ^ (-738845701_i32);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = Field::<f64>(Variant((*_2), 0), 4) - Field::<f64>(Variant((*_2), 0), 4);
place!(Field::<bool>(Variant((*_2), 0), 0)) = !Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
place!(Field::<bool>(Variant((*_2), 0), 0)) = !Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = !_14.0.0.fld0.1;
_3 = Field::<char>(Variant((*_2), 0), 1);
_32 = 1264_u16;
place!(Field::<char>(Variant((*_2), 0), 1)) = _3;
_6 = (-78763694804554615500673026840925375604_i128) * 33328394820273627893702820645092118742_i128;
place!(Field::<i32>(Variant((*_2), 0), 3)) = (-84083927_i32);
place!(Field::<char>(Variant((*_2), 0), 1)) = _20;
Call(_31 = core::intrinsics::transmute(Field::<i32>(Variant((*_2), 0), 3)), ReturnTo(bb10), UnwindUnreachable())
}
bb21 = {
place!(Field::<f64>(Variant((*_2), 0), 4)) = (-28705_i16) as f64;
(*_45).fld3 = _17.3 | _17.3;
(*_45).fld4 = [Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3)];
place!(Field::<bool>(Variant((*_2), 0), 0)) = !Field::<(f64, usize, bool)>(Variant((*_45).fld2, 0), 2).2;
(*_45).fld5 = core::ptr::addr_of!(_17);
place!(Field::<f64>(Variant((*_2), 0), 4)) = Field::<(f64, usize, bool)>(Variant(_14.0.0.fld2, 0), 2).0;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = _21 as f64;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)) = (Field::<f64>(Variant((*_2), 0), 4), (*_45).fld0.1, Field::<bool>(Variant((*_2), 0), 0));
place!(Field::<i32>(Variant((*_2), 0), 3)) = 1625657378_i32 & (-1345378431_i32);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).2 = (*_45).fld0.2;
place!(Field::<f64>(Variant((*_2), 0), 4)) = -Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
(*_45).fld0.2 = Field::<bool>(Variant((*_2), 0), 0) >= Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
place!(Field::<bool>(Variant((*_2), 0), 0)) = (*_45).fld0.2;
place!(Field::<bool>(Variant((*_2), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0 == (*_45).fld0.0;
place!(Field::<f64>(Variant((*_2), 0), 4)) = Field::<(f64, usize, bool)>(Variant(_14.0.0.fld2, 0), 2).0 - Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
place!(Field::<f64>(Variant((*_2), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0 - (*_45).fld0.0;
Call(place!(Field::<i32>(Variant((*_2), 0), 3)) = core::intrinsics::transmute(Field::<char>(Variant((*_45).fld2, 0), 1)), ReturnTo(bb22), UnwindUnreachable())
}
bb22 = {
(*_45).fld0.1 = !Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1;
(*_45).fld5 = core::ptr::addr_of!(_17);
place!(Field::<i32>(Variant((*_2), 0), 3)) = (-310073275_i32) & (-1459996886_i32);
_48 = core::ptr::addr_of!((*_45).fld4);
place!(Field::<char>(Variant((*_2), 0), 1)) = _20;
(*_45).fld3 = 12739694154494924069_u64 as u32;
place!(Field::<i32>(Variant((*_2), 0), 3)) = _27 as i32;
(*_45).fld5 = core::ptr::addr_of!(_17);
(*_36) = core::ptr::addr_of!(_17);
(*_45).fld1 = [_33,_33,_33,_33,_33];
(*_48) = [Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3)];
(*_45).fld0.0 = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0 - Field::<f64>(Variant((*_2), 0), 4);
_14.2 = (*_45).fld0.1 as i64;
(*_45).fld1 = _14.1;
(*_45).fld0.0 = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
place!(Field::<bool>(Variant((*_2), 0), 0)) = !(*_45).fld0.2;
_36 = core::ptr::addr_of!((*_45).fld5);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)) = ((*_45).fld0.0, (*_45).fld0.1, Field::<bool>(Variant((*_2), 0), 0));
(*_45).fld0.0 = Field::<f64>(Variant((*_2), 0), 4) + Field::<f64>(Variant((*_2), 0), 4);
(*_45).fld0.0 = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0 + Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
(*_48) = [Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3)];
Goto(bb23)
}
bb23 = {
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = -Field::<f64>(Variant((*_2), 0), 4);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = (*_45).fld0.1 - (*_45).fld0.1;
(*_45).fld3 = _17.3;
(*_36) = core::ptr::addr_of!(_17);
(*_45).fld0.0 = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0 - Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
_7 = Field::<char>(Variant((*_2), 0), 1);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)) = (Field::<f64>(Variant((*_2), 0), 4), (*_45).fld0.1, Field::<bool>(Variant((*_2), 0), 0));
place!(Field::<bool>(Variant((*_2), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
place!(Field::<f64>(Variant((*_2), 0), 4)) = (*_45).fld0.0 * Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
(*_36) = core::ptr::addr_of!(_17);
(*_48) = [Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3)];
(*_45).fld5 = core::ptr::addr_of!(_17);
_17.2 = [Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3)];
(*_45).fld5 = Move(_25.0);
Goto(bb24)
}
bb24 = {
(*_45).fld0.2 = Field::<bool>(Variant((*_2), 0), 0) ^ Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
(*_45).fld5 = core::ptr::addr_of!(_17);
(*_45).fld3 = _17.3;
place!(Field::<f64>(Variant((*_2), 0), 4)) = (*_45).fld0.0 + (*_45).fld0.0;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).2 = _19;
_59 = (*_45).fld3 as isize;
_23 = [_6,_6,_6];
(*_45).fld0.0 = Field::<f64>(Variant((*_2), 0), 4) - Field::<f64>(Variant((*_2), 0), 4);
place!(Field::<f64>(Variant((*_2), 0), 4)) = (*_45).fld0.0 * (*_45).fld0.0;
place!(Field::<f64>(Variant((*_2), 0), 4)) = Field::<i32>(Variant((*_2), 0), 3) as f64;
place!(Field::<bool>(Variant((*_2), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
Call(place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = core::intrinsics::transmute(_14.0.0.fld4), ReturnTo(bb25), UnwindUnreachable())
}
bb25 = {
place!(Field::<i32>(Variant((*_2), 0), 3)) = 7094460663424324322_u64 as i32;
_55.fld0.0 = _27 as f64;
_25.0 = core::ptr::addr_of!(_17);
_55.fld0.2 = Field::<(f64, usize, bool)>(Variant(_14.0.0.fld2, 0), 2).2;
(*_45).fld4 = [Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3)];
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = _14.2 as f64;
_55.fld0 = ((*_45).fld0.0, Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1, Field::<bool>(Variant((*_2), 0), 0));
_19 = Field::<(f64, usize, bool)>(Variant(_14.0.0.fld2, 0), 2).2 > Field::<bool>(Variant((*_2), 0), 0);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = -(*_45).fld0.0;
(*_45).fld4 = [Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3)];
_58 = (*_45).fld0.0 + Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = (*_45).fld0.1 | (*_45).fld0.1;
_55.fld2 = (*_2);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = (*_45).fld0.1;
_55.fld0 = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2);
(*_45).fld0.0 = 17746451191621327656_u64 as f64;
(*_45).fld0.2 = Field::<bool>(Variant(_14.0.0.fld2, 0), 0);
(*_45).fld0 = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2);
_57 = _21 + _12;
_22 = Field::<i32>(Variant((*_2), 0), 3) + Field::<i32>(Variant((*_2), 0), 3);
place!(Field::<(f64, usize, bool)>(Variant(_14.0.0.fld2, 0), 2)).2 = !Field::<bool>(Variant((*_2), 0), 0);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = -(*_45).fld0.0;
_49 = _33;
(*_45).fld5 = core::ptr::addr_of!(_17);
Goto(bb26)
}
bb26 = {
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = (*_45).fld0.0;
_21 = -_57;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = (*_45).fld0.1;
(*_45).fld5 = core::ptr::addr_of!(_17);
place!(Field::<i32>(Variant((*_2), 0), 3)) = !_22;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = !(*_45).fld0.1;
_21 = _57;
(*_45).fld0 = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2);
(*_2) = _55.fld2;
(*_45).fld0.0 = _17.0 as f64;
place!(Field::<(f64, usize, bool)>(Variant(_55.fld2, 0), 2)).2 = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
(*_45).fld1 = _14.1;
(*_45).fld0 = Field::<(f64, usize, bool)>(Variant(_55.fld2, 0), 2);
place!(Field::<i32>(Variant((*_2), 0), 3)) = _22 * _22;
place!(Field::<f64>(Variant((*_2), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
(*_45).fld0 = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2);
place!(Field::<i32>(Variant((*_2), 0), 3)) = _22;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = (*_45).fld0.0;
place!(Field::<(f64, usize, bool)>(Variant(_14.0.0.fld2, 0), 2)).1 = (*_45).fld0.1 * (*_45).fld0.1;
(*_45).fld1 = [_33,_33,_33,_49,_49];
(*_45).fld0.1 = !Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1;
(*_45).fld0.2 = Field::<bool>(Variant((*_2), 0), 0) != Field::<(f64, usize, bool)>(Variant(_55.fld2, 0), 2).2;
(*_45).fld0.0 = -Field::<f64>(Variant((*_2), 0), 4);
(*_45).fld0.0 = (*_45).fld0.1 as f64;
Goto(bb27)
}
bb27 = {
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).2 = Field::<bool>(Variant((*_2), 0), 0) & Field::<bool>(Variant((*_2), 0), 0);
Goto(bb28)
}
bb28 = {
(*_45).fld5 = core::ptr::addr_of!(_17);
place!(Field::<f64>(Variant((*_2), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
(*_45).fld0.1 = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1 & Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1;
(*_45).fld0.2 = Field::<bool>(Variant((*_2), 0), 0) | _19;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = (*_45).fld0.0 * Field::<f64>(Variant((*_2), 0), 4);
place!(Field::<char>(Variant((*_2), 0), 1)) = _7;
place!(Field::<(f64, usize, bool)>(Variant(_55.fld2, 0), 2)).2 = !Field::<bool>(Variant((*_2), 0), 0);
(*_45).fld5 = core::ptr::addr_of!(_17);
(*_45).fld0.2 = Field::<(f64, usize, bool)>(Variant(_14.0.0.fld2, 0), 2).0 != Field::<(f64, usize, bool)>(Variant(_55.fld2, 0), 2).0;
_64 = [Field::<bool>(Variant((*_2), 0), 0),Field::<bool>(Variant((*_2), 0), 0),Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2,_55.fld0.2,Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2,Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2];
(*_45).fld1 = [_33,_49,_33,_49,_33];
(*_45).fld1 = [_33,_49,_33,_49,_49];
(*_45).fld0.2 = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2 != Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = !(*_45).fld0.1;
_36 = core::ptr::addr_of!((*_45).fld5);
(*_45).fld0.2 = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2 | Field::<bool>(Variant((*_2), 0), 0);
Goto(bb29)
}
bb29 = {
(*_45).fld0.2 = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
_25.0 = Move((*_45).fld5);
(*_45).fld4 = [Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3)];
Goto(bb30)
}
bb30 = {
(*_45).fld1 = [_33,_33,_49,_33,_33];
(*_45).fld3 = _17.3 + _17.3;
_43 = &place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1;
_14.0.0.fld4 = [Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3)];
(*_45).fld0.0 = Field::<f64>(Variant((*_2), 0), 4) - Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
(*_45).fld5 = core::ptr::addr_of!(_17);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).2 = Field::<f64>(Variant((*_2), 0), 4) > (*_45).fld0.0;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).2 = (*_45).fld0.2 > Field::<bool>(Variant((*_2), 0), 0);
(*_45).fld0.0 = _27 as f64;
_71 = -Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
place!(Field::<(f64, usize, bool)>(Variant(_14.0.0.fld2, 0), 2)).0 = Field::<f64>(Variant(_14.0.0.fld2, 0), 4);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)) = (_55.fld0.0, (*_45).fld0.1, (*_45).fld0.2);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = Field::<f64>(Variant((*_2), 0), 4) + Field::<f64>(Variant((*_2), 0), 4);
(*_45).fld0.2 = !Field::<bool>(Variant((*_2), 0), 0);
(*_45).fld5 = core::ptr::addr_of!(_17);
Goto(bb31)
}
bb31 = {
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).2 = (*_45).fld0.2;
_29 = &_50;
(*_45).fld1 = [_49,_49,_49,_49,_33];
(*_45).fld3 = !_17.3;
(*_45).fld0.1 = !Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = !(*_45).fld0.1;
(*_45).fld0.2 = Field::<bool>(Variant((*_2), 0), 0);
(*_45).fld0.0 = Field::<f64>(Variant((*_2), 0), 4);
(*_45).fld0.1 = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1 >> Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1;
(*_45).fld3 = _17.3 * _17.3;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)) = (Field::<(f64, usize, bool)>(Variant(_55.fld2, 0), 2).0, (*_45).fld0.1, Field::<bool>(Variant((*_2), 0), 0));
place!(Field::<bool>(Variant((*_2), 0), 0)) = (*_45).fld0.2;
(*_45).fld5 = core::ptr::addr_of!(_80);
place!(Field::<i32>(Variant((*_2), 0), 3)) = _22 + _22;
(*_45).fld4 = [Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3)];
place!(Field::<(f64, usize, bool)>(Variant(_14.0.0.fld2, 0), 2)).2 = !Field::<bool>(Variant((*_2), 0), 0);
(*_45).fld5 = Move(_25.0);
(*_45).fld3 = _17.3 + _17.3;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = (*_45).fld0.1;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).2 = (*_45).fld0.2 ^ (*_45).fld0.2;
Goto(bb32)
}
bb32 = {
(*_45).fld0.1 = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1 - Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1;
_17.3 = (*_45).fld3 >> Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1;
(*_45).fld4 = [Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3)];
(*_45).fld0.2 = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1 >= (*_45).fld0.1;
(*_45).fld3 = _17.3 | _17.3;
(*_45).fld0.1 = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1 ^ Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1;
(*_45).fld0 = (Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0, Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1, Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = -Field::<f64>(Variant((*_2), 0), 4);
(*_45).fld0.1 = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1 & Field::<(f64, usize, bool)>(Variant(_14.0.0.fld2, 0), 2).1;
(*_45).fld1 = _14.1;
place!(Field::<bool>(Variant((*_2), 0), 0)) = (*_45).fld0.2;
Goto(bb33)
}
bb33 = {
place!(Field::<f64>(Variant(_14.0.0.fld2, 0), 4)) = _27 as f64;
(*_45).fld5 = core::ptr::addr_of!(_80);
(*_45).fld0.0 = -_55.fld0.0;
place!(Field::<char>(Variant((*_2), 0), 1)) = Field::<char>(Variant(_55.fld2, 0), 1);
_55.fld0.2 = _14.0.0.fld0.2;
(*_45).fld5 = core::ptr::addr_of!(_17);
Goto(bb34)
}
bb34 = {
place!(Field::<bool>(Variant((*_2), 0), 0)) = (*_45).fld0.2 & (*_45).fld0.2;
place!(Field::<(f64, usize, bool)>(Variant(_14.0.0.fld2, 0), 2)).1 = (*_45).fld0.1 << (*_45).fld0.1;
(*_45).fld5 = core::ptr::addr_of!(_17);
_31 = (*_45).fld0.0 as f32;
(*_2) = Adt28::Variant0 { fld0: _28,fld1: _10,fld2: (*_45).fld0,fld3: _22,fld4: (*_45).fld0.0 };
_14.0.0.fld0.2 = (*_45).fld3 < _14.0.0.fld3;
(*_45).fld0.1 = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1 ^ Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1;
place!(Field::<i32>(Variant((*_2), 0), 3)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2 as i32;
Goto(bb35)
}
bb35 = {
_46 = (*_45).fld0.0 * Field::<f64>(Variant((*_2), 0), 4);
Goto(bb36)
}
bb36 = {
_22 = Field::<i32>(Variant((*_2), 0), 3) * Field::<i32>(Variant((*_2), 0), 3);
(*_45).fld0 = (Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0, Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1, Field::<bool>(Variant((*_2), 0), 0));
place!(Field::<bool>(Variant((*_2), 0), 0)) = (*_45).fld0.2 == Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
_59 = _8 - _8;
_55.fld0.0 = (*_45).fld0.0 + _58;
_77 = Field::<i32>(Variant((*_2), 0), 3) as isize;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = Field::<f64>(Variant((*_2), 0), 4);
(*_45).fld0.0 = Field::<f64>(Variant((*_2), 0), 4);
_80.2 = _17.2;
_12 = _77 as f32;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = (*_45).fld0.0;
_23 = [_6,_6,_6];
(*_45).fld3 = !_17.3;
(*_45).fld5 = core::ptr::addr_of!(_80);
_55.fld1 = [_49,_49,_49,_33,_49];
(*_45).fld0.2 = !Field::<bool>(Variant((*_2), 0), 0);
(*_45).fld0 = (Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0, Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1, Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2);
_48 = core::ptr::addr_of!(_85.fld4);
Goto(bb37)
}
bb37 = {
_64 = [Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2,Field::<bool>(Variant((*_2), 0), 0),_55.fld0.2,Field::<bool>(Variant((*_2), 0), 0),(*_45).fld0.2,_19];
(*_45).fld0.1 = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1;
(*_48) = [Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3)];
Goto(bb38)
}
bb38 = {
(*_45).fld4 = (*_48);
(*_45).fld1 = [_33,_33,_49,_49,_33];
_30.0 = _77 as usize;
(*_45).fld3 = 4360_i16 as u32;
_64 = [(*_45).fld0.2,Field::<bool>(Variant((*_2), 0), 0),Field::<bool>(Variant((*_2), 0), 0),Field::<bool>(Variant((*_2), 0), 0),Field::<bool>(Variant((*_2), 0), 0),_28];
_89 = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2);
(*_45).fld4 = [Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3)];
(*_45).fld4 = [Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3)];
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).2 = !_19;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = (*_45).fld0.1 & _30.0;
(*_48) = [Field::<i32>(Variant((*_2), 0), 3),Field::<i32>(Variant((*_2), 0), 3)];
(*_2) = Adt28::Variant0 { fld0: (*_45).fld0.2,fld1: Field::<char>(Variant(_55.fld2, 0), 1),fld2: (*_45).fld0,fld3: _22,fld4: (*_45).fld0.0 };
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)) = (Field::<f64>(Variant((*_2), 0), 4), (*_45).fld0.1, Field::<bool>(Variant((*_2), 0), 0));
_61 = &mut _59;
_25.1 = [_27,_27,_27,_27,_27,_27,_27];
place!(Field::<i32>(Variant((*_2), 0), 3)) = _22 * _22;
(*_45).fld0 = (_58, Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1, Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2);
_55.fld4 = (*_45).fld4;
place!(Field::<char>(Variant((*_2), 0), 1)) = _3;
place!(Field::<f64>(Variant((*_2), 0), 4)) = -Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)) = (*_45).fld0;
_89.1 = !_30.0;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)) = (Field::<f64>(Variant((*_2), 0), 4), (*_45).fld0.1, (*_45).fld0.2);
place!(Field::<bool>(Variant((*_2), 0), 0)) = (*_45).fld0.2 ^ Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
Goto(bb39)
}
bb39 = {
(*_45).fld3 = _17.3 & _17.3;
place!(Field::<i32>(Variant((*_2), 0), 3)) = _22 & _22;
(*_45).fld5 = core::ptr::addr_of!(_17);
place!(Field::<f64>(Variant((*_2), 0), 4)) = _27 as f64;
(*_45).fld0 = (Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0, Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1, Field::<bool>(Variant((*_2), 0), 0));
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)) = ((*_45).fld0.0, (*_45).fld0.1, (*_45).fld0.2);
(*_45).fld0 = _55.fld0;
place!(Field::<i32>(Variant((*_2), 0), 3)) = _14.2 as i32;
_87 = Move(_48);
_21 = 7136213461232451784_u64 as f32;
(*_45).fld0.1 = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1 | _30.0;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = Field::<i32>(Variant((*_2), 0), 3) as f64;
Call((*_45).fld0.0 = core::intrinsics::fmaf64(_89.0, _71, Field::<(f64, usize, bool)>(Variant(_55.fld2, 0), 2).0), ReturnTo(bb40), UnwindUnreachable())
}
bb40 = {
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).2 = (*_45).fld3 == (*_45).fld3;
place!(Field::<f64>(Variant((*_2), 0), 4)) = _55.fld0.0 * (*_45).fld0.0;
(*_45).fld0 = (Field::<f64>(Variant((*_2), 0), 4), Field::<(f64, usize, bool)>(Variant(_14.0.0.fld2, 0), 2).1, Field::<bool>(Variant((*_2), 0), 0));
place!(Field::<(f64, usize, bool)>(Variant(_55.fld2, 0), 2)) = ((*_45).fld0.0, (*_45).fld0.1, _14.0.0.fld0.2);
(*_45).fld0 = (Field::<f64>(Variant((*_2), 0), 4), Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1, Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2);
place!(Field::<f64>(Variant((*_2), 0), 4)) = -(*_45).fld0.0;
(*_45).fld0.1 = !Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1;
_45 = core::ptr::addr_of!(_14.0.0);
place!(Field::<f64>(Variant((*_2), 0), 4)) = (*_45).fld0.0 - (*_45).fld0.0;
place!(Field::<i32>(Variant((*_45).fld2, 0), 3)) = -_22;
place!(Field::<(f64, usize, bool)>(Variant((*_45).fld2, 0), 2)).0 = -_71;
_30.0 = Field::<(f64, usize, bool)>(Variant((*_45).fld2, 0), 2).1 + (*_45).fld0.1;
_55.fld5 = Move((*_45).fld5);
_88.0 = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2);
Goto(bb41)
}
bb41 = {
(*_45).fld4 = [Field::<i32>(Variant((*_45).fld2, 0), 3),Field::<i32>(Variant((*_45).fld2, 0), 3)];
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).2 = _28;
(*_45).fld5 = core::ptr::addr_of!(_17);
(*_61) = !_77;
place!(Field::<char>(Variant((*_45).fld2, 0), 1)) = _20;
_80.1 = [(*_45).fld3,_17.3];
Call(_51 = core::intrinsics::transmute((*_61)), ReturnTo(bb42), UnwindUnreachable())
}
bb42 = {
(*_61) = _77 + _51;
_17.3 = !(*_45).fld3;
place!(Field::<char>(Variant((*_2), 0), 1)) = _20;
_19 = Field::<f64>(Variant((*_2), 0), 4) > Field::<f64>(Variant((*_2), 0), 4);
place!(Field::<(f64, usize, bool)>(Variant((*_45).fld2, 0), 2)).1 = !_30.0;
place!(Field::<i32>(Variant((*_45).fld2, 0), 3)) = _22 & _22;
place!(Field::<f64>(Variant((*_2), 0), 4)) = (*_45).fld0.0 * (*_45).fld0.0;
_14.0.0.fld0.2 = Field::<i32>(Variant((*_45).fld2, 0), 3) == Field::<i32>(Variant((*_45).fld2, 0), 3);
place!(Field::<i32>(Variant((*_45).fld2, 0), 3)) = _22 | _22;
place!(Field::<bool>(Variant((*_2), 0), 0)) = Field::<bool>(Variant(_55.fld2, 0), 0);
(*_45).fld4 = _55.fld4;
place!(Field::<bool>(Variant((*_2), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
(*_45).fld0.2 = !Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
place!(Field::<i32>(Variant((*_45).fld2, 0), 3)) = _22;
(*_2) = _55.fld2;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = (*_45).fld0.1 & (*_45).fld0.1;
_16 = _89.2 | Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
Goto(bb43)
}
bb43 = {
_102.1 = !_32;
(*_2) = _55.fld2;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).2 = (*_45).fld0.2 ^ _28;
_102.2.0 = _49 as i8;
(*_45).fld0 = (Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0, Field::<(f64, usize, bool)>(Variant(_14.0.0.fld2, 0), 2).1, Field::<bool>(Variant((*_2), 0), 0));
Goto(bb44)
}
bb44 = {
_96.fld0.1 = _17.0 as usize;
_80 = (_17.0, _17.1, _17.2, (*_45).fld3);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).0 = -(*_45).fld0.0;
place!(Field::<f64>(Variant((*_2), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)) = ((*_45).fld0.0, _88.0.1, _89.2);
(*_45).fld0.0 = -Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
(*_45).fld5 = core::ptr::addr_of!(_80);
_99 = _22;
(*_45).fld6 = core::ptr::addr_of_mut!(_100);
_95 = &(*_61);
_73 = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
(*_45).fld5 = core::ptr::addr_of!(_17);
(*_45).fld4 = [_99,_22];
(*_45).fld0 = (Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0, Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1, Field::<bool>(Variant(_14.0.0.fld2, 0), 0));
place!(Field::<char>(Variant((*_2), 0), 1)) = _7;
_107 = _12 + _12;
_4 = Field::<char>(Variant((*_2), 0), 1) as isize;
place!(Field::<bool>(Variant((*_2), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).2;
(*_45).fld3 = _17.3 ^ _80.3;
place!(Field::<(f64, usize, bool)>(Variant(_55.fld2, 0), 2)).2 = !Field::<bool>(Variant((*_2), 0), 0);
(*_45).fld1 = _14.1;
(*_45).fld1 = [_49,_33,_33,_33,_33];
_40 = &_102.2;
(*_45).fld0.2 = (*_45).fld3 > (*_45).fld3;
place!(Field::<char>(Variant((*_2), 0), 1)) = _10;
place!(Field::<char>(Variant((*_2), 0), 1)) = _20;
Call(_74.0.1 = core::intrinsics::transmute(_9), ReturnTo(bb45), UnwindUnreachable())
}
bb45 = {
place!(Field::<(f64, usize, bool)>(Variant(_14.0.0.fld2, 0), 2)).0 = _22 as f64;
(*_45).fld0 = (Field::<f64>(Variant((*_2), 0), 4), Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1, Field::<bool>(Variant((*_2), 0), 0));
place!(Field::<char>(Variant((*_2), 0), 1)) = _7;
_55.fld2 = Adt28::Variant1 { fld0: Field::<bool>(Variant((*_2), 0), 0),fld1: _88,fld2: (*_45).fld3 };
_74 = ((*_45).fld0,);
Goto(bb46)
}
bb46 = {
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)) = (Field::<f64>(Variant((*_2), 0), 4), (*_45).fld0.1, _89.2);
_89.1 = (*_45).fld0.1;
_39 = Move(_95);
_80.3 = (*_45).fld3 | (*_45).fld3;
_55.fld3 = (*_45).fld3;
place!(Field::<f64>(Variant((*_2), 0), 4)) = -_71;
_71 = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0 - Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
place!(Field::<bool>(Variant((*_2), 0), 0)) = (*_45).fld0.0 > Field::<f64>(Variant((*_2), 0), 4);
(*_61) = _51 | _51;
place!(Field::<char>(Variant((*_2), 0), 1)) = _20;
place!(Field::<f64>(Variant((*_2), 0), 4)) = (*_45).fld3 as f64;
_60 = (*_61) << (*_61);
_91 = (*_61);
_94 = -_12;
_108 = &(*_61);
(*_45).fld3 = _99 as u32;
Goto(bb47)
}
bb47 = {
(*_45).fld0.2 = !Field::<bool>(Variant((*_2), 0), 0);
_81.0.0 = core::ptr::addr_of_mut!(_100);
(*_61) = _60 ^ _1;
place!(Field::<f64>(Variant((*_2), 0), 4)) = _58;
Goto(bb48)
}
bb48 = {
_81.2 = [(*_45).fld3,(*_45).fld3];
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = _22 as usize;
_55.fld0.1 = !Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).1;
(*_45).fld6 = core::ptr::addr_of_mut!(_100);
(*_45).fld6 = core::ptr::addr_of_mut!(_100);
_96.fld0.0 = Field::<(f64, usize, bool)>(Variant((*_2), 0), 2).0;
(*_45).fld1 = [_49,_49,_33,_49,_33];
(*_45).fld4 = [_22,_22];
(*_45).fld3 = Field::<u32>(Variant(_55.fld2, 1), 2) & Field::<u32>(Variant(_55.fld2, 1), 2);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)) = _55.fld0;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = (*_45).fld0.1 | (*_45).fld0.1;
_37 = !(*_61);
(*_45).fld0.0 = _88.0.0 + Field::<f64>(Variant((*_2), 0), 4);
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).1 = Field::<((f64, usize, bool),)>(Variant(_55.fld2, 1), 1).0.1 & _30.0;
(*_45).fld0 = _88.0;
place!(Field::<(f64, usize, bool)>(Variant((*_2), 0), 2)).2 = (*_45).fld0.2;
_55.fld4 = (*_45).fld4;
(*_2) = _55.fld2;
_96.fld5 = core::ptr::addr_of!(_17);
_107 = Field::<u32>(Variant((*_2), 1), 2) as f32;
_5 = (*_61);
place!(Field::<((f64, usize, bool),)>(Variant((*_2), 1), 1)) = ((*_45).fld0,);
(*_45).fld0 = Field::<((f64, usize, bool),)>(Variant((*_2), 1), 1).0;
Call((*_45).fld5 = core::intrinsics::arith_offset(_55.fld5, (-62_isize)), ReturnTo(bb49), UnwindUnreachable())
}
bb49 = {
(*_61) = _91 << (*_45).fld0.1;
(*_45).fld0.2 = (*_45).fld0.1 <= Field::<((f64, usize, bool),)>(Variant((*_2), 1), 1).0.1;
_24 = (*_61) ^ (*_61);
(*_45).fld3 = Field::<u32>(Variant((*_2), 1), 2) >> Field::<u32>(Variant((*_2), 1), 2);
_115.1 = core::ptr::addr_of!((*_40));
_56 = [_14.2,_14.2,_14.2,_14.2,_14.2,_14.2];
_85.fld0.2 = Field::<((f64, usize, bool),)>(Variant((*_2), 1), 1).0.2 | _74.0.2;
Goto(bb50)
}
bb50 = {
(*_45).fld1 = _14.1;
_80 = _17;
(*_45).fld0.0 = _27 as f64;
place!(Field::<((f64, usize, bool),)>(Variant((*_2), 1), 1)).0 = (*_45).fld0;
(*_45).fld3 = _55.fld3 << Field::<u32>(Variant((*_2), 1), 2);
place!(Field::<((f64, usize, bool),)>(Variant(_14.0.0.fld2, 1), 1)).0.1 = _30.0;
(*_45).fld6 = core::ptr::addr_of_mut!(_100);
(*_45).fld4 = [_99,_99];
(*_45).fld6 = core::ptr::addr_of_mut!(_100);
place!(Field::<((f64, usize, bool),)>(Variant((*_2), 1), 1)).0.2 = (*_45).fld3 >= Field::<u32>(Variant((*_2), 1), 2);
(*_45).fld4 = [_22,_99];
Goto(bb51)
}
bb51 = {
_14.0.2 = core::ptr::addr_of!((*_2));
(*_45).fld0.0 = _49 as f64;
place!(Field::<((f64, usize, bool),)>(Variant((*_2), 1), 1)).0.0 = Field::<((f64, usize, bool),)>(Variant((*_2), 1), 1).0.1 as f64;
(*_45).fld0.2 = (*_61) == (*_61);
(*_45).fld6 = core::ptr::addr_of_mut!(_100);
_96 = Move(_14.0.0);
_81.0.0 = core::ptr::addr_of_mut!(_100);
(*_45).fld6 = core::ptr::addr_of_mut!(_100);
(*_45).fld3 = 11067_i16 as u32;
(*_45).fld0 = _55.fld0;
_99 = -_22;
(*_45).fld6 = core::ptr::addr_of_mut!(_100);
(*_45).fld0.2 = _28 & _16;
RET = core::ptr::addr_of_mut!(_100);
place!(Field::<((f64, usize, bool),)>(Variant(_55.fld2, 1), 1)).0 = ((*_45).fld0.0, _30.0, (*_45).fld0.2);
(*RET) = (-6771_i16);
Goto(bb52)
}
bb52 = {
Call(_123 = dump_var(9_usize, 20_usize, Move(_20), 16_usize, Move(_16), 80_usize, Move(_80), 23_usize, Move(_23)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Call(_123 = dump_var(9_usize, 49_usize, Move(_49), 59_usize, Move(_59), 5_usize, Move(_5), 19_usize, Move(_19)), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Call(_123 = dump_var(9_usize, 32_usize, Move(_32), 28_usize, Move(_28), 1_usize, Move(_1), 24_usize, Move(_24)), ReturnTo(bb55), UnwindUnreachable())
}
bb55 = {
Call(_123 = dump_var(9_usize, 50_usize, Move(_50), 27_usize, Move(_27), 60_usize, Move(_60), 17_usize, Move(_17)), ReturnTo(bb56), UnwindUnreachable())
}
bb56 = {
Call(_123 = dump_var(9_usize, 6_usize, Move(_6), 124_usize, _124, 124_usize, _124, 124_usize, _124), ReturnTo(bb57), UnwindUnreachable())
}
bb57 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn10(mut _1: char,mut _2: isize,mut _3: f64,mut _4: char,mut _5: char,mut _6: bool,mut _7: isize,mut _8: f64,mut _9: &'static i64) -> usize {
mir! {
type RET = usize;
let _10: ((f64, usize, bool),);
let _11: ((*mut i16, u64), bool, [u32; 2]);
let _12: u16;
let _13: char;
let _14: i64;
let _15: [i128; 8];
let _16: char;
let _17: &'static mut (*mut i16, usize, char);
let _18: char;
let _19: char;
let _20: *mut (&'static i64, u16, (i8,));
let _21: [i64; 6];
let _22: *const [i32; 2];
let _23: &'static isize;
let _24: i16;
let _25: i128;
let _26: u128;
let _27: i8;
let _28: [u8; 7];
let _29: bool;
let _30: bool;
let _31: *const *const (i8, [u32; 2], [i32; 7], u32);
let _32: (i8, [u32; 2], [i32; 7], u32);
let _33: usize;
let _34: *mut &'static i64;
let _35: f32;
let _36: u8;
let _37: usize;
let _38: isize;
let _39: &'static [u8; 1];
let _40: char;
let _41: (bool, u128, usize);
let _42: f32;
let _43: *const (i8, [u32; 2], [i32; 7], u32);
let _44: (*mut i16, u64);
let _45: i8;
let _46: &'static mut i64;
let _47: char;
let _48: *mut &'static i64;
let _49: f32;
let _50: i32;
let _51: *mut (&'static i64, u16, (i8,));
let _52: *const (i8, [u32; 2], [i32; 7], u32);
let _53: u8;
let _54: i64;
let _55: u128;
let _56: *const &'static mut &'static mut (*mut i16, usize, char);
let _57: i8;
let _58: [u128; 5];
let _59: ((f64, usize, bool),);
let _60: *const Adt28;
let _61: char;
let _62: (isize,);
let _63: *mut (&'static i64, u16, (i8,));
let _64: f64;
let _65: ([u8; 1],);
let _66: f64;
let _67: i64;
let _68: char;
let _69: &'static mut isize;
let _70: char;
let _71: f64;
let _72: (i8,);
let _73: &'static usize;
let _74: [i128; 8];
let _75: f32;
let _76: isize;
let _77: f64;
let _78: char;
let _79: u8;
let _80: *const (i8, [u32; 2], [i32; 7], u32);
let _81: *mut &'static i64;
let _82: bool;
let _83: *const &'static mut &'static mut (*mut i16, usize, char);
let _84: &'static usize;
let _85: i8;
let _86: i8;
let _87: &'static usize;
let _88: isize;
let _89: Adt47;
let _90: isize;
let _91: *mut [i32; 7];
let _92: Adt84;
let _93: u16;
let _94: *const Adt28;
let _95: *const [u128; 5];
let _96: ();
let _97: ();
{
_7 = -_2;
_6 = true;
_10.0.1 = 3951784499105879857_usize & 6_usize;
_6 = false & false;
_8 = _3 + _3;
_10.0.1 = (-8786919373866304947_i64) as usize;
_12 = (-1455551240_i32) as u16;
_15 = [(-152242743090514557086647805843721961615_i128),162280449767159550093199712377405536308_i128,169657209181246777880525336351701979887_i128,(-39180977596100653288997399027580935557_i128),105111608161229976639422428548562074037_i128,54660855366003068579773489923354133712_i128,89511908425803781365517130396056550254_i128,(-878208571942472135900808508301477169_i128)];
RET = _2 as usize;
_15 = [(-120007948086149934131390521781208663416_i128),68514683544733932895561602591978264936_i128,127227948044343583920256874528403238932_i128,123026483736925698893962182107042517429_i128,101877228372906653674940550284281694339_i128,(-38121970370941290002170847203941565198_i128),147414531472704751232775898451408226764_i128,120419004818797091464661137096852546068_i128];
_12 = 58900_u16;
_12 = (-157107881278290550726063402950976475998_i128) as u16;
RET = _10.0.1;
_14 = 7756280512534144717_i64;
_13 = _4;
_10.0.0 = -_3;
_11.1 = _6 | _6;
_11.2 = [1509720844_u32,3536503728_u32];
_11.0.1 = RET as u64;
_9 = &_14;
Call(_12 = fn11(_5, Move(_9), _10.0.0, (*_9), (*_9), _13, _6, _13, (*_9), (*_9), (*_9), (*_9)), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_5 = _1;
_14 = _10.0.1 as i64;
_10.0 = (_3, RET, _11.1);
_18 = _4;
_1 = _5;
_11.0.1 = 6788550707839674351_u64 & 17035517929014532924_u64;
_2 = _7;
_9 = &_14;
_13 = _5;
_10.0 = (_8, RET, _11.1);
_18 = _4;
_3 = _10.0.0 * _10.0.0;
_16 = _4;
_12 = 38902_u16 >> (*_9);
_14 = 3440332422043008731_i64 << _11.0.1;
Goto(bb2)
}
bb2 = {
_13 = _18;
_7 = _2;
_12 = 2211_u16;
_2 = _10.0.0 as isize;
_2 = 107_i8 as isize;
_10.0 = (_3, RET, _11.1);
_11.0.1 = !3262112765529255931_u64;
_10.0 = (_3, RET, _6);
_10.0.0 = _8 - _3;
_3 = _10.0.0 + _10.0.0;
_12 = 15206_u16 * 9428_u16;
_13 = _5;
_23 = &_2;
Call(_8 = core::intrinsics::fmaf64(_10.0.0, _10.0.0, _3), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_19 = _13;
_16 = _18;
_15 = [124509786456228574389514306935864738305_i128,(-140759608974034809460656329044675648744_i128),(-123231884219120056327742375024416216928_i128),147815255829218282308715093414275706005_i128,89176140258211369836769197030038654228_i128,107171447526394082995283497782979714796_i128,(-54164743370264161854783115158782672592_i128),(-144918828204902754525649582492956914375_i128)];
_15 = [54981559087749385359656138782344716968_i128,63897514462456042144501808421146507161_i128,168865064494227582583484462924283245788_i128,106937724928682631637142195035672775167_i128,64521210968338383586092193859159506182_i128,(-84154253612252480927526191049000665421_i128),(-28785882070266452266313555845930025383_i128),41586509523057431408581025610541845694_i128];
_10.0 = (_3, RET, _11.1);
_4 = _19;
_14 = (-4764326974069236635_i64) & 5923695836327057278_i64;
_10.0 = (_3, RET, _11.1);
_14 = 3998802542379359032_i64;
_11.0.1 = 9372646139381419773_u64;
_4 = _5;
_21 = [_14,_14,_14,_14,_14,_14];
_26 = 42684601432395247402815637226779259977_u128;
_27 = -96_i8;
_6 = _12 == _12;
_7 = -(*_23);
_1 = _19;
Goto(bb4)
}
bb4 = {
_12 = 37983_u16 + 36458_u16;
_23 = &_7;
_30 = !_6;
_27 = (-49_i8);
_11.0.1 = _1 as u64;
_10.0.1 = RET;
_1 = _16;
_14 = 1388761581402826587_i64 << (*_23);
_18 = _5;
_10.0 = (_3, RET, _6);
_5 = _19;
_10.0 = (_3, RET, _11.1);
_30 = _11.1 & _11.1;
_12 = 44142_u16;
_24 = (-28657_i16) - (-5671_i16);
_11.0.0 = core::ptr::addr_of_mut!(_24);
_16 = _13;
_23 = &_2;
_19 = _1;
_10.0 = (_8, RET, _30);
_23 = &_7;
_23 = &_2;
match _27 {
340282366920938463463374607431768211407 => bb6,
_ => bb5
}
}
bb5 = {
_13 = _18;
_7 = _2;
_12 = 2211_u16;
_2 = _10.0.0 as isize;
_2 = 107_i8 as isize;
_10.0 = (_3, RET, _11.1);
_11.0.1 = !3262112765529255931_u64;
_10.0 = (_3, RET, _6);
_10.0.0 = _8 - _3;
_3 = _10.0.0 + _10.0.0;
_12 = 15206_u16 * 9428_u16;
_13 = _5;
_23 = &_2;
Call(_8 = core::intrinsics::fmaf64(_10.0.0, _10.0.0, _3), ReturnTo(bb3), UnwindUnreachable())
}
bb6 = {
_16 = _19;
_5 = _4;
_19 = _5;
_16 = _19;
_30 = _6;
_11.1 = !_10.0.2;
_4 = _18;
_3 = _8;
_10.0.2 = _11.1 > _30;
_28 = [230_u8,139_u8,13_u8,201_u8,201_u8,134_u8,210_u8];
_13 = _5;
_13 = _16;
_26 = _18 as u128;
_11.0.0 = core::ptr::addr_of_mut!(_24);
_32.1 = _11.2;
_2 = -_7;
_12 = 7114_u16 + 21732_u16;
_2 = _7 * _7;
_7 = _27 as isize;
_25 = (-2770694359331940893603998847308715977_i128) << RET;
match _27 {
340282366920938463463374607431768211407 => bb7,
_ => bb1
}
}
bb7 = {
_15 = [_25,_25,_25,_25,_25,_25,_25,_25];
_29 = _30;
_10.0 = (_3, RET, _11.1);
_29 = _7 < _2;
match _27 {
0 => bb6,
1 => bb2,
340282366920938463463374607431768211407 => bb9,
_ => bb8
}
}
bb8 = {
_19 = _13;
_16 = _18;
_15 = [124509786456228574389514306935864738305_i128,(-140759608974034809460656329044675648744_i128),(-123231884219120056327742375024416216928_i128),147815255829218282308715093414275706005_i128,89176140258211369836769197030038654228_i128,107171447526394082995283497782979714796_i128,(-54164743370264161854783115158782672592_i128),(-144918828204902754525649582492956914375_i128)];
_15 = [54981559087749385359656138782344716968_i128,63897514462456042144501808421146507161_i128,168865064494227582583484462924283245788_i128,106937724928682631637142195035672775167_i128,64521210968338383586092193859159506182_i128,(-84154253612252480927526191049000665421_i128),(-28785882070266452266313555845930025383_i128),41586509523057431408581025610541845694_i128];
_10.0 = (_3, RET, _11.1);
_4 = _19;
_14 = (-4764326974069236635_i64) & 5923695836327057278_i64;
_10.0 = (_3, RET, _11.1);
_14 = 3998802542379359032_i64;
_11.0.1 = 9372646139381419773_u64;
_4 = _5;
_21 = [_14,_14,_14,_14,_14,_14];
_26 = 42684601432395247402815637226779259977_u128;
_27 = -96_i8;
_6 = _12 == _12;
_7 = -(*_23);
_1 = _19;
Goto(bb4)
}
bb9 = {
_1 = _19;
_11.0.0 = core::ptr::addr_of_mut!(_24);
_32.2 = [1458698520_i32,(-2096455503_i32),(-1978912640_i32),(-1614776642_i32),1330378968_i32,959680357_i32,(-479794224_i32)];
_11.0.1 = !14010363913803627826_u64;
_21 = [_14,_14,_14,_14,_14,_14];
_5 = _19;
_35 = 228_u8 as f32;
_34 = core::ptr::addr_of_mut!(_9);
_26 = !252867051747220009511037369714875436895_u128;
_4 = _19;
_8 = _10.0.0 + _3;
_27 = 96_i8;
_15 = [_25,_25,_25,_25,_25,_25,_25,_25];
_19 = _5;
_34 = core::ptr::addr_of_mut!((*_34));
_11.0.0 = core::ptr::addr_of_mut!(_24);
_32.0 = _27;
_14 = !(-4416625313967956857_i64);
_33 = 207_u8 as usize;
_7 = _2 ^ _2;
_29 = _30 | _11.1;
RET = !_10.0.1;
_33 = _10.0.1 + RET;
_24 = (-20419_i16);
_32.0 = _27;
_25 = 147475702797622416605853145690308044471_i128 << _12;
_7 = !_2;
Call(_5 = fn13(Move((*_34)), Move(_34), Move(_11), _29, _4), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_32.0 = -_27;
_6 = _35 == _35;
_37 = !_33;
Call(_38 = core::intrinsics::transmute(_2), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_10.0.0 = _25 as f64;
_35 = 48_u8 as f32;
_38 = _2 + _7;
_14 = 7064028911245379126_i64 << _12;
_12 = 55264_u16 - 30406_u16;
_5 = _19;
_36 = !163_u8;
_2 = _14 as isize;
_32.3 = 3181005021_u32;
_11.0.1 = _24 as u64;
_19 = _5;
_4 = _19;
_35 = _24 as f32;
_37 = !_33;
_8 = _3 * _10.0.0;
_12 = 34586_u16 + 20072_u16;
_40 = _13;
_9 = &_14;
_4 = _13;
_16 = _5;
_4 = _13;
_18 = _13;
_29 = !_30;
_35 = _12 as f32;
match _32.3 {
0 => bb7,
1 => bb12,
2 => bb13,
3 => bb14,
4 => bb15,
3181005021 => bb17,
_ => bb16
}
}
bb12 = {
_13 = _18;
_7 = _2;
_12 = 2211_u16;
_2 = _10.0.0 as isize;
_2 = 107_i8 as isize;
_10.0 = (_3, RET, _11.1);
_11.0.1 = !3262112765529255931_u64;
_10.0 = (_3, RET, _6);
_10.0.0 = _8 - _3;
_3 = _10.0.0 + _10.0.0;
_12 = 15206_u16 * 9428_u16;
_13 = _5;
_23 = &_2;
Call(_8 = core::intrinsics::fmaf64(_10.0.0, _10.0.0, _3), ReturnTo(bb3), UnwindUnreachable())
}
bb13 = {
_19 = _13;
_16 = _18;
_15 = [124509786456228574389514306935864738305_i128,(-140759608974034809460656329044675648744_i128),(-123231884219120056327742375024416216928_i128),147815255829218282308715093414275706005_i128,89176140258211369836769197030038654228_i128,107171447526394082995283497782979714796_i128,(-54164743370264161854783115158782672592_i128),(-144918828204902754525649582492956914375_i128)];
_15 = [54981559087749385359656138782344716968_i128,63897514462456042144501808421146507161_i128,168865064494227582583484462924283245788_i128,106937724928682631637142195035672775167_i128,64521210968338383586092193859159506182_i128,(-84154253612252480927526191049000665421_i128),(-28785882070266452266313555845930025383_i128),41586509523057431408581025610541845694_i128];
_10.0 = (_3, RET, _11.1);
_4 = _19;
_14 = (-4764326974069236635_i64) & 5923695836327057278_i64;
_10.0 = (_3, RET, _11.1);
_14 = 3998802542379359032_i64;
_11.0.1 = 9372646139381419773_u64;
_4 = _5;
_21 = [_14,_14,_14,_14,_14,_14];
_26 = 42684601432395247402815637226779259977_u128;
_27 = -96_i8;
_6 = _12 == _12;
_7 = -(*_23);
_1 = _19;
Goto(bb4)
}
bb14 = {
_19 = _13;
_16 = _18;
_15 = [124509786456228574389514306935864738305_i128,(-140759608974034809460656329044675648744_i128),(-123231884219120056327742375024416216928_i128),147815255829218282308715093414275706005_i128,89176140258211369836769197030038654228_i128,107171447526394082995283497782979714796_i128,(-54164743370264161854783115158782672592_i128),(-144918828204902754525649582492956914375_i128)];
_15 = [54981559087749385359656138782344716968_i128,63897514462456042144501808421146507161_i128,168865064494227582583484462924283245788_i128,106937724928682631637142195035672775167_i128,64521210968338383586092193859159506182_i128,(-84154253612252480927526191049000665421_i128),(-28785882070266452266313555845930025383_i128),41586509523057431408581025610541845694_i128];
_10.0 = (_3, RET, _11.1);
_4 = _19;
_14 = (-4764326974069236635_i64) & 5923695836327057278_i64;
_10.0 = (_3, RET, _11.1);
_14 = 3998802542379359032_i64;
_11.0.1 = 9372646139381419773_u64;
_4 = _5;
_21 = [_14,_14,_14,_14,_14,_14];
_26 = 42684601432395247402815637226779259977_u128;
_27 = -96_i8;
_6 = _12 == _12;
_7 = -(*_23);
_1 = _19;
Goto(bb4)
}
bb15 = {
_15 = [_25,_25,_25,_25,_25,_25,_25,_25];
_29 = _30;
_10.0 = (_3, RET, _11.1);
_29 = _7 < _2;
match _27 {
0 => bb6,
1 => bb2,
340282366920938463463374607431768211407 => bb9,
_ => bb8
}
}
bb16 = {
_16 = _19;
_5 = _4;
_19 = _5;
_16 = _19;
_30 = _6;
_11.1 = !_10.0.2;
_4 = _18;
_3 = _8;
_10.0.2 = _11.1 > _30;
_28 = [230_u8,139_u8,13_u8,201_u8,201_u8,134_u8,210_u8];
_13 = _5;
_13 = _16;
_26 = _18 as u128;
_11.0.0 = core::ptr::addr_of_mut!(_24);
_32.1 = _11.2;
_2 = -_7;
_12 = 7114_u16 + 21732_u16;
_2 = _7 * _7;
_7 = _27 as isize;
_25 = (-2770694359331940893603998847308715977_i128) << RET;
match _27 {
340282366920938463463374607431768211407 => bb7,
_ => bb1
}
}
bb17 = {
_26 = 160613930490164286183874287440267497705_u128 | 220563014771776559544617818457899093584_u128;
_21 = [(*_9),(*_9),(*_9),(*_9),(*_9),(*_9)];
_44.0 = core::ptr::addr_of_mut!(_24);
_7 = -_38;
_41.1 = _26 & _26;
_41 = (_10.0.2, _26, _33);
_1 = _13;
_34 = core::ptr::addr_of_mut!(_9);
_10.0.1 = !_41.2;
_11.0 = (Move(_44.0), 235104358930301721_u64);
_24 = 32596_i16 + (-1275_i16);
_23 = &_38;
_41.1 = 1976122786_i32 as u128;
_32.3 = 379001982_u32 ^ 1609929101_u32;
_41.1 = _26 << (*_23);
_19 = _1;
_43 = core::ptr::addr_of!(_32);
_38 = -_7;
(*_43).2 = [514060473_i32,992197174_i32,1229408481_i32,(-741139944_i32),2008058367_i32,(-1477071259_i32),190735701_i32];
_47 = _1;
_1 = _16;
(*_43).3 = _35 as u32;
Goto(bb18)
}
bb18 = {
(*_43).0 = _27 * _27;
(*_43).2 = [(-1678575366_i32),(-240237348_i32),736570983_i32,(-1893977464_i32),462528702_i32,313607494_i32,1077766398_i32];
(*_43).1 = [(*_43).3,(*_43).3];
(*_43).3 = (*_43).0 as u32;
(*_43).0 = _36 as i8;
_24 = 9063_i16 * 11181_i16;
(*_43).1 = [(*_43).3,(*_43).3];
(*_43).3 = _11.0.1 as u32;
_2 = !_38;
(*_43).2 = [(-1822623908_i32),531089400_i32,1092861747_i32,70460257_i32,1629289034_i32,2114221066_i32,276827267_i32];
(*_43).1 = [(*_43).3,(*_43).3];
(*_43).0 = _27;
(*_43).3 = 481158847_i32 as u32;
_24 = _8 as i16;
_34 = core::ptr::addr_of_mut!((*_34));
Goto(bb19)
}
bb19 = {
_52 = core::ptr::addr_of!((*_43));
_37 = _41.2;
(*_43).3 = 1650345232_u32 << _41.2;
_7 = _38 * _2;
_45 = (-758394400_i32) as i8;
_48 = core::ptr::addr_of_mut!((*_34));
(*_52).0 = _27;
_36 = 74_u8;
_49 = _10.0.0 as f32;
(*_52).0 = _27 << (*_9);
_41.2 = !RET;
(*_52).2 = [(-1700027441_i32),(-1393641346_i32),(-1855277750_i32),(-1521583742_i32),(-1241882580_i32),11102808_i32,(-1053451638_i32)];
(*_43).3 = 243109099_u32 * 540817779_u32;
(*_43).3 = 541873431_u32 + 1757095639_u32;
_23 = &_7;
(*_52).0 = _45;
(*_43).3 = 206783195_u32 & 729097545_u32;
_10.0.1 = _37 & _37;
(*_43).1 = [(*_43).3,(*_43).3];
Goto(bb20)
}
bb20 = {
(*_43).2 = [1652650000_i32,1164486803_i32,582468969_i32,1734739619_i32,(-423382308_i32),(-957182384_i32),1575512489_i32];
(*_43).1 = [(*_43).3,(*_43).3];
_37 = _33 >> (*_9);
(*_43).3 = !1327787391_u32;
(*_43).2 = [1425256462_i32,(-1318962355_i32),1140380556_i32,1468176513_i32,1056242757_i32,(-1518116852_i32),(-424822956_i32)];
(*_43).0 = _36 as i8;
_44 = (Move(_11.0.0), _11.0.1);
_11 = (Move(_44), _29, (*_43).1);
(*_43).2 = [394346786_i32,(-1166213361_i32),424335337_i32,(-1241287921_i32),(-618433264_i32),453613523_i32,668319674_i32];
(*_43).0 = _45 | _45;
(*_43).0 = _27 - _45;
(*_43).1 = _11.2;
_48 = core::ptr::addr_of_mut!((*_48));
_41.2 = _37 - _10.0.1;
(*_43).0 = _45 ^ _45;
(*_43).1 = [(*_43).3,(*_43).3];
_47 = _5;
(*_43).0 = _45 << (*_23);
(*_43).1 = [(*_43).3,(*_43).3];
(*_43).2 = [(-1426639908_i32),560141671_i32,(-47836594_i32),(-1806121493_i32),643981420_i32,(-241101257_i32),763619913_i32];
_32.2 = [(-632839127_i32),(-1078449973_i32),(-1160840467_i32),438765109_i32,(-2031607880_i32),155793464_i32,(-542485492_i32)];
(*_43).1 = [(*_43).3,(*_43).3];
(*_43).0 = _30 as i8;
Goto(bb21)
}
bb21 = {
(*_43).1 = _11.2;
_18 = _13;
_23 = &_2;
(*_43).0 = _45 >> (*_23);
(*_43).0 = _27 ^ _45;
(*_43).3 = 300292633_u32 & 1337698286_u32;
(*_43).1 = [(*_43).3,(*_43).3];
(*_43).2 = [(-707178554_i32),(-2011550901_i32),(-1611595272_i32),(-438264529_i32),1862602687_i32,(-1927068048_i32),465111528_i32];
_25 = !(-29110219585751505837177744330823378748_i128);
(*_43).1 = [(*_43).3,(*_43).3];
(*_43).3 = _49 as u32;
_23 = &_7;
_11.1 = !_10.0.2;
(*_43).2 = [62456035_i32,1057149493_i32,(-986852089_i32),376285992_i32,(-1204071149_i32),715461956_i32,(-64694100_i32)];
(*_43).3 = 2035227820_u32;
(*_43).3 = (*_23) as u32;
_30 = !_10.0.2;
(*_43).1 = [(*_43).3,(*_43).3];
_42 = -_49;
(*_43).1 = _11.2;
_27 = (*_43).0 | (*_43).0;
match _11.0.1 {
0 => bb12,
1 => bb17,
2 => bb13,
3 => bb22,
235104358930301721 => bb24,
_ => bb23
}
}
bb22 = {
_16 = _19;
_5 = _4;
_19 = _5;
_16 = _19;
_30 = _6;
_11.1 = !_10.0.2;
_4 = _18;
_3 = _8;
_10.0.2 = _11.1 > _30;
_28 = [230_u8,139_u8,13_u8,201_u8,201_u8,134_u8,210_u8];
_13 = _5;
_13 = _16;
_26 = _18 as u128;
_11.0.0 = core::ptr::addr_of_mut!(_24);
_32.1 = _11.2;
_2 = -_7;
_12 = 7114_u16 + 21732_u16;
_2 = _7 * _7;
_7 = _27 as isize;
_25 = (-2770694359331940893603998847308715977_i128) << RET;
match _27 {
340282366920938463463374607431768211407 => bb7,
_ => bb1
}
}
bb23 = {
_1 = _19;
_11.0.0 = core::ptr::addr_of_mut!(_24);
_32.2 = [1458698520_i32,(-2096455503_i32),(-1978912640_i32),(-1614776642_i32),1330378968_i32,959680357_i32,(-479794224_i32)];
_11.0.1 = !14010363913803627826_u64;
_21 = [_14,_14,_14,_14,_14,_14];
_5 = _19;
_35 = 228_u8 as f32;
_34 = core::ptr::addr_of_mut!(_9);
_26 = !252867051747220009511037369714875436895_u128;
_4 = _19;
_8 = _10.0.0 + _3;
_27 = 96_i8;
_15 = [_25,_25,_25,_25,_25,_25,_25,_25];
_19 = _5;
_34 = core::ptr::addr_of_mut!((*_34));
_11.0.0 = core::ptr::addr_of_mut!(_24);
_32.0 = _27;
_14 = !(-4416625313967956857_i64);
_33 = 207_u8 as usize;
_7 = _2 ^ _2;
_29 = _30 | _11.1;
RET = !_10.0.1;
_33 = _10.0.1 + RET;
_24 = (-20419_i16);
_32.0 = _27;
_25 = 147475702797622416605853145690308044471_i128 << _12;
_7 = !_2;
Call(_5 = fn13(Move((*_34)), Move(_34), Move(_11), _29, _4), ReturnTo(bb10), UnwindUnreachable())
}
bb24 = {
_44.0 = core::ptr::addr_of_mut!(_24);
(*_43).3 = !1643895767_u32;
(*_43).1 = [(*_43).3,_32.3];
(*_43).2 = [(-815192869_i32),1466070516_i32,(-1375370669_i32),1382634222_i32,979855061_i32,804668481_i32,1797251063_i32];
(*_43).0 = !_27;
(*_43).0 = _27 << (*_23);
(*_43).0 = !_27;
match _11.0.1 {
0 => bb7,
1 => bb16,
235104358930301721 => bb26,
_ => bb25
}
}
bb25 = {
_10.0.0 = _25 as f64;
_35 = 48_u8 as f32;
_38 = _2 + _7;
_14 = 7064028911245379126_i64 << _12;
_12 = 55264_u16 - 30406_u16;
_5 = _19;
_36 = !163_u8;
_2 = _14 as isize;
_32.3 = 3181005021_u32;
_11.0.1 = _24 as u64;
_19 = _5;
_4 = _19;
_35 = _24 as f32;
_37 = !_33;
_8 = _3 * _10.0.0;
_12 = 34586_u16 + 20072_u16;
_40 = _13;
_9 = &_14;
_4 = _13;
_16 = _5;
_4 = _13;
_18 = _13;
_29 = !_30;
_35 = _12 as f32;
match _32.3 {
0 => bb7,
1 => bb12,
2 => bb13,
3 => bb14,
4 => bb15,
3181005021 => bb17,
_ => bb16
}
}
bb26 = {
(*_43).3 = 3933802297_u32 >> (*_23);
_59.0.0 = _8 - _10.0.0;
_44.1 = _11.0.1 | _11.0.1;
_59.0.2 = !_30;
(*_43).1 = [(*_43).3,_32.3];
_21 = [(*_9),(*_9),(*_9),(*_9),(*_9),(*_9)];
Goto(bb27)
}
bb27 = {
(*_43).0 = _40 as i8;
_34 = core::ptr::addr_of_mut!((*_48));
(*_43).3 = 1232906401_u32 << (*_23);
(*_43).0 = _27;
(*_43).3 = !1395753415_u32;
_54 = -(*_9);
_1 = _19;
(*_34) = &_54;
(*_43).0 = _27;
_59.0.1 = _41.1 as usize;
_14 = -(*_9);
(*_43).1 = [(*_43).3,(*_43).3];
(*_43).3 = 3133112661_u32 + 2714982273_u32;
(*_34) = &_14;
(*_34) = &_54;
_41.0 = (*_43).0 > (*_43).0;
_5 = _1;
(*_43).0 = !_27;
_23 = &_38;
(*_43).1 = [(*_43).3,(*_43).3];
(*_43).3 = _11.0.1 as u32;
(*_43).2 = [1863099616_i32,(-521325177_i32),250913141_i32,28801685_i32,1235787968_i32,1981477302_i32,(-2073855774_i32)];
Goto(bb28)
}
bb28 = {
_46 = &mut (*_9);
_49 = -_42;
(*_34) = &_14;
(*_43).2 = [637213785_i32,446437725_i32,(-734318899_i32),(-1697780612_i32),(-1692454938_i32),(-2083654626_i32),810060477_i32];
_38 = _12 as isize;
_58 = [_26,_41.1,_41.1,_26,_41.1];
(*_34) = &(*_46);
_44.0 = core::ptr::addr_of_mut!(_24);
(*_34) = &_14;
_59 = (_10.0,);
(*_43).3 = !1910919772_u32;
_28 = [_36,_36,_36,_36,_36,_36,_36];
_71 = _25 as f64;
_16 = _5;
(*_43).0 = _27;
(*_48) = &(*_46);
(*_43).0 = _27 + _27;
_27 = (*_43).0 * (*_43).0;
_10.0.2 = _30 | _30;
(*_43).2 = [1455509914_i32,(-980186344_i32),(-119324359_i32),(-1121200878_i32),(-272875455_i32),1958879803_i32,1324826107_i32];
_69 = &mut _2;
(*_43).3 = 125236969_u32 - 3903268940_u32;
_37 = _59.0.1 << (*_43).0;
Call((*_43).3 = core::intrinsics::bswap(3519909980_u32), ReturnTo(bb29), UnwindUnreachable())
}
bb29 = {
_13 = _16;
_10.0 = (_3, _59.0.1, _29);
(*_48) = &_14;
_32.2 = [813769207_i32,(-679734810_i32),185343698_i32,226932275_i32,(-516817283_i32),(-315883826_i32),1245381095_i32];
_48 = core::ptr::addr_of_mut!((*_48));
(*_43).1 = _11.2;
_27 = !(*_43).0;
(*_43).1 = [(*_43).3,(*_43).3];
_41.0 = _30 | _30;
(*_43).0 = -_27;
_42 = _24 as f32;
(*_43).2 = [(-737978583_i32),389569700_i32,(-1706271934_i32),1171619738_i32,(-1074204834_i32),(-1600236589_i32),(-966531892_i32)];
(*_43).3 = 4291998246_u32 >> (*_9);
_67 = _42 as i64;
_72 = (_32.0,);
_10.0.2 = !_59.0.2;
_61 = _19;
_72.0 = (*_43).0 << (*_43).0;
_43 = core::ptr::addr_of!((*_43));
(*_43).1 = [(*_43).3,_32.3];
(*_43).1 = [(*_43).3,(*_43).3];
(*_43).1 = [(*_43).3,(*_43).3];
_18 = _19;
(*_48) = &(*_46);
_43 = core::ptr::addr_of!((*_43));
Call(_10.0.0 = core::intrinsics::transmute((*_69)), ReturnTo(bb30), UnwindUnreachable())
}
bb30 = {
(*_43).1 = [(*_43).3,(*_43).3];
_21 = [(*_46),(*_46),(*_46),(*_46),(*_46),(*_9)];
(*_43).3 = !2421676806_u32;
_67 = -(*_9);
(*_43).0 = _44.1 as i8;
_29 = _41.2 < _41.2;
_64 = _41.1 as f64;
_11.2 = [(*_43).3,(*_43).3];
(*_43).1 = _11.2;
_12 = !16258_u16;
(*_43).3 = 1767001667_u32;
_64 = _3 * _71;
_32.0 = _72.0;
(*_48) = &_14;
(*_43).2 = [422872936_i32,2007943241_i32,1392305931_i32,(-401389046_i32),1227086151_i32,23602028_i32,(-1578425621_i32)];
Goto(bb31)
}
bb31 = {
(*_48) = &(*_46);
(*_48) = &_14;
(*_43).2 = [1631771258_i32,1825127387_i32,1779706289_i32,(-123382408_i32),1651831458_i32,(-1385378321_i32),(-785429668_i32)];
_66 = _10.0.0 - _10.0.0;
_79 = _66 as u8;
_11.0.0 = core::ptr::addr_of_mut!(_24);
_10 = _59;
(*_43).2 = [(-1043684381_i32),(-1471189026_i32),(-1243276960_i32),(-1855193383_i32),(-1283672841_i32),(-32329079_i32),(-822605231_i32)];
_45 = (*_43).0;
_11.1 = (*_43).0 < (*_43).0;
_62 = ((*_69),);
(*_43).2 = [966912707_i32,1687330077_i32,675866121_i32,(-570892821_i32),1844135038_i32,(-294837238_i32),(-1522390406_i32)];
_75 = -_49;
(*_43).0 = _45 >> (*_46);
_84 = &_37;
(*_43).0 = _45;
_42 = _49;
(*_43).1 = [(*_43).3,(*_43).3];
(*_43).1 = [(*_43).3,(*_43).3];
_19 = _61;
_70 = _61;
(*_43).3 = 715832741_u32 - 2434292854_u32;
(*_43).3 = (*_69) as u32;
match _11.0.1 {
0 => bb25,
1 => bb32,
2 => bb33,
3 => bb34,
4 => bb35,
5 => bb36,
6 => bb37,
235104358930301721 => bb39,
_ => bb38
}
}
bb32 = {
_13 = _18;
_7 = _2;
_12 = 2211_u16;
_2 = _10.0.0 as isize;
_2 = 107_i8 as isize;
_10.0 = (_3, RET, _11.1);
_11.0.1 = !3262112765529255931_u64;
_10.0 = (_3, RET, _6);
_10.0.0 = _8 - _3;
_3 = _10.0.0 + _10.0.0;
_12 = 15206_u16 * 9428_u16;
_13 = _5;
_23 = &_2;
Call(_8 = core::intrinsics::fmaf64(_10.0.0, _10.0.0, _3), ReturnTo(bb3), UnwindUnreachable())
}
bb33 = {
_19 = _13;
_16 = _18;
_15 = [124509786456228574389514306935864738305_i128,(-140759608974034809460656329044675648744_i128),(-123231884219120056327742375024416216928_i128),147815255829218282308715093414275706005_i128,89176140258211369836769197030038654228_i128,107171447526394082995283497782979714796_i128,(-54164743370264161854783115158782672592_i128),(-144918828204902754525649582492956914375_i128)];
_15 = [54981559087749385359656138782344716968_i128,63897514462456042144501808421146507161_i128,168865064494227582583484462924283245788_i128,106937724928682631637142195035672775167_i128,64521210968338383586092193859159506182_i128,(-84154253612252480927526191049000665421_i128),(-28785882070266452266313555845930025383_i128),41586509523057431408581025610541845694_i128];
_10.0 = (_3, RET, _11.1);
_4 = _19;
_14 = (-4764326974069236635_i64) & 5923695836327057278_i64;
_10.0 = (_3, RET, _11.1);
_14 = 3998802542379359032_i64;
_11.0.1 = 9372646139381419773_u64;
_4 = _5;
_21 = [_14,_14,_14,_14,_14,_14];
_26 = 42684601432395247402815637226779259977_u128;
_27 = -96_i8;
_6 = _12 == _12;
_7 = -(*_23);
_1 = _19;
Goto(bb4)
}
bb34 = {
_46 = &mut (*_9);
_49 = -_42;
(*_34) = &_14;
(*_43).2 = [637213785_i32,446437725_i32,(-734318899_i32),(-1697780612_i32),(-1692454938_i32),(-2083654626_i32),810060477_i32];
_38 = _12 as isize;
_58 = [_26,_41.1,_41.1,_26,_41.1];
(*_34) = &(*_46);
_44.0 = core::ptr::addr_of_mut!(_24);
(*_34) = &_14;
_59 = (_10.0,);
(*_43).3 = !1910919772_u32;
_28 = [_36,_36,_36,_36,_36,_36,_36];
_71 = _25 as f64;
_16 = _5;
(*_43).0 = _27;
(*_48) = &(*_46);
(*_43).0 = _27 + _27;
_27 = (*_43).0 * (*_43).0;
_10.0.2 = _30 | _30;
(*_43).2 = [1455509914_i32,(-980186344_i32),(-119324359_i32),(-1121200878_i32),(-272875455_i32),1958879803_i32,1324826107_i32];
_69 = &mut _2;
(*_43).3 = 125236969_u32 - 3903268940_u32;
_37 = _59.0.1 << (*_43).0;
Call((*_43).3 = core::intrinsics::bswap(3519909980_u32), ReturnTo(bb29), UnwindUnreachable())
}
bb35 = {
_13 = _18;
_7 = _2;
_12 = 2211_u16;
_2 = _10.0.0 as isize;
_2 = 107_i8 as isize;
_10.0 = (_3, RET, _11.1);
_11.0.1 = !3262112765529255931_u64;
_10.0 = (_3, RET, _6);
_10.0.0 = _8 - _3;
_3 = _10.0.0 + _10.0.0;
_12 = 15206_u16 * 9428_u16;
_13 = _5;
_23 = &_2;
Call(_8 = core::intrinsics::fmaf64(_10.0.0, _10.0.0, _3), ReturnTo(bb3), UnwindUnreachable())
}
bb36 = {
_1 = _19;
_11.0.0 = core::ptr::addr_of_mut!(_24);
_32.2 = [1458698520_i32,(-2096455503_i32),(-1978912640_i32),(-1614776642_i32),1330378968_i32,959680357_i32,(-479794224_i32)];
_11.0.1 = !14010363913803627826_u64;
_21 = [_14,_14,_14,_14,_14,_14];
_5 = _19;
_35 = 228_u8 as f32;
_34 = core::ptr::addr_of_mut!(_9);
_26 = !252867051747220009511037369714875436895_u128;
_4 = _19;
_8 = _10.0.0 + _3;
_27 = 96_i8;
_15 = [_25,_25,_25,_25,_25,_25,_25,_25];
_19 = _5;
_34 = core::ptr::addr_of_mut!((*_34));
_11.0.0 = core::ptr::addr_of_mut!(_24);
_32.0 = _27;
_14 = !(-4416625313967956857_i64);
_33 = 207_u8 as usize;
_7 = _2 ^ _2;
_29 = _30 | _11.1;
RET = !_10.0.1;
_33 = _10.0.1 + RET;
_24 = (-20419_i16);
_32.0 = _27;
_25 = 147475702797622416605853145690308044471_i128 << _12;
_7 = !_2;
Call(_5 = fn13(Move((*_34)), Move(_34), Move(_11), _29, _4), ReturnTo(bb10), UnwindUnreachable())
}
bb37 = {
_1 = _19;
_11.0.0 = core::ptr::addr_of_mut!(_24);
_32.2 = [1458698520_i32,(-2096455503_i32),(-1978912640_i32),(-1614776642_i32),1330378968_i32,959680357_i32,(-479794224_i32)];
_11.0.1 = !14010363913803627826_u64;
_21 = [_14,_14,_14,_14,_14,_14];
_5 = _19;
_35 = 228_u8 as f32;
_34 = core::ptr::addr_of_mut!(_9);
_26 = !252867051747220009511037369714875436895_u128;
_4 = _19;
_8 = _10.0.0 + _3;
_27 = 96_i8;
_15 = [_25,_25,_25,_25,_25,_25,_25,_25];
_19 = _5;
_34 = core::ptr::addr_of_mut!((*_34));
_11.0.0 = core::ptr::addr_of_mut!(_24);
_32.0 = _27;
_14 = !(-4416625313967956857_i64);
_33 = 207_u8 as usize;
_7 = _2 ^ _2;
_29 = _30 | _11.1;
RET = !_10.0.1;
_33 = _10.0.1 + RET;
_24 = (-20419_i16);
_32.0 = _27;
_25 = 147475702797622416605853145690308044471_i128 << _12;
_7 = !_2;
Call(_5 = fn13(Move((*_34)), Move(_34), Move(_11), _29, _4), ReturnTo(bb10), UnwindUnreachable())
}
bb38 = {
_12 = 37983_u16 + 36458_u16;
_23 = &_7;
_30 = !_6;
_27 = (-49_i8);
_11.0.1 = _1 as u64;
_10.0.1 = RET;
_1 = _16;
_14 = 1388761581402826587_i64 << (*_23);
_18 = _5;
_10.0 = (_3, RET, _6);
_5 = _19;
_10.0 = (_3, RET, _11.1);
_30 = _11.1 & _11.1;
_12 = 44142_u16;
_24 = (-28657_i16) - (-5671_i16);
_11.0.0 = core::ptr::addr_of_mut!(_24);
_16 = _13;
_23 = &_2;
_19 = _1;
_10.0 = (_8, RET, _30);
_23 = &_7;
_23 = &_2;
match _27 {
340282366920938463463374607431768211407 => bb6,
_ => bb5
}
}
bb39 = {
(*_43).1 = [(*_43).3,(*_43).3];
_28 = [_79,_79,_79,_79,_79,_79,_79];
_29 = _10.0.2;
(*_43).1 = [(*_43).3,(*_43).3];
(*_43).2 = [(-1865093433_i32),159806433_i32,347859269_i32,(-1998109865_i32),(-204096297_i32),1830895156_i32,1704876305_i32];
_80 = core::ptr::addr_of!((*_43));
_48 = core::ptr::addr_of_mut!((*_48));
_33 = (*_84) << (*_84);
(*_43).0 = _72.0 - _27;
_93 = _12 >> (*_84);
(*_43).3 = 889569947_u32 >> (*_46);
(*_43).2 = [(-419975935_i32),447376619_i32,(-1181299120_i32),(-1615631775_i32),410043919_i32,1817410996_i32,(-369134275_i32)];
RET = _33 - (*_84);
Goto(bb40)
}
bb40 = {
Call(_96 = dump_var(10_usize, 72_usize, Move(_72), 41_usize, Move(_41), 79_usize, Move(_79), 33_usize, Move(_33)), ReturnTo(bb41), UnwindUnreachable())
}
bb41 = {
Call(_96 = dump_var(10_usize, 7_usize, Move(_7), 58_usize, Move(_58), 19_usize, Move(_19), 27_usize, Move(_27)), ReturnTo(bb42), UnwindUnreachable())
}
bb42 = {
Call(_96 = dump_var(10_usize, 2_usize, Move(_2), 61_usize, Move(_61), 30_usize, Move(_30), 70_usize, Move(_70)), ReturnTo(bb43), UnwindUnreachable())
}
bb43 = {
Call(_96 = dump_var(10_usize, 32_usize, Move(_32), 62_usize, Move(_62), 12_usize, Move(_12), 45_usize, Move(_45)), ReturnTo(bb44), UnwindUnreachable())
}
bb44 = {
Call(_96 = dump_var(10_usize, 47_usize, Move(_47), 5_usize, Move(_5), 37_usize, Move(_37), 97_usize, _97), ReturnTo(bb45), UnwindUnreachable())
}
bb45 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn11(mut _1: char,mut _2: &'static i64,mut _3: f64,mut _4: i64,mut _5: i64,mut _6: char,mut _7: bool,mut _8: char,mut _9: i64,mut _10: i64,mut _11: i64,mut _12: i64) -> u16 {
mir! {
type RET = u16;
let _13: *const [i32; 2];
let _14: bool;
let _15: *mut [u32; 2];
let _16: ((isize,), u32);
let _17: &'static mut (*mut i16, usize, char);
let _18: (Adt55, *const (i8,));
let _19: &'static *const (i8, [u32; 2], [i32; 7], u32);
let _20: *mut (&'static i64, u16, (i8,));
let _21: &'static mut (*mut i16, usize, char);
let _22: &'static bool;
let _23: isize;
let _24: isize;
let _25: [i64; 6];
let _26: *const Adt51;
let _27: f32;
let _28: f32;
let _29: i32;
let _30: u128;
let _31: (&'static mut (*mut i16, usize, char), *mut i16);
let _32: isize;
let _33: (Adt51, &'static i64, *const Adt28);
let _34: u8;
let _35: isize;
let _36: isize;
let _37: (f64, usize, bool);
let _38: &'static mut &'static mut (*mut i16, usize, char);
let _39: [i64; 4];
let _40: i16;
let _41: *const Adt51;
let _42: i16;
let _43: u16;
let _44: isize;
let _45: char;
let _46: *const (i8,);
let _47: (&'static mut (*mut i16, usize, char), *mut i16);
let _48: char;
let _49: [i16; 7];
let _50: f64;
let _51: isize;
let _52: ((isize,), u32);
let _53: bool;
let _54: Adt47;
let _55: &'static (i8,);
let _56: &'static mut isize;
let _57: (*const (i8, [u32; 2], [i32; 7], u32), [u8; 7]);
let _58: (*mut i16, usize, char);
let _59: &'static mut i64;
let _60: (*const (i8, [u32; 2], [i32; 7], u32), [u8; 7]);
let _61: u128;
let _62: (&'static mut (*mut i16, usize, char), *mut i16);
let _63: u16;
let _64: [u128; 5];
let _65: i32;
let _66: u64;
let _67: *const Adt28;
let _68: *const &'static usize;
let _69: char;
let _70: *const &'static usize;
let _71: i16;
let _72: ();
let _73: ();
{
_11 = _5 | _5;
_12 = 1_usize as i64;
RET = 1725206079_u32 as u16;
_5 = _11;
_9 = 195734237775339558918907084336248546012_u128 as i64;
_10 = _5 | _5;
_6 = _8;
_9 = 3_usize as i64;
_5 = _10 * _10;
_5 = (-1294927499_i32) as i64;
_1 = _8;
_2 = &_12;
_12 = _9 | _10;
_2 = &_4;
_4 = _12 << _5;
_8 = _6;
_3 = 299623391275740162486878555278937569138_u128 as f64;
_11 = _4;
_5 = _11 | _10;
_5 = _11 | _9;
_4 = _12 + _11;
_2 = &_5;
_5 = _12 + _11;
_11 = !_5;
Call(_5 = core::intrinsics::transmute(_9), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_2 = &_12;
_5 = _11 << (*_2);
_6 = _8;
_8 = _6;
_10 = !(*_2);
_7 = _5 <= (*_2);
_11 = _4;
RET = (-110_i8) as u16;
_12 = _5 >> _5;
_14 = _7;
_16.0 = (9223372036854775807_isize,);
_5 = _12 | _12;
_2 = &_4;
_14 = (*_2) != _11;
_7 = !_14;
_8 = _6;
_11 = (*_2) >> _10;
_5 = (*_2);
_4 = _12 ^ _12;
_14 = !_7;
_4 = !_12;
_2 = &_9;
_16.0.0 = !(-53_isize);
_4 = _11 | (*_2);
_16.0 = (28_isize,);
match _16.0.0 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
28 => bb8,
_ => bb7
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_14 = _12 >= (*_2);
_16.0 = ((-9223372036854775808_isize),);
_6 = _8;
RET = 27026_u16;
_11 = _12 | _4;
match RET {
0 => bb1,
1 => bb9,
2 => bb10,
3 => bb11,
4 => bb12,
5 => bb13,
6 => bb14,
27026 => bb16,
_ => bb15
}
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
Return()
}
bb12 = {
Return()
}
bb13 = {
Return()
}
bb14 = {
Return()
}
bb15 = {
_2 = &_12;
_5 = _11 << (*_2);
_6 = _8;
_8 = _6;
_10 = !(*_2);
_7 = _5 <= (*_2);
_11 = _4;
RET = (-110_i8) as u16;
_12 = _5 >> _5;
_14 = _7;
_16.0 = (9223372036854775807_isize,);
_5 = _12 | _12;
_2 = &_4;
_14 = (*_2) != _11;
_7 = !_14;
_8 = _6;
_11 = (*_2) >> _10;
_5 = (*_2);
_4 = _12 ^ _12;
_14 = !_7;
_4 = !_12;
_2 = &_9;
_16.0.0 = !(-53_isize);
_4 = _11 | (*_2);
_16.0 = (28_isize,);
match _16.0.0 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
28 => bb8,
_ => bb7
}
}
bb16 = {
_2 = &_4;
match RET {
0 => bb17,
1 => bb18,
2 => bb19,
27026 => bb21,
_ => bb20
}
}
bb17 = {
Return()
}
bb18 = {
_14 = _12 >= (*_2);
_16.0 = ((-9223372036854775808_isize),);
_6 = _8;
RET = 27026_u16;
_11 = _12 | _4;
match RET {
0 => bb1,
1 => bb9,
2 => bb10,
3 => bb11,
4 => bb12,
5 => bb13,
6 => bb14,
27026 => bb16,
_ => bb15
}
}
bb19 = {
Return()
}
bb20 = {
Return()
}
bb21 = {
_14 = _7;
_6 = _1;
_16.0 = (9223372036854775807_isize,);
_12 = (*_2);
_10 = (*_2);
_16.0 = (9223372036854775807_isize,);
_16.0 = ((-9223372036854775808_isize),);
_16.0 = (9223372036854775807_isize,);
_7 = (*_2) <= (*_2);
_16.1 = 2347329024_u32 | 860886821_u32;
_10 = (*_2) + (*_2);
_16.1 = !2968978706_u32;
_12 = _7 as i64;
_4 = _11 | _5;
_7 = _12 == _12;
_16.0.0 = RET as isize;
_12 = _9 - _4;
_16.1 = 2211313570_u32;
_4 = _8 as i64;
_10 = _12;
_9 = _16.0.0 as i64;
_6 = _8;
RET = 20713_u16 + 29765_u16;
_16.0 = (9223372036854775807_isize,);
_4 = 31483_i16 as i64;
_10 = 12117184975872917483_u64 as i64;
_11 = -_12;
_12 = _3 as i64;
_2 = &_11;
Goto(bb22)
}
bb22 = {
_2 = &_5;
RET = !41132_u16;
_7 = _11 < (*_2);
_2 = &_4;
_7 = _14;
RET = !42938_u16;
_1 = _6;
_10 = !_11;
_16.0 = (9223372036854775807_isize,);
_16.0 = (9223372036854775807_isize,);
_12 = !(*_2);
_22 = &_14;
_4 = _11 - _10;
_1 = _8;
Goto(bb23)
}
bb23 = {
_25 = [_10,_11,_10,_11,_4,_4];
_24 = (*_22) as isize;
_1 = _8;
_4 = _11 - _10;
_11 = _4 & _4;
_16.0 = (_24,);
RET = !52407_u16;
_12 = !_11;
_16.0 = (_24,);
_14 = !_7;
_5 = _12;
_5 = (-3119_i16) as i64;
_16.0 = (_24,);
_28 = (-1207856523_i32) as f32;
_16.0.0 = _24;
_9 = 0_usize as i64;
_27 = 97_u8 as f32;
match _16.1 {
0 => bb13,
1 => bb16,
2 => bb24,
3 => bb25,
4 => bb26,
5 => bb27,
6 => bb28,
2211313570 => bb30,
_ => bb29
}
}
bb24 = {
_2 = &_5;
RET = !41132_u16;
_7 = _11 < (*_2);
_2 = &_4;
_7 = _14;
RET = !42938_u16;
_1 = _6;
_10 = !_11;
_16.0 = (9223372036854775807_isize,);
_16.0 = (9223372036854775807_isize,);
_12 = !(*_2);
_22 = &_14;
_4 = _11 - _10;
_1 = _8;
Goto(bb23)
}
bb25 = {
_14 = _7;
_6 = _1;
_16.0 = (9223372036854775807_isize,);
_12 = (*_2);
_10 = (*_2);
_16.0 = (9223372036854775807_isize,);
_16.0 = ((-9223372036854775808_isize),);
_16.0 = (9223372036854775807_isize,);
_7 = (*_2) <= (*_2);
_16.1 = 2347329024_u32 | 860886821_u32;
_10 = (*_2) + (*_2);
_16.1 = !2968978706_u32;
_12 = _7 as i64;
_4 = _11 | _5;
_7 = _12 == _12;
_16.0.0 = RET as isize;
_12 = _9 - _4;
_16.1 = 2211313570_u32;
_4 = _8 as i64;
_10 = _12;
_9 = _16.0.0 as i64;
_6 = _8;
RET = 20713_u16 + 29765_u16;
_16.0 = (9223372036854775807_isize,);
_4 = 31483_i16 as i64;
_10 = 12117184975872917483_u64 as i64;
_11 = -_12;
_12 = _3 as i64;
_2 = &_11;
Goto(bb22)
}
bb26 = {
Return()
}
bb27 = {
Return()
}
bb28 = {
_14 = _12 >= (*_2);
_16.0 = ((-9223372036854775808_isize),);
_6 = _8;
RET = 27026_u16;
_11 = _12 | _4;
match RET {
0 => bb1,
1 => bb9,
2 => bb10,
3 => bb11,
4 => bb12,
5 => bb13,
6 => bb14,
27026 => bb16,
_ => bb15
}
}
bb29 = {
Return()
}
bb30 = {
_22 = &_7;
_16.0.0 = _24;
_14 = (*_22);
_29 = _27 as i32;
_11 = 1917622537997794337_u64 as i64;
_16.0.0 = _24 << _12;
_9 = -_4;
RET = !3327_u16;
_11 = !_4;
_6 = _8;
_30 = 291275581502465185037250039497865938367_u128;
_11 = _12 << _9;
_3 = _29 as f64;
_6 = _8;
_27 = _28;
_16.0 = (_24,);
_29 = !(-1972101987_i32);
_10 = !_9;
_7 = _4 == _9;
RET = !45952_u16;
_1 = _8;
_14 = !_7;
match _30 {
0 => bb5,
1 => bb9,
291275581502465185037250039497865938367 => bb31,
_ => bb11
}
}
bb31 = {
_9 = _4;
_5 = _4 ^ _9;
_12 = _11;
_32 = _24 - _16.0.0;
_22 = &_14;
_3 = _5 as f64;
_12 = !_5;
_23 = 100717951331545952824325275147653226721_i128 as isize;
_34 = 26122279244338709865472153232350752880_i128 as u8;
_32 = (-4690_i16) as isize;
_27 = _28 + _28;
_33.0.fld1 = [_30,_30,_30,_30,_30];
_26 = core::ptr::addr_of!(_33.0);
(*_26).fld0 = (_3, 0_usize, (*_22));
Goto(bb32)
}
bb32 = {
(*_26).fld0 = (_3, 3_usize, (*_22));
(*_26).fld0.0 = _33.0.fld0.1 as f64;
_5 = _11;
_33.0.fld0.2 = (*_22);
(*_26).fld0.2 = (*_22) > _7;
match (*_26).fld0.1 {
0 => bb9,
3 => bb33,
_ => bb14
}
}
bb33 = {
(*_26).fld4 = [_29,_29];
_3 = (*_26).fld0.0 * (*_26).fld0.0;
(*_26).fld0.0 = _16.0.0 as f64;
_37.1 = (*_26).fld0.1 & (*_26).fld0.1;
(*_26).fld1 = [_30,_30,_30,_30,_30];
_32 = (*_26).fld0.1 as isize;
(*_26).fld0 = (_3, _37.1, (*_22));
(*_26).fld0.0 = -_3;
(*_26).fld0 = (_3, _37.1, (*_22));
(*_26).fld0 = (_3, _37.1, (*_22));
_37.2 = (*_22);
(*_26).fld0.1 = _6 as usize;
_14 = (*_26).fld0.0 >= (*_26).fld0.0;
_37.1 = RET as usize;
_6 = _8;
_33.0.fld0.1 = _37.1 & _37.1;
(*_26).fld6 = core::ptr::addr_of_mut!(_40);
_24 = _32 & _32;
(*_26).fld3 = _16.1 >> _4;
(*_26).fld4 = [_29,_29];
Goto(bb34)
}
bb34 = {
(*_26).fld0.1 = !_37.1;
(*_26).fld0.1 = _37.1 | _37.1;
(*_26).fld4 = [_29,_29];
(*_26).fld2 = Adt28::Variant0 { fld0: (*_26).fld0.2,fld1: _6,fld2: (*_26).fld0,fld3: _29,fld4: (*_26).fld0.0 };
place!(Field::<f64>(Variant((*_26).fld2, 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2).0 * (*_26).fld0.0;
Call(place!(Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2)) = fn12(Field::<bool>(Variant(_33.0.fld2, 0), 0), Move((*_26).fld6), _7, Field::<i32>(Variant((*_26).fld2, 0), 3), (*_26).fld0.0, Field::<bool>(Variant((*_26).fld2, 0), 0), _33.0.fld0.2), ReturnTo(bb35), UnwindUnreachable())
}
bb35 = {
place!(Field::<char>(Variant((*_26).fld2, 0), 1)) = _6;
place!(Field::<(f64, usize, bool)>(Variant(_33.0.fld2, 0), 2)).0 = Field::<f64>(Variant((*_26).fld2, 0), 4);
(*_26).fld3 = _16.1 | _16.1;
place!(Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2)).0 = Field::<f64>(Variant((*_26).fld2, 0), 4) - Field::<f64>(Variant((*_26).fld2, 0), 4);
place!(Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2)).1 = (*_26).fld0.1 - (*_26).fld0.1;
place!(Field::<f64>(Variant((*_26).fld2, 0), 4)) = (*_26).fld0.0 - (*_26).fld0.0;
place!(Field::<char>(Variant((*_26).fld2, 0), 1)) = _8;
place!(Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2)).0 = -(*_26).fld0.0;
place!(Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2)) = (Field::<f64>(Variant((*_26).fld2, 0), 4), (*_26).fld0.1, (*_26).fld0.2);
place!(Field::<bool>(Variant((*_26).fld2, 0), 0)) = (*_26).fld0.2 == Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2).2;
_39 = [_5,_5,_12,_9];
_41 = core::ptr::addr_of!((*_26));
place!(Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2)) = ((*_26).fld0.0, (*_41).fld0.1, Field::<bool>(Variant((*_26).fld2, 0), 0));
(*_26).fld0 = Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2);
(*_41).fld6 = core::ptr::addr_of_mut!(_42);
(*_26).fld4 = [Field::<i32>(Variant(_33.0.fld2, 0), 3),Field::<i32>(Variant((*_41).fld2, 0), 3)];
Goto(bb36)
}
bb36 = {
_33.0.fld0.1 = Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2).1 * Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2).1;
(*_26).fld3 = _16.1 / _16.1;
place!(Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2)).2 = Field::<f64>(Variant((*_41).fld2, 0), 4) != Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2).0;
place!(Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2)).0 = Field::<f64>(Variant((*_41).fld2, 0), 4) - Field::<f64>(Variant((*_41).fld2, 0), 4);
(*_26).fld1 = [_30,_30,_30,_30,_30];
(*_26).fld4 = [Field::<i32>(Variant((*_26).fld2, 0), 3),Field::<i32>(Variant((*_26).fld2, 0), 3)];
place!(Field::<char>(Variant((*_41).fld2, 0), 1)) = _6;
_52.1 = (*_26).fld3 / _16.1;
(*_26).fld4 = [Field::<i32>(Variant((*_26).fld2, 0), 3),Field::<i32>(Variant((*_41).fld2, 0), 3)];
place!(Field::<i32>(Variant((*_26).fld2, 0), 3)) = _34 as i32;
place!(Field::<char>(Variant((*_41).fld2, 0), 1)) = _8;
_33.0.fld2 = Adt28::Variant0 { fld0: (*_26).fld0.2,fld1: _8,fld2: _33.0.fld0,fld3: _29,fld4: (*_26).fld0.0 };
place!(Field::<bool>(Variant((*_26).fld2, 0), 0)) = (*_26).fld0.2 | Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2).2;
place!(Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2)) = (Field::<f64>(Variant((*_41).fld2, 0), 4), (*_26).fld0.1, (*_26).fld0.2);
_33.0.fld0.1 = Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2).1;
match _16.1 {
0 => bb37,
1 => bb38,
2 => bb39,
3 => bb40,
4 => bb41,
5 => bb42,
6 => bb43,
2211313570 => bb45,
_ => bb44
}
}
bb37 = {
Return()
}
bb38 = {
Return()
}
bb39 = {
_2 = &_5;
RET = !41132_u16;
_7 = _11 < (*_2);
_2 = &_4;
_7 = _14;
RET = !42938_u16;
_1 = _6;
_10 = !_11;
_16.0 = (9223372036854775807_isize,);
_16.0 = (9223372036854775807_isize,);
_12 = !(*_2);
_22 = &_14;
_4 = _11 - _10;
_1 = _8;
Goto(bb23)
}
bb40 = {
Return()
}
bb41 = {
Return()
}
bb42 = {
_2 = &_5;
RET = !41132_u16;
_7 = _11 < (*_2);
_2 = &_4;
_7 = _14;
RET = !42938_u16;
_1 = _6;
_10 = !_11;
_16.0 = (9223372036854775807_isize,);
_16.0 = (9223372036854775807_isize,);
_12 = !(*_2);
_22 = &_14;
_4 = _11 - _10;
_1 = _8;
Goto(bb23)
}
bb43 = {
Return()
}
bb44 = {
Return()
}
bb45 = {
(*_26).fld0.1 = Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2).1 * Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2).1;
_52.0 = (_24,);
(*_26).fld2 = Adt28::Variant0 { fld0: (*_26).fld0.2,fld1: _8,fld2: (*_26).fld0,fld3: _29,fld4: (*_26).fld0.0 };
(*_41).fld6 = core::ptr::addr_of_mut!(_42);
place!(Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2)).0 = Field::<f64>(Variant((*_26).fld2, 0), 4) - (*_26).fld0.0;
place!(Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2)).2 = Field::<bool>(Variant((*_26).fld2, 0), 0);
(*_26).fld0.2 = !Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2).2;
_50 = Field::<(f64, usize, bool)>(Variant(_33.0.fld2, 0), 2).0 - (*_26).fld0.0;
(*_26).fld4 = [Field::<i32>(Variant((*_26).fld2, 0), 3),Field::<i32>(Variant((*_26).fld2, 0), 3)];
place!(Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2)).1 = (*_26).fld0.1 ^ (*_26).fld0.1;
(*_26).fld4 = [Field::<i32>(Variant((*_26).fld2, 0), 3),Field::<i32>(Variant((*_26).fld2, 0), 3)];
place!(Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2)) = ((*_26).fld0.0, (*_26).fld0.1, (*_26).fld0.2);
place!(Field::<bool>(Variant((*_26).fld2, 0), 0)) = !(*_26).fld0.2;
place!(Field::<i32>(Variant((*_26).fld2, 0), 3)) = Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2).1 as i32;
(*_26).fld4 = [Field::<i32>(Variant(_33.0.fld2, 0), 3),Field::<i32>(Variant((*_26).fld2, 0), 3)];
place!(Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2)) = (Field::<f64>(Variant((*_26).fld2, 0), 4), (*_26).fld0.1, Field::<bool>(Variant((*_26).fld2, 0), 0));
(*_26).fld0.1 = Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2).1 * Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2).1;
(*_26).fld6 = core::ptr::addr_of_mut!(_40);
_58.1 = Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2).1;
(*_26).fld0 = Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2);
_61 = !_30;
place!(Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2)).2 = Field::<bool>(Variant((*_26).fld2, 0), 0);
place!(Field::<f64>(Variant((*_26).fld2, 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2).0;
_51 = _32 * _24;
(*_26).fld2 = Adt28::Variant0 { fld0: (*_26).fld0.2,fld1: _8,fld2: (*_26).fld0,fld3: _29,fld4: _3 };
(*_26).fld0 = (Field::<f64>(Variant((*_26).fld2, 0), 4), Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2).1, Field::<bool>(Variant((*_26).fld2, 0), 0));
Goto(bb46)
}
bb46 = {
place!(Field::<bool>(Variant(_33.0.fld2, 0), 0)) = !Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2).2;
(*_26).fld6 = core::ptr::addr_of_mut!(_42);
place!(Field::<char>(Variant((*_26).fld2, 0), 1)) = _8;
place!(Field::<i32>(Variant((*_26).fld2, 0), 3)) = _29;
(*_26).fld4 = [Field::<i32>(Variant((*_26).fld2, 0), 3),Field::<i32>(Variant((*_26).fld2, 0), 3)];
(*_26).fld0.2 = !Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2).2;
place!(Field::<f64>(Variant((*_26).fld2, 0), 4)) = (*_26).fld0.0 - Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2).0;
Goto(bb47)
}
bb47 = {
place!(Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2)) = (*_26).fld0;
(*_26).fld0.0 = Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2).0;
_23 = _24;
_58.0 = core::ptr::addr_of_mut!(_40);
(*_26).fld3 = !_52.1;
_64 = [_61,_30,_30,_30,_30];
place!(Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2)).1 = (*_26).fld0.1 * _58.1;
place!(Field::<i32>(Variant((*_26).fld2, 0), 3)) = _29;
_7 = Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2).2 >= _14;
place!(Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2)).0 = Field::<f64>(Variant((*_26).fld2, 0), 4) - (*_26).fld0.0;
_10 = -_12;
(*_26).fld1 = _64;
(*_26).fld0.2 = Field::<bool>(Variant((*_26).fld2, 0), 0);
_33.0.fld0.2 = Field::<f64>(Variant((*_26).fld2, 0), 4) != Field::<f64>(Variant((*_26).fld2, 0), 4);
place!(Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2)).2 = _7;
place!(Field::<f64>(Variant((*_26).fld2, 0), 4)) = -Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2).0;
_64 = (*_26).fld1;
(*_26).fld0.1 = Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2).2 as usize;
place!(Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2)) = (Field::<f64>(Variant((*_26).fld2, 0), 4), (*_26).fld0.1, (*_26).fld0.2);
(*_26).fld0.0 = Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2).0 + Field::<f64>(Variant((*_26).fld2, 0), 4);
place!(Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2)).1 = Field::<char>(Variant((*_26).fld2, 0), 1) as usize;
(*_26).fld0 = (_3, Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2).1, Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2).2);
match _30 {
0 => bb48,
1 => bb49,
2 => bb50,
3 => bb51,
4 => bb52,
5 => bb53,
291275581502465185037250039497865938367 => bb55,
_ => bb54
}
}
bb48 = {
Return()
}
bb49 = {
_2 = &_12;
_5 = _11 << (*_2);
_6 = _8;
_8 = _6;
_10 = !(*_2);
_7 = _5 <= (*_2);
_11 = _4;
RET = (-110_i8) as u16;
_12 = _5 >> _5;
_14 = _7;
_16.0 = (9223372036854775807_isize,);
_5 = _12 | _12;
_2 = &_4;
_14 = (*_2) != _11;
_7 = !_14;
_8 = _6;
_11 = (*_2) >> _10;
_5 = (*_2);
_4 = _12 ^ _12;
_14 = !_7;
_4 = !_12;
_2 = &_9;
_16.0.0 = !(-53_isize);
_4 = _11 | (*_2);
_16.0 = (28_isize,);
match _16.0.0 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
28 => bb8,
_ => bb7
}
}
bb50 = {
_2 = &_4;
match RET {
0 => bb17,
1 => bb18,
2 => bb19,
27026 => bb21,
_ => bb20
}
}
bb51 = {
Return()
}
bb52 = {
Return()
}
bb53 = {
Return()
}
bb54 = {
_2 = &_12;
_5 = _11 << (*_2);
_6 = _8;
_8 = _6;
_10 = !(*_2);
_7 = _5 <= (*_2);
_11 = _4;
RET = (-110_i8) as u16;
_12 = _5 >> _5;
_14 = _7;
_16.0 = (9223372036854775807_isize,);
_5 = _12 | _12;
_2 = &_4;
_14 = (*_2) != _11;
_7 = !_14;
_8 = _6;
_11 = (*_2) >> _10;
_5 = (*_2);
_4 = _12 ^ _12;
_14 = !_7;
_4 = !_12;
_2 = &_9;
_16.0.0 = !(-53_isize);
_4 = _11 | (*_2);
_16.0 = (28_isize,);
match _16.0.0 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
28 => bb8,
_ => bb7
}
}
bb55 = {
(*_26).fld1 = [_30,_61,_61,_61,_30];
(*_26).fld6 = core::ptr::addr_of_mut!(_42);
(*_26).fld1 = [_30,_61,_30,_30,_61];
place!(Field::<char>(Variant((*_26).fld2, 0), 1)) = _8;
(*_26).fld0 = (Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2).0, Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2).1, Field::<bool>(Variant((*_26).fld2, 0), 0));
place!(Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2)).2 = _33.0.fld0.0 != Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2).0;
(*_26).fld4 = [Field::<i32>(Variant((*_26).fld2, 0), 3),Field::<i32>(Variant((*_26).fld2, 0), 3)];
(*_26).fld0.2 = _7 | Field::<bool>(Variant((*_26).fld2, 0), 0);
(*_26).fld0.1 = !Field::<(f64, usize, bool)>(Variant((*_26).fld2, 0), 2).1;
Goto(bb56)
}
bb56 = {
Call(_72 = dump_var(11_usize, 29_usize, Move(_29), 11_usize, Move(_11), 39_usize, Move(_39), 30_usize, Move(_30)), ReturnTo(bb57), UnwindUnreachable())
}
bb57 = {
Call(_72 = dump_var(11_usize, 24_usize, Move(_24), 52_usize, Move(_52), 6_usize, Move(_6), 4_usize, Move(_4)), ReturnTo(bb58), UnwindUnreachable())
}
bb58 = {
Call(_72 = dump_var(11_usize, 12_usize, Move(_12), 61_usize, Move(_61), 34_usize, Move(_34), 51_usize, Move(_51)), ReturnTo(bb59), UnwindUnreachable())
}
bb59 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn12(mut _1: bool,mut _2: *mut i16,mut _3: bool,mut _4: i32,mut _5: f64,mut _6: bool,mut _7: bool) -> (f64, usize, bool) {
mir! {
type RET = (f64, usize, bool);
let _8: f32;
let _9: *const *const (i8, [u32; 2], [i32; 7], u32);
let _10: Adt51;
let _11: i32;
let _12: isize;
let _13: ();
let _14: ();
{
RET.2 = _7 < _6;
_7 = _1 & _3;
RET = (_5, 1358959576583437458_usize, _3);
_4 = 610199251_i32 >> RET.1;
RET = (_5, 9536212085814010947_usize, _7);
RET.0 = _5 + _5;
_6 = !RET.2;
_5 = RET.0 + RET.0;
_4 = 1324733396_i32 & (-947562081_i32);
_1 = _7 != RET.2;
_8 = _4 as f32;
_3 = RET.1 >= RET.1;
_6 = !_7;
RET.0 = _5;
_1 = !RET.2;
_3 = _7 >= _7;
RET = (_5, 48266091128269987_usize, _3);
RET = (_5, 712547981624932449_usize, _3);
_4 = (-1560570618_i32);
RET.0 = _8 as f64;
_4 = (-1644489_i32) ^ 487893901_i32;
_7 = _1;
RET = (_5, 7_usize, _7);
_10.fld4 = [_4,_4];
RET.0 = _5 - _5;
_10.fld1 = [314205041481345676346435938246889050323_u128,38047198112400072510084609819172576739_u128,232954955924122820420065811017922500821_u128,9045037091700109187646666443190890799_u128,296472126875953758686858452356974899403_u128];
_4 = -(-1027154456_i32);
Goto(bb1)
}
bb1 = {
Call(_13 = dump_var(12_usize, 7_usize, Move(_7), 4_usize, Move(_4), 14_usize, _14, 14_usize, _14), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn13(mut _1: &'static i64,mut _2: *mut &'static i64,mut _3: ((*mut i16, u64), bool, [u32; 2]),mut _4: bool,mut _5: char) -> char {
mir! {
type RET = char;
let _6: i8;
let _7: isize;
let _8: isize;
let _9: [i128; 3];
let _10: *const Adt28;
let _11: *const (i8, [u32; 2], [i32; 7], u32);
let _12: f64;
let _13: &'static bool;
let _14: char;
let _15: u16;
let _16: Adt84;
let _17: i16;
let _18: [i128; 8];
let _19: Adt51;
let _20: f64;
let _21: *mut [u32; 2];
let _22: &'static mut &'static mut isize;
let _23: i8;
let _24: *const *const (i8, [u32; 2], [i32; 7], u32);
let _25: i64;
let _26: f32;
let _27: i32;
let _28: [i32; 7];
let _29: u64;
let _30: *const &'static usize;
let _31: [i128; 3];
let _32: bool;
let _33: isize;
let _34: [i64; 4];
let _35: &'static [u8; 1];
let _36: f64;
let _37: *const (i8, [u32; 2], [i32; 7], u32);
let _38: u32;
let _39: f64;
let _40: i32;
let _41: f32;
let _42: char;
let _43: isize;
let _44: isize;
let _45: u64;
let _46: f64;
let _47: char;
let _48: f64;
let _49: f32;
let _50: i32;
let _51: (&'static mut (*mut i16, usize, char), *mut i16);
let _52: bool;
let _53: &'static (i8,);
let _54: Adt64;
let _55: (usize, &'static bool);
let _56: *mut *const i128;
let _57: isize;
let _58: u64;
let _59: char;
let _60: isize;
let _61: char;
let _62: ((f64, usize, bool),);
let _63: &'static mut &'static mut isize;
let _64: isize;
let _65: isize;
let _66: &'static mut isize;
let _67: [i128; 8];
let _68: *const &'static usize;
let _69: *mut (&'static i64, u16, (i8,));
let _70: [i64; 6];
let _71: &'static mut i16;
let _72: *mut (&'static i64, u16, (i8,));
let _73: &'static mut isize;
let _74: &'static (i8,);
let _75: [i32; 7];
let _76: ();
let _77: ();
{
RET = _5;
_6 = 82_i8 << _3.0.1;
_3.1 = _4 | _4;
_6 = (-131837878116377417083049673903793879739_i128) as i8;
_3.2 = [1600880356_u32,4191443057_u32];
_3.2 = [2178964192_u32,2850329081_u32];
RET = _5;
_3.1 = _4 > _4;
_5 = RET;
_3.0.1 = 145181839501178571003828126680202014532_i128 as u64;
_7 = (-9223372036854775808_isize);
_3.0.1 = _4 as u64;
RET = _5;
_3.2 = [2332895376_u32,2198794322_u32];
_6 = (-15_i8) ^ (-113_i8);
_8 = _7 | _7;
_7 = _8 ^ _8;
_7 = _8 - _8;
_7 = _8 << _3.0.1;
_5 = RET;
Call(_3 = fn14(Move(_2), _5, _4, RET, _6, _7, _5, _6, _6), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_3.2 = [3374757941_u32,826752956_u32];
_4 = _7 != _7;
_9 = [4272716965858926032207578141005610163_i128,(-133962132597262915563699385107372521101_i128),60717200113669812308430884528588566987_i128];
_7 = !_8;
_6 = !22_i8;
_3.1 = _4;
_4 = _5 <= _5;
_6 = (-124_i8);
_9 = [80597977903434731720439798329567053537_i128,63824572550202370660925787811761253534_i128,104920339283689469389945352338559446857_i128];
_7 = _8;
_3.0.1 = !10442196048543050593_u64;
_12 = _3.0.1 as f64;
_3.1 = _4;
_6 = (-91_i8) << _8;
_13 = &_4;
_9 = [3473506598629854501336300276924444377_i128,116034918686022831803530537552919398991_i128,(-29283524584901575650328053899529966103_i128)];
_5 = RET;
Goto(bb2)
}
bb2 = {
_7 = !_8;
_6 = 59_i8;
_3.1 = !(*_13);
_13 = &_3.1;
_4 = (*_13);
_14 = _5;
_16.fld0.0 = _8 - _8;
_15 = 32516_u16 >> _7;
_7 = !_16.fld0.0;
_12 = (-115215982081586886_i64) as f64;
_5 = RET;
_17 = 30181_i16 | (-1805_i16);
_4 = !(*_13);
_14 = RET;
_3.0.0 = core::ptr::addr_of_mut!(_17);
_16.fld2 = !_8;
_8 = _16.fld2 ^ _7;
_4 = (*_13) <= (*_13);
_3.0.1 = _15 as u64;
_16.fld0 = (_16.fld2,);
_14 = RET;
Call(_16.fld0.0 = fn15(_16.fld2, Move(_3.0.0), Move(_13), (*_13), (*_13), _7, (*_13)), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_9 = [152334869010460222034668135036571242204_i128,8254346844021682958344023537833430019_i128,72685936965926315651697362298922172763_i128];
_13 = &_3.1;
_12 = _3.0.1 as f64;
_16.fld0.0 = _12 as isize;
_16.fld0.0 = _7 >> _17;
_15 = 5842_u16 << _8;
_6 = (-36_i8) | (-114_i8);
_3.0.0 = core::ptr::addr_of_mut!(_17);
_12 = 324727058_i32 as f64;
_13 = &_4;
_14 = RET;
_12 = (-43049479621256743188342020642183936260_i128) as f64;
_12 = _6 as f64;
_12 = (-2476381024074767403_i64) as f64;
_19.fld0.0 = _12 - _12;
_19.fld0.1 = 4_usize ^ 1_usize;
_19.fld4 = [(-1819342284_i32),(-1349560970_i32)];
_19.fld6 = core::ptr::addr_of_mut!(_17);
Goto(bb4)
}
bb4 = {
_19.fld3 = 3782262941_u32 >> _8;
_19.fld1 = [52151896951931850542440970442749709777_u128,4698907676734163987620444944154528187_u128,85896918617362035431988169913424858671_u128,13990039560619728360985299185010850869_u128,306184774828142505032152020901120494391_u128];
_9 = [(-31235362642362403124598997735658370381_i128),98929220260180408051743192425163514007_i128,95211637715816354646177450479533861318_i128];
_19.fld1 = [243004509548262530633288710222751566246_u128,198228792568304195996452618161705668666_u128,265632764344998454887082651005232175720_u128,102410863752411119509510220291301821032_u128,91532739318160492519736730097808396525_u128];
_9 = [(-122601653899285732485032944168616994963_i128),(-105459961863257638675824197803726358118_i128),(-103545501136728257108203072094095556770_i128)];
_4 = !_3.1;
_13 = &_3.1;
_3.0 = (Move(_19.fld6), 8949544061302861187_u64);
_7 = _8 + _16.fld0.0;
_3.1 = _4;
_4 = !_3.1;
_4 = _3.1 | _3.1;
_8 = _7 - _16.fld0.0;
_19.fld0 = (_12, 17367909119288900927_usize, _3.1);
_18 = [(-57703462972616416098052885260011934713_i128),(-117365676636419449452658205195181301987_i128),(-166141097811529721765745093538894607760_i128),154583147086299393930332777844411935839_i128,(-57523881123081526650592188259659147204_i128),157885700966363581204042787306583678159_i128,145150698578391782205520710577788503068_i128,133175825212533540437327828593729829763_i128];
_10 = core::ptr::addr_of!(_19.fld2);
_16.fld1 = core::ptr::addr_of!(_19.fld4);
_21 = core::ptr::addr_of_mut!(_3.2);
_5 = _14;
_15 = 28996_u16 - 11816_u16;
(*_21) = [_19.fld3,_19.fld3];
_14 = RET;
_4 = _3.1 ^ _3.1;
match _19.fld0.1 {
0 => bb1,
1 => bb3,
2 => bb5,
3 => bb6,
4 => bb7,
5 => bb8,
17367909119288900927 => bb10,
_ => bb9
}
}
bb5 = {
_9 = [152334869010460222034668135036571242204_i128,8254346844021682958344023537833430019_i128,72685936965926315651697362298922172763_i128];
_13 = &_3.1;
_12 = _3.0.1 as f64;
_16.fld0.0 = _12 as isize;
_16.fld0.0 = _7 >> _17;
_15 = 5842_u16 << _8;
_6 = (-36_i8) | (-114_i8);
_3.0.0 = core::ptr::addr_of_mut!(_17);
_12 = 324727058_i32 as f64;
_13 = &_4;
_14 = RET;
_12 = (-43049479621256743188342020642183936260_i128) as f64;
_12 = _6 as f64;
_12 = (-2476381024074767403_i64) as f64;
_19.fld0.0 = _12 - _12;
_19.fld0.1 = 4_usize ^ 1_usize;
_19.fld4 = [(-1819342284_i32),(-1349560970_i32)];
_19.fld6 = core::ptr::addr_of_mut!(_17);
Goto(bb4)
}
bb6 = {
_7 = !_8;
_6 = 59_i8;
_3.1 = !(*_13);
_13 = &_3.1;
_4 = (*_13);
_14 = _5;
_16.fld0.0 = _8 - _8;
_15 = 32516_u16 >> _7;
_7 = !_16.fld0.0;
_12 = (-115215982081586886_i64) as f64;
_5 = RET;
_17 = 30181_i16 | (-1805_i16);
_4 = !(*_13);
_14 = RET;
_3.0.0 = core::ptr::addr_of_mut!(_17);
_16.fld2 = !_8;
_8 = _16.fld2 ^ _7;
_4 = (*_13) <= (*_13);
_3.0.1 = _15 as u64;
_16.fld0 = (_16.fld2,);
_14 = RET;
Call(_16.fld0.0 = fn15(_16.fld2, Move(_3.0.0), Move(_13), (*_13), (*_13), _7, (*_13)), ReturnTo(bb3), UnwindUnreachable())
}
bb7 = {
_3.2 = [3374757941_u32,826752956_u32];
_4 = _7 != _7;
_9 = [4272716965858926032207578141005610163_i128,(-133962132597262915563699385107372521101_i128),60717200113669812308430884528588566987_i128];
_7 = !_8;
_6 = !22_i8;
_3.1 = _4;
_4 = _5 <= _5;
_6 = (-124_i8);
_9 = [80597977903434731720439798329567053537_i128,63824572550202370660925787811761253534_i128,104920339283689469389945352338559446857_i128];
_7 = _8;
_3.0.1 = !10442196048543050593_u64;
_12 = _3.0.1 as f64;
_3.1 = _4;
_6 = (-91_i8) << _8;
_13 = &_4;
_9 = [3473506598629854501336300276924444377_i128,116034918686022831803530537552919398991_i128,(-29283524584901575650328053899529966103_i128)];
_5 = RET;
Goto(bb2)
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_16.fld0 = (_8,);
_13 = &_4;
(*_21) = [_19.fld3,_19.fld3];
_12 = _19.fld0.0 + _19.fld0.0;
_8 = _16.fld0.0 & _16.fld0.0;
_19.fld6 = core::ptr::addr_of_mut!(_17);
_25 = !2502186000015940997_i64;
(*_21) = [_19.fld3,_19.fld3];
_19.fld0.2 = (*_13) != (*_13);
(*_21) = [_19.fld3,_19.fld3];
_16.fld3 = core::ptr::addr_of_mut!(_28);
(*_10) = Adt28::Variant0 { fld0: (*_13),fld1: _5,fld2: _19.fld0,fld3: (-836941484_i32),fld4: _19.fld0.0 };
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).1 = Field::<f64>(Variant((*_10), 0), 4) as usize;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)) = (Field::<f64>(Variant((*_10), 0), 4), _19.fld0.1, (*_13));
Goto(bb11)
}
bb11 = {
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).2 = (*_13);
place!(Field::<i32>(Variant((*_10), 0), 3)) = !1659673444_i32;
_20 = Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).0;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).2 = Field::<bool>(Variant((*_10), 0), 0) >= Field::<bool>(Variant((*_10), 0), 0);
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).1 = !_19.fld0.1;
_32 = Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).2;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).0 = -Field::<f64>(Variant((*_10), 0), 4);
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).1 = _19.fld0.1 | _19.fld0.1;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).1 = !_19.fld0.1;
Goto(bb12)
}
bb12 = {
(*_10) = Adt28::Variant0 { fld0: (*_13),fld1: RET,fld2: _19.fld0,fld3: (-1888368184_i32),fld4: _12 };
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).1 = _19.fld0.1;
place!(Field::<f64>(Variant((*_10), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).0;
(*_21) = [_19.fld3,_19.fld3];
(*_21) = [_19.fld3,_19.fld3];
(*_10) = Adt28::Variant0 { fld0: (*_13),fld1: RET,fld2: _19.fld0,fld3: 9194505_i32,fld4: _12 };
place!(Field::<i32>(Variant((*_10), 0), 3)) = (-1658178358_i32) & 513388654_i32;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).2 = Field::<bool>(Variant((*_10), 0), 0) < Field::<bool>(Variant((*_10), 0), 0);
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).1 = _19.fld0.1 * _19.fld0.1;
place!(Field::<f64>(Variant((*_10), 0), 4)) = _20;
Goto(bb13)
}
bb13 = {
_19.fld3 = !349753366_u32;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).0 = 230_u8 as f64;
place!(Field::<bool>(Variant((*_10), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).2 > Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).2;
place!(Field::<i32>(Variant(_19.fld2, 0), 3)) = -(-1134436275_i32);
_36 = _19.fld3 as f64;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).1 = _19.fld0.1 * _19.fld0.1;
(*_21) = [_19.fld3,_19.fld3];
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).2 = Field::<bool>(Variant((*_10), 0), 0) | Field::<bool>(Variant((*_10), 0), 0);
_9 = [78829929623434679877117965794850133015_i128,76182722158959862137896848264836953965_i128,(-111754655759191217347554914994379323728_i128)];
place!(Field::<bool>(Variant((*_10), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).2 >= Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).2;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).1 = _19.fld0.1;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).0 = _3.0.1 as f64;
place!(Field::<bool>(Variant((*_10), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).2;
place!(Field::<f64>(Variant((*_10), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).0 + Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).0;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).1 = _19.fld0.1 * _19.fld0.1;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)) = _19.fld0;
place!(Field::<f64>(Variant((*_10), 0), 4)) = 190376086820294345243051023880151803423_u128 as f64;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).2 = Field::<bool>(Variant((*_10), 0), 0);
place!(Field::<f64>(Variant((*_10), 0), 4)) = _15 as f64;
place!(Field::<i32>(Variant((*_10), 0), 3)) = (-655576470_i32) >> _16.fld0.0;
place!(Field::<f64>(Variant((*_10), 0), 4)) = 281266128246085235703356408699120219644_u128 as f64;
place!(Field::<(f64, usize, bool)>(Variant(_19.fld2, 0), 2)).0 = -Field::<f64>(Variant((*_10), 0), 4);
place!(Field::<bool>(Variant((*_10), 0), 0)) = !Field::<(f64, usize, bool)>(Variant(_19.fld2, 0), 2).2;
match Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).1 {
0 => bb1,
1 => bb2,
2 => bb6,
3 => bb14,
4 => bb15,
17367909119288900927 => bb17,
_ => bb16
}
}
bb14 = {
Return()
}
bb15 = {
_3.2 = [3374757941_u32,826752956_u32];
_4 = _7 != _7;
_9 = [4272716965858926032207578141005610163_i128,(-133962132597262915563699385107372521101_i128),60717200113669812308430884528588566987_i128];
_7 = !_8;
_6 = !22_i8;
_3.1 = _4;
_4 = _5 <= _5;
_6 = (-124_i8);
_9 = [80597977903434731720439798329567053537_i128,63824572550202370660925787811761253534_i128,104920339283689469389945352338559446857_i128];
_7 = _8;
_3.0.1 = !10442196048543050593_u64;
_12 = _3.0.1 as f64;
_3.1 = _4;
_6 = (-91_i8) << _8;
_13 = &_4;
_9 = [3473506598629854501336300276924444377_i128,116034918686022831803530537552919398991_i128,(-29283524584901575650328053899529966103_i128)];
_5 = RET;
Goto(bb2)
}
bb16 = {
_7 = !_8;
_6 = 59_i8;
_3.1 = !(*_13);
_13 = &_3.1;
_4 = (*_13);
_14 = _5;
_16.fld0.0 = _8 - _8;
_15 = 32516_u16 >> _7;
_7 = !_16.fld0.0;
_12 = (-115215982081586886_i64) as f64;
_5 = RET;
_17 = 30181_i16 | (-1805_i16);
_4 = !(*_13);
_14 = RET;
_3.0.0 = core::ptr::addr_of_mut!(_17);
_16.fld2 = !_8;
_8 = _16.fld2 ^ _7;
_4 = (*_13) <= (*_13);
_3.0.1 = _15 as u64;
_16.fld0 = (_16.fld2,);
_14 = RET;
Call(_16.fld0.0 = fn15(_16.fld2, Move(_3.0.0), Move(_13), (*_13), (*_13), _7, (*_13)), ReturnTo(bb3), UnwindUnreachable())
}
bb17 = {
place!(Field::<f64>(Variant((*_10), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).0 + _20;
_3.0.0 = core::ptr::addr_of_mut!(_17);
Call(place!(Field::<char>(Variant((*_10), 0), 1)) = fn16(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).1, Move(_21), (*_13), (*_21)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).1 = _19.fld0.1;
_19.fld0.0 = Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).0 + Field::<f64>(Variant((*_10), 0), 4);
match Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).1 {
0 => bb9,
1 => bb19,
2 => bb20,
3 => bb21,
4 => bb22,
5 => bb23,
17367909119288900927 => bb25,
_ => bb24
}
}
bb19 = {
_19.fld3 = 3782262941_u32 >> _8;
_19.fld1 = [52151896951931850542440970442749709777_u128,4698907676734163987620444944154528187_u128,85896918617362035431988169913424858671_u128,13990039560619728360985299185010850869_u128,306184774828142505032152020901120494391_u128];
_9 = [(-31235362642362403124598997735658370381_i128),98929220260180408051743192425163514007_i128,95211637715816354646177450479533861318_i128];
_19.fld1 = [243004509548262530633288710222751566246_u128,198228792568304195996452618161705668666_u128,265632764344998454887082651005232175720_u128,102410863752411119509510220291301821032_u128,91532739318160492519736730097808396525_u128];
_9 = [(-122601653899285732485032944168616994963_i128),(-105459961863257638675824197803726358118_i128),(-103545501136728257108203072094095556770_i128)];
_4 = !_3.1;
_13 = &_3.1;
_3.0 = (Move(_19.fld6), 8949544061302861187_u64);
_7 = _8 + _16.fld0.0;
_3.1 = _4;
_4 = !_3.1;
_4 = _3.1 | _3.1;
_8 = _7 - _16.fld0.0;
_19.fld0 = (_12, 17367909119288900927_usize, _3.1);
_18 = [(-57703462972616416098052885260011934713_i128),(-117365676636419449452658205195181301987_i128),(-166141097811529721765745093538894607760_i128),154583147086299393930332777844411935839_i128,(-57523881123081526650592188259659147204_i128),157885700966363581204042787306583678159_i128,145150698578391782205520710577788503068_i128,133175825212533540437327828593729829763_i128];
_10 = core::ptr::addr_of!(_19.fld2);
_16.fld1 = core::ptr::addr_of!(_19.fld4);
_21 = core::ptr::addr_of_mut!(_3.2);
_5 = _14;
_15 = 28996_u16 - 11816_u16;
(*_21) = [_19.fld3,_19.fld3];
_14 = RET;
_4 = _3.1 ^ _3.1;
match _19.fld0.1 {
0 => bb1,
1 => bb3,
2 => bb5,
3 => bb6,
4 => bb7,
5 => bb8,
17367909119288900927 => bb10,
_ => bb9
}
}
bb20 = {
_9 = [152334869010460222034668135036571242204_i128,8254346844021682958344023537833430019_i128,72685936965926315651697362298922172763_i128];
_13 = &_3.1;
_12 = _3.0.1 as f64;
_16.fld0.0 = _12 as isize;
_16.fld0.0 = _7 >> _17;
_15 = 5842_u16 << _8;
_6 = (-36_i8) | (-114_i8);
_3.0.0 = core::ptr::addr_of_mut!(_17);
_12 = 324727058_i32 as f64;
_13 = &_4;
_14 = RET;
_12 = (-43049479621256743188342020642183936260_i128) as f64;
_12 = _6 as f64;
_12 = (-2476381024074767403_i64) as f64;
_19.fld0.0 = _12 - _12;
_19.fld0.1 = 4_usize ^ 1_usize;
_19.fld4 = [(-1819342284_i32),(-1349560970_i32)];
_19.fld6 = core::ptr::addr_of_mut!(_17);
Goto(bb4)
}
bb21 = {
_7 = !_8;
_6 = 59_i8;
_3.1 = !(*_13);
_13 = &_3.1;
_4 = (*_13);
_14 = _5;
_16.fld0.0 = _8 - _8;
_15 = 32516_u16 >> _7;
_7 = !_16.fld0.0;
_12 = (-115215982081586886_i64) as f64;
_5 = RET;
_17 = 30181_i16 | (-1805_i16);
_4 = !(*_13);
_14 = RET;
_3.0.0 = core::ptr::addr_of_mut!(_17);
_16.fld2 = !_8;
_8 = _16.fld2 ^ _7;
_4 = (*_13) <= (*_13);
_3.0.1 = _15 as u64;
_16.fld0 = (_16.fld2,);
_14 = RET;
Call(_16.fld0.0 = fn15(_16.fld2, Move(_3.0.0), Move(_13), (*_13), (*_13), _7, (*_13)), ReturnTo(bb3), UnwindUnreachable())
}
bb22 = {
Return()
}
bb23 = {
_19.fld3 = !349753366_u32;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).0 = 230_u8 as f64;
place!(Field::<bool>(Variant((*_10), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).2 > Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).2;
place!(Field::<i32>(Variant(_19.fld2, 0), 3)) = -(-1134436275_i32);
_36 = _19.fld3 as f64;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).1 = _19.fld0.1 * _19.fld0.1;
(*_21) = [_19.fld3,_19.fld3];
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).2 = Field::<bool>(Variant((*_10), 0), 0) | Field::<bool>(Variant((*_10), 0), 0);
_9 = [78829929623434679877117965794850133015_i128,76182722158959862137896848264836953965_i128,(-111754655759191217347554914994379323728_i128)];
place!(Field::<bool>(Variant((*_10), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).2 >= Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).2;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).1 = _19.fld0.1;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).0 = _3.0.1 as f64;
place!(Field::<bool>(Variant((*_10), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).2;
place!(Field::<f64>(Variant((*_10), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).0 + Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).0;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).1 = _19.fld0.1 * _19.fld0.1;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)) = _19.fld0;
place!(Field::<f64>(Variant((*_10), 0), 4)) = 190376086820294345243051023880151803423_u128 as f64;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).2 = Field::<bool>(Variant((*_10), 0), 0);
place!(Field::<f64>(Variant((*_10), 0), 4)) = _15 as f64;
place!(Field::<i32>(Variant((*_10), 0), 3)) = (-655576470_i32) >> _16.fld0.0;
place!(Field::<f64>(Variant((*_10), 0), 4)) = 281266128246085235703356408699120219644_u128 as f64;
place!(Field::<(f64, usize, bool)>(Variant(_19.fld2, 0), 2)).0 = -Field::<f64>(Variant((*_10), 0), 4);
place!(Field::<bool>(Variant((*_10), 0), 0)) = !Field::<(f64, usize, bool)>(Variant(_19.fld2, 0), 2).2;
match Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).1 {
0 => bb1,
1 => bb2,
2 => bb6,
3 => bb14,
4 => bb15,
17367909119288900927 => bb17,
_ => bb16
}
}
bb24 = {
(*_10) = Adt28::Variant0 { fld0: (*_13),fld1: RET,fld2: _19.fld0,fld3: (-1888368184_i32),fld4: _12 };
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).1 = _19.fld0.1;
place!(Field::<f64>(Variant((*_10), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).0;
(*_21) = [_19.fld3,_19.fld3];
(*_21) = [_19.fld3,_19.fld3];
(*_10) = Adt28::Variant0 { fld0: (*_13),fld1: RET,fld2: _19.fld0,fld3: 9194505_i32,fld4: _12 };
place!(Field::<i32>(Variant((*_10), 0), 3)) = (-1658178358_i32) & 513388654_i32;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).2 = Field::<bool>(Variant((*_10), 0), 0) < Field::<bool>(Variant((*_10), 0), 0);
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).1 = _19.fld0.1 * _19.fld0.1;
place!(Field::<f64>(Variant((*_10), 0), 4)) = _20;
Goto(bb13)
}
bb25 = {
place!(Field::<bool>(Variant((*_10), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).2;
place!(Field::<f64>(Variant((*_10), 0), 4)) = _15 as f64;
place!(Field::<bool>(Variant((*_10), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).2;
RET = Field::<char>(Variant((*_10), 0), 1);
place!(Field::<i32>(Variant((*_10), 0), 3)) = (-1254462327_i32) >> Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).1;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)) = _19.fld0;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).1 = _19.fld0.1;
(*_10) = Adt28::Variant0 { fld0: (*_13),fld1: _14,fld2: _19.fld0,fld3: (-1516707713_i32),fld4: _12 };
place!(Field::<f64>(Variant((*_10), 0), 4)) = _7 as f64;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).1 = _19.fld3 as usize;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).0 = Field::<f64>(Variant((*_10), 0), 4) + Field::<f64>(Variant((*_10), 0), 4);
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)) = (Field::<f64>(Variant((*_10), 0), 4), _19.fld0.1, (*_13));
(*_10) = Adt28::Variant0 { fld0: (*_13),fld1: _5,fld2: _19.fld0,fld3: 893777063_i32,fld4: _19.fld0.0 };
_16.fld3 = core::ptr::addr_of_mut!(_28);
Goto(bb26)
}
bb26 = {
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).0 = _3.0.1 as f64;
place!(Field::<bool>(Variant((*_10), 0), 0)) = !_4;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).1 = _19.fld3 as usize;
place!(Field::<bool>(Variant((*_10), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).2;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)) = (Field::<f64>(Variant((*_10), 0), 4), _19.fld0.1, (*_13));
_16.fld2 = _8 << Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).1;
_3.2 = [_19.fld3,_19.fld3];
_15 = 42700_u16;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).2 = !Field::<bool>(Variant((*_10), 0), 0);
_43 = _7;
(*_10) = Adt28::Variant0 { fld0: _32,fld1: _14,fld2: _19.fld0,fld3: (-1438316425_i32),fld4: _19.fld0.0 };
_3.0.1 = 16574692506717347168_u64;
_14 = Field::<char>(Variant((*_10), 0), 1);
_43 = _8 + _8;
_38 = _25 as u32;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).0 = Field::<f64>(Variant((*_10), 0), 4) * Field::<f64>(Variant((*_10), 0), 4);
place!(Field::<char>(Variant((*_10), 0), 1)) = _14;
match Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).1 {
0 => bb11,
1 => bb18,
2 => bb10,
3 => bb4,
4 => bb21,
17367909119288900927 => bb28,
_ => bb27
}
}
bb27 = {
_3.2 = [3374757941_u32,826752956_u32];
_4 = _7 != _7;
_9 = [4272716965858926032207578141005610163_i128,(-133962132597262915563699385107372521101_i128),60717200113669812308430884528588566987_i128];
_7 = !_8;
_6 = !22_i8;
_3.1 = _4;
_4 = _5 <= _5;
_6 = (-124_i8);
_9 = [80597977903434731720439798329567053537_i128,63824572550202370660925787811761253534_i128,104920339283689469389945352338559446857_i128];
_7 = _8;
_3.0.1 = !10442196048543050593_u64;
_12 = _3.0.1 as f64;
_3.1 = _4;
_6 = (-91_i8) << _8;
_13 = &_4;
_9 = [3473506598629854501336300276924444377_i128,116034918686022831803530537552919398991_i128,(-29283524584901575650328053899529966103_i128)];
_5 = RET;
Goto(bb2)
}
bb28 = {
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).2 = !Field::<bool>(Variant((*_10), 0), 0);
_31 = [161902104890693761665806520763891265257_i128,(-45214152673539403476733867942113190203_i128),56249178314540155387001591628222339235_i128];
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).0 = Field::<f64>(Variant((*_10), 0), 4) + _19.fld0.0;
_6 = _8 as i8;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)) = (Field::<f64>(Variant((*_10), 0), 4), _19.fld0.1, Field::<bool>(Variant((*_10), 0), 0));
_43 = _16.fld2 >> _16.fld2;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).2 = !_32;
_45 = Field::<f64>(Variant((*_10), 0), 4) as u64;
(*_10) = Adt28::Variant0 { fld0: (*_13),fld1: _14,fld2: _19.fld0,fld3: 961703287_i32,fld4: _19.fld0.0 };
place!(Field::<(f64, usize, bool)>(Variant(_19.fld2, 0), 2)).1 = _19.fld0.1;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).1 = _19.fld0.1;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).2 = Field::<bool>(Variant((*_10), 0), 0);
match Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).1 {
0 => bb9,
1 => bb22,
2 => bb10,
17367909119288900927 => bb30,
_ => bb29
}
}
bb29 = {
_3.2 = [3374757941_u32,826752956_u32];
_4 = _7 != _7;
_9 = [4272716965858926032207578141005610163_i128,(-133962132597262915563699385107372521101_i128),60717200113669812308430884528588566987_i128];
_7 = !_8;
_6 = !22_i8;
_3.1 = _4;
_4 = _5 <= _5;
_6 = (-124_i8);
_9 = [80597977903434731720439798329567053537_i128,63824572550202370660925787811761253534_i128,104920339283689469389945352338559446857_i128];
_7 = _8;
_3.0.1 = !10442196048543050593_u64;
_12 = _3.0.1 as f64;
_3.1 = _4;
_6 = (-91_i8) << _8;
_13 = &_4;
_9 = [3473506598629854501336300276924444377_i128,116034918686022831803530537552919398991_i128,(-29283524584901575650328053899529966103_i128)];
_5 = RET;
Goto(bb2)
}
bb30 = {
place!(Field::<i32>(Variant((*_10), 0), 3)) = _17 as i32;
Goto(bb31)
}
bb31 = {
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).0 = _19.fld0.0 - Field::<f64>(Variant((*_10), 0), 4);
(*_10) = Adt28::Variant0 { fld0: (*_13),fld1: _14,fld2: _19.fld0,fld3: (-57460680_i32),fld4: _19.fld0.0 };
place!(Field::<char>(Variant((*_10), 0), 1)) = _5;
place!(Field::<i32>(Variant((*_10), 0), 3)) = !(-262456744_i32);
place!(Field::<i32>(Variant((*_10), 0), 3)) = (-410886315_i32) ^ (-713226322_i32);
_6 = Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).2 as i8;
place!(Field::<f64>(Variant((*_10), 0), 4)) = -Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).0;
_48 = Field::<f64>(Variant((*_10), 0), 4) - Field::<f64>(Variant((*_10), 0), 4);
place!(Field::<bool>(Variant((*_10), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).2;
place!(Field::<bool>(Variant((*_10), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).2 < (*_13);
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).2 = Field::<bool>(Variant((*_10), 0), 0);
place!(Field::<i32>(Variant((*_10), 0), 3)) = (-542444469_i32) << _15;
_40 = Field::<i32>(Variant((*_10), 0), 3);
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).1 = !_19.fld0.1;
place!(Field::<i32>(Variant((*_10), 0), 3)) = _40 << _8;
place!(Field::<bool>(Variant((*_10), 0), 0)) = Field::<i32>(Variant((*_10), 0), 3) < Field::<i32>(Variant((*_10), 0), 3);
_19.fld0.0 = _20;
_38 = _19.fld3 - _19.fld3;
_39 = -Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).0;
_49 = _15 as f32;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).0 = _45 as f64;
place!(Field::<char>(Variant((*_10), 0), 1)) = RET;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)) = _19.fld0;
_51.1 = core::ptr::addr_of_mut!(_17);
place!(Field::<f64>(Variant((*_10), 0), 4)) = _8 as f64;
place!(Field::<char>(Variant((*_10), 0), 1)) = _5;
Goto(bb32)
}
bb32 = {
place!(Field::<bool>(Variant((*_10), 0), 0)) = !_32;
_50 = _38 as i32;
place!(Field::<i32>(Variant((*_10), 0), 3)) = 256090393052551918517371585821878691285_u128 as i32;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)) = (Field::<f64>(Variant((*_10), 0), 4), _19.fld0.1, (*_13));
match Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).1 {
0 => bb11,
1 => bb29,
17367909119288900927 => bb33,
_ => bb20
}
}
bb33 = {
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).1 = !_19.fld0.1;
_19.fld2 = Adt28::Variant0 { fld0: _32,fld1: _14,fld2: _19.fld0,fld3: _40,fld4: _48 };
_34 = [_25,_25,_25,_25];
_3.0 = (Move(_51.1), _45);
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).0 = Field::<f64>(Variant((*_10), 0), 4) + Field::<f64>(Variant((*_10), 0), 4);
_3.1 = Field::<(f64, usize, bool)>(Variant(_19.fld2, 0), 2).2 ^ (*_13);
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)) = _19.fld0;
_18 = [41403668679092245681239549082408116140_i128,145571709456629590724016097424000741136_i128,25009288952438105203476770584375520643_i128,94248630802713667778901586174598261475_i128,(-17133335439121172596620544052108483585_i128),134365033839781416496039014682226624991_i128,(-128741219622045423938671677774917093826_i128),(-90373443062599517289363287061660721970_i128)];
place!(Field::<i32>(Variant((*_10), 0), 3)) = (*_13) as i32;
_45 = _3.0.1;
_19.fld0 = Field::<(f64, usize, bool)>(Variant((*_10), 0), 2);
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)) = (Field::<f64>(Variant((*_10), 0), 4), _19.fld0.1, Field::<bool>(Variant((*_10), 0), 0));
RET = Field::<char>(Variant((*_10), 0), 1);
_16.fld2 = _16.fld0.0 ^ _43;
_5 = Field::<char>(Variant((*_10), 0), 1);
_19.fld1 = [56116112337973506728860950739606674652_u128,130763585452866556975975889800853849200_u128,260553795067566359470659346551850128137_u128,305748169623878180289864640893983465428_u128,290330456515744527248417184314132380677_u128];
_25 = !7057135671381843683_i64;
match Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).1 {
0 => bb31,
1 => bb25,
2 => bb8,
3 => bb34,
17367909119288900927 => bb36,
_ => bb35
}
}
bb34 = {
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).1 = _19.fld0.1;
_19.fld0.0 = Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).0 + Field::<f64>(Variant((*_10), 0), 4);
match Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).1 {
0 => bb9,
1 => bb19,
2 => bb20,
3 => bb21,
4 => bb22,
5 => bb23,
17367909119288900927 => bb25,
_ => bb24
}
}
bb35 = {
Return()
}
bb36 = {
_28 = [Field::<i32>(Variant((*_10), 0), 3),Field::<i32>(Variant((*_10), 0), 3),Field::<i32>(Variant((*_10), 0), 3),Field::<i32>(Variant((*_10), 0), 3),Field::<i32>(Variant((*_10), 0), 3),Field::<i32>(Variant((*_10), 0), 3),Field::<i32>(Variant((*_10), 0), 3)];
match Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).1 {
0 => bb7,
1 => bb6,
2 => bb15,
17367909119288900927 => bb37,
_ => bb14
}
}
bb37 = {
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).2 = Field::<bool>(Variant((*_10), 0), 0);
place!(Field::<bool>(Variant((*_10), 0), 0)) = (*_13) <= Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).2;
place!(Field::<char>(Variant((*_10), 0), 1)) = _14;
_55 = (Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).1, Move(_13));
_6 = (-4_i8) - (-33_i8);
_32 = Field::<bool>(Variant((*_10), 0), 0);
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).0 = Field::<f64>(Variant((*_10), 0), 4) * _48;
_48 = -Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).0;
_32 = Field::<i32>(Variant((*_10), 0), 3) >= Field::<i32>(Variant((*_10), 0), 3);
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).1 = 245_u8 as usize;
_8 = _16.fld2 >> _43;
place!(Field::<bool>(Variant((*_10), 0), 0)) = _16.fld2 <= _16.fld2;
(*_10) = Adt28::Variant0 { fld0: _19.fld0.2,fld1: RET,fld2: _19.fld0,fld3: _50,fld4: _36 };
place!(Field::<f64>(Variant((*_10), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).0 * _12;
Goto(bb38)
}
bb38 = {
place!(Field::<i32>(Variant((*_10), 0), 3)) = Field::<f64>(Variant((*_10), 0), 4) as i32;
_18 = [49803526849632441178763585026066320044_i128,(-72407087410870840342373627357658653215_i128),(-75830261890270274184954359045803223365_i128),(-24841993564809132252838622211021804222_i128),(-37797694656277653992060299233032178303_i128),(-60140554111547845439682764455944064767_i128),5769643773032556899560741685599066754_i128,111832572986052174001028692900778868142_i128];
_29 = _45;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).0 = _48 * _48;
place!(Field::<bool>(Variant((*_10), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).0 < Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).0;
place!(Field::<f64>(Variant((*_10), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).0 + Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).0;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)) = _19.fld0;
_21 = core::ptr::addr_of_mut!(_3.2);
_5 = Field::<char>(Variant((*_10), 0), 1);
_12 = Field::<f64>(Variant((*_10), 0), 4);
place!(Field::<char>(Variant((*_10), 0), 1)) = _5;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).1 = _55.0;
Goto(bb39)
}
bb39 = {
_48 = -Field::<f64>(Variant((*_10), 0), 4);
place!(Field::<bool>(Variant((*_10), 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).2;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)) = (Field::<f64>(Variant((*_10), 0), 4), _55.0, Field::<bool>(Variant((*_10), 0), 0));
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)) = (Field::<f64>(Variant((*_10), 0), 4), _19.fld0.1, Field::<bool>(Variant((*_10), 0), 0));
place!(Field::<i32>(Variant((*_10), 0), 3)) = _50;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)) = _19.fld0;
place!(Field::<char>(Variant((*_10), 0), 1)) = RET;
_52 = !Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).2;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).2 = Field::<f64>(Variant((*_10), 0), 4) > _48;
place!(Field::<i32>(Variant((*_10), 0), 3)) = _50;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)) = _19.fld0;
_41 = _49;
place!(Field::<char>(Variant((*_10), 0), 1)) = _5;
_62 = (Field::<(f64, usize, bool)>(Variant((*_10), 0), 2),);
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).2 = Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).0 != Field::<f64>(Variant((*_10), 0), 4);
_49 = _41 - _41;
place!(Field::<(f64, usize, bool)>(Variant(_19.fld2, 0), 2)).1 = (-165967504406204375976340208081874434078_i128) as usize;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).2 = _16.fld2 < _43;
(*_10) = Adt28::Variant1 { fld0: _3.1,fld1: _62,fld2: _19.fld3 };
place!(Field::<u32>(Variant((*_10), 1), 2)) = (-123600456514490732497970208963189115703_i128) as u32;
_24 = core::ptr::addr_of!(_19.fld5);
place!(Field::<((f64, usize, bool),)>(Variant((*_10), 1), 1)).0.2 = Field::<bool>(Variant((*_10), 1), 0);
_19.fld0 = Field::<((f64, usize, bool),)>(Variant((*_10), 1), 1).0;
(*_21) = [Field::<u32>(Variant((*_10), 1), 2),Field::<u32>(Variant((*_10), 1), 2)];
_16.fld0 = (_16.fld2,);
(*_10) = Adt28::Variant1 { fld0: _19.fld0.2,fld1: _62,fld2: _19.fld3 };
place!(Field::<bool>(Variant((*_10), 1), 0)) = Field::<((f64, usize, bool),)>(Variant((*_10), 1), 1).0.1 == Field::<((f64, usize, bool),)>(Variant((*_10), 1), 1).0.1;
place!(Field::<((f64, usize, bool),)>(Variant((*_10), 1), 1)).0 = (_12, _19.fld0.1, Field::<bool>(Variant((*_10), 1), 0));
place!(Field::<((f64, usize, bool),)>(Variant((*_10), 1), 1)).0.2 = Field::<bool>(Variant((*_10), 1), 0) & Field::<bool>(Variant((*_10), 1), 0);
(*_21) = [_38,Field::<u32>(Variant((*_10), 1), 2)];
place!(Field::<((f64, usize, bool),)>(Variant((*_10), 1), 1)).0.1 = _19.fld0.1 % _19.fld0.1;
Goto(bb40)
}
bb40 = {
place!(Field::<bool>(Variant((*_10), 1), 0)) = Field::<((f64, usize, bool),)>(Variant((*_10), 1), 1).0.2 & Field::<((f64, usize, bool),)>(Variant((*_10), 1), 1).0.2;
place!(Field::<((f64, usize, bool),)>(Variant((*_10), 1), 1)).0.2 = Field::<bool>(Variant((*_10), 1), 0);
place!(Field::<((f64, usize, bool),)>(Variant((*_10), 1), 1)).0.2 = Field::<bool>(Variant((*_10), 1), 0);
place!(Field::<((f64, usize, bool),)>(Variant((*_10), 1), 1)).0 = (_39, _55.0, Field::<bool>(Variant((*_10), 1), 0));
(*_10) = Adt28::Variant1 { fld0: _19.fld0.2,fld1: _62,fld2: _38 };
place!(Field::<((f64, usize, bool),)>(Variant((*_10), 1), 1)) = _62;
place!(Field::<((f64, usize, bool),)>(Variant((*_10), 1), 1)).0.0 = _12 + _36;
_23 = _6;
place!(Field::<((f64, usize, bool),)>(Variant((*_10), 1), 1)).0.1 = _19.fld0.1 & _55.0;
(*_21) = [Field::<u32>(Variant((*_10), 1), 2),Field::<u32>(Variant((*_10), 1), 2)];
_16.fld0 = (_43,);
_58 = _45;
place!(Field::<((f64, usize, bool),)>(Variant((*_10), 1), 1)).0.1 = !_19.fld0.1;
_3.1 = Field::<((f64, usize, bool),)>(Variant((*_10), 1), 1).0.0 > Field::<((f64, usize, bool),)>(Variant((*_10), 1), 1).0.0;
(*_10) = Adt28::Variant0 { fld0: _3.1,fld1: _14,fld2: _62.0,fld3: _40,fld4: _48 };
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).2 = Field::<bool>(Variant((*_10), 0), 0) ^ Field::<bool>(Variant((*_10), 0), 0);
place!(Field::<i32>(Variant((*_10), 0), 3)) = _40;
match Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).1 {
0 => bb28,
1 => bb37,
17367909119288900927 => bb42,
_ => bb41
}
}
bb41 = {
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).1 = !_19.fld0.1;
_19.fld2 = Adt28::Variant0 { fld0: _32,fld1: _14,fld2: _19.fld0,fld3: _40,fld4: _48 };
_34 = [_25,_25,_25,_25];
_3.0 = (Move(_51.1), _45);
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).0 = Field::<f64>(Variant((*_10), 0), 4) + Field::<f64>(Variant((*_10), 0), 4);
_3.1 = Field::<(f64, usize, bool)>(Variant(_19.fld2, 0), 2).2 ^ (*_13);
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)) = _19.fld0;
_18 = [41403668679092245681239549082408116140_i128,145571709456629590724016097424000741136_i128,25009288952438105203476770584375520643_i128,94248630802713667778901586174598261475_i128,(-17133335439121172596620544052108483585_i128),134365033839781416496039014682226624991_i128,(-128741219622045423938671677774917093826_i128),(-90373443062599517289363287061660721970_i128)];
place!(Field::<i32>(Variant((*_10), 0), 3)) = (*_13) as i32;
_45 = _3.0.1;
_19.fld0 = Field::<(f64, usize, bool)>(Variant((*_10), 0), 2);
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)) = (Field::<f64>(Variant((*_10), 0), 4), _19.fld0.1, Field::<bool>(Variant((*_10), 0), 0));
RET = Field::<char>(Variant((*_10), 0), 1);
_16.fld2 = _16.fld0.0 ^ _43;
_5 = Field::<char>(Variant((*_10), 0), 1);
_19.fld1 = [56116112337973506728860950739606674652_u128,130763585452866556975975889800853849200_u128,260553795067566359470659346551850128137_u128,305748169623878180289864640893983465428_u128,290330456515744527248417184314132380677_u128];
_25 = !7057135671381843683_i64;
match Field::<(f64, usize, bool)>(Variant((*_10), 0), 2).1 {
0 => bb31,
1 => bb25,
2 => bb8,
3 => bb34,
17367909119288900927 => bb36,
_ => bb35
}
}
bb42 = {
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).1 = _62.0.1 - _62.0.1;
(*_10) = Adt28::Variant0 { fld0: _3.1,fld1: _14,fld2: _19.fld0,fld3: _40,fld4: _39 };
place!(Field::<f64>(Variant((*_10), 0), 4)) = _6 as f64;
place!(Field::<f64>(Variant((*_10), 0), 4)) = -_48;
_62.0.0 = _43 as f64;
place!(Field::<i32>(Variant((*_10), 0), 3)) = !_40;
place!(Field::<bool>(Variant((*_10), 0), 0)) = _12 > Field::<f64>(Variant((*_10), 0), 4);
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).2 = Field::<bool>(Variant((*_10), 0), 0) <= Field::<bool>(Variant((*_10), 0), 0);
place!(Field::<char>(Variant((*_10), 0), 1)) = _5;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).2 = !Field::<bool>(Variant((*_10), 0), 0);
place!(Field::<f64>(Variant((*_10), 0), 4)) = _12 * _62.0.0;
_16.fld0.0 = _16.fld2;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)) = _62.0;
_55.0 = _3.0.1 as usize;
(*_10) = Adt28::Variant0 { fld0: _3.1,fld1: RET,fld2: _62.0,fld3: _50,fld4: _62.0.0 };
_25 = _17 as i64;
place!(Field::<char>(Variant((*_10), 0), 1)) = _14;
(*_10) = Adt28::Variant0 { fld0: _3.1,fld1: RET,fld2: _62.0,fld3: _50,fld4: _62.0.0 };
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)) = (Field::<f64>(Variant(_19.fld2, 0), 4), _55.0, Field::<bool>(Variant((*_10), 0), 0));
place!(Field::<char>(Variant((*_10), 0), 1)) = RET;
place!(Field::<i32>(Variant((*_10), 0), 3)) = _3.0.1 as i32;
(*_10) = Adt28::Variant1 { fld0: _3.1,fld1: _62,fld2: _38 };
place!(Field::<((f64, usize, bool),)>(Variant((*_10), 1), 1)).0.2 = Field::<bool>(Variant((*_10), 1), 0);
match Field::<((f64, usize, bool),)>(Variant((*_10), 1), 1).0.1 {
0 => bb25,
1 => bb43,
2 => bb44,
3 => bb45,
4 => bb46,
17367909119288900927 => bb48,
_ => bb47
}
}
bb43 = {
_9 = [152334869010460222034668135036571242204_i128,8254346844021682958344023537833430019_i128,72685936965926315651697362298922172763_i128];
_13 = &_3.1;
_12 = _3.0.1 as f64;
_16.fld0.0 = _12 as isize;
_16.fld0.0 = _7 >> _17;
_15 = 5842_u16 << _8;
_6 = (-36_i8) | (-114_i8);
_3.0.0 = core::ptr::addr_of_mut!(_17);
_12 = 324727058_i32 as f64;
_13 = &_4;
_14 = RET;
_12 = (-43049479621256743188342020642183936260_i128) as f64;
_12 = _6 as f64;
_12 = (-2476381024074767403_i64) as f64;
_19.fld0.0 = _12 - _12;
_19.fld0.1 = 4_usize ^ 1_usize;
_19.fld4 = [(-1819342284_i32),(-1349560970_i32)];
_19.fld6 = core::ptr::addr_of_mut!(_17);
Goto(bb4)
}
bb44 = {
Return()
}
bb45 = {
_16.fld0 = (_8,);
_13 = &_4;
(*_21) = [_19.fld3,_19.fld3];
_12 = _19.fld0.0 + _19.fld0.0;
_8 = _16.fld0.0 & _16.fld0.0;
_19.fld6 = core::ptr::addr_of_mut!(_17);
_25 = !2502186000015940997_i64;
(*_21) = [_19.fld3,_19.fld3];
_19.fld0.2 = (*_13) != (*_13);
(*_21) = [_19.fld3,_19.fld3];
_16.fld3 = core::ptr::addr_of_mut!(_28);
(*_10) = Adt28::Variant0 { fld0: (*_13),fld1: _5,fld2: _19.fld0,fld3: (-836941484_i32),fld4: _19.fld0.0 };
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)).1 = Field::<f64>(Variant((*_10), 0), 4) as usize;
place!(Field::<(f64, usize, bool)>(Variant((*_10), 0), 2)) = (Field::<f64>(Variant((*_10), 0), 4), _19.fld0.1, (*_13));
Goto(bb11)
}
bb46 = {
_19.fld3 = 3782262941_u32 >> _8;
_19.fld1 = [52151896951931850542440970442749709777_u128,4698907676734163987620444944154528187_u128,85896918617362035431988169913424858671_u128,13990039560619728360985299185010850869_u128,306184774828142505032152020901120494391_u128];
_9 = [(-31235362642362403124598997735658370381_i128),98929220260180408051743192425163514007_i128,95211637715816354646177450479533861318_i128];
_19.fld1 = [243004509548262530633288710222751566246_u128,198228792568304195996452618161705668666_u128,265632764344998454887082651005232175720_u128,102410863752411119509510220291301821032_u128,91532739318160492519736730097808396525_u128];
_9 = [(-122601653899285732485032944168616994963_i128),(-105459961863257638675824197803726358118_i128),(-103545501136728257108203072094095556770_i128)];
_4 = !_3.1;
_13 = &_3.1;
_3.0 = (Move(_19.fld6), 8949544061302861187_u64);
_7 = _8 + _16.fld0.0;
_3.1 = _4;
_4 = !_3.1;
_4 = _3.1 | _3.1;
_8 = _7 - _16.fld0.0;
_19.fld0 = (_12, 17367909119288900927_usize, _3.1);
_18 = [(-57703462972616416098052885260011934713_i128),(-117365676636419449452658205195181301987_i128),(-166141097811529721765745093538894607760_i128),154583147086299393930332777844411935839_i128,(-57523881123081526650592188259659147204_i128),157885700966363581204042787306583678159_i128,145150698578391782205520710577788503068_i128,133175825212533540437327828593729829763_i128];
_10 = core::ptr::addr_of!(_19.fld2);
_16.fld1 = core::ptr::addr_of!(_19.fld4);
_21 = core::ptr::addr_of_mut!(_3.2);
_5 = _14;
_15 = 28996_u16 - 11816_u16;
(*_21) = [_19.fld3,_19.fld3];
_14 = RET;
_4 = _3.1 ^ _3.1;
match _19.fld0.1 {
0 => bb1,
1 => bb3,
2 => bb5,
3 => bb6,
4 => bb7,
5 => bb8,
17367909119288900927 => bb10,
_ => bb9
}
}
bb47 = {
_7 = !_8;
_6 = 59_i8;
_3.1 = !(*_13);
_13 = &_3.1;
_4 = (*_13);
_14 = _5;
_16.fld0.0 = _8 - _8;
_15 = 32516_u16 >> _7;
_7 = !_16.fld0.0;
_12 = (-115215982081586886_i64) as f64;
_5 = RET;
_17 = 30181_i16 | (-1805_i16);
_4 = !(*_13);
_14 = RET;
_3.0.0 = core::ptr::addr_of_mut!(_17);
_16.fld2 = !_8;
_8 = _16.fld2 ^ _7;
_4 = (*_13) <= (*_13);
_3.0.1 = _15 as u64;
_16.fld0 = (_16.fld2,);
_14 = RET;
Call(_16.fld0.0 = fn15(_16.fld2, Move(_3.0.0), Move(_13), (*_13), (*_13), _7, (*_13)), ReturnTo(bb3), UnwindUnreachable())
}
bb48 = {
_12 = _48 * Field::<((f64, usize, bool),)>(Variant((*_10), 1), 1).0.0;
_18 = [165291766120633698718745691736240077884_i128,(-111717782358868093981038545758746308527_i128),164190763374926974668166799954962888170_i128,(-116143213438310756083284021744501890029_i128),(-7368362003846928089265402576676534941_i128),59975384756134052245965520998415416697_i128,96165311756555150669566951506282818062_i128,49768359131279322801189673839868473842_i128];
place!(Field::<u32>(Variant((*_10), 1), 2)) = _19.fld3;
place!(Field::<((f64, usize, bool),)>(Variant((*_10), 1), 1)).0 = (_62.0.0, _19.fld0.1, Field::<bool>(Variant((*_10), 1), 0));
_18 = [9210612385173844855453516205715148432_i128,(-122962393700484995975326921825716069381_i128),(-169681153518817841319391277880674777713_i128),(-169468354721976524318665697901563779835_i128),55987393275606246470646153058037009721_i128,52633697393644553379303644688329549021_i128,118146465381206039537527073886272698138_i128,85930334266343094419168691220310386746_i128];
(*_21) = [Field::<u32>(Variant((*_10), 1), 2),Field::<u32>(Variant((*_10), 1), 2)];
_44 = -_8;
place!(Field::<((f64, usize, bool),)>(Variant((*_10), 1), 1)) = (_62.0,);
_19.fld6 = Move(_3.0.0);
place!(Field::<u32>(Variant(_19.fld2, 1), 2)) = _19.fld3 >> _16.fld0.0;
place!(Field::<((f64, usize, bool),)>(Variant((*_10), 1), 1)) = _62;
_59 = _14;
_60 = !_16.fld2;
_10 = core::ptr::addr_of!((*_10));
_26 = _41 + _49;
_1 = &_25;
_65 = Field::<((f64, usize, bool),)>(Variant((*_10), 1), 1).0.0 as isize;
(*_21) = [Field::<u32>(Variant((*_10), 1), 2),Field::<u32>(Variant((*_10), 1), 2)];
Goto(bb49)
}
bb49 = {
place!(Field::<((f64, usize, bool),)>(Variant((*_10), 1), 1)).0 = (_48, _62.0.1, Field::<bool>(Variant((*_10), 1), 0));
_42 = _59;
(*_21) = [Field::<u32>(Variant((*_10), 1), 2),Field::<u32>(Variant((*_10), 1), 2)];
_19.fld0.0 = _12 - Field::<((f64, usize, bool),)>(Variant((*_10), 1), 1).0.0;
place!(Field::<((f64, usize, bool),)>(Variant((*_10), 1), 1)).0.1 = _19.fld0.1;
place!(Field::<((f64, usize, bool),)>(Variant((*_10), 1), 1)).0.2 = Field::<bool>(Variant((*_10), 1), 0) & Field::<bool>(Variant((*_10), 1), 0);
place!(Field::<u32>(Variant((*_10), 1), 2)) = _8 as u32;
place!(Field::<((f64, usize, bool),)>(Variant((*_10), 1), 1)) = _62;
_59 = _14;
_34 = [(*_1),(*_1),(*_1),(*_1)];
_66 = &mut _16.fld2;
place!(Field::<u32>(Variant((*_10), 1), 2)) = _19.fld3 + _19.fld3;
place!(Field::<bool>(Variant((*_10), 1), 0)) = Field::<((f64, usize, bool),)>(Variant((*_10), 1), 1).0.2 | Field::<((f64, usize, bool),)>(Variant((*_10), 1), 1).0.2;
Goto(bb50)
}
bb50 = {
Call(_76 = dump_var(13_usize, 14_usize, Move(_14), 4_usize, Move(_4), 44_usize, Move(_44), 17_usize, Move(_17)), ReturnTo(bb51), UnwindUnreachable())
}
bb51 = {
Call(_76 = dump_var(13_usize, 29_usize, Move(_29), 32_usize, Move(_32), 34_usize, Move(_34), 43_usize, Move(_43)), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
Call(_76 = dump_var(13_usize, 7_usize, Move(_7), 60_usize, Move(_60), 6_usize, Move(_6), 5_usize, Move(_5)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Call(_76 = dump_var(13_usize, 58_usize, Move(_58), 15_usize, Move(_15), 77_usize, _77, 77_usize, _77), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn14(mut _1: *mut &'static i64,mut _2: char,mut _3: bool,mut _4: char,mut _5: i8,mut _6: isize,mut _7: char,mut _8: i8,mut _9: i8) -> ((*mut i16, u64), bool, [u32; 2]) {
mir! {
type RET = ((*mut i16, u64), bool, [u32; 2]);
let _10: u32;
let _11: isize;
let _12: [i128; 3];
let _13: (i8, [u32; 2], [i32; 7], u32);
let _14: i64;
let _15: *const (i8, [u32; 2], [i32; 7], u32);
let _16: i64;
let _17: &'static *const (i8, [u32; 2], [i32; 7], u32);
let _18: *const Adt28;
let _19: i16;
let _20: f64;
let _21: i16;
let _22: (*mut i16, u64);
let _23: u128;
let _24: *mut [i32; 7];
let _25: (*mut i16, u64);
let _26: ();
let _27: ();
{
RET.0.1 = 15475546042660021922_u64;
_4 = _7;
_6 = (-124_isize);
RET.0.1 = 3626009912245523603_u64 ^ 15559921063243944469_u64;
_5 = _8 ^ _8;
_4 = _7;
_4 = _7;
RET.2 = [2749155238_u32,1205985401_u32];
_10 = !657225952_u32;
_8 = _5 & _9;
_4 = _7;
_6 = !(-9223372036854775808_isize);
_4 = _2;
_5 = !_8;
_8 = -_5;
_13.2 = [(-1334893460_i32),718624076_i32,1091044233_i32,(-448999256_i32),1513428158_i32,(-1384334352_i32),1498264987_i32];
_8 = _9 + _5;
RET.1 = !_3;
_3 = !RET.1;
_11 = _6 | _6;
_2 = _4;
_13.0 = _5 * _8;
_12 = [64909517030618604529354993621906547697_i128,(-106903476664829909632369073674168288294_i128),(-43673822433824539788592480358927821980_i128)];
_4 = _7;
_6 = _11 & _11;
_15 = core::ptr::addr_of!(_13);
Call((*_15).3 = core::intrinsics::transmute(_7), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_14 = (-7103673959715458409_i64) >> (*_15).0;
(*_15).2 = [2087767592_i32,2011885842_i32,(-810376519_i32),1080483688_i32,1455043949_i32,1147883233_i32,232758791_i32];
(*_15).0 = _8 * _9;
(*_15).2 = [(-1229268681_i32),2045214121_i32,419388979_i32,1080385419_i32,1597846669_i32,14197884_i32,109816830_i32];
(*_15).1 = [(*_15).3,_10];
(*_15).1 = RET.2;
_7 = _2;
(*_15).0 = _5 * _8;
(*_15).1 = [(*_15).3,(*_15).3];
(*_15).2 = [(-969709478_i32),447793629_i32,1265002633_i32,918797699_i32,283821586_i32,479577075_i32,1878276519_i32];
Goto(bb2)
}
bb2 = {
_5 = 93_u8 as i8;
_2 = _4;
(*_15).2 = [146154568_i32,(-1629627318_i32),(-2009363548_i32),1776108669_i32,(-1633278571_i32),170617254_i32,1899070596_i32];
(*_15).1 = RET.2;
(*_15).3 = 4_usize as u32;
(*_15).3 = !_10;
(*_15).1 = [(*_15).3,(*_15).3];
(*_15).1 = [(*_15).3,(*_15).3];
(*_15).2 = [1080331789_i32,405969525_i32,(-111398813_i32),88760662_i32,668833881_i32,(-1146172508_i32),(-1153639664_i32)];
(*_15).2 = [(-1516307661_i32),(-1396008878_i32),(-978483193_i32),1265455468_i32,(-504355082_i32),(-1970610596_i32),(-16375349_i32)];
(*_15).0 = !_8;
(*_15).0 = _5 ^ _8;
(*_15).0 = _8 ^ _9;
(*_15).1 = [(*_15).3,_10];
_8 = 1548800712_i32 as i8;
(*_15).3 = _10 - _10;
(*_15).0 = -_5;
(*_15).2 = [(-516992521_i32),922400436_i32,(-1733966155_i32),(-724214976_i32),542177556_i32,(-686575100_i32),856753447_i32];
(*_15).3 = _10 | _10;
_7 = _2;
(*_15).0 = !_9;
Goto(bb3)
}
bb3 = {
(*_15).0 = 7_usize as i8;
Goto(bb4)
}
bb4 = {
(*_15).0 = _9;
(*_15).0 = !_5;
(*_15).0 = _9 | _9;
_10 = RET.0.1 as u32;
(*_15).3 = _10 >> (*_15).0;
_23 = 26131137409777776943815044928119239150_u128 & 155928640749246467594586976816147738577_u128;
_15 = core::ptr::addr_of!((*_15));
(*_15).1 = RET.2;
(*_15).1 = [(*_15).3,(*_15).3];
_4 = _2;
(*_15).1 = RET.2;
_20 = _14 as f64;
RET.0.0 = core::ptr::addr_of_mut!(_21);
(*_15).3 = _10 >> _14;
(*_15).3 = (-98482865756794626986802969043157477005_i128) as u32;
(*_15).2 = [(-1766360311_i32),(-1309799622_i32),2068428055_i32,133062687_i32,(-1234609764_i32),1261908376_i32,(-512049140_i32)];
(*_15).2 = [(-1185010397_i32),1834861771_i32,316350221_i32,(-1226746047_i32),1814695981_i32,(-55763397_i32),(-97021429_i32)];
Goto(bb5)
}
bb5 = {
Call(_26 = dump_var(14_usize, 23_usize, Move(_23), 14_usize, Move(_14), 12_usize, Move(_12), 6_usize, Move(_6)), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
Call(_26 = dump_var(14_usize, 3_usize, Move(_3), 4_usize, Move(_4), 9_usize, Move(_9), 27_usize, _27), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn15(mut _1: isize,mut _2: *mut i16,mut _3: &'static bool,mut _4: bool,mut _5: bool,mut _6: isize,mut _7: bool) -> isize {
mir! {
type RET = isize;
let _8: i16;
let _9: bool;
let _10: usize;
let _11: bool;
let _12: ();
let _13: ();
{
_8 = (-18184_i16) - (-7553_i16);
_1 = !_6;
_6 = _1 | _1;
RET = _6 >> _6;
_7 = RET <= _6;
_9 = _7;
_8 = !(-2096_i16);
RET = _1 << _6;
_1 = -_6;
_3 = &_7;
_3 = &_9;
RET = _6;
_10 = !0_usize;
_1 = RET << RET;
_10 = 1_usize;
RET = _1;
RET = _1;
_11 = (*_3);
_10 = 3_usize & 16976301085637612548_usize;
Goto(bb1)
}
bb1 = {
Call(_12 = dump_var(15_usize, 5_usize, Move(_5), 7_usize, Move(_7), 11_usize, Move(_11), 9_usize, Move(_9)), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn16(mut _1: usize,mut _2: *mut [u32; 2],mut _3: bool,mut _4: [u32; 2]) -> char {
mir! {
type RET = char;
let _5: (*mut i16, u64);
let _6: [i16; 7];
let _7: f32;
let _8: f64;
let _9: [i128; 3];
let _10: bool;
let _11: char;
let _12: (&'static i64, u16, (i8,));
let _13: *mut [u32; 2];
let _14: i8;
let _15: *const &'static mut &'static mut (*mut i16, usize, char);
let _16: *const (i8,);
let _17: &'static isize;
let _18: usize;
let _19: [i128; 8];
let _20: *const (i8,);
let _21: [i64; 6];
let _22: isize;
let _23: [i128; 8];
let _24: *const *const (i8, [u32; 2], [i32; 7], u32);
let _25: u16;
let _26: u8;
let _27: f32;
let _28: i8;
let _29: u8;
let _30: Adt51;
let _31: isize;
let _32: u128;
let _33: &'static mut i16;
let _34: bool;
let _35: *mut (&'static i64, u16, (i8,));
let _36: [u32; 2];
let _37: i64;
let _38: isize;
let _39: &'static mut &'static mut isize;
let _40: f64;
let _41: isize;
let _42: *const *const (i8, [u32; 2], [i32; 7], u32);
let _43: *const [u128; 5];
let _44: &'static usize;
let _45: (&'static i64, u16, (i8,));
let _46: *mut [i32; 7];
let _47: &'static mut &'static mut isize;
let _48: i16;
let _49: f64;
let _50: &'static mut (*mut i16, usize, char);
let _51: i16;
let _52: [u64; 5];
let _53: f32;
let _54: isize;
let _55: [i64; 4];
let _56: *const Adt28;
let _57: isize;
let _58: *const &'static mut &'static mut (*mut i16, usize, char);
let _59: i128;
let _60: isize;
let _61: f64;
let _62: isize;
let _63: f64;
let _64: isize;
let _65: i64;
let _66: (&'static i64, u16, (i8,));
let _67: [bool; 6];
let _68: Adt55;
let _69: &'static mut i64;
let _70: char;
let _71: isize;
let _72: usize;
let _73: &'static (i8,);
let _74: f32;
let _75: &'static isize;
let _76: *const Adt51;
let _77: isize;
let _78: &'static mut (*mut i16, usize, char);
let _79: *const [u128; 5];
let _80: &'static mut (*mut i16, usize, char);
let _81: u128;
let _82: isize;
let _83: *const [i32; 2];
let _84: f32;
let _85: *const [u128; 5];
let _86: Adt51;
let _87: f32;
let _88: Adt58;
let _89: isize;
let _90: i64;
let _91: (Adt51, &'static i64, *const Adt28);
let _92: isize;
let _93: *const &'static usize;
let _94: f32;
let _95: (&'static mut (*mut i16, usize, char), *mut i16);
let _96: f64;
let _97: [u8; 1];
let _98: i64;
let _99: bool;
let _100: char;
let _101: *mut *const i128;
let _102: [i64; 6];
let _103: *const Adt51;
let _104: i8;
let _105: char;
let _106: *const [i32; 2];
let _107: *const Adt28;
let _108: u16;
let _109: isize;
let _110: [i64; 4];
let _111: &'static mut isize;
let _112: isize;
let _113: isize;
let _114: char;
let _115: &'static (i8,);
let _116: char;
let _117: [u64; 5];
let _118: (*mut i16, usize, char);
let _119: [bool; 6];
let _120: *mut (&'static i64, u16, (i8,));
let _121: f64;
let _122: bool;
let _123: &'static isize;
let _124: bool;
let _125: &'static i64;
let _126: (bool, u128, usize);
let _127: &'static (i8,);
let _128: [u128; 5];
let _129: (i8,);
let _130: (*const (i8, [u32; 2], [i32; 7], u32), [u8; 7]);
let _131: f32;
let _132: isize;
let _133: isize;
let _134: f32;
let _135: f32;
let _136: *const Adt51;
let _137: i16;
let _138: *const &'static usize;
let _139: Adt47;
let _140: isize;
let _141: char;
let _142: isize;
let _143: bool;
let _144: ((Adt51, &'static i64, *const Adt28), [u128; 5], i64);
let _145: *const *const (i8, [u32; 2], [i32; 7], u32);
let _146: f64;
let _147: ();
let _148: ();
{
_1 = 4_usize;
_2 = core::ptr::addr_of_mut!(_4);
(*_2) = [1357326621_u32,4137432240_u32];
(*_2) = [1576993144_u32,3232997394_u32];
_1 = 1233757106840460287_usize >> (-24_isize);
(*_2) = [528063045_u32,2517868689_u32];
(*_2) = [474149003_u32,3588917180_u32];
(*_2) = [3512690856_u32,2523460084_u32];
Goto(bb1)
}
bb1 = {
(*_2) = [1329240396_u32,3120760786_u32];
_2 = core::ptr::addr_of_mut!((*_2));
(*_2) = [1707445533_u32,1273941648_u32];
_6 = [(-741_i16),(-5477_i16),(-7005_i16),(-7505_i16),1021_i16,27356_i16,11635_i16];
_5.1 = !13161961472916207145_u64;
RET = '\u{7e25e}';
(*_2) = [3769839971_u32,2113092217_u32];
_4 = [2764377793_u32,2542699605_u32];
Goto(bb2)
}
bb2 = {
_9 = [145342451398068896821714207303369595482_i128,25141146450607710024647059518457148899_i128,134621343164796111528371905848138679748_i128];
(*_2) = [3820468663_u32,182679621_u32];
_8 = (-9617_i16) as f64;
(*_2) = [3047544086_u32,572644993_u32];
(*_2) = [3714016023_u32,3629564894_u32];
_7 = (-874349593_i32) as f32;
Goto(bb3)
}
bb3 = {
(*_2) = [3081433396_u32,2206156742_u32];
(*_2) = [1598187621_u32,2944169925_u32];
(*_2) = [122338454_u32,1332414226_u32];
(*_2) = [670660558_u32,600507680_u32];
_11 = RET;
(*_2) = [2607406699_u32,54230055_u32];
_2 = core::ptr::addr_of_mut!((*_2));
(*_2) = [690353676_u32,2331191434_u32];
_3 = !true;
_10 = _3;
(*_2) = [266550269_u32,2013038987_u32];
(*_2) = [3181088585_u32,1716146710_u32];
_3 = _10;
_12.2 = (45_i8,);
(*_2) = [902399377_u32,321231594_u32];
_7 = _1 as f32;
(*_2) = [2676992550_u32,2306865512_u32];
(*_2) = [1649780251_u32,2001586692_u32];
(*_2) = [3617698012_u32,2798855459_u32];
(*_2) = [3960204629_u32,1923043360_u32];
(*_2) = [598507185_u32,3663905604_u32];
Call((*_2) = core::intrinsics::transmute(_5.1), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
(*_2) = [3798764572_u32,3225031230_u32];
(*_2) = [2722622129_u32,4116313658_u32];
(*_2) = [3139864893_u32,163685093_u32];
(*_2) = [2270716928_u32,1009218905_u32];
_13 = core::ptr::addr_of_mut!((*_2));
_7 = _1 as f32;
(*_13) = [887825943_u32,2335524969_u32];
_4 = [2368694555_u32,3792683572_u32];
(*_2) = [105760194_u32,59651225_u32];
_6 = [(-26105_i16),28448_i16,11537_i16,20464_i16,(-26039_i16),(-24094_i16),2339_i16];
(*_2) = [2680170919_u32,1376586129_u32];
_1 = 13815242443542719408_usize | 4945451269809712039_usize;
_8 = _7 as f64;
(*_2) = [7135378_u32,625664577_u32];
(*_2) = [2883552625_u32,2067889295_u32];
(*_2) = [3602091393_u32,816548395_u32];
_11 = RET;
_12.2.0 = 6051_u16 as i8;
Call(_2 = fn17((*_2), Move(_13)), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
_20 = core::ptr::addr_of!(_12.2);
(*_20).0 = (-9223372036854775808_isize) as i8;
_12.2 = (79_i8,);
_19 = [57642773364623887876228121275641470791_i128,(-11603818407401050434496286478671654167_i128),28907361696258494800715457131568654570_i128,(-138054175731225110912258200257426295903_i128),85704161808412317646697725303421200243_i128,(-74986699614120693528239829740715715099_i128),(-149959146793008089601974270892308028677_i128),140578355407257498529423404248530604498_i128];
(*_20) = (26_i8,);
(*_20) = (68_i8,);
_21 = [6414187150745356508_i64,1106965671507256238_i64,(-1662327479777641660_i64),1252670544290171401_i64,2128201509620352944_i64,6791711149025110405_i64];
_13 = core::ptr::addr_of_mut!(_4);
RET = _11;
_12.2 = (13_i8,);
match (*_20).0 {
0 => bb4,
1 => bb6,
2 => bb7,
3 => bb8,
4 => bb9,
13 => bb11,
_ => bb10
}
}
bb6 = {
(*_2) = [3798764572_u32,3225031230_u32];
(*_2) = [2722622129_u32,4116313658_u32];
(*_2) = [3139864893_u32,163685093_u32];
(*_2) = [2270716928_u32,1009218905_u32];
_13 = core::ptr::addr_of_mut!((*_2));
_7 = _1 as f32;
(*_13) = [887825943_u32,2335524969_u32];
_4 = [2368694555_u32,3792683572_u32];
(*_2) = [105760194_u32,59651225_u32];
_6 = [(-26105_i16),28448_i16,11537_i16,20464_i16,(-26039_i16),(-24094_i16),2339_i16];
(*_2) = [2680170919_u32,1376586129_u32];
_1 = 13815242443542719408_usize | 4945451269809712039_usize;
_8 = _7 as f64;
(*_2) = [7135378_u32,625664577_u32];
(*_2) = [2883552625_u32,2067889295_u32];
(*_2) = [3602091393_u32,816548395_u32];
_11 = RET;
_12.2.0 = 6051_u16 as i8;
Call(_2 = fn17((*_2), Move(_13)), ReturnTo(bb5), UnwindUnreachable())
}
bb7 = {
(*_2) = [3081433396_u32,2206156742_u32];
(*_2) = [1598187621_u32,2944169925_u32];
(*_2) = [122338454_u32,1332414226_u32];
(*_2) = [670660558_u32,600507680_u32];
_11 = RET;
(*_2) = [2607406699_u32,54230055_u32];
_2 = core::ptr::addr_of_mut!((*_2));
(*_2) = [690353676_u32,2331191434_u32];
_3 = !true;
_10 = _3;
(*_2) = [266550269_u32,2013038987_u32];
(*_2) = [3181088585_u32,1716146710_u32];
_3 = _10;
_12.2 = (45_i8,);
(*_2) = [902399377_u32,321231594_u32];
_7 = _1 as f32;
(*_2) = [2676992550_u32,2306865512_u32];
(*_2) = [1649780251_u32,2001586692_u32];
(*_2) = [3617698012_u32,2798855459_u32];
(*_2) = [3960204629_u32,1923043360_u32];
(*_2) = [598507185_u32,3663905604_u32];
Call((*_2) = core::intrinsics::transmute(_5.1), ReturnTo(bb4), UnwindUnreachable())
}
bb8 = {
_9 = [145342451398068896821714207303369595482_i128,25141146450607710024647059518457148899_i128,134621343164796111528371905848138679748_i128];
(*_2) = [3820468663_u32,182679621_u32];
_8 = (-9617_i16) as f64;
(*_2) = [3047544086_u32,572644993_u32];
(*_2) = [3714016023_u32,3629564894_u32];
_7 = (-874349593_i32) as f32;
Goto(bb3)
}
bb9 = {
(*_2) = [1329240396_u32,3120760786_u32];
_2 = core::ptr::addr_of_mut!((*_2));
(*_2) = [1707445533_u32,1273941648_u32];
_6 = [(-741_i16),(-5477_i16),(-7005_i16),(-7505_i16),1021_i16,27356_i16,11635_i16];
_5.1 = !13161961472916207145_u64;
RET = '\u{7e25e}';
(*_2) = [3769839971_u32,2113092217_u32];
_4 = [2764377793_u32,2542699605_u32];
Goto(bb2)
}
bb10 = {
Return()
}
bb11 = {
(*_20).0 = (-81_i8) ^ (-53_i8);
Goto(bb12)
}
bb12 = {
(*_20) = ((-34_i8),);
_18 = _1;
(*_20) = ((-48_i8),);
(*_13) = [1536245255_u32,933883080_u32];
(*_20).0 = 115_i8 - 99_i8;
(*_20).0 = (-13_i8) ^ (-40_i8);
_18 = _11 as usize;
(*_13) = [694582108_u32,2412032265_u32];
(*_20) = ((-54_i8),);
_20 = core::ptr::addr_of!((*_20));
match (*_20).0 {
0 => bb4,
1 => bb10,
340282366920938463463374607431768211402 => bb14,
_ => bb13
}
}
bb13 = {
Return()
}
bb14 = {
(*_20) = ((-115_i8),);
(*_20).0 = 98_i8 ^ (-50_i8);
_14 = 177974247189325740327524660641629505446_u128 as i8;
_4 = [4063034303_u32,570455057_u32];
(*_13) = [4069754909_u32,1717578507_u32];
_27 = _7 + _7;
_12.1 = !47676_u16;
_2 = core::ptr::addr_of_mut!((*_13));
(*_2) = [3874038938_u32,3555518814_u32];
_14 = (*_20).0;
(*_20) = (_14,);
_12.2 = (_14,);
(*_20).0 = _14 - _14;
_6 = [(-29516_i16),(-9628_i16),13997_i16,(-15459_i16),6154_i16,461_i16,4626_i16];
(*_13) = [3845105001_u32,1169142133_u32];
(*_20) = (_14,);
(*_20) = (_14,);
(*_20) = (_14,);
(*_20).0 = -_14;
_22 = -(-9223372036854775808_isize);
(*_20) = (_14,);
_7 = _27 * _27;
_13 = core::ptr::addr_of_mut!((*_13));
Goto(bb15)
}
bb15 = {
(*_20).0 = _14;
(*_13) = [2679569635_u32,2685302250_u32];
_29 = !213_u8;
(*_20) = (_14,);
_6 = [(-2476_i16),(-21808_i16),(-25949_i16),31194_i16,(-7044_i16),(-13322_i16),(-23161_i16)];
(*_20).0 = _8 as i8;
(*_13) = [1094342047_u32,157904245_u32];
(*_13) = [2468072559_u32,3935879710_u32];
(*_20) = (_14,);
_30.fld3 = 4290071127_u32 >> _12.1;
(*_13) = [_30.fld3,_30.fld3];
(*_13) = [_30.fld3,_30.fld3];
(*_20).0 = _14 | _14;
(*_20).0 = !_14;
_28 = -_12.2.0;
_30.fld3 = 2069679717_u32 & 2769079283_u32;
(*_13) = [_30.fld3,_30.fld3];
(*_20) = (_14,);
_19 = [(-162728475329204104412499200374277559685_i128),8449000520166651752104039135615765381_i128,(-118121530238221551012027396494365912248_i128),87964186284767206562797817407500091059_i128,(-142203405393574274715236749518642874775_i128),(-100216583908859516507674485634287805935_i128),(-154523309645421295861021959679655528572_i128),(-148857982499365648452863529181256822188_i128)];
_9 = [(-116471070424242139067572694894095687520_i128),136111079613278042026615059489598922989_i128,100584250530598788509155304978592278811_i128];
Goto(bb16)
}
bb16 = {
_23 = [86185669395818455812268429035728973215_i128,(-81628020550233466278185986604286415717_i128),36918277870294854194275031616784061920_i128,(-19071994059435247717708571086234708505_i128),53189679817627096657935562475217382050_i128,(-129069582033510095112679926241065093887_i128),(-115875494945663684357404323866838534323_i128),(-110559957829228945185809376019396639271_i128)];
_16 = core::ptr::addr_of!((*_20));
(*_16) = (_14,);
(*_13) = [_30.fld3,_30.fld3];
(*_20) = (_14,);
(*_20) = (_14,);
_10 = (*_20).0 > (*_20).0;
(*_13) = [_30.fld3,_30.fld3];
(*_20).0 = _28;
_30.fld0.0 = -_8;
(*_13) = [_30.fld3,_30.fld3];
_20 = Move(_16);
_14 = _1 as i8;
RET = _11;
_26 = _29 >> _18;
(*_13) = [_30.fld3,_30.fld3];
(*_13) = [_30.fld3,_30.fld3];
_6 = [(-24706_i16),10632_i16,(-10257_i16),27681_i16,(-18146_i16),23050_i16,(-14405_i16)];
_37 = -(-1032137499523673529_i64);
_3 = _10 & _10;
_38 = _22 + _22;
Goto(bb17)
}
bb17 = {
(*_13) = [_30.fld3,_30.fld3];
_1 = _18 - _18;
(*_13) = [_30.fld3,_30.fld3];
(*_13) = [_30.fld3,_30.fld3];
_31 = !_38;
_5.1 = !10367753480022695234_u64;
(*_13) = [_30.fld3,_30.fld3];
RET = _11;
_27 = _26 as f32;
_40 = _12.2.0 as f64;
_30.fld0.1 = _1;
_11 = RET;
Goto(bb18)
}
bb18 = {
_30.fld0.2 = _3 ^ _10;
_30.fld3 = !490239317_u32;
_29 = !_26;
_30.fld3 = !1182642607_u32;
Goto(bb19)
}
bb19 = {
_32 = 144494125116445838744835546013766918372_u128 - 137347076235399963320776041151002009663_u128;
_25 = _12.1 >> _22;
(*_13) = [_30.fld3,_30.fld3];
(*_13) = [_30.fld3,_30.fld3];
_30.fld1 = [_32,_32,_32,_32,_32];
(*_13) = [_30.fld3,_30.fld3];
_24 = core::ptr::addr_of!(_30.fld5);
_12.1 = _29 as u16;
_30.fld0.2 = !_3;
(*_13) = [_30.fld3,_30.fld3];
(*_13) = [_30.fld3,_30.fld3];
_30.fld1 = [_32,_32,_32,_32,_32];
_20 = core::ptr::addr_of!(_45.2);
_43 = core::ptr::addr_of!(_30.fld1);
(*_20) = (_14,);
(*_43) = [_32,_32,_32,_32,_32];
(*_13) = [_30.fld3,_30.fld3];
Goto(bb20)
}
bb20 = {
_37 = !(-1657045298601122620_i64);
(*_20).0 = -_12.2.0;
_21 = [_37,_37,_37,_37,_37,_37];
_25 = _12.1;
_10 = _12.2.0 == (*_20).0;
_30.fld0 = (_40, _18, _10);
_30.fld0.0 = _26 as f64;
_8 = _40 * _30.fld0.0;
_16 = core::ptr::addr_of!(_12.2);
(*_13) = [_30.fld3,_30.fld3];
_18 = _1;
(*_16).0 = (*_20).0 >> _12.1;
(*_20).0 = (*_16).0;
(*_43) = [_32,_32,_32,_32,_32];
(*_20) = ((*_16).0,);
(*_16).0 = (*_20).0;
(*_43) = [_32,_32,_32,_32,_32];
(*_20).0 = (*_16).0;
(*_13) = [_30.fld3,_30.fld3];
(*_20).0 = _3 as i8;
_23 = [(-57747902639566955937306660907741421678_i128),94507111208645293929896295200300792132_i128,125809561701841582811914614001671328458_i128,(-86771894125446352012649366255236088583_i128),(-119398473247513564459382429334922615701_i128),37211165126562470333588393974408232410_i128,(-161148419650748899612529442486308075604_i128),110219816361128687707667468922069644937_i128];
(*_43) = [_32,_32,_32,_32,_32];
_12.2 = (*_20);
_45.2.0 = _3 as i8;
(*_16) = ((*_20).0,);
_5.0 = core::ptr::addr_of_mut!(_48);
_37 = 89637927376343691_i64 & (-2723955040721161059_i64);
_42 = core::ptr::addr_of!((*_24));
Goto(bb21)
}
bb21 = {
(*_16) = ((*_20).0,);
(*_20) = (*_16);
(*_20) = ((*_16).0,);
(*_13) = [_30.fld3,_30.fld3];
(*_16).0 = (*_20).0;
_43 = core::ptr::addr_of!((*_43));
(*_16) = (*_20);
(*_16).0 = (*_20).0 * (*_20).0;
_31 = _38 & _22;
(*_13) = [_30.fld3,_30.fld3];
_49 = _31 as f64;
_18 = 1780210592_i32 as usize;
(*_13) = [_30.fld3,_30.fld3];
(*_16) = ((*_20).0,);
_25 = _12.1 + _12.1;
_25 = !_12.1;
(*_43) = [_32,_32,_32,_32,_32];
Goto(bb22)
}
bb22 = {
(*_16) = ((*_20).0,);
(*_20).0 = (*_16).0 >> (*_16).0;
_24 = core::ptr::addr_of!((*_42));
(*_43) = [_32,_32,_32,_32,_32];
(*_16).0 = (*_20).0;
(*_13) = [_30.fld3,_30.fld3];
(*_43) = [_32,_32,_32,_32,_32];
(*_43) = [_32,_32,_32,_32,_32];
_12.1 = _25 - _25;
_7 = _27;
(*_43) = [_32,_32,_32,_32,_32];
_25 = (*_16).0 as u16;
_17 = &_31;
_12.0 = &_37;
(*_16) = ((*_20).0,);
(*_20) = (*_16);
_31 = -_38;
_9 = [161088423924034838007730731126854740167_i128,112422544857661328131694471006620768_i128,(-71836592251060589781578295564285780966_i128)];
_30.fld0.0 = _8 * _49;
(*_13) = [_30.fld3,_30.fld3];
(*_13) = [_30.fld3,_30.fld3];
Goto(bb23)
}
bb23 = {
(*_16).0 = (*_20).0;
(*_16) = ((*_20).0,);
(*_43) = [_32,_32,_32,_32,_32];
(*_13) = [_30.fld3,_30.fld3];
_42 = core::ptr::addr_of!((*_42));
(*_20) = ((*_16).0,);
(*_13) = [_30.fld3,_30.fld3];
(*_43) = [_32,_32,_32,_32,_32];
_35 = core::ptr::addr_of_mut!(_12);
_45 = (Move((*_35).0), (*_35).1, (*_16));
_24 = core::ptr::addr_of!((*_24));
_23 = [(-36423336819487592692495899928695902853_i128),38609345127970111664191534249828528151_i128,(-118343580735122079688872340286392399600_i128),(-11187089205346003381852713612428275867_i128),(-84795676142803333881223618592413732053_i128),(-84695160880237718292700485185969314745_i128),138487969564177200454515621670099714736_i128,(-54233674504646578339255782717832764095_i128)];
(*_35).0 = &_37;
(*_35).2 = ((*_20).0,);
(*_43) = [_32,_32,_32,_32,_32];
(*_35).1 = _45.1 + _25;
_41 = _31;
(*_43) = [_32,_32,_32,_32,_32];
_7 = _27;
(*_20).0 = (*_35).2.0;
(*_35).2.0 = (*_20).0;
(*_20).0 = (*_35).2.0;
_51 = _38 as i16;
(*_16) = ((*_20).0,);
Goto(bb24)
}
bb24 = {
_27 = _7;
_36 = [_30.fld3,_30.fld3];
_30.fld0 = (_8, _1, _3);
(*_16) = (*_20);
(*_20).0 = -(*_16).0;
(*_13) = [_30.fld3,_30.fld3];
(*_13) = _36;
_45.1 = (*_35).1 * _12.1;
_44 = &_30.fld0.1;
_10 = (*_44) != (*_44);
(*_43) = [_32,_32,_32,_32,_32];
(*_16) = ((*_20).0,);
(*_20) = (*_16);
(*_13) = _36;
(*_20) = (*_16);
_23 = [(-136058041742366153547936331519199524168_i128),(-71790427711213990051345515195990812698_i128),105088683022887565870317826464986408648_i128,(-33208682238150358141886923665697265212_i128),2389670788967394262107643876748737459_i128,2434801058759780380833101002837944389_i128,127162776884416439137141081959895101349_i128,(-56651264823668656374273903765176637147_i128)];
_53 = _27 * _7;
_44 = &_18;
(*_13) = _36;
(*_43) = [_32,_32,_32,_32,_32];
(*_13) = _36;
Goto(bb25)
}
bb25 = {
_45.2.0 = (*_16).0 << _37;
(*_16).0 = _30.fld0.2 as i8;
(*_20).0 = _27 as i8;
(*_43) = [_32,_32,_32,_32,_32];
(*_35).1 = !_45.1;
_52 = [_5.1,_5.1,_5.1,_5.1,_5.1];
(*_13) = [_30.fld3,_30.fld3];
_7 = -_27;
(*_20) = (*_16);
(*_43) = [_32,_32,_32,_32,_32];
(*_16) = ((*_20).0,);
(*_20) = (*_16);
(*_16) = ((*_20).0,);
_54 = !_31;
_8 = _40 + _49;
(*_16) = (*_20);
(*_16) = (*_20);
_54 = _41 * _41;
(*_16).0 = (*_20).0 + (*_20).0;
Goto(bb26)
}
bb26 = {
(*_16).0 = (*_20).0 | (*_20).0;
(*_16) = (*_20);
(*_43) = [_32,_32,_32,_32,_32];
(*_35).1 = _45.1 & _45.1;
(*_35).1 = !_45.1;
(*_43) = [_32,_32,_32,_32,_32];
(*_20).0 = (*_16).0 >> (*_35).1;
_45.1 = !(*_35).1;
_63 = _51 as f64;
_48 = -_51;
(*_35).1 = _45.1 & _25;
(*_13) = _36;
_12.2.0 = (*_20).0 & (*_20).0;
Goto(bb27)
}
bb27 = {
(*_43) = [_32,_32,_32,_32,_32];
(*_13) = [_30.fld3,_30.fld3];
(*_16).0 = (*_20).0 | (*_20).0;
_30.fld4 = [(-164168979_i32),(-1558897232_i32)];
_66.2 = ((*_20).0,);
_55 = [_37,_37,_37,_37];
(*_35).1 = _45.1;
(*_43) = [_32,_32,_32,_32,_32];
_59 = 50032225956448040927930282981645873340_i128 << (*_16).0;
(*_43) = [_32,_32,_32,_32,_32];
_55 = [_37,_37,_37,_37];
_30.fld4 = [1361851996_i32,(-256870040_i32)];
_45.1 = (*_35).1 ^ (*_35).1;
_41 = _54 * _54;
_61 = -_63;
(*_13) = [_30.fld3,_30.fld3];
_5.0 = core::ptr::addr_of_mut!(_51);
(*_35).1 = _59 as u16;
_67 = [_30.fld0.2,_3,_30.fld0.2,_30.fld0.2,_30.fld0.2,_30.fld0.2];
_51 = _48 & _48;
(*_16) = ((*_20).0,);
(*_16).0 = (*_20).0 | (*_20).0;
(*_43) = [_32,_32,_32,_32,_32];
Goto(bb28)
}
bb28 = {
(*_13) = [_30.fld3,_30.fld3];
_34 = (*_16).0 != _45.2.0;
(*_35).1 = _63 as u16;
Goto(bb29)
}
bb29 = {
_30.fld1 = [_32,_32,_32,_32,_32];
(*_43) = [_32,_32,_32,_32,_32];
(*_20) = (*_16);
(*_20) = (*_16);
Goto(bb30)
}
bb30 = {
_66.2 = ((*_20).0,);
(*_13) = [_30.fld3,_30.fld3];
(*_35).1 = !_45.1;
_6 = [_51,_48,_48,_51,_48,_51,_51];
_49 = _8;
_3 = _34 & _34;
(*_20) = (*_16);
_3 = !_34;
_43 = core::ptr::addr_of!((*_43));
(*_16).0 = (*_20).0 * (*_20).0;
_24 = core::ptr::addr_of!((*_42));
Goto(bb31)
}
bb31 = {
(*_20).0 = (*_16).0 | (*_16).0;
_63 = _31 as f64;
(*_16).0 = (*_20).0;
(*_35).1 = _45.1 + _45.1;
(*_20) = ((*_16).0,);
_75 = &_22;
_72 = !(*_44);
(*_16) = (*_20);
_56 = core::ptr::addr_of!(_30.fld2);
_30.fld0 = (_49, _72, _34);
Goto(bb32)
}
bb32 = {
(*_20).0 = -(*_16).0;
(*_20) = (*_16);
(*_16).0 = (*_20).0 << (*_20).0;
(*_20) = ((*_16).0,);
_76 = core::ptr::addr_of!(_30);
(*_76).fld2 = Adt28::Variant0 { fld0: (*_76).fld0.2,fld1: RET,fld2: (*_76).fld0,fld3: (-1410766369_i32),fld4: (*_76).fld0.0 };
place!(Field::<i32>(Variant((*_56), 0), 3)) = 664043782_i32 >> (*_20).0;
_22 = _41 * _54;
place!(Field::<(f64, usize, bool)>(Variant((*_76).fld2, 0), 2)) = (*_76).fld0;
(*_76).fld0.0 = Field::<(f64, usize, bool)>(Variant((*_76).fld2, 0), 2).0;
(*_76).fld0 = (Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).0, _1, Field::<bool>(Variant((*_56), 0), 0));
(*_56) = Adt28::Variant0 { fld0: (*_76).fld0.2,fld1: _11,fld2: (*_76).fld0,fld3: (-2083519954_i32),fld4: (*_76).fld0.0 };
Goto(bb33)
}
bb33 = {
(*_76).fld4 = [589555538_i32,(-1804768248_i32)];
_43 = core::ptr::addr_of!((*_43));
(*_76).fld3 = 3123886714_u32;
(*_76).fld6 = core::ptr::addr_of_mut!(_48);
(*_56) = Adt28::Variant0 { fld0: (*_76).fld0.2,fld1: RET,fld2: (*_76).fld0,fld3: 1833206281_i32,fld4: _49 };
(*_76).fld0.0 = -Field::<f64>(Variant((*_56), 0), 4);
(*_76).fld0 = Field::<(f64, usize, bool)>(Variant((*_56), 0), 2);
(*_20) = (*_16);
(*_76).fld4 = [1944737846_i32,362949488_i32];
place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)) = (*_76).fld0;
place!(Field::<char>(Variant((*_56), 0), 1)) = _11;
(*_43) = [_32,_32,_32,_32,_32];
place!(Field::<i32>(Variant((*_56), 0), 3)) = (-1598510469_i32) + 1864168616_i32;
(*_76).fld0.0 = -Field::<f64>(Variant((*_56), 0), 4);
(*_76).fld4 = [Field::<i32>(Variant((*_56), 0), 3),Field::<i32>(Variant((*_56), 0), 3)];
Goto(bb34)
}
bb34 = {
place!(Field::<i32>(Variant((*_56), 0), 3)) = 1920784375_i32;
(*_76).fld0 = Field::<(f64, usize, bool)>(Variant((*_56), 0), 2);
place!(Field::<bool>(Variant((*_56), 0), 0)) = !Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).2;
place!(Field::<f64>(Variant((*_56), 0), 4)) = -Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).0;
place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)).0 = (*_76).fld3 as f64;
place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)).2 = _30.fld0.2 < Field::<bool>(Variant((*_56), 0), 0);
_56 = core::ptr::addr_of!((*_56));
(*_16) = ((*_20).0,);
(*_20) = ((*_16).0,);
(*_76).fld4 = [Field::<i32>(Variant((*_56), 0), 3),Field::<i32>(Variant((*_56), 0), 3)];
(*_43) = [_32,_32,_32,_32,_32];
(*_76).fld0.1 = !(*_44);
(*_76).fld3 = !4217188522_u32;
Goto(bb35)
}
bb35 = {
(*_76).fld1 = [_32,_32,_32,_32,_32];
(*_76).fld1 = [_32,_32,_32,_32,_32];
(*_76).fld0.0 = Field::<f64>(Variant((*_56), 0), 4) + Field::<f64>(Variant((*_56), 0), 4);
_66 = (Move((*_35).0), (*_35).1, (*_20));
place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)) = (*_76).fld0;
place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)).0 = Field::<f64>(Variant((*_56), 0), 4) + (*_76).fld0.0;
place!(Field::<i32>(Variant((*_56), 0), 3)) = 1449935918_i32 << (*_35).1;
place!(Field::<char>(Variant((*_56), 0), 1)) = _11;
place!(Field::<bool>(Variant((*_56), 0), 0)) = (*_76).fld0.0 != Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).0;
(*_76).fld4 = [Field::<i32>(Variant((*_56), 0), 3),Field::<i32>(Variant((*_56), 0), 3)];
place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)).1 = (*_76).fld0.1;
_67 = [(*_76).fld0.2,Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).2,Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).2,(*_76).fld0.2,(*_76).fld0.2,Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).2];
_84 = _53;
(*_20) = (*_16);
_91.0.fld6 = core::ptr::addr_of_mut!(_51);
_51 = _48 | _48;
(*_76).fld4 = [Field::<i32>(Variant((*_56), 0), 3),Field::<i32>(Variant((*_56), 0), 3)];
place!(Field::<char>(Variant((*_56), 0), 1)) = _11;
place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)).2 = (*_76).fld0.2 ^ (*_76).fld0.2;
(*_76).fld0.2 = Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).2;
place!(Field::<char>(Variant((*_56), 0), 1)) = RET;
Goto(bb36)
}
bb36 = {
_43 = core::ptr::addr_of!((*_76).fld1);
place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)).0 = (*_76).fld0.0;
_77 = _22;
_92 = !_77;
_64 = _41;
(*_76).fld0.1 = Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).1 + Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).1;
_49 = Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).0 * (*_76).fld0.0;
_33 = &mut _48;
(*_13) = _36;
Goto(bb37)
}
bb37 = {
place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)) = (*_76).fld0;
_94 = -_7;
(*_76).fld6 = core::ptr::addr_of_mut!((*_33));
_62 = _64 * _77;
_7 = _94 * _84;
place!(Field::<bool>(Variant((*_56), 0), 0)) = (*_76).fld0.2 & Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).2;
(*_76).fld0 = Field::<(f64, usize, bool)>(Variant((*_56), 0), 2);
place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)).1 = (*_44);
(*_16).0 = -(*_20).0;
(*_76).fld0.1 = Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).1 & Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).1;
(*_76).fld4 = [Field::<i32>(Variant((*_56), 0), 3),Field::<i32>(Variant((*_56), 0), 3)];
(*_16).0 = _62 as i8;
_95.1 = core::ptr::addr_of_mut!((*_33));
(*_16) = ((*_20).0,);
_53 = _7;
(*_13) = _36;
(*_16).0 = (*_20).0;
(*_76).fld6 = Move(_91.0.fld6);
(*_76).fld0.1 = (*_44);
place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)).1 = (*_76).fld0.1;
Call(place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)).0 = core::intrinsics::fmaf64((*_76).fld0.0, Field::<f64>(Variant((*_56), 0), 4), (*_76).fld0.0), ReturnTo(bb38), UnwindUnreachable())
}
bb38 = {
_30.fld2 = Adt28::Variant0 { fld0: (*_76).fld0.2,fld1: _11,fld2: (*_76).fld0,fld3: 187813333_i32,fld4: (*_76).fld0.0 };
(*_20) = ((*_16).0,);
place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)).1 = (*_44);
(*_76).fld3 = !4056086466_u32;
_91.0.fld1 = [_32,_32,_32,_32,_32];
place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)).1 = !(*_76).fld0.1;
(*_20).0 = _66.2.0 | (*_16).0;
place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)).1 = (*_44);
place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)).2 = !(*_76).fld0.2;
(*_76).fld0.1 = (*_44) - Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).1;
place!(Field::<bool>(Variant((*_56), 0), 0)) = (*_16).0 == (*_16).0;
_45.2.0 = (*_16).0 << (*_16).0;
place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)).1 = Field::<f64>(Variant((*_56), 0), 4) as usize;
(*_76).fld0.0 = 767353162_i32 as f64;
(*_76).fld0.1 = Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).1 & Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).1;
(*_76).fld0.0 = -Field::<f64>(Variant((*_56), 0), 4);
Goto(bb39)
}
bb39 = {
(*_35).1 = _45.1 + _66.1;
_97 = [_26];
(*_33) = Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).2 as i16;
place!(Field::<i32>(Variant((*_56), 0), 3)) = 1462767124_i32 + (-2017752490_i32);
(*_43) = [_32,_32,_32,_32,_32];
(*_35).0 = &_37;
_93 = core::ptr::addr_of!(_44);
_86.fld6 = core::ptr::addr_of_mut!((*_33));
place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)).0 = _5.1 as f64;
(*_33) = (*_76).fld3 as i16;
Goto(bb40)
}
bb40 = {
(*_76).fld1 = [_32,_32,_32,_32,_32];
(*_76).fld0 = Field::<(f64, usize, bool)>(Variant((*_56), 0), 2);
(*_76).fld0 = (Field::<f64>(Variant((*_56), 0), 4), Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).1, Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).2);
(*_76).fld0.0 = _8 * Field::<f64>(Variant((*_56), 0), 4);
_108 = !(*_35).1;
(*_76).fld0.2 = Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).2;
(*_56) = Adt28::Variant0 { fld0: _34,fld1: RET,fld2: (*_76).fld0,fld3: (-1148996205_i32),fld4: (*_76).fld0.0 };
_105 = Field::<char>(Variant((*_56), 0), 1);
place!(Field::<char>(Variant((*_56), 0), 1)) = _105;
(*_20).0 = (*_33) as i8;
(*_16).0 = 1474210023_i32 as i8;
place!(Field::<f64>(Variant((*_56), 0), 4)) = _8;
(*_20).0 = _66.2.0;
(*_16).0 = _66.2.0 + (*_20).0;
place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)) = (_8, (*_76).fld0.1, Field::<bool>(Variant((*_56), 0), 0));
_30.fld0.2 = Field::<bool>(Variant((*_56), 0), 0) & Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).2;
(*_16).0 = (*_20).0 * (*_20).0;
Call((*_76).fld0.1 = core::intrinsics::transmute((*_44)), ReturnTo(bb41), UnwindUnreachable())
}
bb41 = {
place!(Field::<char>(Variant((*_56), 0), 1)) = RET;
_118.0 = Move((*_76).fld6);
Goto(bb42)
}
bb42 = {
(*_76).fld1 = [_32,_32,_32,_32,_32];
(*_13) = _36;
(*_93) = &_30.fld0.1;
_118.1 = !Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).1;
Goto(bb43)
}
bb43 = {
_70 = Field::<char>(Variant((*_56), 0), 1);
_76 = core::ptr::addr_of!(_86);
(*_76).fld3 = _30.fld3 & _30.fld3;
(*_76).fld0.2 = !Field::<bool>(Variant((*_56), 0), 0);
_19 = [_59,_59,_59,_59,_59,_59,_59,_59];
place!(Field::<i32>(Variant((*_56), 0), 3)) = 1695236860_i32 + 974088455_i32;
(*_76).fld0.0 = _37 as f64;
(*_20).0 = _26 as i8;
place!(Field::<f64>(Variant((*_56), 0), 4)) = -Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).0;
place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)).1 = !(*_44);
place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)).0 = Field::<f64>(Variant((*_56), 0), 4) + Field::<f64>(Variant((*_56), 0), 4);
_105 = Field::<char>(Variant((*_56), 0), 1);
_86.fld2 = (*_56);
(*_76).fld0 = Field::<(f64, usize, bool)>(Variant((*_56), 0), 2);
_86.fld1 = [_32,_32,_32,_32,_32];
place!(Field::<(f64, usize, bool)>(Variant((*_76).fld2, 0), 2)).1 = !Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).1;
(*_76).fld4 = [Field::<i32>(Variant((*_56), 0), 3),Field::<i32>(Variant((*_56), 0), 3)];
place!(Field::<char>(Variant((*_56), 0), 1)) = _11;
place!(Field::<i32>(Variant((*_76).fld2, 0), 3)) = (*_76).fld3 as i32;
place!(Field::<(f64, usize, bool)>(Variant((*_76).fld2, 0), 2)).0 = Field::<i32>(Variant((*_76).fld2, 0), 3) as f64;
_18 = _118.1 - _118.1;
Goto(bb44)
}
bb44 = {
place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)).2 = _108 != _12.1;
_30.fld2 = Adt28::Variant0 { fld0: Field::<(f64, usize, bool)>(Variant((*_76).fld2, 0), 2).2,fld1: Field::<char>(Variant((*_76).fld2, 0), 1),fld2: (*_76).fld0,fld3: Field::<i32>(Variant((*_76).fld2, 0), 3),fld4: (*_76).fld0.0 };
place!(Field::<bool>(Variant((*_76).fld2, 0), 0)) = !(*_76).fld0.2;
_113 = _77 ^ _41;
_103 = core::ptr::addr_of!((*_76));
(*_103).fld6 = Move(_5.0);
(*_76).fld6 = core::ptr::addr_of_mut!((*_33));
_91.0.fld0.1 = !_18;
_127 = &(*_16);
place!(Field::<i32>(Variant((*_76).fld2, 0), 3)) = _29 as i32;
place!(Field::<i32>(Variant((*_56), 0), 3)) = Field::<i32>(Variant((*_76).fld2, 0), 3) * Field::<i32>(Variant((*_76).fld2, 0), 3);
place!(Field::<(f64, usize, bool)>(Variant((*_103).fld2, 0), 2)) = (*_103).fld0;
place!(Field::<f64>(Variant((*_76).fld2, 0), 4)) = (*_76).fld0.0;
(*_33) = _51 & _51;
place!(Field::<(f64, usize, bool)>(Variant((*_76).fld2, 0), 2)).0 = (*_127).0 as f64;
(*_33) = -_51;
(*_16) = (_66.2.0,);
place!(Field::<(f64, usize, bool)>(Variant((*_76).fld2, 0), 2)) = (*_103).fld0;
Goto(bb45)
}
bb45 = {
(*_20).0 = (*_16).0;
place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)).1 = (*_103).fld0.1 >> (*_20).0;
(*_76).fld6 = core::ptr::addr_of_mut!((*_33));
(*_16) = ((*_20).0,);
_24 = core::ptr::addr_of!((*_42));
(*_103).fld3 = !_30.fld3;
place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)).2 = !Field::<(f64, usize, bool)>(Variant((*_76).fld2, 0), 2).2;
place!(Field::<f64>(Variant((*_76).fld2, 0), 4)) = (*_16).0 as f64;
_103 = core::ptr::addr_of!(_86);
place!(Field::<bool>(Variant((*_76).fld2, 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_103).fld2, 0), 2).2 & Field::<(f64, usize, bool)>(Variant((*_76).fld2, 0), 2).2;
(*_76).fld0.1 = Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).1 * Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).1;
(*_76).fld4 = _30.fld4;
(*_76).fld6 = core::ptr::addr_of_mut!((*_33));
place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)) = (Field::<f64>(Variant((*_76).fld2, 0), 4), (*_76).fld0.1, (*_76).fld0.2);
place!(Field::<f64>(Variant(_86.fld2, 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_76).fld2, 0), 2).0 - Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).0;
(*_76).fld0.0 = Field::<f64>(Variant((*_103).fld2, 0), 4);
place!(Field::<f64>(Variant((*_103).fld2, 0), 4)) = (*_76).fld0.0 - Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).0;
place!(Field::<i32>(Variant(_30.fld2, 0), 3)) = -Field::<i32>(Variant((*_103).fld2, 0), 3);
(*_56) = (*_76).fld2;
place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)) = ((*_76).fld0.0, (*_76).fld0.1, Field::<bool>(Variant((*_56), 0), 0));
Goto(bb46)
}
bb46 = {
place!(Field::<i32>(Variant((*_76).fld2, 0), 3)) = !Field::<i32>(Variant((*_56), 0), 3);
(*_13) = [(*_76).fld3,(*_76).fld3];
place!(Field::<(f64, usize, bool)>(Variant((*_103).fld2, 0), 2)).1 = Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).1 - (*_76).fld0.1;
(*_16).0 = _45.1 as i8;
(*_76).fld0.2 = !Field::<bool>(Variant((*_76).fld2, 0), 0);
_97 = [_26];
(*_76).fld1 = [_32,_32,_32,_32,_32];
(*_76).fld3 = !_30.fld3;
place!(Field::<bool>(Variant((*_76).fld2, 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_76).fld2, 0), 2).1 > Field::<(f64, usize, bool)>(Variant((*_103).fld2, 0), 2).1;
place!(Field::<f64>(Variant((*_76).fld2, 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).0 * Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).0;
_69 = &mut _37;
(*_76).fld4 = [Field::<i32>(Variant((*_76).fld2, 0), 3),Field::<i32>(Variant((*_76).fld2, 0), 3)];
_108 = (*_35).1;
(*_16) = ((*_20).0,);
place!(Field::<(f64, usize, bool)>(Variant((*_103).fld2, 0), 2)).2 = Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).2 >= (*_76).fld0.2;
place!(Field::<(f64, usize, bool)>(Variant((*_103).fld2, 0), 2)).1 = (*_76).fld0.1 & Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).1;
Goto(bb47)
}
bb47 = {
_126.2 = Field::<(f64, usize, bool)>(Variant((*_103).fld2, 0), 2).1 | Field::<(f64, usize, bool)>(Variant((*_76).fld2, 0), 2).1;
place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)) = (Field::<f64>(Variant((*_76).fld2, 0), 4), Field::<(f64, usize, bool)>(Variant((*_76).fld2, 0), 2).1, Field::<(f64, usize, bool)>(Variant((*_76).fld2, 0), 2).2);
place!(Field::<(f64, usize, bool)>(Variant((*_103).fld2, 0), 2)).2 = !Field::<bool>(Variant((*_76).fld2, 0), 0);
_86.fld3 = _30.fld3 & _30.fld3;
(*_76).fld4 = [Field::<i32>(Variant((*_56), 0), 3),Field::<i32>(Variant((*_56), 0), 3)];
_83 = core::ptr::addr_of!((*_76).fld4);
place!(Field::<(f64, usize, bool)>(Variant((*_103).fld2, 0), 2)) = (Field::<f64>(Variant((*_56), 0), 4), (*_76).fld0.1, Field::<bool>(Variant((*_76).fld2, 0), 0));
(*_13) = _36;
(*_76).fld6 = core::ptr::addr_of_mut!((*_33));
(*_20).0 = -(*_16).0;
(*_76).fld0 = (Field::<(f64, usize, bool)>(Variant((*_76).fld2, 0), 2).0, Field::<(f64, usize, bool)>(Variant((*_103).fld2, 0), 2).1, Field::<bool>(Variant((*_76).fld2, 0), 0));
place!(Field::<bool>(Variant((*_76).fld2, 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_76).fld2, 0), 2).2 >= Field::<bool>(Variant((*_56), 0), 0);
(*_16) = ((*_20).0,);
_106 = core::ptr::addr_of!((*_83));
(*_76).fld1 = [_32,_32,_32,_32,_32];
(*_76).fld2 = (*_56);
_115 = &(*_16);
(*_76).fld0 = (Field::<f64>(Variant((*_76).fld2, 0), 4), Field::<(f64, usize, bool)>(Variant((*_76).fld2, 0), 2).1, Field::<(f64, usize, bool)>(Variant(_86.fld2, 0), 2).2);
Goto(bb48)
}
bb48 = {
place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)).2 = Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).0 != Field::<f64>(Variant((*_76).fld2, 0), 4);
place!(Field::<(f64, usize, bool)>(Variant((*_76).fld2, 0), 2)).1 = (*_76).fld0.1;
(*_20) = ((*_115).0,);
place!(Field::<f64>(Variant((*_56), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).0 * Field::<(f64, usize, bool)>(Variant((*_76).fld2, 0), 2).0;
(*_83) = _30.fld4;
_14 = (*_16).0 ^ (*_115).0;
place!(Field::<(f64, usize, bool)>(Variant((*_76).fld2, 0), 2)).0 = Field::<f64>(Variant((*_56), 0), 4) + Field::<f64>(Variant(_30.fld2, 0), 4);
place!(Field::<char>(Variant(_86.fld2, 0), 1)) = Field::<char>(Variant((*_56), 0), 1);
_91.0.fld0 = ((*_76).fld0.0, Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).1, (*_76).fld0.2);
place!(Field::<i32>(Variant((*_56), 0), 3)) = Field::<i32>(Variant((*_76).fld2, 0), 3);
_30.fld6 = core::ptr::addr_of_mut!((*_33));
(*_56) = Adt28::Variant0 { fld0: Field::<bool>(Variant((*_76).fld2, 0), 0),fld1: _11,fld2: Field::<(f64, usize, bool)>(Variant((*_76).fld2, 0), 2),fld3: Field::<i32>(Variant(_86.fld2, 0), 3),fld4: (*_76).fld0.0 };
(*_76).fld0 = (Field::<f64>(Variant((*_76).fld2, 0), 4), Field::<(f64, usize, bool)>(Variant(_86.fld2, 0), 2).1, Field::<bool>(Variant((*_56), 0), 0));
place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)).0 = (*_76).fld0.0 + (*_76).fld0.0;
place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)).0 = Field::<(f64, usize, bool)>(Variant((*_76).fld2, 0), 2).0 * Field::<f64>(Variant((*_56), 0), 4);
_45.2 = (*_16);
(*_83) = [Field::<i32>(Variant((*_56), 0), 3),Field::<i32>(Variant((*_76).fld2, 0), 3)];
_44 = &(*_76).fld0.1;
Goto(bb49)
}
bb49 = {
_104 = (*_33) as i8;
place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)).2 = Field::<(f64, usize, bool)>(Variant((*_76).fld2, 0), 2).2 >= Field::<(f64, usize, bool)>(Variant((*_76).fld2, 0), 2).2;
(*_13) = _36;
_71 = _26 as isize;
_5.0 = Move((*_76).fld6);
_102 = [(*_69),(*_69),(*_69),(*_69),(*_69),(*_69)];
(*_76).fld3 = _30.fld3 + _30.fld3;
place!(Field::<f64>(Variant((*_56), 0), 4)) = Field::<(f64, usize, bool)>(Variant((*_56), 0), 2).0;
(*_35).1 = _45.1;
(*_76).fld3 = _92 as u32;
_144.0.0.fld4 = _30.fld4;
place!(Field::<(f64, usize, bool)>(Variant((*_76).fld2, 0), 2)).1 = (*_76).fld0.1;
(*_76).fld4 = [Field::<i32>(Variant((*_56), 0), 3),Field::<i32>(Variant(_86.fld2, 0), 3)];
(*_33) = -_51;
place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)).2 = Field::<f64>(Variant((*_56), 0), 4) == Field::<f64>(Variant((*_56), 0), 4);
place!(Field::<(f64, usize, bool)>(Variant((*_56), 0), 2)).2 = Field::<(f64, usize, bool)>(Variant(_86.fld2, 0), 2).2 | Field::<(f64, usize, bool)>(Variant((*_76).fld2, 0), 2).2;
place!(Field::<f64>(Variant((*_76).fld2, 0), 4)) = -Field::<f64>(Variant((*_56), 0), 4);
(*_76).fld6 = core::ptr::addr_of_mut!(_51);
_85 = core::ptr::addr_of!((*_76).fld1);
place!(Field::<i32>(Variant((*_76).fld2, 0), 3)) = (*_44) as i32;
place!(Field::<bool>(Variant((*_76).fld2, 0), 0)) = (*_76).fld0.2 & Field::<(f64, usize, bool)>(Variant((*_76).fld2, 0), 2).2;
Goto(bb50)
}
bb50 = {
Call(_147 = dump_var(16_usize, 48_usize, Move(_48), 26_usize, Move(_26), 37_usize, Move(_37), 25_usize, Move(_25)), ReturnTo(bb51), UnwindUnreachable())
}
bb51 = {
Call(_147 = dump_var(16_usize, 108_usize, Move(_108), 72_usize, Move(_72), 4_usize, Move(_4), 64_usize, Move(_64)), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
Call(_147 = dump_var(16_usize, 9_usize, Move(_9), 113_usize, Move(_113), 3_usize, Move(_3), 31_usize, Move(_31)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Call(_147 = dump_var(16_usize, 6_usize, Move(_6), 92_usize, Move(_92), 23_usize, Move(_23), 18_usize, Move(_18)), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Call(_147 = dump_var(16_usize, 59_usize, Move(_59), 14_usize, Move(_14), 77_usize, Move(_77), 28_usize, Move(_28)), ReturnTo(bb55), UnwindUnreachable())
}
bb55 = {
Call(_147 = dump_var(16_usize, 34_usize, Move(_34), 71_usize, Move(_71), 148_usize, _148, 148_usize, _148), ReturnTo(bb56), UnwindUnreachable())
}
bb56 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn17(mut _1: [u32; 2],mut _2: *mut [u32; 2]) -> *mut [u32; 2] {
mir! {
type RET = *mut [u32; 2];
let _3: bool;
let _4: i64;
let _5: *mut (&'static i64, u16, (i8,));
let _6: (Adt55, *const (i8,));
let _7: u64;
let _8: *const [i32; 2];
let _9: *mut *const i128;
let _10: isize;
let _11: &'static &'static isize;
let _12: isize;
let _13: f64;
let _14: f64;
let _15: u128;
let _16: i128;
let _17: i8;
let _18: bool;
let _19: *const &'static mut &'static mut (*mut i16, usize, char);
let _20: (*mut i16, u64);
let _21: f64;
let _22: &'static mut i16;
let _23: &'static mut &'static mut (*mut i16, usize, char);
let _24: bool;
let _25: bool;
let _26: f64;
let _27: char;
let _28: isize;
let _29: *mut (&'static i64, u16, (i8,));
let _30: u128;
let _31: Adt58;
let _32: *const Adt28;
let _33: u32;
let _34: &'static bool;
let _35: &'static mut i16;
let _36: *mut (&'static i64, u16, (i8,));
let _37: bool;
let _38: &'static mut &'static mut (*mut i16, usize, char);
let _39: (i8, [u32; 2], [i32; 7], u32);
let _40: bool;
let _41: [i32; 2];
let _42: *mut &'static i64;
let _43: (Adt55, *const (i8,));
let _44: isize;
let _45: Adt84;
let _46: *mut *const i128;
let _47: bool;
let _48: [u128; 5];
let _49: &'static *const (i8, [u32; 2], [i32; 7], u32);
let _50: &'static mut i16;
let _51: *const (i8,);
let _52: *const [i32; 2];
let _53: u32;
let _54: bool;
let _55: i32;
let _56: &'static *const (i8, [u32; 2], [i32; 7], u32);
let _57: &'static mut &'static mut (*mut i16, usize, char);
let _58: i128;
let _59: u128;
let _60: *const Adt51;
let _61: bool;
let _62: isize;
let _63: usize;
let _64: f64;
let _65: *const (i8, [u32; 2], [i32; 7], u32);
let _66: ((*mut i16, u64), bool, [u32; 2]);
let _67: f32;
let _68: [u8; 7];
let _69: u16;
let _70: &'static (i8,);
let _71: *const &'static mut &'static mut (*mut i16, usize, char);
let _72: &'static &'static isize;
let _73: &'static &'static isize;
let _74: &'static mut i16;
let _75: (&'static mut (*mut i16, usize, char), *mut i16);
let _76: *const &'static usize;
let _77: bool;
let _78: &'static mut i64;
let _79: (f64, usize, bool);
let _80: [i64; 6];
let _81: f64;
let _82: bool;
let _83: i16;
let _84: *const [u128; 5];
let _85: Adt58;
let _86: &'static isize;
let _87: u64;
let _88: f32;
let _89: [i16; 7];
let _90: Adt58;
let _91: u64;
let _92: &'static mut (*mut i16, usize, char);
let _93: i64;
let _94: i32;
let _95: Adt64;
let _96: *const &'static *const (i8, [u32; 2], [i32; 7], u32);
let _97: isize;
let _98: [u8; 7];
let _99: i64;
let _100: bool;
let _101: ();
let _102: ();
{
_2 = core::ptr::addr_of_mut!(_1);
RET = core::ptr::addr_of_mut!((*_2));
(*RET) = [4240485861_u32,41661251_u32];
(*RET) = [3292701311_u32,1211628121_u32];
(*RET) = [2448125172_u32,4107944009_u32];
(*_2) = [4197836608_u32,3255346784_u32];
RET = core::ptr::addr_of_mut!((*_2));
(*RET) = [653707986_u32,2936704187_u32];
(*_2) = [2679740027_u32,4065733922_u32];
_2 = core::ptr::addr_of_mut!((*_2));
(*_2) = [3671710396_u32,1735012557_u32];
(*_2) = [3102250716_u32,217908998_u32];
(*_2) = [1914205372_u32,3309647100_u32];
(*_2) = [3082645277_u32,1404509035_u32];
_7 = !3718390247740371105_u64;
_3 = _7 >= _7;
(*_2) = [1387768461_u32,3040053391_u32];
_1 = [40102523_u32,1900765715_u32];
Goto(bb1)
}
bb1 = {
_4 = 3256907550801860329_i64 * 4816523933517919556_i64;
(*_2) = [3652725369_u32,2028326019_u32];
_7 = 8750860359073482370_u64 ^ 12449470478276793649_u64;
(*_2) = [1205660203_u32,1552039244_u32];
(*_2) = [3480901197_u32,3105331495_u32];
(*_2) = [1345397801_u32,2906560222_u32];
(*_2) = [354493339_u32,212999875_u32];
(*_2) = [801471631_u32,3202843997_u32];
(*_2) = [3582933477_u32,3983975343_u32];
(*_2) = [4191408113_u32,1258321880_u32];
_4 = !(-8618033196764253175_i64);
(*_2) = [3051797143_u32,1911626709_u32];
(*_2) = [754263934_u32,662118724_u32];
(*_2) = [3370351621_u32,3937354066_u32];
(*_2) = [3023625674_u32,4179953009_u32];
(*_2) = [2911672571_u32,1976859125_u32];
Goto(bb2)
}
bb2 = {
(*_2) = [924357844_u32,3110165380_u32];
_4 = (-7633049778517451680_i64) | (-1306198768960863522_i64);
(*_2) = [1664862145_u32,1789583191_u32];
(*_2) = [1554162066_u32,468519240_u32];
(*_2) = [2447417878_u32,424597191_u32];
_7 = 14616_u16 as u64;
_10 = 4_usize as isize;
(*_2) = [200015368_u32,1164025636_u32];
(*_2) = [2997254941_u32,4202138483_u32];
(*_2) = [3973390448_u32,1476809367_u32];
_10 = 56_isize << _4;
_1 = [291511313_u32,3898120676_u32];
(*_2) = [361251448_u32,1143647687_u32];
(*_2) = [949132902_u32,3267385956_u32];
(*_2) = [359942546_u32,1246448254_u32];
_4 = 1959413543449163147_i64 << _10;
(*_2) = [2423094106_u32,1699440275_u32];
(*_2) = [3165186664_u32,769789145_u32];
(*_2) = [1151235534_u32,1514826962_u32];
(*_2) = [3997877612_u32,3697572852_u32];
Goto(bb3)
}
bb3 = {
(*_2) = [4020268261_u32,4142023033_u32];
_3 = _10 >= _10;
_10 = 9223372036854775807_isize;
(*_2) = [721102740_u32,2898438921_u32];
(*_2) = [3235548034_u32,2648895628_u32];
_3 = !false;
Goto(bb4)
}
bb4 = {
(*_2) = [1294130533_u32,2159668185_u32];
(*_2) = [1497049239_u32,1945144086_u32];
(*_2) = [2314506135_u32,2977977951_u32];
match _10 {
0 => bb5,
9223372036854775807 => bb7,
_ => bb6
}
}
bb5 = {
_4 = 3256907550801860329_i64 * 4816523933517919556_i64;
(*_2) = [3652725369_u32,2028326019_u32];
_7 = 8750860359073482370_u64 ^ 12449470478276793649_u64;
(*_2) = [1205660203_u32,1552039244_u32];
(*_2) = [3480901197_u32,3105331495_u32];
(*_2) = [1345397801_u32,2906560222_u32];
(*_2) = [354493339_u32,212999875_u32];
(*_2) = [801471631_u32,3202843997_u32];
(*_2) = [3582933477_u32,3983975343_u32];
(*_2) = [4191408113_u32,1258321880_u32];
_4 = !(-8618033196764253175_i64);
(*_2) = [3051797143_u32,1911626709_u32];
(*_2) = [754263934_u32,662118724_u32];
(*_2) = [3370351621_u32,3937354066_u32];
(*_2) = [3023625674_u32,4179953009_u32];
(*_2) = [2911672571_u32,1976859125_u32];
Goto(bb2)
}
bb6 = {
(*_2) = [924357844_u32,3110165380_u32];
_4 = (-7633049778517451680_i64) | (-1306198768960863522_i64);
(*_2) = [1664862145_u32,1789583191_u32];
(*_2) = [1554162066_u32,468519240_u32];
(*_2) = [2447417878_u32,424597191_u32];
_7 = 14616_u16 as u64;
_10 = 4_usize as isize;
(*_2) = [200015368_u32,1164025636_u32];
(*_2) = [2997254941_u32,4202138483_u32];
(*_2) = [3973390448_u32,1476809367_u32];
_10 = 56_isize << _4;
_1 = [291511313_u32,3898120676_u32];
(*_2) = [361251448_u32,1143647687_u32];
(*_2) = [949132902_u32,3267385956_u32];
(*_2) = [359942546_u32,1246448254_u32];
_4 = 1959413543449163147_i64 << _10;
(*_2) = [2423094106_u32,1699440275_u32];
(*_2) = [3165186664_u32,769789145_u32];
(*_2) = [1151235534_u32,1514826962_u32];
(*_2) = [3997877612_u32,3697572852_u32];
Goto(bb3)
}
bb7 = {
(*_2) = [1256511102_u32,3904527480_u32];
_14 = _10 as f64;
(*_2) = [2753078202_u32,1560877884_u32];
_2 = core::ptr::addr_of_mut!((*_2));
_3 = true & false;
(*_2) = [2989311050_u32,3609350815_u32];
(*_2) = [2599162951_u32,3289957507_u32];
(*_2) = [1269181938_u32,3586391094_u32];
RET = core::ptr::addr_of_mut!((*_2));
(*_2) = [604800770_u32,2009224499_u32];
_17 = _14 as i8;
_3 = false;
(*_2) = [1056801664_u32,614725390_u32];
(*_2) = [3786037533_u32,1840868722_u32];
_18 = _3 ^ _3;
Goto(bb8)
}
bb8 = {
_3 = _18 & _18;
_7 = !193741495342973297_u64;
_16 = !(-57727161370529142660834876542539222638_i128);
(*_2) = [1737841340_u32,614777249_u32];
_4 = 224082292_u32 as i64;
(*_2) = [2815886532_u32,2324995601_u32];
_7 = 2304963775335173532_u64;
_13 = -_14;
(*_2) = [3515855845_u32,4144445828_u32];
_18 = !_3;
_13 = _14;
_1 = [3487716056_u32,3041803541_u32];
(*_2) = [2192904471_u32,3199935056_u32];
_15 = !290978634624490326626611899209189025026_u128;
_15 = 275194917207328567099404514237445074787_u128 ^ 160661853003364758342358252729859212533_u128;
(*_2) = [518136857_u32,1348559368_u32];
(*_2) = [3116526108_u32,2116542285_u32];
(*_2) = [2283147403_u32,2424390814_u32];
(*_2) = [2080022509_u32,1941644316_u32];
_7 = 9952168461797450257_u64 | 10287159789126291598_u64;
(*_2) = [2239341002_u32,3385565392_u32];
_7 = 13303516304632913077_u64;
_24 = _4 <= _4;
(*_2) = [21323362_u32,3748467148_u32];
match _7 {
13303516304632913077 => bb10,
_ => bb9
}
}
bb9 = {
_4 = 3256907550801860329_i64 * 4816523933517919556_i64;
(*_2) = [3652725369_u32,2028326019_u32];
_7 = 8750860359073482370_u64 ^ 12449470478276793649_u64;
(*_2) = [1205660203_u32,1552039244_u32];
(*_2) = [3480901197_u32,3105331495_u32];
(*_2) = [1345397801_u32,2906560222_u32];
(*_2) = [354493339_u32,212999875_u32];
(*_2) = [801471631_u32,3202843997_u32];
(*_2) = [3582933477_u32,3983975343_u32];
(*_2) = [4191408113_u32,1258321880_u32];
_4 = !(-8618033196764253175_i64);
(*_2) = [3051797143_u32,1911626709_u32];
(*_2) = [754263934_u32,662118724_u32];
(*_2) = [3370351621_u32,3937354066_u32];
(*_2) = [3023625674_u32,4179953009_u32];
(*_2) = [2911672571_u32,1976859125_u32];
Goto(bb2)
}
bb10 = {
_26 = _15 as f64;
_21 = -_13;
_1 = [2532275141_u32,2976776407_u32];
(*_2) = [1498868299_u32,1560032278_u32];
(*_2) = [4207398167_u32,3295571530_u32];
_7 = !121672641748411555_u64;
_16 = (-146093502273293202121205561756951764440_i128) & (-107700424954024004100054324401119550146_i128);
_28 = _10 & _10;
_7 = 14817250338724322262_u64;
(*_2) = [1692167575_u32,2757693891_u32];
Goto(bb11)
}
bb11 = {
(*_2) = [2182797344_u32,535923571_u32];
_26 = _21;
_12 = _17 as isize;
(*_2) = [3416644198_u32,3504461485_u32];
_16 = _15 as i128;
_12 = -_10;
_18 = _3;
(*_2) = [2359501540_u32,2355685013_u32];
(*_2) = [1637168208_u32,3954510185_u32];
_20.1 = _4 as u64;
(*_2) = [3976712929_u32,3396832230_u32];
Goto(bb12)
}
bb12 = {
(*_2) = [3968173563_u32,3300190916_u32];
(*_2) = [2035976440_u32,536448615_u32];
(*_2) = [968685667_u32,4036453554_u32];
match _7 {
0 => bb13,
1 => bb14,
2 => bb15,
3 => bb16,
4 => bb17,
5 => bb18,
14817250338724322262 => bb20,
_ => bb19
}
}
bb13 = {
(*_2) = [2182797344_u32,535923571_u32];
_26 = _21;
_12 = _17 as isize;
(*_2) = [3416644198_u32,3504461485_u32];
_16 = _15 as i128;
_12 = -_10;
_18 = _3;
(*_2) = [2359501540_u32,2355685013_u32];
(*_2) = [1637168208_u32,3954510185_u32];
_20.1 = _4 as u64;
(*_2) = [3976712929_u32,3396832230_u32];
Goto(bb12)
}
bb14 = {
(*_2) = [1294130533_u32,2159668185_u32];
(*_2) = [1497049239_u32,1945144086_u32];
(*_2) = [2314506135_u32,2977977951_u32];
match _10 {
0 => bb5,
9223372036854775807 => bb7,
_ => bb6
}
}
bb15 = {
_4 = 3256907550801860329_i64 * 4816523933517919556_i64;
(*_2) = [3652725369_u32,2028326019_u32];
_7 = 8750860359073482370_u64 ^ 12449470478276793649_u64;
(*_2) = [1205660203_u32,1552039244_u32];
(*_2) = [3480901197_u32,3105331495_u32];
(*_2) = [1345397801_u32,2906560222_u32];
(*_2) = [354493339_u32,212999875_u32];
(*_2) = [801471631_u32,3202843997_u32];
(*_2) = [3582933477_u32,3983975343_u32];
(*_2) = [4191408113_u32,1258321880_u32];
_4 = !(-8618033196764253175_i64);
(*_2) = [3051797143_u32,1911626709_u32];
(*_2) = [754263934_u32,662118724_u32];
(*_2) = [3370351621_u32,3937354066_u32];
(*_2) = [3023625674_u32,4179953009_u32];
(*_2) = [2911672571_u32,1976859125_u32];
Goto(bb2)
}
bb16 = {
_3 = _18 & _18;
_7 = !193741495342973297_u64;
_16 = !(-57727161370529142660834876542539222638_i128);
(*_2) = [1737841340_u32,614777249_u32];
_4 = 224082292_u32 as i64;
(*_2) = [2815886532_u32,2324995601_u32];
_7 = 2304963775335173532_u64;
_13 = -_14;
(*_2) = [3515855845_u32,4144445828_u32];
_18 = !_3;
_13 = _14;
_1 = [3487716056_u32,3041803541_u32];
(*_2) = [2192904471_u32,3199935056_u32];
_15 = !290978634624490326626611899209189025026_u128;
_15 = 275194917207328567099404514237445074787_u128 ^ 160661853003364758342358252729859212533_u128;
(*_2) = [518136857_u32,1348559368_u32];
(*_2) = [3116526108_u32,2116542285_u32];
(*_2) = [2283147403_u32,2424390814_u32];
(*_2) = [2080022509_u32,1941644316_u32];
_7 = 9952168461797450257_u64 | 10287159789126291598_u64;
(*_2) = [2239341002_u32,3385565392_u32];
_7 = 13303516304632913077_u64;
_24 = _4 <= _4;
(*_2) = [21323362_u32,3748467148_u32];
match _7 {
13303516304632913077 => bb10,
_ => bb9
}
}
bb17 = {
_4 = 3256907550801860329_i64 * 4816523933517919556_i64;
(*_2) = [3652725369_u32,2028326019_u32];
_7 = 8750860359073482370_u64 ^ 12449470478276793649_u64;
(*_2) = [1205660203_u32,1552039244_u32];
(*_2) = [3480901197_u32,3105331495_u32];
(*_2) = [1345397801_u32,2906560222_u32];
(*_2) = [354493339_u32,212999875_u32];
(*_2) = [801471631_u32,3202843997_u32];
(*_2) = [3582933477_u32,3983975343_u32];
(*_2) = [4191408113_u32,1258321880_u32];
_4 = !(-8618033196764253175_i64);
(*_2) = [3051797143_u32,1911626709_u32];
(*_2) = [754263934_u32,662118724_u32];
(*_2) = [3370351621_u32,3937354066_u32];
(*_2) = [3023625674_u32,4179953009_u32];
(*_2) = [2911672571_u32,1976859125_u32];
Goto(bb2)
}
bb18 = {
(*_2) = [924357844_u32,3110165380_u32];
_4 = (-7633049778517451680_i64) | (-1306198768960863522_i64);
(*_2) = [1664862145_u32,1789583191_u32];
(*_2) = [1554162066_u32,468519240_u32];
(*_2) = [2447417878_u32,424597191_u32];
_7 = 14616_u16 as u64;
_10 = 4_usize as isize;
(*_2) = [200015368_u32,1164025636_u32];
(*_2) = [2997254941_u32,4202138483_u32];
(*_2) = [3973390448_u32,1476809367_u32];
_10 = 56_isize << _4;
_1 = [291511313_u32,3898120676_u32];
(*_2) = [361251448_u32,1143647687_u32];
(*_2) = [949132902_u32,3267385956_u32];
(*_2) = [359942546_u32,1246448254_u32];
_4 = 1959413543449163147_i64 << _10;
(*_2) = [2423094106_u32,1699440275_u32];
(*_2) = [3165186664_u32,769789145_u32];
(*_2) = [1151235534_u32,1514826962_u32];
(*_2) = [3997877612_u32,3697572852_u32];
Goto(bb3)
}
bb19 = {
_4 = 3256907550801860329_i64 * 4816523933517919556_i64;
(*_2) = [3652725369_u32,2028326019_u32];
_7 = 8750860359073482370_u64 ^ 12449470478276793649_u64;
(*_2) = [1205660203_u32,1552039244_u32];
(*_2) = [3480901197_u32,3105331495_u32];
(*_2) = [1345397801_u32,2906560222_u32];
(*_2) = [354493339_u32,212999875_u32];
(*_2) = [801471631_u32,3202843997_u32];
(*_2) = [3582933477_u32,3983975343_u32];
(*_2) = [4191408113_u32,1258321880_u32];
_4 = !(-8618033196764253175_i64);
(*_2) = [3051797143_u32,1911626709_u32];
(*_2) = [754263934_u32,662118724_u32];
(*_2) = [3370351621_u32,3937354066_u32];
(*_2) = [3023625674_u32,4179953009_u32];
(*_2) = [2911672571_u32,1976859125_u32];
Goto(bb2)
}
bb20 = {
(*_2) = [3395825637_u32,2901494370_u32];
Goto(bb21)
}
bb21 = {
_14 = -_13;
_24 = _18 & _3;
(*_2) = [4162616139_u32,3556414808_u32];
_30 = !_15;
(*_2) = [2088661181_u32,2538743742_u32];
(*_2) = [3041309810_u32,625542810_u32];
(*_2) = [349860338_u32,3982786321_u32];
_24 = _15 > _15;
(*_2) = [4004107082_u32,266279202_u32];
_25 = _26 <= _26;
(*_2) = [1190076872_u32,1754386739_u32];
(*_2) = [2819778622_u32,1650088106_u32];
_30 = !_15;
(*_2) = [3578116602_u32,492618666_u32];
(*_2) = [1356535393_u32,2574498225_u32];
_12 = _28;
(*_2) = [462250360_u32,3471095414_u32];
_25 = _13 < _21;
_16 = (-834122522_i32) as i128;
Goto(bb22)
}
bb22 = {
_33 = 607633923_u32 - 3135797605_u32;
_2 = core::ptr::addr_of_mut!((*_2));
(*_2) = [_33,_33];
_34 = &_24;
_26 = _4 as f64;
_27 = '\u{9c745}';
(*_2) = [_33,_33];
_16 = -(-9745307624058861491302281725419727976_i128);
(*_2) = [_33,_33];
RET = core::ptr::addr_of_mut!((*_2));
_27 = '\u{3c8a9}';
(*RET) = [_33,_33];
_37 = (*_34);
_20.1 = _7 | _7;
(*_2) = [_33,_33];
(*_2) = [_33,_33];
_34 = &_18;
(*_2) = [_33,_33];
match _7 {
0 => bb2,
1 => bb23,
14817250338724322262 => bb25,
_ => bb24
}
}
bb23 = {
(*_2) = [924357844_u32,3110165380_u32];
_4 = (-7633049778517451680_i64) | (-1306198768960863522_i64);
(*_2) = [1664862145_u32,1789583191_u32];
(*_2) = [1554162066_u32,468519240_u32];
(*_2) = [2447417878_u32,424597191_u32];
_7 = 14616_u16 as u64;
_10 = 4_usize as isize;
(*_2) = [200015368_u32,1164025636_u32];
(*_2) = [2997254941_u32,4202138483_u32];
(*_2) = [3973390448_u32,1476809367_u32];
_10 = 56_isize << _4;
_1 = [291511313_u32,3898120676_u32];
(*_2) = [361251448_u32,1143647687_u32];
(*_2) = [949132902_u32,3267385956_u32];
(*_2) = [359942546_u32,1246448254_u32];
_4 = 1959413543449163147_i64 << _10;
(*_2) = [2423094106_u32,1699440275_u32];
(*_2) = [3165186664_u32,769789145_u32];
(*_2) = [1151235534_u32,1514826962_u32];
(*_2) = [3997877612_u32,3697572852_u32];
Goto(bb3)
}
bb24 = {
_4 = 3256907550801860329_i64 * 4816523933517919556_i64;
(*_2) = [3652725369_u32,2028326019_u32];
_7 = 8750860359073482370_u64 ^ 12449470478276793649_u64;
(*_2) = [1205660203_u32,1552039244_u32];
(*_2) = [3480901197_u32,3105331495_u32];
(*_2) = [1345397801_u32,2906560222_u32];
(*_2) = [354493339_u32,212999875_u32];
(*_2) = [801471631_u32,3202843997_u32];
(*_2) = [3582933477_u32,3983975343_u32];
(*_2) = [4191408113_u32,1258321880_u32];
_4 = !(-8618033196764253175_i64);
(*_2) = [3051797143_u32,1911626709_u32];
(*_2) = [754263934_u32,662118724_u32];
(*_2) = [3370351621_u32,3937354066_u32];
(*_2) = [3023625674_u32,4179953009_u32];
(*_2) = [2911672571_u32,1976859125_u32];
Goto(bb2)
}
bb25 = {
(*_2) = [_33,_33];
_3 = _15 > _15;
(*_2) = [_33,_33];
Call(_37 = fn18(Move(_2), Move(_34)), ReturnTo(bb26), UnwindUnreachable())
}
bb26 = {
_39.3 = _30 as u32;
_15 = _30;
_30 = _15;
_3 = !_25;
_2 = core::ptr::addr_of_mut!(_39.1);
(*_2) = [_39.3,_33];
_39.0 = _17 | _17;
_8 = core::ptr::addr_of!(_41);
(*_2) = _1;
(*_8) = [(-1520256822_i32),160283633_i32];
match _10 {
0 => bb21,
1 => bb24,
2 => bb11,
3 => bb27,
4 => bb28,
9223372036854775807 => bb30,
_ => bb29
}
}
bb27 = {
_3 = _18 & _18;
_7 = !193741495342973297_u64;
_16 = !(-57727161370529142660834876542539222638_i128);
(*_2) = [1737841340_u32,614777249_u32];
_4 = 224082292_u32 as i64;
(*_2) = [2815886532_u32,2324995601_u32];
_7 = 2304963775335173532_u64;
_13 = -_14;
(*_2) = [3515855845_u32,4144445828_u32];
_18 = !_3;
_13 = _14;
_1 = [3487716056_u32,3041803541_u32];
(*_2) = [2192904471_u32,3199935056_u32];
_15 = !290978634624490326626611899209189025026_u128;
_15 = 275194917207328567099404514237445074787_u128 ^ 160661853003364758342358252729859212533_u128;
(*_2) = [518136857_u32,1348559368_u32];
(*_2) = [3116526108_u32,2116542285_u32];
(*_2) = [2283147403_u32,2424390814_u32];
(*_2) = [2080022509_u32,1941644316_u32];
_7 = 9952168461797450257_u64 | 10287159789126291598_u64;
(*_2) = [2239341002_u32,3385565392_u32];
_7 = 13303516304632913077_u64;
_24 = _4 <= _4;
(*_2) = [21323362_u32,3748467148_u32];
match _7 {
13303516304632913077 => bb10,
_ => bb9
}
}
bb28 = {
(*_2) = [924357844_u32,3110165380_u32];
_4 = (-7633049778517451680_i64) | (-1306198768960863522_i64);
(*_2) = [1664862145_u32,1789583191_u32];
(*_2) = [1554162066_u32,468519240_u32];
(*_2) = [2447417878_u32,424597191_u32];
_7 = 14616_u16 as u64;
_10 = 4_usize as isize;
(*_2) = [200015368_u32,1164025636_u32];
(*_2) = [2997254941_u32,4202138483_u32];
(*_2) = [3973390448_u32,1476809367_u32];
_10 = 56_isize << _4;
_1 = [291511313_u32,3898120676_u32];
(*_2) = [361251448_u32,1143647687_u32];
(*_2) = [949132902_u32,3267385956_u32];
(*_2) = [359942546_u32,1246448254_u32];
_4 = 1959413543449163147_i64 << _10;
(*_2) = [2423094106_u32,1699440275_u32];
(*_2) = [3165186664_u32,769789145_u32];
(*_2) = [1151235534_u32,1514826962_u32];
(*_2) = [3997877612_u32,3697572852_u32];
Goto(bb3)
}
bb29 = {
(*_2) = [1256511102_u32,3904527480_u32];
_14 = _10 as f64;
(*_2) = [2753078202_u32,1560877884_u32];
_2 = core::ptr::addr_of_mut!((*_2));
_3 = true & false;
(*_2) = [2989311050_u32,3609350815_u32];
(*_2) = [2599162951_u32,3289957507_u32];
(*_2) = [1269181938_u32,3586391094_u32];
RET = core::ptr::addr_of_mut!((*_2));
(*_2) = [604800770_u32,2009224499_u32];
_17 = _14 as i8;
_3 = false;
(*_2) = [1056801664_u32,614725390_u32];
(*_2) = [3786037533_u32,1840868722_u32];
_18 = _3 ^ _3;
Goto(bb8)
}
bb30 = {
(*_8) = [(-1535381684_i32),793171164_i32];
_44 = _12 - _10;
_40 = _37;
(*_8) = [1242156266_i32,(-695598898_i32)];
(*_8) = [1028027980_i32,959089608_i32];
Goto(bb31)
}
bb31 = {
(*_8) = [207539759_i32,1487514353_i32];
_39.3 = !_33;
_16 = (-67025941906254518860198704597121112000_i128) << _20.1;
_3 = _37;
(*_8) = [184703221_i32,1380100887_i32];
_1 = [_33,_33];
_8 = core::ptr::addr_of!((*_8));
(*_8) = [1804243638_i32,(-1663690938_i32)];
(*_8) = [(-1116375823_i32),677968227_i32];
_45.fld0 = (_12,);
_28 = _12;
(*_2) = _1;
_18 = _25 != _25;
(*_8) = [1921059916_i32,(-524883964_i32)];
_1 = [_33,_39.3];
_21 = -_14;
match _10 {
9223372036854775807 => bb32,
_ => bb24
}
}
bb32 = {
(*_2) = [_39.3,_39.3];
_27 = '\u{b63f3}';
_7 = _20.1 & _20.1;
(*_2) = [_33,_39.3];
(*_2) = _1;
(*_2) = [_33,_39.3];
_39.2 = [(-1348987895_i32),(-434605827_i32),(-1963753985_i32),(-1317365844_i32),(-1664633403_i32),(-1715281441_i32),1435467597_i32];
(*_2) = [_33,_39.3];
(*_8) = [994409502_i32,942418653_i32];
(*_8) = [263247367_i32,(-1339783563_i32)];
(*_8) = [(-583766486_i32),(-935723076_i32)];
Goto(bb33)
}
bb33 = {
_4 = 7898118238625614652_i64 ^ (-2283387336249851028_i64);
(*_2) = _1;
(*_8) = [493900257_i32,(-1862822633_i32)];
_10 = 6444_i16 as isize;
_33 = !_39.3;
(*_8) = [(-363837279_i32),158268746_i32];
_4 = 1909603119937319063_i64 >> _39.0;
(*_2) = [_39.3,_39.3];
_12 = _28 ^ _44;
(*_8) = [(-1788081776_i32),(-547182350_i32)];
_47 = !_3;
(*_2) = _1;
(*_8) = [625390310_i32,(-511869589_i32)];
(*_2) = [_39.3,_33];
(*_8) = [(-502026766_i32),1182313481_i32];
Goto(bb34)
}
bb34 = {
(*_2) = [_33,_39.3];
Goto(bb35)
}
bb35 = {
_34 = &_47;
_52 = core::ptr::addr_of!((*_8));
(*_8) = [1074286101_i32,(-591470985_i32)];
_17 = _39.0;
(*_2) = _1;
_26 = _17 as f64;
_62 = _44 >> _17;
(*_2) = [_33,_39.3];
_39.1 = _1;
(*_8) = [1396136302_i32,706808694_i32];
_39.3 = _33 & _33;
_40 = _37;
_53 = _39.3 + _39.3;
(*_2) = [_39.3,_39.3];
_10 = -_45.fld0.0;
_45.fld0.0 = _12;
_14 = _26 * _13;
_4 = 7092856979176280709_i64 & (-735425011066291232_i64);
(*_2) = [_33,_53];
_2 = core::ptr::addr_of_mut!((*_2));
_48 = [_30,_30,_15,_30,_15];
Goto(bb36)
}
bb36 = {
_62 = _28 & _45.fld0.0;
_40 = (*_34) == (*_34);
(*_2) = [_53,_39.3];
(*_8) = [1880127732_i32,633861616_i32];
_64 = _13 + _13;
(*_2) = [_39.3,_53];
(*_8) = [(-1990026633_i32),(-2128571837_i32)];
_39.3 = _15 as u32;
_59 = _15 * _15;
_30 = !_15;
(*_8) = [(-1011259396_i32),(-842962202_i32)];
_37 = _40 < (*_34);
_16 = !(-112508225560915216481231555185148500103_i128);
_65 = core::ptr::addr_of!(_39);
(*_65).2 = [(-1942643002_i32),1335566484_i32,(-972606933_i32),753037956_i32,(-1691428435_i32),(-1137634370_i32),812557425_i32];
_16 = (-1131325466_i32) as i128;
_65 = core::ptr::addr_of!((*_65));
(*_65).0 = _12 as i8;
(*_2) = _1;
(*_65).0 = -_17;
(*_8) = [(-1567003614_i32),39625894_i32];
(*_2) = [(*_65).3,(*_65).3];
_45.fld3 = core::ptr::addr_of_mut!((*_65).2);
_10 = _12 & _44;
_27 = '\u{244c1}';
Goto(bb37)
}
bb37 = {
(*_65).0 = -_17;
(*_65).3 = _53 | _53;
_28 = -_45.fld0.0;
(*_8) = [970565182_i32,(-1244993244_i32)];
_45.fld1 = Move(_52);
(*_65).2 = [(-2120794757_i32),1232362469_i32,607956079_i32,(-1456313551_i32),(-721769380_i32),(-667435364_i32),(-1659412696_i32)];
(*_65).2 = [(-376814076_i32),461845788_i32,(-1986423640_i32),(-1934888587_i32),(-1447926884_i32),(-757646851_i32),(-1731841363_i32)];
(*_8) = [1686949545_i32,43535210_i32];
_63 = _4 as usize;
(*_65).3 = !_53;
(*_2) = _1;
(*_65).2 = [1529045401_i32,(-1440160857_i32),(-1557734075_i32),2122435008_i32,492282436_i32,1403847250_i32,1720429499_i32];
(*_65).2 = [382293155_i32,1622813389_i32,155003542_i32,(-201552142_i32),(-276678311_i32),809565156_i32,(-122520570_i32)];
_69 = !8517_u16;
(*_65).0 = _17 & _17;
_67 = _15 as f32;
(*_2) = _1;
Call((*_65).0 = fn19((*_34), Move(_45.fld1), Move(RET), Move(_8), (*_8), Move(_45.fld3), (*_65).2, _45.fld0.0, (*_34), (*_65).3), ReturnTo(bb38), UnwindUnreachable())
}
bb38 = {
(*_2) = [(*_65).3,(*_65).3];
_67 = _4 as f32;
(*_2) = [(*_65).3,(*_65).3];
_45.fld0.0 = _62;
_45.fld1 = core::ptr::addr_of!(_41);
_54 = _37 | (*_34);
_56 = &_65;
_16 = !(-97436182001846525676015849862715360460_i128);
_37 = (*_65).0 >= (*_65).0;
(*_65).3 = _53 ^ _53;
(*_65).2 = [555876991_i32,482204033_i32,(-1273672666_i32),(-240237207_i32),1032274709_i32,(-1357885511_i32),(-1246729305_i32)];
_41 = [(-1882073357_i32),808817346_i32];
_55 = 155089562_i32 + (-1983943051_i32);
_34 = &_3;
(*_65).2 = [_55,_55,_55,_55,_55,_55,_55];
_2 = core::ptr::addr_of_mut!((*_2));
_45.fld2 = -_28;
_45.fld0 = (_10,);
(*_65).3 = _53 + _53;
_3 = _40 & _37;
_45.fld3 = core::ptr::addr_of_mut!((*_65).2);
(*_65).3 = _55 as u32;
RET = Move(_2);
(*_65).3 = _53;
_1 = [(*_65).3,_53];
(*_65).0 = _17 | _17;
Goto(bb39)
}
bb39 = {
_13 = _26 - _21;
_45.fld0 = (_62,);
(*_65).2 = [_55,_55,_55,_55,_55,_55,_55];
_45.fld0.0 = !_62;
_25 = _54 > _3;
(*_65).3 = !_53;
_1 = [(*_65).3,_39.3];
(*_65).0 = 30278_i16 as i8;
_3 = _37 != _25;
_66.2 = [(*_65).3,(*_65).3];
_39.2 = [_55,_55,_55,_55,_55,_55,_55];
_61 = _54;
Goto(bb40)
}
bb40 = {
(*_65).0 = _17;
_33 = !(*_65).3;
(*_65).3 = _33 << _53;
Goto(bb41)
}
bb41 = {
(*_65).0 = _17;
_28 = _62 & _12;
_40 = _25;
_65 = core::ptr::addr_of!(_39);
RET = core::ptr::addr_of_mut!(_1);
(*_65).1 = [(*_65).3,(*_65).3];
_2 = core::ptr::addr_of_mut!((*_65).1);
(*_65).1 = [(*_65).3,(*_65).3];
_47 = (*_65).3 > (*_65).3;
Goto(bb42)
}
bb42 = {
RET = core::ptr::addr_of_mut!((*RET));
(*_65).3 = 43_u8 as u32;
_26 = _14;
_65 = core::ptr::addr_of!((*_65));
_34 = &_25;
(*RET) = [(*_65).3,_33];
(*_65).0 = _17;
_45.fld2 = _27 as isize;
(*_65).3 = _53 ^ _53;
(*_65).0 = _17 - _17;
_66.1 = !_54;
(*_65).2 = [_55,_55,_55,_55,_55,_55,_55];
(*_65).0 = _17;
(*RET) = [(*_65).3,(*_65).3];
_58 = _16;
_75.1 = core::ptr::addr_of_mut!(_83);
(*_65).3 = _33 * _33;
(*_65).1 = (*RET);
(*_65).1 = [(*_65).3,(*_65).3];
(*_65).1 = (*RET);
(*_65).3 = _53 >> _33;
(*_65).0 = _17;
(*RET) = [(*_65).3,(*_65).3];
Goto(bb43)
}
bb43 = {
(*RET) = [(*_65).3,_53];
_79.1 = _63 ^ _63;
(*RET) = [(*_65).3,(*_65).3];
_37 = _40 <= (*_34);
(*_65).3 = _33 ^ _53;
(*_65).3 = _55 as u32;
_78 = &mut _4;
_79 = (_13, _63, (*_34));
(*_65).3 = !_33;
(*_65).0 = _17 >> (*_65).3;
(*_78) = 7668275768059158038_i64 & (-1905514229993665012_i64);
(*_65).2 = [_55,_55,_55,_55,_55,_55,_55];
_65 = core::ptr::addr_of!((*_65));
(*_65).1 = [(*_65).3,(*_65).3];
(*_65).2 = [_55,_55,_55,_55,_55,_55,_55];
_79.2 = (*_34) & (*_34);
(*_65).0 = _55 as i8;
_54 = (*_34) <= (*_34);
(*_65).3 = _27 as u32;
_40 = (*_34);
_48 = [_30,_15,_59,_59,_30];
Goto(bb44)
}
bb44 = {
_37 = _47 ^ _40;
(*RET) = [(*_65).3,_33];
Call((*_78) = core::intrinsics::transmute((*_65).1), ReturnTo(bb45), UnwindUnreachable())
}
bb45 = {
(*RET) = (*_65).1;
(*_78) = !4428916089606655559_i64;
_47 = _40 == (*_34);
(*_65).1 = (*RET);
Goto(bb46)
}
bb46 = {
_54 = (*_34);
_79.0 = _64;
(*_65).0 = _17;
(*_65).2 = [_55,_55,_55,_55,_55,_55,_55];
(*_65).3 = _53 * _53;
(*_65).2 = [_55,_55,_55,_55,_55,_55,_55];
_12 = _16 as isize;
(*_65).1 = [(*_65).3,(*_65).3];
_53 = (*_65).3;
_58 = !_16;
_37 = (*_65).0 >= _39.0;
_79 = (_21, _63, (*_34));
(*_65).2 = [_55,_55,_55,_55,_55,_55,_55];
(*_65).2 = [_55,_55,_55,_55,_55,_55,_55];
(*_65).2 = [_55,_55,_55,_55,_55,_55,_55];
(*RET) = (*_65).1;
(*_65).3 = _53 * _53;
(*_65).3 = !_53;
(*_65).3 = _53 & _33;
_66.2 = [(*_65).3,(*_65).3];
_39.2 = [_55,_55,_55,_55,_55,_55,_55];
_33 = !(*_65).3;
Goto(bb47)
}
bb47 = {
(*_65).3 = _33 * _53;
(*_65).3 = _53 ^ _53;
Goto(bb48)
}
bb48 = {
_27 = '\u{2d849}';
_53 = !_39.3;
(*RET) = [_53,(*_65).3];
(*_65).2 = [_55,_55,_55,_55,_55,_55,_55];
(*_78) = _45.fld0.0 as i64;
(*_65).2 = [_55,_55,_55,_55,_55,_55,_55];
(*RET) = [(*_65).3,(*_65).3];
_1 = [(*_65).3,_39.3];
(*_65).1 = [(*_65).3,(*_65).3];
_41 = [_55,_55];
_14 = _26 + _13;
(*_65).1 = [(*_65).3,(*_65).3];
_54 = (*_34);
(*_78) = 7254429185869251896_i64;
_20.0 = core::ptr::addr_of_mut!(_83);
(*RET) = (*_65).1;
_86 = &_10;
(*_65).1 = [(*_65).3,_39.3];
(*RET) = [(*_65).3,(*_65).3];
_68 = [40_u8,245_u8,58_u8,18_u8,59_u8,49_u8,183_u8];
(*_65).1 = [(*_65).3,(*_65).3];
(*RET) = _66.2;
(*_65).0 = _17 - _17;
_94 = _27 as i32;
_53 = (*_65).3 + _39.3;
(*_65).0 = _17 | _17;
(*RET) = (*_65).1;
(*_65).1 = [(*_65).3,(*_65).3];
_79.1 = !_63;
Goto(bb49)
}
bb49 = {
(*_65).3 = _53 ^ _53;
_66 = (Move(_20), (*_34), (*_65).1);
(*RET) = (*_65).1;
(*_78) = _79.2 as i64;
_68 = [229_u8,26_u8,12_u8,106_u8,176_u8,18_u8,234_u8];
_20.1 = _7 & _66.0.1;
(*_65).1 = [(*_65).3,(*_65).3];
(*_65).2 = [_94,_55,_55,_55,_55,_94,_94];
(*_65).0 = _17 << (*_78);
(*RET) = [(*_65).3,(*_65).3];
_69 = 51336_u16;
(*_65).3 = _53 << (*_78);
Goto(bb50)
}
bb50 = {
Call(_101 = dump_var(17_usize, 53_usize, Move(_53), 10_usize, Move(_10), 63_usize, Move(_63), 18_usize, Move(_18)), ReturnTo(bb51), UnwindUnreachable())
}
bb51 = {
Call(_101 = dump_var(17_usize, 4_usize, Move(_4), 33_usize, Move(_33), 24_usize, Move(_24), 55_usize, Move(_55)), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
Call(_101 = dump_var(17_usize, 54_usize, Move(_54), 47_usize, Move(_47), 68_usize, Move(_68), 27_usize, Move(_27)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Call(_101 = dump_var(17_usize, 61_usize, Move(_61), 94_usize, Move(_94), 40_usize, Move(_40), 39_usize, Move(_39)), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Call(_101 = dump_var(17_usize, 28_usize, Move(_28), 102_usize, _102, 102_usize, _102, 102_usize, _102), ReturnTo(bb55), UnwindUnreachable())
}
bb55 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn18(mut _1: *mut [u32; 2],mut _2: &'static bool) -> bool {
mir! {
type RET = bool;
let _3: *const [i32; 2];
let _4: [i32; 7];
let _5: &'static mut i64;
let _6: [bool; 6];
let _7: [u64; 5];
let _8: f32;
let _9: i8;
let _10: u64;
let _11: &'static mut &'static mut (*mut i16, usize, char);
let _12: isize;
let _13: [u8; 1];
let _14: *mut [u32; 2];
let _15: &'static mut isize;
let _16: f32;
let _17: *const (i8, [u32; 2], [i32; 7], u32);
let _18: *mut &'static i64;
let _19: *const Adt51;
let _20: *mut &'static i64;
let _21: u32;
let _22: (Adt51, &'static i64, *const Adt28);
let _23: bool;
let _24: u8;
let _25: [u128; 5];
let _26: *mut [u32; 2];
let _27: f32;
let _28: bool;
let _29: (*mut i16, u64);
let _30: *const &'static usize;
let _31: isize;
let _32: ((Adt51, &'static i64, *const Adt28), [u128; 5], i64);
let _33: isize;
let _34: isize;
let _35: char;
let _36: [i16; 7];
let _37: u64;
let _38: u32;
let _39: *const [u128; 5];
let _40: f64;
let _41: [u64; 5];
let _42: Adt51;
let _43: i32;
let _44: *mut [i32; 7];
let _45: *const [u128; 5];
let _46: ();
let _47: ();
{
RET = 15574646985970218663_usize < 4053262533392478699_usize;
_2 = &RET;
RET = true ^ false;
RET = !false;
RET = 13685_i16 > 12953_i16;
_4 = [1122937336_i32,529445112_i32,(-953591381_i32),(-968612506_i32),(-375361712_i32),1543113599_i32,(-370559719_i32)];
_4 = [1385071083_i32,(-1501698878_i32),(-1308551838_i32),189031849_i32,(-1406367408_i32),(-288491598_i32),613588035_i32];
_6 = [RET,RET,RET,RET,RET,RET];
_6 = [RET,RET,RET,RET,RET,RET];
_4 = [1614290043_i32,(-926254027_i32),(-427308262_i32),566448181_i32,1179542292_i32,(-1530393127_i32),1797302419_i32];
_4 = [(-923921627_i32),826431261_i32,1129516376_i32,(-475663620_i32),(-2011482878_i32),(-1531999064_i32),(-2080886394_i32)];
_6 = [RET,RET,RET,RET,RET,RET];
_4 = [(-854470050_i32),1938883514_i32,(-741394183_i32),(-1028912626_i32),791299309_i32,(-1994204389_i32),159444672_i32];
Goto(bb1)
}
bb1 = {
_4 = [1489545492_i32,(-1277310863_i32),270951692_i32,1907904621_i32,2040023002_i32,(-1680266946_i32),367522970_i32];
RET = false;
RET = false | false;
_7 = [15643062920122016599_u64,2673733675679859454_u64,657463370616909685_u64,8280528119462363888_u64,5623121837249363380_u64];
_8 = 0_usize as f32;
RET = true;
_6 = [RET,RET,RET,RET,RET,RET];
_8 = 31273_i16 as f32;
_4 = [(-1061078469_i32),1476106136_i32,(-1816115404_i32),245192262_i32,145936127_i32,1640842556_i32,315120092_i32];
_7 = [3682184380850563022_u64,4960585309298929302_u64,8922502455371901172_u64,2112769034396166982_u64,16579161111859541587_u64];
_12 = 9223372036854775807_isize * 9223372036854775807_isize;
_13 = [91_u8];
RET = false;
RET = false;
Goto(bb2)
}
bb2 = {
_15 = &mut _12;
_13 = [125_u8];
(*_15) = 9223372036854775807_isize - 9223372036854775807_isize;
(*_15) = 9223372036854775807_isize * 33_isize;
_14 = Move(_1);
_16 = _8 - _8;
_9 = 14_i8;
_10 = 63138346782029013265545334419630998495_u128 as u64;
(*_15) = -9223372036854775807_isize;
(*_15) = (-106_isize) - (-118_isize);
(*_15) = 174_u8 as isize;
(*_15) = 9223372036854775807_isize;
_8 = _16;
Goto(bb3)
}
bb3 = {
(*_15) = 9223372036854775807_isize;
Goto(bb4)
}
bb4 = {
(*_15) = _9 as isize;
(*_15) = _9 as isize;
Call((*_15) = core::intrinsics::bswap(9223372036854775807_isize), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
(*_15) = _8 as isize;
(*_15) = 9223372036854775807_isize + (-9223372036854775808_isize);
(*_15) = 79_isize - (-31_isize);
(*_15) = (-116_isize) - 41_isize;
_1 = Move(_14);
(*_15) = 9223372036854775807_isize + (-9223372036854775808_isize);
_6 = [RET,RET,RET,RET,RET,RET];
(*_15) = (-9223372036854775808_isize) * (-9223372036854775808_isize);
_22.0.fld0.2 = RET;
_21 = 2923655742_u32 >> (*_15);
(*_15) = 9223372036854775807_isize;
(*_15) = RET as isize;
_22.0.fld1 = [47585871093296965543514113179181174032_u128,89130461735727283362456221959035860315_u128,140796087683650022128528302852422292841_u128,169074141217107403465807159278811204838_u128,339632624969623253171257722019495001238_u128];
Goto(bb6)
}
bb6 = {
_8 = _16;
RET = _10 != _10;
(*_15) = 9223372036854775807_isize;
(*_15) = (-9223372036854775808_isize);
(*_15) = 9223372036854775807_isize * (-9223372036854775808_isize);
(*_15) = (-127_isize) & (-9223372036854775808_isize);
(*_15) = 9223372036854775807_isize & (-9223372036854775808_isize);
_19 = core::ptr::addr_of!(_22.0);
_26 = Move(_1);
(*_19).fld1 = [87330728999364672070468461077254890709_u128,34402866329465611725380237017595820595_u128,190582946068344071686891883267054013411_u128,133496795235505743985555632999037678726_u128,21987400314071637125890722102202656242_u128];
(*_19).fld0.0 = 196479949662274073173740809819763301416_u128 as f64;
(*_19).fld4 = [821768476_i32,(-1900423940_i32)];
(*_19).fld0.0 = 61757_u16 as f64;
(*_19).fld0.1 = 14197462549645817589_usize << (*_15);
(*_19).fld4 = [602188082_i32,1903764639_i32];
(*_19).fld3 = !_21;
(*_15) = '\u{5ade6}' as isize;
(*_19).fld4 = [(-1765074589_i32),(-877951369_i32)];
(*_15) = (-22734_i16) as isize;
_22.0.fld0.2 = RET;
(*_19).fld3 = _21 ^ _21;
(*_19).fld0.2 = RET & RET;
(*_19).fld0.0 = 107421519235954866709943414240296659125_i128 as f64;
(*_19).fld4 = [(-1660972530_i32),(-29721940_i32)];
(*_19).fld1 = [268438804832462252416364747700143074698_u128,47078505852038128059867938619361216106_u128,246384117123794377313090348135070465039_u128,263552666673968297308312100519431802598_u128,188348701656523351550899413860783212856_u128];
(*_19).fld4 = [(-1398162033_i32),(-594211676_i32)];
match _9 {
0 => bb4,
1 => bb7,
2 => bb8,
3 => bb9,
4 => bb10,
5 => bb11,
14 => bb13,
_ => bb12
}
}
bb7 = {
(*_15) = _8 as isize;
(*_15) = 9223372036854775807_isize + (-9223372036854775808_isize);
(*_15) = 79_isize - (-31_isize);
(*_15) = (-116_isize) - 41_isize;
_1 = Move(_14);
(*_15) = 9223372036854775807_isize + (-9223372036854775808_isize);
_6 = [RET,RET,RET,RET,RET,RET];
(*_15) = (-9223372036854775808_isize) * (-9223372036854775808_isize);
_22.0.fld0.2 = RET;
_21 = 2923655742_u32 >> (*_15);
(*_15) = 9223372036854775807_isize;
(*_15) = RET as isize;
_22.0.fld1 = [47585871093296965543514113179181174032_u128,89130461735727283362456221959035860315_u128,140796087683650022128528302852422292841_u128,169074141217107403465807159278811204838_u128,339632624969623253171257722019495001238_u128];
Goto(bb6)
}
bb8 = {
(*_15) = _9 as isize;
(*_15) = _9 as isize;
Call((*_15) = core::intrinsics::bswap(9223372036854775807_isize), ReturnTo(bb5), UnwindUnreachable())
}
bb9 = {
(*_15) = 9223372036854775807_isize;
Goto(bb4)
}
bb10 = {
_15 = &mut _12;
_13 = [125_u8];
(*_15) = 9223372036854775807_isize - 9223372036854775807_isize;
(*_15) = 9223372036854775807_isize * 33_isize;
_14 = Move(_1);
_16 = _8 - _8;
_9 = 14_i8;
_10 = 63138346782029013265545334419630998495_u128 as u64;
(*_15) = -9223372036854775807_isize;
(*_15) = (-106_isize) - (-118_isize);
(*_15) = 174_u8 as isize;
(*_15) = 9223372036854775807_isize;
_8 = _16;
Goto(bb3)
}
bb11 = {
_4 = [1489545492_i32,(-1277310863_i32),270951692_i32,1907904621_i32,2040023002_i32,(-1680266946_i32),367522970_i32];
RET = false;
RET = false | false;
_7 = [15643062920122016599_u64,2673733675679859454_u64,657463370616909685_u64,8280528119462363888_u64,5623121837249363380_u64];
_8 = 0_usize as f32;
RET = true;
_6 = [RET,RET,RET,RET,RET,RET];
_8 = 31273_i16 as f32;
_4 = [(-1061078469_i32),1476106136_i32,(-1816115404_i32),245192262_i32,145936127_i32,1640842556_i32,315120092_i32];
_7 = [3682184380850563022_u64,4960585309298929302_u64,8922502455371901172_u64,2112769034396166982_u64,16579161111859541587_u64];
_12 = 9223372036854775807_isize * 9223372036854775807_isize;
_13 = [91_u8];
RET = false;
RET = false;
Goto(bb2)
}
bb12 = {
Return()
}
bb13 = {
_22.0.fld4 = [1508849127_i32,1565432277_i32];
(*_19).fld3 = _21 & _21;
(*_19).fld2 = Adt28::Variant0 { fld0: RET,fld1: '\u{cc179}',fld2: (*_19).fld0,fld3: 526380794_i32,fld4: (*_19).fld0.0 };
place!(Field::<char>(Variant((*_19).fld2, 0), 1)) = '\u{101aac}';
place!(Field::<bool>(Variant((*_19).fld2, 0), 0)) = (*_19).fld0.2;
_9 = 32504_i16 as i8;
_24 = 192_u8 ^ 124_u8;
(*_19).fld1 = [96348662965012402861168716344916481232_u128,250945319984991214269546669343076663216_u128,246190053100938324497038475281577786517_u128,335657080542830532031346273473140389871_u128,298928179718328343993995625184493512894_u128];
Goto(bb14)
}
bb14 = {
place!(Field::<char>(Variant((*_19).fld2, 0), 1)) = '\u{4f229}';
(*_19).fld3 = _16 as u32;
_23 = (*_15) > (*_15);
(*_15) = Field::<char>(Variant((*_19).fld2, 0), 1) as isize;
_3 = core::ptr::addr_of!((*_19).fld4);
(*_19).fld0.2 = Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).0 > Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).0;
(*_19).fld3 = _21;
place!(Field::<bool>(Variant((*_19).fld2, 0), 0)) = _22.0.fld0.2 < Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).2;
place!(Field::<i32>(Variant((*_19).fld2, 0), 3)) = !(-330609116_i32);
Call((*_19).fld3 = core::intrinsics::bswap(_21), ReturnTo(bb15), UnwindUnreachable())
}
bb15 = {
(*_19).fld0.1 = Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).1 + Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).1;
(*_19).fld1 = [100323459852650115565976037909612560321_u128,172739588376808071771885955341689053296_u128,103464302523348690172601626255025748570_u128,30164448453834643382383869273095525720_u128,150693824396306942998050608691975581128_u128];
place!(Field::<bool>(Variant((*_19).fld2, 0), 0)) = Field::<char>(Variant((*_19).fld2, 0), 1) > Field::<char>(Variant((*_19).fld2, 0), 1);
(*_15) = -23_isize;
(*_19).fld3 = _21 | _21;
(*_19).fld2 = Adt28::Variant0 { fld0: (*_19).fld0.2,fld1: '\u{e5da2}',fld2: (*_19).fld0,fld3: (-623676848_i32),fld4: (*_19).fld0.0 };
(*_19).fld2 = Adt28::Variant0 { fld0: (*_19).fld0.2,fld1: '\u{f9359}',fld2: (*_19).fld0,fld3: 700359570_i32,fld4: (*_19).fld0.0 };
_22.0.fld2 = Adt28::Variant0 { fld0: (*_19).fld0.2,fld1: '\u{77d14}',fld2: (*_19).fld0,fld3: (-934313757_i32),fld4: (*_19).fld0.0 };
place!(Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2)) = ((*_19).fld0.0, (*_19).fld0.1, Field::<bool>(Variant((*_19).fld2, 0), 0));
place!(Field::<char>(Variant((*_19).fld2, 0), 1)) = '\u{278f6}';
place!(Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2)).2 = Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).1 < Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).1;
place!(Field::<bool>(Variant((*_19).fld2, 0), 0)) = Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).2;
(*_19).fld1 = [242464573650752249239018626572344923482_u128,188598826690188516562484517436406403458_u128,156007645502044898765558532418336332085_u128,277051428409580795485230956027696739659_u128,322999819957442303414441655533255868632_u128];
(*_19).fld0 = (Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).0, Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).1, Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).2);
(*_19).fld2 = Adt28::Variant0 { fld0: (*_19).fld0.2,fld1: '\u{92071}',fld2: (*_19).fld0,fld3: (-1977619066_i32),fld4: (*_19).fld0.0 };
(*_19).fld1 = [321131077725789353716696166865285414748_u128,119897683452465566833463614198898744525_u128,334838752824371220943804764732430281138_u128,111538220762217047407906950813544856024_u128,300227357894507959929601358413465961009_u128];
(*_19).fld4 = [375751791_i32,2138184019_i32];
place!(Field::<char>(Variant((*_19).fld2, 0), 1)) = '\u{a4045}';
(*_19).fld0 = (Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).0, Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).1, Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).2);
(*_15) = (-9223372036854775808_isize);
(*_19).fld0 = Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2);
_7 = [_10,_10,_10,_10,_10];
Goto(bb16)
}
bb16 = {
_32.1 = (*_19).fld1;
place!(Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2)).0 = (*_19).fld0.0;
Goto(bb17)
}
bb17 = {
_32.2 = 4903802499355151400_i64;
_32.0.0.fld4 = (*_19).fld4;
_3 = core::ptr::addr_of!(_22.0.fld4);
_32.0.2 = core::ptr::addr_of!((*_19).fld2);
place!(Field::<bool>(Variant((*_19).fld2, 0), 0)) = !(*_19).fld0.2;
(*_19).fld0.0 = -Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).0;
place!(Field::<i32>(Variant((*_19).fld2, 0), 3)) = (-1268999023_i32) - (-756747291_i32);
place!(Field::<char>(Variant((*_19).fld2, 0), 1)) = '\u{ecd39}';
_32.0.0.fld3 = (-29333_i16) as u32;
place!(Field::<(f64, usize, bool)>(Variant(_22.0.fld2, 0), 2)).1 = Field::<i32>(Variant((*_19).fld2, 0), 3) as usize;
(*_19).fld1 = [331939080899825723940407410130137419183_u128,4403915813838400846188196448096430592_u128,192519507132701547405020427206622020426_u128,16733636754068049509991099548125774299_u128,26280811088237451639617857629710873927_u128];
place!(Field::<char>(Variant((*_19).fld2, 0), 1)) = '\u{e790a}';
place!(Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2)) = (Field::<f64>(Variant((*_19).fld2, 0), 4), (*_19).fld0.1, Field::<bool>(Variant((*_19).fld2, 0), 0));
(*_19).fld0.1 = Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).1 ^ Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).1;
(*_15) = 9223372036854775807_isize - 109_isize;
place!(Field::<(f64, usize, bool)>(Variant(_22.0.fld2, 0), 2)).0 = Field::<f64>(Variant((*_19).fld2, 0), 4) * Field::<f64>(Variant((*_19).fld2, 0), 4);
place!(Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2)).2 = (*_19).fld0.2 >= Field::<bool>(Variant((*_19).fld2, 0), 0);
place!(Field::<f64>(Variant((*_19).fld2, 0), 4)) = -Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).0;
(*_3) = [Field::<i32>(Variant((*_19).fld2, 0), 3),Field::<i32>(Variant((*_19).fld2, 0), 3)];
(*_19).fld1 = [160285713561799659290512761337767033758_u128,2164726591701136312859600703243305880_u128,232280628376616047174696658737703716344_u128,66634577855763016916828596940908318435_u128,85298649897298608491081794527779208077_u128];
place!(Field::<i32>(Variant((*_19).fld2, 0), 3)) = 1324538243_i32;
place!(Field::<f64>(Variant((*_19).fld2, 0), 4)) = -Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).0;
(*_19).fld3 = _21 * _21;
Goto(bb18)
}
bb18 = {
place!(Field::<f64>(Variant((*_19).fld2, 0), 4)) = -Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).0;
(*_15) = -(-9223372036854775808_isize);
_22.0.fld0 = (Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).0, Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).1, Field::<bool>(Variant((*_19).fld2, 0), 0));
_32.0.0.fld0.2 = Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).0 >= Field::<f64>(Variant((*_19).fld2, 0), 4);
_27 = _16 + _16;
place!(Field::<char>(Variant((*_19).fld2, 0), 1)) = '\u{71c71}';
_29.1 = _10 >> _22.0.fld0.1;
place!(Field::<i32>(Variant((*_19).fld2, 0), 3)) = (*_19).fld3 as i32;
(*_15) = -9223372036854775807_isize;
(*_19).fld0.0 = -Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).0;
(*_19).fld3 = (*_15) as u32;
(*_19).fld0.2 = Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).2;
(*_19).fld0.2 = Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).2;
Goto(bb19)
}
bb19 = {
place!(Field::<bool>(Variant((*_19).fld2, 0), 0)) = !(*_19).fld0.2;
(*_19).fld0.2 = !Field::<bool>(Variant((*_19).fld2, 0), 0);
place!(Field::<bool>(Variant(_22.0.fld2, 0), 0)) = (*_19).fld0.2 < (*_19).fld0.2;
place!(Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2)) = ((*_19).fld0.0, (*_19).fld0.1, Field::<bool>(Variant((*_19).fld2, 0), 0));
(*_19).fld0.0 = -Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).0;
_25 = [254765714014235344160048561804002314284_u128,258826053577257138204341136843382369651_u128,117456244998761856564159751795101452082_u128,332366656231120387614129555081137059930_u128,190472847968505940520488198533206418291_u128];
(*_19).fld3 = Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).0 as u32;
place!(Field::<(f64, usize, bool)>(Variant(_22.0.fld2, 0), 2)).2 = Field::<i32>(Variant((*_19).fld2, 0), 3) != Field::<i32>(Variant((*_19).fld2, 0), 3);
place!(Field::<bool>(Variant((*_19).fld2, 0), 0)) = !(*_19).fld0.2;
place!(Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2)).1 = !(*_19).fld0.1;
place!(Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2)) = (*_19).fld0;
(*_19).fld0 = Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2);
place!(Field::<f64>(Variant((*_19).fld2, 0), 4)) = Field::<(f64, usize, bool)>(Variant(_22.0.fld2, 0), 2).0 + Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).0;
(*_19).fld4 = _32.0.0.fld4;
(*_19).fld0.0 = Field::<f64>(Variant((*_19).fld2, 0), 4) - Field::<f64>(Variant((*_19).fld2, 0), 4);
place!(Field::<char>(Variant((*_19).fld2, 0), 1)) = '\u{fc4d0}';
place!(Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2)).2 = !Field::<bool>(Variant((*_19).fld2, 0), 0);
Goto(bb20)
}
bb20 = {
(*_19).fld4 = [Field::<i32>(Variant((*_19).fld2, 0), 3),Field::<i32>(Variant(_22.0.fld2, 0), 3)];
(*_19).fld0.0 = _29.1 as f64;
(*_19).fld1 = _32.1;
(*_15) = (-9223372036854775808_isize) >> Field::<i32>(Variant((*_19).fld2, 0), 3);
(*_19).fld0 = (Field::<f64>(Variant((*_19).fld2, 0), 4), Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).1, Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).2);
place!(Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2)).1 = (*_19).fld0.1;
(*_15) = 9223372036854775807_isize;
place!(Field::<bool>(Variant((*_19).fld2, 0), 0)) = (*_19).fld0.2;
(*_15) = (-9223372036854775808_isize) ^ 9223372036854775807_isize;
(*_19).fld0.1 = Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).1 * Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).1;
Goto(bb21)
}
bb21 = {
_22.0.fld3 = _21;
(*_19).fld1 = [125151489790404089131787350044421621325_u128,284444226078163193057553395726506473429_u128,270394679915783966790046870730883781944_u128,179855245999485374507499059183496120969_u128,142146521397259916027955644204886738717_u128];
(*_19).fld2 = Adt28::Variant0 { fld0: (*_19).fld0.2,fld1: '\u{ed36f}',fld2: (*_19).fld0,fld3: 1190892752_i32,fld4: (*_19).fld0.0 };
place!(Field::<i32>(Variant((*_19).fld2, 0), 3)) = !743853035_i32;
_4 = [Field::<i32>(Variant((*_19).fld2, 0), 3),Field::<i32>(Variant((*_19).fld2, 0), 3),Field::<i32>(Variant((*_19).fld2, 0), 3),Field::<i32>(Variant((*_19).fld2, 0), 3),Field::<i32>(Variant((*_19).fld2, 0), 3),Field::<i32>(Variant((*_19).fld2, 0), 3),Field::<i32>(Variant((*_19).fld2, 0), 3)];
place!(Field::<char>(Variant((*_19).fld2, 0), 1)) = '\u{c437}';
place!(Field::<i32>(Variant((*_19).fld2, 0), 3)) = (*_19).fld0.1 as i32;
place!(Field::<char>(Variant((*_19).fld2, 0), 1)) = '\u{28bc6}';
place!(Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2)).1 = (*_19).fld0.1;
_42.fld0.1 = (*_19).fld0.1 & (*_19).fld0.1;
(*_15) = 9223372036854775807_isize << _29.1;
(*_19).fld0.2 = !Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).2;
(*_19).fld3 = Field::<f64>(Variant((*_19).fld2, 0), 4) as u32;
place!(Field::<char>(Variant((*_19).fld2, 0), 1)) = '\u{975b7}';
place!(Field::<bool>(Variant((*_19).fld2, 0), 0)) = (*_19).fld0.2 | (*_19).fld0.2;
(*_19).fld4 = [Field::<i32>(Variant((*_19).fld2, 0), 3),Field::<i32>(Variant((*_19).fld2, 0), 3)];
(*_19).fld0 = (Field::<f64>(Variant((*_19).fld2, 0), 4), Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).1, Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).2);
(*_19).fld2 = Adt28::Variant0 { fld0: (*_19).fld0.2,fld1: '\u{8feb6}',fld2: (*_19).fld0,fld3: (-1808389053_i32),fld4: (*_19).fld0.0 };
(*_19).fld0.0 = -Field::<f64>(Variant((*_19).fld2, 0), 4);
place!(Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2)).0 = (*_19).fld0.0;
(*_19).fld1 = [155955469234129050875141733155898904071_u128,214980639503401813695744272862069494700_u128,278208474408678008099952034357470185462_u128,98043173238992072362155550316858877435_u128,158518627685469965115632219436651885622_u128];
(*_19).fld3 = !_21;
(*_19).fld4 = [(-742879375_i32),2085128584_i32];
(*_19).fld0.2 = Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).1 > Field::<(f64, usize, bool)>(Variant((*_19).fld2, 0), 2).1;
(*_19).fld0.2 = Field::<bool>(Variant((*_19).fld2, 0), 0);
place!(Field::<char>(Variant((*_19).fld2, 0), 1)) = '\u{52282}';
place!(Field::<char>(Variant((*_19).fld2, 0), 1)) = '\u{255f2}';
RET = !Field::<bool>(Variant((*_19).fld2, 0), 0);
(*_19).fld4 = [(-789257195_i32),(-1759803411_i32)];
Goto(bb22)
}
bb22 = {
Call(_46 = dump_var(18_usize, 4_usize, Move(_4), 7_usize, Move(_7), 10_usize, Move(_10), 24_usize, Move(_24)), ReturnTo(bb23), UnwindUnreachable())
}
bb23 = {
Call(_46 = dump_var(18_usize, 12_usize, Move(_12), 47_usize, _47, 47_usize, _47, 47_usize, _47), ReturnTo(bb24), UnwindUnreachable())
}
bb24 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn19(mut _1: bool,mut _2: *const [i32; 2],mut _3: *mut [u32; 2],mut _4: *const [i32; 2],mut _5: [i32; 2],mut _6: *mut [i32; 7],mut _7: [i32; 7],mut _8: isize,mut _9: bool,mut _10: u32) -> i8 {
mir! {
type RET = i8;
let _11: u128;
let _12: usize;
let _13: [u8; 7];
let _14: [u64; 5];
let _15: ((*mut i16, u64), bool, [u32; 2]);
let _16: &'static mut isize;
let _17: u32;
let _18: isize;
let _19: bool;
let _20: Adt51;
let _21: &'static mut &'static mut (*mut i16, usize, char);
let _22: char;
let _23: Adt64;
let _24: (&'static i64, u16, (i8,));
let _25: bool;
let _26: u16;
let _27: &'static [u8; 1];
let _28: *const &'static *const (i8, [u32; 2], [i32; 7], u32);
let _29: *const [u128; 5];
let _30: (i8,);
let _31: isize;
let _32: char;
let _33: [i16; 7];
let _34: (i8,);
let _35: *const &'static usize;
let _36: f64;
let _37: Adt47;
let _38: (bool, u128, usize);
let _39: f64;
let _40: i8;
let _41: u32;
let _42: &'static bool;
let _43: isize;
let _44: *const [u128; 5];
let _45: bool;
let _46: char;
let _47: u128;
let _48: char;
let _49: Adt55;
let _50: *mut *const i128;
let _51: *mut *const i128;
let _52: u128;
let _53: f32;
let _54: [u128; 5];
let _55: *const [i32; 2];
let _56: u32;
let _57: *mut [u32; 2];
let _58: char;
let _59: ((isize,), u32);
let _60: (&'static i64, u16, (i8,));
let _61: isize;
let _62: u16;
let _63: *const &'static usize;
let _64: char;
let _65: char;
let _66: isize;
let _67: f64;
let _68: u16;
let _69: &'static *const (i8, [u32; 2], [i32; 7], u32);
let _70: *const (i8, [u32; 2], [i32; 7], u32);
let _71: *const [i32; 2];
let _72: [u128; 5];
let _73: bool;
let _74: *const &'static *const (i8, [u32; 2], [i32; 7], u32);
let _75: u32;
let _76: f32;
let _77: i64;
let _78: isize;
let _79: u64;
let _80: ((f64, usize, bool),);
let _81: u16;
let _82: i8;
let _83: *const Adt51;
let _84: f64;
let _85: &'static mut i16;
let _86: *const (i8,);
let _87: i128;
let _88: *const (i8, [u32; 2], [i32; 7], u32);
let _89: isize;
let _90: usize;
let _91: &'static i64;
let _92: u128;
let _93: bool;
let _94: char;
let _95: f64;
let _96: [i128; 8];
let _97: i8;
let _98: f32;
let _99: &'static [u8; 1];
let _100: f32;
let _101: usize;
let _102: *const (i8, [u32; 2], [i32; 7], u32);
let _103: &'static mut i16;
let _104: *mut [u32; 2];
let _105: char;
let _106: i32;
let _107: *mut [i32; 7];
let _108: *const [i32; 2];
let _109: i64;
let _110: *mut (&'static i64, u16, (i8,));
let _111: isize;
let _112: char;
let _113: *const &'static mut &'static mut (*mut i16, usize, char);
let _114: [i32; 2];
let _115: *const Adt28;
let _116: bool;
let _117: bool;
let _118: f32;
let _119: [u64; 5];
let _120: ();
let _121: ();
{
_6 = core::ptr::addr_of_mut!(_7);
(*_6) = [(-1673330950_i32),(-241866426_i32),172606536_i32,751126860_i32,(-2009249281_i32),(-135435_i32),(-1801912169_i32)];
(*_6) = [1227429008_i32,(-267583026_i32),1141442281_i32,910689024_i32,(-675002866_i32),(-517712399_i32),1727835609_i32];
(*_6) = [2010372683_i32,(-1378873126_i32),359225334_i32,(-581886273_i32),153455960_i32,(-562228968_i32),1454529118_i32];
(*_6) = [318010489_i32,168143591_i32,(-828322103_i32),352487670_i32,(-364039920_i32),1650679858_i32,(-19364039_i32)];
(*_6) = [(-1635836351_i32),1665891903_i32,(-361949722_i32),(-1534518597_i32),(-810295062_i32),(-248067048_i32),(-988264732_i32)];
(*_6) = [1856086768_i32,(-1679225240_i32),(-1349192953_i32),(-2076544435_i32),1344899958_i32,164924878_i32,(-1779210548_i32)];
(*_6) = [1538291567_i32,(-1718999447_i32),(-1062806281_i32),1427752942_i32,192865479_i32,1109587602_i32,1049069478_i32];
(*_6) = [656844609_i32,(-751895437_i32),(-56598628_i32),(-1292234976_i32),248311945_i32,(-1771850886_i32),867830723_i32];
_1 = _9;
(*_6) = [120945255_i32,(-1391252710_i32),(-865443044_i32),(-379083724_i32),170666983_i32,(-2130458502_i32),2120999552_i32];
(*_6) = [35038668_i32,(-827667248_i32),(-673747332_i32),(-1657453773_i32),(-1763617777_i32),1758974905_i32,1352804965_i32];
(*_6) = [(-2036799001_i32),(-940507305_i32),(-31674523_i32),(-115624171_i32),1649030678_i32,1877542239_i32,1789631551_i32];
_5 = [1974930125_i32,2121828713_i32];
_2 = core::ptr::addr_of!(_5);
(*_2) = [2093202443_i32,(-1282746084_i32)];
(*_6) = [(-1093541300_i32),32981616_i32,(-1895190997_i32),1065258518_i32,1438014820_i32,246093094_i32,(-261818062_i32)];
(*_2) = [1016233706_i32,(-1662315065_i32)];
(*_6) = [(-1144757308_i32),(-88377313_i32),(-144371659_i32),1216035612_i32,1369655509_i32,1003414923_i32,620952882_i32];
_8 = !(-9223372036854775808_isize);
(*_6) = [1571748132_i32,(-1869598794_i32),1378365340_i32,(-1774656885_i32),539344152_i32,(-1875732954_i32),(-409657681_i32)];
(*_6) = [(-51917204_i32),1166658602_i32,1712182198_i32,(-1869739706_i32),(-495666053_i32),(-1636463327_i32),1303621973_i32];
(*_6) = [(-1204499545_i32),472002265_i32,541724951_i32,1918794280_i32,676167640_i32,(-2139964161_i32),(-1137597423_i32)];
Goto(bb1)
}
bb1 = {
(*_2) = [(-376444877_i32),(-1594253092_i32)];
(*_6) = [624048544_i32,(-953636940_i32),(-848177437_i32),374495325_i32,1357903753_i32,(-1323757010_i32),(-352644341_i32)];
(*_6) = [212491817_i32,1002779026_i32,383094641_i32,(-339364631_i32),(-846659234_i32),(-1411086717_i32),(-1446815416_i32)];
(*_2) = [(-85089338_i32),915631472_i32];
(*_2) = [(-1313386343_i32),(-1624608158_i32)];
(*_2) = [(-1873148690_i32),(-935018504_i32)];
(*_2) = [(-1807964222_i32),(-83946813_i32)];
RET = (-15_i8) - (-106_i8);
(*_6) = [979929084_i32,1631581551_i32,(-1419685201_i32),(-1044300908_i32),422641216_i32,100935591_i32,1262276155_i32];
_13 = [113_u8,35_u8,38_u8,176_u8,201_u8,170_u8,228_u8];
_5 = [1674147061_i32,(-749753765_i32)];
(*_2) = [649886910_i32,(-1050120633_i32)];
_15.2 = [_10,_10];
(*_2) = [(-32104255_i32),(-462920313_i32)];
_15.0.1 = !4149189703979590496_u64;
(*_6) = [(-1334817412_i32),115285875_i32,1903945834_i32,(-138838562_i32),(-129089233_i32),1787280718_i32,1059193101_i32];
_7 = [(-176457404_i32),2067486181_i32,1699135983_i32,(-569447521_i32),1393163419_i32,1141447070_i32,61251436_i32];
_5 = [614930049_i32,896570352_i32];
_11 = !4118719854246890248963822070095740883_u128;
(*_2) = [2061305909_i32,1904120297_i32];
(*_6) = [1715493328_i32,99853746_i32,4068364_i32,(-2027768449_i32),(-707640412_i32),(-826347154_i32),(-768660433_i32)];
(*_2) = [760667904_i32,(-1443432217_i32)];
(*_2) = [757514428_i32,(-1791369690_i32)];
_17 = !_10;
_1 = _9;
Goto(bb2)
}
bb2 = {
_11 = 186831134655342718546855415671803640191_u128 | 75719361080805880571799198246412160581_u128;
_14 = [_15.0.1,_15.0.1,_15.0.1,_15.0.1,_15.0.1];
_18 = !_8;
_16 = &mut _8;
(*_6) = [(-888175786_i32),1227508352_i32,603893849_i32,(-550648693_i32),1207931217_i32,432860649_i32,938167454_i32];
(*_6) = [273803644_i32,(-1208911713_i32),(-189914975_i32),1515279215_i32,745821820_i32,1413476631_i32,(-1323381674_i32)];
_10 = _17 ^ _17;
(*_2) = [498812639_i32,(-1678173696_i32)];
(*_16) = 20_u8 as isize;
Goto(bb3)
}
bb3 = {
(*_2) = [212892407_i32,1025796151_i32];
(*_2) = [1218578456_i32,(-924514731_i32)];
(*_6) = [(-903860633_i32),1732193199_i32,2035826871_i32,(-1786925820_i32),(-759078418_i32),(-850144061_i32),455771773_i32];
_16 = &mut _18;
(*_16) = 34_isize << _10;
(*_16) = (-9223372036854775808_isize);
(*_16) = -9223372036854775807_isize;
(*_16) = -(-9223372036854775808_isize);
_15.1 = (*_16) != (*_16);
(*_6) = [1344303938_i32,(-64115496_i32),1475989326_i32,(-115046632_i32),280847200_i32,1311724314_i32,1629059616_i32];
(*_2) = [(-1841891776_i32),(-1548337501_i32)];
Goto(bb4)
}
bb4 = {
(*_2) = [1842424082_i32,764952047_i32];
(*_16) = _1 as isize;
_15.1 = _1;
(*_6) = [(-728180458_i32),706050587_i32,897893366_i32,(-168279508_i32),(-985359530_i32),(-1070606592_i32),(-511502824_i32)];
(*_6) = [136936627_i32,2006424127_i32,1454051789_i32,1016944588_i32,(-313568848_i32),359837691_i32,(-1794265244_i32)];
(*_6) = [(-241291302_i32),6850980_i32,1125214284_i32,1005618438_i32,(-463057375_i32),750661487_i32,655170150_i32];
_11 = RET as u128;
_5 = [(-182922298_i32),2099968814_i32];
_10 = _17;
(*_16) = 169_u8 as isize;
(*_6) = [(-1458235178_i32),(-1394976763_i32),(-1177365273_i32),(-1550674496_i32),(-575886052_i32),(-688459944_i32),471871608_i32];
(*_2) = [(-812242720_i32),(-121346297_i32)];
(*_16) = 9223372036854775807_isize;
_20.fld0.2 = _9 > _9;
_2 = core::ptr::addr_of!((*_2));
(*_6) = [(-1542193343_i32),(-1628220044_i32),(-2052230066_i32),92127537_i32,(-1237904196_i32),1868693463_i32,(-1433356037_i32)];
(*_16) = 5_usize as isize;
_2 = Move(_4);
(*_16) = (-104_isize);
_1 = _15.1 | _15.1;
_3 = core::ptr::addr_of_mut!(_15.2);
Goto(bb5)
}
bb5 = {
(*_3) = [_17,_10];
(*_3) = [_17,_17];
_20.fld0.2 = !_9;
Goto(bb6)
}
bb6 = {
(*_16) = -39_isize;
(*_3) = [_17,_10];
_20.fld0.2 = _1 > _15.1;
(*_16) = (-9223372036854775808_isize) & (-126_isize);
(*_16) = 9223372036854775807_isize * 9223372036854775807_isize;
_20.fld0.0 = (-1890304502_i32) as f64;
(*_3) = [_10,_17];
(*_6) = [690414495_i32,970050703_i32,715933484_i32,29936961_i32,(-616258959_i32),1126104189_i32,(-173777560_i32)];
(*_16) = _20.fld0.0 as isize;
_10 = _17 | _17;
(*_6) = [(-1166774497_i32),(-1646412369_i32),(-1496621272_i32),1145508596_i32,(-553635626_i32),(-380717015_i32),1031377658_i32];
_20.fld0.1 = (-161175227144621571388766042790496096588_i128) as usize;
_25 = _1;
(*_3) = [_10,_10];
(*_16) = 9223372036854775807_isize >> _17;
(*_3) = [_17,_10];
(*_16) = (-134794826502964320110518785541238364553_i128) as isize;
(*_16) = (-9223372036854775808_isize) | 9223372036854775807_isize;
Goto(bb7)
}
bb7 = {
(*_6) = [655068271_i32,1202288352_i32,1202884798_i32,(-736465017_i32),1289353997_i32,(-237558611_i32),(-1890673509_i32)];
(*_3) = [_10,_10];
_20.fld3 = _17;
_29 = core::ptr::addr_of!(_20.fld1);
(*_29) = [_11,_11,_11,_11,_11];
(*_29) = [_11,_11,_11,_11,_11];
(*_29) = [_11,_11,_11,_11,_11];
(*_6) = [(-572761274_i32),848838036_i32,811958130_i32,(-1104526543_i32),(-1556011606_i32),286188266_i32,2020839388_i32];
_24.1 = 42411_u16 + 27380_u16;
_31 = _20.fld0.0 as isize;
Goto(bb8)
}
bb8 = {
(*_3) = [_17,_17];
(*_16) = _31 - _31;
_20.fld1 = [_11,_11,_11,_11,_11];
_20.fld0.2 = _15.1;
(*_3) = [_10,_10];
(*_16) = 20944_i16 as isize;
(*_29) = [_11,_11,_11,_11,_11];
(*_6) = [342719190_i32,1744141227_i32,(-1000710870_i32),36494825_i32,(-1101277978_i32),1335654682_i32,443439195_i32];
_20.fld0.0 = _15.0.1 as f64;
_29 = core::ptr::addr_of!(_20.fld1);
(*_3) = [_17,_10];
(*_29) = [_11,_11,_11,_11,_11];
(*_16) = _31;
_2 = core::ptr::addr_of!(_5);
_24.2.0 = RET << (*_16);
(*_16) = !_31;
(*_3) = [_17,_20.fld3];
(*_3) = [_17,_10];
_2 = core::ptr::addr_of!((*_2));
Goto(bb9)
}
bb9 = {
(*_29) = [_11,_11,_11,_11,_11];
(*_3) = [_17,_10];
(*_16) = -_31;
_20.fld0.1 = 16318352720339505273_usize - 8804120625271653941_usize;
_25 = _1;
(*_29) = [_11,_11,_11,_11,_11];
(*_6) = [(-2053319404_i32),690498482_i32,(-138429093_i32),1991836412_i32,439021190_i32,(-1235584592_i32),(-1999113588_i32)];
(*_3) = [_20.fld3,_20.fld3];
(*_16) = -_31;
_39 = _20.fld0.0 - _20.fld0.0;
(*_29) = [_11,_11,_11,_11,_11];
Call((*_16) = core::intrinsics::bswap(_31), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
(*_29) = [_11,_11,_11,_11,_11];
(*_2) = [(-574511137_i32),(-1229242071_i32)];
(*_3) = [_17,_10];
_41 = _17;
_15.2 = [_20.fld3,_17];
(*_16) = _31 >> _15.0.1;
(*_16) = _31 << _10;
(*_29) = [_11,_11,_11,_11,_11];
_20.fld2 = Adt28::Variant0 { fld0: _9,fld1: '\u{75c45}',fld2: _20.fld0,fld3: 1713840457_i32,fld4: _39 };
_47 = _11 & _11;
_43 = (*_16) * (*_16);
(*_2) = [59411688_i32,(-437965703_i32)];
_25 = !_1;
(*_29) = [_11,_47,_47,_47,_47];
(*_3) = [_41,_10];
(*_6) = [(-1483750648_i32),(-506507619_i32),(-49643713_i32),1627699536_i32,(-495136692_i32),618061470_i32,2103652178_i32];
(*_6) = [1437320349_i32,844593880_i32,(-1586949194_i32),(-1033681029_i32),362846434_i32,74809019_i32,1560979784_i32];
place!(Field::<(f64, usize, bool)>(Variant(_20.fld2, 0), 2)).0 = -_39;
(*_29) = [_11,_11,_47,_47,_11];
(*_29) = [_47,_47,_47,_47,_11];
(*_29) = [_11,_11,_47,_11,_47];
Goto(bb11)
}
bb11 = {
(*_6) = [(-41772573_i32),(-2094357515_i32),(-2026882083_i32),(-86645036_i32),1565422093_i32,(-1942140404_i32),(-584230592_i32)];
_11 = '\u{ad44e}' as u128;
place!(Field::<(f64, usize, bool)>(Variant(_20.fld2, 0), 2)).2 = Field::<bool>(Variant(_20.fld2, 0), 0);
Goto(bb12)
}
bb12 = {
place!(Field::<char>(Variant(_20.fld2, 0), 1)) = '\u{aac44}';
(*_6) = [(-1087910385_i32),2131288401_i32,530147118_i32,(-2123670922_i32),1176906496_i32,83621173_i32,(-1661181403_i32)];
(*_6) = [231924155_i32,2025364677_i32,1665097342_i32,(-841047774_i32),(-1697944144_i32),743958_i32,1722225519_i32];
place!(Field::<(f64, usize, bool)>(Variant(_20.fld2, 0), 2)).1 = !_20.fld0.1;
(*_29) = [_47,_47,_47,_47,_47];
_38 = (_1, _47, Field::<(f64, usize, bool)>(Variant(_20.fld2, 0), 2).1);
(*_16) = _43;
(*_16) = _43;
_46 = Field::<char>(Variant(_20.fld2, 0), 1);
_1 = Field::<bool>(Variant(_20.fld2, 0), 0);
RET = _24.1 as i8;
(*_29) = [_47,_47,_38.1,_38.1,_47];
_19 = !_25;
(*_16) = _43 - _43;
_20.fld4 = (*_2);
(*_6) = [1895514678_i32,1935741553_i32,(-637432881_i32),1351561282_i32,(-1165311976_i32),2063606343_i32,461424361_i32];
(*_6) = [797210161_i32,500743435_i32,(-1960056262_i32),(-956542171_i32),1685814306_i32,(-2008077264_i32),1888534931_i32];
_41 = _20.fld3 >> (*_16);
(*_3) = [_41,_41];
(*_2) = _20.fld4;
Goto(bb13)
}
bb13 = {
(*_16) = _15.0.1 as isize;
(*_3) = [_41,_20.fld3];
_2 = core::ptr::addr_of!((*_2));
_20.fld1 = [_47,_11,_47,_38.1,_47];
(*_16) = _38.1 as isize;
place!(Field::<bool>(Variant(_20.fld2, 0), 0)) = Field::<(f64, usize, bool)>(Variant(_20.fld2, 0), 2).2 & _25;
_7 = [1424661574_i32,814734330_i32,1280805071_i32,(-1007222835_i32),(-1400418376_i32),1442270319_i32,2082211524_i32];
_30 = (RET,);
Goto(bb14)
}
bb14 = {
_12 = _38.2;
_7 = [(-48616946_i32),610963162_i32,1156321771_i32,1440608757_i32,1118539042_i32,1498356373_i32,479153938_i32];
_34 = _24.2;
_15.2 = [_41,_41];
_22 = Field::<char>(Variant(_20.fld2, 0), 1);
_60.2 = _24.2;
(*_16) = _43 + _43;
Goto(bb15)
}
bb15 = {
_22 = Field::<char>(Variant(_20.fld2, 0), 1);
(*_6) = [1548981068_i32,(-187235298_i32),(-1318203694_i32),(-8514599_i32),634122477_i32,1288621087_i32,1686242249_i32];
(*_16) = _43 | _43;
_33 = [(-25237_i16),(-26847_i16),(-27219_i16),(-19111_i16),(-513_i16),28489_i16,24136_i16];
(*_2) = [(-986037223_i32),960717340_i32];
_59.1 = _41 ^ _41;
place!(Field::<f64>(Variant(_20.fld2, 0), 4)) = _39 - _39;
_34 = _60.2;
_57 = Move(_3);
(*_29) = [_38.1,_47,_38.1,_47,_38.1];
(*_2) = _20.fld4;
(*_29) = [_38.1,_47,_47,_38.1,_11];
(*_16) = _43;
(*_6) = [(-2029119806_i32),1267984787_i32,2076823701_i32,(-1868750356_i32),2083450538_i32,(-886328766_i32),(-446536415_i32)];
(*_29) = [_47,_38.1,_47,_47,_47];
_20.fld0.0 = Field::<f64>(Variant(_20.fld2, 0), 4) + Field::<(f64, usize, bool)>(Variant(_20.fld2, 0), 2).0;
_60.1 = _24.1 - _24.1;
(*_2) = [1710841911_i32,682758365_i32];
_42 = &_19;
(*_6) = [(-282743108_i32),1181959153_i32,782316161_i32,1612834456_i32,(-1169915919_i32),1591045384_i32,2068503640_i32];
(*_6) = [775075311_i32,194726936_i32,(-1069509678_i32),1948560319_i32,1991214713_i32,(-624020142_i32),499672091_i32];
_29 = core::ptr::addr_of!((*_29));
Goto(bb16)
}
bb16 = {
place!(Field::<char>(Variant(_20.fld2, 0), 1)) = _22;
_24.1 = !_60.1;
_40 = _34.0;
_60.2.0 = (*_42) as i8;
_20.fld0 = (_39, _12, _1);
Goto(bb17)
}
bb17 = {
(*_29) = [_47,_47,_38.1,_47,_47];
(*_16) = 138_u8 as isize;
(*_29) = [_11,_47,_47,_38.1,_38.1];
(*_2) = [(-1627194712_i32),(-909119280_i32)];
_55 = core::ptr::addr_of!((*_2));
(*_16) = _60.2.0 as isize;
(*_29) = [_47,_47,_11,_47,_38.1];
_24.1 = _60.1 >> (*_16);
(*_29) = [_38.1,_38.1,_11,_47,_38.1];
(*_16) = -_43;
_36 = Field::<(f64, usize, bool)>(Variant(_20.fld2, 0), 2).0 + Field::<f64>(Variant(_20.fld2, 0), 4);
_52 = _47 & _38.1;
(*_29) = [_38.1,_52,_52,_38.1,_11];
_60.2.0 = -_24.2.0;
(*_55) = [816193425_i32,(-1150058068_i32)];
(*_16) = _43 ^ _43;
_38 = (Field::<(f64, usize, bool)>(Variant(_20.fld2, 0), 2).2, _52, _20.fld0.1);
_34 = (RET,);
(*_6) = [305840313_i32,328603102_i32,(-896597295_i32),547716628_i32,839314489_i32,(-1937047378_i32),(-1866248940_i32)];
_19 = (*_16) >= (*_16);
_9 = _20.fld0.2;
_53 = (-159333156246337743177706041238026002001_i128) as f32;
Goto(bb18)
}
bb18 = {
_24.1 = !_60.1;
_22 = _46;
(*_2) = _20.fld4;
(*_29) = [_47,_38.1,_52,_38.1,_52];
(*_6) = [(-2930698_i32),969174669_i32,(-1536689472_i32),(-1774838077_i32),(-130397936_i32),(-2022466916_i32),724001795_i32];
Goto(bb19)
}
bb19 = {
_25 = _38.0 > _19;
place!(Field::<i32>(Variant(_20.fld2, 0), 3)) = 588749067_i32 * 794074771_i32;
_20.fld0.1 = _38.2;
(*_6) = [Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3)];
_25 = _20.fld0.2 >= _19;
_34 = (_40,);
_6 = core::ptr::addr_of_mut!((*_6));
_30 = (_34.0,);
_3 = core::ptr::addr_of_mut!(_15.2);
(*_6) = [Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3)];
(*_6) = [Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3)];
_54 = [_38.1,_47,_38.1,_38.1,_52];
(*_6) = [Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3)];
_29 = core::ptr::addr_of!((*_29));
_47 = _59.1 as u128;
_58 = _22;
_39 = _20.fld0.0 - Field::<f64>(Variant(_20.fld2, 0), 4);
(*_16) = -_43;
(*_29) = [_47,_47,_47,_47,_52];
(*_2) = [Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3)];
(*_29) = [_52,_47,_47,_47,_47];
_59.0 = ((*_16),);
_20.fld0 = (_36, _12, _25);
(*_2) = _20.fld4;
_4 = core::ptr::addr_of!((*_2));
_12 = _38.2 - _38.2;
Goto(bb20)
}
bb20 = {
(*_3) = [_59.1,_59.1];
(*_3) = [_10,_59.1];
(*_4) = [Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3)];
place!(Field::<bool>(Variant(_20.fld2, 0), 0)) = _25;
_20.fld3 = !_41;
(*_3) = [_20.fld3,_20.fld3];
_13 = [109_u8,4_u8,142_u8,43_u8,121_u8,66_u8,92_u8];
(*_3) = [_20.fld3,_59.1];
_58 = _46;
_32 = _46;
_45 = _20.fld0.2;
_13 = [200_u8,128_u8,93_u8,103_u8,185_u8,193_u8,239_u8];
(*_29) = _54;
_58 = _46;
(*_6) = [Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3)];
_72 = [_47,_47,_47,_47,_47];
Goto(bb21)
}
bb21 = {
(*_4) = [Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3)];
_20.fld0.1 = !Field::<(f64, usize, bool)>(Variant(_20.fld2, 0), 2).1;
(*_3) = [_59.1,_59.1];
_45 = _47 > _52;
_65 = _46;
(*_4) = [Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3)];
_38 = (_19, _47, _12);
(*_6) = [Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3)];
(*_4) = [Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3)];
place!(Field::<(f64, usize, bool)>(Variant(_20.fld2, 0), 2)) = (_20.fld0.0, _12, _25);
(*_29) = [_38.1,_38.1,_47,_47,_38.1];
Goto(bb22)
}
bb22 = {
_44 = core::ptr::addr_of!((*_29));
_66 = -_59.0.0;
_34.0 = _40 * _24.2.0;
(*_4) = _20.fld4;
place!(Field::<(f64, usize, bool)>(Variant(_20.fld2, 0), 2)).2 = Field::<bool>(Variant(_20.fld2, 0), 0) >= _38.0;
(*_4) = [Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3)];
_61 = (*_16) & (*_16);
(*_29) = [_47,_47,_38.1,_47,_38.1];
Goto(bb23)
}
bb23 = {
(*_4) = [Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3)];
place!(Field::<(f64, usize, bool)>(Variant(_20.fld2, 0), 2)).0 = 246_u8 as f64;
(*_4) = _20.fld4;
_46 = Field::<char>(Variant(_20.fld2, 0), 1);
(*_29) = [_47,_47,_38.1,_38.1,_38.1];
_57 = core::ptr::addr_of_mut!((*_3));
(*_4) = _20.fld4;
(*_57) = [_20.fld3,_20.fld3];
(*_29) = _72;
(*_2) = [Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3)];
place!(Field::<(f64, usize, bool)>(Variant(_20.fld2, 0), 2)) = _20.fld0;
_66 = !(*_16);
(*_57) = [_59.1,_20.fld3];
_4 = core::ptr::addr_of!((*_2));
_33 = [20550_i16,(-4309_i16),(-19296_i16),8177_i16,31285_i16,24476_i16,(-14384_i16)];
(*_29) = [_47,_47,_52,_47,_38.1];
(*_4) = [Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3)];
(*_6) = [Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3)];
(*_6) = [Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3)];
(*_4) = [Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3)];
_80.0.1 = Field::<char>(Variant(_20.fld2, 0), 1) as usize;
Call(_67 = core::intrinsics::transmute((*_4)), ReturnTo(bb24), UnwindUnreachable())
}
bb24 = {
(*_29) = [_47,_47,_38.1,_52,_47];
(*_2) = [Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3)];
(*_2) = _20.fld4;
_17 = _20.fld0.0 as u32;
(*_29) = [_47,_38.1,_38.1,_38.1,_38.1];
_60.1 = (-7298585895181601325_i64) as u16;
_48 = _58;
(*_6) = [Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3)];
_80.0.0 = _39 * _67;
_60.2 = (_30.0,);
(*_16) = _43 ^ _61;
_6 = core::ptr::addr_of_mut!((*_6));
_20.fld4 = [Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3)];
_80.0.2 = _38.0 & Field::<bool>(Variant(_20.fld2, 0), 0);
(*_2) = _20.fld4;
(*_2) = _20.fld4;
(*_6) = [Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3)];
(*_29) = [_47,_38.1,_38.1,_52,_47];
_59.0 = ((*_16),);
_84 = Field::<f64>(Variant(_20.fld2, 0), 4) * Field::<f64>(Variant(_20.fld2, 0), 4);
_15.2 = [_20.fld3,_41];
_15.0.1 = 13777679218018593522_u64;
(*_2) = [Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3)];
(*_16) = _61 - _59.0.0;
(*_3) = [_41,_59.1];
(*_29) = [_47,_47,_47,_38.1,_47];
Goto(bb25)
}
bb25 = {
(*_16) = _59.0.0 & _66;
(*_6) = [Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3)];
_78 = !(*_16);
_71 = core::ptr::addr_of!((*_2));
_64 = _48;
(*_29) = [_47,_38.1,_47,_52,_38.1];
_38 = (_20.fld0.2, _47, Field::<(f64, usize, bool)>(Variant(_20.fld2, 0), 2).1);
(*_29) = [_47,_47,_38.1,_38.1,_38.1];
match _15.0.1 {
0 => bb1,
1 => bb26,
2 => bb27,
3 => bb28,
4 => bb29,
13777679218018593522 => bb31,
_ => bb30
}
}
bb26 = {
(*_29) = [_11,_11,_11,_11,_11];
(*_3) = [_17,_10];
(*_16) = -_31;
_20.fld0.1 = 16318352720339505273_usize - 8804120625271653941_usize;
_25 = _1;
(*_29) = [_11,_11,_11,_11,_11];
(*_6) = [(-2053319404_i32),690498482_i32,(-138429093_i32),1991836412_i32,439021190_i32,(-1235584592_i32),(-1999113588_i32)];
(*_3) = [_20.fld3,_20.fld3];
(*_16) = -_31;
_39 = _20.fld0.0 - _20.fld0.0;
(*_29) = [_11,_11,_11,_11,_11];
Call((*_16) = core::intrinsics::bswap(_31), ReturnTo(bb10), UnwindUnreachable())
}
bb27 = {
(*_3) = [_17,_17];
(*_16) = _31 - _31;
_20.fld1 = [_11,_11,_11,_11,_11];
_20.fld0.2 = _15.1;
(*_3) = [_10,_10];
(*_16) = 20944_i16 as isize;
(*_29) = [_11,_11,_11,_11,_11];
(*_6) = [342719190_i32,1744141227_i32,(-1000710870_i32),36494825_i32,(-1101277978_i32),1335654682_i32,443439195_i32];
_20.fld0.0 = _15.0.1 as f64;
_29 = core::ptr::addr_of!(_20.fld1);
(*_3) = [_17,_10];
(*_29) = [_11,_11,_11,_11,_11];
(*_16) = _31;
_2 = core::ptr::addr_of!(_5);
_24.2.0 = RET << (*_16);
(*_16) = !_31;
(*_3) = [_17,_20.fld3];
(*_3) = [_17,_10];
_2 = core::ptr::addr_of!((*_2));
Goto(bb9)
}
bb28 = {
_44 = core::ptr::addr_of!((*_29));
_66 = -_59.0.0;
_34.0 = _40 * _24.2.0;
(*_4) = _20.fld4;
place!(Field::<(f64, usize, bool)>(Variant(_20.fld2, 0), 2)).2 = Field::<bool>(Variant(_20.fld2, 0), 0) >= _38.0;
(*_4) = [Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3)];
_61 = (*_16) & (*_16);
(*_29) = [_47,_47,_38.1,_47,_38.1];
Goto(bb23)
}
bb29 = {
(*_2) = [212892407_i32,1025796151_i32];
(*_2) = [1218578456_i32,(-924514731_i32)];
(*_6) = [(-903860633_i32),1732193199_i32,2035826871_i32,(-1786925820_i32),(-759078418_i32),(-850144061_i32),455771773_i32];
_16 = &mut _18;
(*_16) = 34_isize << _10;
(*_16) = (-9223372036854775808_isize);
(*_16) = -9223372036854775807_isize;
(*_16) = -(-9223372036854775808_isize);
_15.1 = (*_16) != (*_16);
(*_6) = [1344303938_i32,(-64115496_i32),1475989326_i32,(-115046632_i32),280847200_i32,1311724314_i32,1629059616_i32];
(*_2) = [(-1841891776_i32),(-1548337501_i32)];
Goto(bb4)
}
bb30 = {
(*_3) = [_17,_10];
(*_3) = [_17,_17];
_20.fld0.2 = !_9;
Goto(bb6)
}
bb31 = {
(*_6) = [Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3)];
_11 = _47 - _47;
_82 = _30.0 - RET;
(*_71) = [Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3)];
_48 = _32;
(*_16) = _84 as isize;
(*_3) = [_20.fld3,_59.1];
(*_2) = [Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3)];
_40 = _39 as i8;
_93 = _1 & _20.fld0.2;
_34.0 = _82 & _82;
_75 = _20.fld3;
_38 = (_45, _47, _12);
(*_29) = _72;
(*_3) = [_20.fld3,_41];
_83 = core::ptr::addr_of!(_20);
(*_83).fld3 = _75;
(*_83).fld0 = _80.0;
place!(Field::<bool>(Variant((*_83).fld2, 0), 0)) = (*_83).fld0.2 | (*_83).fld0.2;
(*_29) = [_11,_52,_47,_11,_38.1];
(*_83).fld0.0 = Field::<(f64, usize, bool)>(Variant((*_83).fld2, 0), 2).0 + Field::<(f64, usize, bool)>(Variant((*_83).fld2, 0), 2).0;
place!(Field::<bool>(Variant((*_83).fld2, 0), 0)) = _15.1 != Field::<(f64, usize, bool)>(Variant((*_83).fld2, 0), 2).2;
place!(Field::<(f64, usize, bool)>(Variant((*_83).fld2, 0), 2)).2 = Field::<bool>(Variant((*_83).fld2, 0), 0) & Field::<bool>(Variant((*_83).fld2, 0), 0);
match _15.0.1 {
0 => bb32,
1 => bb33,
2 => bb34,
3 => bb35,
13777679218018593522 => bb37,
_ => bb36
}
}
bb32 = {
(*_2) = [1842424082_i32,764952047_i32];
(*_16) = _1 as isize;
_15.1 = _1;
(*_6) = [(-728180458_i32),706050587_i32,897893366_i32,(-168279508_i32),(-985359530_i32),(-1070606592_i32),(-511502824_i32)];
(*_6) = [136936627_i32,2006424127_i32,1454051789_i32,1016944588_i32,(-313568848_i32),359837691_i32,(-1794265244_i32)];
(*_6) = [(-241291302_i32),6850980_i32,1125214284_i32,1005618438_i32,(-463057375_i32),750661487_i32,655170150_i32];
_11 = RET as u128;
_5 = [(-182922298_i32),2099968814_i32];
_10 = _17;
(*_16) = 169_u8 as isize;
(*_6) = [(-1458235178_i32),(-1394976763_i32),(-1177365273_i32),(-1550674496_i32),(-575886052_i32),(-688459944_i32),471871608_i32];
(*_2) = [(-812242720_i32),(-121346297_i32)];
(*_16) = 9223372036854775807_isize;
_20.fld0.2 = _9 > _9;
_2 = core::ptr::addr_of!((*_2));
(*_6) = [(-1542193343_i32),(-1628220044_i32),(-2052230066_i32),92127537_i32,(-1237904196_i32),1868693463_i32,(-1433356037_i32)];
(*_16) = 5_usize as isize;
_2 = Move(_4);
(*_16) = (-104_isize);
_1 = _15.1 | _15.1;
_3 = core::ptr::addr_of_mut!(_15.2);
Goto(bb5)
}
bb33 = {
(*_2) = [212892407_i32,1025796151_i32];
(*_2) = [1218578456_i32,(-924514731_i32)];
(*_6) = [(-903860633_i32),1732193199_i32,2035826871_i32,(-1786925820_i32),(-759078418_i32),(-850144061_i32),455771773_i32];
_16 = &mut _18;
(*_16) = 34_isize << _10;
(*_16) = (-9223372036854775808_isize);
(*_16) = -9223372036854775807_isize;
(*_16) = -(-9223372036854775808_isize);
_15.1 = (*_16) != (*_16);
(*_6) = [1344303938_i32,(-64115496_i32),1475989326_i32,(-115046632_i32),280847200_i32,1311724314_i32,1629059616_i32];
(*_2) = [(-1841891776_i32),(-1548337501_i32)];
Goto(bb4)
}
bb34 = {
_24.1 = !_60.1;
_22 = _46;
(*_2) = _20.fld4;
(*_29) = [_47,_38.1,_52,_38.1,_52];
(*_6) = [(-2930698_i32),969174669_i32,(-1536689472_i32),(-1774838077_i32),(-130397936_i32),(-2022466916_i32),724001795_i32];
Goto(bb19)
}
bb35 = {
(*_3) = [_59.1,_59.1];
(*_3) = [_10,_59.1];
(*_4) = [Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3)];
place!(Field::<bool>(Variant(_20.fld2, 0), 0)) = _25;
_20.fld3 = !_41;
(*_3) = [_20.fld3,_20.fld3];
_13 = [109_u8,4_u8,142_u8,43_u8,121_u8,66_u8,92_u8];
(*_3) = [_20.fld3,_59.1];
_58 = _46;
_32 = _46;
_45 = _20.fld0.2;
_13 = [200_u8,128_u8,93_u8,103_u8,185_u8,193_u8,239_u8];
(*_29) = _54;
_58 = _46;
(*_6) = [Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3)];
_72 = [_47,_47,_47,_47,_47];
Goto(bb21)
}
bb36 = {
(*_16) = -39_isize;
(*_3) = [_17,_10];
_20.fld0.2 = _1 > _15.1;
(*_16) = (-9223372036854775808_isize) & (-126_isize);
(*_16) = 9223372036854775807_isize * 9223372036854775807_isize;
_20.fld0.0 = (-1890304502_i32) as f64;
(*_3) = [_10,_17];
(*_6) = [690414495_i32,970050703_i32,715933484_i32,29936961_i32,(-616258959_i32),1126104189_i32,(-173777560_i32)];
(*_16) = _20.fld0.0 as isize;
_10 = _17 | _17;
(*_6) = [(-1166774497_i32),(-1646412369_i32),(-1496621272_i32),1145508596_i32,(-553635626_i32),(-380717015_i32),1031377658_i32];
_20.fld0.1 = (-161175227144621571388766042790496096588_i128) as usize;
_25 = _1;
(*_3) = [_10,_10];
(*_16) = 9223372036854775807_isize >> _17;
(*_3) = [_17,_10];
(*_16) = (-134794826502964320110518785541238364553_i128) as isize;
(*_16) = (-9223372036854775808_isize) | 9223372036854775807_isize;
Goto(bb7)
}
bb37 = {
place!(Field::<bool>(Variant((*_83).fld2, 0), 0)) = _75 >= (*_83).fld3;
(*_29) = [_11,_11,_11,_47,_47];
(*_83).fld4 = [Field::<i32>(Variant((*_83).fld2, 0), 3),Field::<i32>(Variant((*_83).fld2, 0), 3)];
(*_2) = (*_83).fld4;
_30.0 = _60.2.0 - _34.0;
_38 = (Field::<bool>(Variant((*_83).fld2, 0), 0), _47, Field::<(f64, usize, bool)>(Variant((*_83).fld2, 0), 2).1);
(*_6) = [Field::<i32>(Variant((*_83).fld2, 0), 3),Field::<i32>(Variant((*_83).fld2, 0), 3),Field::<i32>(Variant((*_83).fld2, 0), 3),Field::<i32>(Variant((*_83).fld2, 0), 3),Field::<i32>(Variant((*_83).fld2, 0), 3),Field::<i32>(Variant((*_83).fld2, 0), 3),Field::<i32>(Variant((*_83).fld2, 0), 3)];
(*_6) = [Field::<i32>(Variant((*_83).fld2, 0), 3),Field::<i32>(Variant((*_83).fld2, 0), 3),Field::<i32>(Variant((*_83).fld2, 0), 3),Field::<i32>(Variant((*_83).fld2, 0), 3),Field::<i32>(Variant((*_83).fld2, 0), 3),Field::<i32>(Variant((*_83).fld2, 0), 3),Field::<i32>(Variant((*_83).fld2, 0), 3)];
place!(Field::<char>(Variant((*_83).fld2, 0), 1)) = _58;
(*_83).fld2 = Adt28::Variant1 { fld0: (*_83).fld0.2,fld1: _80,fld2: (*_83).fld3 };
_68 = _60.1;
_32 = _22;
(*_29) = _72;
(*_83).fld0.0 = Field::<((f64, usize, bool),)>(Variant((*_83).fld2, 1), 1).0.0 * Field::<((f64, usize, bool),)>(Variant((*_83).fld2, 1), 1).0.0;
RET = _40;
(*_2) = (*_83).fld4;
(*_83).fld2 = Adt28::Variant0 { fld0: (*_83).fld0.2,fld1: _65,fld2: (*_83).fld0,fld3: 634926591_i32,fld4: (*_83).fld0.0 };
place!(Field::<(f64, usize, bool)>(Variant((*_83).fld2, 0), 2)).0 = Field::<f64>(Variant((*_83).fld2, 0), 4);
Goto(bb38)
}
bb38 = {
(*_83).fld3 = _59.1 ^ _75;
place!(Field::<(f64, usize, bool)>(Variant((*_83).fld2, 0), 2)).2 = (*_83).fld3 > (*_83).fld3;
_97 = _34.0 + _34.0;
(*_29) = [_47,_38.1,_11,_38.1,_11];
(*_83).fld0.1 = Field::<(f64, usize, bool)>(Variant((*_83).fld2, 0), 2).1;
_58 = Field::<char>(Variant((*_83).fld2, 0), 1);
(*_83).fld0.0 = Field::<f64>(Variant((*_83).fld2, 0), 4) + Field::<(f64, usize, bool)>(Variant((*_83).fld2, 0), 2).0;
place!(Field::<(f64, usize, bool)>(Variant((*_83).fld2, 0), 2)) = (*_83).fld0;
_3 = core::ptr::addr_of_mut!((*_3));
(*_2) = (*_83).fld4;
_38.2 = (*_83).fld0.1 * (*_83).fld0.1;
place!(Field::<(f64, usize, bool)>(Variant((*_83).fld2, 0), 2)) = (*_83).fld0;
(*_83).fld0.1 = _30.0 as usize;
(*_83).fld2 = Adt28::Variant0 { fld0: (*_83).fld0.2,fld1: _46,fld2: (*_83).fld0,fld3: (-209596046_i32),fld4: (*_83).fld0.0 };
(*_16) = _61 + _78;
(*_83).fld0.2 = Field::<(f64, usize, bool)>(Variant((*_83).fld2, 0), 2).2 == Field::<bool>(Variant((*_83).fld2, 0), 0);
(*_16) = _61 + _78;
(*_29) = [_52,_47,_47,_38.1,_38.1];
(*_83).fld2 = Adt28::Variant1 { fld0: (*_83).fld0.2,fld1: _80,fld2: (*_83).fld3 };
_92 = _47;
(*_83).fld0.2 = (*_83).fld0.1 == (*_83).fld0.1;
match _15.0.1 {
0 => bb8,
13777679218018593522 => bb40,
_ => bb39
}
}
bb39 = {
_22 = Field::<char>(Variant(_20.fld2, 0), 1);
(*_6) = [1548981068_i32,(-187235298_i32),(-1318203694_i32),(-8514599_i32),634122477_i32,1288621087_i32,1686242249_i32];
(*_16) = _43 | _43;
_33 = [(-25237_i16),(-26847_i16),(-27219_i16),(-19111_i16),(-513_i16),28489_i16,24136_i16];
(*_2) = [(-986037223_i32),960717340_i32];
_59.1 = _41 ^ _41;
place!(Field::<f64>(Variant(_20.fld2, 0), 4)) = _39 - _39;
_34 = _60.2;
_57 = Move(_3);
(*_29) = [_38.1,_47,_38.1,_47,_38.1];
(*_2) = _20.fld4;
(*_29) = [_38.1,_47,_47,_38.1,_11];
(*_16) = _43;
(*_6) = [(-2029119806_i32),1267984787_i32,2076823701_i32,(-1868750356_i32),2083450538_i32,(-886328766_i32),(-446536415_i32)];
(*_29) = [_47,_38.1,_47,_47,_47];
_20.fld0.0 = Field::<f64>(Variant(_20.fld2, 0), 4) + Field::<(f64, usize, bool)>(Variant(_20.fld2, 0), 2).0;
_60.1 = _24.1 - _24.1;
(*_2) = [1710841911_i32,682758365_i32];
_42 = &_19;
(*_6) = [(-282743108_i32),1181959153_i32,782316161_i32,1612834456_i32,(-1169915919_i32),1591045384_i32,2068503640_i32];
(*_6) = [775075311_i32,194726936_i32,(-1069509678_i32),1948560319_i32,1991214713_i32,(-624020142_i32),499672091_i32];
_29 = core::ptr::addr_of!((*_29));
Goto(bb16)
}
bb40 = {
place!(Field::<((f64, usize, bool),)>(Variant((*_83).fld2, 1), 1)).0.2 = !Field::<bool>(Variant((*_83).fld2, 1), 0);
(*_2) = (*_83).fld4;
(*_83).fld3 = _75 | Field::<u32>(Variant((*_83).fld2, 1), 2);
(*_6) = [1069864007_i32,1037531623_i32,566005218_i32,1513425956_i32,21082263_i32,1885682697_i32,(-617559193_i32)];
_15.2 = [Field::<u32>(Variant((*_83).fld2, 1), 2),_75];
place!(Field::<((f64, usize, bool),)>(Variant((*_83).fld2, 1), 1)).0.0 = -(*_83).fld0.0;
place!(Field::<((f64, usize, bool),)>(Variant((*_83).fld2, 1), 1)).0.0 = -(*_83).fld0.0;
(*_83).fld3 = !_41;
_73 = Field::<u32>(Variant((*_83).fld2, 1), 2) < Field::<u32>(Variant((*_83).fld2, 1), 2);
_15.1 = !Field::<bool>(Variant((*_83).fld2, 1), 0);
(*_3) = [Field::<u32>(Variant((*_83).fld2, 1), 2),(*_83).fld3];
_87 = (-130757913277308135381898732501831519216_i128) ^ 37704668507866256606953534869543479118_i128;
(*_83).fld3 = Field::<u32>(Variant((*_83).fld2, 1), 2);
(*_83).fld4 = [965621347_i32,(-2094583632_i32)];
match _15.0.1 {
0 => bb39,
1 => bb31,
2 => bb9,
3 => bb36,
4 => bb5,
5 => bb41,
6 => bb42,
13777679218018593522 => bb44,
_ => bb43
}
}
bb41 = {
_44 = core::ptr::addr_of!((*_29));
_66 = -_59.0.0;
_34.0 = _40 * _24.2.0;
(*_4) = _20.fld4;
place!(Field::<(f64, usize, bool)>(Variant(_20.fld2, 0), 2)).2 = Field::<bool>(Variant(_20.fld2, 0), 0) >= _38.0;
(*_4) = [Field::<i32>(Variant(_20.fld2, 0), 3),Field::<i32>(Variant(_20.fld2, 0), 3)];
_61 = (*_16) & (*_16);
(*_29) = [_47,_47,_38.1,_47,_38.1];
Goto(bb23)
}
bb42 = {
(*_3) = [_17,_17];
(*_16) = _31 - _31;
_20.fld1 = [_11,_11,_11,_11,_11];
_20.fld0.2 = _15.1;
(*_3) = [_10,_10];
(*_16) = 20944_i16 as isize;
(*_29) = [_11,_11,_11,_11,_11];
(*_6) = [342719190_i32,1744141227_i32,(-1000710870_i32),36494825_i32,(-1101277978_i32),1335654682_i32,443439195_i32];
_20.fld0.0 = _15.0.1 as f64;
_29 = core::ptr::addr_of!(_20.fld1);
(*_3) = [_17,_10];
(*_29) = [_11,_11,_11,_11,_11];
(*_16) = _31;
_2 = core::ptr::addr_of!(_5);
_24.2.0 = RET << (*_16);
(*_16) = !_31;
(*_3) = [_17,_20.fld3];
(*_3) = [_17,_10];
_2 = core::ptr::addr_of!((*_2));
Goto(bb9)
}
bb43 = {
(*_16) = _15.0.1 as isize;
(*_3) = [_41,_20.fld3];
_2 = core::ptr::addr_of!((*_2));
_20.fld1 = [_47,_11,_47,_38.1,_47];
(*_16) = _38.1 as isize;
place!(Field::<bool>(Variant(_20.fld2, 0), 0)) = Field::<(f64, usize, bool)>(Variant(_20.fld2, 0), 2).2 & _25;
_7 = [1424661574_i32,814734330_i32,1280805071_i32,(-1007222835_i32),(-1400418376_i32),1442270319_i32,2082211524_i32];
_30 = (RET,);
Goto(bb14)
}
bb44 = {
(*_83).fld0.1 = !_38.2;
(*_83).fld0 = (Field::<((f64, usize, bool),)>(Variant((*_83).fld2, 1), 1).0.0, Field::<((f64, usize, bool),)>(Variant((*_83).fld2, 1), 1).0.1, Field::<bool>(Variant((*_83).fld2, 1), 0));
place!(Field::<((f64, usize, bool),)>(Variant((*_83).fld2, 1), 1)).0.0 = (*_83).fld0.0 - (*_83).fld0.0;
(*_29) = [_47,_92,_11,_92,_11];
_12 = Field::<((f64, usize, bool),)>(Variant((*_83).fld2, 1), 1).0.1;
(*_29) = [_11,_11,_92,_11,_38.1];
_20.fld0.1 = 69_u8 as usize;
(*_83).fld4 = (*_2);
_36 = _11 as f64;
place!(Field::<bool>(Variant((*_83).fld2, 1), 0)) = (*_16) <= (*_16);
_58 = _65;
place!(Field::<((f64, usize, bool),)>(Variant((*_83).fld2, 1), 1)).0 = (_36, (*_83).fld0.1, (*_83).fld0.2);
match _15.0.1 {
0 => bb43,
1 => bb45,
2 => bb46,
3 => bb47,
4 => bb48,
13777679218018593522 => bb50,
_ => bb49
}
}
bb45 = {
(*_2) = [212892407_i32,1025796151_i32];
(*_2) = [1218578456_i32,(-924514731_i32)];
(*_6) = [(-903860633_i32),1732193199_i32,2035826871_i32,(-1786925820_i32),(-759078418_i32),(-850144061_i32),455771773_i32];
_16 = &mut _18;
(*_16) = 34_isize << _10;
(*_16) = (-9223372036854775808_isize);
(*_16) = -9223372036854775807_isize;
(*_16) = -(-9223372036854775808_isize);
_15.1 = (*_16) != (*_16);
(*_6) = [1344303938_i32,(-64115496_i32),1475989326_i32,(-115046632_i32),280847200_i32,1311724314_i32,1629059616_i32];
(*_2) = [(-1841891776_i32),(-1548337501_i32)];
Goto(bb4)
}
bb46 = {
(*_3) = [_17,_17];
(*_16) = _31 - _31;
_20.fld1 = [_11,_11,_11,_11,_11];
_20.fld0.2 = _15.1;
(*_3) = [_10,_10];
(*_16) = 20944_i16 as isize;
(*_29) = [_11,_11,_11,_11,_11];
(*_6) = [342719190_i32,1744141227_i32,(-1000710870_i32),36494825_i32,(-1101277978_i32),1335654682_i32,443439195_i32];
_20.fld0.0 = _15.0.1 as f64;
_29 = core::ptr::addr_of!(_20.fld1);
(*_3) = [_17,_10];
(*_29) = [_11,_11,_11,_11,_11];
(*_16) = _31;
_2 = core::ptr::addr_of!(_5);
_24.2.0 = RET << (*_16);
(*_16) = !_31;
(*_3) = [_17,_20.fld3];
(*_3) = [_17,_10];
_2 = core::ptr::addr_of!((*_2));
Goto(bb9)
}
bb47 = {
_11 = 186831134655342718546855415671803640191_u128 | 75719361080805880571799198246412160581_u128;
_14 = [_15.0.1,_15.0.1,_15.0.1,_15.0.1,_15.0.1];
_18 = !_8;
_16 = &mut _8;
(*_6) = [(-888175786_i32),1227508352_i32,603893849_i32,(-550648693_i32),1207931217_i32,432860649_i32,938167454_i32];
(*_6) = [273803644_i32,(-1208911713_i32),(-189914975_i32),1515279215_i32,745821820_i32,1413476631_i32,(-1323381674_i32)];
_10 = _17 ^ _17;
(*_2) = [498812639_i32,(-1678173696_i32)];
(*_16) = 20_u8 as isize;
Goto(bb3)
}
bb48 = {
(*_2) = [1842424082_i32,764952047_i32];
(*_16) = _1 as isize;
_15.1 = _1;
(*_6) = [(-728180458_i32),706050587_i32,897893366_i32,(-168279508_i32),(-985359530_i32),(-1070606592_i32),(-511502824_i32)];
(*_6) = [136936627_i32,2006424127_i32,1454051789_i32,1016944588_i32,(-313568848_i32),359837691_i32,(-1794265244_i32)];
(*_6) = [(-241291302_i32),6850980_i32,1125214284_i32,1005618438_i32,(-463057375_i32),750661487_i32,655170150_i32];
_11 = RET as u128;
_5 = [(-182922298_i32),2099968814_i32];
_10 = _17;
(*_16) = 169_u8 as isize;
(*_6) = [(-1458235178_i32),(-1394976763_i32),(-1177365273_i32),(-1550674496_i32),(-575886052_i32),(-688459944_i32),471871608_i32];
(*_2) = [(-812242720_i32),(-121346297_i32)];
(*_16) = 9223372036854775807_isize;
_20.fld0.2 = _9 > _9;
_2 = core::ptr::addr_of!((*_2));
(*_6) = [(-1542193343_i32),(-1628220044_i32),(-2052230066_i32),92127537_i32,(-1237904196_i32),1868693463_i32,(-1433356037_i32)];
(*_16) = 5_usize as isize;
_2 = Move(_4);
(*_16) = (-104_isize);
_1 = _15.1 | _15.1;
_3 = core::ptr::addr_of_mut!(_15.2);
Goto(bb5)
}
bb49 = {
(*_6) = [655068271_i32,1202288352_i32,1202884798_i32,(-736465017_i32),1289353997_i32,(-237558611_i32),(-1890673509_i32)];
(*_3) = [_10,_10];
_20.fld3 = _17;
_29 = core::ptr::addr_of!(_20.fld1);
(*_29) = [_11,_11,_11,_11,_11];
(*_29) = [_11,_11,_11,_11,_11];
(*_29) = [_11,_11,_11,_11,_11];
(*_6) = [(-572761274_i32),848838036_i32,811958130_i32,(-1104526543_i32),(-1556011606_i32),286188266_i32,2020839388_i32];
_24.1 = 42411_u16 + 27380_u16;
_31 = _20.fld0.0 as isize;
Goto(bb8)
}
bb50 = {
(*_83).fld3 = Field::<u32>(Variant((*_83).fld2, 1), 2);
place!(Field::<((f64, usize, bool),)>(Variant((*_83).fld2, 1), 1)).0.1 = (*_83).fld0.1 * (*_83).fld0.1;
place!(Field::<((f64, usize, bool),)>(Variant((*_83).fld2, 1), 1)) = ((*_83).fld0,);
(*_3) = [(*_83).fld3,Field::<u32>(Variant((*_83).fld2, 1), 2)];
(*_6) = [1515561520_i32,(-741669774_i32),(-1526249395_i32),(-1305439022_i32),1607809365_i32,1849287607_i32,882431739_i32];
(*_83).fld3 = Field::<u32>(Variant(_20.fld2, 1), 2);
place!(Field::<((f64, usize, bool),)>(Variant((*_83).fld2, 1), 1)).0.2 = !(*_83).fld0.2;
(*_83).fld0.0 = -_36;
_13 = [73_u8,149_u8,78_u8,92_u8,35_u8,72_u8,215_u8];
_100 = -_53;
place!(Field::<((f64, usize, bool),)>(Variant((*_83).fld2, 1), 1)).0.0 = _20.fld0.0 * (*_83).fld0.0;
_67 = Field::<((f64, usize, bool),)>(Variant((*_83).fld2, 1), 1).0.0 * Field::<((f64, usize, bool),)>(Variant((*_83).fld2, 1), 1).0.0;
_17 = (*_83).fld3 - (*_83).fld3;
place!(Field::<((f64, usize, bool),)>(Variant((*_83).fld2, 1), 1)).0.1 = (*_83).fld0.1 | _80.0.1;
(*_83).fld0.1 = Field::<((f64, usize, bool),)>(Variant((*_83).fld2, 1), 1).0.1;
Goto(bb51)
}
bb51 = {
Call(_120 = dump_var(19_usize, 48_usize, Move(_48), 34_usize, Move(_34), 11_usize, Move(_11), 61_usize, Move(_61)), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
Call(_120 = dump_var(19_usize, 46_usize, Move(_46), 10_usize, Move(_10), 82_usize, Move(_82), 68_usize, Move(_68)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Call(_120 = dump_var(19_usize, 47_usize, Move(_47), 65_usize, Move(_65), 5_usize, Move(_5), 19_usize, Move(_19)), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Call(_120 = dump_var(19_usize, 13_usize, Move(_13), 93_usize, Move(_93), 9_usize, Move(_9), 40_usize, Move(_40)), ReturnTo(bb55), UnwindUnreachable())
}
bb55 = {
Call(_120 = dump_var(19_usize, 7_usize, Move(_7), 72_usize, Move(_72), 41_usize, Move(_41), 45_usize, Move(_45)), ReturnTo(bb56), UnwindUnreachable())
}
bb56 = {
Call(_120 = dump_var(19_usize, 25_usize, Move(_25), 87_usize, Move(_87), 8_usize, Move(_8), 121_usize, _121), ReturnTo(bb57), UnwindUnreachable())
}
bb57 = {
Return()
}

}
}
pub fn main() {
                fn0(std::hint::black_box(false), std::hint::black_box('\u{d8dab}'), std::hint::black_box(1463353814_u32), std::hint::black_box(124_i8), std::hint::black_box(787_i16), std::hint::black_box(141473174417689673050715755982126354226_u128), std::hint::black_box(13592215060878695890_u64), std::hint::black_box(57629616582688287468127318750754309170_i128), std::hint::black_box(244_u8));
                
            }
#[derive(Debug,Copy,Clone)]
pub enum Adt28 {
Variant0{
fld0: bool,
fld1: char,
fld2: (f64, usize, bool),
fld3: i32,
fld4: f64,

},
Variant1{
fld0: bool,
fld1: ((f64, usize, bool),),
fld2: u32,

}}
#[derive(Debug)]
pub enum Adt47 {
Variant0{
fld0: u128,
fld1: *mut [u32; 2],
fld2: f32,
fld3: (i8, [u32; 2], [i32; 7], u32),
fld4: *mut i16,
fld5: i32,
fld6: Adt28,

},
Variant1{
fld0: Adt28,
fld1: u8,
fld2: (i8, [u32; 2], [i32; 7], u32),
fld3: u128,
fld4: i64,

},
Variant2{
fld0: bool,
fld1: i128,
fld2: *mut *const i128,
fld3: [u8; 7],
fld4: (isize,),
fld5: usize,

},
Variant3{
fld0: bool,
fld1: f64,
fld2: (*mut i16, usize, char),
fld3: u64,
fld4: i16,

}}
#[derive(Debug)]
pub struct Adt51 {
fld0: (f64, usize, bool),
fld1: [u128; 5],
fld2: Adt28,
fld3: u32,
fld4: [i32; 2],
fld5: *const (i8, [u32; 2], [i32; 7], u32),
fld6: *mut i16,
}
#[derive(Debug)]
pub enum Adt55 {
Variant0{
fld0: *const i128,
fld1: u8,
fld2: [u32; 2],

},
Variant1{
fld0: [u128; 5],
fld1: Adt28,

},
Variant2{
fld0: (*mut i16, u64),
fld1: char,
fld2: *mut [u32; 2],
fld3: u8,
fld4: ((f64, usize, bool),),

}}
#[derive(Debug)]
pub enum Adt58 {
Variant0{
fld0: [u32; 2],
fld1: [i64; 6],

},
Variant1{
fld0: f64,
fld1: u16,
fld2: *const (i8, [u32; 2], [i32; 7], u32),

},
Variant2{
fld0: *mut i16,
fld1: char,
fld2: u128,
fld3: i8,
fld4: i64,
fld5: f32,

}}
#[derive(Debug)]
pub enum Adt64 {
Variant0{
fld0: bool,
fld1: *mut [i32; 7],
fld2: (isize,),
fld3: i8,
fld4: i128,

},
Variant1{
fld0: u16,
fld1: f32,
fld2: isize,
fld3: *const (i8, [u32; 2], [i32; 7], u32),
fld4: u128,
fld5: i32,
fld6: (i8, [u32; 2], [i32; 7], u32),
fld7: u8,

},
Variant2{
fld0: *const (i8,),
fld1: char,
fld2: ((f64, usize, bool),),
fld3: i8,
fld4: u8,
fld5: i32,

},
Variant3{
fld0: bool,
fld1: [u32; 2],
fld2: *const (i8, [u32; 2], [i32; 7], u32),
fld3: Adt47,
fld4: [u128; 5],

}}
#[derive(Debug)]
pub enum Adt72 {
Variant0{
fld0: i128,
fld1: u128,
fld2: isize,
fld3: (bool, u128, usize),
fld4: [i16; 7],

},
Variant1{
fld0: u64,
fld1: i16,
fld2: (isize,),

},
Variant2{
fld0: *const (i8, [u32; 2], [i32; 7], u32),
fld1: u32,
fld2: [u32; 2],

}}
#[derive(Debug)]
pub struct Adt84 {
fld0: (isize,),
fld1: *const [i32; 2],
fld2: isize,
fld3: *mut [i32; 7],
}

