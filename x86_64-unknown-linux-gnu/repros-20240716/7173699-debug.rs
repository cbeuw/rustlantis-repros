#![recursion_limit = "1024"]
    #![feature(custom_mir, core_intrinsics, const_hash)]
    #![allow(unused_parens, unused_assignments, overflowing_literals)]
    extern crate core;
    use core::intrinsics::mir::*;

    use std::fmt::Debug;

    #[inline(never)]
    fn dump_var(
        f: usize,
        var0: usize, val0: impl Debug,
        var1: usize, val1: impl Debug,
        var2: usize, val2: impl Debug,
        var3: usize, val3: impl Debug,
    ) {
        println!("fn{f}:_{var0} = {val0:?}\n_{var1} = {val1:?}\n_{var2} = {val2:?}\n_{var3} = {val3:?}");
    }
    #[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn0(mut _1: bool,mut _2: usize,mut _3: u64,mut _4: i8,mut _5: i16,mut _6: u128,mut _7: i64,mut _8: u16) -> isize {
mir! {
type RET = isize;
let _9: [u64; 6];
let _10: u128;
let _11: bool;
let _12: (u64,);
let _13: char;
let _14: char;
let _15: f64;
let _16: usize;
let _17: [u16; 6];
let _18: &'static mut i32;
let _19: &'static mut [u8; 3];
let _20: f32;
let _21: Adt72;
let _22: u16;
let _23: f64;
let _24: Adt72;
let _25: *const *mut usize;
let _26: &'static f64;
let _27: bool;
let _28: u32;
let _29: &'static mut Adt62;
let _30: *mut u8;
let _31: *const f32;
let _32: (&'static mut i16, i64, [u64; 2], [u8; 3]);
let _33: [u128; 8];
let _34: *const ([u64; 2],);
let _35: [u8; 4];
let _36: u16;
let _37: (&'static mut [u8; 3], i8, *mut i64, &'static u16);
let _38: Adt62;
let _39: bool;
let _40: char;
let _41: f32;
let _42: f64;
let _43: *const [u64; 6];
let _44: isize;
let _45: char;
let _46: f32;
let _47: f32;
let _48: isize;
let _49: *mut *const f32;
let _50: *mut &'static mut i16;
let _51: *mut usize;
let _52: *mut *const f32;
let _53: i32;
let _54: bool;
let _55: i64;
let _56: char;
let _57: &'static u16;
let _58: ([u64; 2],);
let _59: char;
let _60: isize;
let _61: u16;
let _62: i128;
let _63: u32;
let _64: *mut *const [u64; 6];
let _65: i128;
let _66: isize;
let _67: ((&'static mut *const f32, ([u128; 5], f64), *mut i64, bool), &'static mut i16);
let _68: i128;
let _69: u16;
let _70: *const ([u64; 2],);
let _71: &'static i8;
let _72: &'static mut Adt62;
let _73: *const ([u64; 2],);
let _74: isize;
let _75: [u8; 7];
let _76: u64;
let _77: bool;
let _78: char;
let _79: u128;
let _80: i16;
let _81: i128;
let _82: &'static mut i32;
let _83: Adt43;
let _84: i8;
let _85: &'static i16;
let _86: char;
let _87: *mut *const [u64; 6];
let _88: usize;
let _89: isize;
let _90: bool;
let _91: *mut u8;
let _92: &'static mut &'static f64;
let _93: *mut Adt43;
let _94: f64;
let _95: isize;
let _96: [u64; 5];
let _97: f64;
let _98: Adt60;
let _99: &'static i16;
let _100: isize;
let _101: &'static u16;
let _102: u64;
let _103: [u64; 6];
let _104: u64;
let _105: ();
let _106: ();
{
_5 = 11231_i16 | 4577_i16;
RET = 61045_u16 as isize;
_2 = 2520629189228406358_i64 as usize;
_5 = !10646_i16;
_1 = RET == RET;
_5 = !(-21219_i16);
_3 = 15910605895925027218_u64 ^ 10474638914439290806_u64;
_1 = _5 < _5;
_4 = (-92_i8) + (-63_i8);
_6 = 48860_u16 as u128;
_9 = [_3,_3,_3,_3,_3,_3];
_4 = 30719_u16 as i8;
_2 = 1_usize & 15336883262609381921_usize;
_8 = !46176_u16;
_11 = _1 <= _1;
_12 = (_3,);
_12.0 = !_3;
_1 = _11 >= _11;
_2 = 67240038588774124206917756743200412173_i128 as usize;
_10 = !_6;
_6 = !_10;
Call(_7 = fn1(_3, _9), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_14 = '\u{d7f7e}';
_2 = 15060321122673464853_usize;
_13 = _14;
_11 = _1;
_5 = !30624_i16;
_3 = _12.0 | _12.0;
_7 = 6686250259294680670_i64 & (-6313450251248603632_i64);
_13 = _14;
_12.0 = _3;
_7 = 2594307696648323557_i64;
_7 = 2667912661379559004_i64 * (-8122066037320249221_i64);
_15 = _2 as f64;
_2 = 901773315839986507_usize + 18089435295724341267_usize;
_4 = !(-112_i8);
_2 = 2_usize ^ 8393672739135449067_usize;
_11 = !_1;
_15 = 6_u8 as f64;
_2 = 17250555603955167382_usize + 0_usize;
_7 = 4544858961479736054_i64 | (-7398229635664011483_i64);
_3 = 2042233182_i32 as u64;
_13 = _14;
_6 = _10;
_3 = !_12.0;
Call(_8 = core::intrinsics::bswap(15191_u16), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_8 = 49158_u16 - 4846_u16;
_16 = _11 as usize;
_8 = !22647_u16;
_8 = _15 as u16;
_6 = RET as u128;
_13 = _14;
Goto(bb3)
}
bb3 = {
_5 = 23665_i16 | (-4734_i16);
_9 = [_12.0,_3,_12.0,_12.0,_12.0,_12.0];
_14 = _13;
_13 = _14;
_9 = [_12.0,_12.0,_3,_3,_12.0,_3];
_2 = _16;
_17 = [_8,_8,_8,_8,_8,_8];
_11 = _16 == _2;
_8 = !56527_u16;
_11 = _1 | _1;
_9 = [_12.0,_3,_3,_12.0,_3,_12.0];
_10 = _6 | _6;
_10 = _6;
_20 = _15 as f32;
_2 = _5 as usize;
_20 = _16 as f32;
_12 = (_3,);
_14 = _13;
_16 = !_2;
_13 = _14;
Call(_16 = core::intrinsics::transmute(RET), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_14 = _13;
_14 = _13;
_11 = _2 == _2;
_3 = !_12.0;
_12 = (_3,);
Call(_22 = core::intrinsics::transmute(_5), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
_11 = _1;
_5 = (-23525_i16) << _3;
_20 = _6 as f32;
_13 = _14;
_3 = !_12.0;
_7 = _15 as i64;
_15 = 9869469329081270493348094797134723829_i128 as f64;
_8 = _22 << _3;
_12.0 = _13 as u64;
_12.0 = _3 >> _8;
_12 = (_3,);
_12.0 = !_3;
_16 = _13 as usize;
_10 = RET as u128;
RET = 65_isize >> _16;
_9 = [_12.0,_3,_12.0,_3,_12.0,_3];
_13 = _14;
_5 = 11426_i16 << _2;
_7 = (-6210988875756728284_i64) << _8;
_22 = !_8;
Goto(bb6)
}
bb6 = {
_28 = 1894599379_u32 + 425752620_u32;
_6 = !_10;
_23 = _15 + _15;
_20 = _23 as f32;
_16 = _2 * _2;
_23 = _15;
_27 = _23 >= _15;
_28 = 2575980991_u32 | 492951198_u32;
_8 = _22 - _22;
_5 = (-21048_i16) << _12.0;
_9 = [_12.0,_12.0,_3,_3,_3,_12.0];
_26 = &_23;
_32.3 = [243_u8,147_u8,181_u8];
_8 = _20 as u16;
_3 = !_12.0;
_32.0 = &mut _5;
_11 = _1;
_16 = _2;
Goto(bb7)
}
bb7 = {
_11 = _27;
_13 = _14;
_32.1 = -_7;
_2 = _16;
_19 = &mut _32.3;
_33 = [_10,_10,_6,_6,_10,_6,_6,_6];
_15 = _22 as f64;
(*_19) = [94_u8,188_u8,99_u8];
_4 = 88_i8 & 76_i8;
_14 = _13;
(*_19) = [50_u8,35_u8,22_u8];
_1 = (*_26) < (*_26);
_26 = &_15;
(*_19) = [79_u8,192_u8,131_u8];
_20 = _4 as f32;
(*_19) = [26_u8,27_u8,74_u8];
(*_19) = [133_u8,190_u8,175_u8];
(*_19) = [154_u8,244_u8,201_u8];
(*_19) = [86_u8,70_u8,8_u8];
(*_19) = [106_u8,133_u8,29_u8];
_6 = _10 << _22;
(*_19) = [232_u8,39_u8,190_u8];
RET = _28 as isize;
(*_19) = [88_u8,105_u8,217_u8];
Goto(bb8)
}
bb8 = {
Goto(bb9)
}
bb9 = {
_22 = _8 | _8;
Goto(bb10)
}
bb10 = {
_35 = [177_u8,72_u8,148_u8,14_u8];
(*_19) = [171_u8,82_u8,112_u8];
Call(_16 = core::intrinsics::transmute(_12.0), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_37.1 = -_4;
_14 = _13;
Goto(bb12)
}
bb12 = {
(*_19) = [30_u8,6_u8,4_u8];
_26 = &_23;
_2 = _16 * _16;
_33 = [_6,_6,_6,_6,_6,_6,_6,_6];
(*_19) = [141_u8,27_u8,192_u8];
_22 = _8 & _8;
_12.0 = _3;
_37.3 = &_8;
_23 = _15 - _15;
(*_19) = [32_u8,235_u8,175_u8];
_36 = _28 as u16;
(*_19) = [92_u8,53_u8,14_u8];
(*_19) = [143_u8,222_u8,131_u8];
Goto(bb13)
}
bb13 = {
_11 = _20 > _20;
(*_19) = [116_u8,0_u8,120_u8];
_10 = 161_u8 as u128;
_17 = [_22,_36,_22,_36,_8,_8];
(*_19) = [141_u8,92_u8,71_u8];
(*_19) = [150_u8,1_u8,79_u8];
_37.3 = &_36;
_31 = core::ptr::addr_of!(_41);
(*_19) = [162_u8,53_u8,175_u8];
_2 = RET as usize;
_31 = core::ptr::addr_of!((*_31));
(*_31) = -_20;
(*_19) = [90_u8,119_u8,80_u8];
_28 = RET as u32;
(*_19) = [162_u8,71_u8,87_u8];
RET = 1500_i16 as isize;
RET = 9223372036854775807_isize << _36;
(*_31) = -_20;
_9 = [_12.0,_3,_3,_12.0,_12.0,_12.0];
(*_31) = _20 + _20;
(*_19) = [227_u8,37_u8,201_u8];
Goto(bb14)
}
bb14 = {
_37.1 = -_4;
(*_31) = 150788927863942898973922949836409814964_i128 as f32;
(*_31) = _20 - _20;
(*_31) = _20 + _20;
(*_31) = _20 - _20;
(*_19) = [41_u8,32_u8,196_u8];
(*_19) = [113_u8,174_u8,255_u8];
_42 = _15;
RET = -93_isize;
_22 = _37.1 as u16;
_36 = 851781943_i32 as u16;
Goto(bb15)
}
bb15 = {
_15 = -_23;
(*_31) = _20 - _20;
(*_19) = [75_u8,2_u8,215_u8];
_22 = _8 + _8;
_41 = _6 as f32;
(*_31) = -_20;
_20 = (*_31) - (*_31);
_37.2 = core::ptr::addr_of_mut!(_7);
_43 = core::ptr::addr_of!(_9);
_4 = _37.1;
_45 = _14;
_37.1 = _4;
(*_43) = [_12.0,_3,_3,_12.0,_12.0,_12.0];
(*_43) = [_12.0,_3,_12.0,_3,_3,_3];
_6 = _10 + _10;
(*_31) = _20 * _20;
(*_43) = [_12.0,_12.0,_12.0,_12.0,_3,_3];
(*_31) = _20 + _20;
(*_19) = [182_u8,133_u8,195_u8];
(*_43) = [_12.0,_12.0,_3,_12.0,_12.0,_12.0];
(*_19) = [204_u8,51_u8,72_u8];
_39 = _15 < _15;
_26 = &_42;
_33 = [_6,_6,_6,_10,_6,_10,_6,_6];
Goto(bb16)
}
bb16 = {
(*_19) = [173_u8,229_u8,106_u8];
(*_43) = [_12.0,_12.0,_12.0,_12.0,_12.0,_3];
Goto(bb17)
}
bb17 = {
(*_43) = [_12.0,_3,_3,_3,_3,_12.0];
(*_43) = [_12.0,_12.0,_3,_12.0,_3,_12.0];
_44 = RET * RET;
Goto(bb18)
}
bb18 = {
(*_19) = [93_u8,88_u8,7_u8];
(*_43) = [_12.0,_12.0,_3,_3,_12.0,_12.0];
(*_43) = [_12.0,_3,_12.0,_12.0,_12.0,_12.0];
(*_43) = [_12.0,_3,_3,_12.0,_12.0,_12.0];
Goto(bb19)
}
bb19 = {
(*_19) = [224_u8,71_u8,191_u8];
_26 = &_15;
(*_31) = _20 * _20;
_3 = _12.0 & _12.0;
_23 = (*_26);
(*_43) = [_3,_3,_3,_3,_12.0,_3];
(*_19) = [209_u8,25_u8,81_u8];
(*_19) = [243_u8,13_u8,14_u8];
_51 = core::ptr::addr_of_mut!(_2);
(*_31) = _20 * _20;
(*_51) = _13 as usize;
_53 = 718091526_i32;
(*_19) = [82_u8,29_u8,159_u8];
(*_51) = _16 >> _37.1;
_49 = core::ptr::addr_of_mut!(_31);
(*_49) = core::ptr::addr_of!(_20);
_20 = _41;
(*_31) = 5139_i16 as f32;
(*_43) = [_3,_3,_12.0,_12.0,_3,_12.0];
(*_43) = [_3,_3,_3,_3,_3,_3];
_48 = _44 + _44;
_47 = _41 - _41;
(*_19) = [112_u8,28_u8,181_u8];
Goto(bb20)
}
bb20 = {
(*_31) = _47 + _41;
(*_49) = core::ptr::addr_of!(_46);
_4 = -_37.1;
_41 = -_20;
(*_49) = core::ptr::addr_of!((*_31));
Goto(bb21)
}
bb21 = {
(*_49) = core::ptr::addr_of!((*_31));
_8 = !_22;
_17 = [_22,_22,_8,_8,_22,_8];
_45 = _13;
_7 = !4505917161710132975_i64;
_37.3 = &_8;
(*_43) = [_3,_3,_3,_3,_3,_3];
(*_19) = [128_u8,63_u8,100_u8];
(*_19) = [82_u8,35_u8,31_u8];
_31 = core::ptr::addr_of!((*_31));
(*_49) = core::ptr::addr_of!(_20);
_17 = [_22,_8,_22,_22,_8,_8];
_52 = core::ptr::addr_of_mut!((*_49));
_55 = !_7;
RET = _48 ^ _44;
_59 = _45;
Goto(bb22)
}
bb22 = {
(*_43) = [_12.0,_3,_3,_3,_3,_12.0];
(*_51) = !_16;
_37.3 = &_36;
_34 = core::ptr::addr_of!(_58);
_53 = 1657690574_i32 - 910292287_i32;
_16 = !_2;
Goto(bb23)
}
bb23 = {
_35 = [239_u8,75_u8,247_u8,223_u8];
_40 = _13;
(*_31) = (*_51) as f32;
(*_31) = _41 + _41;
_61 = !_36;
(*_43) = [_12.0,_3,_12.0,_3,_3,_3];
Goto(bb24)
}
bb24 = {
_62 = -20067273693797810619324466237859124092_i128;
Goto(bb25)
}
bb25 = {
(*_34).0 = [_3,_3];
(*_51) = _53 as usize;
_6 = _62 as u128;
(*_49) = core::ptr::addr_of!((*_31));
(*_49) = core::ptr::addr_of!((*_31));
_33 = [_10,_10,_6,_10,_10,_10,_6,_6];
(*_19) = [218_u8,35_u8,213_u8];
(*_43) = [_12.0,_12.0,_12.0,_12.0,_3,_3];
_4 = _37.1;
(*_19) = [245_u8,175_u8,42_u8];
(*_51) = _16 & _16;
(*_19) = [46_u8,113_u8,25_u8];
(*_19) = [215_u8,165_u8,109_u8];
(*_19) = [122_u8,134_u8,207_u8];
_1 = _11;
(*_43) = [_3,_3,_3,_12.0,_12.0,_12.0];
(*_51) = _16 >> _3;
_35 = [231_u8,127_u8,180_u8,191_u8];
(*_49) = core::ptr::addr_of!(_47);
(*_31) = (*_51) as f32;
(*_31) = _20;
_44 = _28 as isize;
(*_19) = [222_u8,197_u8,221_u8];
Goto(bb26)
}
bb26 = {
_12 = (_3,);
(*_51) = _16;
(*_43) = [_3,_3,_12.0,_3,_3,_3];
(*_31) = _20;
(*_34).0 = [_3,_3];
_13 = _45;
_46 = (*_31) * (*_31);
(*_51) = _39 as usize;
(*_51) = _16;
_55 = -_7;
(*_49) = core::ptr::addr_of!((*_31));
_11 = _27;
_67.0.2 = core::ptr::addr_of_mut!(_7);
_58.0 = [_3,_3];
(*_31) = _46;
_37.1 = _4 & _4;
(*_31) = _46;
_6 = !_10;
(*_49) = core::ptr::addr_of!((*_31));
(*_34).0 = [_12.0,_3];
_59 = _40;
(*_34).0 = [_3,_12.0];
_28 = !1919467217_u32;
_1 = _39 ^ _39;
Call((*_31) = core::intrinsics::transmute(_28), ReturnTo(bb27), UnwindUnreachable())
}
bb27 = {
(*_49) = core::ptr::addr_of!((*_31));
(*_49) = core::ptr::addr_of!((*_31));
_67.0.1.1 = (*_26);
(*_34).0 = [_3,_3];
(*_51) = _6 as usize;
(*_19) = [44_u8,133_u8,215_u8];
(*_43) = [_12.0,_3,_12.0,_3,_3,_12.0];
_67.0.1.0 = [_6,_6,_10,_10,_6];
_69 = (-7354_i16) as u16;
(*_19) = [38_u8,100_u8,200_u8];
(*_43) = [_3,_12.0,_12.0,_3,_3,_3];
(*_43) = [_12.0,_12.0,_12.0,_12.0,_3,_3];
(*_31) = _41 * _20;
Goto(bb28)
}
bb28 = {
(*_49) = core::ptr::addr_of!((*_31));
(*_31) = _15 as f32;
_61 = _22;
Goto(bb29)
}
bb29 = {
_58.0 = [_12.0,_12.0];
(*_34).0 = [_12.0,_3];
_60 = !_44;
(*_31) = -_46;
(*_34).0 = [_12.0,_3];
_37.0 = &mut (*_19);
_24 = Adt72::Variant3 { fld0: _35,fld1: _33,fld2: _12 };
_3 = !Field::<(u64,)>(Variant(_24, 3), 2).0;
_53 = 1670874340_i32;
(*_49) = core::ptr::addr_of!(_41);
(*_51) = _16 & _16;
_47 = (*_31) - (*_31);
_3 = _12.0 | Field::<(u64,)>(Variant(_24, 3), 2).0;
(*_49) = core::ptr::addr_of!((*_31));
match _53 {
0 => bb6,
1 => bb30,
2 => bb31,
3 => bb32,
4 => bb33,
1670874340 => bb35,
_ => bb34
}
}
bb30 = {
(*_49) = core::ptr::addr_of!((*_31));
(*_31) = _15 as f32;
_61 = _22;
Goto(bb29)
}
bb31 = {
(*_49) = core::ptr::addr_of!((*_31));
(*_49) = core::ptr::addr_of!((*_31));
_67.0.1.1 = (*_26);
(*_34).0 = [_3,_3];
(*_51) = _6 as usize;
(*_19) = [44_u8,133_u8,215_u8];
(*_43) = [_12.0,_3,_12.0,_3,_3,_12.0];
_67.0.1.0 = [_6,_6,_10,_10,_6];
_69 = (-7354_i16) as u16;
(*_19) = [38_u8,100_u8,200_u8];
(*_43) = [_3,_12.0,_12.0,_3,_3,_3];
(*_43) = [_12.0,_12.0,_12.0,_12.0,_3,_3];
(*_31) = _41 * _20;
Goto(bb28)
}
bb32 = {
(*_19) = [224_u8,71_u8,191_u8];
_26 = &_15;
(*_31) = _20 * _20;
_3 = _12.0 & _12.0;
_23 = (*_26);
(*_43) = [_3,_3,_3,_3,_12.0,_3];
(*_19) = [209_u8,25_u8,81_u8];
(*_19) = [243_u8,13_u8,14_u8];
_51 = core::ptr::addr_of_mut!(_2);
(*_31) = _20 * _20;
(*_51) = _13 as usize;
_53 = 718091526_i32;
(*_19) = [82_u8,29_u8,159_u8];
(*_51) = _16 >> _37.1;
_49 = core::ptr::addr_of_mut!(_31);
(*_49) = core::ptr::addr_of!(_20);
_20 = _41;
(*_31) = 5139_i16 as f32;
(*_43) = [_3,_3,_12.0,_12.0,_3,_12.0];
(*_43) = [_3,_3,_3,_3,_3,_3];
_48 = _44 + _44;
_47 = _41 - _41;
(*_19) = [112_u8,28_u8,181_u8];
Goto(bb20)
}
bb33 = {
(*_34).0 = [_3,_3];
(*_51) = _53 as usize;
_6 = _62 as u128;
(*_49) = core::ptr::addr_of!((*_31));
(*_49) = core::ptr::addr_of!((*_31));
_33 = [_10,_10,_6,_10,_10,_10,_6,_6];
(*_19) = [218_u8,35_u8,213_u8];
(*_43) = [_12.0,_12.0,_12.0,_12.0,_3,_3];
_4 = _37.1;
(*_19) = [245_u8,175_u8,42_u8];
(*_51) = _16 & _16;
(*_19) = [46_u8,113_u8,25_u8];
(*_19) = [215_u8,165_u8,109_u8];
(*_19) = [122_u8,134_u8,207_u8];
_1 = _11;
(*_43) = [_3,_3,_3,_12.0,_12.0,_12.0];
(*_51) = _16 >> _3;
_35 = [231_u8,127_u8,180_u8,191_u8];
(*_49) = core::ptr::addr_of!(_47);
(*_31) = (*_51) as f32;
(*_31) = _20;
_44 = _28 as isize;
(*_19) = [222_u8,197_u8,221_u8];
Goto(bb26)
}
bb34 = {
_62 = -20067273693797810619324466237859124092_i128;
Goto(bb25)
}
bb35 = {
_64 = core::ptr::addr_of_mut!(_43);
_18 = &mut _53;
Goto(bb36)
}
bb36 = {
(*_51) = _16;
(*_49) = core::ptr::addr_of!(_41);
(*_64) = core::ptr::addr_of!((*_43));
Goto(bb37)
}
bb37 = {
_70 = core::ptr::addr_of!((*_34));
(*_31) = _46;
_2 = !_16;
(*_43) = [_3,Field::<(u64,)>(Variant(_24, 3), 2).0,_3,_3,_3,Field::<(u64,)>(Variant(_24, 3), 2).0];
_67.0.0 = &mut (*_49);
(*_34).0 = [_12.0,Field::<(u64,)>(Variant(_24, 3), 2).0];
(*_43) = [Field::<(u64,)>(Variant(_24, 3), 2).0,_12.0,Field::<(u64,)>(Variant(_24, 3), 2).0,_3,Field::<(u64,)>(Variant(_24, 3), 2).0,_3];
_37.2 = core::ptr::addr_of_mut!(_55);
_44 = RET | _60;
_74 = _48;
RET = _74 + _74;
(*_18) = 389056454_i32 * 1151529499_i32;
(*_18) = -(-1678369358_i32);
(*_18) = 1079057429_i32 & 1846364211_i32;
Goto(bb38)
}
bb38 = {
_57 = &_36;
_11 = (*_26) <= (*_26);
_45 = _40;
_37.3 = &_22;
(*_18) = 190_u8 as i32;
_8 = (*_57) + (*_57);
(*_51) = _16 + _16;
_37.3 = Move(_57);
(*_51) = _16 << _16;
_67.0.2 = core::ptr::addr_of_mut!(_55);
_58.0 = [_3,_3];
_68 = _62 << _48;
_19 = Move(_37.0);
_61 = _59 as u16;
(*_34).0 = [_3,Field::<(u64,)>(Variant(_24, 3), 2).0];
(*_51) = _16;
(*_34).0 = [_3,_3];
(*_43) = [Field::<(u64,)>(Variant(_24, 3), 2).0,Field::<(u64,)>(Variant(_24, 3), 2).0,_12.0,_3,Field::<(u64,)>(Variant(_24, 3), 2).0,_3];
_47 = -_20;
(*_43) = [_3,_12.0,_12.0,_3,_3,_3];
(*_18) = (-1389461822_i32);
_61 = _22 >> _44;
(*_43) = [_12.0,Field::<(u64,)>(Variant(_24, 3), 2).0,Field::<(u64,)>(Variant(_24, 3), 2).0,_3,_12.0,_3];
(*_51) = !_16;
_56 = _45;
match (*_18) {
0 => bb18,
1 => bb31,
2 => bb39,
3 => bb40,
340282366920938463463374607430378749634 => bb42,
_ => bb41
}
}
bb39 = {
(*_49) = core::ptr::addr_of!((*_31));
(*_31) = _15 as f32;
_61 = _22;
Goto(bb29)
}
bb40 = {
(*_34).0 = [_3,_3];
(*_51) = _53 as usize;
_6 = _62 as u128;
(*_49) = core::ptr::addr_of!((*_31));
(*_49) = core::ptr::addr_of!((*_31));
_33 = [_10,_10,_6,_10,_10,_10,_6,_6];
(*_19) = [218_u8,35_u8,213_u8];
(*_43) = [_12.0,_12.0,_12.0,_12.0,_3,_3];
_4 = _37.1;
(*_19) = [245_u8,175_u8,42_u8];
(*_51) = _16 & _16;
(*_19) = [46_u8,113_u8,25_u8];
(*_19) = [215_u8,165_u8,109_u8];
(*_19) = [122_u8,134_u8,207_u8];
_1 = _11;
(*_43) = [_3,_3,_3,_12.0,_12.0,_12.0];
(*_51) = _16 >> _3;
_35 = [231_u8,127_u8,180_u8,191_u8];
(*_49) = core::ptr::addr_of!(_47);
(*_31) = (*_51) as f32;
(*_31) = _20;
_44 = _28 as isize;
(*_19) = [222_u8,197_u8,221_u8];
Goto(bb26)
}
bb41 = {
(*_43) = [_12.0,_3,_3,_3,_3,_12.0];
(*_43) = [_12.0,_12.0,_3,_12.0,_3,_12.0];
_44 = RET * RET;
Goto(bb18)
}
bb42 = {
_54 = RET <= RET;
match (*_18) {
0 => bb35,
1 => bb36,
2 => bb10,
3 => bb33,
4 => bb19,
5 => bb43,
6 => bb44,
340282366920938463463374607430378749634 => bb46,
_ => bb45
}
}
bb43 = {
_14 = _13;
_14 = _13;
_11 = _2 == _2;
_3 = !_12.0;
_12 = (_3,);
Call(_22 = core::intrinsics::transmute(_5), ReturnTo(bb5), UnwindUnreachable())
}
bb44 = {
_35 = [177_u8,72_u8,148_u8,14_u8];
(*_19) = [171_u8,82_u8,112_u8];
Call(_16 = core::intrinsics::transmute(_12.0), ReturnTo(bb11), UnwindUnreachable())
}
bb45 = {
_8 = 49158_u16 - 4846_u16;
_16 = _11 as usize;
_8 = !22647_u16;
_8 = _15 as u16;
_6 = RET as u128;
_13 = _14;
Goto(bb3)
}
bb46 = {
_2 = _16;
(*_43) = [Field::<(u64,)>(Variant(_24, 3), 2).0,Field::<(u64,)>(Variant(_24, 3), 2).0,Field::<(u64,)>(Variant(_24, 3), 2).0,Field::<(u64,)>(Variant(_24, 3), 2).0,_12.0,_3];
(*_34).0 = [_3,_12.0];
_87 = core::ptr::addr_of_mut!((*_64));
(*_64) = core::ptr::addr_of!((*_43));
_37.3 = &_69;
(*_18) = (-26143_i16) as i32;
place!(Field::<(u64,)>(Variant(_24, 3), 2)).0 = _12.0 & _12.0;
_86 = _13;
Goto(bb47)
}
bb47 = {
_92 = &mut _26;
(*_92) = &_42;
(*_64) = core::ptr::addr_of!((*_43));
(*_64) = core::ptr::addr_of!((*_43));
(*_34).0 = [_12.0,Field::<(u64,)>(Variant(_24, 3), 2).0];
(*_34).0 = [_3,_12.0];
(*_92) = &_23;
(*_64) = core::ptr::addr_of!((*_43));
_81 = !_68;
(*_64) = core::ptr::addr_of!((*_43));
place!(Field::<(u64,)>(Variant(_24, 3), 2)) = _12;
_1 = _11;
(*_43) = [_3,_12.0,_3,_3,_12.0,_3];
(*_34).0 = [Field::<(u64,)>(Variant(_24, 3), 2).0,Field::<(u64,)>(Variant(_24, 3), 2).0];
(*_92) = &_15;
(*_51) = _16 + _16;
Goto(bb48)
}
bb48 = {
_89 = !_74;
_10 = _42 as u128;
Goto(bb49)
}
bb49 = {
_63 = _28 | _28;
(*_34).0 = [Field::<(u64,)>(Variant(_24, 3), 2).0,Field::<(u64,)>(Variant(_24, 3), 2).0];
(*_92) = &_67.0.1.1;
(*_43) = [_12.0,_12.0,_3,_12.0,_3,_12.0];
(*_92) = &_42;
(*_64) = core::ptr::addr_of!((*_43));
(*_43) = [Field::<(u64,)>(Variant(_24, 3), 2).0,_3,Field::<(u64,)>(Variant(_24, 3), 2).0,_3,_3,Field::<(u64,)>(Variant(_24, 3), 2).0];
_45 = _59;
_17 = [_61,_61,_61,_61,_61,_61];
(*_92) = &_67.0.1.1;
_67.0.1.1 = _61 as f64;
_15 = _23 - _67.0.1.1;
_71 = &_37.1;
place!(Field::<(u64,)>(Variant(_24, 3), 2)).0 = _61 as u64;
(*_92) = &_42;
(*_64) = core::ptr::addr_of!((*_43));
(*_51) = !_16;
(*_18) = (-1394165485_i32) << _68;
_66 = _89;
(*_34).0 = [_3,_3];
_8 = !_61;
_80 = 10764_i16 & 15751_i16;
_79 = _8 as u128;
Goto(bb50)
}
bb50 = {
Call(_105 = dump_var(0_usize, 33_usize, Move(_33), 80_usize, Move(_80), 54_usize, Move(_54), 8_usize, Move(_8)), ReturnTo(bb51), UnwindUnreachable())
}
bb51 = {
Call(_105 = dump_var(0_usize, 86_usize, Move(_86), 68_usize, Move(_68), 66_usize, Move(_66), 13_usize, Move(_13)), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
Call(_105 = dump_var(0_usize, 6_usize, Move(_6), 1_usize, Move(_1), 55_usize, Move(_55), 17_usize, Move(_17)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Call(_105 = dump_var(0_usize, 16_usize, Move(_16), 69_usize, Move(_69), 58_usize, Move(_58), 12_usize, Move(_12)), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Call(_105 = dump_var(0_usize, 89_usize, Move(_89), 74_usize, Move(_74), 5_usize, Move(_5), 59_usize, Move(_59)), ReturnTo(bb55), UnwindUnreachable())
}
bb55 = {
Call(_105 = dump_var(0_usize, 35_usize, Move(_35), 4_usize, Move(_4), 36_usize, Move(_36), 106_usize, _106), ReturnTo(bb56), UnwindUnreachable())
}
bb56 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn1(mut _1: u64,mut _2: [u64; 6]) -> i64 {
mir! {
type RET = i64;
let _3: *mut f32;
let _4: u16;
let _5: char;
let _6: u128;
let _7: [u32; 1];
let _8: [u128; 5];
let _9: i32;
let _10: bool;
let _11: isize;
let _12: *const ([u128; 5], f64);
let _13: bool;
let _14: i16;
let _15: &'static f64;
let _16: &'static mut [u8; 3];
let _17: f64;
let _18: char;
let _19: u16;
let _20: [u32; 1];
let _21: f64;
let _22: (u64,);
let _23: *mut &'static mut i16;
let _24: Adt63;
let _25: *mut Adt43;
let _26: *mut &'static f64;
let _27: f32;
let _28: *mut usize;
let _29: [u16; 1];
let _30: isize;
let _31: *mut *const [u64; 6];
let _32: Adt81;
let _33: [u128; 8];
let _34: *mut *const [u64; 6];
let _35: u64;
let _36: usize;
let _37: u16;
let _38: u8;
let _39: (bool, f32, Adt43);
let _40: isize;
let _41: &'static mut *const f32;
let _42: [u8; 7];
let _43: isize;
let _44: u8;
let _45: (u128, *mut f32, [u16; 1], u8);
let _46: *const ([u128; 5], f64);
let _47: &'static mut &'static f64;
let _48: isize;
let _49: i32;
let _50: f64;
let _51: i64;
let _52: i64;
let _53: *mut *const f32;
let _54: Adt68;
let _55: [u16; 1];
let _56: ();
let _57: ();
{
_1 = 18224413764375209889_u64 - 17863249364923489661_u64;
_2 = [_1,_1,_1,_1,_1,_1];
RET = 616936474551900054_i64;
_2 = [_1,_1,_1,_1,_1,_1];
RET = -1438676559355633415_i64;
_1 = (-92_isize) as u64;
RET = 6707662737234871274_i64;
_2 = [_1,_1,_1,_1,_1,_1];
_1 = !17443252762187857097_u64;
_2 = [_1,_1,_1,_1,_1,_1];
_2 = [_1,_1,_1,_1,_1,_1];
_1 = !11347312797103083717_u64;
_2 = [_1,_1,_1,_1,_1,_1];
_1 = !1495228760502454029_u64;
_1 = 3193512260450354180_u64 - 10033134781992998725_u64;
_2 = [_1,_1,_1,_1,_1,_1];
_4 = 21062_u16 << _1;
_2 = [_1,_1,_1,_1,_1,_1];
_2 = [_1,_1,_1,_1,_1,_1];
_5 = '\u{90044}';
_6 = 53012638000735279853146560410967053684_u128;
match RET {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
6707662737234871274 => bb6,
_ => bb5
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
RET = -7408981002201111032_i64;
_6 = 263757809822478801713852557097920572786_u128 * 117409501645209760881711307510171780005_u128;
_4 = 930739078_u32 as u16;
_2 = [_1,_1,_1,_1,_1,_1];
_4 = 36919_u16;
_6 = 22908004263918707793151353162699034774_u128;
Goto(bb7)
}
bb7 = {
_4 = !42212_u16;
_2 = [_1,_1,_1,_1,_1,_1];
_4 = 14787_u16 - 7655_u16;
_5 = '\u{8b0f3}';
_7 = [3933824414_u32];
_7 = [1541108694_u32];
_4 = 228_u16 ^ 3449_u16;
RET = !(-3004891299618204109_i64);
RET = 621376088657359634_i64;
_8 = [_6,_6,_6,_6,_6];
_6 = 116746450067919499925333429159980583222_u128 << RET;
_1 = 4022857313711618616_u64;
match RET {
0 => bb5,
1 => bb6,
2 => bb3,
621376088657359634 => bb9,
_ => bb8
}
}
bb8 = {
Return()
}
bb9 = {
_1 = 2776135579737628148_u64 & 17297468295600508871_u64;
RET = 9223372036854775807_isize as i64;
_8 = [_6,_6,_6,_6,_6];
_2 = [_1,_1,_1,_1,_1,_1];
_9 = !1965929849_i32;
_1 = 2831717972959629402_u64 | 7142895854684195964_u64;
_8 = [_6,_6,_6,_6,_6];
_1 = 78_i8 as u64;
_8 = [_6,_6,_6,_6,_6];
_6 = !53294588555587227192494863957394963610_u128;
_4 = 1239_u16 >> RET;
_5 = '\u{86448}';
_1 = 16242338295951300697_u64 << _4;
RET = -6623315690775240112_i64;
_1 = !14999138790591628198_u64;
_4 = 39025_u16 | 63809_u16;
Call(_3 = fn2(_2, _5, _2, _1, _5, _2, _5, _6), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_9 = (-1216317174_i32) << _4;
_11 = (-9223372036854775808_isize);
_6 = 44354367848168338610086369209770456763_u128 - 80458233873706279200128211515070918711_u128;
_5 = '\u{13b6a}';
_11 = 15_isize & (-9223372036854775808_isize);
_6 = 4025845155243162967029842474300599881_u128 & 308491237703856398827999625048864058185_u128;
_8 = [_6,_6,_6,_6,_6];
_2 = [_1,_1,_1,_1,_1,_1];
_2 = [_1,_1,_1,_1,_1,_1];
_8 = [_6,_6,_6,_6,_6];
_1 = 16651931876467736488_u64;
_2 = [_1,_1,_1,_1,_1,_1];
Goto(bb11)
}
bb11 = {
_5 = '\u{50788}';
_2 = [_1,_1,_1,_1,_1,_1];
_10 = _11 < _11;
_14 = 20382_i16;
Goto(bb12)
}
bb12 = {
_5 = '\u{8b372}';
Goto(bb13)
}
bb13 = {
_5 = '\u{753f1}';
match _1 {
0 => bb12,
1 => bb11,
2 => bb3,
3 => bb4,
4 => bb5,
5 => bb6,
6 => bb10,
16651931876467736488 => bb14,
_ => bb8
}
}
bb14 = {
_11 = !(-9223372036854775808_isize);
_13 = _10 == _10;
_17 = 158_u8 as f64;
Goto(bb15)
}
bb15 = {
_17 = _4 as f64;
_14 = 3748_i16 >> _9;
_1 = 7985577403239689512_u64 ^ 5663887279034214861_u64;
_19 = _4;
_18 = _5;
_11 = (-9223372036854775808_isize) ^ 23_isize;
_5 = _18;
_20 = [3277176458_u32];
_6 = 169071937337913393282706400675588971497_u128 * 76717795189786521766246931777791696468_u128;
_6 = !155875242973511765465790228489661287618_u128;
_1 = 10951987633071865367_u64 << _9;
_8 = [_6,_6,_6,_6,_6];
_18 = _5;
_15 = &_17;
_22.0 = !_1;
_19 = _4 ^ _4;
_8 = [_6,_6,_6,_6,_6];
_2 = [_22.0,_22.0,_22.0,_22.0,_22.0,_1];
_2 = [_22.0,_22.0,_22.0,_1,_22.0,_22.0];
_17 = (-73_i8) as f64;
Goto(bb16)
}
bb16 = {
_18 = _5;
_5 = _18;
RET = (-5149563678437629358_i64) + 4076436803085755964_i64;
_9 = (-895272580_i32) & (-397576504_i32);
_14 = _11 as i16;
_5 = _18;
_10 = RET < RET;
_7 = [3143048520_u32];
_22 = (_1,);
_21 = _17 + _17;
_11 = 9223372036854775807_isize;
_1 = _11 as u64;
_17 = _21;
RET = -4854751626596970807_i64;
_2 = [_1,_22.0,_22.0,_22.0,_22.0,_22.0];
_6 = 92967896598788475439900873637503396962_u128 & 2116813885034396294801039216316242316_u128;
_10 = _13;
_21 = -_17;
_26 = core::ptr::addr_of_mut!(_15);
(*_26) = &_21;
match _11 {
0 => bb1,
1 => bb2,
2 => bb11,
3 => bb8,
4 => bb17,
9223372036854775807 => bb19,
_ => bb18
}
}
bb17 = {
Return()
}
bb18 = {
_11 = !(-9223372036854775808_isize);
_13 = _10 == _10;
_17 = 158_u8 as f64;
Goto(bb15)
}
bb19 = {
(*_26) = &_17;
_20 = [3698314251_u32];
(*_26) = &_21;
_17 = -(*_15);
(*_26) = &_17;
_6 = 14413006582342206596_usize as u128;
_13 = _10;
(*_26) = &_21;
(*_26) = &_17;
(*_26) = &_21;
(*_26) = &_17;
_13 = !_10;
(*_26) = &_21;
_32.fld0.0 = _10;
_32.fld1 = RET - RET;
(*_26) = &_17;
_7 = [402367380_u32];
_7 = _20;
_26 = core::ptr::addr_of_mut!((*_26));
(*_26) = &_21;
_18 = _5;
(*_26) = &_17;
(*_26) = &_21;
_15 = &_17;
_2 = [_22.0,_1,_22.0,_22.0,_22.0,_22.0];
Goto(bb20)
}
bb20 = {
_25 = core::ptr::addr_of_mut!(_32.fld0.2);
_2 = [_22.0,_1,_22.0,_22.0,_22.0,_22.0];
(*_26) = &_21;
_26 = core::ptr::addr_of_mut!((*_26));
(*_26) = &_17;
_22 = (_1,);
_36 = _4 as usize;
(*_26) = &_21;
_17 = (*_15) - (*_15);
_11 = 9223372036854775807_isize;
_28 = core::ptr::addr_of_mut!(_36);
_5 = _18;
_36 = 3_usize;
(*_26) = &_17;
(*_26) = &_21;
(*_26) = &_17;
_33 = [_6,_6,_6,_8[_36],_6,_8[_36],_6,_8[_36]];
(*_26) = &_21;
(*_28) = !2_usize;
_14 = 10180_i16 * 15934_i16;
_30 = _11 - _11;
_38 = 153_u8 >> (*_28);
_1 = !_22.0;
_30 = !_11;
(*_28) = !3197298892873934624_usize;
Goto(bb21)
}
bb21 = {
_39.0 = _17 >= (*_15);
_40 = _6 as isize;
_35 = _22.0 & _1;
(*_28) = RET as usize;
(*_28) = 5_usize * 10207225776911158891_usize;
_30 = _40;
_10 = !_13;
_2 = [_35,_1,_35,_1,_35,_1];
(*_28) = !4_usize;
_32.fld1 = RET * RET;
(*_28) = 7777332420848826342_usize + 7_usize;
_36 = 4_usize;
_15 = &_17;
_20 = [1920716172_u32];
(*_28) = 8763570999605981870_usize;
_6 = !50376340545741276074750138171563151367_u128;
RET = _32.fld1;
_13 = _32.fld0.0 | _10;
(*_26) = &_21;
_15 = &_17;
(*_28) = 7_usize ^ 5_usize;
_9 = _18 as i32;
_29 = [_19];
(*_26) = &_21;
_32.fld0.1 = _19 as f32;
(*_26) = &_17;
(*_26) = &_21;
_33 = [_6,_6,_6,_6,_6,_6,_6,_6];
_2 = [_35,_22.0,_1,_22.0,_35,_35];
match _11 {
0 => bb9,
1 => bb4,
2 => bb3,
9223372036854775807 => bb23,
_ => bb22
}
}
bb22 = {
Return()
}
bb23 = {
(*_28) = 4_usize << _35;
(*_26) = &_17;
_15 = &_21;
_32.fld2.0 = [_35,_22.0];
RET = _32.fld1;
_25 = core::ptr::addr_of_mut!((*_25));
(*_26) = &_17;
_37 = _19 ^ _4;
_39.0 = !_10;
(*_28) = !7_usize;
(*_26) = &_21;
RET = _32.fld1 * _32.fld1;
_45 = (_6, Move(_3), _29, _38);
_19 = !_37;
_15 = &_17;
(*_26) = &_21;
Goto(bb24)
}
bb24 = {
_39.1 = -_32.fld0.1;
(*_28) = 14541564387767713070_usize * 3_usize;
(*_28) = !0_usize;
_29 = [_19];
_45.2 = [_19];
(*_28) = !3_usize;
_44 = _38 ^ _38;
_35 = (-16_i8) as u64;
_27 = -_32.fld0.1;
_32.fld2.0 = [_22.0,_1];
(*_26) = &_17;
(*_28) = 6621250228426229569_usize >> _37;
_32.fld1 = RET | RET;
_43 = _30 + _40;
(*_28) = !1_usize;
_4 = _19;
(*_26) = &_21;
(*_26) = &_17;
_39.1 = _19 as f32;
RET = _32.fld1;
_33 = [_6,_45.0,_6,_45.0,_6,_6,_6,_45.0];
_5 = _18;
_47 = &mut (*_26);
(*_28) = 3462060290935629203_usize - 7_usize;
(*_28) = 0_usize << _44;
match _11 {
0 => bb17,
9223372036854775807 => bb25,
_ => bb3
}
}
bb25 = {
(*_47) = &_21;
(*_47) = &_17;
_25 = core::ptr::addr_of_mut!((*_25));
(*_47) = &_21;
(*_47) = &_17;
(*_28) = 2609954953590943807_usize ^ 6_usize;
_11 = !_40;
_3 = core::ptr::addr_of_mut!(_32.fld0.1);
(*_28) = _45.0 as usize;
Call(_11 = core::intrinsics::transmute(_40), ReturnTo(bb26), UnwindUnreachable())
}
bb26 = {
_32.fld0.0 = _27 < _39.1;
(*_47) = &_21;
(*_28) = 8399424111911892832_usize;
_50 = _17;
_7 = [2479499026_u32];
(*_3) = _39.1 - _27;
_48 = _11 * _30;
_9 = 1139148524_i32 ^ (-1998297466_i32);
(*_28) = 2_usize;
_42[_36] = _45.3;
(*_3) = _33[_36] as f32;
(*_28) = 4_usize | 1_usize;
(*_47) = &_17;
_22 = (_35,);
_6 = !_45.0;
RET = _32.fld1 | _32.fld1;
_32.fld0.1 = _39.1 - _27;
_40 = -_43;
Goto(bb27)
}
bb27 = {
Call(_56 = dump_var(1_usize, 44_usize, Move(_44), 38_usize, Move(_38), 4_usize, Move(_4), 37_usize, Move(_37)), ReturnTo(bb28), UnwindUnreachable())
}
bb28 = {
Call(_56 = dump_var(1_usize, 29_usize, Move(_29), 13_usize, Move(_13), 7_usize, Move(_7), 11_usize, Move(_11)), ReturnTo(bb29), UnwindUnreachable())
}
bb29 = {
Call(_56 = dump_var(1_usize, 9_usize, Move(_9), 14_usize, Move(_14), 22_usize, Move(_22), 30_usize, Move(_30)), ReturnTo(bb30), UnwindUnreachable())
}
bb30 = {
Call(_56 = dump_var(1_usize, 2_usize, Move(_2), 57_usize, _57, 57_usize, _57, 57_usize, _57), ReturnTo(bb31), UnwindUnreachable())
}
bb31 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn2(mut _1: [u64; 6],mut _2: char,mut _3: [u64; 6],mut _4: u64,mut _5: char,mut _6: [u64; 6],mut _7: char,mut _8: u128) -> *mut f32 {
mir! {
type RET = *mut f32;
let _9: Adt78;
let _10: Adt63;
let _11: *mut u8;
let _12: (i16, u32, f32, u8);
let _13: *mut *const [u64; 6];
let _14: &'static mut *const f32;
let _15: isize;
let _16: Adt81;
let _17: *mut &'static u16;
let _18: Adt81;
let _19: isize;
let _20: i32;
let _21: char;
let _22: &'static [u64; 2];
let _23: *const *mut usize;
let _24: isize;
let _25: isize;
let _26: Adt63;
let _27: &'static mut [u8; 3];
let _28: *mut *const [u64; 6];
let _29: *const f32;
let _30: f64;
let _31: isize;
let _32: char;
let _33: isize;
let _34: Adt62;
let _35: (char, (&'static mut *const f32, ([u128; 5], f64), *mut i64, bool), *mut u8);
let _36: *const ([u64; 2],);
let _37: u16;
let _38: u16;
let _39: i8;
let _40: &'static mut i32;
let _41: bool;
let _42: [u32; 1];
let _43: i64;
let _44: (u32, i128);
let _45: *mut &'static u16;
let _46: *const f32;
let _47: Adt60;
let _48: Adt68;
let _49: &'static [u64; 2];
let _50: [char; 6];
let _51: usize;
let _52: f32;
let _53: bool;
let _54: ((&'static mut *const f32, ([u128; 5], f64), *mut i64, bool), &'static mut i16);
let _55: f64;
let _56: f32;
let _57: usize;
let _58: f64;
let _59: u128;
let _60: [char; 6];
let _61: &'static mut &'static f64;
let _62: u128;
let _63: &'static mut i16;
let _64: i8;
let _65: [u64; 2];
let _66: *const ([u64; 2],);
let _67: *mut &'static mut i16;
let _68: i64;
let _69: [u128; 5];
let _70: *const *mut usize;
let _71: Adt63;
let _72: [u128; 8];
let _73: bool;
let _74: (bool, f32, Adt43);
let _75: (i8, usize, isize);
let _76: &'static [u64; 2];
let _77: i128;
let _78: &'static mut *const f32;
let _79: i128;
let _80: &'static f64;
let _81: char;
let _82: &'static mut u128;
let _83: f32;
let _84: &'static f64;
let _85: i8;
let _86: &'static f64;
let _87: *mut &'static mut i16;
let _88: *mut u8;
let _89: bool;
let _90: f32;
let _91: i128;
let _92: (&'static mut i16, i64, [u64; 2], [u8; 3]);
let _93: [u8; 7];
let _94: ();
let _95: ();
{
_5 = _7;
_6 = _1;
_6 = [_4,_4,_4,_4,_4,_4];
_5 = _7;
_3 = [_4,_4,_4,_4,_4,_4];
_1 = [_4,_4,_4,_4,_4,_4];
_2 = _7;
_8 = !219928897142549161105550997215769621652_u128;
_2 = _7;
_3 = _6;
Call(_3 = fn3(_2, _5, _5, _8, _5, _8, _5, _4, _7), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_4 = 2491886306956452235_u64;
_1 = _3;
_2 = _5;
_7 = _2;
_1 = _3;
_6 = [_4,_4,_4,_4,_4,_4];
_12.2 = 17229_i16 as f32;
_1 = [_4,_4,_4,_4,_4,_4];
_12.2 = 107_u8 as f32;
RET = core::ptr::addr_of_mut!(_12.2);
(*RET) = _4 as f32;
(*RET) = 17863_i16 as f32;
_11 = core::ptr::addr_of_mut!(_12.3);
match _4 {
0 => bb2,
1 => bb3,
2491886306956452235 => bb5,
_ => bb4
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
(*_11) = 213_u8;
_12.0 = (-11378_i16) & (-19084_i16);
(*_11) = 23_u8 ^ 231_u8;
_6 = [_4,_4,_4,_4,_4,_4];
_16.fld0.1 = (*RET);
(*RET) = _16.fld0.1 - _16.fld0.1;
(*RET) = _8 as f32;
(*RET) = _16.fld0.1;
(*RET) = _16.fld0.1;
_11 = core::ptr::addr_of_mut!((*_11));
(*_11) = 228_u8;
_12.3 = _8 as u8;
_12.3 = 186_u8 & 86_u8;
_3 = [_4,_4,_4,_4,_4,_4];
_15 = (-118_isize);
(*_11) = 7881017757567109474_i64 as u8;
(*_11) = 151_u8 >> _12.0;
match _4 {
0 => bb6,
1 => bb7,
2491886306956452235 => bb9,
_ => bb8
}
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_4 = 2491886306956452235_u64;
_1 = _3;
_2 = _5;
_7 = _2;
_1 = _3;
_6 = [_4,_4,_4,_4,_4,_4];
_12.2 = 17229_i16 as f32;
_1 = [_4,_4,_4,_4,_4,_4];
_12.2 = 107_u8 as f32;
RET = core::ptr::addr_of_mut!(_12.2);
(*RET) = _4 as f32;
(*RET) = 17863_i16 as f32;
_11 = core::ptr::addr_of_mut!(_12.3);
match _4 {
0 => bb2,
1 => bb3,
2491886306956452235 => bb5,
_ => bb4
}
}
bb9 = {
_5 = _2;
(*_11) = 2284536079685389429_i64 as u8;
_12.1 = (*_11) as u32;
(*RET) = _8 as f32;
(*RET) = -_16.fld0.1;
(*_11) = _15 as u8;
_2 = _7;
(*RET) = _16.fld0.1;
(*_11) = false as u8;
Goto(bb10)
}
bb10 = {
_12 = ((-28621_i16), 3455781479_u32, _16.fld0.1, 98_u8);
(*_11) = 103_u8 - 190_u8;
_19 = _15 | _15;
_12 = ((-15004_i16), 2880700147_u32, _16.fld0.1, 185_u8);
_4 = 17718296544380423456_u64 >> _15;
(*_11) = !16_u8;
_15 = _19;
(*_11) = 89_u8 * 185_u8;
_15 = !_19;
_18.fld0.1 = (*RET) + (*RET);
(*_11) = 201_u8 >> _4;
match _12.1 {
0 => bb5,
1 => bb6,
2 => bb9,
2880700147 => bb11,
_ => bb4
}
}
bb11 = {
_5 = _2;
_16.fld0.0 = !true;
_16.fld2.0 = [_4,_4];
_15 = _19 & _19;
(*_11) = 1410451833_i32 as u8;
_16.fld0.1 = 34033_u16 as f32;
(*_11) = !5_u8;
(*_11) = 135_u8 & 61_u8;
(*RET) = -_16.fld0.1;
(*RET) = _16.fld0.1 + _18.fld0.1;
_16.fld2.0 = [_4,_4];
Goto(bb12)
}
bb12 = {
_21 = _2;
_25 = _19;
(*_11) = 73_u8;
_12 = ((-341_i16), 53344669_u32, _16.fld0.1, 169_u8);
_25 = !_19;
(*RET) = _18.fld0.1 + _18.fld0.1;
_16.fld3 = 22098_u16 >> (*_11);
(*_11) = 2529149637493453063_i64 as u8;
_18.fld0.0 = _16.fld0.0;
(*RET) = _16.fld0.1 - _16.fld0.1;
_16.fld3 = 22866_u16;
_3 = [_4,_4,_4,_4,_4,_4];
_11 = core::ptr::addr_of_mut!((*_11));
_5 = _21;
(*RET) = 2_usize as f32;
(*_11) = !143_u8;
_16.fld2.0 = [_4,_4];
Goto(bb13)
}
bb13 = {
_24 = (-1870123094148265212_i64) as isize;
_12.3 = 184_u8;
(*RET) = (-36795936940436289497940173932831225212_i128) as f32;
(*RET) = 1409362090875355722_i64 as f32;
Goto(bb14)
}
bb14 = {
_5 = _21;
_12.2 = (-2048090226_i32) as f32;
(*_11) = 229_u8 ^ 31_u8;
(*_11) = 76_u8;
(*_11) = _16.fld0.0 as u8;
(*_11) = 221_u8 & 0_u8;
(*RET) = _18.fld0.1;
_18.fld2 = _16.fld2;
(*RET) = (-158377674121818624295459824192152200669_i128) as f32;
(*RET) = -_18.fld0.1;
(*_11) = 243_u8 & 159_u8;
_16.fld0.0 = _18.fld0.0;
(*_11) = 191_u8 | 200_u8;
match _12.1 {
0 => bb12,
1 => bb2,
53344669 => bb15,
_ => bb4
}
}
bb15 = {
_18.fld2.0 = [_4,_4];
(*RET) = _18.fld0.1 + _18.fld0.1;
(*RET) = _16.fld0.1 + _18.fld0.1;
(*_11) = !124_u8;
_33 = _15 + _25;
(*RET) = -_18.fld0.1;
(*_11) = _8 as u8;
(*RET) = _19 as f32;
(*_11) = !69_u8;
(*_11) = 227_u8 & 26_u8;
_16.fld2 = (_18.fld2.0,);
_30 = _4 as f64;
_35.2 = core::ptr::addr_of_mut!((*_11));
_16.fld1 = -9113379307518281961_i64;
Call(_15 = core::intrinsics::bswap(_24), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
_18.fld0.1 = _4 as f32;
(*RET) = _16.fld0.1 * _18.fld0.1;
_35.1.2 = core::ptr::addr_of_mut!(_18.fld1);
_22 = &_18.fld2.0;
(*RET) = -_18.fld0.1;
(*RET) = _18.fld0.1;
(*_11) = 127_u8 | 175_u8;
_2 = _21;
_38 = 14533090052232390776_usize as u16;
_15 = _33;
_39 = _16.fld1 as i8;
_31 = _15 | _24;
_16.fld1 = (-3839221704846972148_i64) >> _12.3;
(*_11) = (*RET) as u8;
_35.1.1.1 = -_30;
(*RET) = _18.fld0.1;
_6 = [_4,_4,_4,_4,_4,_4];
(*RET) = _18.fld0.1 + _18.fld0.1;
(*RET) = _16.fld0.1;
_30 = _35.1.1.1 + _35.1.1.1;
(*_11) = 31_u8;
(*_11) = !83_u8;
_21 = _7;
Goto(bb17)
}
bb17 = {
(*_11) = !69_u8;
_42 = [_12.1];
(*RET) = -_16.fld0.1;
(*RET) = _16.fld0.1 * _16.fld0.1;
(*RET) = _16.fld0.1 * _18.fld0.1;
_35.1.3 = (*RET) != (*RET);
_8 = 120945017366546254684675404919073249946_u128 >> _31;
_44 = (_12.1, 46526337958296422753504385094522261599_i128);
(*_11) = 9_u8;
Call(_39 = core::intrinsics::bswap(32_i8), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
_44.0 = _12.1;
(*RET) = _30 as f32;
(*_11) = 254_u8;
_35.2 = core::ptr::addr_of_mut!((*_11));
_37 = !_38;
(*_11) = !18_u8;
_18.fld3 = !_37;
_18.fld2 = _16.fld2;
(*_11) = _21 as u8;
(*RET) = _18.fld0.1 + _16.fld0.1;
(*_11) = _12.1 as u8;
(*_11) = 57_u8;
(*_11) = 166_u8;
_16.fld2.0 = [_4,_4];
(*RET) = -_16.fld0.1;
(*_11) = 178_u8;
_12.1 = _44.1 as u32;
(*RET) = _12.0 as f32;
_12.3 = _44.0 as u8;
(*RET) = _18.fld0.1 * _18.fld0.1;
match _44.0 {
0 => bb14,
1 => bb9,
2 => bb10,
53344669 => bb20,
_ => bb19
}
}
bb19 = {
_24 = (-1870123094148265212_i64) as isize;
_12.3 = 184_u8;
(*RET) = (-36795936940436289497940173932831225212_i128) as f32;
(*RET) = 1409362090875355722_i64 as f32;
Goto(bb14)
}
bb20 = {
_46 = core::ptr::addr_of!((*RET));
(*_11) = 35_u8 * 107_u8;
_46 = core::ptr::addr_of!((*RET));
_6 = [_4,_4,_4,_4,_4,_4];
match _44.0 {
0 => bb16,
1 => bb5,
53344669 => bb22,
_ => bb21
}
}
bb21 = {
(*_11) = 213_u8;
_12.0 = (-11378_i16) & (-19084_i16);
(*_11) = 23_u8 ^ 231_u8;
_6 = [_4,_4,_4,_4,_4,_4];
_16.fld0.1 = (*RET);
(*RET) = _16.fld0.1 - _16.fld0.1;
(*RET) = _8 as f32;
(*RET) = _16.fld0.1;
(*RET) = _16.fld0.1;
_11 = core::ptr::addr_of_mut!((*_11));
(*_11) = 228_u8;
_12.3 = _8 as u8;
_12.3 = 186_u8 & 86_u8;
_3 = [_4,_4,_4,_4,_4,_4];
_15 = (-118_isize);
(*_11) = 7881017757567109474_i64 as u8;
(*_11) = 151_u8 >> _12.0;
match _4 {
0 => bb6,
1 => bb7,
2491886306956452235 => bb9,
_ => bb8
}
}
bb22 = {
(*RET) = _4 as f32;
_24 = _31 - _33;
_35.0 = _7;
_50 = [_21,_7,_35.0,_21,_21,_21];
(*_11) = 224_u8;
_41 = _31 == _19;
_34 = Adt62::Variant0 { fld0: _16.fld1,fld1: _4 };
_44 = (_12.1, 82928920916796324546234522361884771960_i128);
(*_11) = _12.1 as u8;
_15 = _21 as isize;
_54.0.2 = core::ptr::addr_of_mut!(_18.fld1);
(*_11) = _41 as u8;
_18.fld2.0 = [Field::<u64>(Variant(_34, 0), 1),_4];
(*RET) = _39 as f32;
_2 = _35.0;
place!(Field::<i64>(Variant(_34, 0), 0)) = _16.fld1 * _16.fld1;
_5 = _35.0;
_54.0.2 = core::ptr::addr_of_mut!(_16.fld1);
_41 = _35.1.3;
_12.1 = _44.0 ^ _44.0;
(*_11) = 212_u8 >> _24;
_52 = (*RET);
_42 = [_12.1];
_18.fld0.2 = Adt43::Variant2 { fld0: _41,fld1: _44,fld2: _31,fld3: (*_11),fld4: (-260327478_i32) };
(*RET) = _52 - _18.fld0.1;
_18.fld1 = Field::<i64>(Variant(_34, 0), 0) << (*_11);
_54.0.2 = core::ptr::addr_of_mut!(place!(Field::<i64>(Variant(_34, 0), 0)));
match _44.1 {
0 => bb23,
1 => bb24,
2 => bb25,
3 => bb26,
4 => bb27,
82928920916796324546234522361884771960 => bb29,
_ => bb28
}
}
bb23 = {
Return()
}
bb24 = {
Return()
}
bb25 = {
_24 = (-1870123094148265212_i64) as isize;
_12.3 = 184_u8;
(*RET) = (-36795936940436289497940173932831225212_i128) as f32;
(*RET) = 1409362090875355722_i64 as f32;
Goto(bb14)
}
bb26 = {
_44.0 = _12.1;
(*RET) = _30 as f32;
(*_11) = 254_u8;
_35.2 = core::ptr::addr_of_mut!((*_11));
_37 = !_38;
(*_11) = !18_u8;
_18.fld3 = !_37;
_18.fld2 = _16.fld2;
(*_11) = _21 as u8;
(*RET) = _18.fld0.1 + _16.fld0.1;
(*_11) = _12.1 as u8;
(*_11) = 57_u8;
(*_11) = 166_u8;
_16.fld2.0 = [_4,_4];
(*RET) = -_16.fld0.1;
(*_11) = 178_u8;
_12.1 = _44.1 as u32;
(*RET) = _12.0 as f32;
_12.3 = _44.0 as u8;
(*RET) = _18.fld0.1 * _18.fld0.1;
match _44.0 {
0 => bb14,
1 => bb9,
2 => bb10,
53344669 => bb20,
_ => bb19
}
}
bb27 = {
_4 = 2491886306956452235_u64;
_1 = _3;
_2 = _5;
_7 = _2;
_1 = _3;
_6 = [_4,_4,_4,_4,_4,_4];
_12.2 = 17229_i16 as f32;
_1 = [_4,_4,_4,_4,_4,_4];
_12.2 = 107_u8 as f32;
RET = core::ptr::addr_of_mut!(_12.2);
(*RET) = _4 as f32;
(*RET) = 17863_i16 as f32;
_11 = core::ptr::addr_of_mut!(_12.3);
match _4 {
0 => bb2,
1 => bb3,
2491886306956452235 => bb5,
_ => bb4
}
}
bb28 = {
_18.fld0.1 = _4 as f32;
(*RET) = _16.fld0.1 * _18.fld0.1;
_35.1.2 = core::ptr::addr_of_mut!(_18.fld1);
_22 = &_18.fld2.0;
(*RET) = -_18.fld0.1;
(*RET) = _18.fld0.1;
(*_11) = 127_u8 | 175_u8;
_2 = _21;
_38 = 14533090052232390776_usize as u16;
_15 = _33;
_39 = _16.fld1 as i8;
_31 = _15 | _24;
_16.fld1 = (-3839221704846972148_i64) >> _12.3;
(*_11) = (*RET) as u8;
_35.1.1.1 = -_30;
(*RET) = _18.fld0.1;
_6 = [_4,_4,_4,_4,_4,_4];
(*RET) = _18.fld0.1 + _18.fld0.1;
(*RET) = _16.fld0.1;
_30 = _35.1.1.1 + _35.1.1.1;
(*_11) = 31_u8;
(*_11) = !83_u8;
_21 = _7;
Goto(bb17)
}
bb29 = {
_20 = (-139869655_i32);
_32 = _2;
(*_11) = _39 as u8;
_53 = _16.fld1 == _18.fld1;
_35.1.0 = &mut _46;
_55 = Field::<u8>(Variant(_18.fld0.2, 2), 3) as f64;
_11 = Move(_35.2);
_14 = Move(_35.1.0);
(*RET) = -_18.fld0.1;
_54.0.3 = _35.1.3 < _35.1.3;
_12.2 = _18.fld0.1 - _18.fld0.1;
_24 = Field::<isize>(Variant(_18.fld0.2, 2), 2);
_32 = _21;
_25 = _31 >> Field::<(u32, i128)>(Variant(_18.fld0.2, 2), 1).0;
_30 = -_55;
_54.1 = &mut _12.0;
(*RET) = _25 as f32;
_58 = 14834_i16 as f64;
(*RET) = _52 - _52;
_4 = Field::<u64>(Variant(_34, 0), 1) * Field::<u64>(Variant(_34, 0), 1);
_34 = Adt62::Variant0 { fld0: _16.fld1,fld1: _4 };
_29 = core::ptr::addr_of!(_56);
_16.fld1 = -Field::<i64>(Variant(_34, 0), 0);
_35.2 = core::ptr::addr_of_mut!(place!(Field::<u8>(Variant(_18.fld0.2, 2), 3)));
Goto(bb30)
}
bb30 = {
_8 = 159266596437806868665073644152095678863_u128 * 79655933808493937475134772467631899183_u128;
_56 = (*RET) + (*RET);
match _44.1 {
0 => bb5,
1 => bb2,
2 => bb19,
3 => bb10,
4 => bb31,
82928920916796324546234522361884771960 => bb33,
_ => bb32
}
}
bb31 = {
Return()
}
bb32 = {
_5 = _2;
(*_11) = 2284536079685389429_i64 as u8;
_12.1 = (*_11) as u32;
(*RET) = _8 as f32;
(*RET) = -_16.fld0.1;
(*_11) = _15 as u8;
_2 = _7;
(*RET) = _16.fld0.1;
(*_11) = false as u8;
Goto(bb10)
}
bb33 = {
_6 = [Field::<u64>(Variant(_34, 0), 1),_4,_4,Field::<u64>(Variant(_34, 0), 1),Field::<u64>(Variant(_34, 0), 1),Field::<u64>(Variant(_34, 0), 1)];
place!(Field::<i32>(Variant(_18.fld0.2, 2), 4)) = _44.1 as i32;
(*_29) = 12132070378768029034_usize as f32;
_50 = [_35.0,_21,_35.0,_2,_32,_5];
_18.fld2.0 = [_4,Field::<u64>(Variant(_34, 0), 1)];
(*RET) = _16.fld3 as f32;
(*RET) = -_52;
_54.0.1.1 = (-17542_i16) as f64;
_7 = _21;
(*_29) = -_18.fld0.1;
Goto(bb34)
}
bb34 = {
_24 = Field::<isize>(Variant(_18.fld0.2, 2), 2) + _33;
_54.0.1.0 = [_8,_8,_8,_8,_8];
_52 = -(*_29);
_50 = [_21,_7,_5,_5,_21,_32];
_35.1.1 = (_54.0.1.0, _30);
_15 = _33 | _24;
_54.0.1 = (_35.1.1.0, _35.1.1.1);
_16 = Adt81 { fld0: Move(_18.fld0),fld1: _18.fld1,fld2: _18.fld2,fld3: _38 };
_54.0.3 = _35.1.3 ^ _35.1.3;
place!(Field::<i64>(Variant(_34, 0), 0)) = _16.fld1;
match _44.1 {
0 => bb13,
1 => bb25,
82928920916796324546234522361884771960 => bb35,
_ => bb15
}
}
bb35 = {
_38 = _18.fld3;
_43 = _18.fld1 | Field::<i64>(Variant(_34, 0), 0);
_18.fld2 = _16.fld2;
_1 = _3;
_21 = _7;
(*RET) = _16.fld0.1 * (*_29);
_18.fld2.0 = _16.fld2.0;
_18 = Move(_16);
(*_29) = (*RET);
(*_29) = (*RET);
_2 = _35.0;
_31 = _25 | Field::<isize>(Variant(_18.fld0.2, 2), 2);
(*_29) = (*RET);
_16.fld0.0 = _53;
(*RET) = -(*_29);
_18.fld0.0 = _41 | _16.fld0.0;
_16.fld2 = _18.fld2;
(*_29) = -(*RET);
(*RET) = (*_29);
(*_29) = -(*RET);
_54.0.1 = (_35.1.1.0, _30);
_18.fld3 = _38 - _38;
Goto(bb36)
}
bb36 = {
_59 = _18.fld0.0 as u128;
_41 = _35.1.3 & _18.fld0.0;
_6 = [_4,_4,Field::<u64>(Variant(_34, 0), 1),Field::<u64>(Variant(_34, 0), 1),_4,_4];
_44 = (Field::<(u32, i128)>(Variant(_18.fld0.2, 2), 1).0, Field::<(u32, i128)>(Variant(_18.fld0.2, 2), 1).1);
_18.fld1 = _43 >> Field::<i64>(Variant(_34, 0), 0);
place!(Field::<bool>(Variant(_18.fld0.2, 2), 0)) = _53;
_16 = Adt81 { fld0: Move(_18.fld0),fld1: _18.fld1,fld2: _18.fld2,fld3: _38 };
(*RET) = (*_29) - (*_29);
(*_29) = -(*RET);
_36 = core::ptr::addr_of!(_16.fld2);
(*RET) = (*_29) * (*_29);
_8 = !_59;
Goto(bb37)
}
bb37 = {
(*RET) = (*_29) - (*_29);
(*_29) = (*RET) - (*RET);
(*RET) = (*_29) * (*_29);
(*RET) = -(*_29);
Goto(bb38)
}
bb38 = {
_18.fld0.1 = _54.0.1.1 as f32;
_50 = [_7,_35.0,_32,_32,_5,_32];
place!(Field::<u8>(Variant(_16.fld0.2, 2), 3)) = !55_u8;
place!(Field::<u64>(Variant(_34, 0), 1)) = _39 as u64;
(*_29) = (*RET);
_62 = _8 << _25;
_16.fld0.0 = !Field::<bool>(Variant(_16.fld0.2, 2), 0);
(*RET) = -_56;
_50 = [_2,_5,_21,_5,_32,_35.0];
_40 = &mut place!(Field::<i32>(Variant(_16.fld0.2, 2), 4));
_66 = Move(_36);
(*RET) = (*_29) - (*_29);
_14 = &mut _29;
_54.0 = (Move(_14), _35.1.1, Move(_35.1.2), _41);
_2 = _5;
_1 = _6;
(*RET) = _44.1 as f32;
_39 = (*RET) as i8;
Goto(bb39)
}
bb39 = {
_35.1.1 = (_54.0.1.0, _54.0.1.1);
_18.fld0.1 = _4 as f32;
_44.1 = (-41866080502248763747396790301808872682_i128) << Field::<i64>(Variant(_34, 0), 0);
(*_40) = _20 & _20;
RET = core::ptr::addr_of_mut!((*RET));
Goto(bb40)
}
bb40 = {
_55 = _44.1 as f64;
(*_40) = (*RET) as i32;
(*RET) = _56;
_51 = 4_usize;
(*RET) = _18.fld0.1;
_68 = _18.fld1 ^ Field::<i64>(Variant(_34, 0), 0);
_19 = _15 + _15;
_32 = _2;
_60 = [_21,_32,_50[_51],_21,_7,_7];
(*_40) = _20;
_36 = core::ptr::addr_of!(_18.fld2);
_73 = _54.0.3 | _54.0.3;
_62 = _43 as u128;
_60[_51] = _2;
(*RET) = _56 * _56;
_62 = _8 + _8;
(*_40) = -_20;
_44 = (3199137407_u32, 6882326744456278637835741781849113081_i128);
(*_36).0 = [_6[_51],_6[_51]];
_72 = [_8,_59,_59,_8,_62,_62,_62,_8];
_19 = (*_40) as isize;
_68 = _38 as i64;
_18.fld2.0 = [_1[_51],_1[_51]];
_54.0.2 = core::ptr::addr_of_mut!(_18.fld1);
Goto(bb41)
}
bb41 = {
(*_36).0 = [_1[_51],_1[_51]];
(*_40) = !_20;
Goto(bb42)
}
bb42 = {
(*_36).0 = [_4,_1[_51]];
(*_40) = _20 & _20;
_11 = Move(_35.2);
_35.1.1 = (_54.0.1.0, _55);
_52 = (*RET) + (*RET);
(*RET) = _52 - _52;
(*_40) = _20;
_30 = _55;
match (*_40) {
0 => bb20,
1 => bb2,
2 => bb43,
340282366920938463463374607431628341801 => bb45,
_ => bb44
}
}
bb43 = {
_12 = ((-28621_i16), 3455781479_u32, _16.fld0.1, 98_u8);
(*_11) = 103_u8 - 190_u8;
_19 = _15 | _15;
_12 = ((-15004_i16), 2880700147_u32, _16.fld0.1, 185_u8);
_4 = 17718296544380423456_u64 >> _15;
(*_11) = !16_u8;
_15 = _19;
(*_11) = 89_u8 * 185_u8;
_15 = !_19;
_18.fld0.1 = (*RET) + (*RET);
(*_11) = 201_u8 >> _4;
match _12.1 {
0 => bb5,
1 => bb6,
2 => bb9,
2880700147 => bb11,
_ => bb4
}
}
bb44 = {
_24 = (-1870123094148265212_i64) as isize;
_12.3 = 184_u8;
(*RET) = (-36795936940436289497940173932831225212_i128) as f32;
(*RET) = 1409362090875355722_i64 as f32;
Goto(bb14)
}
bb45 = {
(*RET) = _52 - _56;
(*_36).0 = [Field::<u64>(Variant(_34, 0), 1),_1[_51]];
(*RET) = _56;
_41 = _25 <= _31;
_75 = (_39, _51, _31);
_44 = (1213682586_u32, 124635657932927252430340263599875212522_i128);
Goto(bb46)
}
bb46 = {
(*_40) = _20;
match _44.1 {
0 => bb47,
1 => bb48,
124635657932927252430340263599875212522 => bb50,
_ => bb49
}
}
bb47 = {
(*RET) = _52 - _56;
(*_36).0 = [Field::<u64>(Variant(_34, 0), 1),_1[_51]];
(*RET) = _56;
_41 = _25 <= _31;
_75 = (_39, _51, _31);
_44 = (1213682586_u32, 124635657932927252430340263599875212522_i128);
Goto(bb46)
}
bb48 = {
_18.fld0.1 = _4 as f32;
(*RET) = _16.fld0.1 * _18.fld0.1;
_35.1.2 = core::ptr::addr_of_mut!(_18.fld1);
_22 = &_18.fld2.0;
(*RET) = -_18.fld0.1;
(*RET) = _18.fld0.1;
(*_11) = 127_u8 | 175_u8;
_2 = _21;
_38 = 14533090052232390776_usize as u16;
_15 = _33;
_39 = _16.fld1 as i8;
_31 = _15 | _24;
_16.fld1 = (-3839221704846972148_i64) >> _12.3;
(*_11) = (*RET) as u8;
_35.1.1.1 = -_30;
(*RET) = _18.fld0.1;
_6 = [_4,_4,_4,_4,_4,_4];
(*RET) = _18.fld0.1 + _18.fld0.1;
(*RET) = _16.fld0.1;
_30 = _35.1.1.1 + _35.1.1.1;
(*_11) = 31_u8;
(*_11) = !83_u8;
_21 = _7;
Goto(bb17)
}
bb49 = {
_6 = [Field::<u64>(Variant(_34, 0), 1),_4,_4,Field::<u64>(Variant(_34, 0), 1),Field::<u64>(Variant(_34, 0), 1),Field::<u64>(Variant(_34, 0), 1)];
place!(Field::<i32>(Variant(_18.fld0.2, 2), 4)) = _44.1 as i32;
(*_29) = 12132070378768029034_usize as f32;
_50 = [_35.0,_21,_35.0,_2,_32,_5];
_18.fld2.0 = [_4,Field::<u64>(Variant(_34, 0), 1)];
(*RET) = _16.fld3 as f32;
(*RET) = -_52;
_54.0.1.1 = (-17542_i16) as f64;
_7 = _21;
(*_29) = -_18.fld0.1;
Goto(bb34)
}
bb50 = {
(*_36).0 = [_4,_1[_51]];
_18.fld3 = _38;
(*_36).0 = [Field::<u64>(Variant(_34, 0), 1),_4];
_66 = core::ptr::addr_of!((*_36));
_75 = (_39, _51, _33);
(*_40) = -_20;
_60 = [_5,_5,_21,_21,_2,_2];
_72 = [_59,_62,_8,_8,_62,_62,_8,_62];
_74.0 = _15 > _31;
(*RET) = 30_u8 as f32;
(*RET) = -_52;
_37 = _38 | _38;
(*RET) = _56;
_82 = &mut _8;
(*RET) = -_52;
_65 = (*_36).0;
_74.0 = !_53;
Goto(bb51)
}
bb51 = {
Call(_94 = dump_var(2_usize, 72_usize, Move(_72), 65_usize, Move(_65), 25_usize, Move(_25), 19_usize, Move(_19)), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
Call(_94 = dump_var(2_usize, 68_usize, Move(_68), 31_usize, Move(_31), 41_usize, Move(_41), 8_usize, Move(_8)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Call(_94 = dump_var(2_usize, 59_usize, Move(_59), 38_usize, Move(_38), 62_usize, Move(_62), 21_usize, Move(_21)), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Call(_94 = dump_var(2_usize, 6_usize, Move(_6), 53_usize, Move(_53), 60_usize, Move(_60), 4_usize, Move(_4)), ReturnTo(bb55), UnwindUnreachable())
}
bb55 = {
Call(_94 = dump_var(2_usize, 24_usize, Move(_24), 95_usize, _95, 95_usize, _95, 95_usize, _95), ReturnTo(bb56), UnwindUnreachable())
}
bb56 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn3(mut _1: char,mut _2: char,mut _3: char,mut _4: u128,mut _5: char,mut _6: u128,mut _7: char,mut _8: u64,mut _9: char) -> [u64; 6] {
mir! {
type RET = [u64; 6];
let _10: *const ([u128; 5], f64);
let _11: (u32, i128);
let _12: isize;
let _13: f32;
let _14: bool;
let _15: &'static mut i32;
let _16: Adt60;
let _17: f64;
let _18: [u128; 5];
let _19: f64;
let _20: i128;
let _21: f32;
let _22: isize;
let _23: &'static mut Adt62;
let _24: usize;
let _25: isize;
let _26: i16;
let _27: Adt43;
let _28: &'static mut (i8, usize, isize);
let _29: *mut &'static mut i16;
let _30: f64;
let _31: u8;
let _32: *mut i64;
let _33: char;
let _34: f64;
let _35: (i8, usize, isize);
let _36: isize;
let _37: i8;
let _38: &'static i16;
let _39: *const [u64; 6];
let _40: (&'static u16, u16, (i16, u32, f32, u8));
let _41: Adt68;
let _42: isize;
let _43: Adt60;
let _44: (bool, i16, i8, &'static mut i16);
let _45: *const *mut usize;
let _46: &'static i8;
let _47: isize;
let _48: [char; 3];
let _49: &'static [u64; 2];
let _50: isize;
let _51: isize;
let _52: isize;
let _53: f32;
let _54: isize;
let _55: &'static mut *const f32;
let _56: char;
let _57: Adt60;
let _58: ([u64; 2],);
let _59: char;
let _60: &'static mut Adt62;
let _61: *const ([u128; 5], f64);
let _62: [char; 6];
let _63: u16;
let _64: (u32, i128);
let _65: [u16; 6];
let _66: u16;
let _67: bool;
let _68: [u16; 6];
let _69: *mut i64;
let _70: f64;
let _71: f64;
let _72: *mut *const f32;
let _73: *mut usize;
let _74: ();
let _75: ();
{
_1 = _5;
_3 = _2;
_9 = _7;
_5 = _9;
_8 = 17959264885524514054_u64 + 14630941323579080_u64;
_4 = _6 ^ _6;
_2 = _9;
_3 = _7;
_2 = _9;
_8 = 12109306968003596434_u64;
RET = [_8,_8,_8,_8,_8,_8];
_3 = _1;
_5 = _2;
_2 = _7;
_3 = _7;
Call(_9 = fn4(_7, _7, _1, _4, _7, _2, _5, _8, _2), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_2 = _3;
_3 = _7;
_6 = _4 - _4;
_4 = !_6;
_4 = _6;
_8 = 4525381580062133878_u64;
_3 = _2;
_8 = 2957727139365873809_u64 | 18269454653575811787_u64;
_1 = _2;
_1 = _7;
RET = [_8,_8,_8,_8,_8,_8];
_8 = 7430280267099412204_u64 ^ 2338918194609681335_u64;
_9 = _7;
_4 = _6;
_5 = _7;
_6 = _4 - _4;
RET = [_8,_8,_8,_8,_8,_8];
_8 = 16373601295174929481_u64 - 2449787994158784420_u64;
_6 = _4 | _4;
_11.0 = 2094000494_u32;
_11 = (1743231337_u32, 25900367930312866304537109284492042285_i128);
_6 = !_4;
Goto(bb2)
}
bb2 = {
_11.1 = 2_usize as i128;
_4 = _6 >> _8;
_1 = _5;
_6 = 167_u8 as u128;
_13 = 1725599841_i32 as f32;
_5 = _2;
_5 = _2;
match _11.0 {
0 => bb1,
1 => bb3,
2 => bb4,
3 => bb5,
1743231337 => bb7,
_ => bb6
}
}
bb3 = {
_2 = _3;
_3 = _7;
_6 = _4 - _4;
_4 = !_6;
_4 = _6;
_8 = 4525381580062133878_u64;
_3 = _2;
_8 = 2957727139365873809_u64 | 18269454653575811787_u64;
_1 = _2;
_1 = _7;
RET = [_8,_8,_8,_8,_8,_8];
_8 = 7430280267099412204_u64 ^ 2338918194609681335_u64;
_9 = _7;
_4 = _6;
_5 = _7;
_6 = _4 - _4;
RET = [_8,_8,_8,_8,_8,_8];
_8 = 16373601295174929481_u64 - 2449787994158784420_u64;
_6 = _4 | _4;
_11.0 = 2094000494_u32;
_11 = (1743231337_u32, 25900367930312866304537109284492042285_i128);
_6 = !_4;
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
_11 = (2194739895_u32, (-90245551277719533055310398078205665460_i128));
_12 = _8 as isize;
_1 = _2;
_13 = 1604069589_i32 as f32;
_12 = 70_isize;
_7 = _5;
Goto(bb8)
}
bb8 = {
_11.1 = 139646031005716971399551768570658590771_i128;
_14 = _3 != _1;
_2 = _5;
RET = [_8,_8,_8,_8,_8,_8];
_13 = _8 as f32;
_13 = _11.0 as f32;
_14 = !false;
_16 = Adt60::Variant0 { fld0: 5113_u16 };
place!(Field::<u16>(Variant(_16, 0), 0)) = _12 as u16;
match _11.0 {
0 => bb1,
1 => bb7,
2194739895 => bb10,
_ => bb9
}
}
bb9 = {
_2 = _3;
_3 = _7;
_6 = _4 - _4;
_4 = !_6;
_4 = _6;
_8 = 4525381580062133878_u64;
_3 = _2;
_8 = 2957727139365873809_u64 | 18269454653575811787_u64;
_1 = _2;
_1 = _7;
RET = [_8,_8,_8,_8,_8,_8];
_8 = 7430280267099412204_u64 ^ 2338918194609681335_u64;
_9 = _7;
_4 = _6;
_5 = _7;
_6 = _4 - _4;
RET = [_8,_8,_8,_8,_8,_8];
_8 = 16373601295174929481_u64 - 2449787994158784420_u64;
_6 = _4 | _4;
_11.0 = 2094000494_u32;
_11 = (1743231337_u32, 25900367930312866304537109284492042285_i128);
_6 = !_4;
Goto(bb2)
}
bb10 = {
_12 = 9223372036854775807_isize << _4;
_16 = Adt60::Variant0 { fld0: 59228_u16 };
_13 = 15009_i16 as f32;
_11 = (2237781327_u32, 158136068706610028490376971477640005574_i128);
RET = [_8,_8,_8,_8,_8,_8];
_8 = 1013311176026410480_u64;
_17 = 104_i8 as f64;
_11 = (3058250540_u32, (-116833103237878122534708576704816604542_i128));
_2 = _7;
_11 = (3802596178_u32, (-146712147211161089259436988344605141455_i128));
_5 = _2;
_13 = 62_u8 as f32;
_18 = [_4,_4,_4,_4,_4];
_6 = (-26_i8) as u128;
_12 = (-29_isize) + (-48_isize);
match _11.1 {
0 => bb1,
1 => bb11,
193570219709777374203937619087163070001 => bb13,
_ => bb12
}
}
bb11 = {
_2 = _3;
_3 = _7;
_6 = _4 - _4;
_4 = !_6;
_4 = _6;
_8 = 4525381580062133878_u64;
_3 = _2;
_8 = 2957727139365873809_u64 | 18269454653575811787_u64;
_1 = _2;
_1 = _7;
RET = [_8,_8,_8,_8,_8,_8];
_8 = 7430280267099412204_u64 ^ 2338918194609681335_u64;
_9 = _7;
_4 = _6;
_5 = _7;
_6 = _4 - _4;
RET = [_8,_8,_8,_8,_8,_8];
_8 = 16373601295174929481_u64 - 2449787994158784420_u64;
_6 = _4 | _4;
_11.0 = 2094000494_u32;
_11 = (1743231337_u32, 25900367930312866304537109284492042285_i128);
_6 = !_4;
Goto(bb2)
}
bb12 = {
Return()
}
bb13 = {
_8 = 16155341295135996845_u64;
_2 = _9;
_7 = _1;
_3 = _5;
place!(Field::<u16>(Variant(_16, 0), 0)) = _11.1 as u16;
RET = [_8,_8,_8,_8,_8,_8];
_7 = _1;
_4 = !_6;
_21 = -_13;
_8 = 1391653166491601057_u64 + 12796910137300280283_u64;
_14 = _12 > _12;
_4 = _6 ^ _6;
_22 = !_12;
_11 = (1629425611_u32, 73893132795983024336461057552279778227_i128);
_14 = _13 > _13;
_6 = _4 ^ _4;
place!(Field::<u16>(Variant(_16, 0), 0)) = 54741_u16 + 62347_u16;
_22 = _12 << _6;
_24 = 16485341439003512701_usize & 6404508509060327431_usize;
_19 = _17;
_20 = _21 as i128;
_19 = _17 - _17;
Goto(bb14)
}
bb14 = {
_14 = false & false;
_19 = _17;
Goto(bb15)
}
bb15 = {
_17 = _19 * _19;
_25 = _22;
_25 = -_12;
_1 = _5;
_20 = -_11.1;
_17 = _19 * _19;
_26 = (-28401_i16);
_17 = -_19;
_1 = _5;
_21 = _13 - _13;
_11.1 = _20 >> _8;
place!(Field::<u16>(Variant(_16, 0), 0)) = _24 as u16;
_18 = [_4,_4,_6,_6,_4];
_18 = [_6,_4,_4,_6,_4];
_9 = _5;
_6 = _4 + _4;
_3 = _9;
Goto(bb16)
}
bb16 = {
_8 = (-564046232_i32) as u64;
_8 = 13759012408873133277_u64 ^ 6233414236159346989_u64;
RET = [_8,_8,_8,_8,_8,_8];
_19 = 264790524_i32 as f64;
_6 = _4 << _25;
Goto(bb17)
}
bb17 = {
_30 = -_19;
_2 = _5;
_31 = 10_u8;
_21 = _13 * _13;
_27 = Adt43::Variant2 { fld0: _14,fld1: _11,fld2: _25,fld3: _31,fld4: 2054864266_i32 };
place!(Field::<bool>(Variant(_27, 2), 0)) = _11.1 != Field::<(u32, i128)>(Variant(_27, 2), 1).1;
RET = [_8,_8,_8,_8,_8,_8];
_31 = Field::<u16>(Variant(_16, 0), 0) as u8;
_24 = 17270945533192132446_usize;
_7 = _3;
_25 = _22;
_21 = -_13;
place!(Field::<(u32, i128)>(Variant(_27, 2), 1)).0 = _11.0 / _11.0;
_35.2 = (-49_i8) as isize;
_34 = -_19;
place!(Field::<u16>(Variant(_16, 0), 0)) = 34348_u16 << Field::<u8>(Variant(_27, 2), 3);
_9 = _7;
_11.0 = _21 as u32;
_3 = _5;
_35.2 = !_22;
place!(Field::<isize>(Variant(_27, 2), 2)) = _22 & _25;
_31 = Field::<u8>(Variant(_27, 2), 3) >> Field::<(u32, i128)>(Variant(_27, 2), 1).0;
Goto(bb18)
}
bb18 = {
_5 = _1;
place!(Field::<(u32, i128)>(Variant(_27, 2), 1)).1 = _11.1;
place!(Field::<i32>(Variant(_27, 2), 4)) = 124_i8 as i32;
place!(Field::<i32>(Variant(_27, 2), 4)) = 425637228_i32;
_35.0 = 84_i8 | 53_i8;
_17 = _34 + _30;
_34 = Field::<i32>(Variant(_27, 2), 4) as f64;
_35.2 = _3 as isize;
_5 = _9;
_25 = !Field::<isize>(Variant(_27, 2), 2);
_6 = Field::<u16>(Variant(_16, 0), 0) as u128;
Goto(bb19)
}
bb19 = {
_40.2.3 = Field::<u8>(Variant(_27, 2), 3);
_1 = _9;
_22 = !_35.2;
_25 = Field::<isize>(Variant(_27, 2), 2);
_19 = _30 + _17;
_7 = _2;
_21 = _13 + _13;
match _26 {
0 => bb4,
1 => bb8,
2 => bb20,
3 => bb21,
4 => bb22,
5 => bb23,
6 => bb24,
340282366920938463463374607431768183055 => bb26,
_ => bb25
}
}
bb20 = {
_5 = _1;
place!(Field::<(u32, i128)>(Variant(_27, 2), 1)).1 = _11.1;
place!(Field::<i32>(Variant(_27, 2), 4)) = 124_i8 as i32;
place!(Field::<i32>(Variant(_27, 2), 4)) = 425637228_i32;
_35.0 = 84_i8 | 53_i8;
_17 = _34 + _30;
_34 = Field::<i32>(Variant(_27, 2), 4) as f64;
_35.2 = _3 as isize;
_5 = _9;
_25 = !Field::<isize>(Variant(_27, 2), 2);
_6 = Field::<u16>(Variant(_16, 0), 0) as u128;
Goto(bb19)
}
bb21 = {
Return()
}
bb22 = {
_8 = (-564046232_i32) as u64;
_8 = 13759012408873133277_u64 ^ 6233414236159346989_u64;
RET = [_8,_8,_8,_8,_8,_8];
_19 = 264790524_i32 as f64;
_6 = _4 << _25;
Goto(bb17)
}
bb23 = {
_11.1 = 2_usize as i128;
_4 = _6 >> _8;
_1 = _5;
_6 = 167_u8 as u128;
_13 = 1725599841_i32 as f32;
_5 = _2;
_5 = _2;
match _11.0 {
0 => bb1,
1 => bb3,
2 => bb4,
3 => bb5,
1743231337 => bb7,
_ => bb6
}
}
bb24 = {
_14 = false & false;
_19 = _17;
Goto(bb15)
}
bb25 = {
Return()
}
bb26 = {
_20 = -Field::<(u32, i128)>(Variant(_27, 2), 1).1;
_35 = (94_i8, _24, Field::<isize>(Variant(_27, 2), 2));
_42 = _19 as isize;
_40.1 = Field::<u16>(Variant(_16, 0), 0);
_22 = -_25;
_25 = -_22;
place!(Field::<bool>(Variant(_27, 2), 0)) = !_14;
_20 = _4 as i128;
_30 = -_17;
_25 = Field::<i32>(Variant(_27, 2), 4) as isize;
match _35.0 {
0 => bb27,
1 => bb28,
2 => bb29,
3 => bb30,
4 => bb31,
5 => bb32,
94 => bb34,
_ => bb33
}
}
bb27 = {
_30 = -_19;
_2 = _5;
_31 = 10_u8;
_21 = _13 * _13;
_27 = Adt43::Variant2 { fld0: _14,fld1: _11,fld2: _25,fld3: _31,fld4: 2054864266_i32 };
place!(Field::<bool>(Variant(_27, 2), 0)) = _11.1 != Field::<(u32, i128)>(Variant(_27, 2), 1).1;
RET = [_8,_8,_8,_8,_8,_8];
_31 = Field::<u16>(Variant(_16, 0), 0) as u8;
_24 = 17270945533192132446_usize;
_7 = _3;
_25 = _22;
_21 = -_13;
place!(Field::<(u32, i128)>(Variant(_27, 2), 1)).0 = _11.0 / _11.0;
_35.2 = (-49_i8) as isize;
_34 = -_19;
place!(Field::<u16>(Variant(_16, 0), 0)) = 34348_u16 << Field::<u8>(Variant(_27, 2), 3);
_9 = _7;
_11.0 = _21 as u32;
_3 = _5;
_35.2 = !_22;
place!(Field::<isize>(Variant(_27, 2), 2)) = _22 & _25;
_31 = Field::<u8>(Variant(_27, 2), 3) >> Field::<(u32, i128)>(Variant(_27, 2), 1).0;
Goto(bb18)
}
bb28 = {
_14 = false & false;
_19 = _17;
Goto(bb15)
}
bb29 = {
_2 = _3;
_3 = _7;
_6 = _4 - _4;
_4 = !_6;
_4 = _6;
_8 = 4525381580062133878_u64;
_3 = _2;
_8 = 2957727139365873809_u64 | 18269454653575811787_u64;
_1 = _2;
_1 = _7;
RET = [_8,_8,_8,_8,_8,_8];
_8 = 7430280267099412204_u64 ^ 2338918194609681335_u64;
_9 = _7;
_4 = _6;
_5 = _7;
_6 = _4 - _4;
RET = [_8,_8,_8,_8,_8,_8];
_8 = 16373601295174929481_u64 - 2449787994158784420_u64;
_6 = _4 | _4;
_11.0 = 2094000494_u32;
_11 = (1743231337_u32, 25900367930312866304537109284492042285_i128);
_6 = !_4;
Goto(bb2)
}
bb30 = {
_11.1 = 2_usize as i128;
_4 = _6 >> _8;
_1 = _5;
_6 = 167_u8 as u128;
_13 = 1725599841_i32 as f32;
_5 = _2;
_5 = _2;
match _11.0 {
0 => bb1,
1 => bb3,
2 => bb4,
3 => bb5,
1743231337 => bb7,
_ => bb6
}
}
bb31 = {
Return()
}
bb32 = {
_17 = _19 * _19;
_25 = _22;
_25 = -_12;
_1 = _5;
_20 = -_11.1;
_17 = _19 * _19;
_26 = (-28401_i16);
_17 = -_19;
_1 = _5;
_21 = _13 - _13;
_11.1 = _20 >> _8;
place!(Field::<u16>(Variant(_16, 0), 0)) = _24 as u16;
_18 = [_4,_4,_6,_6,_4];
_18 = [_6,_4,_4,_6,_4];
_9 = _5;
_6 = _4 + _4;
_3 = _9;
Goto(bb16)
}
bb33 = {
_40.2.3 = Field::<u8>(Variant(_27, 2), 3);
_1 = _9;
_22 = !_35.2;
_25 = Field::<isize>(Variant(_27, 2), 2);
_19 = _30 + _17;
_7 = _2;
_21 = _13 + _13;
match _26 {
0 => bb4,
1 => bb8,
2 => bb20,
3 => bb21,
4 => bb22,
5 => bb23,
6 => bb24,
340282366920938463463374607431768183055 => bb26,
_ => bb25
}
}
bb34 = {
place!(Field::<isize>(Variant(_27, 2), 2)) = _8 as isize;
_35.0 = (-41_i8);
_18 = [_4,_4,_4,_6,_6];
_36 = _22 - _35.2;
_38 = &_26;
_16 = Adt60::Variant0 { fld0: _40.1 };
_35.2 = _14 as isize;
_37 = _35.0;
_39 = core::ptr::addr_of!(RET);
place!(Field::<isize>(Variant(_27, 2), 2)) = _22;
(*_39) = [_8,_8,_8,_8,_8,_8];
_20 = Field::<(u32, i128)>(Variant(_27, 2), 1).1;
place!(Field::<(u32, i128)>(Variant(_27, 2), 1)) = (_11.0, _11.1);
_35.2 = _3 as isize;
place!(Field::<(u32, i128)>(Variant(_27, 2), 1)).1 = _11.1;
_18 = [_6,_6,_4,_4,_4];
_37 = _35.0 & _35.0;
(*_39) = [_8,_8,_8,_8,_8,_8];
_4 = _6 >> _11.0;
_20 = _11.1 - Field::<(u32, i128)>(Variant(_27, 2), 1).1;
_46 = &_35.0;
match (*_38) {
0 => bb13,
1 => bb6,
2 => bb35,
3 => bb36,
340282366920938463463374607431768183055 => bb38,
_ => bb37
}
}
bb35 = {
_11.1 = 2_usize as i128;
_4 = _6 >> _8;
_1 = _5;
_6 = 167_u8 as u128;
_13 = 1725599841_i32 as f32;
_5 = _2;
_5 = _2;
match _11.0 {
0 => bb1,
1 => bb3,
2 => bb4,
3 => bb5,
1743231337 => bb7,
_ => bb6
}
}
bb36 = {
Return()
}
bb37 = {
Return()
}
bb38 = {
_11.1 = !_20;
_35.1 = _24;
_44.1 = (*_38);
(*_39) = [_8,_8,_8,_8,_8,_8];
(*_39) = [_8,_8,_8,_8,_8,_8];
_12 = _42 >> (*_46);
_28 = &mut _35;
(*_28).2 = Field::<u16>(Variant(_16, 0), 0) as isize;
_11 = (Field::<(u32, i128)>(Variant(_27, 2), 1).0, _20);
_40.2 = ((*_38), Field::<(u32, i128)>(Variant(_27, 2), 1).0, _21, _31);
(*_28).1 = _24 << (*_28).0;
(*_28).1 = !_24;
place!(Field::<u8>(Variant(_27, 2), 3)) = _40.2.3;
(*_28).1 = _24;
(*_28).1 = _24;
place!(Field::<(u32, i128)>(Variant(_27, 2), 1)).1 = _11.1 >> _36;
_47 = (*_28).2 << Field::<u8>(Variant(_27, 2), 3);
(*_28).1 = _24;
_15 = &mut place!(Field::<i32>(Variant(_27, 2), 4));
_43 = Move(_16);
(*_28).1 = _20 as usize;
_40.0 = &place!(Field::<u16>(Variant(_43, 0), 0));
_1 = _7;
_44.3 = &mut (*_38);
_25 = (*_28).2 << (*_28).1;
(*_39) = [_8,_8,_8,_8,_8,_8];
match (*_28).0 {
0 => bb28,
1 => bb5,
2 => bb39,
340282366920938463463374607431768211415 => bb41,
_ => bb40
}
}
bb39 = {
_2 = _3;
_3 = _7;
_6 = _4 - _4;
_4 = !_6;
_4 = _6;
_8 = 4525381580062133878_u64;
_3 = _2;
_8 = 2957727139365873809_u64 | 18269454653575811787_u64;
_1 = _2;
_1 = _7;
RET = [_8,_8,_8,_8,_8,_8];
_8 = 7430280267099412204_u64 ^ 2338918194609681335_u64;
_9 = _7;
_4 = _6;
_5 = _7;
_6 = _4 - _4;
RET = [_8,_8,_8,_8,_8,_8];
_8 = 16373601295174929481_u64 - 2449787994158784420_u64;
_6 = _4 | _4;
_11.0 = 2094000494_u32;
_11 = (1743231337_u32, 25900367930312866304537109284492042285_i128);
_6 = !_4;
Goto(bb2)
}
bb40 = {
_8 = 16155341295135996845_u64;
_2 = _9;
_7 = _1;
_3 = _5;
place!(Field::<u16>(Variant(_16, 0), 0)) = _11.1 as u16;
RET = [_8,_8,_8,_8,_8,_8];
_7 = _1;
_4 = !_6;
_21 = -_13;
_8 = 1391653166491601057_u64 + 12796910137300280283_u64;
_14 = _12 > _12;
_4 = _6 ^ _6;
_22 = !_12;
_11 = (1629425611_u32, 73893132795983024336461057552279778227_i128);
_14 = _13 > _13;
_6 = _4 ^ _4;
place!(Field::<u16>(Variant(_16, 0), 0)) = 54741_u16 + 62347_u16;
_22 = _12 << _6;
_24 = 16485341439003512701_usize & 6404508509060327431_usize;
_19 = _17;
_20 = _21 as i128;
_19 = _17 - _17;
Goto(bb14)
}
bb41 = {
_11.0 = !_40.2.1;
(*_28).2 = _36;
_40.2.3 = _31 ^ _31;
Goto(bb42)
}
bb42 = {
(*_28).2 = _25 * _36;
_11.0 = _40.2.1;
_40.2.2 = _21 * _13;
(*_28).1 = !_24;
(*_28).1 = _24 - _24;
(*_28).1 = _40.2.1 as usize;
(*_28).2 = _36 - _25;
_36 = -(*_28).2;
_5 = _7;
_12 = !(*_28).2;
(*_39) = [_8,_8,_8,_8,_8,_8];
(*_39) = [_8,_8,_8,_8,_8,_8];
(*_28).1 = _24 ^ _24;
(*_15) = _1 as i32;
(*_28).2 = _36 - _12;
(*_39) = [_8,_8,_8,_8,_8,_8];
(*_39) = [_8,_8,_8,_8,_8,_8];
(*_28).1 = _24 - _24;
(*_15) = (-100588330_i32);
_52 = (*_28).2 | (*_28).2;
(*_28).1 = _24 + _24;
(*_39) = [_8,_8,_8,_8,_8,_8];
_50 = (*_28).2 + (*_28).2;
_12 = _13 as isize;
Goto(bb43)
}
bb43 = {
(*_28).2 = _50 * _50;
_18 = [_4,_4,_6,_6,_4];
(*_39) = [_8,_8,_8,_8,_8,_8];
_54 = -(*_28).2;
_4 = _6 >> (*_28).2;
match (*_15) {
0 => bb44,
1 => bb45,
340282366920938463463374607431667623126 => bb47,
_ => bb46
}
}
bb44 = {
Return()
}
bb45 = {
Return()
}
bb46 = {
_2 = _3;
_3 = _7;
_6 = _4 - _4;
_4 = !_6;
_4 = _6;
_8 = 4525381580062133878_u64;
_3 = _2;
_8 = 2957727139365873809_u64 | 18269454653575811787_u64;
_1 = _2;
_1 = _7;
RET = [_8,_8,_8,_8,_8,_8];
_8 = 7430280267099412204_u64 ^ 2338918194609681335_u64;
_9 = _7;
_4 = _6;
_5 = _7;
_6 = _4 - _4;
RET = [_8,_8,_8,_8,_8,_8];
_8 = 16373601295174929481_u64 - 2449787994158784420_u64;
_6 = _4 | _4;
_11.0 = 2094000494_u32;
_11 = (1743231337_u32, 25900367930312866304537109284492042285_i128);
_6 = !_4;
Goto(bb2)
}
bb47 = {
_40.2.3 = !_31;
_5 = _7;
(*_28).1 = _40.2.2 as usize;
_4 = _6 & _6;
(*_28).1 = _24 & _24;
_44.2 = !(*_28).0;
RET = [_8,_8,_8,_8,_8,_8];
(*_28).2 = _50 - _52;
_17 = _19 + _30;
(*_28).2 = !_50;
(*_28).2 = !_52;
_57 = Move(_43);
(*_39) = [_8,_8,_8,_8,_8,_8];
_40.0 = &_40.1;
_54 = _8 as isize;
_56 = _1;
(*_28).2 = _50 ^ _22;
_64.1 = _11.1;
(*_28).2 = _52 | _52;
_43 = Move(_57);
Goto(bb48)
}
bb48 = {
(*_15) = _40.1 as i32;
(*_39) = [_8,_8,_8,_8,_8,_8];
(*_39) = [_8,_8,_8,_8,_8,_8];
_53 = _21 + _40.2.2;
_16 = Move(_43);
(*_39) = [_8,_8,_8,_8,_8,_8];
_57 = Move(_16);
(*_28).2 = !_50;
(*_39) = [_8,_8,_8,_8,_8,_8];
(*_28).1 = Field::<u16>(Variant(_57, 0), 0) as usize;
(*_28).1 = _24;
_48 = [_9,_2,_2];
_64.0 = _40.2.1;
_47 = !(*_28).2;
_44.2 = (*_28).0 | (*_28).0;
_59 = _5;
(*_28).1 = _8 as usize;
(*_39) = [_8,_8,_8,_8,_8,_8];
(*_39) = [_8,_8,_8,_8,_8,_8];
(*_28).1 = _24;
_13 = _53 * _53;
_39 = core::ptr::addr_of!((*_39));
_18 = [_4,_4,_4,_4,_6];
_40.2.3 = !_31;
(*_15) = (-1630513949_i32);
(*_28).1 = _24;
_25 = (*_28).2 * (*_28).2;
(*_39) = [_8,_8,_8,_8,_8,_8];
match (*_28).0 {
340282366920938463463374607431768211415 => bb50,
_ => bb49
}
}
bb49 = {
_2 = _3;
_3 = _7;
_6 = _4 - _4;
_4 = !_6;
_4 = _6;
_8 = 4525381580062133878_u64;
_3 = _2;
_8 = 2957727139365873809_u64 | 18269454653575811787_u64;
_1 = _2;
_1 = _7;
RET = [_8,_8,_8,_8,_8,_8];
_8 = 7430280267099412204_u64 ^ 2338918194609681335_u64;
_9 = _7;
_4 = _6;
_5 = _7;
_6 = _4 - _4;
RET = [_8,_8,_8,_8,_8,_8];
_8 = 16373601295174929481_u64 - 2449787994158784420_u64;
_6 = _4 | _4;
_11.0 = 2094000494_u32;
_11 = (1743231337_u32, 25900367930312866304537109284492042285_i128);
_6 = !_4;
Goto(bb2)
}
bb50 = {
(*_28).2 = _50;
(*_15) = _20 as i32;
_40.2.2 = _13 * _53;
(*_28).1 = !_24;
(*_39) = [_8,_8,_8,_8,_8,_8];
(*_15) = _4 as i32;
(*_28).2 = _14 as isize;
(*_39) = [_8,_8,_8,_8,_8,_8];
(*_39) = [_8,_8,_8,_8,_8,_8];
(*_28).1 = _24;
_30 = _17 + _17;
(*_28).2 = _47 >> (*_15);
_40.2.0 = _40.1 as i16;
(*_28).1 = !_24;
_46 = &_37;
_47 = (*_28).2 << (*_28).2;
(*_28).1 = _24;
_52 = (*_28).2;
_44.0 = (*_28).2 == (*_28).2;
place!(Field::<u16>(Variant(_57, 0), 0)) = (*_15) as u16;
(*_39) = [_8,_8,_8,_8,_8,_8];
_63 = Field::<u16>(Variant(_57, 0), 0);
_38 = &_44.1;
Goto(bb51)
}
bb51 = {
Call(_74 = dump_var(3_usize, 1_usize, Move(_1), 8_usize, Move(_8), 6_usize, Move(_6), 63_usize, Move(_63)), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
Call(_74 = dump_var(3_usize, 3_usize, Move(_3), 56_usize, Move(_56), 37_usize, Move(_37), 9_usize, Move(_9)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Call(_74 = dump_var(3_usize, 31_usize, Move(_31), 35_usize, Move(_35), 47_usize, Move(_47), 48_usize, Move(_48)), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Call(_74 = dump_var(3_usize, 14_usize, Move(_14), 11_usize, Move(_11), 18_usize, Move(_18), 42_usize, Move(_42)), ReturnTo(bb55), UnwindUnreachable())
}
bb55 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn4(mut _1: char,mut _2: char,mut _3: char,mut _4: u128,mut _5: char,mut _6: char,mut _7: char,mut _8: u64,mut _9: char) -> char {
mir! {
type RET = char;
let _10: *mut *const f32;
let _11: (i8, usize, isize);
let _12: &'static mut Adt62;
let _13: *mut Adt43;
let _14: [u64; 5];
let _15: u64;
let _16: *mut &'static f64;
let _17: &'static mut [u8; 3];
let _18: i64;
let _19: f64;
let _20: &'static mut (i8, usize, isize);
let _21: f32;
let _22: *const [u64; 6];
let _23: [char; 3];
let _24: usize;
let _25: i128;
let _26: f32;
let _27: f64;
let _28: isize;
let _29: &'static f64;
let _30: char;
let _31: (u128, *mut f32, [u16; 1], u8);
let _32: bool;
let _33: bool;
let _34: u128;
let _35: &'static mut [u64; 6];
let _36: char;
let _37: &'static [u64; 2];
let _38: &'static mut *const f32;
let _39: f32;
let _40: (i16, u32, f32, u8);
let _41: f64;
let _42: &'static f64;
let _43: (char, (&'static mut *const f32, ([u128; 5], f64), *mut i64, bool), *mut u8);
let _44: char;
let _45: i8;
let _46: i128;
let _47: [char; 6];
let _48: u64;
let _49: &'static mut i32;
let _50: isize;
let _51: (u32, i128);
let _52: u8;
let _53: *mut usize;
let _54: isize;
let _55: *mut *const [u64; 6];
let _56: (char, (&'static mut *const f32, ([u128; 5], f64), *mut i64, bool), *mut u8);
let _57: i128;
let _58: f64;
let _59: *mut usize;
let _60: &'static mut u128;
let _61: ([u64; 2],);
let _62: (bool, f32, Adt43);
let _63: *mut usize;
let _64: &'static u16;
let _65: &'static i8;
let _66: [u8; 7];
let _67: *const f32;
let _68: i128;
let _69: Adt60;
let _70: *mut *const f32;
let _71: bool;
let _72: Adt43;
let _73: bool;
let _74: char;
let _75: u64;
let _76: isize;
let _77: f64;
let _78: *mut u8;
let _79: &'static mut *const f32;
let _80: &'static mut &'static f64;
let _81: ((&'static mut *const f32, ([u128; 5], f64), *mut i64, bool), &'static mut i16);
let _82: &'static mut (i8, usize, isize);
let _83: Adt78;
let _84: &'static mut Adt62;
let _85: &'static i16;
let _86: ();
let _87: ();
{
RET = _9;
RET = _9;
Goto(bb1)
}
bb1 = {
RET = _9;
_4 = 260882897220372359502209071845372578344_u128 ^ 77836665045222023939343856614243773417_u128;
_2 = _5;
_11.2 = 15_isize + (-9223372036854775808_isize);
_11.0 = -(-3_i8);
_9 = _7;
_5 = _9;
_5 = RET;
_1 = _5;
_8 = !12949802610048117415_u64;
_11 = ((-41_i8), 7_usize, 9223372036854775807_isize);
_4 = 48322_u16 as u128;
_9 = _3;
_14 = [_8,_8,_8,_8,_8];
_5 = RET;
_11.0 = 101_i8 << _8;
_14 = [_8,_8,_8,_8,_8];
_11 = (49_i8, 7_usize, (-9223372036854775808_isize));
_6 = RET;
Goto(bb2)
}
bb2 = {
_8 = 15283304745624547738_u64;
_1 = _3;
RET = _1;
_11.0 = -23_i8;
_9 = _2;
_11.1 = !4_usize;
_9 = _7;
_2 = RET;
_1 = _6;
_3 = _9;
_14 = [_8,_8,_8,_8,_8];
_11 = ((-74_i8), 3_usize, (-37_isize));
_15 = !_8;
_8 = !_15;
match _11.2 {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
4 => bb7,
340282366920938463463374607431768211419 => bb9,
_ => bb8
}
}
bb3 = {
RET = _9;
_4 = 260882897220372359502209071845372578344_u128 ^ 77836665045222023939343856614243773417_u128;
_2 = _5;
_11.2 = 15_isize + (-9223372036854775808_isize);
_11.0 = -(-3_i8);
_9 = _7;
_5 = _9;
_5 = RET;
_1 = _5;
_8 = !12949802610048117415_u64;
_11 = ((-41_i8), 7_usize, 9223372036854775807_isize);
_4 = 48322_u16 as u128;
_9 = _3;
_14 = [_8,_8,_8,_8,_8];
_5 = RET;
_11.0 = 101_i8 << _8;
_14 = [_8,_8,_8,_8,_8];
_11 = (49_i8, 7_usize, (-9223372036854775808_isize));
_6 = RET;
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
_4 = 233509978221263450168328919507858921187_u128;
_11.2 = !9223372036854775807_isize;
_11.1 = true as usize;
_3 = _7;
_2 = _9;
Goto(bb10)
}
bb10 = {
_3 = _5;
_3 = _1;
_2 = _1;
_9 = RET;
_9 = RET;
_11.0 = -(-120_i8);
_9 = _3;
RET = _3;
_8 = _15 + _15;
_4 = 280015731133128763478014858653135434704_u128 & 70835368309731106196853412969753089535_u128;
_11.2 = 9223372036854775807_isize;
_15 = _8 - _8;
_5 = _1;
_5 = _6;
_8 = _15;
_11.0 = 19437_u16 as i8;
_9 = RET;
_6 = _2;
_11 = (44_i8, 16861724274291974568_usize, 9223372036854775807_isize);
_7 = _1;
_2 = _3;
_11.1 = !2113888924554717592_usize;
_8 = _15 - _15;
_1 = _7;
_14 = [_8,_8,_8,_8,_8];
_11.1 = 0_usize - 1007864843468501446_usize;
_8 = _15 >> _11.0;
_11.0 = 70_i8 ^ (-10_i8);
Goto(bb11)
}
bb11 = {
_9 = RET;
_7 = _9;
_19 = _11.0 as f64;
_1 = _5;
_18 = 3859140545629586772_i64 | (-2980565498523367732_i64);
_15 = _8;
_11.2 = _11.1 as isize;
_11 = (118_i8, 1_usize, (-91_isize));
_1 = _3;
_2 = _1;
_11.2 = _11.0 as isize;
RET = _3;
_19 = 2028344382_i32 as f64;
_6 = RET;
_14 = [_8,_15,_8,_8,_15];
_3 = _2;
_21 = 1640558652_i32 as f32;
_5 = _9;
_21 = 276127175_i32 as f32;
_9 = _5;
Goto(bb12)
}
bb12 = {
_15 = _4 as u64;
_5 = _2;
_8 = _15 << _11.2;
_24 = _11.1;
_6 = _7;
_25 = !155097768020343730841463843093847781134_i128;
_14 = [_15,_8,_8,_15,_8];
_15 = _14[_24] ^ _8;
_7 = _3;
Call(_28 = fn5(_4, _2, _9, _18), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
_28 = _11.2;
_2 = _6;
_11 = ((-33_i8), _24, _28);
_23 = [_2,_2,_9];
_19 = 187_u8 as f64;
_11.2 = _28 | _28;
_11.1 = _24 ^ _24;
_4 = 104419091337527031611459591350241396103_u128;
_21 = _25 as f32;
_14 = [_8,_15,_15,_15,_15];
_2 = _9;
_11.0 = 11_i8 & (-89_i8);
_8 = _15 & _15;
_28 = _11.2;
Goto(bb14)
}
bb14 = {
_29 = &_19;
_5 = _1;
_8 = 3323722381_u32 as u64;
_27 = (*_29) * (*_29);
_24 = _3 as usize;
_2 = _1;
_31.2 = [3228_u16];
_11.2 = !_28;
_8 = _15;
_11.1 = _24 ^ _24;
_27 = (*_29);
_26 = (*_29) as f32;
_31.2 = [7321_u16];
_31.1 = core::ptr::addr_of_mut!(_21);
_16 = core::ptr::addr_of_mut!(_29);
Goto(bb15)
}
bb15 = {
_21 = _11.0 as f32;
(*_16) = &_27;
(*_16) = &_19;
_30 = _1;
_11.1 = _24 * _24;
(*_16) = &_27;
_8 = _15 >> _25;
(*_16) = &_19;
_31.0 = _4 - _4;
_11.1 = _24;
_33 = _15 < _8;
_39 = _25 as f32;
_36 = _5;
_29 = &_27;
_34 = !_31.0;
match _4 {
0 => bb11,
1 => bb16,
2 => bb17,
3 => bb18,
104419091337527031611459591350241396103 => bb20,
_ => bb19
}
}
bb16 = {
_4 = 233509978221263450168328919507858921187_u128;
_11.2 = !9223372036854775807_isize;
_11.1 = true as usize;
_3 = _7;
_2 = _9;
Goto(bb10)
}
bb17 = {
_28 = _11.2;
_2 = _6;
_11 = ((-33_i8), _24, _28);
_23 = [_2,_2,_9];
_19 = 187_u8 as f64;
_11.2 = _28 | _28;
_11.1 = _24 ^ _24;
_4 = 104419091337527031611459591350241396103_u128;
_21 = _25 as f32;
_14 = [_8,_15,_15,_15,_15];
_2 = _9;
_11.0 = 11_i8 & (-89_i8);
_8 = _15 & _15;
_28 = _11.2;
Goto(bb14)
}
bb18 = {
_3 = _5;
_3 = _1;
_2 = _1;
_9 = RET;
_9 = RET;
_11.0 = -(-120_i8);
_9 = _3;
RET = _3;
_8 = _15 + _15;
_4 = 280015731133128763478014858653135434704_u128 & 70835368309731106196853412969753089535_u128;
_11.2 = 9223372036854775807_isize;
_15 = _8 - _8;
_5 = _1;
_5 = _6;
_8 = _15;
_11.0 = 19437_u16 as i8;
_9 = RET;
_6 = _2;
_11 = (44_i8, 16861724274291974568_usize, 9223372036854775807_isize);
_7 = _1;
_2 = _3;
_11.1 = !2113888924554717592_usize;
_8 = _15 - _15;
_1 = _7;
_14 = [_8,_8,_8,_8,_8];
_11.1 = 0_usize - 1007864843468501446_usize;
_8 = _15 >> _11.0;
_11.0 = 70_i8 ^ (-10_i8);
Goto(bb11)
}
bb19 = {
_8 = 15283304745624547738_u64;
_1 = _3;
RET = _1;
_11.0 = -23_i8;
_9 = _2;
_11.1 = !4_usize;
_9 = _7;
_2 = RET;
_1 = _6;
_3 = _9;
_14 = [_8,_8,_8,_8,_8];
_11 = ((-74_i8), 3_usize, (-37_isize));
_15 = !_8;
_8 = !_15;
match _11.2 {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
4 => bb7,
340282366920938463463374607431768211419 => bb9,
_ => bb8
}
}
bb20 = {
_32 = _33;
_23 = [_7,_30,_36];
(*_16) = &_19;
(*_16) = &_27;
_40.3 = 214_u8 << _15;
(*_16) = &_19;
_29 = &_27;
(*_16) = &_19;
(*_16) = &_27;
_40.1 = !207264341_u32;
_18 = (-3342717930185966475_i64) * (-3706710633327951601_i64);
(*_16) = &_19;
_32 = _33;
(*_16) = &_27;
_31.3 = 1956576481_i32 as u8;
_20 = &mut _11;
(*_20) = (86_i8, _24, _28);
(*_20) = ((-24_i8), _24, _28);
(*_16) = &_19;
_15 = _24 as u64;
(*_20) = ((-67_i8), _24, _28);
(*_20).2 = _28;
_43.0 = _1;
(*_20).0 = _40.3 as i8;
match _4 {
0 => bb21,
1 => bb22,
2 => bb23,
3 => bb24,
4 => bb25,
5 => bb26,
104419091337527031611459591350241396103 => bb28,
_ => bb27
}
}
bb21 = {
_8 = 15283304745624547738_u64;
_1 = _3;
RET = _1;
_11.0 = -23_i8;
_9 = _2;
_11.1 = !4_usize;
_9 = _7;
_2 = RET;
_1 = _6;
_3 = _9;
_14 = [_8,_8,_8,_8,_8];
_11 = ((-74_i8), 3_usize, (-37_isize));
_15 = !_8;
_8 = !_15;
match _11.2 {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
4 => bb7,
340282366920938463463374607431768211419 => bb9,
_ => bb8
}
}
bb22 = {
_3 = _5;
_3 = _1;
_2 = _1;
_9 = RET;
_9 = RET;
_11.0 = -(-120_i8);
_9 = _3;
RET = _3;
_8 = _15 + _15;
_4 = 280015731133128763478014858653135434704_u128 & 70835368309731106196853412969753089535_u128;
_11.2 = 9223372036854775807_isize;
_15 = _8 - _8;
_5 = _1;
_5 = _6;
_8 = _15;
_11.0 = 19437_u16 as i8;
_9 = RET;
_6 = _2;
_11 = (44_i8, 16861724274291974568_usize, 9223372036854775807_isize);
_7 = _1;
_2 = _3;
_11.1 = !2113888924554717592_usize;
_8 = _15 - _15;
_1 = _7;
_14 = [_8,_8,_8,_8,_8];
_11.1 = 0_usize - 1007864843468501446_usize;
_8 = _15 >> _11.0;
_11.0 = 70_i8 ^ (-10_i8);
Goto(bb11)
}
bb23 = {
_28 = _11.2;
_2 = _6;
_11 = ((-33_i8), _24, _28);
_23 = [_2,_2,_9];
_19 = 187_u8 as f64;
_11.2 = _28 | _28;
_11.1 = _24 ^ _24;
_4 = 104419091337527031611459591350241396103_u128;
_21 = _25 as f32;
_14 = [_8,_15,_15,_15,_15];
_2 = _9;
_11.0 = 11_i8 & (-89_i8);
_8 = _15 & _15;
_28 = _11.2;
Goto(bb14)
}
bb24 = {
RET = _9;
_4 = 260882897220372359502209071845372578344_u128 ^ 77836665045222023939343856614243773417_u128;
_2 = _5;
_11.2 = 15_isize + (-9223372036854775808_isize);
_11.0 = -(-3_i8);
_9 = _7;
_5 = _9;
_5 = RET;
_1 = _5;
_8 = !12949802610048117415_u64;
_11 = ((-41_i8), 7_usize, 9223372036854775807_isize);
_4 = 48322_u16 as u128;
_9 = _3;
_14 = [_8,_8,_8,_8,_8];
_5 = RET;
_11.0 = 101_i8 << _8;
_14 = [_8,_8,_8,_8,_8];
_11 = (49_i8, 7_usize, (-9223372036854775808_isize));
_6 = RET;
Goto(bb2)
}
bb25 = {
Return()
}
bb26 = {
RET = _9;
_4 = 260882897220372359502209071845372578344_u128 ^ 77836665045222023939343856614243773417_u128;
_2 = _5;
_11.2 = 15_isize + (-9223372036854775808_isize);
_11.0 = -(-3_i8);
_9 = _7;
_5 = _9;
_5 = RET;
_1 = _5;
_8 = !12949802610048117415_u64;
_11 = ((-41_i8), 7_usize, 9223372036854775807_isize);
_4 = 48322_u16 as u128;
_9 = _3;
_14 = [_8,_8,_8,_8,_8];
_5 = RET;
_11.0 = 101_i8 << _8;
_14 = [_8,_8,_8,_8,_8];
_11 = (49_i8, 7_usize, (-9223372036854775808_isize));
_6 = RET;
Goto(bb2)
}
bb27 = {
_28 = _11.2;
_2 = _6;
_11 = ((-33_i8), _24, _28);
_23 = [_2,_2,_9];
_19 = 187_u8 as f64;
_11.2 = _28 | _28;
_11.1 = _24 ^ _24;
_4 = 104419091337527031611459591350241396103_u128;
_21 = _25 as f32;
_14 = [_8,_15,_15,_15,_15];
_2 = _9;
_11.0 = 11_i8 & (-89_i8);
_8 = _15 & _15;
_28 = _11.2;
Goto(bb14)
}
bb28 = {
(*_20).0 = 127_i8 + 107_i8;
_2 = _1;
_43.1.3 = _8 <= _8;
(*_20).2 = -_28;
(*_16) = &_27;
(*_20).2 = _28 >> _18;
_31.0 = 8530_i16 as u128;
(*_20).1 = _24 ^ _24;
_25 = _40.1 as i128;
(*_20).2 = _28 + _28;
Goto(bb29)
}
bb29 = {
(*_20).2 = _28 | _28;
(*_16) = &_19;
(*_20).0 = 2_i8 | (-116_i8);
(*_20) = ((-71_i8), _24, _28);
_42 = &(*_29);
match (*_20).0 {
0 => bb4,
1 => bb23,
340282366920938463463374607431768211385 => bb30,
_ => bb9
}
}
bb30 = {
(*_20).0 = (-45_i8) ^ 59_i8;
(*_16) = Move(_42);
(*_20).1 = _24 << (*_20).2;
_43.0 = _7;
(*_16) = &_19;
_47 = [_36,_36,_7,_9,_2,_36];
(*_20) = (60_i8, _24, _28);
(*_20) = ((-97_i8), _24, _28);
(*_20).2 = _28 + _28;
(*_20).2 = _28;
(*_20).2 = (*_20).1 as isize;
(*_20).2 = _28 | _28;
(*_20) = ((-123_i8), _24, _28);
_4 = !_34;
(*_20) = ((-127_i8), _24, _28);
_42 = &(*_29);
(*_20).2 = _32 as isize;
(*_20).0 = 37_i8 & 84_i8;
(*_16) = &_27;
(*_20).2 = _28 >> (*_20).0;
(*_20).0 = _26 as i8;
_45 = (*_20).0 - (*_20).0;
Goto(bb31)
}
bb31 = {
(*_20) = (_45, _24, _28);
(*_20) = (_45, _24, _28);
(*_20).2 = (*_29) as isize;
(*_16) = Move(_42);
_27 = _19 * _19;
(*_20).2 = _28;
(*_20).0 = -_45;
Goto(bb32)
}
bb32 = {
(*_20) = (_45, _24, _28);
_42 = &_27;
_5 = _30;
(*_20).2 = _28;
_5 = _3;
(*_20).0 = _45 & _45;
_31.0 = !_34;
_43.1.2 = core::ptr::addr_of_mut!(_18);
_19 = (*_42) * (*_42);
_40.3 = _31.3 & _31.3;
_43.1.1.0 = [_31.0,_31.0,_34,_31.0,_34];
(*_20).1 = _24;
_40.3 = _31.3 - _31.3;
(*_20).1 = !_24;
(*_16) = Move(_42);
_2 = _7;
(*_20) = (_45, _24, _28);
_40.2 = -_21;
_40.0 = -(-12686_i16);
(*_20).1 = !_24;
(*_20).2 = _28 ^ _28;
Goto(bb33)
}
bb33 = {
_48 = _8 + _8;
(*_20).2 = _28 * _28;
(*_20).2 = _28 | _28;
_36 = _30;
(*_20).2 = _28;
_40.3 = _31.3 & _31.3;
_41 = _27 - _19;
(*_16) = &_27;
_43.1.3 = _33 & _33;
_40.3 = _31.3 << (*_20).2;
(*_20).0 = _45 + _45;
(*_20).0 = (-1118961664_i32) as i8;
_40.3 = _31.3;
(*_16) = &_19;
(*_20) = (_45, _24, _28);
(*_20).0 = _45 << _28;
(*_16) = &_27;
(*_20).1 = _24 << (*_20).2;
_40.2 = -_26;
_56.2 = core::ptr::addr_of_mut!(_31.3);
Goto(bb34)
}
bb34 = {
(*_20).1 = _24 ^ _24;
(*_16) = &_41;
(*_20).2 = _28 - _28;
_43.1.1.1 = (*_29);
(*_20).2 = -_28;
Goto(bb35)
}
bb35 = {
_34 = _31.3 as u128;
_43.1.3 = (*_29) > _19;
(*_20).2 = _33 as isize;
(*_20).0 = _45 ^ _45;
_8 = _48;
(*_16) = &_19;
_51.1 = -_25;
(*_20).0 = _45 * _45;
(*_20).1 = !_24;
(*_20).0 = _24 as i8;
(*_20) = (_45, _24, _28);
(*_20) = (_45, _24, _28);
_31.3 = !_40.3;
_43.2 = Move(_56.2);
(*_16) = &_41;
_48 = _8;
_52 = _31.3;
(*_20).2 = _28 ^ _28;
(*_20).1 = _24 >> (*_20).2;
Goto(bb36)
}
bb36 = {
(*_20).2 = _28 & _28;
_2 = _7;
_56.1.3 = (*_20).1 < (*_20).1;
_40.0 = -32426_i16;
(*_20).0 = _45;
(*_20).0 = (*_29) as i8;
(*_20).2 = _28;
(*_20).2 = _28 & _28;
(*_20).2 = !_28;
(*_20).1 = _40.1 as usize;
(*_20) = (_45, _24, _28);
(*_16) = &_27;
_43.1.1.0 = [_34,_4,_31.0,_31.0,_31.0];
_33 = _32 != _32;
(*_20) = (_45, _24, _28);
(*_16) = &_41;
Goto(bb37)
}
bb37 = {
(*_20).0 = -_45;
_50 = (*_20).2;
(*_16) = &_43.1.1.1;
(*_20).2 = _50;
(*_20).2 = _25 as isize;
(*_20) = (_45, _24, _50);
(*_20) = (_45, _24, _28);
(*_16) = &_27;
(*_20).0 = _45;
Goto(bb38)
}
bb38 = {
_46 = _25 ^ _25;
_31.0 = (*_20).2 as u128;
(*_16) = &_41;
(*_16) = &_43.1.1.1;
(*_20) = (_45, _24, _50);
(*_20).2 = _28 - _50;
_67 = core::ptr::addr_of!(_26);
(*_20) = (_45, _24, _28);
(*_20).2 = -_50;
(*_16) = &_27;
_18 = 5583131508685769121_i64;
_43.0 = _9;
_61.0 = [_8,_8];
(*_20).1 = _52 as usize;
(*_67) = _40.2 + _40.2;
_43.1.2 = core::ptr::addr_of_mut!(_18);
_67 = core::ptr::addr_of!((*_67));
(*_20).1 = _24 + _24;
_43.1.3 = !_33;
Goto(bb39)
}
bb39 = {
_43.2 = core::ptr::addr_of_mut!(_31.3);
_58 = (-1777593941_i32) as f64;
RET = _3;
_55 = core::ptr::addr_of_mut!(_22);
(*_20).0 = _45 >> (*_20).2;
Goto(bb40)
}
bb40 = {
_56.1.1 = (_43.1.1.0, (*_29));
RET = _43.0;
(*_20).0 = _45 | _45;
_75 = !_8;
Goto(bb41)
}
bb41 = {
_27 = _43.1.1.1 * _56.1.1.1;
_38 = &mut _67;
_51.0 = _40.1;
_55 = core::ptr::addr_of_mut!(_22);
_69 = Adt60::Variant0 { fld0: 49177_u16 };
_71 = !_33;
(*_38) = core::ptr::addr_of!(_21);
_59 = core::ptr::addr_of_mut!((*_20).1);
_31.2 = [11866_u16];
_33 = !_56.1.3;
_56.1.1 = (_43.1.1.0, _19);
_41 = _51.1 as f64;
(*_16) = &_58;
(*_20).2 = _50 * _50;
_56.1.0 = &mut (*_38);
(*_16) = &_19;
_78 = core::ptr::addr_of_mut!(_40.3);
_81.0.1.1 = _51.0 as f64;
(*_20) = (_45, _24, _50);
(*_78) = _52 << (*_20).2;
_9 = _6;
(*_20).2 = !_28;
match _18 {
0 => bb39,
1 => bb30,
2 => bb26,
3 => bb42,
5583131508685769121 => bb44,
_ => bb43
}
}
bb42 = {
_8 = 15283304745624547738_u64;
_1 = _3;
RET = _1;
_11.0 = -23_i8;
_9 = _2;
_11.1 = !4_usize;
_9 = _7;
_2 = RET;
_1 = _6;
_3 = _9;
_14 = [_8,_8,_8,_8,_8];
_11 = ((-74_i8), 3_usize, (-37_isize));
_15 = !_8;
_8 = !_15;
match _11.2 {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
4 => bb7,
340282366920938463463374607431768211419 => bb9,
_ => bb8
}
}
bb43 = {
RET = _9;
_4 = 260882897220372359502209071845372578344_u128 ^ 77836665045222023939343856614243773417_u128;
_2 = _5;
_11.2 = 15_isize + (-9223372036854775808_isize);
_11.0 = -(-3_i8);
_9 = _7;
_5 = _9;
_5 = RET;
_1 = _5;
_8 = !12949802610048117415_u64;
_11 = ((-41_i8), 7_usize, 9223372036854775807_isize);
_4 = 48322_u16 as u128;
_9 = _3;
_14 = [_8,_8,_8,_8,_8];
_5 = RET;
_11.0 = 101_i8 << _8;
_14 = [_8,_8,_8,_8,_8];
_11 = (49_i8, 7_usize, (-9223372036854775808_isize));
_6 = RET;
Goto(bb2)
}
bb44 = {
(*_20).0 = _45;
_81.0.1.0 = [_31.0,_31.0,_31.0,_31.0,_31.0];
_81.0.0 = Move(_38);
(*_16) = &_43.1.1.1;
(*_20) = (_45, _24, _50);
_57 = _46;
_14 = [_48,_48,_48,_75,_48];
(*_20) = (_45, _24, _50);
_51.0 = _40.1 + _40.1;
_36 = _1;
(*_20).0 = _57 as i8;
(*_20).2 = -_50;
_2 = _43.0;
(*_20) = (_45, _24, _28);
_71 = _32;
_68 = _46;
match _18 {
0 => bb45,
1 => bb46,
2 => bb47,
3 => bb48,
5583131508685769121 => bb50,
_ => bb49
}
}
bb45 = {
Return()
}
bb46 = {
RET = _9;
_4 = 260882897220372359502209071845372578344_u128 ^ 77836665045222023939343856614243773417_u128;
_2 = _5;
_11.2 = 15_isize + (-9223372036854775808_isize);
_11.0 = -(-3_i8);
_9 = _7;
_5 = _9;
_5 = RET;
_1 = _5;
_8 = !12949802610048117415_u64;
_11 = ((-41_i8), 7_usize, 9223372036854775807_isize);
_4 = 48322_u16 as u128;
_9 = _3;
_14 = [_8,_8,_8,_8,_8];
_5 = RET;
_11.0 = 101_i8 << _8;
_14 = [_8,_8,_8,_8,_8];
_11 = (49_i8, 7_usize, (-9223372036854775808_isize));
_6 = RET;
Goto(bb2)
}
bb47 = {
_3 = _5;
_3 = _1;
_2 = _1;
_9 = RET;
_9 = RET;
_11.0 = -(-120_i8);
_9 = _3;
RET = _3;
_8 = _15 + _15;
_4 = 280015731133128763478014858653135434704_u128 & 70835368309731106196853412969753089535_u128;
_11.2 = 9223372036854775807_isize;
_15 = _8 - _8;
_5 = _1;
_5 = _6;
_8 = _15;
_11.0 = 19437_u16 as i8;
_9 = RET;
_6 = _2;
_11 = (44_i8, 16861724274291974568_usize, 9223372036854775807_isize);
_7 = _1;
_2 = _3;
_11.1 = !2113888924554717592_usize;
_8 = _15 - _15;
_1 = _7;
_14 = [_8,_8,_8,_8,_8];
_11.1 = 0_usize - 1007864843468501446_usize;
_8 = _15 >> _11.0;
_11.0 = 70_i8 ^ (-10_i8);
Goto(bb11)
}
bb48 = {
(*_20).0 = -_45;
_50 = (*_20).2;
(*_16) = &_43.1.1.1;
(*_20).2 = _50;
(*_20).2 = _25 as isize;
(*_20) = (_45, _24, _50);
(*_20) = (_45, _24, _28);
(*_16) = &_27;
(*_20).0 = _45;
Goto(bb38)
}
bb49 = {
(*_20).1 = _24 ^ _24;
(*_16) = &_41;
(*_20).2 = _28 - _28;
_43.1.1.1 = (*_29);
(*_20).2 = -_28;
Goto(bb35)
}
bb50 = {
_75 = _8 + _48;
place!(Field::<u16>(Variant(_69, 0), 0)) = _33 as u16;
(*_16) = &_27;
(*_20).1 = _24;
_43.1.0 = Move(_56.1.0);
_4 = _31.0;
_81.0.1.1 = -(*_29);
_56.2 = core::ptr::addr_of_mut!(_40.3);
Goto(bb51)
}
bb51 = {
Call(_86 = dump_var(4_usize, 1_usize, Move(_1), 71_usize, Move(_71), 2_usize, Move(_2), 36_usize, Move(_36)), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
Call(_86 = dump_var(4_usize, 7_usize, Move(_7), 18_usize, Move(_18), 32_usize, Move(_32), 45_usize, Move(_45)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Call(_86 = dump_var(4_usize, 4_usize, Move(_4), 11_usize, Move(_11), 30_usize, Move(_30), 61_usize, Move(_61)), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Call(_86 = dump_var(4_usize, 57_usize, Move(_57), 52_usize, Move(_52), 28_usize, Move(_28), 9_usize, Move(_9)), ReturnTo(bb55), UnwindUnreachable())
}
bb55 = {
Call(_86 = dump_var(4_usize, 25_usize, Move(_25), 87_usize, _87, 87_usize, _87, 87_usize, _87), ReturnTo(bb56), UnwindUnreachable())
}
bb56 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn5(mut _1: u128,mut _2: char,mut _3: char,mut _4: i64) -> isize {
mir! {
type RET = isize;
let _5: *const *mut usize;
let _6: i16;
let _7: bool;
let _8: i128;
let _9: isize;
let _10: Adt78;
let _11: *mut *const [u64; 6];
let _12: [u16; 6];
let _13: (&'static mut [u8; 3], i8, *mut i64, &'static u16);
let _14: usize;
let _15: &'static i16;
let _16: (&'static mut *const f32, ([u128; 5], f64), *mut i64, bool);
let _17: i64;
let _18: &'static u16;
let _19: &'static f64;
let _20: f32;
let _21: f32;
let _22: [u8; 4];
let _23: usize;
let _24: *mut i64;
let _25: isize;
let _26: &'static mut Adt62;
let _27: f64;
let _28: f64;
let _29: char;
let _30: bool;
let _31: &'static mut u128;
let _32: char;
let _33: *mut *const f32;
let _34: isize;
let _35: [u16; 1];
let _36: *mut *const f32;
let _37: u64;
let _38: u32;
let _39: *const ([u64; 2],);
let _40: *const ([u64; 2],);
let _41: *mut &'static mut i16;
let _42: bool;
let _43: usize;
let _44: bool;
let _45: (*const ([u64; 2],), *const f32);
let _46: u32;
let _47: *mut Adt43;
let _48: *mut &'static f64;
let _49: *mut u8;
let _50: *mut *const [u64; 6];
let _51: isize;
let _52: [bool; 2];
let _53: f32;
let _54: &'static i8;
let _55: isize;
let _56: (&'static mut [u8; 3], i8, *mut i64, &'static u16);
let _57: *mut *const f32;
let _58: *const ([u128; 5], f64);
let _59: isize;
let _60: char;
let _61: *mut &'static u16;
let _62: i128;
let _63: bool;
let _64: u128;
let _65: u64;
let _66: i64;
let _67: *mut Adt43;
let _68: &'static mut (i8, usize, isize);
let _69: *const [u64; 6];
let _70: [u64; 2];
let _71: isize;
let _72: &'static mut Adt62;
let _73: [u16; 6];
let _74: [u64; 2];
let _75: f64;
let _76: u8;
let _77: [u64; 6];
let _78: *mut i64;
let _79: isize;
let _80: isize;
let _81: char;
let _82: Adt78;
let _83: f64;
let _84: bool;
let _85: i64;
let _86: ();
let _87: ();
{
_3 = _2;
_4 = 6052166356382157185_i64 ^ (-5520887912632987580_i64);
RET = (-9223372036854775808_isize);
_3 = _2;
_3 = _2;
match RET {
0 => bb1,
340282366920938463454151235394913435648 => bb3,
_ => bb2
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
_1 = 294457656414955308014760222254521695251_u128 << _4;
_1 = 11971175632483425970766199830212395833_u128 ^ 328187163383632840102148940989757307699_u128;
_2 = _3;
_4 = 8326323984482626764_i64 | (-6093758156727157202_i64);
_3 = _2;
_4 = !(-2252758791808032188_i64);
_4 = -(-3717360858225058605_i64);
_1 = !173119787523715607317206555159415093697_u128;
_6 = (-14280_i16) >> _4;
_3 = _2;
_4 = 986601000319739572_i64 * 2158555189796365538_i64;
_6 = 125_i16;
_2 = _3;
_4 = 2053109363096449891_i64 & (-2330642513164678078_i64);
RET = 9223372036854775807_isize - 19_isize;
_3 = _2;
_1 = _4 as u128;
_6 = 28259_i16;
_4 = 4659140440203440878_i64 << RET;
_3 = _2;
_6 = (-792_i16) ^ 24497_i16;
Call(_1 = fn6(_3, _2, RET, _2, _3, _6, _2), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_7 = true;
_2 = _3;
_8 = -(-31740210195815417002593940858789077616_i128);
_6 = 25884_i16 | 29032_i16;
_9 = RET | RET;
RET = _9;
_4 = 4055661377370087914_i64 & (-1932476246874968611_i64);
_9 = RET - RET;
_4 = (-4780386756918614542_i64) & 2940217370940180365_i64;
_4 = 2401545838783553241_u64 as i64;
_9 = RET >> _6;
_7 = false & true;
_9 = RET;
_6 = (-1288_i16) << _9;
RET = -_9;
_4 = (-8230337824331190950_i64);
_6 = 13635_i16 >> RET;
_8 = !85716466894949636660709408522659279154_i128;
RET = _9 ^ _9;
_7 = _9 > RET;
_1 = !316820526194594679486050929952268540701_u128;
RET = _9 * _9;
_1 = 271340588664373293256829816409470056102_u128;
match _4 {
0 => bb5,
340282366920938463455144269607437020506 => bb7,
_ => bb6
}
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
_4 = 8930568637626912672_i64;
RET = _4 as isize;
_8 = (-50582135470856814031335789468456948195_i128) >> _4;
_8 = 52952005377517377618888949747679187698_i128 & 159210542370206433149638758421321515804_i128;
_2 = _3;
match _4 {
0 => bb8,
8930568637626912672 => bb10,
_ => bb9
}
}
bb8 = {
_1 = 294457656414955308014760222254521695251_u128 << _4;
_1 = 11971175632483425970766199830212395833_u128 ^ 328187163383632840102148940989757307699_u128;
_2 = _3;
_4 = 8326323984482626764_i64 | (-6093758156727157202_i64);
_3 = _2;
_4 = !(-2252758791808032188_i64);
_4 = -(-3717360858225058605_i64);
_1 = !173119787523715607317206555159415093697_u128;
_6 = (-14280_i16) >> _4;
_3 = _2;
_4 = 986601000319739572_i64 * 2158555189796365538_i64;
_6 = 125_i16;
_2 = _3;
_4 = 2053109363096449891_i64 & (-2330642513164678078_i64);
RET = 9223372036854775807_isize - 19_isize;
_3 = _2;
_1 = _4 as u128;
_6 = 28259_i16;
_4 = 4659140440203440878_i64 << RET;
_3 = _2;
_6 = (-792_i16) ^ 24497_i16;
Call(_1 = fn6(_3, _2, RET, _2, _3, _6, _2), ReturnTo(bb4), UnwindUnreachable())
}
bb9 = {
Return()
}
bb10 = {
_13.1 = (-63_i8) >> _4;
_3 = _2;
_13.2 = core::ptr::addr_of_mut!(_4);
_2 = _3;
_8 = (-77602936085856577999509907451633359674_i128) + 3238058773175811068906056344120467043_i128;
RET = _9;
_1 = 322748492689536631256750090979990157195_u128;
_13.1 = (-22_i8) - (-65_i8);
_4 = _6 as i64;
_6 = 31550_i16 ^ 28758_i16;
_4 = -4025565715766961442_i64;
_14 = 6959721054980189717_usize * 1_usize;
_13.2 = core::ptr::addr_of_mut!(_4);
match _1 {
322748492689536631256750090979990157195 => bb12,
_ => bb11
}
}
bb11 = {
Return()
}
bb12 = {
_8 = -(-155229423953137090622416678770178610181_i128);
_8 = 121259823737566841347929315435574542708_i128 ^ (-82086134826257082657905668593848047445_i128);
_15 = &_6;
_12 = [5966_u16,51290_u16,60018_u16,35868_u16,61686_u16,24095_u16];
_8 = _1 as i128;
_7 = true;
_7 = (*_15) >= (*_15);
_9 = RET - RET;
_1 = 1406948596_u32 as u128;
_12 = [4004_u16,14198_u16,8424_u16,18295_u16,17160_u16,29848_u16];
_9 = RET;
RET = _9 << (*_15);
_16.3 = _7;
_16.1.1 = _4 as f64;
Goto(bb13)
}
bb13 = {
_8 = !110650976687081991527991308856686963653_i128;
_13.1 = (-8_i8);
_17 = _4;
_6 = 9429_i16 | 3028_i16;
_3 = _2;
Goto(bb14)
}
bb14 = {
_6 = _14 as i16;
_16.2 = core::ptr::addr_of_mut!(_17);
_17 = !_4;
_1 = !293779048800736348296336266020882164804_u128;
_2 = _3;
_12 = [62045_u16,34773_u16,26956_u16,11313_u16,1802_u16,13927_u16];
_16.3 = _3 <= _2;
_1 = 54481245568953315672717848463904053241_u128 >> _9;
Goto(bb15)
}
bb15 = {
_16.1.1 = _8 as f64;
RET = _2 as isize;
_9 = RET;
_12 = [237_u16,28669_u16,65470_u16,20189_u16,39815_u16,30472_u16];
_13.1 = 101_i8 & 90_i8;
RET = _9 | _9;
_2 = _3;
_13.1 = 14017070326436524346_u64 as i8;
_6 = (-16412_i16);
_8 = -13549438326441849489120977625323337476_i128;
_19 = &_16.1.1;
_20 = (*_19) as f32;
_2 = _3;
_16.1.0 = [_1,_1,_1,_1,_1];
_22 = [0_u8,162_u8,63_u8,95_u8];
_8 = (-104248493137400922476272406123607999039_i128) ^ (-27466536645410998646403005873113296871_i128);
_16.1.0 = [_1,_1,_1,_1,_1];
Call(_25 = core::intrinsics::bswap(RET), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
_16.1.1 = _1 as f64;
_20 = _1 as f32;
_23 = _14 * _14;
_14 = _2 as usize;
_3 = _2;
_21 = _20 + _20;
_21 = _20 - _20;
_12 = [11778_u16,62060_u16,56473_u16,35533_u16,46555_u16,43153_u16];
Goto(bb17)
}
bb17 = {
_21 = _20;
_13.1 = 119_i8 - (-53_i8);
_23 = _14 | _14;
_12 = [8936_u16,13199_u16,18501_u16,6649_u16,16316_u16,56316_u16];
_29 = _2;
_2 = _3;
_17 = _1 as i64;
_13.2 = core::ptr::addr_of_mut!(_17);
_22 = [179_u8,215_u8,225_u8,82_u8];
_17 = !_4;
_14 = _23;
_17 = _4 << _23;
_22 = [148_u8,249_u8,163_u8,139_u8];
_4 = !_17;
_4 = -_17;
Goto(bb18)
}
bb18 = {
_30 = _16.3 & _16.3;
_28 = -_16.1.1;
_16.1.0 = [_1,_1,_1,_1,_1];
_29 = _3;
_3 = _29;
_12 = [29059_u16,16352_u16,61414_u16,2719_u16,41723_u16,14461_u16];
_3 = _2;
_22 = [49_u8,185_u8,136_u8,145_u8];
_13.1 = (-64_i8) - (-6_i8);
_28 = _16.1.1 * _16.1.1;
_6 = (-32638_i16);
_28 = _16.1.1 - _16.1.1;
_28 = _16.1.1 * _16.1.1;
Goto(bb19)
}
bb19 = {
_27 = -_16.1.1;
_24 = Move(_13.2);
_7 = _16.3;
_16.1.1 = _27 + _28;
_34 = _4 as isize;
_24 = core::ptr::addr_of_mut!(_17);
_16.3 = !_7;
(*_24) = -_4;
_2 = _29;
_1 = 168487263334415818165605128187270977561_u128;
_16.2 = Move(_24);
_32 = _3;
_2 = _29;
_21 = _20 * _20;
_21 = _20 + _20;
_7 = !_16.3;
_16.1.0 = [_1,_1,_1,_1,_1];
_4 = _17;
_13.1 = 35_i8 * (-60_i8);
_14 = !_23;
_4 = 20420_u16 as i64;
_16.1.1 = _13.1 as f64;
_19 = &_27;
_16.2 = core::ptr::addr_of_mut!(_17);
_38 = _2 as u32;
Goto(bb20)
}
bb20 = {
_20 = -_21;
_12 = [25100_u16,36905_u16,10075_u16,58056_u16,20735_u16,31152_u16];
_17 = _4 * _4;
_32 = _29;
_35 = [9505_u16];
_34 = _9 - _9;
_30 = !_7;
_31 = &mut _1;
_30 = _7;
_16.2 = core::ptr::addr_of_mut!(_4);
_20 = _21;
(*_31) = 89548026748388073799604747932751749737_u128 ^ 302831440726030535239084809548295225323_u128;
_6 = 6110_i16 << _8;
_13.1 = 6649852045224405989_u64 as i8;
(*_31) = !333117072115549152833382422768983270838_u128;
_19 = &_28;
(*_31) = 49426282384095985368242985759271281341_u128 ^ 142530244678441260286384108352940188811_u128;
_13.2 = Move(_16.2);
_9 = RET;
_13.1 = 46_i8;
(*_31) = 243765388415836001072567862796370926326_u128 & 320688092203751054565300935209100328992_u128;
_16.2 = core::ptr::addr_of_mut!(_4);
(*_31) = !293937376314442301710582019737502641063_u128;
_16.3 = _7 ^ _30;
match _13.1 {
0 => bb21,
1 => bb22,
2 => bb23,
3 => bb24,
46 => bb26,
_ => bb25
}
}
bb21 = {
Return()
}
bb22 = {
_30 = _16.3 & _16.3;
_28 = -_16.1.1;
_16.1.0 = [_1,_1,_1,_1,_1];
_29 = _3;
_3 = _29;
_12 = [29059_u16,16352_u16,61414_u16,2719_u16,41723_u16,14461_u16];
_3 = _2;
_22 = [49_u8,185_u8,136_u8,145_u8];
_13.1 = (-64_i8) - (-6_i8);
_28 = _16.1.1 * _16.1.1;
_6 = (-32638_i16);
_28 = _16.1.1 - _16.1.1;
_28 = _16.1.1 * _16.1.1;
Goto(bb19)
}
bb23 = {
_21 = _20;
_13.1 = 119_i8 - (-53_i8);
_23 = _14 | _14;
_12 = [8936_u16,13199_u16,18501_u16,6649_u16,16316_u16,56316_u16];
_29 = _2;
_2 = _3;
_17 = _1 as i64;
_13.2 = core::ptr::addr_of_mut!(_17);
_22 = [179_u8,215_u8,225_u8,82_u8];
_17 = !_4;
_14 = _23;
_17 = _4 << _23;
_22 = [148_u8,249_u8,163_u8,139_u8];
_4 = !_17;
_4 = -_17;
Goto(bb18)
}
bb24 = {
_16.1.1 = _1 as f64;
_20 = _1 as f32;
_23 = _14 * _14;
_14 = _2 as usize;
_3 = _2;
_21 = _20 + _20;
_21 = _20 - _20;
_12 = [11778_u16,62060_u16,56473_u16,35533_u16,46555_u16,43153_u16];
Goto(bb17)
}
bb25 = {
Return()
}
bb26 = {
_29 = _2;
(*_31) = 5620450255317088200384398776948996204_u128;
_6 = 11069_i16;
_30 = (*_19) <= (*_19);
_12 = [15384_u16,58731_u16,49647_u16,51374_u16,24155_u16,6013_u16];
_22 = [13_u8,148_u8,18_u8,31_u8];
(*_31) = 33226882410553950653940738371095439586_u128 ^ 280432386263982797778973992787201221879_u128;
_29 = _3;
_28 = _27 * _16.1.1;
_43 = _14 ^ _23;
_46 = !_38;
(*_31) = 315996080132899284104796050815612071971_u128 - 162279166700392476438279764281262461510_u128;
_8 = (-94175569674847341187449764665447761209_i128) ^ (-160500209796811803267347706914441069764_i128);
(*_31) = !91791109246914052233521785594323469296_u128;
_42 = !_30;
match _6 {
0 => bb13,
11069 => bb28,
_ => bb27
}
}
bb27 = {
_7 = true;
_2 = _3;
_8 = -(-31740210195815417002593940858789077616_i128);
_6 = 25884_i16 | 29032_i16;
_9 = RET | RET;
RET = _9;
_4 = 4055661377370087914_i64 & (-1932476246874968611_i64);
_9 = RET - RET;
_4 = (-4780386756918614542_i64) & 2940217370940180365_i64;
_4 = 2401545838783553241_u64 as i64;
_9 = RET >> _6;
_7 = false & true;
_9 = RET;
_6 = (-1288_i16) << _9;
RET = -_9;
_4 = (-8230337824331190950_i64);
_6 = 13635_i16 >> RET;
_8 = !85716466894949636660709408522659279154_i128;
RET = _9 ^ _9;
_7 = _9 > RET;
_1 = !316820526194594679486050929952268540701_u128;
RET = _9 * _9;
_1 = 271340588664373293256829816409470056102_u128;
match _4 {
0 => bb5,
340282366920938463455144269607437020506 => bb7,
_ => bb6
}
}
bb28 = {
_33 = core::ptr::addr_of_mut!(_45.1);
(*_31) = !322703275884833590264608836972058036278_u128;
_25 = !RET;
(*_33) = core::ptr::addr_of!(_21);
_27 = -_28;
_13.1 = (-52_i8);
Goto(bb29)
}
bb29 = {
_4 = -_17;
_20 = -_21;
_13.2 = core::ptr::addr_of_mut!(_4);
_4 = !_17;
_16.1.0 = [(*_31),(*_31),(*_31),(*_31),(*_31)];
_22 = [105_u8,42_u8,103_u8,157_u8];
(*_33) = core::ptr::addr_of!(_21);
_21 = _20 + _20;
(*_33) = core::ptr::addr_of!(_21);
(*_31) = 65843943079747305426360136954653221594_u128 << _43;
(*_33) = core::ptr::addr_of!(_53);
_14 = _43;
_42 = (*_31) > (*_31);
_27 = _13.1 as f64;
(*_33) = core::ptr::addr_of!(_20);
(*_31) = _2 as u128;
_13.1 = 61_i8 ^ 30_i8;
_22 = [237_u8,140_u8,20_u8,3_u8];
(*_31) = 247599066001726407850574932397010622480_u128;
(*_31) = 88327727314565625540470177585244202334_u128 << _38;
Goto(bb30)
}
bb30 = {
_16.3 = _30 & _30;
(*_33) = core::ptr::addr_of!(_20);
_27 = _28 + _16.1.1;
(*_33) = core::ptr::addr_of!(_53);
match _6 {
0 => bb11,
1 => bb20,
2 => bb4,
3 => bb31,
4 => bb32,
11069 => bb34,
_ => bb33
}
}
bb31 = {
_30 = _16.3 & _16.3;
_28 = -_16.1.1;
_16.1.0 = [_1,_1,_1,_1,_1];
_29 = _3;
_3 = _29;
_12 = [29059_u16,16352_u16,61414_u16,2719_u16,41723_u16,14461_u16];
_3 = _2;
_22 = [49_u8,185_u8,136_u8,145_u8];
_13.1 = (-64_i8) - (-6_i8);
_28 = _16.1.1 * _16.1.1;
_6 = (-32638_i16);
_28 = _16.1.1 - _16.1.1;
_28 = _16.1.1 * _16.1.1;
Goto(bb19)
}
bb32 = {
_21 = _20;
_13.1 = 119_i8 - (-53_i8);
_23 = _14 | _14;
_12 = [8936_u16,13199_u16,18501_u16,6649_u16,16316_u16,56316_u16];
_29 = _2;
_2 = _3;
_17 = _1 as i64;
_13.2 = core::ptr::addr_of_mut!(_17);
_22 = [179_u8,215_u8,225_u8,82_u8];
_17 = !_4;
_14 = _23;
_17 = _4 << _23;
_22 = [148_u8,249_u8,163_u8,139_u8];
_4 = !_17;
_4 = -_17;
Goto(bb18)
}
bb33 = {
_7 = true;
_2 = _3;
_8 = -(-31740210195815417002593940858789077616_i128);
_6 = 25884_i16 | 29032_i16;
_9 = RET | RET;
RET = _9;
_4 = 4055661377370087914_i64 & (-1932476246874968611_i64);
_9 = RET - RET;
_4 = (-4780386756918614542_i64) & 2940217370940180365_i64;
_4 = 2401545838783553241_u64 as i64;
_9 = RET >> _6;
_7 = false & true;
_9 = RET;
_6 = (-1288_i16) << _9;
RET = -_9;
_4 = (-8230337824331190950_i64);
_6 = 13635_i16 >> RET;
_8 = !85716466894949636660709408522659279154_i128;
RET = _9 ^ _9;
_7 = _9 > RET;
_1 = !316820526194594679486050929952268540701_u128;
RET = _9 * _9;
_1 = 271340588664373293256829816409470056102_u128;
match _4 {
0 => bb5,
340282366920938463455144269607437020506 => bb7,
_ => bb6
}
}
bb34 = {
_52 = [_30,_16.3];
(*_33) = core::ptr::addr_of!(_21);
(*_33) = core::ptr::addr_of!(_53);
(*_31) = !34411378036209503861844891153021350540_u128;
(*_31) = _27 as u128;
(*_31) = _43 as u128;
_23 = _14;
_34 = RET | _25;
(*_31) = 60988698045157534447629512964981293820_u128;
_48 = core::ptr::addr_of_mut!(_19);
_30 = _16.3;
_57 = core::ptr::addr_of_mut!((*_33));
(*_57) = core::ptr::addr_of!(_21);
_52 = [_30,_16.3];
(*_33) = core::ptr::addr_of!(_21);
_59 = _25 & _25;
_16.2 = core::ptr::addr_of_mut!(_4);
Goto(bb35)
}
bb35 = {
(*_48) = &_16.1.1;
_4 = _17 ^ _17;
(*_33) = core::ptr::addr_of!(_53);
(*_33) = core::ptr::addr_of!(_21);
_13.1 = -(-119_i8);
(*_33) = core::ptr::addr_of!(_53);
_25 = _34 << _14;
_16.2 = Move(_13.2);
Call((*_31) = core::intrinsics::transmute(_8), ReturnTo(bb36), UnwindUnreachable())
}
bb36 = {
(*_48) = &_28;
(*_33) = core::ptr::addr_of!(_21);
_37 = RET as u64;
(*_33) = core::ptr::addr_of!(_21);
_59 = _32 as isize;
(*_31) = 58480807438780219917609486652714720428_u128 ^ 199373588350455072898216101542511007500_u128;
_54 = &_13.1;
_36 = core::ptr::addr_of_mut!((*_33));
_16.3 = _30;
(*_31) = 189688484240636868621282020413203100151_u128;
_12 = [52516_u16,63251_u16,36575_u16,51437_u16,16036_u16,8995_u16];
(*_48) = &_27;
_35 = [26110_u16];
_44 = _4 >= _4;
Call(_43 = core::intrinsics::transmute(_59), ReturnTo(bb37), UnwindUnreachable())
}
bb37 = {
_24 = core::ptr::addr_of_mut!(_17);
_58 = core::ptr::addr_of!(_16.1);
(*_24) = _6 as i64;
(*_58).0 = [(*_31),(*_31),(*_31),(*_31),(*_31)];
(*_36) = core::ptr::addr_of!(_53);
(*_33) = core::ptr::addr_of!(_20);
(*_24) = _4 >> _8;
(*_33) = core::ptr::addr_of!(_21);
(*_33) = core::ptr::addr_of!(_53);
(*_48) = &(*_58).1;
_64 = (*_31) % (*_31);
_6 = !(-6303_i16);
_29 = _2;
_24 = Move(_16.2);
(*_31) = !_64;
(*_58).0 = [(*_31),(*_31),(*_31),(*_31),(*_31)];
(*_31) = _21 as u128;
(*_33) = core::ptr::addr_of!(_21);
_27 = (*_19);
(*_33) = core::ptr::addr_of!(_53);
_42 = !_16.3;
_8 = 81600618900813203721642963215922066467_i128;
(*_58).0 = [(*_31),(*_31),(*_31),(*_31),(*_31)];
_33 = core::ptr::addr_of_mut!((*_33));
_44 = _42 ^ _42;
match _8 {
0 => bb38,
1 => bb39,
81600618900813203721642963215922066467 => bb41,
_ => bb40
}
}
bb38 = {
_16.1.1 = _1 as f64;
_20 = _1 as f32;
_23 = _14 * _14;
_14 = _2 as usize;
_3 = _2;
_21 = _20 + _20;
_21 = _20 - _20;
_12 = [11778_u16,62060_u16,56473_u16,35533_u16,46555_u16,43153_u16];
Goto(bb17)
}
bb39 = {
Return()
}
bb40 = {
_16.1.1 = _8 as f64;
RET = _2 as isize;
_9 = RET;
_12 = [237_u16,28669_u16,65470_u16,20189_u16,39815_u16,30472_u16];
_13.1 = 101_i8 & 90_i8;
RET = _9 | _9;
_2 = _3;
_13.1 = 14017070326436524346_u64 as i8;
_6 = (-16412_i16);
_8 = -13549438326441849489120977625323337476_i128;
_19 = &_16.1.1;
_20 = (*_19) as f32;
_2 = _3;
_16.1.0 = [_1,_1,_1,_1,_1];
_22 = [0_u8,162_u8,63_u8,95_u8];
_8 = (-104248493137400922476272406123607999039_i128) ^ (-27466536645410998646403005873113296871_i128);
_16.1.0 = [_1,_1,_1,_1,_1];
Call(_25 = core::intrinsics::bswap(RET), ReturnTo(bb16), UnwindUnreachable())
}
bb41 = {
(*_33) = core::ptr::addr_of!(_21);
(*_33) = core::ptr::addr_of!(_53);
_55 = 199_u8 as isize;
(*_58).0 = [(*_31),(*_31),(*_31),(*_31),(*_31)];
(*_58).0 = [(*_31),(*_31),(*_31),(*_31),(*_31)];
(*_58).0 = [(*_31),(*_31),(*_31),(*_31),(*_31)];
_59 = _55;
_16.0 = &mut (*_33);
(*_31) = _64 ^ _64;
(*_58).0 = [(*_31),(*_31),(*_31),(*_31),(*_31)];
(*_48) = &_28;
(*_48) = &(*_58).1;
Goto(bb42)
}
bb42 = {
_13.1 = RET as i8;
_20 = _21 + _21;
_32 = _2;
(*_48) = &_28;
(*_58).0 = [(*_31),(*_31),(*_31),(*_31),(*_31)];
_22 = [25_u8,195_u8,194_u8,179_u8];
(*_31) = _64 * _64;
(*_48) = &_16.1.1;
_53 = _6 as f32;
(*_31) = _64 * _64;
match _8 {
0 => bb43,
81600618900813203721642963215922066467 => bb45,
_ => bb44
}
}
bb43 = {
Return()
}
bb44 = {
_16.3 = _30 & _30;
(*_33) = core::ptr::addr_of!(_20);
_27 = _28 + _16.1.1;
(*_33) = core::ptr::addr_of!(_53);
match _6 {
0 => bb11,
1 => bb20,
2 => bb4,
3 => bb31,
4 => bb32,
11069 => bb34,
_ => bb33
}
}
bb45 = {
_9 = _34;
(*_31) = 152_u8 as u128;
_63 = !_42;
_30 = _16.3;
_56.1 = _37 as i8;
_48 = core::ptr::addr_of_mut!((*_48));
(*_48) = &_27;
(*_48) = &(*_58).1;
_60 = _2;
_76 = 208_u8 | 193_u8;
_60 = _32;
_32 = _3;
_77 = [_37,_37,_37,_37,_37,_37];
(*_58).0 = [(*_31),_64,(*_31),(*_31),(*_31)];
_36 = Move(_33);
_49 = core::ptr::addr_of_mut!(_76);
(*_31) = _64 + _64;
(*_58).0 = [(*_31),(*_31),(*_31),(*_31),(*_31)];
_65 = _37 | _37;
_3 = _29;
_22 = [(*_49),(*_49),(*_49),(*_49)];
_63 = (*_19) <= (*_19);
(*_31) = 6368_u16 as u128;
(*_48) = &_28;
match _8 {
81600618900813203721642963215922066467 => bb46,
_ => bb40
}
}
bb46 = {
_71 = _56.1 as isize;
(*_58).0 = [(*_31),(*_31),(*_31),(*_31),(*_31)];
_38 = _46;
_28 = 18059_u16 as f64;
_77 = [_65,_65,_65,_65,_37,_37];
_49 = core::ptr::addr_of_mut!((*_49));
_81 = _2;
_29 = _3;
match _8 {
0 => bb11,
1 => bb5,
2 => bb23,
81600618900813203721642963215922066467 => bb48,
_ => bb47
}
}
bb47 = {
_8 = !110650976687081991527991308856686963653_i128;
_13.1 = (-8_i8);
_17 = _4;
_6 = 9429_i16 | 3028_i16;
_3 = _2;
Goto(bb14)
}
bb48 = {
_44 = _30 <= _42;
_28 = _27;
_49 = core::ptr::addr_of_mut!((*_49));
_16.1.0 = [(*_31),_64,(*_31),(*_31),(*_31)];
Goto(bb49)
}
bb49 = {
_27 = (*_58).1 + (*_58).1;
_71 = _25 + _34;
(*_49) = 66_u8 & 208_u8;
(*_58).0 = [(*_31),(*_31),(*_31),(*_31),(*_31)];
_56.1 = _13.1;
_34 = _71;
_62 = (*_58).1 as i128;
(*_58).0 = [_64,(*_31),(*_31),_64,(*_31)];
_8 = _62 << _71;
(*_49) = 33_u8;
(*_31) = _64 * _64;
_63 = !_44;
_21 = _20 * _20;
(*_49) = 180_u8;
Goto(bb50)
}
bb50 = {
Call(_86 = dump_var(5_usize, 59_usize, Move(_59), 6_usize, Move(_6), 81_usize, Move(_81), 44_usize, Move(_44)), ReturnTo(bb51), UnwindUnreachable())
}
bb51 = {
Call(_86 = dump_var(5_usize, 17_usize, Move(_17), 32_usize, Move(_32), 60_usize, Move(_60), 35_usize, Move(_35)), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
Call(_86 = dump_var(5_usize, 3_usize, Move(_3), 37_usize, Move(_37), 9_usize, Move(_9), 38_usize, Move(_38)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Call(_86 = dump_var(5_usize, 22_usize, Move(_22), 29_usize, Move(_29), 25_usize, Move(_25), 65_usize, Move(_65)), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Call(_86 = dump_var(5_usize, 43_usize, Move(_43), 1_usize, Move(_1), 87_usize, _87, 87_usize, _87), ReturnTo(bb55), UnwindUnreachable())
}
bb55 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn6(mut _1: char,mut _2: char,mut _3: isize,mut _4: char,mut _5: char,mut _6: i16,mut _7: char) -> u128 {
mir! {
type RET = u128;
let _8: f32;
let _9: i8;
let _10: [u64; 5];
let _11: (i8, usize, isize);
let _12: Adt62;
let _13: &'static mut i16;
let _14: &'static f64;
let _15: [u128; 8];
let _16: f32;
let _17: i128;
let _18: f64;
let _19: *const *mut usize;
let _20: &'static mut (i8, usize, isize);
let _21: char;
let _22: [u8; 7];
let _23: isize;
let _24: isize;
let _25: (i16, u32, f32, u8);
let _26: (i16, u32, f32, u8);
let _27: (char, (&'static mut *const f32, ([u128; 5], f64), *mut i64, bool), *mut u8);
let _28: isize;
let _29: f32;
let _30: &'static mut u128;
let _31: &'static mut &'static f64;
let _32: [u64; 5];
let _33: &'static mut *const f32;
let _34: f64;
let _35: &'static mut *const f32;
let _36: [u64; 6];
let _37: bool;
let _38: *const *mut usize;
let _39: &'static mut [u64; 6];
let _40: u128;
let _41: (&'static u16, u16, (i16, u32, f32, u8));
let _42: bool;
let _43: &'static mut *const f32;
let _44: f64;
let _45: isize;
let _46: &'static [u64; 2];
let _47: char;
let _48: (&'static u16, u16, (i16, u32, f32, u8));
let _49: &'static i8;
let _50: &'static mut u128;
let _51: *mut *const [u64; 6];
let _52: [u128; 8];
let _53: *const ([u128; 5], f64);
let _54: (bool, i16, i8, &'static mut i16);
let _55: *mut f32;
let _56: *mut i64;
let _57: char;
let _58: bool;
let _59: [u128; 5];
let _60: i64;
let _61: &'static f64;
let _62: bool;
let _63: (bool, f32, Adt43);
let _64: Adt60;
let _65: [u64; 5];
let _66: *const f32;
let _67: f64;
let _68: i16;
let _69: isize;
let _70: Adt63;
let _71: u8;
let _72: &'static mut *const f32;
let _73: ();
let _74: ();
{
_4 = _5;
_5 = _2;
_3 = !9223372036854775807_isize;
RET = 248836641607098824155809697565000593360_u128 & 265137720001228571612786421386630259770_u128;
_2 = _7;
Call(_3 = fn7(_5, _2), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_3 = (-9223372036854775808_isize);
_4 = _7;
_3 = 9223372036854775807_isize | 9223372036854775807_isize;
_2 = _4;
Goto(bb2)
}
bb2 = {
_9 = 72492360_i32 as i8;
_11 = (_9, 5584336656196479155_usize, _3);
_9 = _11.0;
_11 = (_9, 15003728844226328582_usize, _3);
_8 = 5814421280373954295_u64 as f32;
_2 = _5;
_10 = [13189199330493610486_u64,9309670071274817962_u64,5220750081153241921_u64,2315500848199645927_u64,7413913021115802661_u64];
_2 = _1;
_7 = _1;
_2 = _1;
_11.0 = 9377733197633694311_u64 as i8;
_11.0 = !_9;
_9 = -_11.0;
_5 = _4;
_4 = _7;
_15 = [RET,RET,RET,RET,RET,RET,RET,RET];
_11 = (_9, 1320959863855628705_usize, _3);
_2 = _1;
_4 = _2;
match _11.1 {
0 => bb1,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
6 => bb8,
1320959863855628705 => bb10,
_ => bb9
}
}
bb3 = {
_3 = (-9223372036854775808_isize);
_4 = _7;
_3 = 9223372036854775807_isize | 9223372036854775807_isize;
_2 = _4;
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_7 = _4;
_3 = _11.2 & _11.2;
_16 = _8 * _8;
_4 = _1;
_11.2 = 1_u8 as isize;
_11 = (_9, 12252488334655465305_usize, _3);
_13 = &mut _6;
(*_13) = _11.1 as i16;
(*_13) = 17807_i16 * 7782_i16;
(*_13) = -612_i16;
_3 = _11.2 << (*_13);
(*_13) = RET as i16;
(*_13) = 234_u8 as i16;
match _11.1 {
0 => bb11,
12252488334655465305 => bb13,
_ => bb12
}
}
bb11 = {
_3 = (-9223372036854775808_isize);
_4 = _7;
_3 = 9223372036854775807_isize | 9223372036854775807_isize;
_2 = _4;
Goto(bb2)
}
bb12 = {
Return()
}
bb13 = {
_2 = _5;
_11 = (_9, 6_usize, _3);
(*_13) = _4 as i16;
_15 = [RET,RET,RET,RET,RET,RET,RET,RET];
RET = !319613382408627191662306517601921380187_u128;
match _11.1 {
0 => bb12,
1 => bb14,
2 => bb15,
3 => bb16,
4 => bb17,
5 => bb18,
6 => bb20,
_ => bb19
}
}
bb14 = {
Return()
}
bb15 = {
_3 = (-9223372036854775808_isize);
_4 = _7;
_3 = 9223372036854775807_isize | 9223372036854775807_isize;
_2 = _4;
Goto(bb2)
}
bb16 = {
_3 = (-9223372036854775808_isize);
_4 = _7;
_3 = 9223372036854775807_isize | 9223372036854775807_isize;
_2 = _4;
Goto(bb2)
}
bb17 = {
Return()
}
bb18 = {
Return()
}
bb19 = {
Return()
}
bb20 = {
_18 = 1434734688_i32 as f64;
(*_13) = 1288_i16;
(*_13) = _16 as i16;
(*_13) = 15547_i16 + 28765_i16;
RET = 2471060240083986227045069123069680890_u128;
_11.1 = 242795105961202223_usize - 9902794740135748201_usize;
_8 = (*_13) as f32;
(*_13) = 6459661995976611097_u64 as i16;
_17 = 150779884952620782424712797936359379533_i128 - 21444764116646253121281894482808158594_i128;
(*_13) = -19486_i16;
(*_13) = (-13626_i16) * (-29844_i16);
_9 = _11.0;
_11.2 = _3;
(*_13) = (-26728_i16) << _11.2;
(*_13) = !4331_i16;
(*_13) = _1 as i16;
_8 = _16;
match RET {
2471060240083986227045069123069680890 => bb21,
_ => bb1
}
}
bb21 = {
(*_13) = 26121_i16 >> _3;
_4 = _1;
_9 = _11.0 | _11.0;
(*_13) = 672515733767674709_u64 as i16;
_9 = _11.0;
_21 = _4;
_11 = (_9, 2_usize, _3);
_25.1 = 168_u8 as u32;
_25.0 = (*_13);
(*_13) = _11.1 as i16;
(*_13) = _25.0;
_25.3 = 49_u8 >> _25.1;
_22 = [_25.3,_25.3,_25.3,_25.3,_25.3,_25.3,_25.3];
Goto(bb22)
}
bb22 = {
(*_13) = !_25.0;
_11.0 = _9 * _9;
(*_13) = _25.0 << _11.1;
(*_13) = !_25.0;
_27.1.1.1 = _18 + _18;
_8 = -_16;
_14 = &_27.1.1.1;
_18 = (*_14);
(*_13) = _25.0 ^ _25.0;
(*_13) = _25.0 ^ _25.0;
_14 = &_18;
(*_13) = _25.0;
_27.1.1.0 = [RET,RET,RET,RET,RET];
_26.2 = _8 * _8;
_5 = _1;
_14 = &_27.1.1.1;
(*_13) = -_25.0;
(*_13) = _25.0;
match RET {
0 => bb5,
1 => bb17,
2 => bb18,
2471060240083986227045069123069680890 => bb24,
_ => bb23
}
}
bb23 = {
_3 = (-9223372036854775808_isize);
_4 = _7;
_3 = 9223372036854775807_isize | 9223372036854775807_isize;
_2 = _4;
Goto(bb2)
}
bb24 = {
_27.1.3 = false;
match _11.1 {
0 => bb20,
1 => bb25,
2 => bb28,
_ => bb27
}
}
bb25 = {
Return()
}
bb26 = {
Return()
}
bb27 = {
Return()
}
bb28 = {
(*_13) = _25.0;
_27.1.1.1 = _18 - _18;
(*_13) = _25.0 << _11.1;
_26 = ((*_13), _25.1, _8, _25.3);
_9 = -_11.0;
_11.0 = !_9;
RET = _18 as u128;
_27.2 = core::ptr::addr_of_mut!(_25.3);
(*_13) = !_26.0;
(*_13) = _26.0 + _26.0;
_11.2 = _3 - _3;
_11.0 = -_9;
_25.3 = _25.1 as u8;
_24 = -_3;
_4 = _1;
_18 = -_27.1.1.1;
_27.0 = _5;
_20 = &mut _11;
(*_20).2 = _16 as isize;
(*_20).2 = _3 - _3;
_26.1 = _25.1 * _25.1;
_15 = [RET,RET,RET,RET,RET,RET,RET,RET];
(*_20) = (_9, 6293193725448497637_usize, _24);
(*_13) = _26.0 + _26.0;
(*_20) = (_9, 10207099193199828362_usize, _3);
Goto(bb29)
}
bb29 = {
(*_13) = _26.0 << (*_20).1;
_28 = (*_20).2 << (*_13);
(*_13) = _26.0;
(*_20).1 = !12067905888127998962_usize;
(*_20) = (_9, 6_usize, _28);
(*_13) = _26.0 << _28;
(*_20).2 = _3 + _28;
(*_20).0 = !_9;
(*_13) = _26.0 << (*_20).2;
(*_20) = (_9, 7_usize, _3);
(*_13) = _26.0 + _26.0;
(*_13) = _26.0 * _26.0;
_34 = _27.1.1.1;
(*_20).1 = !13126845811573408705_usize;
(*_20).1 = 5_usize;
_34 = _27.1.1.1 + _27.1.1.1;
(*_20).2 = _28 | _28;
_36 = [1337129090204401456_u64,7024408602101469835_u64,16748773227397388266_u64,17767735055155987283_u64,1024033721373119783_u64,8188654245824682513_u64];
(*_20).2 = _28 + _3;
_18 = _34 - _27.1.1.1;
match (*_20).1 {
0 => bb15,
1 => bb11,
2 => bb30,
5 => bb32,
_ => bb31
}
}
bb30 = {
Return()
}
bb31 = {
Return()
}
bb32 = {
(*_20).2 = _26.3 as isize;
(*_20).0 = _9 + _9;
_26 = ((*_13), _25.1, _8, _25.3);
(*_13) = RET as i16;
_15 = [RET,RET,RET,RET,RET,RET,RET,RET];
Goto(bb33)
}
bb33 = {
(*_20).2 = _28 - _3;
(*_13) = (*_20).0 as i16;
(*_20).1 = (-481503863817931148_i64) as usize;
_39 = &mut _36;
_26.1 = _25.1 - _25.1;
(*_39) = [3174446112725725686_u64,12322573145778430960_u64,13039734825922002731_u64,6878069480085184496_u64,7450782451361617587_u64,8445240702756414902_u64];
(*_20).0 = _9;
Goto(bb34)
}
bb34 = {
(*_20) = (_9, 15767853727340007595_usize, _28);
(*_20).0 = (-6563766049542507932_i64) as i8;
Goto(bb35)
}
bb35 = {
(*_39) = [14311156413803212872_u64,7676895149966882994_u64,2523066659888802550_u64,3971048525590308051_u64,13857503110097847602_u64,4839367831629072827_u64];
_13 = &mut _25.0;
Goto(bb36)
}
bb36 = {
(*_20).0 = _9 + _9;
(*_20).2 = (*_20).0 as isize;
(*_20) = (_9, 4_usize, _28);
Goto(bb37)
}
bb37 = {
_31 = &mut _14;
(*_13) = !_26.0;
(*_20).2 = _28 >> (*_13);
(*_20).1 = 1_usize;
_41.2.1 = _26.1;
(*_20).2 = -_28;
Goto(bb38)
}
bb38 = {
(*_20).1 = 3_usize & 522066985998313458_usize;
(*_20).0 = -_9;
(*_20) = (_9, 1_usize, _24);
(*_13) = _26.0 & _26.0;
(*_31) = &_34;
_48.2.0 = (*_13) << (*_13);
_45 = (*_20).2 ^ _28;
_30 = &mut RET;
(*_20).2 = _28;
(*_20).2 = _28 | _45;
(*_31) = &_18;
match (*_20).1 {
0 => bb9,
1 => bb40,
_ => bb39
}
}
bb39 = {
_3 = (-9223372036854775808_isize);
_4 = _7;
_3 = 9223372036854775807_isize | 9223372036854775807_isize;
_2 = _4;
Goto(bb2)
}
bb40 = {
(*_20).1 = 7_usize - 10657519587845697198_usize;
_3 = _27.1.3 as isize;
_27.0 = _1;
(*_20) = (_9, 4_usize, _28);
(*_20).0 = _9 & _9;
_26.1 = _41.2.1 ^ _41.2.1;
(*_39) = [3255587790776467405_u64,1376077422015046642_u64,12444662579148374408_u64,5118611908906323088_u64,14708575552846538349_u64,4774059481870867127_u64];
(*_13) = (*_30) as i16;
(*_20).2 = !_28;
(*_30) = 44135683472975076501373369450274649400_u128 & 218357218850432664046313376209560090119_u128;
_57 = _7;
(*_31) = &_34;
Goto(bb41)
}
bb41 = {
(*_20).0 = _9;
(*_20).0 = !_9;
(*_20).0 = -_9;
(*_30) = 217216028499176684067131290344847762405_u128 | 109938911147516817626716780318323611323_u128;
_52 = [(*_30),(*_30),(*_30),(*_30),(*_30),(*_30),(*_30),(*_30)];
_15 = _52;
(*_20).1 = 6_usize;
(*_31) = &_27.1.1.1;
(*_20).0 = _9 << (*_20).2;
_18 = -_34;
(*_30) = 294072499960091684311130912641541484588_u128 * 146016735477233683359625877927255176483_u128;
match (*_20).1 {
0 => bb42,
1 => bb43,
2 => bb44,
6 => bb46,
_ => bb45
}
}
bb42 = {
(*_13) = _25.0;
_27.1.1.1 = _18 - _18;
(*_13) = _25.0 << _11.1;
_26 = ((*_13), _25.1, _8, _25.3);
_9 = -_11.0;
_11.0 = !_9;
RET = _18 as u128;
_27.2 = core::ptr::addr_of_mut!(_25.3);
(*_13) = !_26.0;
(*_13) = _26.0 + _26.0;
_11.2 = _3 - _3;
_11.0 = -_9;
_25.3 = _25.1 as u8;
_24 = -_3;
_4 = _1;
_18 = -_27.1.1.1;
_27.0 = _5;
_20 = &mut _11;
(*_20).2 = _16 as isize;
(*_20).2 = _3 - _3;
_26.1 = _25.1 * _25.1;
_15 = [RET,RET,RET,RET,RET,RET,RET,RET];
(*_20) = (_9, 6293193725448497637_usize, _24);
(*_13) = _26.0 + _26.0;
(*_20) = (_9, 10207099193199828362_usize, _3);
Goto(bb29)
}
bb43 = {
Return()
}
bb44 = {
(*_20).1 = 3_usize & 522066985998313458_usize;
(*_20).0 = -_9;
(*_20) = (_9, 1_usize, _24);
(*_13) = _26.0 & _26.0;
(*_31) = &_34;
_48.2.0 = (*_13) << (*_13);
_45 = (*_20).2 ^ _28;
_30 = &mut RET;
(*_20).2 = _28;
(*_20).2 = _28 | _45;
(*_31) = &_18;
match (*_20).1 {
0 => bb9,
1 => bb40,
_ => bb39
}
}
bb45 = {
Return()
}
bb46 = {
_29 = _16;
_26.0 = _48.2.0 * _48.2.0;
_42 = _27.1.3 ^ _27.1.3;
(*_31) = &_18;
(*_39) = [8511267326774961584_u64,13112685789372860546_u64,7833319842328240179_u64,17878661270747059705_u64,259426033712971769_u64,18394922888708384883_u64];
_48.2 = (_26.0, _26.1, _16, _26.3);
(*_30) = !131821965625263787411739922981578507522_u128;
_37 = (*_20).2 > (*_20).2;
_62 = _37;
(*_20) = (_9, 9174075016345279690_usize, _45);
(*_39) = [7055888538744504761_u64,13493500142793376306_u64,14778762298613738521_u64,10925442615052970603_u64,17101566031148056356_u64,2382544207996921368_u64];
_61 = &_27.1.1.1;
(*_20).1 = !2_usize;
(*_20).0 = _48.2.0 as i8;
(*_20).0 = _9 - _9;
_63.0 = _62 & _37;
Goto(bb47)
}
bb47 = {
_60 = !(-8801150893869922656_i64);
(*_31) = &(*_61);
(*_31) = Move(_61);
(*_20) = (_9, 2512831003048298799_usize, _45);
_54 = (_63.0, _48.2.0, (*_20).0, Move(_13));
Goto(bb48)
}
bb48 = {
(*_39) = [1428352004993590719_u64,5709924131459937467_u64,17345647008734431883_u64,12557269725238568204_u64,8291513924188638340_u64,10604571091126855091_u64];
(*_30) = 195994867467771212969108013847238228266_u128;
(*_20).2 = _45 >> (*_20).1;
(*_20).2 = !_28;
(*_20).0 = _54.2;
(*_39) = [14514751512997467839_u64,14595594315818921909_u64,13752709415330682917_u64,16905732498490851312_u64,15583818352460625716_u64,8351726853686046351_u64];
_55 = core::ptr::addr_of_mut!(_16);
_21 = _7;
(*_55) = _48.2.2 - _29;
(*_20).0 = !_9;
_37 = _62 & _63.0;
(*_20) = (_54.2, 6_usize, _24);
_63.1 = 9936191201868434022_u64 as f32;
(*_20).1 = 1_usize & 3035832757271355918_usize;
_60 = 8307657056063459295_i64;
(*_20).2 = _26.1 as isize;
(*_20).0 = _54.2 - _54.2;
_26.2 = (*_30) as f32;
(*_55) = -_8;
(*_20).2 = _28 * _28;
(*_55) = _63.1 - _63.1;
(*_20) = (_9, 13225307306293868440_usize, _28);
_41.2 = _48.2;
_60 = _7 as i64;
_66 = core::ptr::addr_of!((*_55));
(*_20) = (_54.2, 2_usize, _24);
match (*_20).1 {
0 => bb31,
1 => bb49,
2 => bb51,
_ => bb50
}
}
bb49 = {
Return()
}
bb50 = {
Return()
}
bb51 = {
(*_20).0 = _9;
(*_30) = 172593815339602727886845341799982898283_u128 & 287317731774147864074159347725777609648_u128;
(*_20).1 = !1_usize;
_27.0 = _2;
_26 = _41.2;
(*_39) = [8663438452865945286_u64,14879292271661372339_u64,7513760936083400396_u64,10483986549705277714_u64,9744948777014935157_u64,7877684464323167066_u64];
_43 = &mut _66;
_53 = core::ptr::addr_of!(_27.1.1);
(*_30) = 288361429661851875119848929140245280818_u128;
(*_31) = &(*_53).1;
(*_55) = _63.1 * _26.2;
Goto(bb52)
}
bb52 = {
Call(_73 = dump_var(6_usize, 3_usize, Move(_3), 36_usize, Move(_36), 57_usize, Move(_57), 4_usize, Move(_4)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Call(_73 = dump_var(6_usize, 5_usize, Move(_5), 37_usize, Move(_37), 21_usize, Move(_21), 17_usize, Move(_17)), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Call(_73 = dump_var(6_usize, 2_usize, Move(_2), 45_usize, Move(_45), 24_usize, Move(_24), 42_usize, Move(_42)), ReturnTo(bb55), UnwindUnreachable())
}
bb55 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn7(mut _1: char,mut _2: char) -> isize {
mir! {
type RET = isize;
let _3: &'static mut i32;
let _4: &'static f64;
let _5: bool;
let _6: bool;
let _7: &'static u16;
let _8: isize;
let _9: u32;
let _10: *mut usize;
let _11: [u16; 6];
let _12: u32;
let _13: ([u128; 5], f64);
let _14: [u8; 4];
let _15: isize;
let _16: isize;
let _17: &'static mut u128;
let _18: f64;
let _19: f64;
let _20: *const [u64; 6];
let _21: &'static mut i32;
let _22: ();
let _23: ();
{
RET = 88_isize - (-71_isize);
_2 = _1;
_1 = _2;
_1 = _2;
_2 = _1;
_1 = _2;
_1 = _2;
_5 = true & false;
_2 = _1;
_6 = !_5;
_2 = _1;
_1 = _2;
_2 = _1;
RET = 151_u8 as isize;
RET = 9223372036854775807_isize >> (-7512_i16);
_1 = _2;
_1 = _2;
_1 = _2;
_9 = 3312839189_u32;
_8 = -RET;
_6 = _2 != _2;
_6 = _5 == _5;
_6 = _5;
Goto(bb1)
}
bb1 = {
_6 = _8 <= _8;
_6 = !_5;
RET = 37_u8 as isize;
_11 = [52745_u16,41606_u16,28131_u16,17799_u16,19331_u16,61597_u16];
_9 = 1736875837_u32 - 1978331567_u32;
_9 = 8622378323873967814_i64 as u32;
_5 = _6;
_1 = _2;
_5 = !_6;
_11 = [23413_u16,65092_u16,30111_u16,17853_u16,47743_u16,46897_u16];
_11 = [5535_u16,4047_u16,37310_u16,10826_u16,10190_u16,37536_u16];
_11 = [62969_u16,4005_u16,24564_u16,14167_u16,19978_u16,17783_u16];
_6 = _5 | _5;
_1 = _2;
_8 = RET - RET;
_5 = _6;
_2 = _1;
_5 = _6;
Call(_10 = fn8(_1, _9, _2, RET, _2, RET, _5, RET, _6), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_5 = _6 != _6;
_5 = _8 >= RET;
_11 = [52811_u16,60091_u16,61064_u16,3790_u16,43524_u16,50388_u16];
_8 = !RET;
_1 = _2;
RET = _8 & _8;
_5 = _6;
Goto(bb3)
}
bb3 = {
_8 = RET;
RET = !_8;
_8 = RET * RET;
_12 = _9;
_1 = _2;
_8 = RET + RET;
_1 = _2;
_11 = [80_u16,4408_u16,57282_u16,24815_u16,24476_u16,57996_u16];
RET = _8;
_2 = _1;
_13.1 = 19963_i16 as f64;
_1 = _2;
_4 = &_13.1;
_8 = !RET;
_13.0 = [106204786042836648753176854276161110389_u128,53423362430599157080519347945534474959_u128,291909000165316088018801377559101937020_u128,274870136584591714010335955971832594459_u128,279307875953037403962812539982826930179_u128];
_9 = _12 & _12;
_14 = [4_u8,162_u8,240_u8,97_u8];
_1 = _2;
Goto(bb4)
}
bb4 = {
_6 = RET < RET;
_6 = _1 == _1;
_5 = _8 != _8;
_14 = [1_u8,132_u8,165_u8,38_u8];
_8 = RET + RET;
_2 = _1;
_8 = RET - RET;
_5 = _6;
_2 = _1;
_6 = !_5;
_6 = (*_4) <= (*_4);
_14 = [102_u8,211_u8,250_u8,73_u8];
_18 = _13.1;
_6 = _8 == RET;
_4 = &_18;
RET = _8 ^ _8;
Goto(bb5)
}
bb5 = {
Call(_22 = dump_var(7_usize, 14_usize, Move(_14), 2_usize, Move(_2), 12_usize, Move(_12), 8_usize, Move(_8)), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn8(mut _1: char,mut _2: u32,mut _3: char,mut _4: isize,mut _5: char,mut _6: isize,mut _7: bool,mut _8: isize,mut _9: bool) -> *mut usize {
mir! {
type RET = *mut usize;
let _10: bool;
let _11: ([u64; 2],);
let _12: ([u128; 5], f64);
let _13: u64;
let _14: &'static u16;
let _15: (u128, *mut f32, [u16; 1], u8);
let _16: i16;
let _17: [char; 6];
let _18: f64;
let _19: i64;
let _20: &'static i16;
let _21: f32;
let _22: u8;
let _23: usize;
let _24: i16;
let _25: i128;
let _26: u8;
let _27: [u8; 7];
let _28: u32;
let _29: f32;
let _30: isize;
let _31: u32;
let _32: *const f32;
let _33: &'static [u64; 2];
let _34: f64;
let _35: (*const ([u64; 2],), *const f32);
let _36: bool;
let _37: *const ([u64; 2],);
let _38: *mut f32;
let _39: *const f32;
let _40: *mut *const [u64; 6];
let _41: Adt60;
let _42: &'static mut *const f32;
let _43: u16;
let _44: i16;
let _45: Adt43;
let _46: i32;
let _47: [u16; 6];
let _48: isize;
let _49: [u128; 8];
let _50: usize;
let _51: bool;
let _52: i64;
let _53: *const [u64; 6];
let _54: isize;
let _55: *mut &'static u16;
let _56: char;
let _57: i16;
let _58: f32;
let _59: &'static mut Adt62;
let _60: &'static i16;
let _61: u32;
let _62: i32;
let _63: [u8; 4];
let _64: u64;
let _65: &'static u16;
let _66: [char; 6];
let _67: [bool; 2];
let _68: (&'static mut *const f32, ([u128; 5], f64), *mut i64, bool);
let _69: &'static mut [u8; 3];
let _70: *const *mut usize;
let _71: isize;
let _72: *const ([u128; 5], f64);
let _73: usize;
let _74: isize;
let _75: ();
let _76: ();
{
_8 = -_6;
_2 = _6 as u32;
_3 = _5;
_5 = _1;
_6 = _8;
_2 = 3568366828_u32 & 1343091395_u32;
_5 = _1;
_5 = _3;
_4 = _6 & _6;
_5 = _3;
_6 = (-3990628246329144836_i64) as isize;
_3 = _1;
_8 = _9 as isize;
_8 = _6 & _4;
_10 = _7 >= _9;
_10 = _9;
_8 = _4;
Call(_11.0 = fn9(_6, _3, _5, _8, _3, _3, _3, _4), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_4 = _8;
_12.0 = [240034396246725737927763007495374883596_u128,113920168914739979054049580394336043048_u128,302863340245232658162674808141650382014_u128,90558570176549373596660693700651067112_u128,153792814966893184612421351190630793164_u128];
_13 = 1752276975763054079_u64 >> _4;
_2 = !2043286897_u32;
_12.1 = (-12128_i16) as f64;
_8 = 67_i8 as isize;
_7 = !_9;
_9 = _5 <= _1;
_6 = _4 - _4;
_3 = _1;
_5 = _1;
_1 = _3;
_7 = _10 | _10;
Goto(bb2)
}
bb2 = {
_12.0 = [52748717631537095311175423590323414555_u128,108269233278384308640066206584528346944_u128,161288806868189811788017404470377395659_u128,241186861726590205006554371673280959059_u128,316457275289690998389087357260807179043_u128];
_15.2 = [32998_u16];
_1 = _3;
_10 = _7 < _7;
_1 = _3;
_12.1 = 7471113186505188614_i64 as f64;
_6 = _10 as isize;
_15.2 = [59909_u16];
Goto(bb3)
}
bb3 = {
_4 = -_6;
_3 = _5;
_12.0 = [160868414992732818510418256768108418557_u128,134713054229067651821356068014300784613_u128,20287155625994940606182637479997214199_u128,287886515052782758207566053582537574187_u128,8507126089354740284569995978386264556_u128];
Goto(bb4)
}
bb4 = {
_16 = 20758_i16;
_1 = _5;
_15.0 = 41_i8 as u128;
_15.2 = [38668_u16];
_8 = _4;
_13 = 11516987078689301137_u64 << _6;
_3 = _5;
_7 = _10;
_18 = (-8314367090708841504_i64) as f64;
_11.0 = [_13,_13];
_17 = [_1,_3,_5,_1,_3,_1];
_3 = _1;
_1 = _3;
_1 = _5;
_6 = _8 & _8;
_2 = 1543287778_u32 - 410784971_u32;
_15.3 = 184_u8 - 183_u8;
_19 = 8951558700100244052_i64 >> _8;
_15.3 = 101_u8 ^ 36_u8;
_15.3 = _10 as u8;
_2 = !3611113360_u32;
_11.0 = [_13,_13];
_7 = _10 != _10;
_9 = _7;
_13 = 11151131941355408220_u64 << _6;
match _16 {
0 => bb5,
1 => bb6,
2 => bb7,
3 => bb8,
4 => bb9,
20758 => bb11,
_ => bb10
}
}
bb5 = {
_4 = -_6;
_3 = _5;
_12.0 = [160868414992732818510418256768108418557_u128,134713054229067651821356068014300784613_u128,20287155625994940606182637479997214199_u128,287886515052782758207566053582537574187_u128,8507126089354740284569995978386264556_u128];
Goto(bb4)
}
bb6 = {
_12.0 = [52748717631537095311175423590323414555_u128,108269233278384308640066206584528346944_u128,161288806868189811788017404470377395659_u128,241186861726590205006554371673280959059_u128,316457275289690998389087357260807179043_u128];
_15.2 = [32998_u16];
_1 = _3;
_10 = _7 < _7;
_1 = _3;
_12.1 = 7471113186505188614_i64 as f64;
_6 = _10 as isize;
_15.2 = [59909_u16];
Goto(bb3)
}
bb7 = {
_4 = _8;
_12.0 = [240034396246725737927763007495374883596_u128,113920168914739979054049580394336043048_u128,302863340245232658162674808141650382014_u128,90558570176549373596660693700651067112_u128,153792814966893184612421351190630793164_u128];
_13 = 1752276975763054079_u64 >> _4;
_2 = !2043286897_u32;
_12.1 = (-12128_i16) as f64;
_8 = 67_i8 as isize;
_7 = !_9;
_9 = _5 <= _1;
_6 = _4 - _4;
_3 = _1;
_5 = _1;
_1 = _3;
_7 = _10 | _10;
Goto(bb2)
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
_15.3 = (-2006121545_i32) as u8;
match _16 {
0 => bb6,
1 => bb2,
2 => bb3,
3 => bb9,
4 => bb12,
5 => bb13,
20758 => bb15,
_ => bb14
}
}
bb12 = {
Return()
}
bb13 = {
_4 = -_6;
_3 = _5;
_12.0 = [160868414992732818510418256768108418557_u128,134713054229067651821356068014300784613_u128,20287155625994940606182637479997214199_u128,287886515052782758207566053582537574187_u128,8507126089354740284569995978386264556_u128];
Goto(bb4)
}
bb14 = {
_16 = 20758_i16;
_1 = _5;
_15.0 = 41_i8 as u128;
_15.2 = [38668_u16];
_8 = _4;
_13 = 11516987078689301137_u64 << _6;
_3 = _5;
_7 = _10;
_18 = (-8314367090708841504_i64) as f64;
_11.0 = [_13,_13];
_17 = [_1,_3,_5,_1,_3,_1];
_3 = _1;
_1 = _3;
_1 = _5;
_6 = _8 & _8;
_2 = 1543287778_u32 - 410784971_u32;
_15.3 = 184_u8 - 183_u8;
_19 = 8951558700100244052_i64 >> _8;
_15.3 = 101_u8 ^ 36_u8;
_15.3 = _10 as u8;
_2 = !3611113360_u32;
_11.0 = [_13,_13];
_7 = _10 != _10;
_9 = _7;
_13 = 11151131941355408220_u64 << _6;
match _16 {
0 => bb5,
1 => bb6,
2 => bb7,
3 => bb8,
4 => bb9,
20758 => bb11,
_ => bb10
}
}
bb15 = {
_20 = &_16;
_1 = _5;
_15.3 = !64_u8;
Goto(bb16)
}
bb16 = {
_19 = 5270993771903488752_i64;
_13 = 3506589316129300518_u64 | 13597636729156512283_u64;
_19 = (-24663207230672092978833880959685474858_i128) as i64;
_21 = _15.0 as f32;
_15.3 = 42_u8 - 59_u8;
_22 = _8 as u8;
_22 = _21 as u8;
RET = core::ptr::addr_of_mut!(_23);
(*RET) = !1_usize;
_15.0 = _12.1 as u128;
_24 = (*_20) << _4;
_26 = !_15.3;
Goto(bb17)
}
bb17 = {
_15.2 = [15979_u16];
_21 = _6 as f32;
_8 = !_6;
_15.0 = 62865950066842179236206133153241957003_u128;
_17 = [_5,_1,_1,_1,_1,_1];
_17 = [_5,_1,_3,_1,_3,_5];
(*RET) = 9227188343909791746_usize;
match (*RET) {
9227188343909791746 => bb18,
_ => bb7
}
}
bb18 = {
RET = core::ptr::addr_of_mut!((*RET));
_29 = _19 as f32;
_23 = 17230536846767048875_usize & 16283222484607830975_usize;
(*RET) = 3_usize | 2618182338846462325_usize;
_25 = _19 as i128;
_15.2 = [328_u16];
(*RET) = 0_usize ^ 6_usize;
_28 = !_2;
_17 = [_3,_3,_5,_3,_3,_3];
(*RET) = _15.0 as usize;
_30 = _6 >> _24;
_17 = [_3,_3,_5,_3,_1,_5];
_2 = _28 + _28;
_17 = [_3,_3,_3,_3,_3,_3];
_15.2 = [8203_u16];
(*RET) = !11869865095647795331_usize;
(*RET) = 4821634696653105531_usize >> _6;
_16 = !_24;
(*RET) = !6_usize;
(*RET) = 1_usize;
_11.0 = [_13,_13];
(*RET) = 6_usize;
Goto(bb19)
}
bb19 = {
_18 = -_12.1;
_31 = _2 * _2;
match (*RET) {
0 => bb11,
1 => bb20,
2 => bb21,
3 => bb22,
6 => bb24,
_ => bb23
}
}
bb20 = {
RET = core::ptr::addr_of_mut!((*RET));
_29 = _19 as f32;
_23 = 17230536846767048875_usize & 16283222484607830975_usize;
(*RET) = 3_usize | 2618182338846462325_usize;
_25 = _19 as i128;
_15.2 = [328_u16];
(*RET) = 0_usize ^ 6_usize;
_28 = !_2;
_17 = [_3,_3,_5,_3,_3,_3];
(*RET) = _15.0 as usize;
_30 = _6 >> _24;
_17 = [_3,_3,_5,_3,_1,_5];
_2 = _28 + _28;
_17 = [_3,_3,_3,_3,_3,_3];
_15.2 = [8203_u16];
(*RET) = !11869865095647795331_usize;
(*RET) = 4821634696653105531_usize >> _6;
_16 = !_24;
(*RET) = !6_usize;
(*RET) = 1_usize;
_11.0 = [_13,_13];
(*RET) = 6_usize;
Goto(bb19)
}
bb21 = {
Return()
}
bb22 = {
_4 = -_6;
_3 = _5;
_12.0 = [160868414992732818510418256768108418557_u128,134713054229067651821356068014300784613_u128,20287155625994940606182637479997214199_u128,287886515052782758207566053582537574187_u128,8507126089354740284569995978386264556_u128];
Goto(bb4)
}
bb23 = {
_20 = &_16;
_1 = _5;
_15.3 = !64_u8;
Goto(bb16)
}
bb24 = {
(*RET) = 7407684035761159075_usize;
(*RET) = !5_usize;
_13 = 1060312853_i32 as u64;
_19 = _21 as i64;
_19 = !(-8624224808852318322_i64);
_15.1 = core::ptr::addr_of_mut!(_21);
_31 = _2 | _2;
_35.1 = core::ptr::addr_of!(_29);
_27 = [_26,_26,_26,_26,_15.3,_15.3,_15.3];
_33 = &_11.0;
_36 = _9;
_24 = 252_u16 as i16;
(*RET) = 3_usize * 4_usize;
_9 = _36 ^ _36;
(*RET) = _21 as usize;
_27 = [_15.3,_22,_26,_15.3,_22,_22,_22];
_6 = _30;
_30 = !_6;
_30 = _13 as isize;
Call((*RET) = core::intrinsics::bswap(8604740138403091267_usize), ReturnTo(bb25), UnwindUnreachable())
}
bb25 = {
_3 = _5;
_12.0 = [_15.0,_15.0,_15.0,_15.0,_15.0];
(*RET) = !3_usize;
_16 = _24;
(*RET) = !9499556314529699373_usize;
(*RET) = 5_usize;
(*RET) = _25 as usize;
_21 = -_29;
_34 = -_18;
(*RET) = 0_usize - 6682358856334014160_usize;
_22 = _26 << (*RET);
_1 = _5;
_31 = _13 as u32;
(*RET) = 4_usize;
Goto(bb26)
}
bb26 = {
_37 = core::ptr::addr_of!(_11);
_27[_23] = _21 as u8;
(*RET) = 3760096307106215170_usize + 1_usize;
_10 = _9 ^ _9;
RET = core::ptr::addr_of_mut!((*RET));
_42 = &mut _35.1;
_30 = _8 | _4;
_32 = core::ptr::addr_of!(_29);
(*_42) = Move(_32);
_15.2 = [4341_u16];
(*_42) = core::ptr::addr_of!(_21);
_1 = _5;
(*RET) = 40541_u16 as usize;
(*RET) = 0_usize | 1987708028584242668_usize;
_12.0 = [_15.0,_15.0,_15.0,_15.0,_15.0];
match _15.0 {
0 => bb15,
1 => bb9,
2 => bb21,
3 => bb12,
4 => bb17,
62865950066842179236206133153241957003 => bb27,
_ => bb23
}
}
bb27 = {
(*RET) = 7_usize + 3_usize;
_1 = _3;
(*RET) = 7783622523095695041_usize ^ 5229025449008020576_usize;
_15.0 = 51521976216822706286026027602688343656_u128 + 64559714334050444610594299886492865157_u128;
_36 = !_10;
_6 = _30 & _8;
_46 = (-1898073424_i32);
_1 = _3;
_48 = _6 ^ _6;
match _46 {
0 => bb1,
1 => bb24,
2 => bb3,
3 => bb9,
4 => bb14,
5 => bb10,
340282366920938463463374607429870138032 => bb29,
_ => bb28
}
}
bb28 = {
_15.2 = [15979_u16];
_21 = _6 as f32;
_8 = !_6;
_15.0 = 62865950066842179236206133153241957003_u128;
_17 = [_5,_1,_1,_1,_1,_1];
_17 = [_5,_1,_3,_1,_3,_5];
(*RET) = 9227188343909791746_usize;
match (*RET) {
9227188343909791746 => bb18,
_ => bb7
}
}
bb29 = {
_26 = _15.3 << _6;
(*_42) = core::ptr::addr_of!(_21);
(*RET) = _13 as usize;
(*RET) = 3_usize - 7383317790641098507_usize;
(*_42) = core::ptr::addr_of!(_21);
(*RET) = 2_usize + 10249542333636598001_usize;
match _46 {
0 => bb5,
340282366920938463463374607429870138032 => bb30,
_ => bb28
}
}
bb30 = {
(*RET) = 5_usize & 13924264418274193582_usize;
(*_42) = core::ptr::addr_of!(_21);
_46 = -961215834_i32;
(*RET) = 6_usize;
_39 = core::ptr::addr_of!(_21);
(*_42) = core::ptr::addr_of!((*_39));
(*_39) = _29 - _29;
(*_42) = Move(_39);
match (*RET) {
0 => bb9,
1 => bb10,
2 => bb24,
3 => bb11,
4 => bb25,
5 => bb6,
6 => bb31,
_ => bb20
}
}
bb31 = {
(*RET) = 0_usize;
_16 = _24;
_17[_23] = _5;
_15.0 = _12.0[_23] ^ _12.0[_23];
(*_42) = core::ptr::addr_of!(_21);
_49 = [_12.0[_23],_15.0,_12.0[_23],_15.0,_15.0,_12.0[_23],_12.0[_23],_15.0];
_10 = _36 > _36;
_52 = _19 | _19;
_14 = &_15.2[_23];
(*RET) = 5_usize * 4_usize;
_47 = [(*_14),(*_14),(*_14),(*_14),(*_14),(*_14)];
match (*_14) {
0 => bb3,
1 => bb11,
2 => bb32,
3 => bb33,
4 => bb34,
5 => bb35,
4341 => bb37,
_ => bb36
}
}
bb32 = {
(*RET) = 5_usize & 13924264418274193582_usize;
(*_42) = core::ptr::addr_of!(_21);
_46 = -961215834_i32;
(*RET) = 6_usize;
_39 = core::ptr::addr_of!(_21);
(*_42) = core::ptr::addr_of!((*_39));
(*_39) = _29 - _29;
(*_42) = Move(_39);
match (*RET) {
0 => bb9,
1 => bb10,
2 => bb24,
3 => bb11,
4 => bb25,
5 => bb6,
6 => bb31,
_ => bb20
}
}
bb33 = {
_4 = -_6;
_3 = _5;
_12.0 = [160868414992732818510418256768108418557_u128,134713054229067651821356068014300784613_u128,20287155625994940606182637479997214199_u128,287886515052782758207566053582537574187_u128,8507126089354740284569995978386264556_u128];
Goto(bb4)
}
bb34 = {
Return()
}
bb35 = {
RET = core::ptr::addr_of_mut!((*RET));
_29 = _19 as f32;
_23 = 17230536846767048875_usize & 16283222484607830975_usize;
(*RET) = 3_usize | 2618182338846462325_usize;
_25 = _19 as i128;
_15.2 = [328_u16];
(*RET) = 0_usize ^ 6_usize;
_28 = !_2;
_17 = [_3,_3,_5,_3,_3,_3];
(*RET) = _15.0 as usize;
_30 = _6 >> _24;
_17 = [_3,_3,_5,_3,_1,_5];
_2 = _28 + _28;
_17 = [_3,_3,_3,_3,_3,_3];
_15.2 = [8203_u16];
(*RET) = !11869865095647795331_usize;
(*RET) = 4821634696653105531_usize >> _6;
_16 = !_24;
(*RET) = !6_usize;
(*RET) = 1_usize;
_11.0 = [_13,_13];
(*RET) = 6_usize;
Goto(bb19)
}
bb36 = {
(*RET) = 7407684035761159075_usize;
(*RET) = !5_usize;
_13 = 1060312853_i32 as u64;
_19 = _21 as i64;
_19 = !(-8624224808852318322_i64);
_15.1 = core::ptr::addr_of_mut!(_21);
_31 = _2 | _2;
_35.1 = core::ptr::addr_of!(_29);
_27 = [_26,_26,_26,_26,_15.3,_15.3,_15.3];
_33 = &_11.0;
_36 = _9;
_24 = 252_u16 as i16;
(*RET) = 3_usize * 4_usize;
_9 = _36 ^ _36;
(*RET) = _21 as usize;
_27 = [_15.3,_22,_26,_15.3,_22,_22,_22];
_6 = _30;
_30 = !_6;
_30 = _13 as isize;
Call((*RET) = core::intrinsics::bswap(8604740138403091267_usize), ReturnTo(bb25), UnwindUnreachable())
}
bb37 = {
(*RET) = 5234948629226830970_usize;
(*RET) = 7_usize;
_6 = _48 & _48;
_39 = core::ptr::addr_of!(_21);
_29 = (*_39) + (*_39);
(*_39) = (*RET) as f32;
_40 = core::ptr::addr_of_mut!(_53);
(*_39) = _29 * _29;
_43 = !(*_14);
(*_39) = _29 + _29;
_52 = _19;
(*_39) = _29 * _29;
(*RET) = 0_usize | 4_usize;
_48 = _6 * _30;
_34 = _12.1 + _18;
(*_42) = core::ptr::addr_of!((*_39));
(*_39) = -_29;
_58 = _29;
Goto(bb38)
}
bb38 = {
(*_42) = core::ptr::addr_of!((*_39));
_15.2 = [_43];
Goto(bb39)
}
bb39 = {
(*RET) = _19 as usize;
_52 = _19;
_56 = _3;
(*_42) = core::ptr::addr_of!((*_39));
_32 = core::ptr::addr_of!((*_39));
(*_32) = _58 + _29;
(*RET) = 1_usize;
(*_39) = _58 + _58;
match _12.0[_23] {
0 => bb15,
1 => bb4,
2 => bb40,
62865950066842179236206133153241957003 => bb42,
_ => bb41
}
}
bb40 = {
_19 = 5270993771903488752_i64;
_13 = 3506589316129300518_u64 | 13597636729156512283_u64;
_19 = (-24663207230672092978833880959685474858_i128) as i64;
_21 = _15.0 as f32;
_15.3 = 42_u8 - 59_u8;
_22 = _8 as u8;
_22 = _21 as u8;
RET = core::ptr::addr_of_mut!(_23);
(*RET) = !1_usize;
_15.0 = _12.1 as u128;
_24 = (*_20) << _4;
_26 = !_15.3;
Goto(bb17)
}
bb41 = {
(*RET) = 7407684035761159075_usize;
(*RET) = !5_usize;
_13 = 1060312853_i32 as u64;
_19 = _21 as i64;
_19 = !(-8624224808852318322_i64);
_15.1 = core::ptr::addr_of_mut!(_21);
_31 = _2 | _2;
_35.1 = core::ptr::addr_of!(_29);
_27 = [_26,_26,_26,_26,_15.3,_15.3,_15.3];
_33 = &_11.0;
_36 = _9;
_24 = 252_u16 as i16;
(*RET) = 3_usize * 4_usize;
_9 = _36 ^ _36;
(*RET) = _21 as usize;
_27 = [_15.3,_22,_26,_15.3,_22,_22,_22];
_6 = _30;
_30 = !_6;
_30 = _13 as isize;
Call((*RET) = core::intrinsics::bswap(8604740138403091267_usize), ReturnTo(bb25), UnwindUnreachable())
}
bb42 = {
_63[_23] = _26 >> _26;
(*_42) = core::ptr::addr_of!((*_39));
_60 = &_16;
_48 = _6 + _8;
_65 = Move(_14);
(*_42) = Move(_39);
(*_42) = Move(_32);
_51 = _7;
_54 = _48;
(*RET) = !4_usize;
_61 = _2 & _28;
_51 = !_9;
_23 = 3_usize - 5407238222689890741_usize;
_43 = 37602_u16 + 54564_u16;
_27 = [_26,_26,_26,_26,_26,_26,_26];
_56 = _5;
Goto(bb43)
}
bb43 = {
_63 = [_26,_26,_26,_26];
(*RET) = 5_usize;
_64 = _13 & _13;
(*RET) = 14337759409013108899_usize & 3701627410737802928_usize;
(*RET) = _51 as usize;
_19 = -_52;
_68.0 = &mut (*_42);
_68.1.0 = [_15.0,_15.0,_15.0,_15.0,_15.0];
_68.1.1 = _18 + _12.1;
_15.3 = _26 - _26;
(*RET) = 3_usize;
_68.3 = _15.3 == _15.3;
_65 = &_47[_23];
_61 = (*RET) as u32;
(*RET) = 16323563552099220580_usize * 1_usize;
_39 = core::ptr::addr_of!(_58);
_63 = [_26,_15.3,_15.3,_15.3];
_17 = [_1,_1,_1,_5,_56,_1];
_13 = _64;
(*_39) = _21 - _21;
(*RET) = _52 as usize;
(*RET) = !1_usize;
_51 = _36 < _9;
_66 = [_56,_5,_5,_5,_5,_3];
(*RET) = 11465089798775198936_usize ^ 5_usize;
_11.0 = [_64,_13];
_58 = _12.1 as f32;
match (*_65) {
0 => bb39,
1 => bb25,
2 => bb16,
3 => bb20,
4 => bb44,
5 => bb45,
6 => bb46,
4341 => bb48,
_ => bb47
}
}
bb44 = {
Return()
}
bb45 = {
Return()
}
bb46 = {
Return()
}
bb47 = {
(*RET) = 5_usize & 13924264418274193582_usize;
(*_42) = core::ptr::addr_of!(_21);
_46 = -961215834_i32;
(*RET) = 6_usize;
_39 = core::ptr::addr_of!(_21);
(*_42) = core::ptr::addr_of!((*_39));
(*_39) = _29 - _29;
(*_42) = Move(_39);
match (*RET) {
0 => bb9,
1 => bb10,
2 => bb24,
3 => bb11,
4 => bb25,
5 => bb6,
6 => bb31,
_ => bb20
}
}
bb48 = {
_64 = _13 | _13;
(*_39) = (*_65) as f32;
_67 = [_68.3,_10];
_15.2 = [(*_65)];
_27 = [_15.3,_26,_15.3,_15.3,_15.3,_15.3,_15.3];
_41 = Adt60::Variant0 { fld0: _43 };
_40 = core::ptr::addr_of_mut!((*_40));
_14 = Move(_65);
_39 = core::ptr::addr_of!((*_39));
_18 = Field::<u16>(Variant(_41, 0), 0) as f64;
_70 = core::ptr::addr_of!(RET);
_28 = !_61;
_39 = core::ptr::addr_of!(_21);
_1 = _5;
(*_70) = core::ptr::addr_of_mut!((*RET));
(*_39) = -_29;
_54 = !_6;
_12 = _68.1;
_12.0 = _68.1.0;
_38 = core::ptr::addr_of_mut!((*_39));
(*_38) = _29;
(*_38) = (*RET) as f32;
_49 = [_15.0,_15.0,_15.0,_15.0,_15.0,_15.0,_15.0,_15.0];
(*_39) = _31 as f32;
_71 = _48 + _54;
_56 = _5;
place!(Field::<u16>(Variant(_41, 0), 0)) = _43;
(*_70) = core::ptr::addr_of_mut!((*RET));
Goto(bb49)
}
bb49 = {
(*RET) = 4446328263484563651_usize >> _30;
Goto(bb50)
}
bb50 = {
Call(_75 = dump_var(8_usize, 24_usize, Move(_24), 61_usize, Move(_61), 5_usize, Move(_5), 9_usize, Move(_9)), ReturnTo(bb51), UnwindUnreachable())
}
bb51 = {
Call(_75 = dump_var(8_usize, 6_usize, Move(_6), 23_usize, Move(_23), 26_usize, Move(_26), 51_usize, Move(_51)), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
Call(_75 = dump_var(8_usize, 2_usize, Move(_2), 31_usize, Move(_31), 67_usize, Move(_67), 10_usize, Move(_10)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Call(_75 = dump_var(8_usize, 71_usize, Move(_71), 11_usize, Move(_11), 8_usize, Move(_8), 1_usize, Move(_1)), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Call(_75 = dump_var(8_usize, 4_usize, Move(_4), 56_usize, Move(_56), 16_usize, Move(_16), 28_usize, Move(_28)), ReturnTo(bb55), UnwindUnreachable())
}
bb55 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn9(mut _1: isize,mut _2: char,mut _3: char,mut _4: isize,mut _5: char,mut _6: char,mut _7: char,mut _8: isize) -> [u64; 2] {
mir! {
type RET = [u64; 2];
let _9: &'static mut Adt62;
let _10: &'static mut (i8, usize, isize);
let _11: (&'static u16, u16, (i16, u32, f32, u8));
let _12: ((&'static mut *const f32, ([u128; 5], f64), *mut i64, bool), &'static mut i16);
let _13: ((&'static mut *const f32, ([u128; 5], f64), *mut i64, bool), &'static mut i16);
let _14: [u64; 6];
let _15: *mut *const [u64; 6];
let _16: char;
let _17: i64;
let _18: isize;
let _19: [bool; 2];
let _20: f32;
let _21: (bool, i16, i8, &'static mut i16);
let _22: &'static [u64; 2];
let _23: isize;
let _24: isize;
let _25: (u64,);
let _26: (&'static mut [u8; 3], i8, *mut i64, &'static u16);
let _27: char;
let _28: bool;
let _29: &'static mut (i8, usize, isize);
let _30: i8;
let _31: u64;
let _32: (u64,);
let _33: u128;
let _34: (i16, u32, f32, u8);
let _35: &'static mut [u64; 6];
let _36: [u64; 5];
let _37: &'static mut [u64; 6];
let _38: u8;
let _39: bool;
let _40: char;
let _41: char;
let _42: *const f32;
let _43: (char, (&'static mut *const f32, ([u128; 5], f64), *mut i64, bool), *mut u8);
let _44: Adt72;
let _45: (u128, *mut f32, [u16; 1], u8);
let _46: bool;
let _47: i64;
let _48: i8;
let _49: f64;
let _50: f32;
let _51: isize;
let _52: &'static f64;
let _53: &'static mut i32;
let _54: &'static mut Adt62;
let _55: &'static mut u128;
let _56: f64;
let _57: bool;
let _58: &'static mut Adt62;
let _59: (i16, u32, f32, u8);
let _60: &'static mut [u64; 6];
let _61: ([u128; 5], f64);
let _62: ();
let _63: ();
{
_8 = _4 * _4;
_8 = 1914078440998068685_u64 as isize;
_4 = !_1;
_2 = _6;
_1 = !_8;
_8 = _4 ^ _4;
RET = [15249809241347774058_u64,8447149509977207182_u64];
_4 = _1 >> _8;
_7 = _6;
_7 = _5;
_4 = !_8;
_4 = _8 | _1;
_8 = _1 - _4;
_2 = _7;
_3 = _6;
_8 = -_1;
_6 = _3;
_5 = _3;
_7 = _5;
_5 = _3;
RET = [9647794146423145351_u64,17624648310756209600_u64];
Call(_8 = fn10(_1, _5, _5, _1, _5, _2, _4, _2), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_5 = _3;
_1 = _8 ^ _8;
_6 = _5;
_8 = _1 << _1;
_7 = _3;
_8 = -_1;
_8 = _1;
_8 = _1;
_6 = _2;
_5 = _6;
_3 = _6;
_6 = _2;
_2 = _7;
Goto(bb2)
}
bb2 = {
_6 = _3;
_3 = _2;
_8 = _1;
_11.1 = 3381_u16;
_11.2.3 = 102_u8;
_11.2.2 = 8874_i16 as f32;
_11.2.1 = 304909179_u32 | 4156913801_u32;
_2 = _7;
_12.0.1.1 = 769286356_i32 as f64;
_5 = _6;
_12.0.3 = true | true;
RET = [12071562191772015616_u64,14100481715307131750_u64];
_3 = _5;
_12.0.3 = true;
match _11.1 {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
3381 => bb8,
_ => bb7
}
}
bb3 = {
_5 = _3;
_1 = _8 ^ _8;
_6 = _5;
_8 = _1 << _1;
_7 = _3;
_8 = -_1;
_8 = _1;
_8 = _1;
_6 = _2;
_5 = _6;
_3 = _6;
_6 = _2;
_2 = _7;
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_7 = _6;
_13.0.1.1 = _12.0.1.1;
_14 = [12208420645009168867_u64,485680711901046603_u64,1918254083067418091_u64,12665779617166655522_u64,2073090726427661283_u64,10305377482306929668_u64];
_13.0.3 = !_12.0.3;
_8 = _11.2.3 as isize;
_11.0 = &_11.1;
_13.0.1.0 = [57489761262744635240189017903732680390_u128,223532753562059983144658373151991901173_u128,258394440569146578006297733645000708878_u128,305926251060068563341093901609272971498_u128,54771383202954575762365325509283870737_u128];
_14 = [17728225728224488712_u64,12259429517925874936_u64,5301727195103041659_u64,9668349810719356159_u64,5269627471368472272_u64,3562149579737143840_u64];
_2 = _3;
match _11.2.3 {
0 => bb3,
1 => bb9,
2 => bb10,
3 => bb11,
4 => bb12,
5 => bb13,
6 => bb14,
102 => bb16,
_ => bb15
}
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
Return()
}
bb12 = {
Return()
}
bb13 = {
_5 = _3;
_1 = _8 ^ _8;
_6 = _5;
_8 = _1 << _1;
_7 = _3;
_8 = -_1;
_8 = _1;
_8 = _1;
_6 = _2;
_5 = _6;
_3 = _6;
_6 = _2;
_2 = _7;
Goto(bb2)
}
bb14 = {
_6 = _3;
_3 = _2;
_8 = _1;
_11.1 = 3381_u16;
_11.2.3 = 102_u8;
_11.2.2 = 8874_i16 as f32;
_11.2.1 = 304909179_u32 | 4156913801_u32;
_2 = _7;
_12.0.1.1 = 769286356_i32 as f64;
_5 = _6;
_12.0.3 = true | true;
RET = [12071562191772015616_u64,14100481715307131750_u64];
_3 = _5;
_12.0.3 = true;
match _11.1 {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
3381 => bb8,
_ => bb7
}
}
bb15 = {
_5 = _3;
_1 = _8 ^ _8;
_6 = _5;
_8 = _1 << _1;
_7 = _3;
_8 = -_1;
_8 = _1;
_8 = _1;
_6 = _2;
_5 = _6;
_3 = _6;
_6 = _2;
_2 = _7;
Goto(bb2)
}
bb16 = {
_11.2.2 = 79_i8 as f32;
_14 = [11845646828557966364_u64,14799655009285490236_u64,9824994371176892591_u64,8328094076025337987_u64,872054424527434945_u64,7893355950498793110_u64];
_12.0.1 = (_13.0.1.0, _13.0.1.1);
_13.0.1.0 = _12.0.1.0;
Call(_4 = fn11(Move(_11.0), _12.0.1, _12.0.1, _12.0.3, _11.1, _1, _2), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
_14 = [857918093500998547_u64,3619375794636523758_u64,11538406134694807469_u64,16274588642050106103_u64,3131383231973943977_u64,7530319825076172438_u64];
_14 = [16072190210083241131_u64,9403254762186569915_u64,3464667995743034003_u64,3768279494185850442_u64,7460967437766092020_u64,8192365290329621599_u64];
_12.0.1.1 = 30758_i16 as f64;
_16 = _7;
_12.0.3 = _13.0.1.1 >= _12.0.1.1;
_14 = [13967872101436304386_u64,3110126375930676485_u64,11774042787401697651_u64,15474514550373214102_u64,14133848061051478847_u64,6267200954180443611_u64];
_1 = -_4;
_13.0.2 = core::ptr::addr_of_mut!(_17);
_13.0.3 = !_12.0.3;
_6 = _2;
_5 = _6;
_12.0.1.0 = [260991331595688299335199666192209996663_u128,328487005656940366998916399419575109691_u128,55823471495364250398703027021945639167_u128,249586117379292966420596074623625082648_u128,257518990887269426276626828073898296061_u128];
_3 = _16;
_3 = _16;
_7 = _2;
_13.0.2 = core::ptr::addr_of_mut!(_17);
_17 = (-11_i8) as i64;
_4 = -_1;
_18 = _11.2.2 as isize;
_11.2.2 = _11.2.1 as f32;
_12.0.2 = core::ptr::addr_of_mut!(_17);
_12.0.3 = _13.0.3;
_19 = [_13.0.3,_13.0.3];
_20 = 10052_i16 as f32;
_13.0.3 = _12.0.3;
_12.0.1.1 = _13.0.1.1;
Goto(bb18)
}
bb18 = {
_12.0.3 = !_13.0.3;
_13.0.1.1 = _12.0.1.1 * _12.0.1.1;
_13.0.2 = core::ptr::addr_of_mut!(_17);
_11.2.1 = !1164385929_u32;
Goto(bb19)
}
bb19 = {
_11.2 = (10999_i16, 1542765503_u32, _20, 247_u8);
_5 = _3;
RET = [10861727999592104174_u64,6155847464858353320_u64];
_12.0.1.0 = [175622970913574474502109688982205763564_u128,311750027744221588372748500519587960205_u128,115725072487128025895381105811895838906_u128,191661176716034992319835131027154138440_u128,43629539557209312725257116550330490402_u128];
RET = [3511494782479231501_u64,13079515143060649939_u64];
_13.0.1 = (_12.0.1.0, _12.0.1.1);
_16 = _3;
_12.0.2 = core::ptr::addr_of_mut!(_17);
_12.1 = &mut _11.2.0;
_21.3 = Move(_12.1);
_21.0 = _12.0.3 | _13.0.3;
_13.0.1.0 = [298077031142349931454596827352984037323_u128,248193825373931054004332171671179730718_u128,271288821687388525390869410818094965990_u128,57405306765264386834005756015023093690_u128,173748425385826043016175291358311277302_u128];
_6 = _2;
_20 = _12.0.1.1 as f32;
_4 = _1 * _1;
Call(_21.1 = fn12(Move(_12.0.2), _12.0.3, _5), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
_12.0.1.1 = _20 as f64;
_20 = 42405_u16 as f32;
_26.1 = -(-43_i8);
_3 = _16;
_20 = 186_u8 as f32;
_13.0.1 = (_12.0.1.0, _12.0.1.1);
_12.0.1.1 = -_13.0.1.1;
_22 = &RET;
_4 = _1 ^ _1;
_31 = 10817630857390048949_u64 + 1440157752544205790_u64;
_26.1 = 17510440560494520074_usize as i8;
_7 = _5;
Goto(bb21)
}
bb21 = {
_17 = _20 as i64;
_30 = _26.1 ^ _26.1;
_25.0 = (-277344756_i32) as u64;
_13.1 = &mut _21.1;
_23 = _31 as isize;
_12.1 = Move(_13.1);
_12.0.1 = (_13.0.1.0, _13.0.1.1);
_7 = _16;
_12.0.2 = core::ptr::addr_of_mut!(_17);
_25.0 = _31 | _31;
_8 = 894282968_u32 as isize;
Goto(bb22)
}
bb22 = {
_14 = [_31,_31,_25.0,_31,_25.0,_25.0];
_7 = _5;
_34.2 = _20 + _20;
_32 = _25;
_38 = 11_u8;
_28 = _13.0.3;
_34.3 = _38;
_3 = _7;
_16 = _7;
RET = [_25.0,_25.0];
_23 = _4 ^ _4;
_5 = _3;
_18 = _23;
_13.0.2 = core::ptr::addr_of_mut!(_17);
_26.2 = core::ptr::addr_of_mut!(_17);
_34 = (8198_i16, 872334638_u32, _20, _38);
_12.0.1.0 = [70705613502423075285092481531785450397_u128,12581838231129018322404178229854796772_u128,265896651282572947976290122225517301286_u128,301266144010910529938324746961739305362_u128,55969696768938913948038395306507516799_u128];
match _34.0 {
0 => bb6,
1 => bb2,
8198 => bb23,
_ => bb5
}
}
bb23 = {
_24 = _18 ^ _1;
_34.2 = _20;
_35 = &mut _14;
_34.0 = 15714_i16 & (-9520_i16);
(*_35) = [_25.0,_25.0,_31,_32.0,_31,_25.0];
_25.0 = _34.3 as u64;
_19 = [_12.0.3,_28];
(*_35) = [_32.0,_32.0,_32.0,_32.0,_31,_32.0];
_40 = _2;
_12.0.1.1 = _13.0.1.1 + _13.0.1.1;
(*_35) = [_32.0,_31,_31,_32.0,_32.0,_31];
_18 = _34.1 as isize;
_13.0.1.0 = [46158439245545771027089054076738824016_u128,7690877229059580817586801055011492726_u128,140091232475754201966663183767164375708_u128,192665703138472849049752018016555908139_u128,229567413256038268090692161294957944181_u128];
(*_35) = [_32.0,_32.0,_32.0,_32.0,_32.0,_32.0];
_34.2 = _20 - _20;
_23 = 14029_u16 as isize;
(*_35) = [_25.0,_32.0,_32.0,_32.0,_31,_32.0];
_26.2 = core::ptr::addr_of_mut!(_17);
_34.0 = (-24877_i16) << _4;
_25 = _32;
match _38 {
0 => bb24,
1 => bb25,
2 => bb26,
3 => bb27,
4 => bb28,
11 => bb30,
_ => bb29
}
}
bb24 = {
_5 = _3;
_1 = _8 ^ _8;
_6 = _5;
_8 = _1 << _1;
_7 = _3;
_8 = -_1;
_8 = _1;
_8 = _1;
_6 = _2;
_5 = _6;
_3 = _6;
_6 = _2;
_2 = _7;
Goto(bb2)
}
bb25 = {
Return()
}
bb26 = {
_6 = _3;
_3 = _2;
_8 = _1;
_11.1 = 3381_u16;
_11.2.3 = 102_u8;
_11.2.2 = 8874_i16 as f32;
_11.2.1 = 304909179_u32 | 4156913801_u32;
_2 = _7;
_12.0.1.1 = 769286356_i32 as f64;
_5 = _6;
_12.0.3 = true | true;
RET = [12071562191772015616_u64,14100481715307131750_u64];
_3 = _5;
_12.0.3 = true;
match _11.1 {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
3381 => bb8,
_ => bb7
}
}
bb27 = {
Return()
}
bb28 = {
_12.0.3 = !_13.0.3;
_13.0.1.1 = _12.0.1.1 * _12.0.1.1;
_13.0.2 = core::ptr::addr_of_mut!(_17);
_11.2.1 = !1164385929_u32;
Goto(bb19)
}
bb29 = {
_14 = [857918093500998547_u64,3619375794636523758_u64,11538406134694807469_u64,16274588642050106103_u64,3131383231973943977_u64,7530319825076172438_u64];
_14 = [16072190210083241131_u64,9403254762186569915_u64,3464667995743034003_u64,3768279494185850442_u64,7460967437766092020_u64,8192365290329621599_u64];
_12.0.1.1 = 30758_i16 as f64;
_16 = _7;
_12.0.3 = _13.0.1.1 >= _12.0.1.1;
_14 = [13967872101436304386_u64,3110126375930676485_u64,11774042787401697651_u64,15474514550373214102_u64,14133848061051478847_u64,6267200954180443611_u64];
_1 = -_4;
_13.0.2 = core::ptr::addr_of_mut!(_17);
_13.0.3 = !_12.0.3;
_6 = _2;
_5 = _6;
_12.0.1.0 = [260991331595688299335199666192209996663_u128,328487005656940366998916399419575109691_u128,55823471495364250398703027021945639167_u128,249586117379292966420596074623625082648_u128,257518990887269426276626828073898296061_u128];
_3 = _16;
_3 = _16;
_7 = _2;
_13.0.2 = core::ptr::addr_of_mut!(_17);
_17 = (-11_i8) as i64;
_4 = -_1;
_18 = _11.2.2 as isize;
_11.2.2 = _11.2.1 as f32;
_12.0.2 = core::ptr::addr_of_mut!(_17);
_12.0.3 = _13.0.3;
_19 = [_13.0.3,_13.0.3];
_20 = 10052_i16 as f32;
_13.0.3 = _12.0.3;
_12.0.1.1 = _13.0.1.1;
Goto(bb18)
}
bb30 = {
_8 = !_24;
Goto(bb31)
}
bb31 = {
(*_35) = [_31,_32.0,_25.0,_32.0,_32.0,_32.0];
_41 = _5;
_24 = _8 + _1;
Goto(bb32)
}
bb32 = {
_38 = !_34.3;
(*_35) = [_31,_31,_25.0,_32.0,_25.0,_31];
_17 = 806116357409754594_i64 >> _24;
(*_35) = [_25.0,_32.0,_25.0,_32.0,_25.0,_32.0];
match _34.3 {
0 => bb27,
1 => bb18,
2 => bb33,
3 => bb34,
4 => bb35,
11 => bb37,
_ => bb36
}
}
bb33 = {
_14 = [_31,_31,_25.0,_31,_25.0,_25.0];
_7 = _5;
_34.2 = _20 + _20;
_32 = _25;
_38 = 11_u8;
_28 = _13.0.3;
_34.3 = _38;
_3 = _7;
_16 = _7;
RET = [_25.0,_25.0];
_23 = _4 ^ _4;
_5 = _3;
_18 = _23;
_13.0.2 = core::ptr::addr_of_mut!(_17);
_26.2 = core::ptr::addr_of_mut!(_17);
_34 = (8198_i16, 872334638_u32, _20, _38);
_12.0.1.0 = [70705613502423075285092481531785450397_u128,12581838231129018322404178229854796772_u128,265896651282572947976290122225517301286_u128,301266144010910529938324746961739305362_u128,55969696768938913948038395306507516799_u128];
match _34.0 {
0 => bb6,
1 => bb2,
8198 => bb23,
_ => bb5
}
}
bb34 = {
Return()
}
bb35 = {
_5 = _3;
_1 = _8 ^ _8;
_6 = _5;
_8 = _1 << _1;
_7 = _3;
_8 = -_1;
_8 = _1;
_8 = _1;
_6 = _2;
_5 = _6;
_3 = _6;
_6 = _2;
_2 = _7;
Goto(bb2)
}
bb36 = {
Return()
}
bb37 = {
(*_35) = [_25.0,_32.0,_25.0,_32.0,_31,_32.0];
(*_35) = [_32.0,_25.0,_25.0,_25.0,_32.0,_31];
_12.0.1.0 = _13.0.1.0;
_34.2 = _20 * _20;
RET = [_25.0,_32.0];
_23 = _4 | _1;
_5 = _6;
match _34.1 {
0 => bb36,
1 => bb38,
2 => bb39,
3 => bb40,
872334638 => bb42,
_ => bb41
}
}
bb38 = {
Return()
}
bb39 = {
Return()
}
bb40 = {
_11.2.2 = 79_i8 as f32;
_14 = [11845646828557966364_u64,14799655009285490236_u64,9824994371176892591_u64,8328094076025337987_u64,872054424527434945_u64,7893355950498793110_u64];
_12.0.1 = (_13.0.1.0, _13.0.1.1);
_13.0.1.0 = _12.0.1.0;
Call(_4 = fn11(Move(_11.0), _12.0.1, _12.0.1, _12.0.3, _11.1, _1, _2), ReturnTo(bb17), UnwindUnreachable())
}
bb41 = {
Return()
}
bb42 = {
(*_35) = [_25.0,_25.0,_25.0,_32.0,_31,_25.0];
_36 = [_31,_25.0,_31,_25.0,_32.0];
_33 = 13699_u16 as u128;
(*_35) = [_31,_32.0,_25.0,_31,_32.0,_31];
_34.1 = 2147975287_u32;
_12.0.3 = _24 == _1;
(*_35) = [_32.0,_32.0,_32.0,_25.0,_25.0,_25.0];
(*_35) = [_32.0,_25.0,_32.0,_32.0,_25.0,_31];
(*_35) = [_25.0,_25.0,_25.0,_32.0,_25.0,_25.0];
match _34.3 {
0 => bb29,
1 => bb37,
2 => bb38,
11 => bb43,
_ => bb20
}
}
bb43 = {
_38 = _34.3;
_43.2 = core::ptr::addr_of_mut!(_45.3);
_13.0.1.1 = 198399976_i32 as f64;
_39 = _12.0.3;
(*_35) = [_32.0,_32.0,_32.0,_25.0,_32.0,_31];
(*_35) = [_31,_31,_25.0,_25.0,_32.0,_32.0];
_18 = _4 ^ _8;
_43.1.1.1 = _13.0.1.1 - _12.0.1.1;
(*_35) = [_25.0,_31,_31,_32.0,_32.0,_32.0];
_5 = _16;
Goto(bb44)
}
bb44 = {
(*_35) = [_25.0,_25.0,_31,_25.0,_32.0,_25.0];
_38 = _34.3 << _24;
_43.0 = _5;
_45.0 = !_33;
_19 = [_39,_12.0.3];
(*_35) = [_32.0,_25.0,_25.0,_32.0,_31,_32.0];
(*_35) = [_32.0,_31,_25.0,_32.0,_32.0,_32.0];
_23 = !_8;
_32 = (_25.0,);
(*_35) = [_32.0,_32.0,_31,_25.0,_32.0,_32.0];
_1 = _18;
(*_35) = [_32.0,_32.0,_32.0,_31,_31,_25.0];
_34 = ((-28173_i16), 3074328647_u32, _20, _38);
_31 = _25.0 - _32.0;
(*_35) = [_25.0,_31,_31,_25.0,_31,_31];
_13.0.1.0 = _12.0.1.0;
_13.0.1.1 = _43.1.1.1 - _43.1.1.1;
_18 = _24;
_43.1.1 = (_13.0.1.0, _13.0.1.1);
Goto(bb45)
}
bb45 = {
_13.0.1.0 = [_45.0,_33,_45.0,_33,_45.0];
_42 = core::ptr::addr_of!(_50);
_30 = _26.1 - _26.1;
_45.3 = !_34.3;
_5 = _40;
(*_35) = [_32.0,_32.0,_32.0,_32.0,_31,_25.0];
_43.1.2 = core::ptr::addr_of_mut!(_47);
_51 = _18 | _24;
_49 = _13.0.1.1 - _13.0.1.1;
_16 = _2;
_13.0.0 = &mut _42;
_33 = _45.0;
(*_35) = [_31,_31,_32.0,_31,_32.0,_31];
(*_35) = [_25.0,_31,_31,_31,_31,_31];
(*_35) = [_25.0,_31,_31,_32.0,_25.0,_32.0];
_43.1.1 = (_13.0.1.0, _13.0.1.1);
_45.1 = core::ptr::addr_of_mut!(_34.2);
_37 = &mut (*_35);
_31 = _25.0;
(*_37) = [_31,_25.0,_32.0,_25.0,_25.0,_25.0];
(*_37) = [_25.0,_31,_31,_32.0,_31,_25.0];
match _34.0 {
0 => bb46,
1 => bb47,
2 => bb48,
3 => bb49,
340282366920938463463374607431768183283 => bb51,
_ => bb50
}
}
bb46 = {
(*_35) = [_25.0,_25.0,_31,_25.0,_32.0,_25.0];
_38 = _34.3 << _24;
_43.0 = _5;
_45.0 = !_33;
_19 = [_39,_12.0.3];
(*_35) = [_32.0,_25.0,_25.0,_32.0,_31,_32.0];
(*_35) = [_32.0,_31,_25.0,_32.0,_32.0,_32.0];
_23 = !_8;
_32 = (_25.0,);
(*_35) = [_32.0,_32.0,_31,_25.0,_32.0,_32.0];
_1 = _18;
(*_35) = [_32.0,_32.0,_32.0,_31,_31,_25.0];
_34 = ((-28173_i16), 3074328647_u32, _20, _38);
_31 = _25.0 - _32.0;
(*_35) = [_25.0,_31,_31,_25.0,_31,_31];
_13.0.1.0 = _12.0.1.0;
_13.0.1.1 = _43.1.1.1 - _43.1.1.1;
_18 = _24;
_43.1.1 = (_13.0.1.0, _13.0.1.1);
Goto(bb45)
}
bb47 = {
_7 = _6;
_13.0.1.1 = _12.0.1.1;
_14 = [12208420645009168867_u64,485680711901046603_u64,1918254083067418091_u64,12665779617166655522_u64,2073090726427661283_u64,10305377482306929668_u64];
_13.0.3 = !_12.0.3;
_8 = _11.2.3 as isize;
_11.0 = &_11.1;
_13.0.1.0 = [57489761262744635240189017903732680390_u128,223532753562059983144658373151991901173_u128,258394440569146578006297733645000708878_u128,305926251060068563341093901609272971498_u128,54771383202954575762365325509283870737_u128];
_14 = [17728225728224488712_u64,12259429517925874936_u64,5301727195103041659_u64,9668349810719356159_u64,5269627471368472272_u64,3562149579737143840_u64];
_2 = _3;
match _11.2.3 {
0 => bb3,
1 => bb9,
2 => bb10,
3 => bb11,
4 => bb12,
5 => bb13,
6 => bb14,
102 => bb16,
_ => bb15
}
}
bb48 = {
_8 = !_24;
Goto(bb31)
}
bb49 = {
_12.0.3 = !_13.0.3;
_13.0.1.1 = _12.0.1.1 * _12.0.1.1;
_13.0.2 = core::ptr::addr_of_mut!(_17);
_11.2.1 = !1164385929_u32;
Goto(bb19)
}
bb50 = {
_14 = [857918093500998547_u64,3619375794636523758_u64,11538406134694807469_u64,16274588642050106103_u64,3131383231973943977_u64,7530319825076172438_u64];
_14 = [16072190210083241131_u64,9403254762186569915_u64,3464667995743034003_u64,3768279494185850442_u64,7460967437766092020_u64,8192365290329621599_u64];
_12.0.1.1 = 30758_i16 as f64;
_16 = _7;
_12.0.3 = _13.0.1.1 >= _12.0.1.1;
_14 = [13967872101436304386_u64,3110126375930676485_u64,11774042787401697651_u64,15474514550373214102_u64,14133848061051478847_u64,6267200954180443611_u64];
_1 = -_4;
_13.0.2 = core::ptr::addr_of_mut!(_17);
_13.0.3 = !_12.0.3;
_6 = _2;
_5 = _6;
_12.0.1.0 = [260991331595688299335199666192209996663_u128,328487005656940366998916399419575109691_u128,55823471495364250398703027021945639167_u128,249586117379292966420596074623625082648_u128,257518990887269426276626828073898296061_u128];
_3 = _16;
_3 = _16;
_7 = _2;
_13.0.2 = core::ptr::addr_of_mut!(_17);
_17 = (-11_i8) as i64;
_4 = -_1;
_18 = _11.2.2 as isize;
_11.2.2 = _11.2.1 as f32;
_12.0.2 = core::ptr::addr_of_mut!(_17);
_12.0.3 = _13.0.3;
_19 = [_13.0.3,_13.0.3];
_20 = 10052_i16 as f32;
_13.0.3 = _12.0.3;
_12.0.1.1 = _13.0.1.1;
Goto(bb18)
}
bb51 = {
_47 = _17 | _17;
_41 = _7;
_52 = &_49;
_12.1 = &mut _34.0;
_27 = _41;
_13.1 = Move(_12.1);
_36 = [_31,_31,_25.0,_32.0,_25.0];
_1 = -_4;
_57 = _4 < _4;
(*_37) = [_31,_31,_25.0,_31,_31,_31];
_25 = (_32.0,);
(*_37) = [_25.0,_31,_32.0,_25.0,_32.0,_32.0];
_45.0 = _33 & _33;
(*_37) = [_32.0,_25.0,_31,_25.0,_32.0,_31];
_7 = _43.0;
_16 = _27;
_43.1.3 = _18 > _8;
_43.1.3 = _12.0.3;
_13.0.1.1 = (*_52) - (*_52);
_48 = _26.1 | _26.1;
_1 = _45.3 as isize;
_16 = _7;
_13.0.2 = Move(_43.1.2);
Goto(bb52)
}
bb52 = {
Call(_62 = dump_var(9_usize, 5_usize, Move(_5), 38_usize, Move(_38), 32_usize, Move(_32), 33_usize, Move(_33)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Call(_62 = dump_var(9_usize, 51_usize, Move(_51), 40_usize, Move(_40), 25_usize, Move(_25), 36_usize, Move(_36)), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Call(_62 = dump_var(9_usize, 17_usize, Move(_17), 1_usize, Move(_1), 23_usize, Move(_23), 8_usize, Move(_8)), ReturnTo(bb55), UnwindUnreachable())
}
bb55 = {
Call(_62 = dump_var(9_usize, 6_usize, Move(_6), 57_usize, Move(_57), 14_usize, Move(_14), 63_usize, _63), ReturnTo(bb56), UnwindUnreachable())
}
bb56 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn10(mut _1: isize,mut _2: char,mut _3: char,mut _4: isize,mut _5: char,mut _6: char,mut _7: isize,mut _8: char) -> isize {
mir! {
type RET = isize;
let _9: i128;
let _10: i16;
let _11: *const ([u64; 2],);
let _12: &'static mut i32;
let _13: [u8; 4];
let _14: f64;
let _15: ([u64; 2],);
let _16: &'static f64;
let _17: (u128, *mut f32, [u16; 1], u8);
let _18: bool;
let _19: ();
let _20: ();
{
_4 = -_7;
_6 = _3;
_6 = _3;
_6 = _3;
_4 = 269_i16 as isize;
RET = _7;
RET = _7 & _7;
_5 = _3;
RET = _7 + _4;
RET = 1097614472_u32 as isize;
_3 = _2;
Goto(bb1)
}
bb1 = {
_1 = _2 as isize;
_3 = _6;
_9 = (-36640388013324482726129922687089878909_i128);
_1 = _7 | RET;
_3 = _2;
_10 = (-16129_i16);
RET = -_1;
_4 = _7;
_5 = _2;
_10 = 31016_i16;
_13 = [17_u8,41_u8,100_u8,102_u8];
_13 = [128_u8,92_u8,47_u8,117_u8];
_9 = 106980156257719047100291278884919412950_i128 + 85298018958292994902760655210678600978_i128;
_2 = _6;
_13 = [226_u8,210_u8,249_u8,103_u8];
_6 = _5;
match _10 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
31016 => bb7,
_ => bb6
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
_5 = _2;
_2 = _3;
Goto(bb8)
}
bb8 = {
_4 = -_7;
_7 = RET;
_14 = (-1341302929266873800_i64) as f64;
_10 = 8880_i16 & 30263_i16;
_13 = [76_u8,129_u8,169_u8,136_u8];
_5 = _3;
RET = 182_u8 as isize;
_6 = _5;
_14 = _10 as f64;
_10 = (-12575_i16) - 24922_i16;
_5 = _6;
Goto(bb9)
}
bb9 = {
_3 = _8;
RET = _7 << _9;
_16 = &_14;
_6 = _8;
_4 = _7 << _7;
_11 = core::ptr::addr_of!(_15);
Goto(bb10)
}
bb10 = {
(*_11).0 = [12554953434466292257_u64,10436404734665296541_u64];
_17.0 = 217107242028867483398407550041260868870_u128 << _4;
(*_11).0 = [15076575008211078430_u64,2991334036915205701_u64];
(*_11).0 = [3519110637188507889_u64,393270545241580703_u64];
(*_11).0 = [5317986645923138066_u64,11097351527399801788_u64];
Goto(bb11)
}
bb11 = {
_18 = !true;
_2 = _3;
RET = _4 & _1;
Goto(bb12)
}
bb12 = {
Call(_19 = dump_var(10_usize, 7_usize, Move(_7), 1_usize, Move(_1), 4_usize, Move(_4), 15_usize, Move(_15)), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
Call(_19 = dump_var(10_usize, 13_usize, Move(_13), 2_usize, Move(_2), 20_usize, _20, 20_usize, _20), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn11(mut _1: &'static u16,mut _2: ([u128; 5], f64),mut _3: ([u128; 5], f64),mut _4: bool,mut _5: u16,mut _6: isize,mut _7: char) -> isize {
mir! {
type RET = isize;
let _8: *const *mut usize;
let _9: isize;
let _10: ();
let _11: ();
{
_5 = 8440_i16 as u16;
_1 = &_5;
RET = _6;
_2.1 = _3.1;
RET = _6 + _6;
_3.1 = _2.1;
_6 = RET ^ RET;
_5 = 53446_u16 | 2163_u16;
_2.0 = _3.0;
_3 = _2;
_2.0 = [160041684653410873990546168401075728940_u128,180942059762361506692893634645869097262_u128,252916363992715086835462336880842050516_u128,49880111191508351245183762735113644398_u128,271320077136548876648006768258137009697_u128];
_3.0 = _2.0;
_6 = RET | RET;
_9 = _6;
_2.0 = [130419592982306821342359037491573287163_u128,313537752084834661609634158958964324019_u128,229110481565118337929422481353354692399_u128,99576731306984242898679173784767177499_u128,161924869584829280714462678909991917119_u128];
_2.1 = _3.1 * _3.1;
_2.1 = (-1188132005_i32) as f64;
_3.1 = _2.1 * _2.1;
Goto(bb1)
}
bb1 = {
Call(_10 = dump_var(11_usize, 6_usize, Move(_6), 7_usize, Move(_7), 11_usize, _11, 11_usize, _11), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn12(mut _1: *mut i64,mut _2: bool,mut _3: char) -> i16 {
mir! {
type RET = i16;
let _4: *mut usize;
let _5: isize;
let _6: i64;
let _7: bool;
let _8: f32;
let _9: f64;
let _10: i64;
let _11: (bool, i16, i8, &'static mut i16);
let _12: [u32; 1];
let _13: usize;
let _14: *mut f32;
let _15: Adt43;
let _16: Adt81;
let _17: char;
let _18: &'static mut &'static f64;
let _19: [u128; 8];
let _20: [u16; 6];
let _21: f64;
let _22: u128;
let _23: u8;
let _24: *mut *const f32;
let _25: isize;
let _26: isize;
let _27: u64;
let _28: Adt60;
let _29: f64;
let _30: f32;
let _31: &'static mut &'static f64;
let _32: isize;
let _33: isize;
let _34: *mut &'static u16;
let _35: isize;
let _36: isize;
let _37: isize;
let _38: (&'static mut i16, i64, [u64; 2], [u8; 3]);
let _39: f32;
let _40: char;
let _41: &'static mut u128;
let _42: [u64; 5];
let _43: *mut f32;
let _44: i128;
let _45: u32;
let _46: *mut &'static u16;
let _47: &'static mut [u8; 3];
let _48: (&'static mut i16, i64, [u64; 2], [u8; 3]);
let _49: &'static [u64; 2];
let _50: u8;
let _51: *mut &'static u16;
let _52: *mut *const f32;
let _53: &'static mut i32;
let _54: i16;
let _55: f64;
let _56: &'static mut &'static f64;
let _57: *mut &'static u16;
let _58: isize;
let _59: *mut f32;
let _60: i16;
let _61: f32;
let _62: isize;
let _63: &'static mut *const f32;
let _64: &'static i8;
let _65: &'static i16;
let _66: bool;
let _67: u32;
let _68: f64;
let _69: bool;
let _70: *mut &'static mut i16;
let _71: char;
let _72: i16;
let _73: isize;
let _74: (&'static mut [u8; 3], i8, *mut i64, &'static u16);
let _75: [u128; 8];
let _76: [char; 6];
let _77: [u64; 5];
let _78: isize;
let _79: [char; 6];
let _80: &'static mut Adt62;
let _81: bool;
let _82: f64;
let _83: char;
let _84: *mut usize;
let _85: (i8, usize, isize);
let _86: f64;
let _87: isize;
let _88: ();
let _89: ();
{
RET = (-31741_i16);
_5 = 88896640278958311056923821377626925016_u128 as isize;
_3 = '\u{103422}';
_5 = -(-9223372036854775808_isize);
RET = !13838_i16;
_3 = '\u{4f95}';
_3 = '\u{fa322}';
_3 = '\u{63ddd}';
RET = (-21396_i16) - (-32105_i16);
_6 = 6599903513045025949_u64 as i64;
_5 = (-60_isize) | 9223372036854775807_isize;
_5 = (-9223372036854775808_isize);
_3 = '\u{2e31}';
_3 = '\u{1099ec}';
RET = 157570110625280175978509229355021206444_i128 as i16;
_1 = core::ptr::addr_of_mut!(_6);
(*_1) = !1989642337751540811_i64;
(*_1) = (-3261675281385036737_i64) ^ (-6020902409459840126_i64);
(*_1) = 3980039624591643769_i64 ^ (-8146712431097245004_i64);
(*_1) = 3871558555761749110_i64 >> _5;
_5 = 6006801714803386876_u64 as isize;
(*_1) = (-604482969217916342_i64);
(*_1) = (-6269167795027317570_i64);
match (*_1) {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
340282366920938463457105439636740893886 => bb6,
_ => bb5
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
(*_1) = (-4876895216850025925_i64);
(*_1) = (-4619407839828988152_i64);
(*_1) = -(-1963370772067166634_i64);
(*_1) = -1929841438141205500_i64;
(*_1) = 4685805706012849828_i64 * 4115145229998180186_i64;
_5 = (-115_i8) as isize;
_3 = '\u{906c3}';
_6 = !2885117424673370381_i64;
(*_1) = (-7056408694388272331_i64);
_2 = false;
(*_1) = !(-61844118625988926_i64);
(*_1) = !8887345098936383047_i64;
(*_1) = (-2076261801553614390_i64) << RET;
Goto(bb7)
}
bb7 = {
_7 = !_2;
(*_1) = 3756518740835978438_i64;
_7 = _2;
(*_1) = -(-6157874186590675907_i64);
RET = !(-14623_i16);
(*_1) = 6030524494513854155_i64 >> RET;
(*_1) = !1054897673606165096_i64;
(*_1) = -(-9079741898328026934_i64);
(*_1) = (-168864338465369004430534173675049942550_i128) as i64;
(*_1) = (-768603415_i32) as i64;
_5 = (-9223372036854775808_isize);
_8 = (-16_i8) as f32;
(*_1) = (-2860450392678372961_i64) << _5;
_5 = 9223372036854775807_isize >> (*_1);
_6 = (-1118287066_i32) as i64;
_9 = _5 as f64;
(*_1) = _8 as i64;
(*_1) = (-5780966605764905833_i64) ^ 8599017070475872727_i64;
(*_1) = 4517542328882048525_i64 & (-8679381400832584772_i64);
(*_1) = 6322690051583020482_i64;
(*_1) = 2447765278317652965_i64;
_11.0 = (*_1) <= (*_1);
(*_1) = 2608094429198845012_i64;
(*_1) = 7800297852933269551_i64 << RET;
_11.2 = (-21_i8) >> _6;
Call((*_1) = fn13(RET, _3, Move(_1), _7, _11.2, RET, _2, _7, _7, _9), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
_3 = '\u{118ed}';
_1 = core::ptr::addr_of_mut!(_6);
Goto(bb9)
}
bb9 = {
(*_1) = (-6234166168944564208_i64) * (-6303921318973670242_i64);
_4 = core::ptr::addr_of_mut!(_13);
Goto(bb10)
}
bb10 = {
_11.2 = 69_i8 >> (*_1);
(*_1) = (-2861917953831899518_i64);
(*_4) = 0_usize >> (*_1);
_10 = (*_1) & (*_1);
(*_1) = _8 as i64;
(*_4) = !2_usize;
(*_1) = _11.2 as i64;
_11.3 = &mut RET;
(*_4) = 5336_i16 as usize;
(*_1) = _10;
(*_1) = _10 ^ _10;
_12 = [3035801395_u32];
(*_4) = 13356_u16 as usize;
(*_4) = 2457259805141372976_usize;
(*_4) = !3_usize;
(*_1) = -_10;
(*_4) = 6946566823373182048_usize + 9421213384651986837_usize;
_6 = _10 << (*_4);
_10 = (*_1) | (*_1);
(*_4) = 122293216042679469488065619602142745801_i128 as usize;
(*_4) = 6_usize;
_14 = core::ptr::addr_of_mut!(_8);
(*_1) = _10 ^ _10;
(*_1) = _10 * _10;
match (*_4) {
0 => bb9,
1 => bb4,
2 => bb5,
6 => bb12,
_ => bb11
}
}
bb11 = {
Return()
}
bb12 = {
(*_14) = (-113403909641185605244250514852016283203_i128) as f32;
_11.1 = -8036_i16;
(*_14) = _11.1 as f32;
(*_4) = 1_usize;
(*_14) = 1875933610_u32 as f32;
_20[_13] = 9348_u16 - 37578_u16;
_19 = [179511878549893310310455019044575495600_u128,213421790317336747018381508819453418640_u128,299759288378555673911002915679121002688_u128,224633107129853122008146321394566149879_u128,166594801363081578805995618775983514753_u128,73067445898009974491613655523881223364_u128,21984394329155901815474688414295135149_u128,243914795409488954239520162014585279794_u128];
_20 = [36744_u16,35147_u16,32948_u16,34048_u16,851_u16,12502_u16];
(*_14) = (*_4) as f32;
(*_14) = 4161221089_u32 as f32;
(*_1) = _10 - _10;
(*_1) = _10 | _10;
_3 = '\u{9c4f6}';
(*_1) = !_10;
_16.fld0.0 = !_2;
(*_14) = _11.2 as f32;
(*_4) = 4_usize;
Goto(bb13)
}
bb13 = {
(*_14) = _5 as f32;
_10 = -_6;
(*_4) = 2_usize * 13552563345454312661_usize;
(*_1) = _11.2 as i64;
(*_1) = -_10;
(*_4) = 9814337644317118875_usize >> _6;
(*_1) = _10 + _10;
(*_14) = 276525257904941668468899733461015309960_u128 as f32;
_6 = _10 + _10;
_14 = core::ptr::addr_of_mut!((*_14));
_14 = core::ptr::addr_of_mut!((*_14));
_16.fld0.0 = !_11.0;
_4 = core::ptr::addr_of_mut!((*_4));
(*_4) = 3_usize + 5849774114049266044_usize;
Goto(bb14)
}
bb14 = {
(*_14) = _11.2 as f32;
(*_4) = 6_usize & 8396752388762994502_usize;
(*_4) = 14504296218648007160_usize << (*_1);
(*_1) = _10 ^ _10;
_16.fld1 = (*_1) << (*_1);
_26 = 28124_u16 as isize;
(*_1) = _10 << (*_4);
(*_4) = 1_usize;
_13 = 11268557090983992701_usize | 4344579892962414666_usize;
(*_4) = _11.0 as usize;
(*_1) = !_16.fld1;
_25 = _5 * _26;
(*_1) = _16.fld1 * _16.fld1;
(*_4) = 13302602637761267973_usize | 1_usize;
Goto(bb15)
}
bb15 = {
(*_4) = 7_usize + 11755065196118197427_usize;
_3 = '\u{f5f9b}';
_17 = _3;
_16.fld0.0 = _11.0;
_30 = -(*_14);
_28 = Adt60::Variant0 { fld0: 12652_u16 };
(*_14) = -_30;
_16.fld0.0 = (*_1) <= (*_1);
_12 = [3120282536_u32];
_2 = !_16.fld0.0;
(*_14) = _30 - _30;
(*_4) = 15663780031409940552_usize;
_16.fld0.1 = (*_14);
(*_1) = _16.fld1;
_8 = _16.fld0.1 - _16.fld0.1;
_27 = !13034942797177276082_u64;
(*_14) = _16.fld0.1 - _16.fld0.1;
(*_4) = 6_usize >> _6;
(*_14) = _30;
_8 = _16.fld0.1 - _16.fld0.1;
(*_14) = _16.fld0.1 - _16.fld0.1;
(*_1) = _27 as i64;
(*_4) = 2_usize;
(*_4) = 12737163749554221412_usize;
_22 = !171469906016982503449796083625609945967_u128;
_16.fld3 = _11.1 as u16;
match (*_4) {
0 => bb1,
1 => bb7,
2 => bb14,
3 => bb8,
4 => bb16,
12737163749554221412 => bb18,
_ => bb17
}
}
bb16 = {
(*_14) = _11.2 as f32;
(*_4) = 6_usize & 8396752388762994502_usize;
(*_4) = 14504296218648007160_usize << (*_1);
(*_1) = _10 ^ _10;
_16.fld1 = (*_1) << (*_1);
_26 = 28124_u16 as isize;
(*_1) = _10 << (*_4);
(*_4) = 1_usize;
_13 = 11268557090983992701_usize | 4344579892962414666_usize;
(*_4) = _11.0 as usize;
(*_1) = !_16.fld1;
_25 = _5 * _26;
(*_1) = _16.fld1 * _16.fld1;
(*_4) = 13302602637761267973_usize | 1_usize;
Goto(bb15)
}
bb17 = {
_11.2 = 69_i8 >> (*_1);
(*_1) = (-2861917953831899518_i64);
(*_4) = 0_usize >> (*_1);
_10 = (*_1) & (*_1);
(*_1) = _8 as i64;
(*_4) = !2_usize;
(*_1) = _11.2 as i64;
_11.3 = &mut RET;
(*_4) = 5336_i16 as usize;
(*_1) = _10;
(*_1) = _10 ^ _10;
_12 = [3035801395_u32];
(*_4) = 13356_u16 as usize;
(*_4) = 2457259805141372976_usize;
(*_4) = !3_usize;
(*_1) = -_10;
(*_4) = 6946566823373182048_usize + 9421213384651986837_usize;
_6 = _10 << (*_4);
_10 = (*_1) | (*_1);
(*_4) = 122293216042679469488065619602142745801_i128 as usize;
(*_4) = 6_usize;
_14 = core::ptr::addr_of_mut!(_8);
(*_1) = _10 ^ _10;
(*_1) = _10 * _10;
match (*_4) {
0 => bb9,
1 => bb4,
2 => bb5,
6 => bb12,
_ => bb11
}
}
bb18 = {
(*_1) = _16.fld1 | _10;
_22 = 162920552454854846840857480107205654715_u128 >> (*_1);
(*_14) = _16.fld0.1 * _30;
_19 = [_22,_22,_22,_22,_22,_22,_22,_22];
(*_1) = _16.fld1 << _22;
(*_4) = 16245558670424475794_usize >> (*_1);
_21 = (-167258959762599462049650881068052359854_i128) as f64;
_2 = !_16.fld0.0;
(*_14) = _11.1 as f32;
Call((*_1) = core::intrinsics::transmute((*_4)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
_27 = 1252542543892296331_u64 & 17702116879183325612_u64;
_9 = _21 - _21;
(*_1) = (*_14) as i64;
(*_14) = _16.fld0.1 * _30;
(*_1) = (*_14) as i64;
(*_1) = _16.fld1 << (*_4);
(*_4) = 1_usize;
(*_1) = -_16.fld1;
Goto(bb20)
}
bb20 = {
(*_1) = _16.fld1 >> _22;
(*_1) = -_16.fld1;
(*_4) = _5 as usize;
_8 = _30;
(*_4) = !4597582143482252287_usize;
(*_4) = 13854397261160464323_usize - 6_usize;
(*_14) = -_16.fld0.1;
_29 = _21;
(*_1) = _16.fld1 ^ _16.fld1;
_30 = (*_14) + (*_14);
(*_4) = !6_usize;
_21 = _9;
(*_14) = _16.fld0.1 - _30;
(*_4) = 6_usize;
match (*_4) {
0 => bb17,
1 => bb7,
2 => bb4,
3 => bb21,
4 => bb22,
5 => bb23,
6 => bb25,
_ => bb24
}
}
bb21 = {
_27 = 1252542543892296331_u64 & 17702116879183325612_u64;
_9 = _21 - _21;
(*_1) = (*_14) as i64;
(*_14) = _16.fld0.1 * _30;
(*_1) = (*_14) as i64;
(*_1) = _16.fld1 << (*_4);
(*_4) = 1_usize;
(*_1) = -_16.fld1;
Goto(bb20)
}
bb22 = {
(*_4) = 7_usize + 11755065196118197427_usize;
_3 = '\u{f5f9b}';
_17 = _3;
_16.fld0.0 = _11.0;
_30 = -(*_14);
_28 = Adt60::Variant0 { fld0: 12652_u16 };
(*_14) = -_30;
_16.fld0.0 = (*_1) <= (*_1);
_12 = [3120282536_u32];
_2 = !_16.fld0.0;
(*_14) = _30 - _30;
(*_4) = 15663780031409940552_usize;
_16.fld0.1 = (*_14);
(*_1) = _16.fld1;
_8 = _16.fld0.1 - _16.fld0.1;
_27 = !13034942797177276082_u64;
(*_14) = _16.fld0.1 - _16.fld0.1;
(*_4) = 6_usize >> _6;
(*_14) = _30;
_8 = _16.fld0.1 - _16.fld0.1;
(*_14) = _16.fld0.1 - _16.fld0.1;
(*_1) = _27 as i64;
(*_4) = 2_usize;
(*_4) = 12737163749554221412_usize;
_22 = !171469906016982503449796083625609945967_u128;
_16.fld3 = _11.1 as u16;
match (*_4) {
0 => bb1,
1 => bb7,
2 => bb14,
3 => bb8,
4 => bb16,
12737163749554221412 => bb18,
_ => bb17
}
}
bb23 = {
_11.2 = 69_i8 >> (*_1);
(*_1) = (-2861917953831899518_i64);
(*_4) = 0_usize >> (*_1);
_10 = (*_1) & (*_1);
(*_1) = _8 as i64;
(*_4) = !2_usize;
(*_1) = _11.2 as i64;
_11.3 = &mut RET;
(*_4) = 5336_i16 as usize;
(*_1) = _10;
(*_1) = _10 ^ _10;
_12 = [3035801395_u32];
(*_4) = 13356_u16 as usize;
(*_4) = 2457259805141372976_usize;
(*_4) = !3_usize;
(*_1) = -_10;
(*_4) = 6946566823373182048_usize + 9421213384651986837_usize;
_6 = _10 << (*_4);
_10 = (*_1) | (*_1);
(*_4) = 122293216042679469488065619602142745801_i128 as usize;
(*_4) = 6_usize;
_14 = core::ptr::addr_of_mut!(_8);
(*_1) = _10 ^ _10;
(*_1) = _10 * _10;
match (*_4) {
0 => bb9,
1 => bb4,
2 => bb5,
6 => bb12,
_ => bb11
}
}
bb24 = {
(*_1) = (-6234166168944564208_i64) * (-6303921318973670242_i64);
_4 = core::ptr::addr_of_mut!(_13);
Goto(bb10)
}
bb25 = {
(*_14) = _30;
_30 = (*_14) * (*_14);
(*_14) = -_30;
(*_14) = _30 - _30;
Call(_38.2 = core::intrinsics::transmute(_19[_13]), ReturnTo(bb26), UnwindUnreachable())
}
bb26 = {
(*_14) = _30;
(*_14) = _16.fld0.1 * _30;
_35 = _5 >> (*_1);
_6 = !_16.fld1;
(*_4) = !13604457666122823706_usize;
(*_14) = _30 * _30;
(*_14) = -_16.fld0.1;
(*_14) = (*_1) as f32;
place!(Field::<u16>(Variant(_28, 0), 0)) = _16.fld3 + _16.fld3;
_41 = &mut _22;
(*_14) = _16.fld0.1;
_16.fld2.0 = [_27,_27];
(*_14) = _30 + _30;
_21 = _29 + _29;
(*_41) = !223211932468472109345256936956782525085_u128;
_43 = Move(_14);
_37 = (*_4) as isize;
_7 = (*_1) == (*_1);
(*_4) = _30 as usize;
(*_41) = 115973985376248671537607107723999118610_u128;
_14 = core::ptr::addr_of_mut!(_16.fld0.1);
_38.0 = &mut _11.1;
_35 = _37 * _5;
(*_41) = _21 as u128;
Goto(bb27)
}
bb27 = {
(*_1) = _16.fld1 << (*_41);
(*_41) = 269853369405072247709288288535844438797_u128;
(*_1) = _10 & _10;
_4 = core::ptr::addr_of_mut!((*_4));
_5 = -_37;
(*_14) = _8;
(*_41) = (-60_i8) as u128;
(*_41) = 214949978137295906088438125286077408514_u128;
_42 = [_27,_27,_27,_27,_27];
(*_14) = _8 - _8;
(*_1) = _16.fld1 * _10;
(*_4) = (*_1) as usize;
(*_41) = 31969436250017437684524835660808665575_u128 >> (*_1);
(*_41) = !279171214740038393333293529761937175960_u128;
_17 = _3;
(*_4) = 2_usize & 14420664446248507169_usize;
_33 = _26;
(*_4) = 5_usize;
(*_1) = _16.fld1;
(*_14) = _30;
_30 = (*_14) - (*_14);
Goto(bb28)
}
bb28 = {
_19[_13] = (*_1) as u128;
_17 = _3;
(*_4) = 0_usize;
match (*_4) {
1 => bb18,
2 => bb29,
0 => bb31,
_ => bb30
}
}
bb29 = {
(*_14) = (-113403909641185605244250514852016283203_i128) as f32;
_11.1 = -8036_i16;
(*_14) = _11.1 as f32;
(*_4) = 1_usize;
(*_14) = 1875933610_u32 as f32;
_20[_13] = 9348_u16 - 37578_u16;
_19 = [179511878549893310310455019044575495600_u128,213421790317336747018381508819453418640_u128,299759288378555673911002915679121002688_u128,224633107129853122008146321394566149879_u128,166594801363081578805995618775983514753_u128,73067445898009974491613655523881223364_u128,21984394329155901815474688414295135149_u128,243914795409488954239520162014585279794_u128];
_20 = [36744_u16,35147_u16,32948_u16,34048_u16,851_u16,12502_u16];
(*_14) = (*_4) as f32;
(*_14) = 4161221089_u32 as f32;
(*_1) = _10 - _10;
(*_1) = _10 | _10;
_3 = '\u{9c4f6}';
(*_1) = !_10;
_16.fld0.0 = !_2;
(*_14) = _11.2 as f32;
(*_4) = 4_usize;
Goto(bb13)
}
bb30 = {
Return()
}
bb31 = {
(*_14) = _30 + _8;
(*_14) = _8;
(*_14) = _30 + _8;
_37 = _17 as isize;
_48.2[_13] = !_38.2[_13];
_48.2 = [_38.2[_13],_38.2[_13]];
(*_1) = -_16.fld1;
(*_1) = _10;
Goto(bb32)
}
bb32 = {
(*_4) = 9330620787183119841_usize;
(*_14) = _30 + _8;
(*_4) = 5_usize + 14486640958982128787_usize;
_7 = (*_14) != (*_14);
(*_1) = _16.fld1 & _16.fld1;
_27 = !4539122137733472517_u64;
_42 = [_27,_27,_27,_27,_27];
(*_41) = Field::<u16>(Variant(_28, 0), 0) as u128;
_3 = _17;
(*_41) = 210733424572449518133402544284152563581_u128 | 195198353744321976438481508870334523386_u128;
_48.2 = [_27,_27];
_38.3 = [150_u8,210_u8,229_u8];
(*_41) = !287522400179775921855265247810149550827_u128;
_30 = -(*_14);
(*_4) = 2_usize & 4_usize;
_48 = (Move(_38.0), (*_1), _38.2, _38.3);
(*_4) = 7245_i16 as usize;
(*_41) = !214235094420830855468710111106601000918_u128;
(*_41) = (-2157_i16) as u128;
Goto(bb33)
}
bb33 = {
(*_1) = _48.1 & _16.fld1;
_40 = _17;
(*_14) = _27 as f32;
_48.2 = _38.2;
(*_4) = 1381260661934093592_usize ^ 5_usize;
(*_1) = _27 as i64;
_32 = _25;
_32 = _33 >> _48.1;
_39 = _30 * _30;
(*_14) = _39 - _30;
Goto(bb34)
}
bb34 = {
_2 = _16.fld0.0 | _7;
(*_4) = 14374476577176932849_usize;
(*_1) = _48.1 & _16.fld1;
(*_1) = !_48.1;
_2 = !_16.fld0.0;
(*_14) = _21 as f32;
(*_1) = _16.fld1;
(*_1) = _16.fld1 - _48.1;
_44 = _9 as i128;
(*_1) = _48.1 ^ _48.1;
_42 = [_27,_27,_27,_27,_27];
(*_14) = _39 + _39;
_6 = _48.1;
_27 = 14171803208834745929_u64 ^ 11218018439654193893_u64;
_48.1 = (*_1);
_38.1 = -(*_1);
(*_41) = 315889662848180752306104752783678461473_u128 ^ 265767854549249782338146691151046970302_u128;
(*_4) = 5_usize;
_19[_13] = Field::<u16>(Variant(_28, 0), 0) as u128;
(*_14) = _44 as f32;
(*_4) = 13722603769077598655_usize | 6_usize;
(*_1) = (*_4) as i64;
(*_4) = !6_usize;
_30 = _8;
_33 = _32;
_48.2 = _38.2;
_45 = !1763702616_u32;
_3 = _40;
Call(_38.1 = core::intrinsics::bswap((*_1)), ReturnTo(bb35), UnwindUnreachable())
}
bb35 = {
(*_4) = 2_usize << _32;
(*_14) = _39;
(*_4) = 10144251882626306405_usize - 3103775621950541093_usize;
(*_4) = 3_usize;
_43 = Move(_14);
(*_41) = _19[_13];
(*_41) = _19[_13];
_38.1 = _48.1 | _16.fld1;
_50 = 74_u8 | 127_u8;
(*_41) = !_19[_13];
(*_4) = _45 as usize;
_27 = (*_41) as u64;
(*_1) = -_38.1;
_10 = !(*_1);
_9 = _29 + _29;
_19 = [(*_41),(*_41),(*_41),(*_41),(*_41),(*_41),(*_41),(*_41)];
_49 = &_16.fld2.0;
(*_1) = _38.1 & _48.1;
_21 = 8_i8 as f64;
_35 = _33 & _32;
(*_41) = 33592718256912168042111850689411446414_u128;
(*_1) = -_38.1;
_8 = _39;
_16.fld2.0 = [_27,_27];
match (*_41) {
0 => bb36,
33592718256912168042111850689411446414 => bb38,
_ => bb37
}
}
bb36 = {
_19[_13] = (*_1) as u128;
_17 = _3;
(*_4) = 0_usize;
match (*_4) {
1 => bb18,
2 => bb29,
0 => bb31,
_ => bb30
}
}
bb37 = {
(*_14) = _30;
_30 = (*_14) * (*_14);
(*_14) = -_30;
(*_14) = _30 - _30;
Call(_38.2 = core::intrinsics::transmute(_19[_13]), ReturnTo(bb26), UnwindUnreachable())
}
bb38 = {
(*_41) = 39789285320541379675779692693824454471_u128 + 289479125328683218932143819514567049469_u128;
_55 = _9 * _9;
_14 = core::ptr::addr_of_mut!(_8);
(*_14) = _30 - _16.fld0.1;
_38.1 = -(*_1);
Goto(bb39)
}
bb39 = {
_14 = core::ptr::addr_of_mut!((*_14));
_23 = !_50;
(*_41) = 540930215636809184071324565826601871_u128 >> (*_1);
_58 = _32 - _32;
(*_4) = 12986644783189267931_usize;
(*_1) = _44 as i64;
_40 = _3;
(*_4) = _40 as usize;
(*_1) = !_38.1;
(*_4) = !4_usize;
_49 = &_48.2;
(*_14) = _30;
_14 = Move(_43);
(*_1) = _44 as i64;
(*_4) = 5721103060061845651_usize & 0_usize;
_50 = !_23;
(*_4) = 7888307267111333893_usize;
_27 = !17350849575155842467_u64;
_16.fld2.0 = [_27,_27];
(*_4) = 4_usize;
_40 = _17;
(*_1) = -_10;
(*_4) = !4334751107170873569_usize;
Call((*_4) = core::intrinsics::transmute((*_1)), ReturnTo(bb40), UnwindUnreachable())
}
bb40 = {
(*_4) = 6_usize + 10391823969829100614_usize;
(*_4) = 5_usize;
_55 = (-868180370_i32) as f64;
_61 = _8 * _39;
(*_41) = !_19[_13];
_21 = _55 + _9;
(*_4) = !1214635604028815227_usize;
_62 = _58 - _33;
(*_4) = 2_usize;
(*_4) = _48.3[_13] as usize;
(*_41) = !193384574113522702931551121667840207834_u128;
(*_1) = _16.fld1;
_38.1 = _10 >> (*_1);
_2 = _16.fld0.0 | _7;
(*_1) = _10 + _10;
(*_1) = -_48.1;
_7 = !_2;
_9 = _21 * _21;
(*_4) = 18843_i16 as usize;
_45 = !2822558376_u32;
_3 = _40;
_48.1 = (*_1) ^ (*_1);
Goto(bb41)
}
bb41 = {
_1 = core::ptr::addr_of_mut!((*_1));
_23 = !_50;
_48.3 = [_23,_50,_23];
(*_4) = _44 as usize;
Goto(bb42)
}
bb42 = {
Goto(bb43)
}
bb43 = {
_16.fld3 = Field::<u16>(Variant(_28, 0), 0) << _33;
_13 = 17754078276811112211_usize << (*_1);
(*_4) = 4_usize >> _58;
Goto(bb44)
}
bb44 = {
(*_1) = _10 - _10;
_49 = &_38.2;
(*_41) = !143514036733231181850263804622551672726_u128;
(*_1) = _38.1;
_49 = &_48.2;
_67 = !_45;
_60 = (*_1) as i16;
_69 = _2;
_12 = [_67];
(*_4) = 14404354246474950084_usize | 7_usize;
_65 = &_60;
(*_41) = 83374228634197881192033003597582476746_u128 ^ 336527017435463701565869398458672117460_u128;
(*_41) = 20725578608358356644416623889375774156_u128 + 172869910254253976781529282401726424183_u128;
_45 = !_67;
(*_41) = 223762516231675132562729069550204347020_u128;
_32 = _62;
_74.3 = &place!(Field::<u16>(Variant(_28, 0), 0));
_16.fld1 = (*_1);
_1 = core::ptr::addr_of_mut!((*_1));
_74.0 = &mut _38.3;
(*_1) = !_16.fld1;
_48.3 = [_50,_23,_50];
match (*_41) {
0 => bb1,
1 => bb18,
2 => bb27,
3 => bb45,
4 => bb46,
223762516231675132562729069550204347020 => bb48,
_ => bb47
}
}
bb45 = {
Return()
}
bb46 = {
(*_14) = (-113403909641185605244250514852016283203_i128) as f32;
_11.1 = -8036_i16;
(*_14) = _11.1 as f32;
(*_4) = 1_usize;
(*_14) = 1875933610_u32 as f32;
_20[_13] = 9348_u16 - 37578_u16;
_19 = [179511878549893310310455019044575495600_u128,213421790317336747018381508819453418640_u128,299759288378555673911002915679121002688_u128,224633107129853122008146321394566149879_u128,166594801363081578805995618775983514753_u128,73067445898009974491613655523881223364_u128,21984394329155901815474688414295135149_u128,243914795409488954239520162014585279794_u128];
_20 = [36744_u16,35147_u16,32948_u16,34048_u16,851_u16,12502_u16];
(*_14) = (*_4) as f32;
(*_14) = 4161221089_u32 as f32;
(*_1) = _10 - _10;
(*_1) = _10 | _10;
_3 = '\u{9c4f6}';
(*_1) = !_10;
_16.fld0.0 = !_2;
(*_14) = _11.2 as f32;
(*_4) = 4_usize;
Goto(bb13)
}
bb47 = {
_19[_13] = (*_1) as u128;
_17 = _3;
(*_4) = 0_usize;
match (*_4) {
1 => bb18,
2 => bb29,
0 => bb31,
_ => bb30
}
}
bb48 = {
_33 = _62 >> (*_65);
_73 = _16.fld3 as isize;
_68 = -_55;
_54 = _50 as i16;
_60 = _9 as i16;
_12 = [_45];
_58 = _32;
_77 = _42;
_44 = (-162167328112405224798714606681559191375_i128) ^ (-159153804883077959626022531874860138014_i128);
(*_41) = 330261636976199397139604133565460651127_u128;
_71 = _40;
(*_1) = _16.fld0.1 as i64;
(*_41) = !11090543116138382333167420147393902484_u128;
_4 = core::ptr::addr_of_mut!((*_4));
_51 = core::ptr::addr_of_mut!(_74.3);
_55 = _9 - _68;
_25 = _32;
_47 = &mut _48.3;
(*_41) = 213914492583758205244887372667030167102_u128 << _62;
Goto(bb49)
}
bb49 = {
(*_41) = !80410105407043612262680236635829594635_u128;
(*_41) = 58629468705303374139600591246728025915_u128 & 227398455138007711004141770132546279327_u128;
(*_41) = _13 as u128;
(*_41) = 188484252689552846433143493953765532263_u128 << (*_1);
(*_1) = -_16.fld1;
_74.1 = (-99_i8) & 77_i8;
_72 = _60;
(*_51) = &_16.fld3;
Goto(bb50)
}
bb50 = {
Call(_88 = dump_var(12_usize, 26_usize, Move(_26), 73_usize, Move(_73), 62_usize, Move(_62), 10_usize, Move(_10)), ReturnTo(bb51), UnwindUnreachable())
}
bb51 = {
Call(_88 = dump_var(12_usize, 2_usize, Move(_2), 54_usize, Move(_54), 13_usize, Move(_13), 23_usize, Move(_23)), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
Call(_88 = dump_var(12_usize, 19_usize, Move(_19), 69_usize, Move(_69), 77_usize, Move(_77), 58_usize, Move(_58)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Call(_88 = dump_var(12_usize, 37_usize, Move(_37), 32_usize, Move(_32), 17_usize, Move(_17), 71_usize, Move(_71)), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Call(_88 = dump_var(12_usize, 5_usize, Move(_5), 89_usize, _89, 89_usize, _89, 89_usize, _89), ReturnTo(bb55), UnwindUnreachable())
}
bb55 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn13(mut _1: i16,mut _2: char,mut _3: *mut i64,mut _4: bool,mut _5: i8,mut _6: i16,mut _7: bool,mut _8: bool,mut _9: bool,mut _10: f64) -> i64 {
mir! {
type RET = i64;
let _11: f32;
let _12: f64;
let _13: (*const ([u64; 2],), *const f32);
let _14: *mut &'static u16;
let _15: f32;
let _16: isize;
let _17: (u64,);
let _18: isize;
let _19: isize;
let _20: *const f32;
let _21: *const ([u128; 5], f64);
let _22: [u32; 1];
let _23: &'static mut [u8; 3];
let _24: *mut i64;
let _25: u16;
let _26: [u32; 1];
let _27: u32;
let _28: (u128, *mut f32, [u16; 1], u8);
let _29: isize;
let _30: u128;
let _31: (bool, f32, Adt43);
let _32: f32;
let _33: f64;
let _34: *mut Adt43;
let _35: isize;
let _36: &'static mut Adt62;
let _37: [u128; 5];
let _38: &'static mut &'static f64;
let _39: f32;
let _40: &'static mut [u8; 3];
let _41: isize;
let _42: &'static f64;
let _43: bool;
let _44: f32;
let _45: f64;
let _46: i64;
let _47: (bool, i16, i8, &'static mut i16);
let _48: &'static [u64; 2];
let _49: *mut Adt43;
let _50: isize;
let _51: isize;
let _52: isize;
let _53: char;
let _54: ();
let _55: ();
{
_1 = _6 - _6;
_1 = 4_usize as i16;
_4 = !_8;
_10 = 2116410600346006169_usize as f64;
_6 = _1 + _1;
_10 = 1410520670_u32 as f64;
_7 = _8;
_4 = _5 <= _5;
_8 = _9 <= _4;
Goto(bb1)
}
bb1 = {
_12 = -_10;
_13.1 = core::ptr::addr_of!(_11);
_2 = '\u{98984}';
RET = (-1237042784564951364_i64) | (-8314912071934740720_i64);
_10 = -_12;
_7 = _4 <= _4;
_10 = _12 * _12;
Goto(bb2)
}
bb2 = {
_4 = _7;
_2 = '\u{dd938}';
_13.1 = core::ptr::addr_of!(_11);
_15 = 38089_u16 as f32;
Goto(bb3)
}
bb3 = {
_11 = 263496546_i32 as f32;
_12 = _10;
_13.1 = core::ptr::addr_of!(_15);
_8 = !_4;
_11 = _15 - _15;
_7 = _8;
_12 = _10 * _10;
_6 = -_1;
_12 = -_10;
_2 = '\u{7ae97}';
_15 = -_11;
_9 = _7 <= _8;
_13.1 = core::ptr::addr_of!(_15);
_2 = '\u{ca595}';
_10 = _12 + _12;
_2 = '\u{4d188}';
_3 = core::ptr::addr_of_mut!(RET);
Call((*_3) = fn14(Move(_3), Move(_13.1), _6, _9, _15, _11, _7, _8, _1, _2, _4, _15), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_2 = '\u{61f89}';
_10 = _12 - _12;
_10 = 12671039184398848103_usize as f64;
_17.0 = 10189411857047296495_u64;
_18 = _5 as isize;
_3 = core::ptr::addr_of_mut!(RET);
(*_3) = 5254827634588401267_i64;
_8 = _9;
(*_3) = -(-7324773004140147161_i64);
(*_3) = (-6189063454736134276_i64);
(*_3) = 2074893295734914460_i64;
(*_3) = (-9199325610592158464_i64);
_16 = _18 + _18;
_5 = -(-14_i8);
_9 = _4 & _4;
(*_3) = 7020291198977860371_i64 * 8367375377829720942_i64;
RET = _6 as i64;
_19 = _16;
RET = 4903181574983662194_i64 - (-4371731936664964201_i64);
_13.1 = core::ptr::addr_of!(_15);
_20 = core::ptr::addr_of!(_15);
(*_20) = _11 * _11;
(*_3) = (-7906330683837938992_i64) << _16;
_13.1 = core::ptr::addr_of!((*_20));
(*_20) = -_11;
_20 = Move(_13.1);
Goto(bb5)
}
bb5 = {
_9 = _8 ^ _8;
_5 = !(-119_i8);
(*_3) = 182_u8 as i64;
_12 = _10 - _10;
(*_3) = _5 as i64;
(*_3) = -3813914797930019085_i64;
_11 = 48_u8 as f32;
_10 = _12 - _12;
match _17.0 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb6,
4 => bb7,
5 => bb8,
6 => bb9,
10189411857047296495 => bb11,
_ => bb10
}
}
bb6 = {
_2 = '\u{61f89}';
_10 = _12 - _12;
_10 = 12671039184398848103_usize as f64;
_17.0 = 10189411857047296495_u64;
_18 = _5 as isize;
_3 = core::ptr::addr_of_mut!(RET);
(*_3) = 5254827634588401267_i64;
_8 = _9;
(*_3) = -(-7324773004140147161_i64);
(*_3) = (-6189063454736134276_i64);
(*_3) = 2074893295734914460_i64;
(*_3) = (-9199325610592158464_i64);
_16 = _18 + _18;
_5 = -(-14_i8);
_9 = _4 & _4;
(*_3) = 7020291198977860371_i64 * 8367375377829720942_i64;
RET = _6 as i64;
_19 = _16;
RET = 4903181574983662194_i64 - (-4371731936664964201_i64);
_13.1 = core::ptr::addr_of!(_15);
_20 = core::ptr::addr_of!(_15);
(*_20) = _11 * _11;
(*_3) = (-7906330683837938992_i64) << _16;
_13.1 = core::ptr::addr_of!((*_20));
(*_20) = -_11;
_20 = Move(_13.1);
Goto(bb5)
}
bb7 = {
_11 = 263496546_i32 as f32;
_12 = _10;
_13.1 = core::ptr::addr_of!(_15);
_8 = !_4;
_11 = _15 - _15;
_7 = _8;
_12 = _10 * _10;
_6 = -_1;
_12 = -_10;
_2 = '\u{7ae97}';
_15 = -_11;
_9 = _7 <= _8;
_13.1 = core::ptr::addr_of!(_15);
_2 = '\u{ca595}';
_10 = _12 + _12;
_2 = '\u{4d188}';
_3 = core::ptr::addr_of_mut!(RET);
Call((*_3) = fn14(Move(_3), Move(_13.1), _6, _9, _15, _11, _7, _8, _1, _2, _4, _15), ReturnTo(bb4), UnwindUnreachable())
}
bb8 = {
_4 = _7;
_2 = '\u{dd938}';
_13.1 = core::ptr::addr_of!(_11);
_15 = 38089_u16 as f32;
Goto(bb3)
}
bb9 = {
_12 = -_10;
_13.1 = core::ptr::addr_of!(_11);
_2 = '\u{98984}';
RET = (-1237042784564951364_i64) | (-8314912071934740720_i64);
_10 = -_12;
_7 = _4 <= _4;
_10 = _12 * _12;
Goto(bb2)
}
bb10 = {
Return()
}
bb11 = {
(*_3) = _9 as i64;
(*_3) = (-8609426706738122068_i64);
match (*_3) {
0 => bb12,
1 => bb13,
2 => bb14,
3 => bb15,
4 => bb16,
5 => bb17,
340282366920938463454765180725030089388 => bb19,
_ => bb18
}
}
bb12 = {
_11 = 263496546_i32 as f32;
_12 = _10;
_13.1 = core::ptr::addr_of!(_15);
_8 = !_4;
_11 = _15 - _15;
_7 = _8;
_12 = _10 * _10;
_6 = -_1;
_12 = -_10;
_2 = '\u{7ae97}';
_15 = -_11;
_9 = _7 <= _8;
_13.1 = core::ptr::addr_of!(_15);
_2 = '\u{ca595}';
_10 = _12 + _12;
_2 = '\u{4d188}';
_3 = core::ptr::addr_of_mut!(RET);
Call((*_3) = fn14(Move(_3), Move(_13.1), _6, _9, _15, _11, _7, _8, _1, _2, _4, _15), ReturnTo(bb4), UnwindUnreachable())
}
bb13 = {
_12 = -_10;
_13.1 = core::ptr::addr_of!(_11);
_2 = '\u{98984}';
RET = (-1237042784564951364_i64) | (-8314912071934740720_i64);
_10 = -_12;
_7 = _4 <= _4;
_10 = _12 * _12;
Goto(bb2)
}
bb14 = {
_4 = _7;
_2 = '\u{dd938}';
_13.1 = core::ptr::addr_of!(_11);
_15 = 38089_u16 as f32;
Goto(bb3)
}
bb15 = {
_11 = 263496546_i32 as f32;
_12 = _10;
_13.1 = core::ptr::addr_of!(_15);
_8 = !_4;
_11 = _15 - _15;
_7 = _8;
_12 = _10 * _10;
_6 = -_1;
_12 = -_10;
_2 = '\u{7ae97}';
_15 = -_11;
_9 = _7 <= _8;
_13.1 = core::ptr::addr_of!(_15);
_2 = '\u{ca595}';
_10 = _12 + _12;
_2 = '\u{4d188}';
_3 = core::ptr::addr_of_mut!(RET);
Call((*_3) = fn14(Move(_3), Move(_13.1), _6, _9, _15, _11, _7, _8, _1, _2, _4, _15), ReturnTo(bb4), UnwindUnreachable())
}
bb16 = {
_2 = '\u{61f89}';
_10 = _12 - _12;
_10 = 12671039184398848103_usize as f64;
_17.0 = 10189411857047296495_u64;
_18 = _5 as isize;
_3 = core::ptr::addr_of_mut!(RET);
(*_3) = 5254827634588401267_i64;
_8 = _9;
(*_3) = -(-7324773004140147161_i64);
(*_3) = (-6189063454736134276_i64);
(*_3) = 2074893295734914460_i64;
(*_3) = (-9199325610592158464_i64);
_16 = _18 + _18;
_5 = -(-14_i8);
_9 = _4 & _4;
(*_3) = 7020291198977860371_i64 * 8367375377829720942_i64;
RET = _6 as i64;
_19 = _16;
RET = 4903181574983662194_i64 - (-4371731936664964201_i64);
_13.1 = core::ptr::addr_of!(_15);
_20 = core::ptr::addr_of!(_15);
(*_20) = _11 * _11;
(*_3) = (-7906330683837938992_i64) << _16;
_13.1 = core::ptr::addr_of!((*_20));
(*_20) = -_11;
_20 = Move(_13.1);
Goto(bb5)
}
bb17 = {
_9 = _8 ^ _8;
_5 = !(-119_i8);
(*_3) = 182_u8 as i64;
_12 = _10 - _10;
(*_3) = _5 as i64;
(*_3) = -3813914797930019085_i64;
_11 = 48_u8 as f32;
_10 = _12 - _12;
match _17.0 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb6,
4 => bb7,
5 => bb8,
6 => bb9,
10189411857047296495 => bb11,
_ => bb10
}
}
bb18 = {
_12 = -_10;
_13.1 = core::ptr::addr_of!(_11);
_2 = '\u{98984}';
RET = (-1237042784564951364_i64) | (-8314912071934740720_i64);
_10 = -_12;
_7 = _4 <= _4;
_10 = _12 * _12;
Goto(bb2)
}
bb19 = {
_17 = (16288920444968494576_u64,);
(*_3) = _11 as i64;
_3 = core::ptr::addr_of_mut!((*_3));
_18 = 102_u8 as isize;
_6 = _1;
(*_3) = !(-205175040652845368_i64);
_20 = core::ptr::addr_of!(_11);
(*_3) = !(-9165180854781942992_i64);
(*_3) = 1271848739222370317_i64 * 8349644733117161649_i64;
_22 = [1370353417_u32];
(*_3) = 220901839475966844_i64 * 8792849941427868875_i64;
(*_20) = -_15;
(*_20) = _15 - _15;
_3 = core::ptr::addr_of_mut!((*_3));
(*_20) = -_15;
(*_3) = _4 as i64;
_6 = _2 as i16;
_27 = !2977845456_u32;
(*_3) = !(-4114615294438081597_i64);
Goto(bb20)
}
bb20 = {
(*_20) = _15 * _15;
(*_3) = _19 as i64;
_15 = _16 as f32;
(*_3) = -(-5653354110582684522_i64);
(*_3) = 3670847349930095581_i64;
(*_20) = _15 - _15;
Goto(bb21)
}
bb21 = {
_28.1 = core::ptr::addr_of_mut!((*_20));
_16 = _19 << (*_3);
_28.3 = 119_u8;
(*_3) = 35232471415290574362742215417748719231_u128 as i64;
_1 = _6 * _6;
RET = -7439519877807901585_i64;
(*_3) = !(-5104599729904717976_i64);
(*_20) = _15;
_12 = (-1588900742_i32) as f64;
_26 = [_27];
_2 = '\u{2c0ac}';
(*_20) = _15 * _15;
_17.0 = _10 as u64;
(*_20) = _15;
_12 = _10 * _10;
(*_3) = !2654608520562812946_i64;
(*_20) = _28.3 as f32;
_28.0 = 81410447312851311026891219309860092720_u128 ^ 236980486515012902805321593890017232115_u128;
_13.1 = core::ptr::addr_of!((*_20));
(*_3) = 5121961365954124576_i64 ^ (-292194756081900927_i64);
(*_3) = _2 as i64;
_29 = _19 ^ _16;
_6 = _28.3 as i16;
Goto(bb22)
}
bb22 = {
(*_3) = 8775568563073521455_i64;
(*_3) = (-6277169033685299178_i64);
_31.1 = (*_3) as f32;
(*_20) = -_15;
_11 = _15 + _15;
(*_3) = 3678010117265088625_i64;
_6 = -_1;
(*_20) = -_15;
_5 = (-28_i8) + 10_i8;
(*_3) = (-2685340852300163477_i64);
_6 = _1 + _1;
(*_3) = (*_20) as i64;
_17.0 = 7414890783719011776_u64;
(*_3) = 4942193525994306611_i64;
_24 = core::ptr::addr_of_mut!((*_3));
(*_24) = (-5528780771077050581_i64) & (-5075709540713028581_i64);
_33 = _12;
(*_20) = _15 - _15;
_8 = _7 ^ _4;
_28.2 = [20767_u16];
(*_3) = _27 as i64;
match _17.0 {
0 => bb15,
1 => bb10,
2 => bb3,
3 => bb4,
4 => bb14,
7414890783719011776 => bb24,
_ => bb23
}
}
bb23 = {
_11 = 263496546_i32 as f32;
_12 = _10;
_13.1 = core::ptr::addr_of!(_15);
_8 = !_4;
_11 = _15 - _15;
_7 = _8;
_12 = _10 * _10;
_6 = -_1;
_12 = -_10;
_2 = '\u{7ae97}';
_15 = -_11;
_9 = _7 <= _8;
_13.1 = core::ptr::addr_of!(_15);
_2 = '\u{ca595}';
_10 = _12 + _12;
_2 = '\u{4d188}';
_3 = core::ptr::addr_of_mut!(RET);
Call((*_3) = fn14(Move(_3), Move(_13.1), _6, _9, _15, _11, _7, _8, _1, _2, _4, _15), ReturnTo(bb4), UnwindUnreachable())
}
bb24 = {
(*_3) = 5883611253763824676_i64;
(*_20) = _31.1 * _15;
(*_20) = _15;
_24 = Move(_3);
_30 = _28.0;
(*_20) = -_15;
_32 = (*_20);
_10 = _12 * _33;
(*_20) = _29 as f32;
(*_20) = _15;
_15 = 57686_u16 as f32;
_32 = (*_20) - (*_20);
match _28.3 {
119 => bb25,
_ => bb6
}
}
bb25 = {
_22 = [_27];
_31.0 = _8 ^ _9;
_26 = [_27];
_25 = 12567_u16 + 44048_u16;
(*_20) = _32 * _32;
Goto(bb26)
}
bb26 = {
_16 = _25 as isize;
(*_20) = _32;
_35 = _16;
_34 = core::ptr::addr_of_mut!(_31.2);
_28.2 = [_25];
_32 = (*_20) * (*_20);
(*_20) = _32 * _32;
_22 = [_27];
_28.2 = [_25];
_35 = _16;
(*_20) = _32;
_4 = (*_20) < (*_20);
(*_20) = _32 + _32;
(*_20) = _31.1 + _32;
_6 = _1;
_30 = _18 as u128;
_31.1 = (*_20) - (*_20);
(*_20) = _6 as f32;
(*_20) = _31.1 + _31.1;
(*_20) = _31.1;
_17 = (18028996944657590966_u64,);
_28.2 = [_25];
(*_20) = _31.1 * _31.1;
match RET {
0 => bb27,
5883611253763824676 => bb29,
_ => bb28
}
}
bb27 = {
_4 = _7;
_2 = '\u{dd938}';
_13.1 = core::ptr::addr_of!(_11);
_15 = 38089_u16 as f32;
Goto(bb3)
}
bb28 = {
_12 = -_10;
_13.1 = core::ptr::addr_of!(_11);
_2 = '\u{98984}';
RET = (-1237042784564951364_i64) | (-8314912071934740720_i64);
_10 = -_12;
_7 = _4 <= _4;
_10 = _12 * _12;
Goto(bb2)
}
bb29 = {
_19 = _29;
_22 = [_27];
_18 = _19;
_2 = '\u{40769}';
_26 = [_27];
_31.0 = !_4;
(*_20) = _31.1 - _32;
_17 = (10268386899048673117_u64,);
_30 = _2 as u128;
_12 = _33 * _10;
(*_20) = _31.1 - _31.1;
_43 = _8;
_37 = [_30,_28.0,_28.0,_30,_28.0];
_26 = [_27];
(*_20) = _32 - _32;
_42 = &_12;
_25 = 29950_u16 ^ 7596_u16;
_20 = core::ptr::addr_of!((*_20));
(*_20) = _31.1 - _31.1;
match _17.0 {
0 => bb20,
1 => bb8,
2 => bb30,
3 => bb31,
10268386899048673117 => bb33,
_ => bb32
}
}
bb30 = {
_12 = -_10;
_13.1 = core::ptr::addr_of!(_11);
_2 = '\u{98984}';
RET = (-1237042784564951364_i64) | (-8314912071934740720_i64);
_10 = -_12;
_7 = _4 <= _4;
_10 = _12 * _12;
Goto(bb2)
}
bb31 = {
_11 = 263496546_i32 as f32;
_12 = _10;
_13.1 = core::ptr::addr_of!(_15);
_8 = !_4;
_11 = _15 - _15;
_7 = _8;
_12 = _10 * _10;
_6 = -_1;
_12 = -_10;
_2 = '\u{7ae97}';
_15 = -_11;
_9 = _7 <= _8;
_13.1 = core::ptr::addr_of!(_15);
_2 = '\u{ca595}';
_10 = _12 + _12;
_2 = '\u{4d188}';
_3 = core::ptr::addr_of_mut!(RET);
Call((*_3) = fn14(Move(_3), Move(_13.1), _6, _9, _15, _11, _7, _8, _1, _2, _4, _15), ReturnTo(bb4), UnwindUnreachable())
}
bb32 = {
_4 = _7;
_2 = '\u{dd938}';
_13.1 = core::ptr::addr_of!(_11);
_15 = 38089_u16 as f32;
Goto(bb3)
}
bb33 = {
_38 = &mut _42;
(*_38) = &_10;
(*_38) = &_33;
(*_20) = _32 * _31.1;
match _17.0 {
0 => bb13,
1 => bb20,
2 => bb28,
3 => bb8,
4 => bb30,
5 => bb34,
6 => bb35,
10268386899048673117 => bb37,
_ => bb36
}
}
bb34 = {
Return()
}
bb35 = {
_12 = -_10;
_13.1 = core::ptr::addr_of!(_11);
_2 = '\u{98984}';
RET = (-1237042784564951364_i64) | (-8314912071934740720_i64);
_10 = -_12;
_7 = _4 <= _4;
_10 = _12 * _12;
Goto(bb2)
}
bb36 = {
_9 = _8 ^ _8;
_5 = !(-119_i8);
(*_3) = 182_u8 as i64;
_12 = _10 - _10;
(*_3) = _5 as i64;
(*_3) = -3813914797930019085_i64;
_11 = 48_u8 as f32;
_10 = _12 - _12;
match _17.0 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb6,
4 => bb7,
5 => bb8,
6 => bb9,
10189411857047296495 => bb11,
_ => bb10
}
}
bb37 = {
_15 = (*_20);
_43 = (*_20) >= (*_20);
(*_38) = &_12;
(*_20) = _32 * _31.1;
_17 = (3124082626461128481_u64,);
(*_38) = &_10;
(*_38) = &_33;
(*_20) = _6 as f32;
(*_38) = &_12;
(*_38) = &_10;
match RET {
0 => bb23,
5883611253763824676 => bb38,
_ => bb35
}
}
bb38 = {
_44 = _15 * _31.1;
_10 = _12 * _33;
(*_38) = &_33;
_8 = !_43;
_30 = _28.0;
(*_38) = &_10;
(*_38) = &_12;
(*_20) = _44 * _15;
Goto(bb39)
}
bb39 = {
_45 = -_12;
_47.3 = &mut _1;
_41 = _18 >> _18;
_39 = _31.1 * (*_20);
_47.2 = -_5;
(*_38) = &_33;
_44 = (*_20) + (*_20);
_47.1 = _6 + _6;
(*_38) = &_10;
(*_20) = _44 * _39;
_11 = _31.1 * _44;
(*_20) = _39;
_49 = core::ptr::addr_of_mut!((*_34));
(*_38) = &_45;
(*_20) = _15;
(*_20) = _44 - _39;
_28.2 = [_25];
_47.0 = (*_20) < _15;
_44 = (*_20);
_28.1 = core::ptr::addr_of_mut!((*_20));
(*_38) = &_33;
match RET {
0 => bb32,
1 => bb19,
2 => bb8,
3 => bb6,
5883611253763824676 => bb41,
_ => bb40
}
}
bb40 = {
_22 = [_27];
_31.0 = _8 ^ _9;
_26 = [_27];
_25 = 12567_u16 + 44048_u16;
(*_20) = _32 * _32;
Goto(bb26)
}
bb41 = {
_16 = _41 * _29;
_17 = (14188330920783742571_u64,);
_13.1 = Move(_20);
_24 = core::ptr::addr_of_mut!(RET);
(*_24) = (-4595331075216979295_i64) + 6587415080265176603_i64;
_10 = _45 * _12;
_19 = -_16;
(*_38) = &_45;
_31.0 = _8;
RET = _43 as i64;
_34 = core::ptr::addr_of_mut!((*_49));
_20 = core::ptr::addr_of!(_31.1);
(*_20) = _28.0 as f32;
(*_24) = 5417214300040255463_i64 ^ (-863375501606191391_i64);
_30 = _28.0 + _28.0;
(*_20) = _47.1 as f32;
(*_38) = &_12;
match _17.0 {
0 => bb42,
1 => bb43,
2 => bb44,
3 => bb45,
4 => bb46,
5 => bb47,
6 => bb48,
14188330920783742571 => bb50,
_ => bb49
}
}
bb42 = {
_22 = [_27];
_31.0 = _8 ^ _9;
_26 = [_27];
_25 = 12567_u16 + 44048_u16;
(*_20) = _32 * _32;
Goto(bb26)
}
bb43 = {
_11 = 263496546_i32 as f32;
_12 = _10;
_13.1 = core::ptr::addr_of!(_15);
_8 = !_4;
_11 = _15 - _15;
_7 = _8;
_12 = _10 * _10;
_6 = -_1;
_12 = -_10;
_2 = '\u{7ae97}';
_15 = -_11;
_9 = _7 <= _8;
_13.1 = core::ptr::addr_of!(_15);
_2 = '\u{ca595}';
_10 = _12 + _12;
_2 = '\u{4d188}';
_3 = core::ptr::addr_of_mut!(RET);
Call((*_3) = fn14(Move(_3), Move(_13.1), _6, _9, _15, _11, _7, _8, _1, _2, _4, _15), ReturnTo(bb4), UnwindUnreachable())
}
bb44 = {
_12 = -_10;
_13.1 = core::ptr::addr_of!(_11);
_2 = '\u{98984}';
RET = (-1237042784564951364_i64) | (-8314912071934740720_i64);
_10 = -_12;
_7 = _4 <= _4;
_10 = _12 * _12;
Goto(bb2)
}
bb45 = {
_12 = -_10;
_13.1 = core::ptr::addr_of!(_11);
_2 = '\u{98984}';
RET = (-1237042784564951364_i64) | (-8314912071934740720_i64);
_10 = -_12;
_7 = _4 <= _4;
_10 = _12 * _12;
Goto(bb2)
}
bb46 = {
_9 = _8 ^ _8;
_5 = !(-119_i8);
(*_3) = 182_u8 as i64;
_12 = _10 - _10;
(*_3) = _5 as i64;
(*_3) = -3813914797930019085_i64;
_11 = 48_u8 as f32;
_10 = _12 - _12;
match _17.0 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb6,
4 => bb7,
5 => bb8,
6 => bb9,
10189411857047296495 => bb11,
_ => bb10
}
}
bb47 = {
_12 = -_10;
_13.1 = core::ptr::addr_of!(_11);
_2 = '\u{98984}';
RET = (-1237042784564951364_i64) | (-8314912071934740720_i64);
_10 = -_12;
_7 = _4 <= _4;
_10 = _12 * _12;
Goto(bb2)
}
bb48 = {
Return()
}
bb49 = {
_11 = 263496546_i32 as f32;
_12 = _10;
_13.1 = core::ptr::addr_of!(_15);
_8 = !_4;
_11 = _15 - _15;
_7 = _8;
_12 = _10 * _10;
_6 = -_1;
_12 = -_10;
_2 = '\u{7ae97}';
_15 = -_11;
_9 = _7 <= _8;
_13.1 = core::ptr::addr_of!(_15);
_2 = '\u{ca595}';
_10 = _12 + _12;
_2 = '\u{4d188}';
_3 = core::ptr::addr_of_mut!(RET);
Call((*_3) = fn14(Move(_3), Move(_13.1), _6, _9, _15, _11, _7, _8, _1, _2, _4, _15), ReturnTo(bb4), UnwindUnreachable())
}
bb50 = {
(*_38) = &_45;
(*_20) = _28.0 as f32;
_5 = 1297175056_i32 as i8;
_33 = _17.0 as f64;
(*_20) = _11;
(*_24) = (-5146933068328575728_i64) - (-3531747551208404713_i64);
_49 = core::ptr::addr_of_mut!((*_34));
(*_24) = 63221619433393435993271465218516373091_i128 as i64;
_41 = _19 << _19;
(*_20) = _32 * _39;
_18 = !_41;
Goto(bb51)
}
bb51 = {
Call(_54 = dump_var(13_usize, 5_usize, Move(_5), 17_usize, Move(_17), 27_usize, Move(_27), 30_usize, Move(_30)), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
Call(_54 = dump_var(13_usize, 25_usize, Move(_25), 7_usize, Move(_7), 19_usize, Move(_19), 6_usize, Move(_6)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Call(_54 = dump_var(13_usize, 29_usize, Move(_29), 1_usize, Move(_1), 26_usize, Move(_26), 55_usize, _55), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn14(mut _1: *mut i64,mut _2: *const f32,mut _3: i16,mut _4: bool,mut _5: f32,mut _6: f32,mut _7: bool,mut _8: bool,mut _9: i16,mut _10: char,mut _11: bool,mut _12: f32) -> i64 {
mir! {
type RET = i64;
let _13: u128;
let _14: char;
let _15: Adt72;
let _16: isize;
let _17: &'static mut i16;
let _18: *mut Adt43;
let _19: [bool; 2];
let _20: *mut usize;
let _21: isize;
let _22: &'static mut u128;
let _23: &'static mut i32;
let _24: [u128; 5];
let _25: Adt43;
let _26: *mut &'static u16;
let _27: *mut Adt43;
let _28: &'static f64;
let _29: [u16; 6];
let _30: isize;
let _31: u64;
let _32: Adt60;
let _33: *mut u8;
let _34: char;
let _35: u64;
let _36: i64;
let _37: *mut Adt43;
let _38: u32;
let _39: *mut f32;
let _40: isize;
let _41: ((&'static mut *const f32, ([u128; 5], f64), *mut i64, bool), &'static mut i16);
let _42: &'static mut i32;
let _43: f64;
let _44: usize;
let _45: &'static mut &'static f64;
let _46: i128;
let _47: Adt78;
let _48: f32;
let _49: char;
let _50: u32;
let _51: *const *mut usize;
let _52: f32;
let _53: &'static mut i32;
let _54: (u64,);
let _55: &'static mut [u64; 6];
let _56: bool;
let _57: u16;
let _58: isize;
let _59: f64;
let _60: *mut &'static f64;
let _61: i8;
let _62: isize;
let _63: i32;
let _64: i64;
let _65: f32;
let _66: &'static i8;
let _67: *mut *const [u64; 6];
let _68: *mut &'static mut i16;
let _69: ();
let _70: ();
{
_5 = 32803_u16 as f32;
_2 = core::ptr::addr_of!(_5);
(*_2) = _12;
(*_2) = -_12;
(*_2) = _12 * _6;
(*_2) = 170_u8 as f32;
(*_2) = _12 + _6;
(*_2) = _12;
(*_2) = _12 + _6;
(*_2) = _6 - _12;
_9 = -_3;
RET = -(-1116820110782683853_i64);
(*_2) = _6;
_5 = -_12;
_1 = core::ptr::addr_of_mut!(RET);
(*_2) = _6 + _6;
Goto(bb1)
}
bb1 = {
(*_2) = _12 * _12;
(*_2) = _6 + _6;
_8 = _4;
(*_2) = -_12;
_4 = !_7;
(*_2) = _12 * _6;
_13 = 316246282603190587789615345835404227506_u128 - 190345217369322528495381020718145239852_u128;
_4 = !_8;
_7 = _4;
_10 = '\u{d1a0e}';
_12 = -(*_2);
Goto(bb2)
}
bb2 = {
(*_1) = 1372007120357968183_i64 | (-3317782211859299495_i64);
(*_2) = _12;
RET = (-535420996842639156_i64) & 2311765697150649217_i64;
(*_1) = 27248_u16 as i64;
(*_2) = _12 * _12;
(*_1) = 668857712259963091_i64 >> _3;
(*_2) = _12;
(*_2) = 18953_u16 as f32;
(*_1) = (-7845128953886101249_i64) << _9;
(*_1) = (-7429789129323288430_i64);
(*_1) = 172_u8 as i64;
(*_2) = -_12;
_6 = (*_2) + _5;
_4 = (*_1) != (*_1);
Call((*_1) = fn15(Move(_2), Move(_1), (*_2), (*_2), (*_2), (*_2), _4, (*_2), _11), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_1 = core::ptr::addr_of_mut!(RET);
(*_1) = 1659927412771920913_i64 << _3;
_4 = _8 >= _7;
(*_1) = (-8466590390641294236_i64) & 3087959209757454930_i64;
(*_1) = 2778870898891157969_i64 << _13;
(*_1) = -(-356736843393821523_i64);
(*_1) = (-90_i8) as i64;
(*_1) = (-5458384071111371943_i64) >> _9;
Goto(bb4)
}
bb4 = {
_1 = core::ptr::addr_of_mut!((*_1));
(*_1) = 5949947583598336171_i64;
(*_1) = 8055101584344330824_i64;
(*_1) = 3582789775316078580_u64 as i64;
_12 = _13 as f32;
(*_1) = (-3254986872852818748_i64) ^ (-2246749071951323330_i64);
RET = (-4541250278119026339_i64) ^ (-3294633016206081602_i64);
(*_1) = (-113999533845652034439093360888601098994_i128) as i64;
Goto(bb5)
}
bb5 = {
(*_1) = 8857269168071267877_i64 & 7014395951065204791_i64;
(*_1) = 47_i8 as i64;
_16 = 9223372036854775807_isize;
_2 = core::ptr::addr_of!(_5);
_7 = _4 != _8;
_3 = _9 << (*_1);
(*_1) = 38902_u16 as i64;
(*_1) = 2236969099242300999_i64 + 2350216304981336240_i64;
_16 = -9223372036854775807_isize;
(*_2) = _6 * _6;
(*_1) = -3915608673495732883_i64;
(*_2) = 58401_u16 as f32;
(*_1) = 1889306196_u32 as i64;
(*_1) = 1674736738253867762_i64 | (-6937385335092791239_i64);
(*_1) = 4624587322885995151_i64 ^ (-4414533795501349196_i64);
(*_2) = -_6;
Goto(bb6)
}
bb6 = {
_3 = _9 & _9;
_2 = core::ptr::addr_of!((*_2));
_9 = _3 & _3;
(*_1) = 8309486669573611707_i64;
(*_2) = 12507661844965417988_u64 as f32;
(*_1) = !(-18480972698160787_i64);
RET = (-1039160590007151163_i64) - 5622726180519388847_i64;
(*_2) = _6;
(*_2) = _6;
(*_2) = _6 + _6;
(*_1) = 8552929122448547490_i64 << _9;
(*_2) = _6;
(*_2) = _6;
_7 = !_4;
(*_1) = (-1402279211666266462_i64);
_27 = core::ptr::addr_of_mut!(_25);
(*_1) = 7811745910012023685_i64 ^ 6738226637072064699_i64;
_5 = _6 - _6;
_17 = &mut _9;
Goto(bb7)
}
bb7 = {
(*_2) = _6 - _6;
(*_2) = 5612_u16 as f32;
_29 = [44353_u16,58232_u16,4548_u16,26434_u16,2019_u16,43632_u16];
(*_2) = -_6;
(*_17) = (*_2) as i16;
_17 = &mut _3;
_24 = [_13,_13,_13,_13,_13];
(*_2) = _6;
_22 = &mut _13;
(*_22) = 216942807222440999774276734176087924448_u128;
_21 = !_16;
(*_1) = !2681707120758677980_i64;
(*_22) = 114028375620394689036063383049609169786_u128;
_5 = _12 - _12;
_11 = _7 != _4;
(*_1) = (-5128902008200363155_i64) & 7253986222209860143_i64;
_31 = !13359648473968371976_u64;
(*_2) = -_6;
(*_17) = (*_2) as i16;
(*_17) = (-23420_i16) << (*_1);
(*_22) = 269212509534668463025435751531106473856_u128;
(*_17) = !18143_i16;
(*_22) = _10 as u128;
Goto(bb8)
}
bb8 = {
(*_17) = (-30249_i16);
_19 = [_4,_11];
(*_1) = 6780299299655544932_i64 >> (*_17);
_18 = core::ptr::addr_of_mut!((*_27));
(*_17) = -4824_i16;
_19 = [_8,_11];
_1 = core::ptr::addr_of_mut!((*_1));
(*_17) = (-7879_i16) ^ 6406_i16;
(*_17) = (-8480_i16) ^ 1894_i16;
(*_22) = !60869287757148284834943551147677812237_u128;
(*_2) = _6;
(*_22) = 422006000667708579_usize as u128;
(*_1) = 2743561885743089635_i64;
(*_2) = (*_22) as f32;
(*_2) = _6 - _6;
_6 = (*_2) * (*_2);
(*_1) = 6838773378097365430_i64;
_30 = _21;
_11 = _8 <= _7;
(*_17) = 6779_i16 | 12700_i16;
(*_2) = _6 - _6;
(*_17) = 3490_i16 * 5013_i16;
_12 = 115693962841534277651331176668671486609_i128 as f32;
(*_2) = _6;
(*_1) = (-4879401478906623622_i64) & 3542169865981209589_i64;
Goto(bb9)
}
bb9 = {
_5 = 2_usize as f32;
(*_22) = !238279640918912411413705872676645629710_u128;
(*_2) = _6;
_38 = 3118166897_u32 * 3748730017_u32;
_34 = _10;
(*_2) = -_6;
(*_2) = 25_u8 as f32;
_41.0.3 = _6 <= _6;
(*_1) = (-7665450432739955252_i64) * (-2544647590220639246_i64);
_41.0.2 = core::ptr::addr_of_mut!((*_1));
(*_1) = 9205837688269344929_i64;
(*_17) = (-8688_i16) * (-13128_i16);
_5 = (*_1) as f32;
(*_22) = 235188160492340121649561557371451143037_u128 >> (*_17);
_39 = core::ptr::addr_of_mut!((*_2));
(*_2) = -_6;
(*_17) = 19079_i16 ^ 25621_i16;
_34 = _10;
(*_1) = _31 as i64;
(*_1) = !(-2236545033758633174_i64);
_5 = (-645742750_i32) as f32;
Goto(bb10)
}
bb10 = {
(*_2) = _6;
(*_22) = 265471356806223926371870925814886193376_u128;
(*_2) = _6 * _6;
(*_17) = (-2704_i16);
(*_17) = (*_22) as i16;
_41.1 = &mut (*_17);
(*_1) = 4604395753210226990_i64;
_8 = _4 & _7;
_41.0.0 = &mut _2;
(*_1) = (-2830793736728969457_i64);
(*_1) = -(-7902727979463727276_i64);
(*_22) = !280852823415340571334991280344023379479_u128;
Goto(bb11)
}
bb11 = {
(*_1) = (-4669951180961442278_i64);
(*_1) = !(-4509895572086906465_i64);
(*_1) = (-7603903334963612097_i64) & (-4809601492489544597_i64);
(*_1) = (-8547383572149427392_i64);
_21 = _30 >> (*_22);
(*_22) = 165101960307774279785370373629686623864_u128 - 115654868240555336189544980991404557333_u128;
(*_22) = _21 as u128;
(*_22) = 65849359399075730172777545541775725027_i128 as u128;
_44 = 0_usize ^ 1_usize;
(*_22) = 288077642265819307258347939388718311690_u128;
_21 = _16;
(*_22) = 314988388743860519439002358256450409017_u128;
_43 = 28278933573522378962397876006727588288_i128 as f64;
_48 = _5;
(*_1) = (-4204981176611533577_i64) - (-4000301370962580899_i64);
_29 = [62689_u16,64150_u16,58516_u16,54735_u16,39788_u16,32343_u16];
(*_1) = !(-3305729851216901125_i64);
_21 = _16;
_24 = [(*_22),(*_22),(*_22),(*_22),(*_22)];
_40 = _16 << _30;
Call(_35 = core::intrinsics::bswap(_31), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
_44 = 12694763576277516692_usize & 1_usize;
(*_22) = 33042139549158867962786927860580100482_u128;
_48 = _6 + _5;
(*_1) = 2400858597350247513_i64;
_6 = (*_1) as f32;
_48 = _5 + _5;
(*_1) = !(-1613523595935606262_i64);
(*_22) = _48 as u128;
_37 = core::ptr::addr_of_mut!(_25);
(*_22) = 186926635462916012610072488460701266089_u128;
match (*_22) {
0 => bb6,
1 => bb8,
2 => bb10,
186926635462916012610072488460701266089 => bb13,
_ => bb7
}
}
bb13 = {
(*_22) = _31 as u128;
_52 = _48 + _48;
(*_1) = (-4658081240883519070_i64);
(*_22) = _31 as u128;
_40 = _16 & _16;
(*_22) = 86867391220523284425800052883593235459_u128 * 294750548709469655109171992605253955284_u128;
(*_22) = _38 as u128;
_6 = _52 + _5;
_50 = (*_22) as u32;
(*_1) = (-5895271460034571313_i64);
_14 = _34;
(*_22) = 168518035616367981235524140007419518723_u128 & 66758918522339185010293607121018821464_u128;
_46 = (-91026327194724999694940965833854460787_i128) * (-133173720799785054116163159843249584897_i128);
_8 = _41.0.3;
_35 = _31 << (*_22);
(*_22) = !247190271866918150206048234401638620702_u128;
_12 = -_5;
_27 = core::ptr::addr_of_mut!((*_37));
(*_22) = _44 as u128;
(*_22) = 63298538285242592520812003974400077874_u128 << (*_1);
RET = _7 as i64;
(*_1) = -(-4344142093338093544_i64);
_14 = _10;
_43 = _31 as f64;
(*_22) = 76674846271642460324988294231928865018_u128 << _44;
_51 = core::ptr::addr_of!(_20);
(*_51) = core::ptr::addr_of_mut!(_44);
(*_20) = 9057105792329705572_usize + 2_usize;
(*_1) = 3743015786179053878_i64 * 2909501019878708598_i64;
Goto(bb14)
}
bb14 = {
_4 = _41.0.3;
(*_20) = !2727418318970313019_usize;
_4 = _8;
(*_20) = 10175961023739946883_usize << _35;
_38 = _50 | _50;
(*_1) = (-4415394123114698610_i64);
_54 = (_35,);
(*_22) = 118991085982743118972082224987380194130_u128 - 94704815070708758477541511986074733422_u128;
(*_20) = !4094457582916373880_usize;
(*_1) = 3207498566982817862_i64 >> (*_22);
_54.0 = _35 | _31;
_44 = (-1936079283_i32) as usize;
_36 = (*_1) - (*_1);
(*_22) = 118955871046488766371900464689935135701_u128 | 250385033263902275538827841225494389378_u128;
_31 = _38 as u64;
_6 = _54.0 as f32;
_54 = (_35,);
_58 = _30 ^ _40;
_35 = _54.0 + _54.0;
(*_51) = core::ptr::addr_of_mut!((*_20));
Goto(bb15)
}
bb15 = {
_29 = [65262_u16,19966_u16,36288_u16,36032_u16,98_u16,40467_u16];
_61 = 74_i8 * 22_i8;
(*_1) = _36;
_41.0.1.0 = [(*_22),(*_22),(*_22),(*_22),(*_22)];
(*_20) = 1_usize << (*_1);
(*_51) = core::ptr::addr_of_mut!((*_20));
_65 = _46 as f32;
Goto(bb16)
}
bb16 = {
(*_51) = core::ptr::addr_of_mut!(_44);
_65 = -_48;
(*_20) = _46 as usize;
(*_51) = core::ptr::addr_of_mut!((*_20));
(*_1) = _46 as i64;
_56 = !_11;
_35 = _31;
(*_20) = _38 as usize;
_52 = _54.0 as f32;
(*_1) = _36 * _36;
(*_20) = 2079059115275803649_usize + 2_usize;
(*_1) = _46 as i64;
(*_20) = 10484482926333470437_usize + 17137386155561056871_usize;
(*_51) = core::ptr::addr_of_mut!((*_20));
(*_1) = _36;
(*_51) = core::ptr::addr_of_mut!((*_20));
_38 = _50 >> (*_20);
_29 = [722_u16,64236_u16,5024_u16,61917_u16,32726_u16,18705_u16];
(*_51) = core::ptr::addr_of_mut!((*_20));
(*_20) = 10171991703614226962_usize >> _50;
(*_22) = 167800797463013170068563256195089958417_u128;
_31 = _35;
(*_1) = _36 + _36;
(*_20) = 2_usize;
Goto(bb17)
}
bb17 = {
Call(_69 = dump_var(14_usize, 54_usize, Move(_54), 9_usize, Move(_9), 29_usize, Move(_29), 44_usize, Move(_44)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_69 = dump_var(14_usize, 40_usize, Move(_40), 19_usize, Move(_19), 3_usize, Move(_3), 61_usize, Move(_61)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_69 = dump_var(14_usize, 8_usize, Move(_8), 34_usize, Move(_34), 46_usize, Move(_46), 58_usize, Move(_58)), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Call(_69 = dump_var(14_usize, 16_usize, Move(_16), 11_usize, Move(_11), 70_usize, _70, 70_usize, _70), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn15(mut _1: *const f32,mut _2: *mut i64,mut _3: f32,mut _4: f32,mut _5: f32,mut _6: f32,mut _7: bool,mut _8: f32,mut _9: bool) -> i64 {
mir! {
type RET = i64;
let _10: *const ([u64; 2],);
let _11: (&'static mut *const f32, ([u128; 5], f64), *mut i64, bool);
let _12: f32;
let _13: *const ([u128; 5], f64);
let _14: isize;
let _15: u128;
let _16: u16;
let _17: [u16; 1];
let _18: f32;
let _19: *const f32;
let _20: &'static mut &'static f64;
let _21: i128;
let _22: isize;
let _23: *mut *const f32;
let _24: &'static u16;
let _25: i8;
let _26: f32;
let _27: u64;
let _28: f64;
let _29: f32;
let _30: Adt68;
let _31: *mut f32;
let _32: i8;
let _33: (bool, i16, i8, &'static mut i16);
let _34: (&'static mut [u8; 3], i8, *mut i64, &'static u16);
let _35: [u128; 8];
let _36: char;
let _37: (&'static mut [u8; 3], i8, *mut i64, &'static u16);
let _38: &'static mut *const f32;
let _39: i128;
let _40: &'static mut (i8, usize, isize);
let _41: [u128; 8];
let _42: [u8; 7];
let _43: char;
let _44: i64;
let _45: [u8; 7];
let _46: isize;
let _47: &'static mut i16;
let _48: u32;
let _49: &'static f64;
let _50: ([u128; 5], f64);
let _51: (&'static mut [u8; 3], i8, *mut i64, &'static u16);
let _52: f32;
let _53: &'static mut &'static f64;
let _54: bool;
let _55: Adt78;
let _56: &'static mut u128;
let _57: usize;
let _58: *const [u64; 6];
let _59: &'static mut u128;
let _60: i64;
let _61: u128;
let _62: &'static mut i32;
let _63: (&'static mut *const f32, ([u128; 5], f64), *mut i64, bool);
let _64: *const *mut usize;
let _65: *mut *const f32;
let _66: isize;
let _67: bool;
let _68: f64;
let _69: Adt63;
let _70: [u32; 1];
let _71: f32;
let _72: f64;
let _73: isize;
let _74: [u64; 2];
let _75: u32;
let _76: *mut i64;
let _77: i128;
let _78: *mut *const f32;
let _79: (i8, usize, isize);
let _80: *mut u8;
let _81: i128;
let _82: &'static mut &'static f64;
let _83: u32;
let _84: [u128; 8];
let _85: char;
let _86: f64;
let _87: isize;
let _88: isize;
let _89: [u16; 1];
let _90: *mut Adt43;
let _91: f64;
let _92: char;
let _93: usize;
let _94: &'static [u64; 2];
let _95: (&'static mut *const f32, ([u128; 5], f64), *mut i64, bool);
let _96: u8;
let _97: *const [u64; 6];
let _98: bool;
let _99: char;
let _100: &'static mut [u64; 6];
let _101: isize;
let _102: (bool, f32, Adt43);
let _103: f64;
let _104: usize;
let _105: &'static u16;
let _106: &'static mut (i8, usize, isize);
let _107: i64;
let _108: isize;
let _109: &'static mut *const f32;
let _110: &'static f64;
let _111: ();
let _112: ();
{
_5 = _8 * _6;
_2 = core::ptr::addr_of_mut!(RET);
(*_2) = 1534832773775011285_i64;
(*_2) = (-7783389091518085818_i64) & (-3105240979051374229_i64);
(*_2) = _6 as i64;
_11.2 = Move(_2);
_2 = Move(_11.2);
_12 = _5;
_2 = core::ptr::addr_of_mut!(RET);
(*_2) = (-7568777028226554915_i64) >> 2097431297803241069_i64;
(*_2) = (-3260430119906130774_i64) - 272858605676614938_i64;
_11.0 = &mut _1;
(*_2) = _4 as i64;
(*_2) = 35_u8 as i64;
_11.2 = core::ptr::addr_of_mut!((*_2));
Goto(bb1)
}
bb1 = {
(*_2) = 919310958369408317_i64 + (-7040438932741296090_i64);
_13 = core::ptr::addr_of!(_11.1);
(*_2) = 1771314953166532332_i64;
(*_13).0 = [251573601273176403795596379246870616994_u128,147055506819289176257233192450652060753_u128,130907875447745634300360475787808832792_u128,288388623010123306465870915044139879546_u128,64084611752446306342907459244937633483_u128];
(*_13).1 = 23768113258925807541286357378676886799_i128 as f64;
(*_2) = !(-8422287750004732458_i64);
(*_13).0 = [78323670905479956485982031341366518815_u128,254930661051328099250798176603070687027_u128,295633075847151161765528906387275855422_u128,338483067524089993937323848867998883264_u128,184647859410820359157469348530917454686_u128];
_11.3 = !_9;
(*_13).1 = 6221473184608559723_u64 as f64;
(*_13).1 = 0_usize as f64;
(*_2) = _11.3 as i64;
(*_13).0 = [83005546635325642072809619295819479189_u128,76003849190832224891583400247864715105_u128,166482407822561999554978483408307892796_u128,160422989542072143908497411574581901989_u128,152523100482362191223901178717094797619_u128];
(*_13).1 = 39658_u16 as f64;
(*_13).0 = [220070219573615045884169774251450302446_u128,195507009218808489318845913035841289320_u128,13448561644128587570272913207114268041_u128,253392956344617105653997458875280414176_u128,137958945670566957487947778154143037100_u128];
(*_13).0 = [335127002924582783577929533906110308555_u128,74353239137876993383045634223292279658_u128,114581063591361098589888674787769071235_u128,199672666842949905976038509385232453954_u128,195263610233222259254309712913368184491_u128];
(*_2) = (-8905097918203931121_i64) * (-2767481079370842890_i64);
_11.3 = !_9;
_11.3 = _9;
(*_13).0 = [317860342654594680671932421794244414065_u128,143714007668731225588038903933416365344_u128,106378051043110906225858979854028053108_u128,97516070485090463171054222312459271831_u128,98131193339782477116047987270266226211_u128];
(*_2) = 4828318367311659837_i64 & 3904952394578313691_i64;
Call((*_2) = fn16(Move(_11), Move(_2), Move(_13)), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_16 = _9 as u16;
_9 = _7;
_11.1.0 = [76476591070350544475297347917168852407_u128,42850871451679744801946424996932636338_u128,250895311709211737713367844373016416860_u128,39708298034741372339062113397906983522_u128,219127349638692186709677215248308781138_u128];
_13 = core::ptr::addr_of!(_11.1);
(*_13).0 = [286788744455231894444965348160085565181_u128,304713321065164420809345912209820522756_u128,70245975808424635184045040859421296330_u128,150294087933083392614634143732898650115_u128,156268133936481862620550742620243935182_u128];
(*_13).1 = 17_u8 as f64;
(*_13).0 = [87774919182807002458856560940341477673_u128,103712567329067949129274566991913180735_u128,205411527608076382989626344089644483483_u128,258983871591027202956931430805980848070_u128,311662388031752043734464602574052920797_u128];
(*_13).1 = 114_u8 as f64;
_11.1.0 = [297683395377130915277144685280303355493_u128,73731636933125142812732307721006898830_u128,208926744064522145566676596447326460502_u128,272933361129157984375625211086852021923_u128,55985692182010556645310899299709897712_u128];
(*_13).0 = [266973740568853952084152817713949474429_u128,304266641263514955843900925175237077461_u128,220582585075383521948783609023433515285_u128,93399073243488946762366064936057104357_u128,41668447599509328492250463240974084050_u128];
(*_13).1 = 157_u8 as f64;
(*_13).1 = _16 as f64;
(*_13).1 = (-9223372036854775808_isize) as f64;
(*_13).0 = [145800422007996317313782157255617484357_u128,294614978082274854258297098017368040443_u128,218167187539697538387794685593794518140_u128,104896817617795118914300460262285587890_u128,100173749374833403312723233396349010202_u128];
_11.1.0 = [326423251537371924874682406493796661371_u128,212957558421099404605922536656190420909_u128,87764300703620653141607414455643706916_u128,123403988279402581160514996949867573163_u128,328243676238651389409497103893385252387_u128];
_18 = _5;
(*_13).0 = [321256480534715649455740141341844862964_u128,65585031714867171536324593178317854640_u128,339335404232114407663814131803720767973_u128,82310639701241040213330290351134394330_u128,166352015231521310973554995793934098281_u128];
(*_13).0 = [249189546928235453194695110347441704542_u128,211849281589965077845950680377358526337_u128,149530841305353370693443283327587434933_u128,237853000803074983211159839580209376795_u128,143096280765471248452996568936721273524_u128];
_15 = (-30536930790345043843686197724830137083_i128) as u128;
(*_13).0 = [_15,_15,_15,_15,_15];
(*_13).1 = 104736879_i32 as f64;
(*_13).1 = _16 as f64;
_12 = _18 - _8;
(*_13).0 = [_15,_15,_15,_15,_15];
_15 = 70124279001198750751515901785978969174_u128;
Goto(bb3)
}
bb3 = {
(*_13).1 = (-9633414877869689730420330418095113153_i128) as f64;
_19 = core::ptr::addr_of!(_12);
_8 = (*_19);
_26 = 912293528_u32 as f32;
_11.2 = core::ptr::addr_of_mut!(RET);
(*_19) = _4;
_22 = _7 as isize;
_6 = (*_19) * (*_19);
(*_13).1 = (-104_i8) as f64;
_11.2 = core::ptr::addr_of_mut!(RET);
_5 = (*_19) * (*_19);
(*_13).1 = _16 as f64;
_2 = core::ptr::addr_of_mut!(RET);
(*_2) = 3208719033291672780_i64 >> _22;
(*_2) = (-1396994242291396778_i64) >> _16;
_12 = 66_i8 as f32;
_23 = core::ptr::addr_of_mut!(_19);
(*_19) = 3_usize as f32;
(*_2) = -(-837599856370101225_i64);
_11.0 = &mut (*_23);
(*_2) = 5625345708822327169_i64 & (-4784097534455581784_i64);
_16 = 33343_u16;
(*_2) = (-4117240373438881636_i64) & 3945188758114953814_i64;
(*_13).0 = [_15,_15,_15,_15,_15];
(*_13).1 = 85_i8 as f64;
_29 = -_18;
(*_2) = '\u{5b635}' as i64;
Goto(bb4)
}
bb4 = {
(*_2) = 1001745079492496973_i64;
(*_13).0 = [_15,_15,_15,_15,_15];
(*_2) = (-5402216729795172554_i64);
_21 = 85526628487685199979701126140657725551_i128;
(*_2) = -5074111839436822147_i64;
_11.1.1 = (-1735_i16) as f64;
match _15 {
0 => bb1,
1 => bb5,
2 => bb6,
3 => bb7,
4 => bb8,
5 => bb9,
70124279001198750751515901785978969174 => bb11,
_ => bb10
}
}
bb5 = {
(*_13).1 = (-9633414877869689730420330418095113153_i128) as f64;
_19 = core::ptr::addr_of!(_12);
_8 = (*_19);
_26 = 912293528_u32 as f32;
_11.2 = core::ptr::addr_of_mut!(RET);
(*_19) = _4;
_22 = _7 as isize;
_6 = (*_19) * (*_19);
(*_13).1 = (-104_i8) as f64;
_11.2 = core::ptr::addr_of_mut!(RET);
_5 = (*_19) * (*_19);
(*_13).1 = _16 as f64;
_2 = core::ptr::addr_of_mut!(RET);
(*_2) = 3208719033291672780_i64 >> _22;
(*_2) = (-1396994242291396778_i64) >> _16;
_12 = 66_i8 as f32;
_23 = core::ptr::addr_of_mut!(_19);
(*_19) = 3_usize as f32;
(*_2) = -(-837599856370101225_i64);
_11.0 = &mut (*_23);
(*_2) = 5625345708822327169_i64 & (-4784097534455581784_i64);
_16 = 33343_u16;
(*_2) = (-4117240373438881636_i64) & 3945188758114953814_i64;
(*_13).0 = [_15,_15,_15,_15,_15];
(*_13).1 = 85_i8 as f64;
_29 = -_18;
(*_2) = '\u{5b635}' as i64;
Goto(bb4)
}
bb6 = {
_16 = _9 as u16;
_9 = _7;
_11.1.0 = [76476591070350544475297347917168852407_u128,42850871451679744801946424996932636338_u128,250895311709211737713367844373016416860_u128,39708298034741372339062113397906983522_u128,219127349638692186709677215248308781138_u128];
_13 = core::ptr::addr_of!(_11.1);
(*_13).0 = [286788744455231894444965348160085565181_u128,304713321065164420809345912209820522756_u128,70245975808424635184045040859421296330_u128,150294087933083392614634143732898650115_u128,156268133936481862620550742620243935182_u128];
(*_13).1 = 17_u8 as f64;
(*_13).0 = [87774919182807002458856560940341477673_u128,103712567329067949129274566991913180735_u128,205411527608076382989626344089644483483_u128,258983871591027202956931430805980848070_u128,311662388031752043734464602574052920797_u128];
(*_13).1 = 114_u8 as f64;
_11.1.0 = [297683395377130915277144685280303355493_u128,73731636933125142812732307721006898830_u128,208926744064522145566676596447326460502_u128,272933361129157984375625211086852021923_u128,55985692182010556645310899299709897712_u128];
(*_13).0 = [266973740568853952084152817713949474429_u128,304266641263514955843900925175237077461_u128,220582585075383521948783609023433515285_u128,93399073243488946762366064936057104357_u128,41668447599509328492250463240974084050_u128];
(*_13).1 = 157_u8 as f64;
(*_13).1 = _16 as f64;
(*_13).1 = (-9223372036854775808_isize) as f64;
(*_13).0 = [145800422007996317313782157255617484357_u128,294614978082274854258297098017368040443_u128,218167187539697538387794685593794518140_u128,104896817617795118914300460262285587890_u128,100173749374833403312723233396349010202_u128];
_11.1.0 = [326423251537371924874682406493796661371_u128,212957558421099404605922536656190420909_u128,87764300703620653141607414455643706916_u128,123403988279402581160514996949867573163_u128,328243676238651389409497103893385252387_u128];
_18 = _5;
(*_13).0 = [321256480534715649455740141341844862964_u128,65585031714867171536324593178317854640_u128,339335404232114407663814131803720767973_u128,82310639701241040213330290351134394330_u128,166352015231521310973554995793934098281_u128];
(*_13).0 = [249189546928235453194695110347441704542_u128,211849281589965077845950680377358526337_u128,149530841305353370693443283327587434933_u128,237853000803074983211159839580209376795_u128,143096280765471248452996568936721273524_u128];
_15 = (-30536930790345043843686197724830137083_i128) as u128;
(*_13).0 = [_15,_15,_15,_15,_15];
(*_13).1 = 104736879_i32 as f64;
(*_13).1 = _16 as f64;
_12 = _18 - _8;
(*_13).0 = [_15,_15,_15,_15,_15];
_15 = 70124279001198750751515901785978969174_u128;
Goto(bb3)
}
bb7 = {
(*_2) = 919310958369408317_i64 + (-7040438932741296090_i64);
_13 = core::ptr::addr_of!(_11.1);
(*_2) = 1771314953166532332_i64;
(*_13).0 = [251573601273176403795596379246870616994_u128,147055506819289176257233192450652060753_u128,130907875447745634300360475787808832792_u128,288388623010123306465870915044139879546_u128,64084611752446306342907459244937633483_u128];
(*_13).1 = 23768113258925807541286357378676886799_i128 as f64;
(*_2) = !(-8422287750004732458_i64);
(*_13).0 = [78323670905479956485982031341366518815_u128,254930661051328099250798176603070687027_u128,295633075847151161765528906387275855422_u128,338483067524089993937323848867998883264_u128,184647859410820359157469348530917454686_u128];
_11.3 = !_9;
(*_13).1 = 6221473184608559723_u64 as f64;
(*_13).1 = 0_usize as f64;
(*_2) = _11.3 as i64;
(*_13).0 = [83005546635325642072809619295819479189_u128,76003849190832224891583400247864715105_u128,166482407822561999554978483408307892796_u128,160422989542072143908497411574581901989_u128,152523100482362191223901178717094797619_u128];
(*_13).1 = 39658_u16 as f64;
(*_13).0 = [220070219573615045884169774251450302446_u128,195507009218808489318845913035841289320_u128,13448561644128587570272913207114268041_u128,253392956344617105653997458875280414176_u128,137958945670566957487947778154143037100_u128];
(*_13).0 = [335127002924582783577929533906110308555_u128,74353239137876993383045634223292279658_u128,114581063591361098589888674787769071235_u128,199672666842949905976038509385232453954_u128,195263610233222259254309712913368184491_u128];
(*_2) = (-8905097918203931121_i64) * (-2767481079370842890_i64);
_11.3 = !_9;
_11.3 = _9;
(*_13).0 = [317860342654594680671932421794244414065_u128,143714007668731225588038903933416365344_u128,106378051043110906225858979854028053108_u128,97516070485090463171054222312459271831_u128,98131193339782477116047987270266226211_u128];
(*_2) = 4828318367311659837_i64 & 3904952394578313691_i64;
Call((*_2) = fn16(Move(_11), Move(_2), Move(_13)), ReturnTo(bb2), UnwindUnreachable())
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
(*_13).0 = [_15,_15,_15,_15,_15];
(*_13).0 = [_15,_15,_15,_15,_15];
_25 = 2_i8 ^ (-68_i8);
(*_2) = 978258673431578409_i64 | (-9005503850014816491_i64);
(*_13).1 = 14108940349980704024_u64 as f64;
(*_13).0 = [_15,_15,_15,_15,_15];
_11.3 = _9;
_31 = core::ptr::addr_of_mut!(_29);
(*_13).0 = [_15,_15,_15,_15,_15];
(*_31) = _6 + _5;
(*_13).0 = [_15,_15,_15,_15,_15];
(*_13).0 = [_15,_15,_15,_15,_15];
(*_13).0 = [_15,_15,_15,_15,_15];
(*_13).1 = _25 as f64;
match _21 {
0 => bb10,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb5,
5 => bb6,
6 => bb7,
85526628487685199979701126140657725551 => bb12,
_ => bb8
}
}
bb12 = {
_14 = _22;
_3 = (*_31);
_17 = [_16];
(*_2) = (-5504530657044860845_i64) + (-920666270518551532_i64);
(*_13).0 = [_15,_15,_15,_15,_15];
(*_31) = _8 * _5;
_28 = -(*_13).1;
_24 = &_16;
match _16 {
0 => bb11,
1 => bb2,
2 => bb9,
3 => bb8,
4 => bb5,
5 => bb6,
6 => bb13,
33343 => bb15,
_ => bb14
}
}
bb13 = {
Return()
}
bb14 = {
(*_2) = 919310958369408317_i64 + (-7040438932741296090_i64);
_13 = core::ptr::addr_of!(_11.1);
(*_2) = 1771314953166532332_i64;
(*_13).0 = [251573601273176403795596379246870616994_u128,147055506819289176257233192450652060753_u128,130907875447745634300360475787808832792_u128,288388623010123306465870915044139879546_u128,64084611752446306342907459244937633483_u128];
(*_13).1 = 23768113258925807541286357378676886799_i128 as f64;
(*_2) = !(-8422287750004732458_i64);
(*_13).0 = [78323670905479956485982031341366518815_u128,254930661051328099250798176603070687027_u128,295633075847151161765528906387275855422_u128,338483067524089993937323848867998883264_u128,184647859410820359157469348530917454686_u128];
_11.3 = !_9;
(*_13).1 = 6221473184608559723_u64 as f64;
(*_13).1 = 0_usize as f64;
(*_2) = _11.3 as i64;
(*_13).0 = [83005546635325642072809619295819479189_u128,76003849190832224891583400247864715105_u128,166482407822561999554978483408307892796_u128,160422989542072143908497411574581901989_u128,152523100482362191223901178717094797619_u128];
(*_13).1 = 39658_u16 as f64;
(*_13).0 = [220070219573615045884169774251450302446_u128,195507009218808489318845913035841289320_u128,13448561644128587570272913207114268041_u128,253392956344617105653997458875280414176_u128,137958945670566957487947778154143037100_u128];
(*_13).0 = [335127002924582783577929533906110308555_u128,74353239137876993383045634223292279658_u128,114581063591361098589888674787769071235_u128,199672666842949905976038509385232453954_u128,195263610233222259254309712913368184491_u128];
(*_2) = (-8905097918203931121_i64) * (-2767481079370842890_i64);
_11.3 = !_9;
_11.3 = _9;
(*_13).0 = [317860342654594680671932421794244414065_u128,143714007668731225588038903933416365344_u128,106378051043110906225858979854028053108_u128,97516070485090463171054222312459271831_u128,98131193339782477116047987270266226211_u128];
(*_2) = 4828318367311659837_i64 & 3904952394578313691_i64;
Call((*_2) = fn16(Move(_11), Move(_2), Move(_13)), ReturnTo(bb2), UnwindUnreachable())
}
bb15 = {
(*_13).1 = _28;
(*_2) = (*_31) as i64;
(*_2) = _15 as i64;
_7 = _9;
Goto(bb16)
}
bb16 = {
(*_13).1 = -_28;
(*_13).0 = [_15,_15,_15,_15,_15];
(*_13).1 = 1697294728_u32 as f64;
(*_2) = 3389272860_u32 as i64;
_21 = 75060456591855493504456601343449437489_i128 + (-53984316680706786323296533046708323716_i128);
(*_13).1 = _28;
_4 = (*_31) * _3;
_26 = (*_31) + _18;
(*_13).1 = _28 + _28;
(*_13).1 = _28;
match (*_24) {
0 => bb1,
1 => bb10,
2 => bb3,
3 => bb6,
4 => bb5,
5 => bb17,
6 => bb18,
33343 => bb20,
_ => bb19
}
}
bb17 = {
(*_13).1 = _28;
(*_2) = (*_31) as i64;
(*_2) = _15 as i64;
_7 = _9;
Goto(bb16)
}
bb18 = {
(*_2) = 919310958369408317_i64 + (-7040438932741296090_i64);
_13 = core::ptr::addr_of!(_11.1);
(*_2) = 1771314953166532332_i64;
(*_13).0 = [251573601273176403795596379246870616994_u128,147055506819289176257233192450652060753_u128,130907875447745634300360475787808832792_u128,288388623010123306465870915044139879546_u128,64084611752446306342907459244937633483_u128];
(*_13).1 = 23768113258925807541286357378676886799_i128 as f64;
(*_2) = !(-8422287750004732458_i64);
(*_13).0 = [78323670905479956485982031341366518815_u128,254930661051328099250798176603070687027_u128,295633075847151161765528906387275855422_u128,338483067524089993937323848867998883264_u128,184647859410820359157469348530917454686_u128];
_11.3 = !_9;
(*_13).1 = 6221473184608559723_u64 as f64;
(*_13).1 = 0_usize as f64;
(*_2) = _11.3 as i64;
(*_13).0 = [83005546635325642072809619295819479189_u128,76003849190832224891583400247864715105_u128,166482407822561999554978483408307892796_u128,160422989542072143908497411574581901989_u128,152523100482362191223901178717094797619_u128];
(*_13).1 = 39658_u16 as f64;
(*_13).0 = [220070219573615045884169774251450302446_u128,195507009218808489318845913035841289320_u128,13448561644128587570272913207114268041_u128,253392956344617105653997458875280414176_u128,137958945670566957487947778154143037100_u128];
(*_13).0 = [335127002924582783577929533906110308555_u128,74353239137876993383045634223292279658_u128,114581063591361098589888674787769071235_u128,199672666842949905976038509385232453954_u128,195263610233222259254309712913368184491_u128];
(*_2) = (-8905097918203931121_i64) * (-2767481079370842890_i64);
_11.3 = !_9;
_11.3 = _9;
(*_13).0 = [317860342654594680671932421794244414065_u128,143714007668731225588038903933416365344_u128,106378051043110906225858979854028053108_u128,97516070485090463171054222312459271831_u128,98131193339782477116047987270266226211_u128];
(*_2) = 4828318367311659837_i64 & 3904952394578313691_i64;
Call((*_2) = fn16(Move(_11), Move(_2), Move(_13)), ReturnTo(bb2), UnwindUnreachable())
}
bb19 = {
(*_2) = 1001745079492496973_i64;
(*_13).0 = [_15,_15,_15,_15,_15];
(*_2) = (-5402216729795172554_i64);
_21 = 85526628487685199979701126140657725551_i128;
(*_2) = -5074111839436822147_i64;
_11.1.1 = (-1735_i16) as f64;
match _15 {
0 => bb1,
1 => bb5,
2 => bb6,
3 => bb7,
4 => bb8,
5 => bb9,
70124279001198750751515901785978969174 => bb11,
_ => bb10
}
}
bb20 = {
(*_13).1 = _28;
(*_13).0 = [_15,_15,_15,_15,_15];
_34.1 = _25;
(*_31) = (*_24) as f32;
(*_13).1 = _28 - _28;
(*_13).1 = 2073171168_i32 as f64;
_27 = !5832196547305672251_u64;
(*_2) = (-8439031512973971341_i64);
(*_31) = _4;
(*_13).1 = _28 + _28;
(*_13).1 = _28 + _28;
(*_13).1 = _28 * _28;
(*_2) = _22 as i64;
(*_13).1 = _15 as f64;
(*_13).1 = _28 * _28;
(*_13).0 = [_15,_15,_15,_15,_15];
_33.0 = (*_13).1 >= (*_13).1;
Call(_33.1 = fn19(Move(_11), Move(_13), Move(_31), (*_2), (*_31)), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
(*_2) = (-6285453874734091751_i64);
_11.1.0 = [_15,_15,_15,_15,_15];
(*_2) = _33.0 as i64;
_2 = core::ptr::addr_of_mut!((*_2));
_11.2 = core::ptr::addr_of_mut!((*_2));
(*_2) = _15 as i64;
_34.3 = &(*_24);
_11.3 = _33.0 | _33.0;
_37.2 = core::ptr::addr_of_mut!((*_2));
(*_2) = '\u{6b857}' as i64;
_39 = _21 | _21;
(*_2) = 186532959413783081_i64;
_25 = _34.1;
_29 = _6;
(*_2) = (-7293134375120786433_i64);
Goto(bb22)
}
bb22 = {
_31 = core::ptr::addr_of_mut!(_26);
(*_2) = 4310302479203724138_i64 - (-7410615553465822281_i64);
_34.2 = Move(_37.2);
_11.2 = core::ptr::addr_of_mut!((*_2));
_37.1 = _25 | _34.1;
(*_2) = 3839455856054467831_i64 - (-3732578125332126566_i64);
(*_31) = _14 as f32;
(*_2) = 3650240446559541376_i64;
_36 = '\u{44484}';
_5 = (*_31) * (*_31);
(*_2) = !(-6630626265545937906_i64);
_12 = (*_31) * _8;
_18 = _4 * (*_31);
(*_31) = -_18;
_32 = _37.1 + _37.1;
(*_31) = -_4;
_14 = _22;
(*_2) = !7788546467506876933_i64;
_11.1.1 = -_28;
_13 = core::ptr::addr_of!(_11.1);
(*_13).1 = (-424351858_i32) as f64;
(*_31) = _18;
(*_31) = _18 * _6;
_27 = 672285784325924777_u64;
Goto(bb23)
}
bb23 = {
(*_31) = -_4;
(*_13).0 = [_15,_15,_15,_15,_15];
_32 = _37.1 + _25;
_25 = -_37.1;
(*_13).1 = _28 + _28;
_18 = (*_31) + (*_31);
match _16 {
0 => bb1,
1 => bb24,
33343 => bb26,
_ => bb25
}
}
bb24 = {
(*_13).1 = (-9633414877869689730420330418095113153_i128) as f64;
_19 = core::ptr::addr_of!(_12);
_8 = (*_19);
_26 = 912293528_u32 as f32;
_11.2 = core::ptr::addr_of_mut!(RET);
(*_19) = _4;
_22 = _7 as isize;
_6 = (*_19) * (*_19);
(*_13).1 = (-104_i8) as f64;
_11.2 = core::ptr::addr_of_mut!(RET);
_5 = (*_19) * (*_19);
(*_13).1 = _16 as f64;
_2 = core::ptr::addr_of_mut!(RET);
(*_2) = 3208719033291672780_i64 >> _22;
(*_2) = (-1396994242291396778_i64) >> _16;
_12 = 66_i8 as f32;
_23 = core::ptr::addr_of_mut!(_19);
(*_19) = 3_usize as f32;
(*_2) = -(-837599856370101225_i64);
_11.0 = &mut (*_23);
(*_2) = 5625345708822327169_i64 & (-4784097534455581784_i64);
_16 = 33343_u16;
(*_2) = (-4117240373438881636_i64) & 3945188758114953814_i64;
(*_13).0 = [_15,_15,_15,_15,_15];
(*_13).1 = 85_i8 as f64;
_29 = -_18;
(*_2) = '\u{5b635}' as i64;
Goto(bb4)
}
bb25 = {
(*_2) = 1001745079492496973_i64;
(*_13).0 = [_15,_15,_15,_15,_15];
(*_2) = (-5402216729795172554_i64);
_21 = 85526628487685199979701126140657725551_i128;
(*_2) = -5074111839436822147_i64;
_11.1.1 = (-1735_i16) as f64;
match _15 {
0 => bb1,
1 => bb5,
2 => bb6,
3 => bb7,
4 => bb8,
5 => bb9,
70124279001198750751515901785978969174 => bb11,
_ => bb10
}
}
bb26 = {
(*_13).0 = [_15,_15,_15,_15,_15];
(*_13).0 = [_15,_15,_15,_15,_15];
_21 = _39;
(*_31) = _4;
_24 = Move(_34.3);
_18 = (*_31) + (*_31);
_11.1.0 = [_15,_15,_15,_15,_15];
_29 = (*_31) - (*_31);
match _16 {
0 => bb10,
1 => bb16,
33343 => bb27,
_ => bb7
}
}
bb27 = {
_26 = _4 * _6;
(*_2) = 2187103227647771456_i64;
_5 = (*_31) - (*_31);
_33.2 = _39 as i8;
(*_13).0 = [_15,_15,_15,_15,_15];
_31 = core::ptr::addr_of_mut!(_29);
(*_31) = _18 - _26;
_3 = (*_31) * _18;
(*_13).0 = [_15,_15,_15,_15,_15];
(*_2) = (-6791201129880622165_i64) * 8903314330083694415_i64;
_2 = core::ptr::addr_of_mut!(_44);
(*_13).0 = [_15,_15,_15,_15,_15];
(*_2) = RET & RET;
(*_2) = RET;
_37.2 = core::ptr::addr_of_mut!((*_2));
(*_13).1 = _28;
_16 = 56234_u16;
_45 = [6_u8,80_u8,156_u8,196_u8,115_u8,234_u8,108_u8];
_51.1 = _33.2;
_12 = 16925151472404816001_usize as f32;
_49 = &(*_13).1;
_37.1 = _34.1 ^ _32;
Goto(bb28)
}
bb28 = {
(*_2) = _33.1 as i64;
_50.0 = (*_13).0;
_50 = (_11.1.0, (*_49));
_25 = -_51.1;
(*_13).0 = _50.0;
(*_31) = _5 - _5;
_34.3 = &_16;
(*_2) = _15 as i64;
_33.3 = &mut _33.1;
(*_2) = -RET;
(*_13).0 = [_15,_15,_15,_15,_15];
(*_31) = _5;
(*_2) = RET;
(*_2) = RET;
(*_2) = RET;
(*_2) = RET;
(*_2) = _16 as i64;
(*_13).1 = _28;
_43 = _36;
(*_2) = RET;
(*_31) = _6;
(*_31) = _3;
_54 = _11.3 & _11.3;
match _27 {
0 => bb1,
1 => bb2,
2 => bb20,
3 => bb4,
4 => bb19,
5 => bb6,
672285784325924777 => bb30,
_ => bb29
}
}
bb29 = {
Return()
}
bb30 = {
(*_13).0 = [_15,_15,_15,_15,_15];
_11.1.0 = [_15,_15,_15,_15,_15];
_11.1 = (_50.0, _50.1);
(*_31) = (*_13).1 as f32;
(*_2) = (*_13).1 as i64;
(*_2) = _16 as i64;
Goto(bb31)
}
bb31 = {
(*_31) = 4202855667_u32 as f32;
_34.2 = Move(_11.2);
(*_2) = RET;
_54 = _11.3 | _11.3;
(*_31) = _3 * _5;
(*_2) = _22 as i64;
(*_2) = RET;
_51.2 = core::ptr::addr_of_mut!((*_2));
(*_13) = (_50.0, _28);
(*_13).0 = [_15,_15,_15,_15,_15];
_45 = [124_u8,142_u8,91_u8,178_u8,234_u8,176_u8,13_u8];
_11.1.0 = _50.0;
(*_13) = (_50.0, _28);
(*_13) = (_50.0, _50.1);
_13 = core::ptr::addr_of!((*_13));
_57 = 12599485871251109038_usize - 7518147328987225844_usize;
(*_13).1 = _50.1;
(*_13) = _50;
(*_13) = _50;
_37.1 = _32;
_36 = _43;
match _15 {
0 => bb32,
1 => bb33,
70124279001198750751515901785978969174 => bb35,
_ => bb34
}
}
bb32 = {
(*_2) = 1001745079492496973_i64;
(*_13).0 = [_15,_15,_15,_15,_15];
(*_2) = (-5402216729795172554_i64);
_21 = 85526628487685199979701126140657725551_i128;
(*_2) = -5074111839436822147_i64;
_11.1.1 = (-1735_i16) as f64;
match _15 {
0 => bb1,
1 => bb5,
2 => bb6,
3 => bb7,
4 => bb8,
5 => bb9,
70124279001198750751515901785978969174 => bb11,
_ => bb10
}
}
bb33 = {
(*_13).1 = _28;
(*_2) = (*_31) as i64;
(*_2) = _15 as i64;
_7 = _9;
Goto(bb16)
}
bb34 = {
Return()
}
bb35 = {
(*_2) = !RET;
(*_2) = RET;
_66 = _22 >> _21;
_29 = _26 * _5;
_28 = _11.1.1 + (*_13).1;
Goto(bb36)
}
bb36 = {
(*_13) = _50;
(*_13).0 = [_15,_15,_15,_15,_15];
_11.2 = Move(_51.2);
_51.3 = &_16;
_2 = Move(_11.2);
(*_13).0 = _50.0;
(*_13).1 = _28 - _28;
(*_13) = (_50.0, _28);
_13 = core::ptr::addr_of!((*_13));
_46 = _14;
(*_13).1 = _32 as f64;
(*_13).0 = [_15,_15,_15,_15,_15];
_34.2 = core::ptr::addr_of_mut!(RET);
_34.1 = -_37.1;
_41 = [_15,_15,_15,_15,_15,_15,_15,_15];
_37.3 = &_16;
_51.3 = Move(_34.3);
_66 = _14 + _14;
_17 = [_16];
(*_13).0 = _50.0;
(*_31) = _4 * _3;
(*_13).0 = _50.0;
_53 = &mut _49;
(*_53) = &_50.1;
_17 = [_16];
Goto(bb37)
}
bb37 = {
(*_13).0 = _50.0;
(*_13) = _50;
RET = _44 & _44;
_28 = -(*_13).1;
(*_53) = &(*_13).1;
(*_31) = _5 + _5;
_11.2 = Move(_34.2);
RET = _44 | _44;
_70 = [2397362392_u32];
match _15 {
0 => bb13,
1 => bb15,
2 => bb24,
3 => bb9,
70124279001198750751515901785978969174 => bb38,
_ => bb10
}
}
bb38 = {
_43 = _36;
(*_13) = _50;
(*_53) = &_28;
_27 = 488292716411713996_u64 & 7372702629856068980_u64;
(*_13).1 = -_50.1;
_75 = 3806966654_u32 - 3436179854_u32;
_8 = (*_31);
Goto(bb39)
}
bb39 = {
(*_13).1 = _28 * _50.1;
_31 = core::ptr::addr_of_mut!((*_31));
(*_53) = &(*_13).1;
(*_13).1 = _50.1 * _28;
(*_31) = (-1543962045_i32) as f32;
(*_31) = _8;
_20 = &mut (*_53);
_63.1.1 = (*_13).1 + (*_13).1;
(*_20) = &_50.1;
(*_13) = _50;
_60 = (*_31) as i64;
_48 = _75 >> _60;
(*_13).1 = _27 as f64;
(*_13).1 = _63.1.1 * _63.1.1;
match _15 {
0 => bb27,
1 => bb20,
2 => bb15,
3 => bb28,
4 => bb19,
70124279001198750751515901785978969174 => bb40,
_ => bb17
}
}
bb40 = {
_61 = _25 as u128;
_82 = &mut (*_20);
_13 = core::ptr::addr_of!((*_13));
_37.1 = _48 as i8;
_44 = _60 - _60;
(*_13).0 = [_61,_61,_61,_61,_61];
_4 = -(*_31);
_27 = 2022735292488074234_u64 - 13046577294791490323_u64;
_77 = -_21;
_11.1 = (_50.0, _63.1.1);
_65 = Move(_23);
(*_13) = (_50.0, _63.1.1);
_23 = Move(_65);
_63.2 = core::ptr::addr_of_mut!(_60);
_35 = [_61,_61,_61,_61,_61,_61,_61,_61];
_63.1.1 = (*_13).1 * (*_13).1;
(*_13).0 = [_61,_15,_61,_61,_61];
(*_13).1 = _63.1.1 * _63.1.1;
(*_13).1 = _63.1.1;
_63.3 = (*_31) == (*_31);
Goto(bb41)
}
bb41 = {
(*_31) = _5;
(*_31) = -_3;
_2 = core::ptr::addr_of_mut!(_60);
_79.1 = !_57;
(*_82) = &(*_13).1;
(*_2) = (*_13).1 as i64;
(*_13) = (_50.0, _50.1);
_26 = -(*_31);
_51.1 = _46 as i8;
(*_13).1 = _63.1.1 * _63.1.1;
(*_13).0 = [_61,_61,_15,_61,_61];
_44 = (*_2) >> _48;
(*_13) = (_50.0, _63.1.1);
_74 = [_27,_27];
(*_13).0 = _50.0;
(*_13).0 = [_61,_61,_61,_61,_61];
(*_13).1 = _63.1.1 + _63.1.1;
_85 = _36;
_84 = _41;
_77 = _21 * _39;
(*_13).1 = -_63.1.1;
(*_13).1 = _63.1.1 + _28;
_21 = _16 as i128;
(*_82) = &_50.1;
(*_2) = _44;
match _15 {
0 => bb5,
1 => bb6,
70124279001198750751515901785978969174 => bb42,
_ => bb23
}
}
bb42 = {
_63.1.1 = (*_13).1 + (*_13).1;
(*_13) = (_50.0, _63.1.1);
_79 = (_37.1, _57, _66);
_74 = [_27,_27];
(*_2) = -_44;
(*_31) = _79.0 as f32;
(*_31) = _5;
(*_13).1 = _50.1;
(*_13) = (_50.0, _63.1.1);
(*_13).1 = _63.1.1;
(*_82) = &(*_13).1;
(*_31) = 1455422272_i32 as f32;
_34.2 = core::ptr::addr_of_mut!((*_2));
(*_13).0 = [_15,_15,_61,_61,_61];
(*_13) = (_50.0, _63.1.1);
(*_31) = -_18;
_43 = _36;
(*_2) = _44 + _44;
_87 = _79.2;
match _15 {
0 => bb11,
70124279001198750751515901785978969174 => bb44,
_ => bb43
}
}
bb43 = {
(*_2) = (-6285453874734091751_i64);
_11.1.0 = [_15,_15,_15,_15,_15];
(*_2) = _33.0 as i64;
_2 = core::ptr::addr_of_mut!((*_2));
_11.2 = core::ptr::addr_of_mut!((*_2));
(*_2) = _15 as i64;
_34.3 = &(*_24);
_11.3 = _33.0 | _33.0;
_37.2 = core::ptr::addr_of_mut!((*_2));
(*_2) = '\u{6b857}' as i64;
_39 = _21 | _21;
(*_2) = 186532959413783081_i64;
_25 = _34.1;
_29 = _6;
(*_2) = (-7293134375120786433_i64);
Goto(bb22)
}
bb44 = {
_63.3 = _9;
_43 = _85;
_40 = &mut _79;
(*_2) = _44 | _44;
_95.3 = !_54;
_51.2 = core::ptr::addr_of_mut!((*_2));
(*_13).0 = [_61,_61,_61,_15,_61];
(*_31) = (*_13).1 as f32;
(*_82) = &_63.1.1;
(*_31) = -_18;
(*_13).1 = _50.1 * _63.1.1;
(*_82) = &(*_13).1;
match _15 {
0 => bb13,
1 => bb2,
2 => bb30,
3 => bb31,
4 => bb33,
5 => bb28,
6 => bb18,
70124279001198750751515901785978969174 => bb46,
_ => bb45
}
}
bb45 = {
(*_2) = 919310958369408317_i64 + (-7040438932741296090_i64);
_13 = core::ptr::addr_of!(_11.1);
(*_2) = 1771314953166532332_i64;
(*_13).0 = [251573601273176403795596379246870616994_u128,147055506819289176257233192450652060753_u128,130907875447745634300360475787808832792_u128,288388623010123306465870915044139879546_u128,64084611752446306342907459244937633483_u128];
(*_13).1 = 23768113258925807541286357378676886799_i128 as f64;
(*_2) = !(-8422287750004732458_i64);
(*_13).0 = [78323670905479956485982031341366518815_u128,254930661051328099250798176603070687027_u128,295633075847151161765528906387275855422_u128,338483067524089993937323848867998883264_u128,184647859410820359157469348530917454686_u128];
_11.3 = !_9;
(*_13).1 = 6221473184608559723_u64 as f64;
(*_13).1 = 0_usize as f64;
(*_2) = _11.3 as i64;
(*_13).0 = [83005546635325642072809619295819479189_u128,76003849190832224891583400247864715105_u128,166482407822561999554978483408307892796_u128,160422989542072143908497411574581901989_u128,152523100482362191223901178717094797619_u128];
(*_13).1 = 39658_u16 as f64;
(*_13).0 = [220070219573615045884169774251450302446_u128,195507009218808489318845913035841289320_u128,13448561644128587570272913207114268041_u128,253392956344617105653997458875280414176_u128,137958945670566957487947778154143037100_u128];
(*_13).0 = [335127002924582783577929533906110308555_u128,74353239137876993383045634223292279658_u128,114581063591361098589888674787769071235_u128,199672666842949905976038509385232453954_u128,195263610233222259254309712913368184491_u128];
(*_2) = (-8905097918203931121_i64) * (-2767481079370842890_i64);
_11.3 = !_9;
_11.3 = _9;
(*_13).0 = [317860342654594680671932421794244414065_u128,143714007668731225588038903933416365344_u128,106378051043110906225858979854028053108_u128,97516070485090463171054222312459271831_u128,98131193339782477116047987270266226211_u128];
(*_2) = 4828318367311659837_i64 & 3904952394578313691_i64;
Call((*_2) = fn16(Move(_11), Move(_2), Move(_13)), ReturnTo(bb2), UnwindUnreachable())
}
bb46 = {
(*_2) = !_44;
(*_40) = (_25, _57, _46);
(*_40) = (_37.1, _57, _87);
(*_40).2 = _66;
(*_31) = _26 - _4;
_37.1 = (*_40).0 >> (*_40).0;
(*_40).0 = _37.1 | _37.1;
_50.1 = (*_13).1;
_99 = _85;
(*_40).2 = (*_40).0 as isize;
_51.1 = _16 as i8;
_8 = (*_2) as f32;
_7 = !_95.3;
_51.2 = Move(_2);
(*_40).2 = !_14;
_78 = Move(_23);
(*_13) = (_50.0, _63.1.1);
(*_82) = &_28;
(*_40) = (_37.1, _57, _66);
(*_13).1 = _50.1 - _63.1.1;
_77 = !_39;
_39 = _77 | _77;
match _16 {
56234 => bb48,
_ => bb47
}
}
bb47 = {
(*_13).1 = _28;
(*_2) = (*_31) as i64;
(*_2) = _15 as i64;
_7 = _9;
Goto(bb16)
}
bb48 = {
(*_13).1 = -_50.1;
(*_40).2 = -_87;
(*_82) = &_50.1;
(*_40).2 = !_87;
(*_13).0 = [_61,_61,_61,_61,_61];
_26 = _27 as f32;
_18 = -(*_31);
(*_82) = &(*_13).1;
(*_31) = _3 + _3;
(*_40).2 = _22 - _87;
(*_40).2 = _87;
(*_13) = (_50.0, _50.1);
(*_31) = _3 + _8;
_13 = core::ptr::addr_of!((*_13));
(*_13) = _50;
_27 = 10998779579938097778_u64;
(*_40).2 = -_87;
(*_40).0 = _37.1 << _60;
(*_82) = &_50.1;
_92 = _36;
_31 = core::ptr::addr_of_mut!((*_31));
(*_40) = (_37.1, _57, _87);
(*_40).0 = _37.1 - _37.1;
(*_82) = &(*_13).1;
Goto(bb49)
}
bb49 = {
_2 = core::ptr::addr_of_mut!(RET);
(*_40).2 = -_46;
(*_82) = &_50.1;
(*_31) = _3 + _5;
(*_31) = -_5;
(*_40) = (_37.1, _57, _66);
(*_31) = _4 - _4;
(*_13).1 = _50.1;
_73 = (*_40).2;
_45 = [121_u8,27_u8,135_u8,169_u8,59_u8,189_u8,173_u8];
(*_40) = (_37.1, _57, _66);
(*_40) = (_37.1, _57, _66);
(*_13).0 = [_61,_61,_61,_61,_61];
(*_13).1 = _50.1;
_93 = (*_40).1 + (*_40).1;
_24 = &_16;
_99 = _43;
_67 = _54 & _54;
(*_13) = (_50.0, _63.1.1);
(*_31) = _18;
(*_40) = (_37.1, _93, _46);
Goto(bb50)
}
bb50 = {
Call(_111 = dump_var(15_usize, 79_usize, Move(_79), 14_usize, Move(_14), 25_usize, Move(_25), 17_usize, Move(_17)), ReturnTo(bb51), UnwindUnreachable())
}
bb51 = {
Call(_111 = dump_var(15_usize, 99_usize, Move(_99), 39_usize, Move(_39), 60_usize, Move(_60), 85_usize, Move(_85)), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
Call(_111 = dump_var(15_usize, 7_usize, Move(_7), 41_usize, Move(_41), 77_usize, Move(_77), 22_usize, Move(_22)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Call(_111 = dump_var(15_usize, 75_usize, Move(_75), 36_usize, Move(_36), 45_usize, Move(_45), 73_usize, Move(_73)), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Call(_111 = dump_var(15_usize, 54_usize, Move(_54), 46_usize, Move(_46), 15_usize, Move(_15), 112_usize, _112), ReturnTo(bb55), UnwindUnreachable())
}
bb55 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn16(mut _1: (&'static mut *const f32, ([u128; 5], f64), *mut i64, bool),mut _2: *mut i64,mut _3: *const ([u128; 5], f64)) -> i64 {
mir! {
type RET = i64;
let _4: &'static mut [u64; 6];
let _5: i128;
let _6: &'static mut (i8, usize, isize);
let _7: isize;
let _8: isize;
let _9: &'static mut u128;
let _10: (u128, *mut f32, [u16; 1], u8);
let _11: *mut Adt43;
let _12: isize;
let _13: &'static mut [u64; 6];
let _14: char;
let _15: bool;
let _16: &'static mut [u8; 3];
let _17: *const [u64; 6];
let _18: isize;
let _19: *const *mut usize;
let _20: i8;
let _21: *mut Adt43;
let _22: u16;
let _23: f32;
let _24: [u16; 6];
let _25: f32;
let _26: *mut &'static mut i16;
let _27: i8;
let _28: (bool, f32, Adt43);
let _29: Adt72;
let _30: [u16; 1];
let _31: *mut f32;
let _32: char;
let _33: i8;
let _34: *const f32;
let _35: i64;
let _36: &'static mut [u8; 3];
let _37: isize;
let _38: isize;
let _39: *const [u64; 6];
let _40: (i16, u32, f32, u8);
let _41: Adt62;
let _42: *mut *const f32;
let _43: isize;
let _44: (&'static u16, u16, (i16, u32, f32, u8));
let _45: &'static i16;
let _46: u16;
let _47: [u8; 3];
let _48: isize;
let _49: [u8; 3];
let _50: bool;
let _51: &'static mut [u8; 3];
let _52: *mut i64;
let _53: bool;
let _54: *mut u8;
let _55: (*const ([u64; 2],), *const f32);
let _56: *const ([u64; 2],);
let _57: *mut u8;
let _58: (u128, *mut f32, [u16; 1], u8);
let _59: *mut *const [u64; 6];
let _60: isize;
let _61: *mut *const f32;
let _62: isize;
let _63: f64;
let _64: *mut *const f32;
let _65: &'static mut u128;
let _66: *mut Adt43;
let _67: bool;
let _68: char;
let _69: bool;
let _70: Adt60;
let _71: bool;
let _72: [u16; 6];
let _73: u64;
let _74: ();
let _75: ();
{
RET = 788743919658672327_i64 + 5044559774551969251_i64;
RET = (-6181389387096257472_i64) - 5004197326305339097_i64;
_2 = Move(_1.2);
_1.3 = false | false;
_3 = core::ptr::addr_of!(_1.1);
(*_3).0 = [126783998899753259643226124295184570315_u128,17540147211256420745628810893889668485_u128,123034165850590570860376306649933731171_u128,46597819303154138519386693922624394796_u128,143071634489562199637060480165505089052_u128];
_5 = 90699260754439811279966181155442628363_i128;
_1.2 = core::ptr::addr_of_mut!(RET);
RET = 835902275827104693_i64;
(*_3).1 = RET as f64;
(*_3).1 = 31_isize as f64;
(*_3).0 = [300182867939857244417339135246942514975_u128,104636285715522133824595778272638581820_u128,236027547811658009455652829417292897632_u128,164946998301765016065691250331360336364_u128,253489900405937446350505000227077109074_u128];
(*_3).0 = [82359185749938620157937961657701936085_u128,236334158728936666357999262014198751691_u128,209760220982737833743455442549455224301_u128,144348066433275399794083874129842673386_u128,290551061679128895530457582680014927356_u128];
(*_3).1 = 2506555894_u32 as f64;
Call((*_3).1 = core::intrinsics::transmute(RET), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
(*_3).1 = 14_i8 as f64;
(*_3).1 = 29488_u16 as f64;
_5 = 4228627524821628970045475677298534121_i128;
(*_3).0 = [335308713897705142325575685159375247859_u128,68547320783634767095127318047637730315_u128,70753266320294015094569399600808475060_u128,278553298837570774860857294880112315541_u128,236572821574627803824153049322642448566_u128];
(*_3).1 = (-6462_i16) as f64;
(*_3).1 = RET as f64;
(*_3).0 = [203784033041235164901837969100244018815_u128,117653111319232215035631725001725629343_u128,203930857528119529695454982373790868731_u128,121830197704425251768642968154439716120_u128,279550831867088959494358376499072301054_u128];
Goto(bb2)
}
bb2 = {
(*_3).0 = [152299193165983722701551086691721514448_u128,133597838383663196130168613185948769867_u128,187258186360021824056842571124068191182_u128,210758721729065185532954048956167857674_u128,253951841388237485940217868031068348752_u128];
(*_3).1 = (-1924665613_i32) as f64;
_3 = core::ptr::addr_of!((*_3));
(*_3).0 = [158577274224196344212430024767666963038_u128,122865341599786914185997850442401331097_u128,330175582073230767672041654920115411504_u128,164874134162511311550373201747653475773_u128,175555065060800272413675799315327758071_u128];
(*_3).1 = 13462224698272431328_u64 as f64;
_3 = core::ptr::addr_of!((*_3));
(*_3).0 = [38427725311446726738491673616588570311_u128,59870617915741563146565980136622581261_u128,85640199427400997210949434375893663430_u128,106692221650005334161005244779682923607_u128,238188198625854385975308112119117474353_u128];
(*_3).0 = [224030817719405865802434759577454124167_u128,266338299253952938784904660710961349456_u128,265103106692272825484415451050339840775_u128,292252194628763143677730425087802277152_u128,237900912320453301955891286339558382346_u128];
(*_3).1 = 14718862628744083207_usize as f64;
_1.1.0 = [216987079189488911333627275818210250747_u128,72780489122093646258354321600047338193_u128,78951514079245144946020496544936271088_u128,302444784921819421705197859982512599170_u128,27538969620520793014234797665009403106_u128];
(*_3).0 = [177587922646167708396309519264422214672_u128,101478983798164973743560705725842289105_u128,151510463578483718806799358166722758078_u128,138091940111547121352316726113985554229_u128,245243502300315569817574613384536906090_u128];
(*_3).1 = 111_u8 as f64;
(*_3).1 = 5_usize as f64;
_5 = (-35445542373880552952675764016307069144_i128);
(*_3).0 = [299234832064067165635401875530118584544_u128,316768894637792142961237452676770166792_u128,261359649600585817363057180762730679220_u128,77669575016768792948884995212635389564_u128,2466953812427803779999127183948405934_u128];
(*_3).0 = [11479905738642686816223832842638046341_u128,220166156627741102111227167620456712709_u128,40873191213807970968198814052846638741_u128,145533993112766013000946561277236066377_u128,138011941420791424592143122583257836685_u128];
(*_3).1 = _5 as f64;
_1.2 = core::ptr::addr_of_mut!(RET);
(*_3).1 = 3238628010471909823_u64 as f64;
match _5 {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
4 => bb7,
5 => bb8,
6 => bb9,
304836824547057910510698843415461142312 => bb11,
_ => bb10
}
}
bb3 = {
(*_3).1 = 14_i8 as f64;
(*_3).1 = 29488_u16 as f64;
_5 = 4228627524821628970045475677298534121_i128;
(*_3).0 = [335308713897705142325575685159375247859_u128,68547320783634767095127318047637730315_u128,70753266320294015094569399600808475060_u128,278553298837570774860857294880112315541_u128,236572821574627803824153049322642448566_u128];
(*_3).1 = (-6462_i16) as f64;
(*_3).1 = RET as f64;
(*_3).0 = [203784033041235164901837969100244018815_u128,117653111319232215035631725001725629343_u128,203930857528119529695454982373790868731_u128,121830197704425251768642968154439716120_u128,279550831867088959494358376499072301054_u128];
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
(*_3).1 = _5 as f64;
_1.1.1 = 9223372036854775807_isize as f64;
(*_3).0 = [102543713345458832563689753797389671394_u128,140723834605720971988542395509157814552_u128,287579048713397545066474906774858645624_u128,306730885231211578628588170903323402593_u128,57710401220455456320255996945385960887_u128];
RET = -(-6505431430337783361_i64);
RET = -(-826029927016483246_i64);
(*_3).0 = [85770971426618571147121091915569275168_u128,322280631249881391079942939257987568821_u128,6567315109522456761388363713864116369_u128,156480380285534097256973907722357041801_u128,40386554063888322929807761784749986514_u128];
_7 = 13_isize | (-9223372036854775808_isize);
(*_3).1 = RET as f64;
(*_3).1 = _5 as f64;
RET = 3722951267690909724_i64 ^ 5052209127308585878_i64;
(*_3).1 = _5 as f64;
(*_3).0 = [48864570203706862616990796018801635040_u128,38941841011109563570688925907544664812_u128,123965988475982721058769337427882410975_u128,240110445282510835817493167776851352356_u128,100060926473899223000474212590510147634_u128];
_8 = _7 ^ _7;
(*_3).0 = [217942760490808351997873660187561009660_u128,8978465342567433040487945187380479732_u128,213287718185855466422322277247054080704_u128,143292305050014768812506868624778480517_u128,127809959570096251350854766104489986538_u128];
_10.2 = [55399_u16];
_1.2 = Move(_2);
Goto(bb12)
}
bb12 = {
_10.0 = 42514083760838022906090727881510358504_u128 | 87757733003874947496634987346370451533_u128;
(*_3).0 = [_10.0,_10.0,_10.0,_10.0,_10.0];
(*_3).0 = [_10.0,_10.0,_10.0,_10.0,_10.0];
_10.0 = 1084686405_u32 as u128;
(*_3).0 = [_10.0,_10.0,_10.0,_10.0,_10.0];
_8 = -_7;
(*_3).0 = [_10.0,_10.0,_10.0,_10.0,_10.0];
_10.2 = [40952_u16];
(*_3).0 = [_10.0,_10.0,_10.0,_10.0,_10.0];
(*_3).1 = (-72_i8) as f64;
(*_3).1 = RET as f64;
(*_3).0 = [_10.0,_10.0,_10.0,_10.0,_10.0];
(*_3).1 = 2_u8 as f64;
(*_3).1 = _5 as f64;
_3 = core::ptr::addr_of!(_1.1);
_2 = Move(_1.2);
(*_3).1 = _10.0 as f64;
(*_3).0 = [_10.0,_10.0,_10.0,_10.0,_10.0];
(*_3).0 = [_10.0,_10.0,_10.0,_10.0,_10.0];
_10.0 = 95_u8 as u128;
(*_3).0 = [_10.0,_10.0,_10.0,_10.0,_10.0];
_1.1.0 = [_10.0,_10.0,_10.0,_10.0,_10.0];
(*_3).0 = [_10.0,_10.0,_10.0,_10.0,_10.0];
_12 = (-13_i8) as isize;
(*_3).0 = [_10.0,_10.0,_10.0,_10.0,_10.0];
Goto(bb13)
}
bb13 = {
(*_3).0 = [_10.0,_10.0,_10.0,_10.0,_10.0];
(*_3).1 = _10.0 as f64;
Goto(bb14)
}
bb14 = {
_10.0 = 54210413387027164370767844529321083176_u128 << RET;
_9 = &mut _10.0;
(*_3).0 = [(*_9),(*_9),(*_9),(*_9),(*_9)];
(*_3).1 = (-20_i8) as f64;
(*_9) = 187133857547056834202899969940569226549_u128 - 107530636795774702617604820063955420057_u128;
(*_3).0 = [(*_9),(*_9),(*_9),(*_9),(*_9)];
(*_3).1 = 160_u8 as f64;
(*_3).0 = [(*_9),(*_9),(*_9),(*_9),(*_9)];
(*_3).1 = 16008614189039549198_u64 as f64;
(*_3).1 = 32384_u16 as f64;
(*_9) = (-1503941968_i32) as u128;
_2 = core::ptr::addr_of_mut!(RET);
(*_2) = 4832743307998322846_i64 - (-1967324866777740832_i64);
(*_3).0 = [(*_9),(*_9),(*_9),(*_9),(*_9)];
(*_9) = 161677070406374347904578007583864064808_u128;
(*_3).1 = 3_usize as f64;
(*_9) = 309773196948909904266259519504850323239_u128;
(*_2) = (-6776668233372703939_i64) - (-2049945196439993295_i64);
(*_3).1 = 41174_u16 as f64;
(*_9) = 162330319787235730561161312219000934923_u128;
(*_2) = 7539055395099981864_i64;
(*_9) = 229108976164313515439422192392520222896_u128;
(*_2) = !4494173967178462669_i64;
(*_3).0 = [(*_9),(*_9),(*_9),(*_9),(*_9)];
Goto(bb15)
}
bb15 = {
(*_3).0 = [(*_9),(*_9),(*_9),(*_9),(*_9)];
(*_2) = 1984593998871702439_i64 * (-1024157599328177860_i64);
_3 = core::ptr::addr_of!((*_3));
_1.1.0 = [(*_9),(*_9),(*_9),(*_9),(*_9)];
match (*_9) {
0 => bb16,
1 => bb17,
2 => bb18,
3 => bb19,
4 => bb20,
5 => bb21,
6 => bb22,
229108976164313515439422192392520222896 => bb24,
_ => bb23
}
}
bb16 = {
(*_3).1 = 14_i8 as f64;
(*_3).1 = 29488_u16 as f64;
_5 = 4228627524821628970045475677298534121_i128;
(*_3).0 = [335308713897705142325575685159375247859_u128,68547320783634767095127318047637730315_u128,70753266320294015094569399600808475060_u128,278553298837570774860857294880112315541_u128,236572821574627803824153049322642448566_u128];
(*_3).1 = (-6462_i16) as f64;
(*_3).1 = RET as f64;
(*_3).0 = [203784033041235164901837969100244018815_u128,117653111319232215035631725001725629343_u128,203930857528119529695454982373790868731_u128,121830197704425251768642968154439716120_u128,279550831867088959494358376499072301054_u128];
Goto(bb2)
}
bb17 = {
(*_3).0 = [_10.0,_10.0,_10.0,_10.0,_10.0];
(*_3).1 = _10.0 as f64;
Goto(bb14)
}
bb18 = {
_10.0 = 42514083760838022906090727881510358504_u128 | 87757733003874947496634987346370451533_u128;
(*_3).0 = [_10.0,_10.0,_10.0,_10.0,_10.0];
(*_3).0 = [_10.0,_10.0,_10.0,_10.0,_10.0];
_10.0 = 1084686405_u32 as u128;
(*_3).0 = [_10.0,_10.0,_10.0,_10.0,_10.0];
_8 = -_7;
(*_3).0 = [_10.0,_10.0,_10.0,_10.0,_10.0];
_10.2 = [40952_u16];
(*_3).0 = [_10.0,_10.0,_10.0,_10.0,_10.0];
(*_3).1 = (-72_i8) as f64;
(*_3).1 = RET as f64;
(*_3).0 = [_10.0,_10.0,_10.0,_10.0,_10.0];
(*_3).1 = 2_u8 as f64;
(*_3).1 = _5 as f64;
_3 = core::ptr::addr_of!(_1.1);
_2 = Move(_1.2);
(*_3).1 = _10.0 as f64;
(*_3).0 = [_10.0,_10.0,_10.0,_10.0,_10.0];
(*_3).0 = [_10.0,_10.0,_10.0,_10.0,_10.0];
_10.0 = 95_u8 as u128;
(*_3).0 = [_10.0,_10.0,_10.0,_10.0,_10.0];
_1.1.0 = [_10.0,_10.0,_10.0,_10.0,_10.0];
(*_3).0 = [_10.0,_10.0,_10.0,_10.0,_10.0];
_12 = (-13_i8) as isize;
(*_3).0 = [_10.0,_10.0,_10.0,_10.0,_10.0];
Goto(bb13)
}
bb19 = {
(*_3).0 = [152299193165983722701551086691721514448_u128,133597838383663196130168613185948769867_u128,187258186360021824056842571124068191182_u128,210758721729065185532954048956167857674_u128,253951841388237485940217868031068348752_u128];
(*_3).1 = (-1924665613_i32) as f64;
_3 = core::ptr::addr_of!((*_3));
(*_3).0 = [158577274224196344212430024767666963038_u128,122865341599786914185997850442401331097_u128,330175582073230767672041654920115411504_u128,164874134162511311550373201747653475773_u128,175555065060800272413675799315327758071_u128];
(*_3).1 = 13462224698272431328_u64 as f64;
_3 = core::ptr::addr_of!((*_3));
(*_3).0 = [38427725311446726738491673616588570311_u128,59870617915741563146565980136622581261_u128,85640199427400997210949434375893663430_u128,106692221650005334161005244779682923607_u128,238188198625854385975308112119117474353_u128];
(*_3).0 = [224030817719405865802434759577454124167_u128,266338299253952938784904660710961349456_u128,265103106692272825484415451050339840775_u128,292252194628763143677730425087802277152_u128,237900912320453301955891286339558382346_u128];
(*_3).1 = 14718862628744083207_usize as f64;
_1.1.0 = [216987079189488911333627275818210250747_u128,72780489122093646258354321600047338193_u128,78951514079245144946020496544936271088_u128,302444784921819421705197859982512599170_u128,27538969620520793014234797665009403106_u128];
(*_3).0 = [177587922646167708396309519264422214672_u128,101478983798164973743560705725842289105_u128,151510463578483718806799358166722758078_u128,138091940111547121352316726113985554229_u128,245243502300315569817574613384536906090_u128];
(*_3).1 = 111_u8 as f64;
(*_3).1 = 5_usize as f64;
_5 = (-35445542373880552952675764016307069144_i128);
(*_3).0 = [299234832064067165635401875530118584544_u128,316768894637792142961237452676770166792_u128,261359649600585817363057180762730679220_u128,77669575016768792948884995212635389564_u128,2466953812427803779999127183948405934_u128];
(*_3).0 = [11479905738642686816223832842638046341_u128,220166156627741102111227167620456712709_u128,40873191213807970968198814052846638741_u128,145533993112766013000946561277236066377_u128,138011941420791424592143122583257836685_u128];
(*_3).1 = _5 as f64;
_1.2 = core::ptr::addr_of_mut!(RET);
(*_3).1 = 3238628010471909823_u64 as f64;
match _5 {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
4 => bb7,
5 => bb8,
6 => bb9,
304836824547057910510698843415461142312 => bb11,
_ => bb10
}
}
bb20 = {
Return()
}
bb21 = {
Return()
}
bb22 = {
Return()
}
bb23 = {
Return()
}
bb24 = {
(*_2) = -8769429019762610239_i64;
_1.2 = core::ptr::addr_of_mut!((*_2));
(*_3).1 = _5 as f64;
(*_3).0 = [(*_9),(*_9),(*_9),(*_9),(*_9)];
(*_3).1 = 34677_u16 as f64;
(*_9) = 278724765372156350485683835145490260651_u128 + 154603569762306804007462525974719982881_u128;
_7 = _12;
(*_3).0 = [(*_9),(*_9),(*_9),(*_9),(*_9)];
_1.1.1 = 24582_i16 as f64;
(*_2) = !(-7988043046640094212_i64);
(*_2) = (-648431198634969584_i64) | (-3972244066893749412_i64);
(*_3).0 = [(*_9),(*_9),(*_9),(*_9),(*_9)];
(*_3).0 = [(*_9),(*_9),(*_9),(*_9),(*_9)];
_5 = -90292971221962102794537144435515099120_i128;
(*_9) = 297506834334540001013340388880167047733_u128;
(*_3).0 = [(*_9),(*_9),(*_9),(*_9),(*_9)];
(*_3).1 = 15082_i16 as f64;
(*_3).0 = [(*_9),(*_9),(*_9),(*_9),(*_9)];
_18 = _8;
Goto(bb25)
}
bb25 = {
_14 = '\u{10beb5}';
(*_3).0 = [(*_9),(*_9),(*_9),(*_9),(*_9)];
(*_3).1 = 10889_i16 as f64;
(*_3).1 = 2_usize as f64;
(*_9) = 80856413762627155584539155566164981576_u128 * 135970583622727409344220597368042364919_u128;
(*_3).0 = [(*_9),(*_9),(*_9),(*_9),(*_9)];
(*_3).1 = 2113795559_u32 as f64;
Call((*_2) = fn17(Move(_2), (*_3).0, Move(_1.2), Move(_3), Move(_9), (*_3), (*_3), (*_3), (*_3).1, _14), ReturnTo(bb26), UnwindUnreachable())
}
bb26 = {
_1.2 = core::ptr::addr_of_mut!(RET);
_3 = core::ptr::addr_of!(_1.1);
(*_3).0 = [28808879683066781364338259876146852300_u128,148725044050682913392233963399362479399_u128,297455134975205423577691444291719069570_u128,202549394979864539007786091163611582683_u128,170216908658007924704650100069157114590_u128];
(*_3).0 = [12592884162438649312661144297175166135_u128,158200894872150741893494614862622418819_u128,165286662095377748222395753662434284696_u128,194996988977775357270735228728160568227_u128,58838261347278314398430911830990070582_u128];
(*_3).1 = _8 as f64;
(*_3).0 = [259326714779950026428900680119525969270_u128,26911626488061522406895264791167568812_u128,224143694051925193176698486582116731563_u128,178736900082510091140041631975627776242_u128,196969810749279946778563104037304178231_u128];
(*_3).1 = RET as f64;
(*_3).1 = 74_u8 as f64;
_5 = 18304068042802980186002260424319360723_i128 >> _12;
(*_3).1 = 3706087921_u32 as f64;
_1.2 = core::ptr::addr_of_mut!(RET);
(*_3).0 = [237956193134446710932554979357483981635_u128,110177017686698123002510186277719511692_u128,156399516770968524966854428810559460617_u128,190487054392808726659549844543942418422_u128,280798540908452614895980043444180414270_u128];
(*_3).1 = _5 as f64;
(*_3).0 = [86142958547359227560556143010720380078_u128,172550572300907177119840271003663845128_u128,5827449206733816695570892430882731167_u128,254629432916021641687235654715765912322_u128,220287672043656647922239097171192773952_u128];
_20 = 56_i8 - (-96_i8);
(*_3).1 = 6_usize as f64;
_18 = -_8;
_22 = 13731_u16 << _8;
(*_3).1 = _22 as f64;
_1.1.1 = 459590232_u32 as f64;
(*_3).1 = 105439215_u32 as f64;
Goto(bb27)
}
bb27 = {
(*_3).0 = [124972261416296136731147313163771945023_u128,211842970099096496151271760181231117793_u128,143361994689053549737649108636307424236_u128,81284826395052977668417582390114884674_u128,120775116275270130082861378989686831960_u128];
(*_3).0 = [112297316065032222738483016355735161449_u128,238758640731311317768788727663040119783_u128,45910193831953908495749168896388831189_u128,8123505773972927271645079815559614790_u128,299747071007735935790451703608225366966_u128];
(*_3).0 = [103707097468761308848295840421098374218_u128,11701199439967171572521842227724193146_u128,340064463489695965441129022795059164091_u128,145492673734833494699352697767134529912_u128,66536546581027933489642388881670486901_u128];
(*_3).1 = _5 as f64;
_27 = 21748575540778916664047134320869374740_u128 as i8;
(*_3).0 = [15421444479694388916217442719606561945_u128,189242070571270503923593664076222444470_u128,331374495173350640040736998914890538411_u128,213941965695843802500709057187186206892_u128,113292049009502110952449163331286868275_u128];
_20 = !_27;
_2 = core::ptr::addr_of_mut!(RET);
(*_2) = (-7727120520136608352_i64) & (-2117870556225690445_i64);
RET = 20976_i16 as i64;
_25 = _27 as f32;
(*_2) = 371539374367691246_i64 - (-3592070513708267743_i64);
(*_3).0 = [22070949093061518046685303111309490322_u128,185631207336068471498230578219948829090_u128,12661592444026281820556804019257327728_u128,34304094143085726436192420337448400964_u128,304457496108937768256090998453556943593_u128];
_1.2 = core::ptr::addr_of_mut!((*_2));
_25 = RET as f32;
(*_3).0 = [217430264402937811420146423833308532763_u128,289278371238518213577739661183555649304_u128,129058349735622612834184918743452286860_u128,295811264934843301378809593551254532572_u128,239424559335241587287872212234745358882_u128];
_28.1 = (*_3).1 as f32;
(*_2) = 1999187524691778222_i64 - (-2952947152019815044_i64);
(*_3).1 = _5 as f64;
_31 = core::ptr::addr_of_mut!(_23);
(*_31) = _25;
Goto(bb28)
}
bb28 = {
(*_31) = _28.1;
(*_3).1 = 196_u8 as f64;
(*_3).1 = (*_31) as f64;
(*_3).0 = [314652101787001704529381255741725128859_u128,206759439237138834211431763851597620955_u128,129132496565660782072914920146941669860_u128,168827624832876635616713445152264712155_u128,207038146753352962578234966982847822031_u128];
_20 = 21_u8 as i8;
(*_31) = -_25;
(*_31) = _28.1 + _28.1;
(*_3).0 = [100840525326958816339236746313677071455_u128,304052448521722673631927829193544056802_u128,232168891057802321344825673839039637665_u128,228413309835826059792370254605613394052_u128,242790400058679307562221268281034498190_u128];
(*_3).1 = _5 as f64;
_7 = _18;
(*_31) = 7261_i16 as f32;
(*_2) = (-3016442426400755612_i64);
Goto(bb29)
}
bb29 = {
(*_3).1 = (*_31) as f64;
_31 = core::ptr::addr_of_mut!((*_31));
(*_2) = 8429391765602851619_i64 - (-4336639304489916449_i64);
(*_3).1 = (*_2) as f64;
(*_3).1 = _5 as f64;
(*_3).0 = [68224587137303249992029308338465261306_u128,253071821985892741991025312899511136733_u128,291104307580432104020056469199945880821_u128,96220853117905857195425510372058959701_u128,42852152371963788495644691114528333821_u128];
(*_2) = (-3738527675639847087_i64) << _27;
(*_2) = _1.3 as i64;
_28.0 = !_1.3;
(*_2) = 7005194381360834600_i64 << _8;
(*_3).0 = [337291770487418505775873005057326510457_u128,21686614343779561122177847752284595457_u128,118244119201632609665854801559520539270_u128,86586257452949377552802615835886731439_u128,266532748046500159008219263509647968623_u128];
_25 = (*_31) * (*_31);
_18 = _12 & _8;
_34 = core::ptr::addr_of!((*_31));
_20 = 16173813156140348651_u64 as i8;
(*_3).1 = (*_2) as f64;
(*_2) = 3321417503138941524_i64;
_1.3 = !_28.0;
(*_31) = -_28.1;
_35 = (*_2) & (*_2);
(*_3).0 = [244398825883753673847152070896905091758_u128,65234590439616184038170938636572365280_u128,193768847717686240998035079763188771340_u128,81448626641667829591305449522606269377_u128,190107626134920894017849648255615249217_u128];
(*_2) = _35;
(*_31) = _27 as f32;
(*_3).0 = [201859350404946211868937917045445280310_u128,173169302992011014105779146949381772087_u128,114466052488805682961613564510280333028_u128,246026548624792221479065398852420361344_u128,47328497738558807550156331085237418330_u128];
_8 = _18 << (*_2);
_15 = (*_3).1 < (*_3).1;
(*_2) = _35 << _18;
Goto(bb30)
}
bb30 = {
(*_3).1 = (-15240_i16) as f64;
(*_3).0 = [214108630612266565340816403361882368392_u128,224190974643750097023214558071260298653_u128,195783144703244271503695820471921493260_u128,38526506486890159747787048122796992656_u128,239937570030107485110746758486267457022_u128];
_11 = core::ptr::addr_of_mut!(_28.2);
(*_31) = -_25;
(*_3).1 = 121181647618960433481128207047899984712_u128 as f64;
(*_31) = -_28.1;
(*_2) = !_35;
(*_2) = _35 & _35;
(*_2) = _35;
_34 = core::ptr::addr_of!((*_31));
(*_34) = _28.1;
(*_3).1 = (*_2) as f64;
_38 = _18;
(*_34) = _28.1 + _25;
_24 = [_22,_22,_22,_22,_22,_22];
(*_3).0 = [326750749518903299061860289063729336140_u128,59176791573851483954454877086938519923_u128,202649935126126325400835704455477002636_u128,299563617837003441171386472939118805667_u128,56753226623903438722259267150852414505_u128];
(*_3).1 = _22 as f64;
(*_31) = _25 - _25;
(*_3).1 = 1840263261075851349_usize as f64;
(*_3).0 = [114306523291243715449465443924386586154_u128,264264915276980065300005870565606481178_u128,220224800385308651485341239797373387512_u128,311140320020693982515592137978180801986_u128,275063602923976397003303379386752425043_u128];
_40.1 = 1309370120_u32;
_42 = core::ptr::addr_of_mut!(_34);
_25 = (*_31);
Goto(bb31)
}
bb31 = {
(*_3).0 = [91767976825048196968687438123963825529_u128,234127586394947655634479134332040374915_u128,16628097376240021151689180057392072525_u128,254322696040017104338654252694027986584_u128,161156462744025336445399802458579746091_u128];
(*_42) = core::ptr::addr_of!((*_31));
(*_3).1 = 236_u8 as f64;
_33 = (*_3).1 as i8;
(*_34) = _25 + _28.1;
(*_42) = core::ptr::addr_of!((*_31));
(*_31) = _25;
(*_3).1 = _40.1 as f64;
(*_3).0 = [241365038757467079033240761592615425973_u128,261460708060063468086619576406070192922_u128,220380617550761632878550466115985340627_u128,238692532972859959992667945108621298363_u128,109553003986859504546991738166101172874_u128];
(*_3).1 = _27 as f64;
_1.1.1 = (-32331_i16) as f64;
(*_2) = _35 | _35;
_25 = (*_31);
_40 = ((-12328_i16), 2901064462_u32, (*_31), 251_u8);
_31 = core::ptr::addr_of_mut!((*_31));
(*_42) = core::ptr::addr_of!((*_31));
(*_3).0 = [261859187862094063394643980295439802511_u128,16818258382019190512580219081440281441_u128,102980446498903672019956602561641894430_u128,209593955463829958718682212741466532266_u128,49802919962332776395276168515630601187_u128];
(*_3).0 = [267055160284955908901973089105064470587_u128,1460228129698293072638767044794108058_u128,191568964604604449054708005529840439620_u128,220550404970775224484696878587483793179_u128,239602232545125974045845548339699033654_u128];
(*_3).0 = [147316941792103810074536898837967770518_u128,131609501466343633561141468581856317052_u128,232438092831504926413960783430772737187_u128,259553680283649529984483722453241761472_u128,285764080572510279785099788728824778354_u128];
(*_3).0 = [100176570942937652275483028484290475599_u128,646243267458795448800793276842911059_u128,20654079396655944160702357951568857989_u128,81393922124992842916445662804988498504_u128,269237685512920138671892718358386106057_u128];
(*_34) = _28.1;
_43 = !_18;
(*_3).1 = _22 as f64;
(*_31) = 168264149577682531737831434526402955838_u128 as f32;
(*_31) = _40.2 * _25;
(*_3).1 = _38 as f64;
(*_3).1 = _40.3 as f64;
(*_31) = _40.2;
match _40.3 {
251 => bb32,
_ => bb17
}
}
bb32 = {
_44.2.1 = _40.1 | _40.1;
(*_3).1 = _40.0 as f64;
(*_3).1 = _40.3 as f64;
(*_2) = _40.0 as i64;
(*_42) = core::ptr::addr_of!(_40.2);
(*_34) = (*_31) - (*_31);
(*_31) = (*_34) + (*_34);
(*_42) = core::ptr::addr_of!((*_31));
_1.1.0 = [70719068381779006885967532361055407983_u128,335226845439787181347183485555521977239_u128,258458212953885902212639731431832189523_u128,26570375043761646416596781243085858887_u128,323014206157018688419415631796144857074_u128];
(*_34) = -_40.2;
(*_3).0 = [137660272809066152502000912970678805985_u128,35404472787589261234882396304391686020_u128,97316304447553060281298219209931543014_u128,199905606562606162971759300471296214368_u128,21230831219419002597345305872785350550_u128];
_7 = _8;
_7 = _8 & _8;
(*_34) = _12 as f32;
Goto(bb33)
}
bb33 = {
(*_31) = _33 as f32;
(*_3).0 = [15340516992797449031423827453906365616_u128,51105197090178932322295311374414193180_u128,160071989920880752129995457123203601229_u128,61000916589025446458621829067709147404_u128,329511325588294228691900513882595036867_u128];
(*_3).1 = 67558760354961365110846160930392813520_u128 as f64;
_40.0 = (-2136_i16) & (-25095_i16);
(*_3).1 = 337872911717538265988294091838093626036_u128 as f64;
match _40.3 {
0 => bb13,
1 => bb15,
251 => bb35,
_ => bb34
}
}
bb34 = {
Return()
}
bb35 = {
(*_2) = !_35;
(*_42) = core::ptr::addr_of!((*_31));
(*_31) = 17043720502085866500_usize as f32;
(*_31) = (*_3).1 as f32;
_44.2.2 = _40.2 + _40.2;
_44.2.1 = !_40.1;
_48 = 0_usize as isize;
(*_2) = _35 ^ _35;
(*_3).1 = _33 as f64;
_46 = _22;
(*_3).0 = [323905646976454657646535427331629143212_u128,286569790904460282619737968463081155285_u128,116937952328287106384193861339873380463_u128,17916365028514675583183262020013711930_u128,75765459336304562426225687159107101805_u128];
(*_31) = _44.2.2 - _44.2.2;
(*_2) = -_35;
(*_42) = core::ptr::addr_of!(_25);
(*_31) = (*_34) * _44.2.2;
_45 = &_40.0;
(*_3).0 = [307208335484731075657151426218477012483_u128,291154322157796365155937920384459838908_u128,39454191164811341161945743444417178102_u128,234836048055991166334429244401195857229_u128,303738646152483066602562174104143410821_u128];
(*_42) = core::ptr::addr_of!((*_34));
(*_42) = core::ptr::addr_of!((*_34));
(*_34) = (*_31) - (*_31);
(*_34) = _23 * (*_31);
_49 = [_40.3,_40.3,_40.3];
RET = _35 | _35;
(*_34) = _23 * (*_31);
_30 = [_22];
Goto(bb36)
}
bb36 = {
(*_2) = _8 as i64;
_40 = (2372_i16, _44.2.1, (*_34), 35_u8);
_46 = _22 - _22;
(*_3).1 = _43 as f64;
_33 = _20;
(*_3).1 = (*_2) as f64;
_2 = core::ptr::addr_of_mut!((*_2));
(*_34) = (*_31) * (*_31);
_47 = _49;
(*_3).0 = [103009400675338888574666980334846759724_u128,146526095336347802581335354684593778193_u128,14697964429943889326880183941838267226_u128,174190387814606518481164870850153695181_u128,170193286088220872517189324735117763449_u128];
(*_34) = (*_31) + (*_31);
(*_3).1 = 1_usize as f64;
match _40.3 {
0 => bb35,
1 => bb12,
2 => bb3,
3 => bb31,
4 => bb8,
5 => bb7,
6 => bb37,
35 => bb39,
_ => bb38
}
}
bb37 = {
(*_3).0 = [_10.0,_10.0,_10.0,_10.0,_10.0];
(*_3).1 = _10.0 as f64;
Goto(bb14)
}
bb38 = {
_1.2 = core::ptr::addr_of_mut!(RET);
_3 = core::ptr::addr_of!(_1.1);
(*_3).0 = [28808879683066781364338259876146852300_u128,148725044050682913392233963399362479399_u128,297455134975205423577691444291719069570_u128,202549394979864539007786091163611582683_u128,170216908658007924704650100069157114590_u128];
(*_3).0 = [12592884162438649312661144297175166135_u128,158200894872150741893494614862622418819_u128,165286662095377748222395753662434284696_u128,194996988977775357270735228728160568227_u128,58838261347278314398430911830990070582_u128];
(*_3).1 = _8 as f64;
(*_3).0 = [259326714779950026428900680119525969270_u128,26911626488061522406895264791167568812_u128,224143694051925193176698486582116731563_u128,178736900082510091140041631975627776242_u128,196969810749279946778563104037304178231_u128];
(*_3).1 = RET as f64;
(*_3).1 = 74_u8 as f64;
_5 = 18304068042802980186002260424319360723_i128 >> _12;
(*_3).1 = 3706087921_u32 as f64;
_1.2 = core::ptr::addr_of_mut!(RET);
(*_3).0 = [237956193134446710932554979357483981635_u128,110177017686698123002510186277719511692_u128,156399516770968524966854428810559460617_u128,190487054392808726659549844543942418422_u128,280798540908452614895980043444180414270_u128];
(*_3).1 = _5 as f64;
(*_3).0 = [86142958547359227560556143010720380078_u128,172550572300907177119840271003663845128_u128,5827449206733816695570892430882731167_u128,254629432916021641687235654715765912322_u128,220287672043656647922239097171192773952_u128];
_20 = 56_i8 - (-96_i8);
(*_3).1 = 6_usize as f64;
_18 = -_8;
_22 = 13731_u16 << _8;
(*_3).1 = _22 as f64;
_1.1.1 = 459590232_u32 as f64;
(*_3).1 = 105439215_u32 as f64;
Goto(bb27)
}
bb39 = {
_16 = &mut _49;
_52 = core::ptr::addr_of_mut!((*_2));
(*_3).0 = [202840306170088351868861534909294276763_u128,298253468066437380634344026290980458947_u128,218409574366449728346273289662383903089_u128,301970539893064726729719820812018559558_u128,307227939142514034631155680399460233541_u128];
(*_3).0 = [295621722330209671237735148163354261669_u128,76174140889436853311357542357295974156_u128,61351801922835435420499256153001586538_u128,305387118228057183869458901751971472347_u128,273906703807876264185127896943475644216_u128];
(*_2) = _35 * _35;
_43 = _38 << _40.3;
(*_42) = core::ptr::addr_of!((*_31));
(*_42) = core::ptr::addr_of!((*_31));
(*_34) = -_25;
RET = _35 + _35;
_40.2 = -(*_34);
(*_16) = [_40.3,_40.3,_40.3];
(*_42) = core::ptr::addr_of!((*_31));
(*_42) = core::ptr::addr_of!((*_31));
_43 = _8 + _7;
(*_2) = (*_3).1 as i64;
_1.3 = _15;
(*_3).1 = (-1134556326_i32) as f64;
(*_3).0 = [103430165822072940195285598178305137079_u128,205213845695859372063924180973752249151_u128,17122213052626984467547274387613824164_u128,254573090284464497887432200924421269835_u128,117434936931633575901795930138948276028_u128];
_44.2.1 = _43 as u32;
_1.3 = _15;
(*_31) = 10936669679698026741_u64 as f32;
(*_3).1 = _27 as f64;
_43 = !_7;
match _40.3 {
0 => bb19,
35 => bb41,
_ => bb40
}
}
bb40 = {
_1.2 = core::ptr::addr_of_mut!(RET);
_3 = core::ptr::addr_of!(_1.1);
(*_3).0 = [28808879683066781364338259876146852300_u128,148725044050682913392233963399362479399_u128,297455134975205423577691444291719069570_u128,202549394979864539007786091163611582683_u128,170216908658007924704650100069157114590_u128];
(*_3).0 = [12592884162438649312661144297175166135_u128,158200894872150741893494614862622418819_u128,165286662095377748222395753662434284696_u128,194996988977775357270735228728160568227_u128,58838261347278314398430911830990070582_u128];
(*_3).1 = _8 as f64;
(*_3).0 = [259326714779950026428900680119525969270_u128,26911626488061522406895264791167568812_u128,224143694051925193176698486582116731563_u128,178736900082510091140041631975627776242_u128,196969810749279946778563104037304178231_u128];
(*_3).1 = RET as f64;
(*_3).1 = 74_u8 as f64;
_5 = 18304068042802980186002260424319360723_i128 >> _12;
(*_3).1 = 3706087921_u32 as f64;
_1.2 = core::ptr::addr_of_mut!(RET);
(*_3).0 = [237956193134446710932554979357483981635_u128,110177017686698123002510186277719511692_u128,156399516770968524966854428810559460617_u128,190487054392808726659549844543942418422_u128,280798540908452614895980043444180414270_u128];
(*_3).1 = _5 as f64;
(*_3).0 = [86142958547359227560556143010720380078_u128,172550572300907177119840271003663845128_u128,5827449206733816695570892430882731167_u128,254629432916021641687235654715765912322_u128,220287672043656647922239097171192773952_u128];
_20 = 56_i8 - (-96_i8);
(*_3).1 = 6_usize as f64;
_18 = -_8;
_22 = 13731_u16 << _8;
(*_3).1 = _22 as f64;
_1.1.1 = 459590232_u32 as f64;
(*_3).1 = 105439215_u32 as f64;
Goto(bb27)
}
bb41 = {
_58 = (157470699937872224934469137559578178179_u128, Move(_31), _30, _40.3);
Goto(bb42)
}
bb42 = {
_35 = _58.3 as i64;
(*_42) = core::ptr::addr_of!(_25);
_27 = _20 * _20;
_44.2.3 = !_40.3;
(*_42) = core::ptr::addr_of!((*_34));
(*_3).0 = [_58.0,_58.0,_58.0,_58.0,_58.0];
(*_34) = _40.2;
_58.0 = 184469675134939662185486555480532263858_u128 - 191925782062945694121309184330706624901_u128;
_51 = &mut (*_16);
_63 = -(*_3).1;
(*_3).1 = -_63;
(*_3).1 = _63 + _63;
(*_34) = _40.2 + _40.2;
_63 = (*_3).1 * (*_3).1;
_35 = !(*_2);
(*_42) = core::ptr::addr_of!((*_34));
(*_51) = [_58.3,_44.2.3,_44.2.3];
_40.1 = _44.2.1 ^ _44.2.1;
_53 = _1.3;
(*_3).0 = [_58.0,_58.0,_58.0,_58.0,_58.0];
(*_42) = core::ptr::addr_of!((*_34));
_28.1 = (*_34);
_28.1 = _25 + _25;
_44.0 = &_46;
(*_34) = _28.1;
_57 = core::ptr::addr_of_mut!(_40.3);
Goto(bb43)
}
bb43 = {
_20 = _27;
_64 = core::ptr::addr_of_mut!((*_42));
_60 = (*_34) as isize;
(*_42) = core::ptr::addr_of!((*_34));
(*_34) = _28.1 * _40.2;
(*_42) = core::ptr::addr_of!((*_34));
(*_34) = (*_57) as f32;
_44.1 = _22;
_47 = [(*_57),(*_57),(*_57)];
(*_2) = _35 ^ _35;
_51 = Move(_16);
(*_34) = -_44.2.2;
RET = _35;
_33 = _1.3 as i8;
(*_3).0 = [_58.0,_58.0,_58.0,_58.0,_58.0];
(*_3).0 = [_58.0,_58.0,_58.0,_58.0,_58.0];
_32 = _14;
(*_57) = _44.2.3 - _44.2.3;
match _40.0 {
0 => bb44,
2372 => bb46,
_ => bb45
}
}
bb44 = {
_1.2 = core::ptr::addr_of_mut!(RET);
_3 = core::ptr::addr_of!(_1.1);
(*_3).0 = [28808879683066781364338259876146852300_u128,148725044050682913392233963399362479399_u128,297455134975205423577691444291719069570_u128,202549394979864539007786091163611582683_u128,170216908658007924704650100069157114590_u128];
(*_3).0 = [12592884162438649312661144297175166135_u128,158200894872150741893494614862622418819_u128,165286662095377748222395753662434284696_u128,194996988977775357270735228728160568227_u128,58838261347278314398430911830990070582_u128];
(*_3).1 = _8 as f64;
(*_3).0 = [259326714779950026428900680119525969270_u128,26911626488061522406895264791167568812_u128,224143694051925193176698486582116731563_u128,178736900082510091140041631975627776242_u128,196969810749279946778563104037304178231_u128];
(*_3).1 = RET as f64;
(*_3).1 = 74_u8 as f64;
_5 = 18304068042802980186002260424319360723_i128 >> _12;
(*_3).1 = 3706087921_u32 as f64;
_1.2 = core::ptr::addr_of_mut!(RET);
(*_3).0 = [237956193134446710932554979357483981635_u128,110177017686698123002510186277719511692_u128,156399516770968524966854428810559460617_u128,190487054392808726659549844543942418422_u128,280798540908452614895980043444180414270_u128];
(*_3).1 = _5 as f64;
(*_3).0 = [86142958547359227560556143010720380078_u128,172550572300907177119840271003663845128_u128,5827449206733816695570892430882731167_u128,254629432916021641687235654715765912322_u128,220287672043656647922239097171192773952_u128];
_20 = 56_i8 - (-96_i8);
(*_3).1 = 6_usize as f64;
_18 = -_8;
_22 = 13731_u16 << _8;
(*_3).1 = _22 as f64;
_1.1.1 = 459590232_u32 as f64;
(*_3).1 = 105439215_u32 as f64;
Goto(bb27)
}
bb45 = {
Return()
}
bb46 = {
(*_3).1 = -_63;
(*_2) = _35 + _35;
_33 = _20 + _20;
_21 = core::ptr::addr_of_mut!((*_11));
_20 = _27;
(*_2) = (*_3).1 as i64;
(*_42) = core::ptr::addr_of!((*_34));
(*_34) = _28.1;
(*_57) = _44.2.3 << _44.1;
_40.0 = 19644_i16;
_32 = _14;
(*_57) = !_58.3;
(*_3).0 = [_58.0,_58.0,_58.0,_58.0,_58.0];
_37 = _43 << _40.1;
_1.2 = core::ptr::addr_of_mut!((*_2));
_69 = _28.0;
(*_57) = _58.3 + _58.3;
_16 = &mut _47;
(*_34) = _28.1 * _44.2.2;
(*_3).1 = _63 + _63;
(*_2) = !_35;
_33 = _5 as i8;
(*_3).0 = [_58.0,_58.0,_58.0,_58.0,_58.0];
match _58.3 {
0 => bb9,
35 => bb48,
_ => bb47
}
}
bb47 = {
(*_3).1 = (*_31) as f64;
_31 = core::ptr::addr_of_mut!((*_31));
(*_2) = 8429391765602851619_i64 - (-4336639304489916449_i64);
(*_3).1 = (*_2) as f64;
(*_3).1 = _5 as f64;
(*_3).0 = [68224587137303249992029308338465261306_u128,253071821985892741991025312899511136733_u128,291104307580432104020056469199945880821_u128,96220853117905857195425510372058959701_u128,42852152371963788495644691114528333821_u128];
(*_2) = (-3738527675639847087_i64) << _27;
(*_2) = _1.3 as i64;
_28.0 = !_1.3;
(*_2) = 7005194381360834600_i64 << _8;
(*_3).0 = [337291770487418505775873005057326510457_u128,21686614343779561122177847752284595457_u128,118244119201632609665854801559520539270_u128,86586257452949377552802615835886731439_u128,266532748046500159008219263509647968623_u128];
_25 = (*_31) * (*_31);
_18 = _12 & _8;
_34 = core::ptr::addr_of!((*_31));
_20 = 16173813156140348651_u64 as i8;
(*_3).1 = (*_2) as f64;
(*_2) = 3321417503138941524_i64;
_1.3 = !_28.0;
(*_31) = -_28.1;
_35 = (*_2) & (*_2);
(*_3).0 = [244398825883753673847152070896905091758_u128,65234590439616184038170938636572365280_u128,193768847717686240998035079763188771340_u128,81448626641667829591305449522606269377_u128,190107626134920894017849648255615249217_u128];
(*_2) = _35;
(*_31) = _27 as f32;
(*_3).0 = [201859350404946211868937917045445280310_u128,173169302992011014105779146949381772087_u128,114466052488805682961613564510280333028_u128,246026548624792221479065398852420361344_u128,47328497738558807550156331085237418330_u128];
_8 = _18 << (*_2);
_15 = (*_3).1 < (*_3).1;
(*_2) = _35 << _18;
Goto(bb30)
}
bb48 = {
(*_2) = _35;
_36 = &mut (*_16);
(*_3).1 = _63 + _63;
(*_42) = core::ptr::addr_of!((*_34));
_40.2 = -(*_34);
_41 = Adt62::Variant0 { fld0: (*_2),fld1: 14324791606139322523_u64 };
(*_2) = _40.0 as i64;
_44.2.3 = (*_57) & (*_57);
(*_57) = _44.2.3 ^ _44.2.3;
match _58.3 {
0 => bb1,
1 => bb40,
2 => bb41,
3 => bb46,
4 => bb5,
35 => bb49,
_ => bb21
}
}
bb49 = {
(*_36) = [(*_57),(*_57),(*_57)];
(*_42) = core::ptr::addr_of!((*_34));
(*_42) = core::ptr::addr_of!(_25);
(*_3).1 = (*_2) as f64;
(*_3).1 = -_63;
(*_3).0 = [_58.0,_58.0,_58.0,_58.0,_58.0];
(*_3).1 = _46 as f64;
(*_34) = _28.1 - _28.1;
(*_2) = !Field::<i64>(Variant(_41, 0), 0);
Goto(bb50)
}
bb50 = {
Call(_74 = dump_var(16_usize, 47_usize, Move(_47), 24_usize, Move(_24), 7_usize, Move(_7), 38_usize, Move(_38)), ReturnTo(bb51), UnwindUnreachable())
}
bb51 = {
Call(_74 = dump_var(16_usize, 48_usize, Move(_48), 60_usize, Move(_60), 49_usize, Move(_49), 15_usize, Move(_15)), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
Call(_74 = dump_var(16_usize, 5_usize, Move(_5), 27_usize, Move(_27), 46_usize, Move(_46), 32_usize, Move(_32)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn17(mut _1: *mut i64,mut _2: [u128; 5],mut _3: *mut i64,mut _4: *const ([u128; 5], f64),mut _5: &'static mut u128,mut _6: ([u128; 5], f64),mut _7: ([u128; 5], f64),mut _8: ([u128; 5], f64),mut _9: f64,mut _10: char) -> i64 {
mir! {
type RET = i64;
let _11: u16;
let _12: *const *mut usize;
let _13: i16;
let _14: u128;
let _15: (*const ([u64; 2],), *const f32);
let _16: f32;
let _17: char;
let _18: isize;
let _19: &'static f64;
let _20: (&'static u16, u16, (i16, u32, f32, u8));
let _21: isize;
let _22: i32;
let _23: &'static i8;
let _24: *mut &'static mut i16;
let _25: isize;
let _26: i8;
let _27: (&'static u16, u16, (i16, u32, f32, u8));
let _28: char;
let _29: i64;
let _30: &'static f64;
let _31: u16;
let _32: i32;
let _33: isize;
let _34: u128;
let _35: isize;
let _36: f32;
let _37: f64;
let _38: isize;
let _39: usize;
let _40: &'static mut [u64; 6];
let _41: i64;
let _42: u64;
let _43: f64;
let _44: [u64; 5];
let _45: *mut i64;
let _46: [char; 6];
let _47: isize;
let _48: *mut &'static f64;
let _49: *const ([u128; 5], f64);
let _50: i128;
let _51: bool;
let _52: &'static f64;
let _53: &'static mut [u64; 6];
let _54: *mut &'static f64;
let _55: &'static mut [u8; 3];
let _56: i8;
let _57: isize;
let _58: char;
let _59: Adt43;
let _60: u16;
let _61: (i16, u32, f32, u8);
let _62: *mut &'static f64;
let _63: Adt43;
let _64: usize;
let _65: &'static mut &'static f64;
let _66: &'static u16;
let _67: *mut i64;
let _68: [char; 3];
let _69: *const f32;
let _70: *mut Adt43;
let _71: *mut *const f32;
let _72: &'static i16;
let _73: char;
let _74: *const *mut usize;
let _75: *mut *const [u64; 6];
let _76: u128;
let _77: *mut &'static f64;
let _78: *mut f32;
let _79: &'static u16;
let _80: *mut &'static u16;
let _81: u64;
let _82: ();
let _83: ();
{
_3 = core::ptr::addr_of_mut!(RET);
_10 = '\u{a9f08}';
(*_3) = 5333990565406790297_i64;
_7 = (_2, _8.1);
(*_3) = 170_u8 as i64;
(*_3) = true as i64;
_3 = core::ptr::addr_of_mut!((*_3));
_11 = 11039_u16 ^ 49844_u16;
(*_3) = 7906609288330196893_u64 as i64;
(*_3) = -(-1742893054296410083_i64);
(*_3) = (-2852257021483050774_i64) << _11;
(*_3) = 7661118580593967133_i64;
RET = 8358542628854296335_i64 + (-4109155045834682972_i64);
(*_3) = 3677618801707036028_i64 | 382689399988829588_i64;
(*_3) = (-6976626316491413238_i64) - (-2097921802583316738_i64);
_8.1 = (-9223372036854775808_isize) as f64;
_4 = core::ptr::addr_of!(_6);
(*_3) = false as i64;
(*_3) = 712515195179824753_i64 >> _11;
(*_4).0 = [126251703571861515854178650902455744089_u128,194830419226761380300489897602976910916_u128,336906673301772334863607976857364783544_u128,324251493084197378000870991002772887080_u128,24320710404324865469765700087656629650_u128];
(*_3) = !4660981310557280637_i64;
_8 = ((*_4).0, (*_4).1);
(*_4).0 = _8.0;
Goto(bb1)
}
bb1 = {
_14 = 211949392637167478028035058833866031608_u128 ^ 160514712201189895484712846854157819574_u128;
(*_4).1 = _8.1 + _8.1;
(*_4).0 = _2;
(*_4) = (_7.0, _9);
(*_3) = 84_i8 as i64;
(*_3) = (-9223372036854775808_isize) as i64;
(*_4).1 = _7.1 - _9;
(*_3) = _14 as i64;
(*_3) = !(-8920130663006860033_i64);
_13 = (-30592_i16) ^ (-16697_i16);
(*_4).0 = _7.0;
_15.1 = core::ptr::addr_of!(_16);
_16 = 310488441_i32 as f32;
(*_4) = (_8.0, _8.1);
(*_4).0 = [_14,_14,_14,_14,_14];
(*_4).0 = [_14,_14,_14,_14,_14];
(*_4).0 = [_14,_14,_14,_14,_14];
(*_4) = (_2, _9);
_7 = (*_4);
(*_4) = _8;
_2 = (*_4).0;
(*_3) = !8075229793000074187_i64;
_13 = 11525_i16 << (*_3);
(*_4).0 = [_14,_14,_14,_14,_14];
(*_4) = (_7.0, _7.1);
_6.0 = [_14,_14,_14,_14,_14];
Call((*_4).0 = core::intrinsics::transmute(_7.0), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
(*_4).1 = _7.1 - _7.1;
(*_4).1 = -_8.1;
(*_4).0 = _2;
_8.0 = [_14,_14,_14,_14,_14];
(*_4).0 = [_14,_14,_14,_14,_14];
_11 = 47846_u16;
_8 = (*_4);
_19 = &(*_4).1;
(*_4).0 = _2;
_21 = 9223372036854775807_isize << _14;
(*_3) = -926594696163765337_i64;
_7.1 = -(*_19);
_20.2.3 = 159_u8;
_5 = &mut _14;
_8.0 = _2;
_6.0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_4).1 = _8.1 - _8.1;
Goto(bb3)
}
bb3 = {
_10 = '\u{b570b}';
_1 = core::ptr::addr_of_mut!((*_3));
(*_3) = (-6337998059604915251_i64) << _21;
(*_4).1 = _9;
(*_5) = 228821602906446845048189350740516592767_u128 ^ 290458440634885819579886716492444622559_u128;
(*_4).1 = _7.1 - _8.1;
_20.2.1 = 1813375611_u32 << (*_3);
_20.1 = _11 ^ _11;
(*_4).1 = _9 + _9;
(*_5) = 217776042182686987804312865678864407776_u128 + 136075941592302930651911232647044217514_u128;
(*_4) = (_2, _8.1);
(*_3) = 7742734385253120394_u64 as i64;
_8 = (*_4);
(*_4) = (_2, _7.1);
_1 = core::ptr::addr_of_mut!((*_3));
(*_4).0 = _8.0;
(*_4) = (_2, _8.1);
(*_3) = 255888977281469379_i64 & 6487823749669862003_i64;
(*_5) = !149290565713918593385123743014534186170_u128;
_20.0 = &_20.1;
(*_4) = _8;
(*_4).1 = _9 * _9;
(*_4) = (_7.0, _7.1);
Goto(bb4)
}
bb4 = {
_20.0 = &_11;
(*_4) = (_2, _9);
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_3) = 10956636493610131285_u64 as i64;
_6 = (_2, _7.1);
_27.2.0 = _13;
(*_3) = (-2373123239880701950_i64) + (-5592965562368265476_i64);
(*_3) = -1305119488835251021_i64;
(*_4).0 = _8.0;
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_5) = !20939578276501218717396295726454634580_u128;
(*_4).1 = _9 + _9;
(*_4).1 = _7.1 * _9;
_7.1 = _20.2.3 as f64;
(*_4) = (_2, _8.1);
(*_5) = 25529708797037151814402433024100539893_u128;
Goto(bb5)
}
bb5 = {
(*_3) = (-3005463407431755221_i64) ^ 8273708760367354543_i64;
(*_4).1 = 6_usize as f64;
(*_4) = (_2, _8.1);
_27.1 = _20.1 + _20.1;
_13 = _27.2.0 * _27.2.0;
_2 = (*_4).0;
(*_3) = (-6656385787878976454_i64) >> (*_5);
(*_4) = (_8.0, _7.1);
(*_5) = 9050643909667224900668497462127470482_u128 - 289293413961189981366099009524001521811_u128;
_20.2.1 = !895954890_u32;
(*_4).0 = _8.0;
(*_4).1 = -_7.1;
(*_4).1 = _7.1 - _9;
_7.1 = (*_4).1;
(*_4).1 = _7.1 - _7.1;
(*_3) = 1369656778919815198_i64 + (-916656494603074144_i64);
(*_3) = -(-7611798949559127726_i64);
_18 = _20.2.3 as isize;
(*_3) = (-9091789276807432620_i64);
(*_4).1 = (*_5) as f64;
(*_3) = (-3983499929178161981_i64) + (-2832177840055955637_i64);
match _20.2.3 {
0 => bb6,
1 => bb7,
2 => bb8,
3 => bb9,
4 => bb10,
159 => bb12,
_ => bb11
}
}
bb6 = {
_20.0 = &_11;
(*_4) = (_2, _9);
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_3) = 10956636493610131285_u64 as i64;
_6 = (_2, _7.1);
_27.2.0 = _13;
(*_3) = (-2373123239880701950_i64) + (-5592965562368265476_i64);
(*_3) = -1305119488835251021_i64;
(*_4).0 = _8.0;
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_5) = !20939578276501218717396295726454634580_u128;
(*_4).1 = _9 + _9;
(*_4).1 = _7.1 * _9;
_7.1 = _20.2.3 as f64;
(*_4) = (_2, _8.1);
(*_5) = 25529708797037151814402433024100539893_u128;
Goto(bb5)
}
bb7 = {
_10 = '\u{b570b}';
_1 = core::ptr::addr_of_mut!((*_3));
(*_3) = (-6337998059604915251_i64) << _21;
(*_4).1 = _9;
(*_5) = 228821602906446845048189350740516592767_u128 ^ 290458440634885819579886716492444622559_u128;
(*_4).1 = _7.1 - _8.1;
_20.2.1 = 1813375611_u32 << (*_3);
_20.1 = _11 ^ _11;
(*_4).1 = _9 + _9;
(*_5) = 217776042182686987804312865678864407776_u128 + 136075941592302930651911232647044217514_u128;
(*_4) = (_2, _8.1);
(*_3) = 7742734385253120394_u64 as i64;
_8 = (*_4);
(*_4) = (_2, _7.1);
_1 = core::ptr::addr_of_mut!((*_3));
(*_4).0 = _8.0;
(*_4) = (_2, _8.1);
(*_3) = 255888977281469379_i64 & 6487823749669862003_i64;
(*_5) = !149290565713918593385123743014534186170_u128;
_20.0 = &_20.1;
(*_4) = _8;
(*_4).1 = _9 * _9;
(*_4) = (_7.0, _7.1);
Goto(bb4)
}
bb8 = {
(*_4).1 = _7.1 - _7.1;
(*_4).1 = -_8.1;
(*_4).0 = _2;
_8.0 = [_14,_14,_14,_14,_14];
(*_4).0 = [_14,_14,_14,_14,_14];
_11 = 47846_u16;
_8 = (*_4);
_19 = &(*_4).1;
(*_4).0 = _2;
_21 = 9223372036854775807_isize << _14;
(*_3) = -926594696163765337_i64;
_7.1 = -(*_19);
_20.2.3 = 159_u8;
_5 = &mut _14;
_8.0 = _2;
_6.0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_4).1 = _8.1 - _8.1;
Goto(bb3)
}
bb9 = {
_14 = 211949392637167478028035058833866031608_u128 ^ 160514712201189895484712846854157819574_u128;
(*_4).1 = _8.1 + _8.1;
(*_4).0 = _2;
(*_4) = (_7.0, _9);
(*_3) = 84_i8 as i64;
(*_3) = (-9223372036854775808_isize) as i64;
(*_4).1 = _7.1 - _9;
(*_3) = _14 as i64;
(*_3) = !(-8920130663006860033_i64);
_13 = (-30592_i16) ^ (-16697_i16);
(*_4).0 = _7.0;
_15.1 = core::ptr::addr_of!(_16);
_16 = 310488441_i32 as f32;
(*_4) = (_8.0, _8.1);
(*_4).0 = [_14,_14,_14,_14,_14];
(*_4).0 = [_14,_14,_14,_14,_14];
(*_4).0 = [_14,_14,_14,_14,_14];
(*_4) = (_2, _9);
_7 = (*_4);
(*_4) = _8;
_2 = (*_4).0;
(*_3) = !8075229793000074187_i64;
_13 = 11525_i16 << (*_3);
(*_4).0 = [_14,_14,_14,_14,_14];
(*_4) = (_7.0, _7.1);
_6.0 = [_14,_14,_14,_14,_14];
Call((*_4).0 = core::intrinsics::transmute(_7.0), ReturnTo(bb2), UnwindUnreachable())
}
bb10 = {
Return()
}
bb11 = {
Return()
}
bb12 = {
_33 = !_21;
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
_7 = (*_4);
(*_5) = 245691868240706450423004305199566998875_u128 ^ 72135225167235922084776585776836224377_u128;
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_4).1 = _8.1 - _7.1;
(*_5) = 126484749813561189815222649461718175005_u128 ^ 110882626521783084542757463726100804773_u128;
_9 = _16 as f64;
_4 = core::ptr::addr_of!((*_4));
(*_4).0 = _7.0;
(*_4) = (_2, _7.1);
_6 = _8;
(*_4).1 = _9;
(*_4).1 = _7.1 + _9;
_27.2.3 = _20.2.3;
(*_5) = 174595852560937845042308891228703308313_u128;
_19 = &_9;
_6.1 = (*_19) - (*_19);
_25 = -_21;
_7.0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_4) = _8;
(*_4).1 = (-76_i8) as f64;
(*_4) = _8;
(*_5) = 6158198070865830732_usize as u128;
_7 = ((*_4).0, (*_19));
_20.1 = _27.1;
(*_3) = 7698669074084997849_i64 << _27.1;
_16 = 1589288632127559467_usize as f32;
(*_5) = 223448155785395362278113373754924941012_u128 - 13798833812572328379623848205888349504_u128;
_27.2 = (_13, _20.2.1, _16, _20.2.3);
_8 = (*_4);
Goto(bb13)
}
bb13 = {
(*_4).1 = (*_3) as f64;
RET = 7026355390045627022_i64;
_27.0 = &_27.1;
_32 = -1877348263_i32;
_27.1 = !_20.1;
_25 = _21 << (*_5);
(*_5) = 29346508572778816069865456724876122653_u128;
(*_4).1 = -(*_19);
_20.2.2 = _16;
(*_5) = 2_usize as u128;
_33 = -_25;
(*_3) = 8103614751584372322_i64 ^ 344010196378490261_i64;
_18 = -_33;
_19 = &(*_4).1;
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_4) = (_7.0, _7.1);
(*_4) = (_2, _8.1);
(*_4) = (_8.0, _8.1);
(*_4) = (_2, _8.1);
(*_5) = !280842256776002428149155956935453605978_u128;
_8 = ((*_4).0, _6.1);
(*_4).1 = _8.1 * _7.1;
(*_3) = 849002407295657989_i64 - 6642586121512937652_i64;
Goto(bb14)
}
bb14 = {
(*_5) = _10 as u128;
_7 = (*_4);
_6.1 = _9 + _7.1;
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
_36 = _20.2.2 + _27.2.2;
(*_5) = 67317919753902198843679515079786035027_u128;
(*_4).0 = _8.0;
(*_3) = (-2072207971892471078_i64) - (-198470796194786305_i64);
(*_3) = -5720788093367047940_i64;
(*_3) = !615622033091605769_i64;
(*_4) = (_2, _7.1);
(*_4).1 = (*_3) as f64;
_28 = _10;
(*_3) = (-8055450069338814300_i64);
(*_4) = (_8.0, _7.1);
(*_3) = (-7663056849022850053_i64);
Goto(bb15)
}
bb15 = {
_35 = _18 ^ _25;
_22 = _32 >> (*_5);
_34 = !(*_5);
_27.2.0 = _13 & _13;
_27.1 = _20.1 / _11;
_30 = &(*_4).1;
(*_4).0 = [(*_5),(*_5),(*_5),_34,_34];
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_3) = -4310918562837453208_i64;
_42 = !10259543605721049348_u64;
(*_4) = (_2, _7.1);
(*_4) = (_7.0, _9);
_37 = (*_4).1;
_43 = (*_4).1 * (*_4).1;
_20.1 = _27.1;
(*_4) = (_7.0, _7.1);
(*_4) = (_8.0, _7.1);
(*_4).0 = _8.0;
_27.1 = _20.1 << _27.2.0;
_48 = core::ptr::addr_of_mut!(_19);
_16 = (*_5) as f32;
(*_4) = (_8.0, _8.1);
_7.1 = (*_4).1 - (*_4).1;
Call((*_4).1 = core::intrinsics::transmute((*_3)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
_6.0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
match (*_5) {
0 => bb17,
1 => bb18,
67317919753902198843679515079786035027 => bb20,
_ => bb19
}
}
bb17 = {
_33 = !_21;
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
_7 = (*_4);
(*_5) = 245691868240706450423004305199566998875_u128 ^ 72135225167235922084776585776836224377_u128;
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_4).1 = _8.1 - _7.1;
(*_5) = 126484749813561189815222649461718175005_u128 ^ 110882626521783084542757463726100804773_u128;
_9 = _16 as f64;
_4 = core::ptr::addr_of!((*_4));
(*_4).0 = _7.0;
(*_4) = (_2, _7.1);
_6 = _8;
(*_4).1 = _9;
(*_4).1 = _7.1 + _9;
_27.2.3 = _20.2.3;
(*_5) = 174595852560937845042308891228703308313_u128;
_19 = &_9;
_6.1 = (*_19) - (*_19);
_25 = -_21;
_7.0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_4) = _8;
(*_4).1 = (-76_i8) as f64;
(*_4) = _8;
(*_5) = 6158198070865830732_usize as u128;
_7 = ((*_4).0, (*_19));
_20.1 = _27.1;
(*_3) = 7698669074084997849_i64 << _27.1;
_16 = 1589288632127559467_usize as f32;
(*_5) = 223448155785395362278113373754924941012_u128 - 13798833812572328379623848205888349504_u128;
_27.2 = (_13, _20.2.1, _16, _20.2.3);
_8 = (*_4);
Goto(bb13)
}
bb18 = {
(*_5) = _10 as u128;
_7 = (*_4);
_6.1 = _9 + _7.1;
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
_36 = _20.2.2 + _27.2.2;
(*_5) = 67317919753902198843679515079786035027_u128;
(*_4).0 = _8.0;
(*_3) = (-2072207971892471078_i64) - (-198470796194786305_i64);
(*_3) = -5720788093367047940_i64;
(*_3) = !615622033091605769_i64;
(*_4) = (_2, _7.1);
(*_4).1 = (*_3) as f64;
_28 = _10;
(*_3) = (-8055450069338814300_i64);
(*_4) = (_8.0, _7.1);
(*_3) = (-7663056849022850053_i64);
Goto(bb15)
}
bb19 = {
Return()
}
bb20 = {
(*_4) = _7;
(*_3) = _22 as i64;
(*_4) = _7;
_16 = _36 * _20.2.2;
(*_5) = _34 * _34;
(*_4) = (_2, _7.1);
(*_4) = (_8.0, _43);
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
_46 = [_28,_10,_28,_10,_28,_28];
_9 = _27.2.0 as f64;
_50 = !(-65638308634336305702273728798929758860_i128);
_20.2.2 = _16 - _36;
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
_28 = _10;
RET = 11_i8 as i64;
_25 = _42 as isize;
(*_48) = &_7.1;
(*_5) = (-79_i8) as u128;
(*_48) = &(*_4).1;
(*_4).1 = _7.1 * _9;
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_4) = _7;
_35 = (*_3) as isize;
(*_5) = !_34;
_47 = _18 & _33;
match _11 {
0 => bb11,
1 => bb6,
2 => bb3,
47846 => bb21,
_ => bb19
}
}
bb21 = {
(*_5) = _34;
_7.0 = (*_4).0;
(*_48) = Move(_30);
_33 = _47;
_54 = Move(_48);
(*_3) = !(-6465539565818010850_i64);
(*_4).1 = _47 as f64;
RET = -4568774344732146207_i64;
_6 = (_7.0, _43);
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_5) = _34 << _33;
(*_4).1 = _9 + _9;
_31 = _20.2.2 as u16;
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_4) = _7;
_52 = &(*_4).1;
(*_3) = 9482180777713243917_usize as i64;
_19 = &(*_52);
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
_52 = &_8.1;
Call((*_4).1 = core::intrinsics::transmute((*_3)), ReturnTo(bb22), UnwindUnreachable())
}
bb22 = {
(*_4).0 = _2;
(*_5) = _34 >> _47;
(*_3) = _20.2.3 as i64;
_56 = 25_i8;
(*_5) = !_34;
match _20.2.3 {
0 => bb20,
1 => bb3,
159 => bb24,
_ => bb23
}
}
bb23 = {
_14 = 211949392637167478028035058833866031608_u128 ^ 160514712201189895484712846854157819574_u128;
(*_4).1 = _8.1 + _8.1;
(*_4).0 = _2;
(*_4) = (_7.0, _9);
(*_3) = 84_i8 as i64;
(*_3) = (-9223372036854775808_isize) as i64;
(*_4).1 = _7.1 - _9;
(*_3) = _14 as i64;
(*_3) = !(-8920130663006860033_i64);
_13 = (-30592_i16) ^ (-16697_i16);
(*_4).0 = _7.0;
_15.1 = core::ptr::addr_of!(_16);
_16 = 310488441_i32 as f32;
(*_4) = (_8.0, _8.1);
(*_4).0 = [_14,_14,_14,_14,_14];
(*_4).0 = [_14,_14,_14,_14,_14];
(*_4).0 = [_14,_14,_14,_14,_14];
(*_4) = (_2, _9);
_7 = (*_4);
(*_4) = _8;
_2 = (*_4).0;
(*_3) = !8075229793000074187_i64;
_13 = 11525_i16 << (*_3);
(*_4).0 = [_14,_14,_14,_14,_14];
(*_4) = (_7.0, _7.1);
_6.0 = [_14,_14,_14,_14,_14];
Call((*_4).0 = core::intrinsics::transmute(_7.0), ReturnTo(bb2), UnwindUnreachable())
}
bb24 = {
_8.1 = _42 as f64;
Goto(bb25)
}
bb25 = {
_29 = -(*_3);
(*_4).1 = _7.1 + _9;
_27.2.1 = _20.2.1 << (*_5);
match _20.2.3 {
0 => bb19,
1 => bb21,
2 => bb22,
3 => bb12,
4 => bb6,
5 => bb26,
6 => bb27,
159 => bb29,
_ => bb28
}
}
bb26 = {
Return()
}
bb27 = {
Return()
}
bb28 = {
_33 = !_21;
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
_7 = (*_4);
(*_5) = 245691868240706450423004305199566998875_u128 ^ 72135225167235922084776585776836224377_u128;
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_4).1 = _8.1 - _7.1;
(*_5) = 126484749813561189815222649461718175005_u128 ^ 110882626521783084542757463726100804773_u128;
_9 = _16 as f64;
_4 = core::ptr::addr_of!((*_4));
(*_4).0 = _7.0;
(*_4) = (_2, _7.1);
_6 = _8;
(*_4).1 = _9;
(*_4).1 = _7.1 + _9;
_27.2.3 = _20.2.3;
(*_5) = 174595852560937845042308891228703308313_u128;
_19 = &_9;
_6.1 = (*_19) - (*_19);
_25 = -_21;
_7.0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_4) = _8;
(*_4).1 = (-76_i8) as f64;
(*_4) = _8;
(*_5) = 6158198070865830732_usize as u128;
_7 = ((*_4).0, (*_19));
_20.1 = _27.1;
(*_3) = 7698669074084997849_i64 << _27.1;
_16 = 1589288632127559467_usize as f32;
(*_5) = 223448155785395362278113373754924941012_u128 - 13798833812572328379623848205888349504_u128;
_27.2 = (_13, _20.2.1, _16, _20.2.3);
_8 = (*_4);
Goto(bb13)
}
bb29 = {
_38 = _27.2.2 as isize;
_56 = (-115_i8);
_17 = _10;
_23 = &_56;
_32 = !_22;
_20.2.0 = 10524561703153343670_usize as i16;
_52 = &(*_4).1;
_3 = core::ptr::addr_of_mut!((*_3));
(*_4).1 = -_43;
(*_4).0 = _2;
(*_4).1 = (*_3) as f64;
_41 = (*_23) as i64;
(*_4) = (_8.0, _9);
(*_3) = _42 as i64;
_6.1 = -_9;
_20.2 = _27.2;
_58 = _17;
_13 = _27.2.0 + _27.2.0;
(*_5) = _27.1 as u128;
_48 = core::ptr::addr_of_mut!(_19);
(*_3) = _29 | _29;
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_48) = &_37;
_7.0 = (*_4).0;
match (*_23) {
0 => bb6,
1 => bb30,
2 => bb31,
3 => bb32,
4 => bb33,
5 => bb34,
340282366920938463463374607431768211341 => bb36,
_ => bb35
}
}
bb30 = {
(*_4).1 = _7.1 - _7.1;
(*_4).1 = -_8.1;
(*_4).0 = _2;
_8.0 = [_14,_14,_14,_14,_14];
(*_4).0 = [_14,_14,_14,_14,_14];
_11 = 47846_u16;
_8 = (*_4);
_19 = &(*_4).1;
(*_4).0 = _2;
_21 = 9223372036854775807_isize << _14;
(*_3) = -926594696163765337_i64;
_7.1 = -(*_19);
_20.2.3 = 159_u8;
_5 = &mut _14;
_8.0 = _2;
_6.0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_4).1 = _8.1 - _8.1;
Goto(bb3)
}
bb31 = {
Return()
}
bb32 = {
(*_5) = _10 as u128;
_7 = (*_4);
_6.1 = _9 + _7.1;
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
_36 = _20.2.2 + _27.2.2;
(*_5) = 67317919753902198843679515079786035027_u128;
(*_4).0 = _8.0;
(*_3) = (-2072207971892471078_i64) - (-198470796194786305_i64);
(*_3) = -5720788093367047940_i64;
(*_3) = !615622033091605769_i64;
(*_4) = (_2, _7.1);
(*_4).1 = (*_3) as f64;
_28 = _10;
(*_3) = (-8055450069338814300_i64);
(*_4) = (_8.0, _7.1);
(*_3) = (-7663056849022850053_i64);
Goto(bb15)
}
bb33 = {
_29 = -(*_3);
(*_4).1 = _7.1 + _9;
_27.2.1 = _20.2.1 << (*_5);
match _20.2.3 {
0 => bb19,
1 => bb21,
2 => bb22,
3 => bb12,
4 => bb6,
5 => bb26,
6 => bb27,
159 => bb29,
_ => bb28
}
}
bb34 = {
_33 = !_21;
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
_7 = (*_4);
(*_5) = 245691868240706450423004305199566998875_u128 ^ 72135225167235922084776585776836224377_u128;
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_4).1 = _8.1 - _7.1;
(*_5) = 126484749813561189815222649461718175005_u128 ^ 110882626521783084542757463726100804773_u128;
_9 = _16 as f64;
_4 = core::ptr::addr_of!((*_4));
(*_4).0 = _7.0;
(*_4) = (_2, _7.1);
_6 = _8;
(*_4).1 = _9;
(*_4).1 = _7.1 + _9;
_27.2.3 = _20.2.3;
(*_5) = 174595852560937845042308891228703308313_u128;
_19 = &_9;
_6.1 = (*_19) - (*_19);
_25 = -_21;
_7.0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_4) = _8;
(*_4).1 = (-76_i8) as f64;
(*_4) = _8;
(*_5) = 6158198070865830732_usize as u128;
_7 = ((*_4).0, (*_19));
_20.1 = _27.1;
(*_3) = 7698669074084997849_i64 << _27.1;
_16 = 1589288632127559467_usize as f32;
(*_5) = 223448155785395362278113373754924941012_u128 - 13798833812572328379623848205888349504_u128;
_27.2 = (_13, _20.2.1, _16, _20.2.3);
_8 = (*_4);
Goto(bb13)
}
bb35 = {
Return()
}
bb36 = {
_43 = -(*_4).1;
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_5) = _50 as u128;
_20.0 = Move(_27.0);
RET = !_29;
Call((*_5) = fn18(Move((*_48))), ReturnTo(bb37), UnwindUnreachable())
}
bb37 = {
(*_4).1 = _9 - _9;
_44 = [_42,_42,_42,_42,_42];
(*_48) = &(*_4).1;
_64 = 3_usize & 3_usize;
_44 = [_42,_42,_42,_42,_42];
_61.2 = _27.2.1 as f32;
(*_48) = &_37;
(*_4) = (_8.0, _43);
(*_48) = Move(_52);
(*_48) = &(*_4).1;
_37 = _7.1 + (*_19);
(*_5) = _34 ^ _34;
(*_4).0 = _7.0;
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_4).1 = _37 + _9;
_8.0 = _7.0;
_39 = _64 | _64;
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
Goto(bb38)
}
bb38 = {
_61.2 = (*_23) as f32;
(*_48) = &_8.1;
(*_48) = &(*_4).1;
(*_4).1 = _7.1 - _43;
(*_4).0 = _7.0;
(*_3) = _29 - _41;
(*_3) = -_41;
_56 = (-127_i8) * 30_i8;
_46 = [_17,_28,_10,_10,_58,_58];
_11 = _27.1;
(*_48) = &_9;
(*_4) = (_2, (*_19));
_6.1 = -_9;
_41 = (*_3);
(*_3) = _29 << _64;
_67 = core::ptr::addr_of_mut!((*_3));
_71 = core::ptr::addr_of_mut!(_69);
(*_71) = Move(_15.1);
(*_67) = _41 + _41;
(*_3) = -_29;
_20.2.1 = _27.2.1 - _27.2.1;
(*_3) = _29 ^ _41;
_46 = [_10,_28,_17,_28,_58,_10];
_27.2.0 = _42 as i16;
(*_4) = _8;
Goto(bb39)
}
bb39 = {
_68 = [_28,_17,_28];
(*_48) = &(*_4).1;
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_71) = core::ptr::addr_of!(_20.2.2);
_61.0 = _20.2.0 + _13;
(*_5) = _34 >> _61.0;
(*_48) = &_9;
_27.0 = &_31;
_25 = (*_19) as isize;
_28 = _17;
(*_3) = _41 ^ _29;
_44 = [_42,_42,_42,_42,_42];
_61.0 = _13 >> (*_5);
_30 = &(*_4).1;
(*_5) = _34 ^ _34;
_64 = _39;
(*_4).1 = _56 as f64;
(*_48) = Move(_30);
(*_3) = _29;
_25 = _18 * _33;
(*_4).1 = -_43;
(*_69) = _27.2.2;
_51 = true;
(*_71) = core::ptr::addr_of!((*_69));
match _27.2.3 {
0 => bb20,
159 => bb41,
_ => bb40
}
}
bb40 = {
(*_4).1 = _9 - _9;
_44 = [_42,_42,_42,_42,_42];
(*_48) = &(*_4).1;
_64 = 3_usize & 3_usize;
_44 = [_42,_42,_42,_42,_42];
_61.2 = _27.2.1 as f32;
(*_48) = &_37;
(*_4) = (_8.0, _43);
(*_48) = Move(_52);
(*_48) = &(*_4).1;
_37 = _7.1 + (*_19);
(*_5) = _34 ^ _34;
(*_4).0 = _7.0;
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_4).1 = _37 + _9;
_8.0 = _7.0;
_39 = _64 | _64;
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
Goto(bb38)
}
bb41 = {
(*_4).1 = _37;
(*_4).1 = _43 * _37;
_18 = _21 << _13;
_37 = (*_4).1;
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_4).0 = _7.0;
(*_4).1 = _9 * _37;
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_48) = &(*_4).1;
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_4).0 = _7.0;
match _27.2.3 {
0 => bb36,
1 => bb42,
2 => bb43,
3 => bb44,
4 => bb45,
159 => bb47,
_ => bb46
}
}
bb42 = {
_20.0 = &_11;
(*_4) = (_2, _9);
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_3) = 10956636493610131285_u64 as i64;
_6 = (_2, _7.1);
_27.2.0 = _13;
(*_3) = (-2373123239880701950_i64) + (-5592965562368265476_i64);
(*_3) = -1305119488835251021_i64;
(*_4).0 = _8.0;
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_5) = !20939578276501218717396295726454634580_u128;
(*_4).1 = _9 + _9;
(*_4).1 = _7.1 * _9;
_7.1 = _20.2.3 as f64;
(*_4) = (_2, _8.1);
(*_5) = 25529708797037151814402433024100539893_u128;
Goto(bb5)
}
bb43 = {
_33 = !_21;
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
_7 = (*_4);
(*_5) = 245691868240706450423004305199566998875_u128 ^ 72135225167235922084776585776836224377_u128;
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_4).1 = _8.1 - _7.1;
(*_5) = 126484749813561189815222649461718175005_u128 ^ 110882626521783084542757463726100804773_u128;
_9 = _16 as f64;
_4 = core::ptr::addr_of!((*_4));
(*_4).0 = _7.0;
(*_4) = (_2, _7.1);
_6 = _8;
(*_4).1 = _9;
(*_4).1 = _7.1 + _9;
_27.2.3 = _20.2.3;
(*_5) = 174595852560937845042308891228703308313_u128;
_19 = &_9;
_6.1 = (*_19) - (*_19);
_25 = -_21;
_7.0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_4) = _8;
(*_4).1 = (-76_i8) as f64;
(*_4) = _8;
(*_5) = 6158198070865830732_usize as u128;
_7 = ((*_4).0, (*_19));
_20.1 = _27.1;
(*_3) = 7698669074084997849_i64 << _27.1;
_16 = 1589288632127559467_usize as f32;
(*_5) = 223448155785395362278113373754924941012_u128 - 13798833812572328379623848205888349504_u128;
_27.2 = (_13, _20.2.1, _16, _20.2.3);
_8 = (*_4);
Goto(bb13)
}
bb44 = {
_61.2 = (*_23) as f32;
(*_48) = &_8.1;
(*_48) = &(*_4).1;
(*_4).1 = _7.1 - _43;
(*_4).0 = _7.0;
(*_3) = _29 - _41;
(*_3) = -_41;
_56 = (-127_i8) * 30_i8;
_46 = [_17,_28,_10,_10,_58,_58];
_11 = _27.1;
(*_48) = &_9;
(*_4) = (_2, (*_19));
_6.1 = -_9;
_41 = (*_3);
(*_3) = _29 << _64;
_67 = core::ptr::addr_of_mut!((*_3));
_71 = core::ptr::addr_of_mut!(_69);
(*_71) = Move(_15.1);
(*_67) = _41 + _41;
(*_3) = -_29;
_20.2.1 = _27.2.1 - _27.2.1;
(*_3) = _29 ^ _41;
_46 = [_10,_28,_17,_28,_58,_10];
_27.2.0 = _42 as i16;
(*_4) = _8;
Goto(bb39)
}
bb45 = {
(*_4).1 = _9 - _9;
_44 = [_42,_42,_42,_42,_42];
(*_48) = &(*_4).1;
_64 = 3_usize & 3_usize;
_44 = [_42,_42,_42,_42,_42];
_61.2 = _27.2.1 as f32;
(*_48) = &_37;
(*_4) = (_8.0, _43);
(*_48) = Move(_52);
(*_48) = &(*_4).1;
_37 = _7.1 + (*_19);
(*_5) = _34 ^ _34;
(*_4).0 = _7.0;
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_4).1 = _37 + _9;
_8.0 = _7.0;
_39 = _64 | _64;
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
Goto(bb38)
}
bb46 = {
(*_4).1 = _7.1 - _7.1;
(*_4).1 = -_8.1;
(*_4).0 = _2;
_8.0 = [_14,_14,_14,_14,_14];
(*_4).0 = [_14,_14,_14,_14,_14];
_11 = 47846_u16;
_8 = (*_4);
_19 = &(*_4).1;
(*_4).0 = _2;
_21 = 9223372036854775807_isize << _14;
(*_3) = -926594696163765337_i64;
_7.1 = -(*_19);
_20.2.3 = 159_u8;
_5 = &mut _14;
_8.0 = _2;
_6.0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_4).1 = _8.1 - _8.1;
Goto(bb3)
}
bb47 = {
_27.0 = &_20.1;
_34 = _11 as u128;
_26 = -_56;
(*_71) = core::ptr::addr_of!((*_69));
(*_4).0 = [_34,(*_5),_34,(*_5),(*_5)];
_39 = _64 & _64;
_48 = core::ptr::addr_of_mut!((*_48));
(*_4).0 = [(*_5),_34,(*_5),_34,(*_5)];
(*_4) = _8;
(*_69) = _20.2.1 as f32;
_25 = _22 as isize;
(*_4).1 = -_9;
_62 = core::ptr::addr_of_mut!((*_48));
(*_3) = _39 as i64;
(*_5) = _61.0 as u128;
_52 = &(*_4).1;
(*_4) = (_8.0, _37);
(*_4).0 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_69) = _27.1 as f32;
(*_48) = &_37;
(*_4).1 = (*_19);
_30 = &_6.1;
(*_71) = core::ptr::addr_of!((*_69));
_5 = &mut _34;
_58 = _28;
(*_4).1 = (*_19) - _7.1;
_77 = core::ptr::addr_of_mut!((*_48));
match _20.2.3 {
0 => bb7,
1 => bb10,
159 => bb48,
_ => bb23
}
}
bb48 = {
_20.1 = _27.1;
_69 = core::ptr::addr_of!((*_69));
Goto(bb49)
}
bb49 = {
(*_48) = &(*_4).1;
_61 = (_13, _20.2.1, (*_69), _27.2.3);
(*_48) = &_43;
_47 = _28 as isize;
_28 = _58;
(*_4).1 = (*_19) * (*_19);
Goto(bb50)
}
bb50 = {
Call(_82 = dump_var(17_usize, 13_usize, Move(_13), 28_usize, Move(_28), 68_usize, Move(_68), 39_usize, Move(_39)), ReturnTo(bb51), UnwindUnreachable())
}
bb51 = {
Call(_82 = dump_var(17_usize, 56_usize, Move(_56), 34_usize, Move(_34), 47_usize, Move(_47), 64_usize, Move(_64)), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
Call(_82 = dump_var(17_usize, 26_usize, Move(_26), 25_usize, Move(_25), 38_usize, Move(_38), 58_usize, Move(_58)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Call(_82 = dump_var(17_usize, 29_usize, Move(_29), 21_usize, Move(_21), 17_usize, Move(_17), 83_usize, _83), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn18(mut _1: &'static f64) -> u128 {
mir! {
type RET = u128;
let _2: i32;
let _3: Adt81;
let _4: f32;
let _5: char;
let _6: [u128; 8];
let _7: &'static i8;
let _8: [u128; 5];
let _9: &'static mut [u64; 6];
let _10: *mut usize;
let _11: bool;
let _12: ((&'static mut *const f32, ([u128; 5], f64), *mut i64, bool), &'static mut i16);
let _13: i128;
let _14: &'static u16;
let _15: f32;
let _16: &'static i8;
let _17: f64;
let _18: (&'static u16, u16, (i16, u32, f32, u8));
let _19: i16;
let _20: isize;
let _21: char;
let _22: i8;
let _23: f64;
let _24: i64;
let _25: *mut Adt43;
let _26: usize;
let _27: f64;
let _28: i128;
let _29: isize;
let _30: i32;
let _31: &'static mut [u64; 6];
let _32: bool;
let _33: [char; 6];
let _34: f64;
let _35: &'static mut (i8, usize, isize);
let _36: *mut Adt43;
let _37: (u64,);
let _38: i32;
let _39: u64;
let _40: [u64; 2];
let _41: *mut usize;
let _42: bool;
let _43: &'static mut u128;
let _44: &'static mut Adt62;
let _45: i64;
let _46: isize;
let _47: isize;
let _48: &'static i8;
let _49: usize;
let _50: Adt43;
let _51: &'static mut &'static f64;
let _52: u16;
let _53: (*const ([u64; 2],), *const f32);
let _54: u16;
let _55: f64;
let _56: isize;
let _57: &'static mut i16;
let _58: Adt60;
let _59: isize;
let _60: &'static f64;
let _61: i8;
let _62: *const [u64; 6];
let _63: &'static [u64; 2];
let _64: *const ([u128; 5], f64);
let _65: [char; 3];
let _66: i8;
let _67: isize;
let _68: *const f32;
let _69: i64;
let _70: ();
let _71: ();
{
RET = 153523230665292308440400106924707705379_u128;
_2 = 1803796360_i32;
RET = 158913410693464178939727353927048721789_u128 << _2;
_2 = !(-733354977_i32);
_3.fld0.1 = 180_u8 as f32;
_3.fld2.0 = [12973992582254777306_u64,5750454535511950815_u64];
RET = 13793513818175306987462369394458503673_u128 * 9004611432272840564377919788655785883_u128;
_3.fld3 = 29413_u16 & 60269_u16;
_2 = (-1246335984_i32) | (-513725535_i32);
_4 = (-2_i8) as f32;
_3.fld2.0 = [11946948818912675406_u64,4908617681329773085_u64];
_3.fld0.0 = true & true;
_3.fld1 = 4427940669995140160_i64;
_3.fld3 = 32857_u16;
_3.fld2.0 = [3490110131016694162_u64,17202609231197235815_u64];
Goto(bb1)
}
bb1 = {
_5 = '\u{2100c}';
_3.fld1 = -(-1025395292776750817_i64);
_3.fld0.1 = _4 + _4;
_5 = '\u{398af}';
_3.fld1 = 7456481921475860162_i64;
_2 = 26071689704254980384362599487726051245_i128 as i32;
_3.fld0.1 = _4 - _4;
_3.fld2.0 = [15257224675288550588_u64,1084482056196976442_u64];
_3.fld0.1 = _4 + _4;
_3.fld2.0 = [2337049531867298337_u64,7413085359287725179_u64];
_3.fld1 = (-2238574372945869459_i64) | (-5432976982287196823_i64);
match _3.fld3 {
0 => bb2,
1 => bb3,
2 => bb4,
32857 => bb6,
_ => bb5
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
_3.fld1 = 1457277275797368047_i64 - 160348630833604828_i64;
Goto(bb7)
}
bb7 = {
_6 = [RET,RET,RET,RET,RET,RET,RET,RET];
_3.fld0.0 = !false;
RET = 262049915267853520825782231573130178544_u128 * 18139293669756718108014570979010204772_u128;
match _3.fld3 {
0 => bb6,
1 => bb2,
2 => bb5,
3 => bb4,
4 => bb8,
5 => bb9,
32857 => bb11,
_ => bb10
}
}
bb8 = {
Return()
}
bb9 = {
_5 = '\u{2100c}';
_3.fld1 = -(-1025395292776750817_i64);
_3.fld0.1 = _4 + _4;
_5 = '\u{398af}';
_3.fld1 = 7456481921475860162_i64;
_2 = 26071689704254980384362599487726051245_i128 as i32;
_3.fld0.1 = _4 - _4;
_3.fld2.0 = [15257224675288550588_u64,1084482056196976442_u64];
_3.fld0.1 = _4 + _4;
_3.fld2.0 = [2337049531867298337_u64,7413085359287725179_u64];
_3.fld1 = (-2238574372945869459_i64) | (-5432976982287196823_i64);
match _3.fld3 {
0 => bb2,
1 => bb3,
2 => bb4,
32857 => bb6,
_ => bb5
}
}
bb10 = {
Return()
}
bb11 = {
_4 = -_3.fld0.1;
_3.fld0.1 = _4 + _4;
_11 = !_3.fld0.0;
_3.fld0.1 = _4;
_12.0.3 = _3.fld0.0 & _3.fld0.0;
_4 = _3.fld1 as f32;
match _3.fld3 {
0 => bb12,
32857 => bb14,
_ => bb13
}
}
bb12 = {
_6 = [RET,RET,RET,RET,RET,RET,RET,RET];
_3.fld0.0 = !false;
RET = 262049915267853520825782231573130178544_u128 * 18139293669756718108014570979010204772_u128;
match _3.fld3 {
0 => bb6,
1 => bb2,
2 => bb5,
3 => bb4,
4 => bb8,
5 => bb9,
32857 => bb11,
_ => bb10
}
}
bb13 = {
Return()
}
bb14 = {
_3.fld3 = 64550_u16 << _2;
_3.fld1 = (-7537182056813435105_i64) + (-6886796256522608824_i64);
_12.0.1.0 = [RET,RET,RET,RET,RET];
_6 = [RET,RET,RET,RET,RET,RET,RET,RET];
_3.fld2.0 = [11524080910877318123_u64,9820715814155631619_u64];
_6 = [RET,RET,RET,RET,RET,RET,RET,RET];
_12.0.1.1 = _3.fld1 as f64;
_13 = 12121605108493874396084043490316662514_i128;
_13 = !(-102760097002867524293241806625404336715_i128);
_12.0.3 = !_3.fld0.0;
_3.fld0.0 = _12.0.3;
_12.0.3 = _3.fld0.0 | _11;
_3.fld1 = -1451000565802488109_i64;
Goto(bb15)
}
bb15 = {
RET = 2610089092_u32 as u128;
_12.0.1.1 = 9223372036854775807_isize as f64;
RET = 245442746304042935501250865595639211609_u128;
_12.0.3 = _11 < _11;
_13 = (-105284287517023891960108616620422714379_i128) | 126198494693784932141592265939581253401_i128;
_1 = &_12.0.1.1;
_5 = '\u{8ad27}';
_3.fld0.1 = -_4;
_12.0.1.1 = 57_u8 as f64;
Goto(bb16)
}
bb16 = {
_11 = _3.fld0.0;
RET = 85502054766079742775451379210702761671_u128 + 319960497566906911704403128355370344458_u128;
_2 = -(-680259308_i32);
_3.fld2.0 = [354085209986156757_u64,11859935079031831834_u64];
_2 = (-575878727_i32);
Goto(bb17)
}
bb17 = {
_14 = &_3.fld3;
RET = 115781735975402668921699756778692207286_u128 << (*_14);
_17 = _12.0.1.1 * _12.0.1.1;
_2 = (-1363865208_i32);
_5 = '\u{105e6f}';
_2 = 577803594_i32 << _3.fld1;
_6 = [RET,RET,RET,RET,RET,RET,RET,RET];
_3.fld1 = (-6050931221002117423_i64);
_12.0.2 = core::ptr::addr_of_mut!(_3.fld1);
_17 = _12.0.1.1;
_18.2.3 = !247_u8;
_12.0.3 = !_11;
_18.2 = ((-16699_i16), 1029410796_u32, _3.fld0.1, 222_u8);
_12.0.2 = core::ptr::addr_of_mut!(_3.fld1);
_12.0.2 = core::ptr::addr_of_mut!(_3.fld1);
_3.fld0.1 = _3.fld1 as f32;
_8 = [RET,RET,RET,RET,RET];
_18.2.3 = 225_u8 ^ 224_u8;
Goto(bb18)
}
bb18 = {
_17 = _18.2.3 as f64;
_18.2.2 = _4 * _3.fld0.1;
Goto(bb19)
}
bb19 = {
_6 = [RET,RET,RET,RET,RET,RET,RET,RET];
_18.2.2 = -_3.fld0.1;
_13 = !135200712039413218229207874504617027813_i128;
RET = _13 as u128;
_12.1 = &mut _18.2.0;
_3.fld1 = (-2070727641625325706_i64);
_21 = _5;
_6 = [RET,RET,RET,RET,RET,RET,RET,RET];
_3.fld0.1 = _4 * _4;
_4 = _3.fld0.1 * _3.fld0.1;
_15 = -_4;
_19 = (-6141_i16);
_12.0.1.0 = [RET,RET,RET,RET,RET];
_6 = [RET,RET,RET,RET,RET,RET,RET,RET];
_3.fld2.0 = [14084899026797843925_u64,16537631647603446651_u64];
_17 = _12.0.1.1 - _12.0.1.1;
_12.0.1.1 = _17 - _17;
_20 = (-9223372036854775808_isize) << (*_14);
Goto(bb20)
}
bb20 = {
_12.0.1.1 = _17 * _17;
_24 = _3.fld1;
RET = 62236302752817262736329617845331590872_u128 >> (*_14);
_5 = _21;
_13 = (-127621685318479325383290001247271237887_i128);
_2 = (-1505234405_i32) >> _24;
_21 = _5;
_20 = -(-9223372036854775808_isize);
_8 = _12.0.1.0;
_12.0.2 = core::ptr::addr_of_mut!(_24);
_20 = -9223372036854775807_isize;
_3.fld3 = 32372_u16 << _20;
_21 = _5;
Goto(bb21)
}
bb21 = {
_3.fld0.0 = _4 != _15;
_3.fld0.0 = _11;
_23 = _12.0.1.1 - _12.0.1.1;
_12.0.3 = _11;
_8 = _12.0.1.0;
_21 = _5;
_25 = core::ptr::addr_of_mut!(_3.fld0.2);
_25 = core::ptr::addr_of_mut!((*_25));
match _3.fld1 {
0 => bb22,
1 => bb23,
2 => bb24,
3 => bb25,
340282366920938463461303879790142885750 => bb27,
_ => bb26
}
}
bb22 = {
Return()
}
bb23 = {
Return()
}
bb24 = {
Return()
}
bb25 = {
_6 = [RET,RET,RET,RET,RET,RET,RET,RET];
_3.fld0.0 = !false;
RET = 262049915267853520825782231573130178544_u128 * 18139293669756718108014570979010204772_u128;
match _3.fld3 {
0 => bb6,
1 => bb2,
2 => bb5,
3 => bb4,
4 => bb8,
5 => bb9,
32857 => bb11,
_ => bb10
}
}
bb26 = {
_11 = _3.fld0.0;
RET = 85502054766079742775451379210702761671_u128 + 319960497566906911704403128355370344458_u128;
_2 = -(-680259308_i32);
_3.fld2.0 = [354085209986156757_u64,11859935079031831834_u64];
_2 = (-575878727_i32);
Goto(bb17)
}
bb27 = {
_12.0.1.0 = _8;
_15 = _4 + _4;
_10 = core::ptr::addr_of_mut!(_26);
_13 = (-27978050976071743743174062148794168427_i128);
(*_10) = 4877120324963980639_usize;
(*_10) = 0_usize;
_22 = -(-3_i8);
_27 = _20 as f64;
_16 = &_22;
(*_10) = 5_usize;
_7 = &(*_16);
(*_10) = _20 as usize;
_23 = -_17;
_4 = _15;
(*_10) = !3_usize;
_21 = _5;
(*_10) = !6_usize;
_5 = _21;
Goto(bb28)
}
bb28 = {
(*_10) = _13 as usize;
_12.0.1.1 = _17 * _27;
_28 = _13 >> (*_7);
(*_10) = 8655833713469530311_usize & 2_usize;
_4 = _15;
_6 = [RET,RET,RET,RET,RET,RET,RET,RET];
(*_10) = !7_usize;
_32 = !_3.fld0.0;
_20 = (-9223372036854775808_isize) + (-110_isize);
_19 = (-19492_i16) * (-25453_i16);
(*_10) = 16819439760706270106_u64 as usize;
(*_10) = 4_usize ^ 6_usize;
_29 = _24 as isize;
_3.fld1 = _24;
(*_10) = !538933418088225236_usize;
_12.1 = &mut _19;
_17 = 14589_i16 as f64;
(*_10) = 1_usize - 1965778364353477112_usize;
(*_10) = !7_usize;
match _13 {
0 => bb29,
1 => bb30,
312304315944866719720200545282974043029 => bb32,
_ => bb31
}
}
bb29 = {
_11 = _3.fld0.0;
RET = 85502054766079742775451379210702761671_u128 + 319960497566906911704403128355370344458_u128;
_2 = -(-680259308_i32);
_3.fld2.0 = [354085209986156757_u64,11859935079031831834_u64];
_2 = (-575878727_i32);
Goto(bb17)
}
bb30 = {
_6 = [RET,RET,RET,RET,RET,RET,RET,RET];
_3.fld0.0 = !false;
RET = 262049915267853520825782231573130178544_u128 * 18139293669756718108014570979010204772_u128;
match _3.fld3 {
0 => bb6,
1 => bb2,
2 => bb5,
3 => bb4,
4 => bb8,
5 => bb9,
32857 => bb11,
_ => bb10
}
}
bb31 = {
Return()
}
bb32 = {
(*_10) = 458515474461104288_usize * 2337855829123301438_usize;
(*_10) = 2_usize & 3_usize;
_21 = _5;
(*_10) = 840886353116585894_usize;
(*_10) = 1_usize;
_7 = Move(_16);
(*_10) = 14037877279091022162_usize | 7_usize;
_17 = _27 - _27;
_17 = _3.fld3 as f64;
_12.0.3 = _3.fld0.0;
match _24 {
0 => bb19,
340282366920938463461303879790142885750 => bb33,
_ => bb10
}
}
bb33 = {
_30 = (-7549_i16) as i32;
(*_10) = !13835135705163132892_usize;
_3.fld0.1 = (*_10) as f32;
_17 = _12.0.1.1 + _12.0.1.1;
_16 = &_22;
_8 = [RET,RET,RET,RET,RET];
_20 = _29;
(*_10) = !13670131226309445378_usize;
_12.0.1.1 = _15 as f64;
_12.0.1 = (_8, _17);
(*_10) = 4084412864338973950_usize ^ 6_usize;
_3.fld1 = _24;
(*_10) = 3_usize << (*_16);
(*_10) = 581681568949707472_u64 as usize;
_3.fld1 = _24 - _24;
(*_10) = 2_usize + 6_usize;
_5 = _21;
match _24 {
0 => bb15,
1 => bb34,
2 => bb35,
340282366920938463461303879790142885750 => bb37,
_ => bb36
}
}
bb34 = {
_6 = [RET,RET,RET,RET,RET,RET,RET,RET];
_3.fld0.0 = !false;
RET = 262049915267853520825782231573130178544_u128 * 18139293669756718108014570979010204772_u128;
match _3.fld3 {
0 => bb6,
1 => bb2,
2 => bb5,
3 => bb4,
4 => bb8,
5 => bb9,
32857 => bb11,
_ => bb10
}
}
bb35 = {
RET = 2610089092_u32 as u128;
_12.0.1.1 = 9223372036854775807_isize as f64;
RET = 245442746304042935501250865595639211609_u128;
_12.0.3 = _11 < _11;
_13 = (-105284287517023891960108616620422714379_i128) | 126198494693784932141592265939581253401_i128;
_1 = &_12.0.1.1;
_5 = '\u{8ad27}';
_3.fld0.1 = -_4;
_12.0.1.1 = 57_u8 as f64;
Goto(bb16)
}
bb36 = {
_6 = [RET,RET,RET,RET,RET,RET,RET,RET];
_3.fld0.0 = !false;
RET = 262049915267853520825782231573130178544_u128 * 18139293669756718108014570979010204772_u128;
match _3.fld3 {
0 => bb6,
1 => bb2,
2 => bb5,
3 => bb4,
4 => bb8,
5 => bb9,
32857 => bb11,
_ => bb10
}
}
bb37 = {
_7 = &(*_16);
(*_10) = !3_usize;
_38 = !_30;
(*_10) = RET as usize;
_8 = [RET,RET,RET,RET,RET];
_7 = Move(_16);
_12.0.1.1 = 5199682777378477223_u64 as f64;
_12.0.1.0 = _8;
match _24 {
0 => bb20,
1 => bb14,
340282366920938463461303879790142885750 => bb39,
_ => bb38
}
}
bb38 = {
_5 = '\u{2100c}';
_3.fld1 = -(-1025395292776750817_i64);
_3.fld0.1 = _4 + _4;
_5 = '\u{398af}';
_3.fld1 = 7456481921475860162_i64;
_2 = 26071689704254980384362599487726051245_i128 as i32;
_3.fld0.1 = _4 - _4;
_3.fld2.0 = [15257224675288550588_u64,1084482056196976442_u64];
_3.fld0.1 = _4 + _4;
_3.fld2.0 = [2337049531867298337_u64,7413085359287725179_u64];
_3.fld1 = (-2238574372945869459_i64) | (-5432976982287196823_i64);
match _3.fld3 {
0 => bb2,
1 => bb3,
2 => bb4,
32857 => bb6,
_ => bb5
}
}
bb39 = {
(*_10) = !6_usize;
_21 = _5;
(*_10) = 11834457054362241891_usize * 5_usize;
_11 = _15 <= _4;
(*_10) = _2 as usize;
(*_10) = _2 as usize;
_40 = [2010406293980470195_u64,5420580510589505036_u64];
_4 = _22 as f32;
_12.0.2 = core::ptr::addr_of_mut!(_3.fld1);
_15 = -_3.fld0.1;
(*_10) = _28 as usize;
_3.fld1 = _22 as i64;
_12.0.1.1 = _17 * _17;
_5 = _21;
_23 = -_17;
Call((*_10) = core::intrinsics::transmute(_29), ReturnTo(bb40), UnwindUnreachable())
}
bb40 = {
_3.fld3 = 65184_u16 + 64546_u16;
_21 = _5;
_26 = !0_usize;
_22 = 74_i8;
(*_10) = _4 as usize;
_45 = _3.fld1;
_37 = (15679067413728923747_u64,);
_16 = &_22;
(*_10) = _20 as usize;
_21 = _5;
(*_10) = 1_usize;
(*_10) = 6441948653726117570_usize + 1_usize;
(*_10) = _38 as usize;
_32 = !_11;
_26 = 14900941239467533935_usize;
(*_10) = !10134384171368491873_usize;
_47 = -_29;
_8 = [RET,RET,RET,RET,RET];
_46 = _20 ^ _29;
_33 = [_21,_21,_21,_21,_21,_21];
(*_10) = 2251937631429709927_usize;
Goto(bb41)
}
bb41 = {
(*_10) = !6_usize;
_12.0.1.1 = -_17;
RET = 87553560739536285640883840445184676880_u128 | 223325212008204505353523384944542704008_u128;
_3.fld0.0 = _32 < _11;
_21 = _5;
(*_10) = 193_u8 as usize;
_12.0.1.0 = [RET,RET,RET,RET,RET];
Goto(bb42)
}
bb42 = {
_12.0.1 = (_8, _23);
_10 = core::ptr::addr_of_mut!(_49);
(*_10) = _26 | _26;
_5 = _21;
(*_10) = _26 ^ _26;
match (*_16) {
0 => bb13,
1 => bb26,
2 => bb25,
3 => bb4,
4 => bb15,
5 => bb43,
6 => bb44,
74 => bb46,
_ => bb45
}
}
bb43 = {
_11 = _3.fld0.0;
RET = 85502054766079742775451379210702761671_u128 + 319960497566906911704403128355370344458_u128;
_2 = -(-680259308_i32);
_3.fld2.0 = [354085209986156757_u64,11859935079031831834_u64];
_2 = (-575878727_i32);
Goto(bb17)
}
bb44 = {
_3.fld3 = 65184_u16 + 64546_u16;
_21 = _5;
_26 = !0_usize;
_22 = 74_i8;
(*_10) = _4 as usize;
_45 = _3.fld1;
_37 = (15679067413728923747_u64,);
_16 = &_22;
(*_10) = _20 as usize;
_21 = _5;
(*_10) = 1_usize;
(*_10) = 6441948653726117570_usize + 1_usize;
(*_10) = _38 as usize;
_32 = !_11;
_26 = 14900941239467533935_usize;
(*_10) = !10134384171368491873_usize;
_47 = -_29;
_8 = [RET,RET,RET,RET,RET];
_46 = _20 ^ _29;
_33 = [_21,_21,_21,_21,_21,_21];
(*_10) = 2251937631429709927_usize;
Goto(bb41)
}
bb45 = {
_6 = [RET,RET,RET,RET,RET,RET,RET,RET];
_3.fld0.0 = !false;
RET = 262049915267853520825782231573130178544_u128 * 18139293669756718108014570979010204772_u128;
match _3.fld3 {
0 => bb6,
1 => bb2,
2 => bb5,
3 => bb4,
4 => bb8,
5 => bb9,
32857 => bb11,
_ => bb10
}
}
bb46 = {
_51 = &mut _1;
_57 = Move(_12.1);
_23 = _17 + _27;
_17 = _23;
_56 = _47 + _20;
Goto(bb47)
}
bb47 = {
_3.fld1 = _24;
_30 = _38 & _2;
(*_51) = &_27;
(*_51) = &_23;
(*_10) = _21 as usize;
_2 = _30 ^ _30;
_5 = _21;
(*_51) = &_17;
(*_10) = _26 - _26;
_15 = _4;
_5 = _21;
_55 = _23 - _23;
_38 = -_2;
_43 = &mut RET;
(*_51) = &_12.0.1.1;
_39 = _37.0 - _37.0;
(*_43) = 120149146092629998285983183245456185448_u128 - 66869373537889895316203104418594320750_u128;
(*_10) = _26;
Call((*_10) = core::intrinsics::transmute(_20), ReturnTo(bb48), UnwindUnreachable())
}
bb48 = {
(*_10) = _24 as usize;
(*_10) = _26;
_12.0.3 = _32;
_41 = core::ptr::addr_of_mut!(_49);
(*_43) = _56 as u128;
_68 = core::ptr::addr_of!(_4);
(*_41) = _26;
_23 = (*_68) as f64;
_33 = [_5,_5,_5,_21,_5,_5];
_32 = _12.0.3 <= _11;
match (*_16) {
0 => bb23,
1 => bb49,
2 => bb50,
3 => bb51,
74 => bb53,
_ => bb52
}
}
bb49 = {
_3.fld0.0 = _4 != _15;
_3.fld0.0 = _11;
_23 = _12.0.1.1 - _12.0.1.1;
_12.0.3 = _11;
_8 = _12.0.1.0;
_21 = _5;
_25 = core::ptr::addr_of_mut!(_3.fld0.2);
_25 = core::ptr::addr_of_mut!((*_25));
match _3.fld1 {
0 => bb22,
1 => bb23,
2 => bb24,
3 => bb25,
340282366920938463461303879790142885750 => bb27,
_ => bb26
}
}
bb50 = {
_12.0.1 = (_8, _23);
_10 = core::ptr::addr_of_mut!(_49);
(*_10) = _26 | _26;
_5 = _21;
(*_10) = _26 ^ _26;
match (*_16) {
0 => bb13,
1 => bb26,
2 => bb25,
3 => bb4,
4 => bb15,
5 => bb43,
6 => bb44,
74 => bb46,
_ => bb45
}
}
bb51 = {
(*_10) = _13 as usize;
_12.0.1.1 = _17 * _27;
_28 = _13 >> (*_7);
(*_10) = 8655833713469530311_usize & 2_usize;
_4 = _15;
_6 = [RET,RET,RET,RET,RET,RET,RET,RET];
(*_10) = !7_usize;
_32 = !_3.fld0.0;
_20 = (-9223372036854775808_isize) + (-110_isize);
_19 = (-19492_i16) * (-25453_i16);
(*_10) = 16819439760706270106_u64 as usize;
(*_10) = 4_usize ^ 6_usize;
_29 = _24 as isize;
_3.fld1 = _24;
(*_10) = !538933418088225236_usize;
_12.1 = &mut _19;
_17 = 14589_i16 as f64;
(*_10) = 1_usize - 1965778364353477112_usize;
(*_10) = !7_usize;
match _13 {
0 => bb29,
1 => bb30,
312304315944866719720200545282974043029 => bb32,
_ => bb31
}
}
bb52 = {
(*_10) = !6_usize;
_21 = _5;
(*_10) = 11834457054362241891_usize * 5_usize;
_11 = _15 <= _4;
(*_10) = _2 as usize;
(*_10) = _2 as usize;
_40 = [2010406293980470195_u64,5420580510589505036_u64];
_4 = _22 as f32;
_12.0.2 = core::ptr::addr_of_mut!(_3.fld1);
_15 = -_3.fld0.1;
(*_10) = _28 as usize;
_3.fld1 = _22 as i64;
_12.0.1.1 = _17 * _17;
_5 = _21;
_23 = -_17;
Call((*_10) = core::intrinsics::transmute(_29), ReturnTo(bb40), UnwindUnreachable())
}
bb53 = {
(*_10) = _26 + _26;
(*_68) = _15 - _15;
_5 = _21;
Goto(bb54)
}
bb54 = {
Call(_70 = dump_var(18_usize, 2_usize, Move(_2), 19_usize, Move(_19), 47_usize, Move(_47), 40_usize, Move(_40)), ReturnTo(bb55), UnwindUnreachable())
}
bb55 = {
Call(_70 = dump_var(18_usize, 46_usize, Move(_46), 22_usize, Move(_22), 33_usize, Move(_33), 24_usize, Move(_24)), ReturnTo(bb56), UnwindUnreachable())
}
bb56 = {
Call(_70 = dump_var(18_usize, 30_usize, Move(_30), 6_usize, Move(_6), 8_usize, Move(_8), 29_usize, Move(_29)), ReturnTo(bb57), UnwindUnreachable())
}
bb57 = {
Call(_70 = dump_var(18_usize, 26_usize, Move(_26), 71_usize, _71, 71_usize, _71, 71_usize, _71), ReturnTo(bb58), UnwindUnreachable())
}
bb58 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn19(mut _1: (&'static mut *const f32, ([u128; 5], f64), *mut i64, bool),mut _2: *const ([u128; 5], f64),mut _3: *mut f32,mut _4: i64,mut _5: f32) -> i16 {
mir! {
type RET = i16;
let _6: (&'static u16, u16, (i16, u32, f32, u8));
let _7: [u8; 4];
let _8: i8;
let _9: [u32; 1];
let _10: f32;
let _11: &'static u16;
let _12: *mut Adt43;
let _13: u16;
let _14: i16;
let _15: *mut usize;
let _16: u128;
let _17: [u32; 1];
let _18: [bool; 2];
let _19: (u32, i128);
let _20: &'static [u64; 2];
let _21: &'static i8;
let _22: u128;
let _23: [u8; 4];
let _24: *mut *const [u64; 6];
let _25: f32;
let _26: Adt72;
let _27: isize;
let _28: *const f32;
let _29: char;
let _30: (bool, i16, i8, &'static mut i16);
let _31: Adt62;
let _32: f64;
let _33: u8;
let _34: bool;
let _35: &'static mut [u64; 6];
let _36: u128;
let _37: Adt81;
let _38: u16;
let _39: isize;
let _40: f64;
let _41: Adt60;
let _42: isize;
let _43: [char; 6];
let _44: bool;
let _45: Adt43;
let _46: char;
let _47: &'static mut Adt62;
let _48: Adt63;
let _49: [u8; 4];
let _50: *mut *const f32;
let _51: isize;
let _52: &'static mut i16;
let _53: isize;
let _54: ([u128; 5], f64);
let _55: &'static mut Adt62;
let _56: u64;
let _57: u64;
let _58: [u64; 6];
let _59: *const ([u128; 5], f64);
let _60: Adt63;
let _61: &'static f64;
let _62: isize;
let _63: (bool, i16, i8, &'static mut i16);
let _64: [u64; 2];
let _65: Adt62;
let _66: (&'static mut *const f32, ([u128; 5], f64), *mut i64, bool);
let _67: i8;
let _68: *mut Adt43;
let _69: *mut &'static u16;
let _70: *const ([u128; 5], f64);
let _71: i8;
let _72: i128;
let _73: f64;
let _74: [u64; 5];
let _75: i8;
let _76: *mut Adt43;
let _77: (u32, i128);
let _78: u16;
let _79: &'static u16;
let _80: i32;
let _81: &'static [u64; 2];
let _82: [char; 6];
let _83: [u64; 2];
let _84: &'static mut &'static f64;
let _85: isize;
let _86: [u16; 6];
let _87: [u8; 4];
let _88: bool;
let _89: i8;
let _90: &'static [u64; 2];
let _91: f32;
let _92: ();
let _93: ();
{
RET = (-16_i8) as i16;
_1.1.1 = (-17_i8) as f64;
_1.3 = !true;
_6.1 = 19444_u16;
_2 = core::ptr::addr_of!(_1.1);
(*_2).0 = [94921686292090391116312034043141201893_u128,52655377329587449460932679310775992866_u128,73053356009996418742480307100837145719_u128,87159678324861815713086490288676455897_u128,282252537960373823447602815447429624412_u128];
(*_2).0 = [200410972032463931783502177439989490232_u128,23926232763674442578747612964768866016_u128,322828429602928679863759163447265550464_u128,68357070083189212152732052949205636165_u128,313251120347873037978790418570314173842_u128];
(*_2).0 = [156584333502793784952532036919408644592_u128,213860896046669396584685619345947608360_u128,224474025950416886439383407279113014970_u128,114407989465880103890310037448826504400_u128,39040475229500665062691823176412727968_u128];
_1.2 = core::ptr::addr_of_mut!(_4);
(*_2).0 = [25229552570206158925223793812132000719_u128,284321183519357082164114924911962569586_u128,292348245476414111105104786102439967464_u128,203967377739463649382056121249626972269_u128,40228063565565067765840198218326480375_u128];
_6.2.2 = _5 + _5;
(*_2).0 = [62263737052887171795656443284444447574_u128,112715083048338683470330719351193088604_u128,39810624002866670903930647413726679234_u128,24530270557723810383373759573089099879_u128,121845168213339670072303345808629557947_u128];
(*_2).0 = [301601017453597025711709727787958760302_u128,267722839493277265906629222527576818115_u128,105153388692990020560928558090038675808_u128,191414484240872770825485448569273643221_u128,277802730405928418175812764363741934329_u128];
(*_2).1 = 425564032085484959_u64 as f64;
_6.2.1 = _6.1 as u32;
(*_2).0 = [192248404775948465143414683072741236350_u128,228071488281536867894273516541316276221_u128,65721614166393208776556811846022753775_u128,68830909619352306481326735348184107520_u128,26574197116640720026325229362668558668_u128];
_6.2.1 = 690488099_u32 << RET;
(*_2).1 = (-392610805_i32) as f64;
_6.2.1 = 4068369259_u32;
(*_2).1 = _6.2.1 as f64;
_1.1.0 = [158563837218980613983295306575836668764_u128,75512833007171038544380758822168576833_u128,129069554709451001615269650365813895706_u128,136120565528610747159760872519953103699_u128,61980308661539845124508241076624636335_u128];
match _6.1 {
0 => bb1,
1 => bb2,
19444 => bb4,
_ => bb3
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
(*_2).1 = 16941607571841547162_u64 as f64;
_6.2 = (RET, 3539888796_u32, _5, 22_u8);
(*_2).1 = _6.2.2 as f64;
(*_2).1 = 6195232005701893761_u64 as f64;
(*_2).0 = [30161468867961803993588373876974561470_u128,234798850622610189178597854761614136915_u128,205995736602059269191802253653493647143_u128,229323573581680049331958574069862900718_u128,114033614497860480550271261516349207821_u128];
_8 = (-88_i8) - 71_i8;
(*_2).0 = [275706582045155758023294829541593731596_u128,311395279616456225791446946982895531186_u128,313463655945031695863148410819434521716_u128,328281005848078138023593790823957536298_u128,313037351014521706260101565480811748261_u128];
(*_2).0 = [234234256402943899638227297665283927345_u128,151097768885189026301395691942036999487_u128,29052142932437847389330229986291118534_u128,31967094330279744404778707055258353482_u128,16336491931859001921479610114960647809_u128];
(*_2).1 = _6.2.0 as f64;
(*_2).0 = [327377944234855981553161727351599518011_u128,181979157129017060580695036567607277682_u128,331794081623338432434048534149693175660_u128,216373125278129653146481101217880218424_u128,62708900378105036996568570357452440545_u128];
(*_2).1 = RET as f64;
(*_2).1 = _5 as f64;
(*_2).0 = [286666184281986150414438255154594659785_u128,288964221011894358672837327914660149617_u128,329354669019589672569866129429798665797_u128,336150721716823115777990575076825393050_u128,125520502115563776997076839952187253821_u128];
_9 = [_6.2.1];
Goto(bb5)
}
bb5 = {
(*_2).1 = (-97_isize) as f64;
_7 = [_6.2.3,_6.2.3,_6.2.3,_6.2.3];
(*_2).1 = 4187764555508726925_u64 as f64;
_1.2 = core::ptr::addr_of_mut!(_4);
(*_2).1 = _6.2.3 as f64;
_1.2 = core::ptr::addr_of_mut!(_4);
_8 = !(-125_i8);
_6.1 = 9223372036854775807_isize as u16;
(*_2).1 = _6.2.0 as f64;
(*_2).1 = _6.2.0 as f64;
_13 = 9431392059678453315_usize as u16;
Goto(bb6)
}
bb6 = {
(*_2).1 = RET as f64;
_11 = &_13;
(*_2).0 = [179012220090380216956691535164263347913_u128,262437755448771297889413647005566084662_u128,232077309761687312661221745338958770298_u128,258141414729960873638753462005593834612_u128,272876631690158852078452012397083202820_u128];
(*_2).0 = [231313242912103012673043642083401146032_u128,120459749823670267285151271467040975472_u128,189148072937967154035185348067835679147_u128,209430213655367111662576412042059773484_u128,292832236727860631794546533823509905429_u128];
_6.1 = !(*_11);
(*_2).1 = 10998401032704051041_u64 as f64;
(*_2).1 = _6.2.1 as f64;
_4 = 6941931144301379519_i64 & (-964024575534423250_i64);
(*_2).1 = _6.2.3 as f64;
(*_2).1 = _6.2.2 as f64;
Goto(bb7)
}
bb7 = {
(*_2).0 = [294971547540148705507599642964790230692_u128,305202932181508217132879388190557457792_u128,153543699016621995838861750863580418683_u128,126915421257903873406463967675128153939_u128,154156958722963593492372705549817275703_u128];
_6.0 = &(*_11);
_6.2 = (RET, 2246545495_u32, _5, 184_u8);
_6.2.0 = RET;
_14 = !_6.2.0;
_6.2.1 = 3348480753_u32 & 2213403340_u32;
(*_2).1 = _6.2.3 as f64;
_5 = _6.2.2 + _6.2.2;
_1.1.1 = _8 as f64;
RET = !_6.2.0;
(*_2).1 = 11350472868425494586_usize as f64;
(*_2).0 = [208618118811535168106832348648937865850_u128,109719825797706625345378511297041400919_u128,143417278729582941423422439546290072844_u128,111667774802918130115172997246003108645_u128,144799418475195054925131328518509893483_u128];
_10 = _5 - _5;
(*_2).0 = [183027047421217685477518682352346612011_u128,100927851168020402019072681319772432834_u128,151608460727019943205808529453647510622_u128,224812231513129510815395636362941922463_u128,222029629357104799035688706995691741619_u128];
(*_2).1 = 160275867135599437139625148872306412862_u128 as f64;
_8 = 35_i8 ^ 96_i8;
Goto(bb8)
}
bb8 = {
_17 = _9;
_18 = [_1.3,_1.3];
_1.3 = _5 < _5;
(*_2).1 = 3_usize as f64;
_6.2.3 = !120_u8;
RET = _14 * _6.2.0;
(*_2).0 = [113256174037631427136286134306816194626_u128,193354079280511684258971350519693593990_u128,99710766745377217964483331872002701534_u128,117035713689471860181968811959871215133_u128,204900387695894996932717105606050314684_u128];
_21 = &_8;
(*_2).0 = [125298810840038140030866883684418478626_u128,103605326806246048329066175799490630952_u128,305097247269495908277052414784654066649_u128,72451884039396132726978508866238945463_u128,216236675877597422661366437339996763589_u128];
_6.2 = (RET, 1717455201_u32, _5, 114_u8);
_10 = RET as f32;
_23 = [_6.2.3,_6.2.3,_6.2.3,_6.2.3];
Goto(bb9)
}
bb9 = {
_22 = 227268617707817831271796579600737617225_u128;
(*_2).0 = [_22,_22,_22,_22,_22];
(*_2).1 = (*_11) as f64;
(*_2).0 = [_22,_22,_22,_22,_22];
(*_2).0 = [_22,_22,_22,_22,_22];
_14 = _6.2.0 ^ RET;
_3 = core::ptr::addr_of_mut!(_5);
(*_3) = _6.2.1 as f32;
_19 = (_6.2.1, (-115958779842489023423750078750730946949_i128));
_1.3 = false & true;
(*_3) = _6.2.2;
match _19.1 {
0 => bb5,
1 => bb6,
2 => bb3,
3 => bb10,
4 => bb11,
5 => bb12,
6 => bb13,
224323587078449440039624528681037264507 => bb15,
_ => bb14
}
}
bb10 = {
_17 = _9;
_18 = [_1.3,_1.3];
_1.3 = _5 < _5;
(*_2).1 = 3_usize as f64;
_6.2.3 = !120_u8;
RET = _14 * _6.2.0;
(*_2).0 = [113256174037631427136286134306816194626_u128,193354079280511684258971350519693593990_u128,99710766745377217964483331872002701534_u128,117035713689471860181968811959871215133_u128,204900387695894996932717105606050314684_u128];
_21 = &_8;
(*_2).0 = [125298810840038140030866883684418478626_u128,103605326806246048329066175799490630952_u128,305097247269495908277052414784654066649_u128,72451884039396132726978508866238945463_u128,216236675877597422661366437339996763589_u128];
_6.2 = (RET, 1717455201_u32, _5, 114_u8);
_10 = RET as f32;
_23 = [_6.2.3,_6.2.3,_6.2.3,_6.2.3];
Goto(bb9)
}
bb11 = {
Return()
}
bb12 = {
(*_2).1 = RET as f64;
_11 = &_13;
(*_2).0 = [179012220090380216956691535164263347913_u128,262437755448771297889413647005566084662_u128,232077309761687312661221745338958770298_u128,258141414729960873638753462005593834612_u128,272876631690158852078452012397083202820_u128];
(*_2).0 = [231313242912103012673043642083401146032_u128,120459749823670267285151271467040975472_u128,189148072937967154035185348067835679147_u128,209430213655367111662576412042059773484_u128,292832236727860631794546533823509905429_u128];
_6.1 = !(*_11);
(*_2).1 = 10998401032704051041_u64 as f64;
(*_2).1 = _6.2.1 as f64;
_4 = 6941931144301379519_i64 & (-964024575534423250_i64);
(*_2).1 = _6.2.3 as f64;
(*_2).1 = _6.2.2 as f64;
Goto(bb7)
}
bb13 = {
(*_2).1 = (-97_isize) as f64;
_7 = [_6.2.3,_6.2.3,_6.2.3,_6.2.3];
(*_2).1 = 4187764555508726925_u64 as f64;
_1.2 = core::ptr::addr_of_mut!(_4);
(*_2).1 = _6.2.3 as f64;
_1.2 = core::ptr::addr_of_mut!(_4);
_8 = !(-125_i8);
_6.1 = 9223372036854775807_isize as u16;
(*_2).1 = _6.2.0 as f64;
(*_2).1 = _6.2.0 as f64;
_13 = 9431392059678453315_usize as u16;
Goto(bb6)
}
bb14 = {
(*_2).1 = 16941607571841547162_u64 as f64;
_6.2 = (RET, 3539888796_u32, _5, 22_u8);
(*_2).1 = _6.2.2 as f64;
(*_2).1 = 6195232005701893761_u64 as f64;
(*_2).0 = [30161468867961803993588373876974561470_u128,234798850622610189178597854761614136915_u128,205995736602059269191802253653493647143_u128,229323573581680049331958574069862900718_u128,114033614497860480550271261516349207821_u128];
_8 = (-88_i8) - 71_i8;
(*_2).0 = [275706582045155758023294829541593731596_u128,311395279616456225791446946982895531186_u128,313463655945031695863148410819434521716_u128,328281005848078138023593790823957536298_u128,313037351014521706260101565480811748261_u128];
(*_2).0 = [234234256402943899638227297665283927345_u128,151097768885189026301395691942036999487_u128,29052142932437847389330229986291118534_u128,31967094330279744404778707055258353482_u128,16336491931859001921479610114960647809_u128];
(*_2).1 = _6.2.0 as f64;
(*_2).0 = [327377944234855981553161727351599518011_u128,181979157129017060580695036567607277682_u128,331794081623338432434048534149693175660_u128,216373125278129653146481101217880218424_u128,62708900378105036996568570357452440545_u128];
(*_2).1 = RET as f64;
(*_2).1 = _5 as f64;
(*_2).0 = [286666184281986150414438255154594659785_u128,288964221011894358672837327914660149617_u128,329354669019589672569866129429798665797_u128,336150721716823115777990575076825393050_u128,125520502115563776997076839952187253821_u128];
_9 = [_6.2.1];
Goto(bb5)
}
bb15 = {
_1.1.1 = _19.0 as f64;
(*_2).0 = [_22,_22,_22,_22,_22];
(*_2).0 = [_22,_22,_22,_22,_22];
(*_2).0 = [_22,_22,_22,_22,_22];
match _19.1 {
0 => bb6,
1 => bb13,
224323587078449440039624528681037264507 => bb17,
_ => bb16
}
}
bb16 = {
Return()
}
bb17 = {
RET = 14609633052829104768_usize as i16;
_33 = _6.2.3 % _6.2.3;
_1.3 = (*_2).1 > (*_2).1;
_30.2 = !(*_21);
(*_2).0 = [_22,_22,_22,_22,_22];
_6.2.0 = _14 + _14;
(*_2).0 = [_22,_22,_22,_22,_22];
_11 = &_6.1;
_1.1.0 = [_22,_22,_22,_22,_22];
Goto(bb18)
}
bb18 = {
(*_3) = (-583978347_i32) as f32;
(*_2).0 = [_22,_22,_22,_22,_22];
_22 = 160092460373441789182924830743223679282_u128;
(*_3) = _22 as f32;
_19.0 = _6.2.1 | _6.2.1;
(*_2).1 = _22 as f64;
_32 = (*_2).1;
_6.2.0 = '\u{d357c}' as i16;
RET = _14 * _14;
_37.fld3 = _33 as u16;
(*_2).0 = [_22,_22,_22,_22,_22];
(*_2).1 = _32;
_6.2.1 = _19.0 + _19.0;
_33 = _6.2.3 | _6.2.3;
(*_2).0 = [_22,_22,_22,_22,_22];
(*_2).1 = _32;
Goto(bb19)
}
bb19 = {
_11 = &_37.fld3;
(*_3) = _6.2.2;
_37.fld1 = _4 - _4;
(*_3) = _6.2.2 * _6.2.2;
Goto(bb20)
}
bb20 = {
_6.2 = (RET, _19.0, (*_3), _33);
(*_2).0 = [_22,_22,_22,_22,_22];
_38 = (*_11) - (*_11);
_27 = 9223372036854775807_isize;
(*_2).1 = _32 - _32;
_37.fld1 = _4 & _4;
(*_2).1 = _32 - _32;
(*_2).1 = _32;
(*_3) = _6.2.2;
_33 = _1.3 as u8;
(*_2).0 = [_22,_22,_22,_22,_22];
_30.0 = (*_3) < (*_3);
(*_3) = _6.2.2 + _6.2.2;
_36 = _22 * _22;
_12 = core::ptr::addr_of_mut!(_37.fld0.2);
_9 = [_19.0];
_37.fld3 = '\u{c5c3f}' as u16;
(*_2).1 = _32 * _32;
(*_3) = _6.2.2 * _6.2.2;
_28 = core::ptr::addr_of!((*_3));
_22 = !_36;
(*_2).0 = [_22,_36,_36,_22,_36];
_34 = _6.2.2 == (*_3);
(*_28) = _6.2.2 * _6.2.2;
_37.fld2.0 = [13113378145803744881_u64,1451156869117273064_u64];
(*_2).0 = [_36,_36,_22,_22,_36];
(*_28) = _6.2.2 * _6.2.2;
(*_28) = _6.2.2;
Goto(bb21)
}
bb21 = {
(*_2).1 = _32;
(*_28) = -_6.2.2;
_17 = [_19.0];
(*_2).0 = [_22,_22,_22,_36,_22];
(*_12) = Adt43::Variant2 { fld0: _1.3,fld1: _19,fld2: _27,fld3: _33,fld4: (-1928913317_i32) };
(*_2).0 = [_36,_36,_36,_22,_22];
(*_2).0 = [_22,_22,_22,_22,_22];
Goto(bb22)
}
bb22 = {
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).1 = !_19.1;
_30.3 = &mut _6.2.0;
_4 = _37.fld1 * _37.fld1;
place!(Field::<bool>(Variant((*_12), 2), 0)) = _1.3 & _30.0;
_40 = (*_2).1;
(*_2).0 = [_36,_36,_36,_22,_36];
place!(Field::<u8>(Variant((*_12), 2), 3)) = (*_21) as u8;
place!(Field::<u8>(Variant((*_12), 2), 3)) = _33;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)) = (_19.0, _19.1);
_37.fld0.0 = Field::<bool>(Variant((*_12), 2), 0) <= Field::<bool>(Variant((*_12), 2), 0);
place!(Field::<i32>(Variant((*_12), 2), 4)) = (-1103963409_i32) + 743274959_i32;
(*_3) = _10 + _10;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)) = _19;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)) = (_19.0, _19.1);
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)) = _19;
Goto(bb23)
}
bb23 = {
(*_3) = _10 - _10;
(*_2).0 = [_36,_22,_36,_36,_22];
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).0 = _19.0 - _19.0;
place!(Field::<bool>(Variant((*_12), 2), 0)) = _1.3;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)) = (_19.0, _19.1);
place!(Field::<i32>(Variant((*_12), 2), 4)) = -2020255603_i32;
_25 = -(*_3);
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)) = (_19.0, _19.1);
_22 = !_36;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)) = (_19.0, _19.1);
place!(Field::<u8>(Variant((*_12), 2), 3)) = _33 | _33;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).0 = _19.0 ^ _19.0;
place!(Field::<i32>(Variant((*_12), 2), 4)) = (-1972055004_i32) * (-729241046_i32);
_14 = (*_2).1 as i16;
place!(Field::<isize>(Variant((*_12), 2), 2)) = _27 * _27;
(*_3) = -_10;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).0 = !_19.0;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).1 = _19.1 ^ _19.1;
Goto(bb24)
}
bb24 = {
place!(Field::<isize>(Variant((*_12), 2), 2)) = _27 - _27;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).0 = !_19.0;
(*_2).1 = _40 * _32;
(*_2).1 = _40;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).0 = _19.0 | _19.0;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)) = (_19.0, _19.1);
(*_3) = _25;
(*_2).1 = (*_21) as f64;
_21 = &_30.2;
place!(Field::<isize>(Variant((*_12), 2), 2)) = _27 | _27;
place!(Field::<u8>(Variant((*_12), 2), 3)) = '\u{ce76e}' as u8;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)) = (_19.0, _19.1);
(*_3) = Field::<(u32, i128)>(Variant((*_12), 2), 1).1 as f32;
place!(Field::<isize>(Variant((*_12), 2), 2)) = -_27;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).1 = 10877105308021654210_usize as i128;
place!(Field::<u8>(Variant((*_12), 2), 3)) = _33;
(*_2).0 = [_22,_22,_22,_22,_22];
place!(Field::<u8>(Variant((*_12), 2), 3)) = _33 - _33;
(*_2).1 = -_40;
place!(Field::<bool>(Variant(_37.fld0.2, 2), 0)) = Field::<u8>(Variant((*_12), 2), 3) > Field::<u8>(Variant((*_12), 2), 3);
(*_3) = _10 + _25;
match _19.1 {
0 => bb1,
1 => bb21,
2 => bb10,
3 => bb22,
4 => bb17,
5 => bb6,
6 => bb7,
224323587078449440039624528681037264507 => bb26,
_ => bb25
}
}
bb25 = {
(*_2).0 = [294971547540148705507599642964790230692_u128,305202932181508217132879388190557457792_u128,153543699016621995838861750863580418683_u128,126915421257903873406463967675128153939_u128,154156958722963593492372705549817275703_u128];
_6.0 = &(*_11);
_6.2 = (RET, 2246545495_u32, _5, 184_u8);
_6.2.0 = RET;
_14 = !_6.2.0;
_6.2.1 = 3348480753_u32 & 2213403340_u32;
(*_2).1 = _6.2.3 as f64;
_5 = _6.2.2 + _6.2.2;
_1.1.1 = _8 as f64;
RET = !_6.2.0;
(*_2).1 = 11350472868425494586_usize as f64;
(*_2).0 = [208618118811535168106832348648937865850_u128,109719825797706625345378511297041400919_u128,143417278729582941423422439546290072844_u128,111667774802918130115172997246003108645_u128,144799418475195054925131328518509893483_u128];
_10 = _5 - _5;
(*_2).0 = [183027047421217685477518682352346612011_u128,100927851168020402019072681319772432834_u128,151608460727019943205808529453647510622_u128,224812231513129510815395636362941922463_u128,222029629357104799035688706995691741619_u128];
(*_2).1 = 160275867135599437139625148872306412862_u128 as f64;
_8 = 35_i8 ^ 96_i8;
Goto(bb8)
}
bb26 = {
place!(Field::<i32>(Variant((*_12), 2), 4)) = (-1844724946_i32) & (-1972624875_i32);
place!(Field::<u8>(Variant((*_12), 2), 3)) = !_33;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).1 = _19.1 | _19.1;
_37.fld0.1 = (*_3);
place!(Field::<u8>(Variant((*_12), 2), 3)) = Field::<i32>(Variant((*_12), 2), 4) as u8;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)) = (_19.0, _19.1);
(*_3) = -_10;
place!(Field::<bool>(Variant((*_12), 2), 0)) = !_1.3;
_2 = core::ptr::addr_of!((*_2));
(*_2).0 = [_36,_36,_22,_22,_22];
_27 = Field::<isize>(Variant((*_12), 2), 2);
(*_2).1 = _40;
_27 = Field::<isize>(Variant((*_12), 2), 2);
_32 = (*_2).1;
place!(Field::<bool>(Variant(_37.fld0.2, 2), 0)) = _37.fld0.0;
place!(Field::<u8>(Variant((*_12), 2), 3)) = !_33;
Goto(bb27)
}
bb27 = {
place!(Field::<i32>(Variant((*_12), 2), 4)) = 1985763245_i32;
place!(Field::<isize>(Variant((*_12), 2), 2)) = _27 >> Field::<(u32, i128)>(Variant((*_12), 2), 1).1;
(*_3) = _25 - _25;
_8 = (*_21);
_13 = _38;
(*_2).0 = [_36,_36,_36,_36,_22];
_30.2 = _8;
place!(Field::<u8>(Variant((*_12), 2), 3)) = _33 << _38;
_49 = [Field::<u8>(Variant((*_12), 2), 3),Field::<u8>(Variant((*_12), 2), 3),Field::<u8>(Variant((*_12), 2), 3),Field::<u8>(Variant((*_12), 2), 3)];
(*_3) = _10 * _37.fld0.1;
place!(Field::<i32>(Variant((*_12), 2), 4)) = 6088752593707478226_u64 as i32;
place!(Field::<i32>(Variant((*_12), 2), 4)) = RET as i32;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)) = _19;
(*_2).1 = _32 - _40;
place!(Field::<bool>(Variant((*_12), 2), 0)) = Field::<(u32, i128)>(Variant((*_12), 2), 1).0 > Field::<(u32, i128)>(Variant((*_12), 2), 1).0;
(*_2).1 = _32 * _40;
place!(Field::<bool>(Variant((*_12), 2), 0)) = !_1.3;
(*_2).0 = [_22,_36,_22,_22,_22];
_46 = '\u{4473b}';
_52 = Move(_30.3);
place!(Field::<bool>(Variant((*_12), 2), 0)) = _30.0;
match Field::<(u32, i128)>(Variant((*_12), 2), 1).1 {
224323587078449440039624528681037264507 => bb28,
_ => bb19
}
}
bb28 = {
place!(Field::<bool>(Variant((*_12), 2), 0)) = _1.3 | _34;
(*_3) = _25 * _25;
(*_2).1 = _40 - _40;
place!(Field::<isize>(Variant((*_12), 2), 2)) = _27 ^ _27;
_19.1 = -Field::<(u32, i128)>(Variant(_37.fld0.2, 2), 1).1;
(*_2).1 = _40 + _40;
_1.2 = core::ptr::addr_of_mut!(_37.fld1);
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).1 = !_19.1;
(*_2).1 = -_32;
_11 = &_38;
place!(Field::<(u32, i128)>(Variant(_37.fld0.2, 2), 1)).1 = _19.1 - _19.1;
place!(Field::<bool>(Variant((*_12), 2), 0)) = (*_11) == (*_11);
_29 = _46;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).0 = _19.0 | _19.0;
(*_2).0 = [_22,_22,_22,_22,_36];
_56 = RET as u64;
(*_3) = _37.fld0.1;
place!(Field::<u8>(Variant((*_12), 2), 3)) = _33;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).0 = (*_3) as u32;
place!(Field::<u8>(Variant((*_12), 2), 3)) = _33 << Field::<(u32, i128)>(Variant((*_12), 2), 1).1;
Call(_9 = core::intrinsics::transmute(Field::<(u32, i128)>(Variant((*_12), 2), 1).0), ReturnTo(bb29), UnwindUnreachable())
}
bb29 = {
_37.fld0.1 = Field::<u8>(Variant((*_12), 2), 3) as f32;
_27 = Field::<isize>(Variant((*_12), 2), 2) * Field::<isize>(Variant((*_12), 2), 2);
_20 = &_37.fld2.0;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)) = (_19.0, _19.1);
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)) = _19;
_59 = core::ptr::addr_of!((*_2));
(*_3) = _37.fld0.1;
place!(Field::<i32>(Variant((*_12), 2), 4)) = !(-2060152409_i32);
Goto(bb30)
}
bb30 = {
place!(Field::<i32>(Variant((*_12), 2), 4)) = 1075152206_i32 ^ 1505319232_i32;
(*_59).0 = [_22,_22,_36,_36,_36];
place!(Field::<isize>(Variant((*_12), 2), 2)) = _27 >> Field::<(u32, i128)>(Variant((*_12), 2), 1).1;
(*_3) = _37.fld0.1 * _37.fld0.1;
(*_3) = _37.fld0.1 - _37.fld0.1;
(*_3) = _37.fld0.1;
place!(Field::<u8>(Variant((*_12), 2), 3)) = !_33;
(*_59).0 = [_36,_22,_22,_36,_36];
place!(Field::<i32>(Variant((*_12), 2), 4)) = _56 as i32;
Call(place!(Field::<i32>(Variant((*_12), 2), 4)) = core::intrinsics::bswap((-263336461_i32)), ReturnTo(bb31), UnwindUnreachable())
}
bb31 = {
_25 = -(*_3);
_39 = _37.fld1 as isize;
(*_2).1 = _36 as f64;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).1 = _19.1;
(*_3) = _37.fld0.1 + _25;
Goto(bb32)
}
bb32 = {
place!(Field::<isize>(Variant((*_12), 2), 2)) = _27 - _27;
_58 = [_56,_56,_56,_56,_56,_56];
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).0 = !_19.0;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)) = (_19.0, _19.1);
(*_59).0 = [_22,_22,_22,_36,_36];
(*_59).0 = [_22,_22,_36,_36,_22];
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).0 = !_19.0;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).1 = -_19.1;
(*_2).1 = _40;
place!(Field::<i32>(Variant((*_12), 2), 4)) = !(-836352945_i32);
(*_12) = Adt43::Variant2 { fld0: _1.3,fld1: _19,fld2: _39,fld3: _33,fld4: 1686046675_i32 };
_63.3 = &mut RET;
(*_2).0 = [_36,_36,_22,_36,_22];
(*_2).0 = [_22,_22,_22,_22,_36];
(*_2).0 = [_36,_36,_36,_36,_22];
_64 = [_56,_56];
_2 = core::ptr::addr_of!((*_2));
(*_2).0 = [_36,_22,_36,_36,_22];
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).1 = _19.1 >> Field::<(u32, i128)>(Variant((*_12), 2), 1).0;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)) = (_19.0, _19.1);
Goto(bb33)
}
bb33 = {
place!(Field::<u8>(Variant((*_12), 2), 3)) = (*_11) as u8;
_61 = &(*_2).1;
place!(Field::<u8>(Variant(_37.fld0.2, 2), 3)) = _33 << _38;
place!(Field::<bool>(Variant((*_12), 2), 0)) = _37.fld0.0;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).1 = _8 as i128;
_54.0 = [_22,_36,_36,_36,_22];
(*_2) = (_54.0, _40);
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).0 = !_19.0;
place!(Field::<i32>(Variant((*_12), 2), 4)) = 1114207129_i32 << Field::<u8>(Variant((*_12), 2), 3);
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).0 = _19.0 * _19.0;
Goto(bb34)
}
bb34 = {
(*_2).1 = _32;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).1 = Field::<bool>(Variant((*_12), 2), 0) as i128;
_9 = [Field::<(u32, i128)>(Variant((*_12), 2), 1).0];
(*_2).0 = _54.0;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).1 = _19.1;
(*_2).0 = [_36,_22,_22,_22,_36];
place!(Field::<i32>(Variant((*_12), 2), 4)) = !(-1886875987_i32);
place!(Field::<u8>(Variant((*_12), 2), 3)) = _33 * _33;
(*_2).1 = -_32;
_11 = &_37.fld3;
_30 = (_37.fld0.0, _14, _8, Move(_63.3));
place!(Field::<i32>(Variant((*_12), 2), 4)) = _56 as i32;
place!(Field::<u8>(Variant((*_12), 2), 3)) = !_33;
_66.3 = Field::<bool>(Variant((*_12), 2), 0) & Field::<bool>(Variant((*_12), 2), 0);
(*_2) = (_54.0, _32);
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)) = _19;
place!(Field::<i32>(Variant((*_12), 2), 4)) = (-2086555940_i32) << Field::<(u32, i128)>(Variant((*_12), 2), 1).1;
place!(Field::<isize>(Variant((*_12), 2), 2)) = _39;
place!(Field::<i32>(Variant((*_12), 2), 4)) = -(-599835737_i32);
Goto(bb35)
}
bb35 = {
place!(Field::<bool>(Variant((*_12), 2), 0)) = _1.3;
place!(Field::<i32>(Variant((*_12), 2), 4)) = (-895836432_i32);
(*_3) = -_37.fld0.1;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).0 = _19.0 & _19.0;
(*_2).1 = -_32;
place!(Field::<u8>(Variant((*_12), 2), 3)) = _33 & _33;
place!(Field::<u8>(Variant((*_12), 2), 3)) = (*_3) as u8;
_30.2 = _8 ^ _8;
(*_2) = (_54.0, _32);
_22 = _1.3 as u128;
place!(Field::<isize>(Variant((*_12), 2), 2)) = _39 & _27;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)) = (_19.0, _19.1);
(*_2).0 = [_22,_22,_22,_22,_22];
(*_2).0 = _54.0;
(*_2).0 = [_22,_22,_22,_22,_22];
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).1 = -_19.1;
_30.2 = -_8;
_63.1 = _30.2 as i16;
_4 = _37.fld1;
(*_2).1 = -_40;
(*_2) = (_54.0, _40);
_19 = (Field::<(u32, i128)>(Variant((*_12), 2), 1).0, Field::<(u32, i128)>(Variant((*_12), 2), 1).1);
Goto(bb36)
}
bb36 = {
(*_2) = (_54.0, _40);
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).1 = Field::<i32>(Variant((*_12), 2), 4) as i128;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).1 = _38 as i128;
place!(Field::<u8>(Variant((*_12), 2), 3)) = _33 << Field::<(u32, i128)>(Variant((*_12), 2), 1).0;
_76 = Move(_12);
_63.2 = !_8;
_77.0 = Field::<(u32, i128)>(Variant(_37.fld0.2, 2), 1).0 >> _13;
_39 = Field::<isize>(Variant(_37.fld0.2, 2), 2) + Field::<isize>(Variant(_37.fld0.2, 2), 2);
_30.2 = _8 << Field::<u8>(Variant(_37.fld0.2, 2), 3);
_75 = -_30.2;
(*_2).1 = _40 * _32;
match Field::<i32>(Variant(_37.fld0.2, 2), 4) {
0 => bb16,
1 => bb2,
2 => bb3,
3 => bb14,
340282366920938463463374607430872375024 => bb38,
_ => bb37
}
}
bb37 = {
place!(Field::<isize>(Variant((*_12), 2), 2)) = _27 - _27;
_58 = [_56,_56,_56,_56,_56,_56];
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).0 = !_19.0;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)) = (_19.0, _19.1);
(*_59).0 = [_22,_22,_22,_36,_36];
(*_59).0 = [_22,_22,_36,_36,_22];
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).0 = !_19.0;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).1 = -_19.1;
(*_2).1 = _40;
place!(Field::<i32>(Variant((*_12), 2), 4)) = !(-836352945_i32);
(*_12) = Adt43::Variant2 { fld0: _1.3,fld1: _19,fld2: _39,fld3: _33,fld4: 1686046675_i32 };
_63.3 = &mut RET;
(*_2).0 = [_36,_36,_22,_36,_22];
(*_2).0 = [_22,_22,_22,_22,_36];
(*_2).0 = [_36,_36,_36,_36,_22];
_64 = [_56,_56];
_2 = core::ptr::addr_of!((*_2));
(*_2).0 = [_36,_22,_36,_36,_22];
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).1 = _19.1 >> Field::<(u32, i128)>(Variant((*_12), 2), 1).0;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)) = (_19.0, _19.1);
Goto(bb33)
}
bb38 = {
_69 = core::ptr::addr_of_mut!(_11);
_30.0 = _38 <= _13;
Goto(bb39)
}
bb39 = {
_77.1 = Field::<u8>(Variant(_37.fld0.2, 2), 3) as i128;
place!(Field::<u8>(Variant(_37.fld0.2, 2), 3)) = _33 << _19.0;
(*_2).0 = [_22,_22,_22,_22,_22];
(*_3) = _25;
(*_2).1 = _30.2 as f64;
(*_2) = (_54.0, _40);
_68 = core::ptr::addr_of_mut!(_45);
place!(Field::<i32>(Variant(_37.fld0.2, 2), 4)) = (-123099757_i32);
_66.1.1 = (*_2).1 - (*_2).1;
_52 = &mut _14;
_67 = _30.2 ^ _30.2;
_45 = Adt43::Variant2 { fld0: _34,fld1: Field::<(u32, i128)>(Variant(_37.fld0.2, 2), 1),fld2: _39,fld3: _33,fld4: Field::<i32>(Variant(_37.fld0.2, 2), 4) };
Goto(bb40)
}
bb40 = {
place!(Field::<(u32, i128)>(Variant((*_68), 2), 1)) = (_19.0, _19.1);
_19.0 = Field::<(u32, i128)>(Variant(_37.fld0.2, 2), 1).0 - Field::<(u32, i128)>(Variant((*_68), 2), 1).0;
match Field::<i32>(Variant((*_68), 2), 4) {
0 => bb41,
1 => bb42,
2 => bb43,
3 => bb44,
4 => bb45,
340282366920938463463374607431645111699 => bb47,
_ => bb46
}
}
bb41 = {
(*_2).1 = _32;
(*_28) = -_6.2.2;
_17 = [_19.0];
(*_2).0 = [_22,_22,_22,_36,_22];
(*_12) = Adt43::Variant2 { fld0: _1.3,fld1: _19,fld2: _27,fld3: _33,fld4: (-1928913317_i32) };
(*_2).0 = [_36,_36,_36,_22,_22];
(*_2).0 = [_22,_22,_22,_22,_22];
Goto(bb22)
}
bb42 = {
Return()
}
bb43 = {
place!(Field::<i32>(Variant((*_12), 2), 4)) = (-1844724946_i32) & (-1972624875_i32);
place!(Field::<u8>(Variant((*_12), 2), 3)) = !_33;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).1 = _19.1 | _19.1;
_37.fld0.1 = (*_3);
place!(Field::<u8>(Variant((*_12), 2), 3)) = Field::<i32>(Variant((*_12), 2), 4) as u8;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)) = (_19.0, _19.1);
(*_3) = -_10;
place!(Field::<bool>(Variant((*_12), 2), 0)) = !_1.3;
_2 = core::ptr::addr_of!((*_2));
(*_2).0 = [_36,_36,_22,_22,_22];
_27 = Field::<isize>(Variant((*_12), 2), 2);
(*_2).1 = _40;
_27 = Field::<isize>(Variant((*_12), 2), 2);
_32 = (*_2).1;
place!(Field::<bool>(Variant(_37.fld0.2, 2), 0)) = _37.fld0.0;
place!(Field::<u8>(Variant((*_12), 2), 3)) = !_33;
Goto(bb27)
}
bb44 = {
(*_2) = (_54.0, _40);
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).1 = Field::<i32>(Variant((*_12), 2), 4) as i128;
place!(Field::<(u32, i128)>(Variant((*_12), 2), 1)).1 = _38 as i128;
place!(Field::<u8>(Variant((*_12), 2), 3)) = _33 << Field::<(u32, i128)>(Variant((*_12), 2), 1).0;
_76 = Move(_12);
_63.2 = !_8;
_77.0 = Field::<(u32, i128)>(Variant(_37.fld0.2, 2), 1).0 >> _13;
_39 = Field::<isize>(Variant(_37.fld0.2, 2), 2) + Field::<isize>(Variant(_37.fld0.2, 2), 2);
_30.2 = _8 << Field::<u8>(Variant(_37.fld0.2, 2), 3);
_75 = -_30.2;
(*_2).1 = _40 * _32;
match Field::<i32>(Variant(_37.fld0.2, 2), 4) {
0 => bb16,
1 => bb2,
2 => bb3,
3 => bb14,
340282366920938463463374607430872375024 => bb38,
_ => bb37
}
}
bb45 = {
_22 = 227268617707817831271796579600737617225_u128;
(*_2).0 = [_22,_22,_22,_22,_22];
(*_2).1 = (*_11) as f64;
(*_2).0 = [_22,_22,_22,_22,_22];
(*_2).0 = [_22,_22,_22,_22,_22];
_14 = _6.2.0 ^ RET;
_3 = core::ptr::addr_of_mut!(_5);
(*_3) = _6.2.1 as f32;
_19 = (_6.2.1, (-115958779842489023423750078750730946949_i128));
_1.3 = false & true;
(*_3) = _6.2.2;
match _19.1 {
0 => bb5,
1 => bb6,
2 => bb3,
3 => bb10,
4 => bb11,
5 => bb12,
6 => bb13,
224323587078449440039624528681037264507 => bb15,
_ => bb14
}
}
bb46 = {
Return()
}
bb47 = {
(*_68) = Move(_37.fld0.2);
place!(Field::<(u32, i128)>(Variant((*_68), 2), 1)) = (_77.0, _77.1);
_66.0 = &mut _28;
(*_2).0 = [_22,_22,_22,_22,_22];
_68 = core::ptr::addr_of_mut!((*_68));
place!(Field::<isize>(Variant((*_68), 2), 2)) = _37.fld1 as isize;
(*_52) = _63.1;
(*_68) = Adt43::Variant2 { fld0: _66.3,fld1: _19,fld2: _39,fld3: _33,fld4: (-1167954691_i32) };
_38 = _56 as u16;
_4 = -_37.fld1;
Goto(bb48)
}
bb48 = {
place!(Field::<(u32, i128)>(Variant((*_68), 2), 1)) = (_77.0, _19.1);
place!(Field::<i32>(Variant((*_68), 2), 4)) = Field::<(u32, i128)>(Variant((*_68), 2), 1).1 as i32;
Goto(bb49)
}
bb49 = {
place!(Field::<u8>(Variant((*_68), 2), 3)) = _33 - _33;
place!(Field::<(u32, i128)>(Variant((*_68), 2), 1)).1 = _77.1 * _77.1;
_45 = Adt43::Variant2 { fld0: _66.3,fld1: _77,fld2: _39,fld3: _33,fld4: 1502710321_i32 };
(*_2) = (_54.0, _40);
place!(Field::<i32>(Variant((*_68), 2), 4)) = 1118427666_i32 << Field::<u8>(Variant((*_68), 2), 3);
_9 = [Field::<(u32, i128)>(Variant((*_68), 2), 1).0];
place!(Field::<(u32, i128)>(Variant(_45, 2), 1)) = (_19.0, _77.1);
_16 = _22 - _22;
_82 = [_29,_46,_29,_29,_46,_29];
_88 = Field::<bool>(Variant((*_68), 2), 0) & Field::<bool>(Variant((*_68), 2), 0);
_37.fld3 = _13 + _13;
place!(Field::<(u32, i128)>(Variant((*_68), 2), 1)).0 = Field::<isize>(Variant((*_68), 2), 2) as u32;
Goto(bb50)
}
bb50 = {
Call(_92 = dump_var(19_usize, 38_usize, Move(_38), 39_usize, Move(_39), 23_usize, Move(_23), 9_usize, Move(_9)), ReturnTo(bb51), UnwindUnreachable())
}
bb51 = {
Call(_92 = dump_var(19_usize, 56_usize, Move(_56), 7_usize, Move(_7), 14_usize, Move(_14), 19_usize, Move(_19)), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
Call(_92 = dump_var(19_usize, 8_usize, Move(_8), 34_usize, Move(_34), 49_usize, Move(_49), 67_usize, Move(_67)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Call(_92 = dump_var(19_usize, 36_usize, Move(_36), 13_usize, Move(_13), 93_usize, _93, 93_usize, _93), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Return()
}

}
}
pub fn main() {
                fn0(std::hint::black_box(false), std::hint::black_box(0_usize), std::hint::black_box(10358764389109444939_u64), std::hint::black_box((-85_i8)), std::hint::black_box((-24399_i16)), std::hint::black_box(76709259415840534711686033877934315717_u128), std::hint::black_box(3649788256575585836_i64), std::hint::black_box(27629_u16));
                
            }
#[derive(Debug)]
pub enum Adt43 {
Variant0{
fld0: [bool; 2],
fld1: [u64; 2],
fld2: *const f32,
fld3: f32,
fld4: i16,
fld5: (u32, i128),
fld6: [u64; 6],
fld7: i128,

},
Variant1{
fld0: [u8; 3],
fld1: char,
fld2: (i8, usize, isize),
fld3: (u128, *mut f32, [u16; 1], u8),
fld4: f64,
fld5: u64,
fld6: i64,

},
Variant2{
fld0: bool,
fld1: (u32, i128),
fld2: isize,
fld3: u8,
fld4: i32,

},
Variant3{
fld0: bool,
fld1: *mut u8,
fld2: (u32, i128),
fld3: [u16; 1],

}}
#[derive(Debug)]
pub enum Adt60 {
Variant0{
fld0: u16,

},
Variant1{
fld0: *mut usize,
fld1: *mut i64,
fld2: *mut *const [u64; 6],
fld3: [u64; 2],
fld4: [u64; 6],

},
Variant2{
fld0: bool,
fld1: [u16; 6],
fld2: [char; 6],
fld3: u128,
fld4: i16,
fld5: *const [u64; 6],
fld6: [u8; 3],
fld7: u8,

}}
#[derive(Debug)]
pub enum Adt62 {
Variant0{
fld0: i64,
fld1: u64,

},
Variant1{
fld0: f64,
fld1: *const [u64; 6],
fld2: isize,
fld3: [u64; 5],
fld4: Adt43,
fld5: *const f32,
fld6: u8,
fld7: i128,

},
Variant2{
fld0: i32,
fld1: char,
fld2: [u64; 6],
fld3: (i8, usize, isize),
fld4: i16,

}}
#[derive(Debug)]
pub enum Adt63 {
Variant0{
fld0: [char; 3],
fld1: ([u64; 2],),
fld2: [u16; 1],
fld3: *mut i64,

},
Variant1{
fld0: *const f32,
fld1: [u8; 3],
fld2: u64,
fld3: u128,

}}
#[derive(Debug)]
pub enum Adt68 {
Variant0{
fld0: u8,
fld1: (i8, usize, isize),
fld2: usize,

},
Variant1{
fld0: f32,
fld1: u64,
fld2: f64,
fld3: ([u64; 2],),
fld4: u8,
fld5: Adt60,
fld6: i64,

},
Variant2{
fld0: [u8; 4],
fld1: [u128; 8],
fld2: [u16; 6],
fld3: (bool, f32, Adt43),
fld4: (*const ([u64; 2],), *const f32),
fld5: *const ([u64; 2],),
fld6: *const [u64; 6],

}}
#[derive(Debug)]
pub enum Adt72 {
Variant0{
fld0: i128,
fld1: u16,
fld2: usize,
fld3: ([u128; 5], f64),
fld4: [u8; 4],
fld5: Adt68,
fld6: *mut u8,

},
Variant1{
fld0: ([u64; 2],),
fld1: i16,
fld2: i128,

},
Variant2{
fld0: bool,
fld1: (bool, f32, Adt43),
fld2: [char; 3],
fld3: u16,

},
Variant3{
fld0: [u8; 4],
fld1: [u128; 8],
fld2: (u64,),

}}
#[derive(Debug)]
pub enum Adt78 {
Variant0{
fld0: [u16; 6],
fld1: f64,
fld2: *mut Adt43,
fld3: [char; 6],
fld4: [u64; 2],
fld5: f32,
fld6: [u128; 8],

},
Variant1{
fld0: Adt62,
fld1: u16,
fld2: isize,
fld3: [u8; 3],
fld4: *mut *const [u64; 6],
fld5: Adt72,
fld6: *const f32,
fld7: u8,

},
Variant2{
fld0: bool,
fld1: *mut Adt43,
fld2: [u8; 3],
fld3: *const ([u64; 2],),
fld4: [u64; 5],
fld5: f32,
fld6: u16,

}}
#[derive(Debug)]
pub struct Adt81 {
fld0: (bool, f32, Adt43),
fld1: i64,
fld2: ([u64; 2],),
fld3: u16,
}

