#![recursion_limit = "1024"]
    #![feature(custom_mir, core_intrinsics, const_hash)]
    #![allow(unused_parens, unused_assignments, overflowing_literals)]
    extern crate core;
    use core::intrinsics::mir::*;

    use std::fmt::Debug;

    #[inline(never)]
    fn dump_var(
        f: usize,
        var0: usize, val0: impl Debug,
        var1: usize, val1: impl Debug,
        var2: usize, val2: impl Debug,
        var3: usize, val3: impl Debug,
    ) {
        println!("fn{f}:_{var0} = {val0:?}\n_{var1} = {val1:?}\n_{var2} = {val2:?}\n_{var3} = {val3:?}");
    }
    #[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn0(mut _1: bool,mut _2: char,mut _3: isize,mut _4: i8,mut _5: i16,mut _6: i32,mut _7: i64,mut _8: i128,mut _9: usize,mut _10: u8,mut _11: u16,mut _12: u32,mut _13: u64,mut _14: u128) -> (bool, f64, f32) {
mir! {
type RET = (bool, f64, f32);
let _15: Adt59;
let _16: char;
let _17: i128;
let _18: u16;
let _19: ([isize; 4],);
let _20: [usize; 1];
let _21: [isize; 4];
let _22: Adt57;
let _23: [isize; 4];
let _24: u64;
let _25: isize;
let _26: Adt48;
let _27: u8;
let _28: (bool, f64, f32);
let _29: char;
let _30: i64;
let _31: u8;
let _32: isize;
let _33: [i64; 4];
let _34: u64;
let _35: [i64; 7];
let _36: isize;
let _37: isize;
let _38: Adt60;
let _39: isize;
let _40: [u64; 3];
let _41: ();
let _42: ();
{
_12 = !605674722_u32;
_8 = (-153189811561303035820830407674965171505_i128) ^ 48149302572774207837520285569346273519_i128;
_7 = -1669147123003197755_i64;
_10 = (-1434879891_i32) as u8;
_16 = '\u{70dca}';
_2 = _16;
_10 = !241_u8;
_13 = 7609928197958913824_u64;
RET.2 = 2738936445512706415_usize as f32;
_9 = !2_usize;
RET.1 = _10 as f64;
_6 = 1745701014_i32;
_3 = 79769742676435999530744690717760821847_u128 as isize;
_2 = _16;
_5 = 11911_i16;
RET.0 = true | true;
_19.0 = [_3,_3,_3,_3];
_3 = (-9223372036854775808_isize) - (-9223372036854775808_isize);
RET.0 = _8 >= _8;
Call(_19 = fn1(_2, _9, _7, _16, RET, RET.0), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_6 = 128289789_i32 + 1519064052_i32;
_3 = _9 as isize;
_8 = 4772014903963118116988179413926163817_i128 ^ (-130691526802969366297848368029668701119_i128);
_1 = RET.0;
_6 = 1744179904_i32 + 1645020071_i32;
RET.2 = RET.1 as f32;
_4 = (-10_i8);
_1 = RET.0;
_20 = [_9];
_17 = -_8;
_21 = [_3,_3,_3,_3];
_13 = 6818504422623020924_u64;
_16 = _2;
_19.0 = [_3,_3,_3,_3];
_4 = (-96_i8) & 10_i8;
_7 = !(-6841081994654298257_i64);
_11 = 8283_u16;
_8 = !_17;
_11 = !16444_u16;
RET.1 = 224052879323569392876909883379968101833_u128 as f64;
_11 = !20139_u16;
_24 = !_13;
_25 = !_3;
_14 = !76550801446398398159800322722816248615_u128;
_4 = (-17_i8);
match _13 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
6818504422623020924 => bb7,
_ => bb6
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
RET.1 = _25 as f64;
_4 = 12_i8 ^ (-84_i8);
_21 = [_3,_25,_25,_25];
_7 = _8 as i64;
_4 = 123_i8;
_8 = _14 as i128;
_7 = (-5751963879490415656_i64) ^ 653009677023682034_i64;
RET.0 = _3 > _25;
_2 = _16;
_7 = 2152924925198853050_i64;
_19 = (_21,);
_8 = _17 | _17;
_13 = !_24;
_23 = [_25,_25,_25,_3];
_9 = !16002001956471260112_usize;
_18 = !_11;
_8 = _17 + _17;
_8 = _17 | _17;
_1 = RET.0;
_25 = _4 as isize;
_8 = _17 & _17;
_14 = 235075714320716200047098927858905032719_u128 ^ 56748351800744263003836904914104370057_u128;
_13 = _24;
_28.1 = RET.1;
_2 = _16;
_11 = _18;
_28 = (_1, RET.1, RET.2);
_1 = RET.0;
match _4 {
0 => bb1,
1 => bb6,
2 => bb5,
123 => bb8,
_ => bb4
}
}
bb8 = {
RET = _28;
_18 = _28.2 as u16;
_19.0 = _21;
_21 = [_3,_3,_3,_25];
RET = (_1, _28.1, _28.2);
_10 = 167_u8;
_19.0 = _23;
_19.0 = [_3,_3,_3,_3];
_28.0 = _12 != _12;
_18 = _12 as u16;
_28 = (RET.0, RET.1, RET.2);
_21 = _23;
Goto(bb9)
}
bb9 = {
RET.0 = !_28.0;
_21 = [_3,_3,_3,_25];
_1 = !RET.0;
_6 = 1604012278_i32;
_18 = !_11;
_23 = [_3,_25,_3,_3];
_5 = _7 as i16;
_20 = [_9];
_17 = _8 & _8;
_12 = 1814926841_u32 >> _17;
_24 = _13;
_8 = _17;
match _6 {
0 => bb8,
1 => bb7,
2 => bb3,
3 => bb4,
1604012278 => bb10,
_ => bb5
}
}
bb10 = {
_29 = _2;
_11 = _18;
_11 = _18 - _18;
_28.0 = !_1;
_28.2 = _7 as f32;
_25 = _3 >> _24;
_30 = _7;
_6 = _3 as i32;
RET.0 = _8 < _17;
_23 = [_25,_3,_3,_25];
_7 = _30 | _30;
_1 = RET.0;
_7 = _6 as i64;
_23 = [_25,_25,_25,_3];
_12 = 1506668039_u32 ^ 2558622903_u32;
_27 = _10;
RET.0 = RET.1 >= _28.1;
_23 = [_3,_25,_25,_25];
_28 = (_1, RET.1, RET.2);
_29 = _2;
_3 = _27 as isize;
_4 = -(-64_i8);
_14 = 170381934869023536762380345618189659873_u128;
_28.2 = -RET.2;
_1 = !_28.0;
_27 = _10;
_7 = !_30;
match _14 {
0 => bb3,
1 => bb7,
2 => bb11,
170381934869023536762380345618189659873 => bb13,
_ => bb12
}
}
bb11 = {
Return()
}
bb12 = {
RET.1 = _25 as f64;
_4 = 12_i8 ^ (-84_i8);
_21 = [_3,_25,_25,_25];
_7 = _8 as i64;
_4 = 123_i8;
_8 = _14 as i128;
_7 = (-5751963879490415656_i64) ^ 653009677023682034_i64;
RET.0 = _3 > _25;
_2 = _16;
_7 = 2152924925198853050_i64;
_19 = (_21,);
_8 = _17 | _17;
_13 = !_24;
_23 = [_25,_25,_25,_3];
_9 = !16002001956471260112_usize;
_18 = !_11;
_8 = _17 + _17;
_8 = _17 | _17;
_1 = RET.0;
_25 = _4 as isize;
_8 = _17 & _17;
_14 = 235075714320716200047098927858905032719_u128 ^ 56748351800744263003836904914104370057_u128;
_13 = _24;
_28.1 = RET.1;
_2 = _16;
_11 = _18;
_28 = (_1, RET.1, RET.2);
_1 = RET.0;
match _4 {
0 => bb1,
1 => bb6,
2 => bb5,
123 => bb8,
_ => bb4
}
}
bb13 = {
_27 = _9 as u8;
_16 = _29;
_31 = _27;
RET.2 = _5 as f32;
_7 = _30 + _30;
_1 = _28.0;
_19.0 = [_25,_3,_3,_3];
_12 = !2464366564_u32;
Call(_17 = core::intrinsics::transmute(_14), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
_8 = _16 as i128;
_33 = [_30,_7,_7,_7];
RET.0 = _28.0 & _28.0;
RET = (_28.0, _28.1, _28.2);
_5 = (-5186_i16) & 7517_i16;
_28.0 = _1;
_14 = _1 as u128;
_13 = !_24;
_16 = _2;
_33 = [_7,_30,_30,_7];
_20 = [_9];
_36 = _25;
RET = (_28.0, _28.1, _28.2);
_17 = _6 as i128;
_40 = [_13,_13,_24];
_12 = !2824308262_u32;
_33 = [_7,_7,_7,_7];
RET.0 = _14 >= _14;
Goto(bb15)
}
bb15 = {
Call(_41 = dump_var(0_usize, 5_usize, Move(_5), 11_usize, Move(_11), 16_usize, Move(_16), 4_usize, Move(_4)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_41 = dump_var(0_usize, 7_usize, Move(_7), 1_usize, Move(_1), 2_usize, Move(_2), 3_usize, Move(_3)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_41 = dump_var(0_usize, 20_usize, Move(_20), 30_usize, Move(_30), 24_usize, Move(_24), 17_usize, Move(_17)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_41 = dump_var(0_usize, 25_usize, Move(_25), 6_usize, Move(_6), 23_usize, Move(_23), 42_usize, _42), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn1(mut _1: char,mut _2: usize,mut _3: i64,mut _4: char,mut _5: (bool, f64, f32),mut _6: bool) -> ([isize; 4],) {
mir! {
type RET = ([isize; 4],);
let _7: u128;
let _8: isize;
let _9: Adt54;
let _10: [usize; 1];
let _11: usize;
let _12: [i32; 4];
let _13: (u8,);
let _14: usize;
let _15: f64;
let _16: usize;
let _17: f64;
let _18: [isize; 4];
let _19: bool;
let _20: [usize; 1];
let _21: bool;
let _22: Adt49;
let _23: f64;
let _24: [u16; 8];
let _25: ([i64; 4], u128, isize, usize);
let _26: [i32; 4];
let _27: ();
let _28: ();
{
RET.0 = [40_isize,(-9223372036854775808_isize),9223372036854775807_isize,(-9223372036854775808_isize)];
RET.0 = [(-9223372036854775808_isize),45_isize,(-9223372036854775808_isize),(-103_isize)];
_5.1 = 46_u8 as f64;
_8 = 9223372036854775807_isize;
Call(RET.0 = fn2(_1, _8, _2, _5, _6, _5), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_7 = 245554005311684408394668040979451949654_u128;
_8 = (-9223372036854775808_isize) << _2;
RET.0 = [_8,_8,_8,_8];
_8 = 9223372036854775807_isize;
_11 = _2 + _2;
_5.2 = 93_i8 as f32;
_14 = _11;
_3 = -7649822158303323005_i64;
_11 = _6 as usize;
_2 = !_11;
match _8 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
6 => bb8,
9223372036854775807 => bb10,
_ => bb9
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_2 = 57083_u16 as usize;
Call(_15 = core::intrinsics::fmaf64(_5.1, _5.1, _5.1), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_7 = !232716019231876867343606330065709932043_u128;
_13 = (1_u8,);
_16 = _3 as usize;
_5.1 = (-89888041976615043788296712359032995945_i128) as f64;
_10 = [_11];
_5.0 = _6;
_2 = _11 >> _16;
_4 = _1;
_7 = _4 as u128;
_14 = !_2;
_3 = (-6122417874577490699_i64) + (-2767877188976358433_i64);
_15 = _5.1;
RET.0 = [_8,_8,_8,_8];
_5.2 = _5.1 as f32;
_12 = [(-172817939_i32),(-1601050566_i32),(-589183820_i32),1460244212_i32];
match _8 {
0 => bb12,
1 => bb13,
9223372036854775807 => bb15,
_ => bb14
}
}
bb12 = {
Return()
}
bb13 = {
Return()
}
bb14 = {
Return()
}
bb15 = {
_13.0 = !84_u8;
_20 = [_11];
_5.0 = _6 ^ _6;
_5.1 = -_15;
_18 = [_8,_8,_8,_8];
_5.0 = !_6;
_21 = _11 >= _2;
RET.0 = [_8,_8,_8,_8];
_2 = !_11;
_13 = (190_u8,);
_23 = _5.1;
_2 = _11 | _14;
_24 = [36628_u16,36196_u16,36571_u16,11557_u16,37990_u16,50342_u16,6871_u16,46782_u16];
_12 = [946268050_i32,981328504_i32,(-1452926163_i32),1068501589_i32];
_7 = _21 as u128;
_19 = _6 | _6;
RET = (_18,);
_5.1 = -_23;
Goto(bb16)
}
bb16 = {
Call(_27 = dump_var(1_usize, 4_usize, Move(_4), 8_usize, Move(_8), 7_usize, Move(_7), 10_usize, Move(_10)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_27 = dump_var(1_usize, 11_usize, Move(_11), 2_usize, Move(_2), 3_usize, Move(_3), 12_usize, Move(_12)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_27 = dump_var(1_usize, 14_usize, Move(_14), 28_usize, _28, 28_usize, _28, 28_usize, _28), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn2(mut _1: char,mut _2: isize,mut _3: usize,mut _4: (bool, f64, f32),mut _5: bool,mut _6: (bool, f64, f32)) -> [isize; 4] {
mir! {
type RET = [isize; 4];
let _7: isize;
let _8: [u16; 8];
let _9: i32;
let _10: u16;
let _11: (bool, f64, f32);
let _12: (i8, *mut i64, i64, (bool, f64, f32));
let _13: Adt57;
let _14: isize;
let _15: [i64; 4];
let _16: (u8,);
let _17: f64;
let _18: ([i64; 4], u128, isize, usize);
let _19: f32;
let _20: i8;
let _21: [i64; 7];
let _22: f32;
let _23: i16;
let _24: ();
let _25: ();
{
RET = [_2,_2,_2,_2];
_6.2 = _4.2 + _4.2;
_2 = (-4718_i16) as isize;
_6.0 = _1 >= _1;
_3 = 10628965703854172762_usize - 1_usize;
_6 = (_4.0, _4.1, _4.2);
_4 = (_6.0, _6.1, _6.2);
_7 = _3 as isize;
Goto(bb1)
}
bb1 = {
_4.1 = _6.1 + _6.1;
_2 = _7 << _7;
_6.2 = _4.2;
_2 = _7 ^ _7;
_5 = _4.0;
_4.1 = _6.1 * _6.1;
_4.2 = -_6.2;
_5 = !_6.0;
_6.0 = !_5;
_8 = [52249_u16,43347_u16,60811_u16,14549_u16,51112_u16,40407_u16,56861_u16,31299_u16];
_5 = !_6.0;
Goto(bb2)
}
bb2 = {
_6 = (_5, _4.1, _4.2);
_9 = (-894214978_i32) ^ 1903837077_i32;
_10 = 29333_u16;
_4.2 = (-4301501749630774920_i64) as f32;
_11.0 = _6.0;
_5 = !_6.0;
_9 = 1516269373_i32;
_11 = _6;
_12.3.2 = _11.2;
_12.3 = (_4.0, _11.1, _4.2);
_12.0 = 116_i8 ^ (-37_i8);
_12.0 = _10 as i8;
_12.3.1 = -_6.1;
_12.3.2 = 32799232041375504885830618950181758849_i128 as f32;
match _9 {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
4 => bb7,
5 => bb8,
1516269373 => bb10,
_ => bb9
}
}
bb3 = {
_4.1 = _6.1 + _6.1;
_2 = _7 << _7;
_6.2 = _4.2;
_2 = _7 ^ _7;
_5 = _4.0;
_4.1 = _6.1 * _6.1;
_4.2 = -_6.2;
_5 = !_6.0;
_6.0 = !_5;
_8 = [52249_u16,43347_u16,60811_u16,14549_u16,51112_u16,40407_u16,56861_u16,31299_u16];
_5 = !_6.0;
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_4.0 = _12.3.1 <= _11.1;
_9 = -2090569047_i32;
RET = [_7,_2,_7,_7];
_10 = 10188_u16;
_12.3 = (_11.0, _11.1, _4.2);
_4.0 = _6.0 ^ _5;
_11.0 = _5 | _6.0;
_12.3.1 = _4.1 + _4.1;
_11 = (_4.0, _12.3.1, _12.3.2);
RET = [_7,_2,_2,_7];
_12.3.1 = _11.1 + _4.1;
_3 = 9024715330530693434_usize + 4_usize;
_12.3 = (_6.0, _11.1, _11.2);
_12.1 = core::ptr::addr_of_mut!(_12.2);
_14 = _7;
_12.3 = _6;
_12.1 = core::ptr::addr_of_mut!(_12.2);
_7 = _2;
_12.3.2 = _7 as f32;
Call(_12.1 = fn3(_10, _11, _11, _7, _12.3.0, _14, _5, _10, _4.0, _4.0, _4.1), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_12.2 = -(-2622404339065151199_i64);
_6.2 = -_12.3.2;
_12.1 = core::ptr::addr_of_mut!(_12.2);
RET = [_7,_7,_14,_14];
Call(_16.0 = fn4(_6.0, _2, _12.0, _2, _11.1, _2, _12.3.1, _3, RET), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
_12.3.2 = -_11.2;
_1 = '\u{b435b}';
_12.3.2 = _11.2 - _11.2;
_12.1 = core::ptr::addr_of_mut!(_12.2);
_12.2 = 18022017517225304349_u64 as i64;
_14 = _2 * _7;
_10 = _11.1 as u16;
_4.2 = _12.3.2 - _12.3.2;
_9 = !2109707719_i32;
_12.1 = core::ptr::addr_of_mut!(_12.2);
Goto(bb13)
}
bb13 = {
_12.1 = core::ptr::addr_of_mut!(_12.2);
_9 = -(-728262646_i32);
_15 = [_12.2,_12.2,_12.2,_12.2];
_18 = (_15, 119531381525142956802873730723840917593_u128, _7, _3);
_9 = _18.3 as i32;
_4.1 = _12.3.1 * _12.3.1;
RET = [_14,_14,_18.2,_14];
_11.1 = _4.1;
RET = [_7,_7,_2,_2];
_16.0 = 115_u8;
_8 = [_10,_10,_10,_10,_10,_10,_10,_10];
_1 = '\u{3d6a2}';
_14 = _10 as isize;
_6.2 = _11.2;
RET = [_2,_14,_7,_14];
_12.2 = !(-5874121062637660856_i64);
_20 = _12.2 as i8;
_6.0 = !_4.0;
_18.2 = !_7;
_12.3 = _6;
Call(_12.2 = fn14(_11.1, _5, _2, _12.3, _5, _4.1, _4.0, _2, _4.1, _9, _4.2), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
_9 = !1830980983_i32;
Goto(bb15)
}
bb15 = {
Call(_24 = dump_var(2_usize, 10_usize, Move(_10), 16_usize, Move(_16), 18_usize, Move(_18), 20_usize, Move(_20)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_24 = dump_var(2_usize, 3_usize, Move(_3), 5_usize, Move(_5), 25_usize, _25, 25_usize, _25), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn3(mut _1: u16,mut _2: (bool, f64, f32),mut _3: (bool, f64, f32),mut _4: isize,mut _5: bool,mut _6: isize,mut _7: bool,mut _8: u16,mut _9: bool,mut _10: bool,mut _11: f64) -> *mut i64 {
mir! {
type RET = *mut i64;
let _12: char;
let _13: &'static f64;
let _14: Adt59;
let _15: Adt53;
let _16: [isize; 4];
let _17: [i64; 7];
let _18: u8;
let _19: isize;
let _20: i32;
let _21: Adt53;
let _22: [usize; 1];
let _23: f32;
let _24: char;
let _25: (i16, u16, i16, [i32; 4]);
let _26: isize;
let _27: bool;
let _28: *mut i64;
let _29: (i8, *mut i64, i64, (bool, f64, f32));
let _30: f32;
let _31: usize;
let _32: f32;
let _33: ();
let _34: ();
{
_2.0 = !_7;
_10 = _2.0;
_11 = -_2.1;
Goto(bb1)
}
bb1 = {
_11 = 38_i8 as f64;
_10 = _3.0;
_12 = '\u{b4d4}';
_7 = _3.0 == _10;
_2 = (_3.0, _11, _3.2);
Goto(bb2)
}
bb2 = {
_15.fld2 = -(-3596549778279571346_i64);
_4 = _10 as isize;
_2.2 = 136_u8 as f32;
_3.2 = 65_u8 as f32;
_10 = !_7;
RET = core::ptr::addr_of_mut!(_15.fld2);
_11 = _3.1;
_5 = _10;
_2.0 = _7;
Goto(bb3)
}
bb3 = {
_10 = !_5;
_15.fld0 = [6_usize];
_15.fld1 = 51784282090239045627263342256475178455_u128;
_3.0 = _9;
Goto(bb4)
}
bb4 = {
_17 = [_15.fld2,(*RET),(*RET),_15.fld2,(*RET),(*RET),(*RET)];
_19 = _4 ^ _4;
_3.2 = _2.2;
_13 = &_3.1;
_13 = &_2.1;
_3.2 = -_2.2;
_2 = _3;
_16 = [_4,_4,_6,_4];
_3.1 = 51_u8 as f64;
match _8 {
0 => bb3,
1 => bb5,
2 => bb6,
3 => bb7,
4 => bb8,
5 => bb9,
10188 => bb11,
_ => bb10
}
}
bb5 = {
_10 = !_5;
_15.fld0 = [6_usize];
_15.fld1 = 51784282090239045627263342256475178455_u128;
_3.0 = _9;
Goto(bb4)
}
bb6 = {
_15.fld2 = -(-3596549778279571346_i64);
_4 = _10 as isize;
_2.2 = 136_u8 as f32;
_3.2 = 65_u8 as f32;
_10 = !_7;
RET = core::ptr::addr_of_mut!(_15.fld2);
_11 = _3.1;
_5 = _10;
_2.0 = _7;
Goto(bb3)
}
bb7 = {
_11 = 38_i8 as f64;
_10 = _3.0;
_12 = '\u{b4d4}';
_7 = _3.0 == _10;
_2 = (_3.0, _11, _3.2);
Goto(bb2)
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
_18 = _3.2 as u8;
_15.fld2 = _8 as i64;
match _1 {
10188 => bb12,
_ => bb2
}
}
bb12 = {
_21.fld1 = _2.1 as u128;
_9 = _7;
_10 = _7;
_21.fld0 = [11226914658831735024_usize];
_21 = Adt53 { fld0: _15.fld0,fld1: _15.fld1,fld2: _15.fld2 };
_7 = _10;
_3.0 = !_7;
_16 = [_19,_4,_19,_6];
_2 = (_3.0, _11, _3.2);
match _1 {
0 => bb13,
10188 => bb15,
_ => bb14
}
}
bb13 = {
_10 = !_5;
_15.fld0 = [6_usize];
_15.fld1 = 51784282090239045627263342256475178455_u128;
_3.0 = _9;
Goto(bb4)
}
bb14 = {
Return()
}
bb15 = {
_3.0 = !_2.0;
_26 = _19 - _19;
_2 = (_7, _11, _3.2);
_15.fld1 = _21.fld1;
_3 = (_9, _2.1, _2.2);
_29.3.0 = _10;
_29.2 = _15.fld2 - (*RET);
_24 = _12;
_3.2 = _2.2 * _2.2;
_29.3.2 = _18 as f32;
_3.1 = _11;
_29.1 = RET;
_25.0 = -(-11427_i16);
_21 = Adt53 { fld0: _15.fld0,fld1: _15.fld1,fld2: _15.fld2 };
_2.1 = 2_usize as f64;
_13 = &_29.3.1;
_25.2 = _25.0;
_11 = _1 as f64;
_3.1 = _2.1 * _2.1;
_30 = _3.2 * _3.2;
_13 = &(*_13);
Goto(bb16)
}
bb16 = {
Call(_33 = dump_var(3_usize, 1_usize, Move(_1), 8_usize, Move(_8), 19_usize, Move(_19), 16_usize, Move(_16)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_33 = dump_var(3_usize, 18_usize, Move(_18), 10_usize, Move(_10), 12_usize, Move(_12), 34_usize, _34), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn4(mut _1: bool,mut _2: isize,mut _3: i8,mut _4: isize,mut _5: f64,mut _6: isize,mut _7: f64,mut _8: usize,mut _9: [isize; 4]) -> u8 {
mir! {
type RET = u8;
let _10: Adt54;
let _11: i64;
let _12: [usize; 1];
let _13: char;
let _14: f32;
let _15: f64;
let _16: f64;
let _17: isize;
let _18: i32;
let _19: (u8,);
let _20: f32;
let _21: Adt44;
let _22: f32;
let _23: *mut [i64; 4];
let _24: [i32; 4];
let _25: [i64; 7];
let _26: [u32; 4];
let _27: isize;
let _28: f64;
let _29: [i64; 4];
let _30: Adt53;
let _31: Adt46;
let _32: Adt56;
let _33: isize;
let _34: *mut f32;
let _35: (u8,);
let _36: Adt55;
let _37: *const i16;
let _38: i16;
let _39: ([isize; 4],);
let _40: isize;
let _41: ([isize; 4],);
let _42: ([i64; 4], u128, isize, usize);
let _43: [i64; 4];
let _44: (u8,);
let _45: (u8,);
let _46: &'static f64;
let _47: Adt55;
let _48: Adt59;
let _49: Adt44;
let _50: [u32; 4];
let _51: bool;
let _52: *mut *mut f32;
let _53: ();
let _54: ();
{
_9 = [_4,_4,_4,_4];
Call(_4 = fn5(_2, _1, _9, _2, _9, _9, _9, _6, _5, _5, _2, _9, _9, _9, _5, _8), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_8 = 4_usize ^ 4_usize;
_1 = false;
RET = 57_u8;
_3 = (-53_i8) + 46_i8;
_2 = _4 >> _4;
_6 = _2;
_14 = (-27687049825826010873298056252645443421_i128) as f32;
_6 = _2;
_13 = '\u{1099c7}';
_14 = 95439397_i32 as f32;
_14 = 170073835728722334454404350678285305721_u128 as f32;
_1 = !true;
_16 = _7 - _5;
_15 = -_5;
Goto(bb2)
}
bb2 = {
_4 = _6;
RET = !182_u8;
_17 = 4257183470_u32 as isize;
_1 = false | true;
Call(_11 = core::intrinsics::transmute(_2), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_3 = 6_i8;
_18 = 1312625542_i32 >> _3;
_3 = (-42_i8);
_9 = [_6,_6,_17,_2];
_16 = _15;
_19.0 = _1 as u8;
_14 = 21590_i16 as f32;
_12 = [_8];
_15 = _5;
_22 = -_14;
RET = _19.0;
_19 = (RET,);
RET = !_19.0;
_19.0 = RET | RET;
_15 = _16;
_3 = -31_i8;
_18 = 18338_u16 as i32;
RET = _19.0;
_2 = 28912_u16 as isize;
Goto(bb4)
}
bb4 = {
_20 = _11 as f32;
_9 = [_6,_17,_17,_6];
_16 = RET as f64;
RET = _8 as u8;
_12 = [_8];
_19.0 = !RET;
_14 = _22;
_24 = [_18,_18,_18,_18];
_13 = '\u{ada18}';
_24 = [_18,_18,_18,_18];
_1 = true & true;
_18 = -(-1235073158_i32);
_5 = -_16;
Goto(bb5)
}
bb5 = {
_20 = -_14;
Goto(bb6)
}
bb6 = {
_18 = -(-1376190859_i32);
_13 = '\u{590d5}';
_8 = 4987289737078858545_usize;
_2 = _6;
_19 = (RET,);
_22 = _7 as f32;
_5 = _15 - _7;
_19 = (RET,);
_19 = (RET,);
_7 = _16;
_24 = [_18,_18,_18,_18];
_8 = 6_usize | 10048513842129825_usize;
_22 = -_14;
_12 = [_8];
_27 = _11 as isize;
_4 = 35040160461080854310861250418994047650_i128 as isize;
_19.0 = RET - RET;
_3 = -(-2_i8);
_1 = false;
_25 = [_11,_11,_11,_11,_11,_11,_11];
_3 = (-16_i8) - (-30_i8);
_29 = [_11,_11,_11,_11];
_30.fld0 = [_8];
_5 = _27 as f64;
Call(_6 = core::intrinsics::transmute(_12), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
_8 = _1 as usize;
_5 = _7;
_24 = [_18,_18,_18,_18];
_19 = (RET,);
_30.fld1 = 148181095148127026340663275613425113744_u128;
Call(_4 = core::intrinsics::transmute(_17), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
_14 = RET as f32;
_23 = core::ptr::addr_of_mut!(_29);
_1 = !true;
_32.fld4 = 2268683049_u32 >> _6;
_26 = [_32.fld4,_32.fld4,_32.fld4,_32.fld4];
_6 = _27;
_30.fld0 = [_8];
_19.0 = RET ^ RET;
_32.fld4 = 1513790478_u32 & 699397759_u32;
_31.fld1 = _13;
_25 = [_11,_11,_11,_11,_11,_11,_11];
_14 = _20;
_32.fld2 = (_19.0,);
_34 = core::ptr::addr_of_mut!(_22);
_31.fld2 = [20657_u16,848_u16,5609_u16,16287_u16,58754_u16,1548_u16,40694_u16,19289_u16];
_32.fld1 = !25541_u16;
_30 = Adt53 { fld0: _12,fld1: 31418636434868711097621065089188311682_u128,fld2: _11 };
_36.fld4.0 = core::ptr::addr_of!(_34);
_19 = (RET,);
_35 = (_19.0,);
_32.fld4 = 3629829960_u32;
_7 = 21808833032315873684952064216133022982_i128 as f64;
_13 = _31.fld1;
_12 = [_8];
_4 = !_27;
RET = _19.0;
match _30.fld1 {
0 => bb9,
31418636434868711097621065089188311682 => bb11,
_ => bb10
}
}
bb9 = {
_8 = 4_usize ^ 4_usize;
_1 = false;
RET = 57_u8;
_3 = (-53_i8) + 46_i8;
_2 = _4 >> _4;
_6 = _2;
_14 = (-27687049825826010873298056252645443421_i128) as f32;
_6 = _2;
_13 = '\u{1099c7}';
_14 = 95439397_i32 as f32;
_14 = 170073835728722334454404350678285305721_u128 as f32;
_1 = !true;
_16 = _7 - _5;
_15 = -_5;
Goto(bb2)
}
bb10 = {
_18 = -(-1376190859_i32);
_13 = '\u{590d5}';
_8 = 4987289737078858545_usize;
_2 = _6;
_19 = (RET,);
_22 = _7 as f32;
_5 = _15 - _7;
_19 = (RET,);
_19 = (RET,);
_7 = _16;
_24 = [_18,_18,_18,_18];
_8 = 6_usize | 10048513842129825_usize;
_22 = -_14;
_12 = [_8];
_27 = _11 as isize;
_4 = 35040160461080854310861250418994047650_i128 as isize;
_19.0 = RET - RET;
_3 = -(-2_i8);
_1 = false;
_25 = [_11,_11,_11,_11,_11,_11,_11];
_3 = (-16_i8) - (-30_i8);
_29 = [_11,_11,_11,_11];
_30.fld0 = [_8];
_5 = _27 as f64;
Call(_6 = core::intrinsics::transmute(_12), ReturnTo(bb7), UnwindUnreachable())
}
bb11 = {
_32.fld0.2 = -_14;
_32.fld0 = (_1, _16, (*_34));
_35 = (_19.0,);
_30.fld2 = !_11;
_28 = _18 as f64;
_14 = _32.fld1 as f32;
_39 = (_9,);
_21 = Adt44::Variant0 { fld0: _15,fld1: _35.0,fld2: _39,fld3: _3,fld4: 28047_i16 };
_26 = [_32.fld4,_32.fld4,_32.fld4,_32.fld4];
_28 = -Field::<f64>(Variant(_21, 0), 0);
_31.fld0 = 27483_i16 as i128;
Call(_38 = fn6(_2, _27, Field::<([isize; 4],)>(Variant(_21, 0), 2).0, _23, _39, _32.fld0.1, _30.fld0, _32.fld0), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
_30.fld1 = !220563371666497211960788609345207676788_u128;
_11 = _30.fld2;
_32.fld1 = 21251_u16;
match _32.fld1 {
0 => bb1,
1 => bb6,
2 => bb3,
3 => bb10,
21251 => bb13,
_ => bb9
}
}
bb13 = {
_32.fld4 = 3980390429_u32 | 4082931293_u32;
_36.fld4.0 = core::ptr::addr_of!(_34);
_31.fld0 = 99119184206382846016318877587062799122_i128 - (-80228908339707420291441102458291492708_i128);
_1 = _32.fld0.0;
_21 = Adt44::Variant0 { fld0: _28,fld1: _32.fld2.0,fld2: _39,fld3: _3,fld4: _38 };
SetDiscriminant(_21, 0);
_11 = _30.fld2;
_3 = !40_i8;
_31.fld1 = _13;
_34 = core::ptr::addr_of_mut!(_14);
_3 = (-9_i8);
_4 = -_6;
_40 = _31.fld1 as isize;
_21 = Adt44::Variant0 { fld0: _28,fld1: _32.fld2.0,fld2: _39,fld3: _3,fld4: _38 };
_16 = -_32.fld0.1;
_9 = _39.0;
_36.fld1 = _32.fld1;
_41 = (_9,);
_25 = [_30.fld2,_11,_11,_30.fld2,_30.fld2,_11,_30.fld2];
_19 = (_32.fld2.0,);
_32.fld4 = 1498249024_u32 - 563273679_u32;
_42.0 = [_30.fld2,_30.fld2,_11,_11];
Goto(bb14)
}
bb14 = {
_37 = core::ptr::addr_of!(_38);
_30.fld1 = !206545641671878588085807106240153199314_u128;
_13 = _31.fld1;
place!(Field::<([isize; 4],)>(Variant(_21, 0), 2)) = _39;
_41.0 = _39.0;
_46 = &_28;
_2 = _6;
RET = _19.0 >> (*_37);
_33 = _32.fld0.0 as isize;
_21 = Adt44::Variant0 { fld0: _28,fld1: _19.0,fld2: _41,fld3: _3,fld4: _38 };
_9 = _39.0;
SetDiscriminant(_21, 1);
Goto(bb15)
}
bb15 = {
Call(_53 = dump_var(4_usize, 29_usize, Move(_29), 6_usize, Move(_6), 2_usize, Move(_2), 4_usize, Move(_4)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_53 = dump_var(4_usize, 19_usize, Move(_19), 1_usize, Move(_1), 33_usize, Move(_33), 39_usize, Move(_39)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_53 = dump_var(4_usize, 13_usize, Move(_13), 3_usize, Move(_3), 9_usize, Move(_9), 8_usize, Move(_8)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn5(mut _1: isize,mut _2: bool,mut _3: [isize; 4],mut _4: isize,mut _5: [isize; 4],mut _6: [isize; 4],mut _7: [isize; 4],mut _8: isize,mut _9: f64,mut _10: f64,mut _11: isize,mut _12: [isize; 4],mut _13: [isize; 4],mut _14: [isize; 4],mut _15: f64,mut _16: usize) -> isize {
mir! {
type RET = isize;
let _17: char;
let _18: f64;
let _19: f64;
let _20: *const i16;
let _21: (bool, f64, f32);
let _22: f64;
let _23: Adt53;
let _24: (i16, u16, i16, [i32; 4]);
let _25: [i64; 4];
let _26: [i64; 4];
let _27: bool;
let _28: f64;
let _29: isize;
let _30: f32;
let _31: bool;
let _32: [u32; 4];
let _33: ([i64; 4], u128, isize, usize);
let _34: [usize; 1];
let _35: f32;
let _36: bool;
let _37: [i64; 4];
let _38: [i32; 4];
let _39: u64;
let _40: Adt50;
let _41: (bool, f64, f32);
let _42: f64;
let _43: usize;
let _44: (bool, f64, f32);
let _45: char;
let _46: f64;
let _47: isize;
let _48: Adt56;
let _49: Adt59;
let _50: Adt58;
let _51: u8;
let _52: f64;
let _53: ();
let _54: ();
{
_10 = -_9;
_4 = (-90_i8) as isize;
_1 = _4;
_5 = _14;
_8 = _4 >> _4;
_9 = _10 * _10;
_15 = -_9;
_4 = !_11;
_12 = [_11,_4,_4,_4];
RET = 90165779245813624708027756809072583668_u128 as isize;
_4 = _1 << _11;
Goto(bb1)
}
bb1 = {
_14 = [_4,_4,_8,_4];
_5 = _7;
_17 = '\u{8703}';
_12 = [_8,_4,RET,_11];
_1 = _11;
Goto(bb2)
}
bb2 = {
_19 = (-113924732226368774897679756293476858944_i128) as f64;
_5 = _6;
_7 = _5;
_14 = [_11,_1,_4,_8];
_11 = _4;
_23.fld2 = !(-217606135321606870_i64);
_23.fld1 = 158669962379596578676797089468874892787_u128;
_14 = [_1,RET,_4,RET];
_21.0 = !_2;
_24.2 = 23564_i16 | 12272_i16;
_4 = !_11;
_23.fld0 = [_16];
RET = -_11;
_21.2 = 154_u8 as f32;
_28 = _23.fld1 as f64;
_21.1 = -_28;
_6 = _7;
_29 = _11;
_23.fld0 = [_16];
_26 = [_23.fld2,_23.fld2,_23.fld2,_23.fld2];
_30 = _21.2;
_23.fld0 = [_16];
_23.fld2 = 10325_u16 as i64;
Call(_16 = core::intrinsics::transmute(_1), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_30 = _23.fld1 as f32;
_9 = _23.fld2 as f64;
_20 = core::ptr::addr_of!(_24.0);
_24.1 = 30536_u16 ^ 26965_u16;
_18 = -_15;
_14 = [_29,_11,_8,_29];
Goto(bb4)
}
bb4 = {
_9 = _19;
_21 = (_2, _15, _30);
_24.2 = _21.0 as i16;
Goto(bb5)
}
bb5 = {
_26 = [_23.fld2,_23.fld2,_23.fld2,_23.fld2];
_24.2 = !25373_i16;
_13 = [RET,_4,_29,_11];
_6 = [_1,_11,RET,_11];
_16 = 5_usize;
_23.fld2 = (-7076874848665775966_i64) >> _29;
_22 = _18 * _15;
_21 = (_2, _15, _30);
_6 = _13;
RET = _29 | _8;
_27 = _22 == _21.1;
_13 = [_4,_11,_11,_8];
_24.0 = !_24.2;
_4 = _24.1 as isize;
_28 = -_9;
_33.2 = -RET;
_31 = _27 & _21.0;
_33 = (_26, _23.fld1, _8, _16);
_19 = _18 - _18;
_35 = -_30;
_31 = _22 <= _22;
_28 = 61_u8 as f64;
_33.3 = _17 as usize;
Goto(bb6)
}
bb6 = {
_33.0 = [_23.fld2,_23.fld2,_23.fld2,_23.fld2];
_28 = _21.1;
_28 = RET as f64;
_21.0 = _31 | _27;
_7 = [_11,_29,_1,_8];
_23.fld1 = _33.3 as u128;
_3 = [_8,_33.2,_29,_29];
_38 = [(-1911472061_i32),1635886264_i32,(-235704954_i32),(-763261321_i32)];
_23.fld2 = 7509917787662528749_i64 ^ 9207020520808811029_i64;
_2 = _21.0 ^ _31;
_28 = _21.2 as f64;
_37 = [_23.fld2,_23.fld2,_23.fld2,_23.fld2];
_25 = _37;
_26 = [_23.fld2,_23.fld2,_23.fld2,_23.fld2];
_7 = [RET,_11,_1,_1];
_20 = core::ptr::addr_of!((*_20));
_21.2 = (-73857390002370202306344291067946743410_i128) as f32;
_34 = [_33.3];
_22 = _19 * _21.1;
_41.2 = _35;
_8 = _11 ^ _33.2;
_41.1 = -_28;
_23.fld0 = [_16];
_21 = (_2, _22, _41.2);
_38 = [(-1813768006_i32),1971100931_i32,(-1934174928_i32),1906265178_i32];
_9 = _24.2 as f64;
Goto(bb7)
}
bb7 = {
_17 = '\u{f5ec2}';
_35 = -_21.2;
_24 = (26586_i16, 21391_u16, 13294_i16, _38);
RET = 32_u8 as isize;
_36 = _21.0;
_9 = _21.1 * _21.1;
_34 = _23.fld0;
_24.3 = [1042870771_i32,533711031_i32,1801536316_i32,1898721962_i32];
_17 = '\u{20517}';
match _24.0 {
0 => bb1,
1 => bb5,
2 => bb6,
3 => bb8,
26586 => bb10,
_ => bb9
}
}
bb8 = {
_30 = _23.fld1 as f32;
_9 = _23.fld2 as f64;
_20 = core::ptr::addr_of!(_24.0);
_24.1 = 30536_u16 ^ 26965_u16;
_18 = -_15;
_14 = [_29,_11,_8,_29];
Goto(bb4)
}
bb9 = {
_26 = [_23.fld2,_23.fld2,_23.fld2,_23.fld2];
_24.2 = !25373_i16;
_13 = [RET,_4,_29,_11];
_6 = [_1,_11,RET,_11];
_16 = 5_usize;
_23.fld2 = (-7076874848665775966_i64) >> _29;
_22 = _18 * _15;
_21 = (_2, _15, _30);
_6 = _13;
RET = _29 | _8;
_27 = _22 == _21.1;
_13 = [_4,_11,_11,_8];
_24.0 = !_24.2;
_4 = _24.1 as isize;
_28 = -_9;
_33.2 = -RET;
_31 = _27 & _21.0;
_33 = (_26, _23.fld1, _8, _16);
_19 = _18 - _18;
_35 = -_30;
_31 = _22 <= _22;
_28 = 61_u8 as f64;
_33.3 = _17 as usize;
Goto(bb6)
}
bb10 = {
_41 = (_2, _22, _30);
_41.1 = _24.1 as f64;
_43 = _29 as usize;
_23.fld0 = [_43];
_24.3 = _38;
Goto(bb11)
}
bb11 = {
_35 = _41.2;
_21.0 = _31;
_46 = _19 * _19;
_5 = _13;
_23.fld1 = 110_i8 as u128;
_39 = 9413996108494250145_u64 | 4758574228131726941_u64;
_45 = _17;
_33.3 = _43 % _16;
_44.2 = _23.fld2 as f32;
_13 = [_11,RET,_11,_11];
_10 = (-727355292_i32) as f64;
_24 = ((-24239_i16), 12014_u16, 14179_i16, _38);
_2 = !_27;
_6 = _14;
_21.1 = _9;
_10 = _39 as f64;
match _24.1 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb12,
12014 => bb14,
_ => bb13
}
}
bb12 = {
_41 = (_2, _22, _30);
_41.1 = _24.1 as f64;
_43 = _29 as usize;
_23.fld0 = [_43];
_24.3 = _38;
Goto(bb11)
}
bb13 = {
_14 = [_4,_4,_8,_4];
_5 = _7;
_17 = '\u{8703}';
_12 = [_8,_4,RET,_11];
_1 = _11;
Goto(bb2)
}
bb14 = {
_18 = -_15;
_33.1 = _24.1 as u128;
_48.fld0.2 = -_44.2;
_43 = _39 as usize;
_48.fld0.1 = _24.1 as f64;
_50.fld2.fld2.0 = !217_u8;
Goto(bb15)
}
bb15 = {
Call(_53 = dump_var(5_usize, 17_usize, Move(_17), 27_usize, Move(_27), 7_usize, Move(_7), 5_usize, Move(_5)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_53 = dump_var(5_usize, 29_usize, Move(_29), 34_usize, Move(_34), 1_usize, Move(_1), 8_usize, Move(_8)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_53 = dump_var(5_usize, 11_usize, Move(_11), 16_usize, Move(_16), 33_usize, Move(_33), 36_usize, Move(_36)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_53 = dump_var(5_usize, 12_usize, Move(_12), 4_usize, Move(_4), 54_usize, _54, 54_usize, _54), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn6(mut _1: isize,mut _2: isize,mut _3: [isize; 4],mut _4: *mut [i64; 4],mut _5: ([isize; 4],),mut _6: f64,mut _7: [usize; 1],mut _8: (bool, f64, f32)) -> i16 {
mir! {
type RET = i16;
let _9: (*mut i64,);
let _10: Adt51;
let _11: u128;
let _12: (u8,);
let _13: Adt52;
let _14: [usize; 1];
let _15: &'static f64;
let _16: f64;
let _17: *const i16;
let _18: i128;
let _19: (*const *mut f32, *mut [i64; 4]);
let _20: f64;
let _21: f32;
let _22: isize;
let _23: Adt44;
let _24: ();
let _25: ();
{
_3 = [_2,_2,_1,_1];
RET = 3390_i16 * (-28024_i16);
_3 = [_2,_1,_2,_2];
RET = -27057_i16;
_1 = 32370_u16 as isize;
RET = 26795_i16;
_5.0 = _3;
RET = -(-5266_i16);
_8.2 = _2 as f32;
_8.2 = (-6538545092162674669_i64) as f32;
_2 = _1 * _1;
Goto(bb1)
}
bb1 = {
_5 = (_3,);
RET = 15107_i16 * 8788_i16;
_2 = -_1;
_1 = RET as isize;
_5.0 = _3;
_7 = [11923258760200284926_usize];
_2 = 3_usize as isize;
_6 = -_8.1;
RET = '\u{d23b7}' as i16;
_6 = -_8.1;
_1 = _2;
_5 = (_3,);
_5.0 = _3;
_5 = (_3,);
_8.2 = _1 as f32;
RET = 28714_i16;
_7 = [715918341646015662_usize];
RET = (-10676_i16) - 4231_i16;
RET = -7132_i16;
_11 = !326504448968502426644257792069804729849_u128;
_10.fld1 = (69_u8,);
RET = 73_i8 as i16;
_5.0 = [_2,_2,_2,_2];
_12.0 = !_10.fld1.0;
_10.fld3 = _8.1 as u64;
_10.fld1.0 = !_12.0;
_7 = [3776424487461597280_usize];
Goto(bb2)
}
bb2 = {
_13.fld2 = !_1;
_13.fld5.0.1 = core::ptr::addr_of_mut!(_13.fld5.0.2);
_13.fld2 = _2 >> _1;
_8.1 = _6 - _6;
Goto(bb3)
}
bb3 = {
_10.fld3 = 6609379637342187124_u64 ^ 13386827706949313862_u64;
_8.0 = true;
_3 = [_13.fld2,_1,_1,_1];
_13.fld5.0.3.1 = _8.1 * _6;
_8.0 = !true;
_8.1 = -_13.fld5.0.3.1;
_13.fld5.0.3.1 = 919972288_u32 as f64;
_5 = (_3,);
Call(_13.fld5.0.3 = fn7(_8.0, _8.1, _8, _8, _8.0), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_10.fld2 = -_13.fld2;
_12 = _10.fld1;
_13.fld3 = 1518920_u32 * 3994037870_u32;
_11 = !99550161944374499854612095074820320613_u128;
_13.fld5.0.3.0 = !_8.0;
_13.fld2 = _10.fld2;
_8.2 = _13.fld5.0.3.2;
_11 = 199904426449434925769612572746629528395_u128 + 100683785133368127259988995057496701552_u128;
_1 = !_10.fld2;
_2 = _6 as isize;
_1 = _2;
Call(_9 = fn13(_8, _2, _8.2, _13.fld5.0.3.2), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
_13.fld4.0 = core::ptr::addr_of_mut!(_13.fld5.0.2);
_1 = -_10.fld2;
_4 = core::ptr::addr_of_mut!(_13.fld7);
_10.fld1.0 = !_12.0;
_10 = Adt51 { fld0: _9.0,fld1: _12,fld2: _2,fld3: 15701555069305236795_u64 };
_13.fld4.0 = _9.0;
match _10.fld3 {
15701555069305236795 => bb6,
_ => bb2
}
}
bb6 = {
_10.fld1 = _12;
_10.fld3 = _13.fld5.0.3.0 as u64;
_13.fld5.0.1 = _10.fld0;
_13.fld5.0 = (104_i8, _13.fld4.0, 374467669996374803_i64, _8);
_17 = core::ptr::addr_of!(RET);
_13.fld6 = [_13.fld5.0.2,_13.fld5.0.2,_13.fld5.0.2,_13.fld5.0.2,_13.fld5.0.2,_13.fld5.0.2,_13.fld5.0.2];
_10.fld0 = _13.fld5.0.1;
_13.fld7 = [_13.fld5.0.2,_13.fld5.0.2,_13.fld5.0.2,_13.fld5.0.2];
_5 = (_3,);
_13.fld5.0.3.0 = _8.0;
_17 = core::ptr::addr_of!((*_17));
_13.fld5.1 = (_13.fld4.0,);
_13.fld2 = _10.fld2 * _10.fld2;
_13.fld0 = !0_usize;
_12 = (_10.fld1.0,);
_10.fld0 = core::ptr::addr_of_mut!(_13.fld5.0.2);
_6 = _13.fld5.0.3.1;
_10 = Adt51 { fld0: _13.fld5.0.1,fld1: _12,fld2: _13.fld2,fld3: 18390084262270816829_u64 };
_13.fld5.0.3.1 = -_6;
_13.fld5.0.3 = (_8.0, _6, _8.2);
RET = _10.fld1.0 as i16;
_13.fld5.0.1 = _9.0;
_13.fld0 = 6860593691803028239_usize & 0_usize;
_19.1 = _4;
match _13.fld5.0.0 {
0 => bb3,
1 => bb5,
2 => bb7,
3 => bb8,
4 => bb9,
104 => bb11,
_ => bb10
}
}
bb7 = {
_5 = (_3,);
RET = 15107_i16 * 8788_i16;
_2 = -_1;
_1 = RET as isize;
_5.0 = _3;
_7 = [11923258760200284926_usize];
_2 = 3_usize as isize;
_6 = -_8.1;
RET = '\u{d23b7}' as i16;
_6 = -_8.1;
_1 = _2;
_5 = (_3,);
_5.0 = _3;
_5 = (_3,);
_8.2 = _1 as f32;
RET = 28714_i16;
_7 = [715918341646015662_usize];
RET = (-10676_i16) - 4231_i16;
RET = -7132_i16;
_11 = !326504448968502426644257792069804729849_u128;
_10.fld1 = (69_u8,);
RET = 73_i8 as i16;
_5.0 = [_2,_2,_2,_2];
_12.0 = !_10.fld1.0;
_10.fld3 = _8.1 as u64;
_10.fld1.0 = !_12.0;
_7 = [3776424487461597280_usize];
Goto(bb2)
}
bb8 = {
_10.fld2 = -_13.fld2;
_12 = _10.fld1;
_13.fld3 = 1518920_u32 * 3994037870_u32;
_11 = !99550161944374499854612095074820320613_u128;
_13.fld5.0.3.0 = !_8.0;
_13.fld2 = _10.fld2;
_8.2 = _13.fld5.0.3.2;
_11 = 199904426449434925769612572746629528395_u128 + 100683785133368127259988995057496701552_u128;
_1 = !_10.fld2;
_2 = _6 as isize;
_1 = _2;
Call(_9 = fn13(_8, _2, _8.2, _13.fld5.0.3.2), ReturnTo(bb5), UnwindUnreachable())
}
bb9 = {
_10.fld3 = 6609379637342187124_u64 ^ 13386827706949313862_u64;
_8.0 = true;
_3 = [_13.fld2,_1,_1,_1];
_13.fld5.0.3.1 = _8.1 * _6;
_8.0 = !true;
_8.1 = -_13.fld5.0.3.1;
_13.fld5.0.3.1 = 919972288_u32 as f64;
_5 = (_3,);
Call(_13.fld5.0.3 = fn7(_8.0, _8.1, _8, _8, _8.0), ReturnTo(bb4), UnwindUnreachable())
}
bb10 = {
_13.fld2 = !_1;
_13.fld5.0.1 = core::ptr::addr_of_mut!(_13.fld5.0.2);
_13.fld2 = _2 >> _1;
_8.1 = _6 - _6;
Goto(bb3)
}
bb11 = {
_4 = _19.1;
_18 = !(-98176939592766350537435196137083819506_i128);
_5.0 = [_10.fld2,_13.fld2,_13.fld2,_2];
_10.fld0 = core::ptr::addr_of_mut!(_13.fld5.0.2);
RET = 31586_i16;
_13.fld5.1 = (_10.fld0,);
match _10.fld3 {
0 => bb10,
1 => bb12,
2 => bb13,
18390084262270816829 => bb15,
_ => bb14
}
}
bb12 = {
_10.fld1 = _12;
_10.fld3 = _13.fld5.0.3.0 as u64;
_13.fld5.0.1 = _10.fld0;
_13.fld5.0 = (104_i8, _13.fld4.0, 374467669996374803_i64, _8);
_17 = core::ptr::addr_of!(RET);
_13.fld6 = [_13.fld5.0.2,_13.fld5.0.2,_13.fld5.0.2,_13.fld5.0.2,_13.fld5.0.2,_13.fld5.0.2,_13.fld5.0.2];
_10.fld0 = _13.fld5.0.1;
_13.fld7 = [_13.fld5.0.2,_13.fld5.0.2,_13.fld5.0.2,_13.fld5.0.2];
_5 = (_3,);
_13.fld5.0.3.0 = _8.0;
_17 = core::ptr::addr_of!((*_17));
_13.fld5.1 = (_13.fld4.0,);
_13.fld2 = _10.fld2 * _10.fld2;
_13.fld0 = !0_usize;
_12 = (_10.fld1.0,);
_10.fld0 = core::ptr::addr_of_mut!(_13.fld5.0.2);
_6 = _13.fld5.0.3.1;
_10 = Adt51 { fld0: _13.fld5.0.1,fld1: _12,fld2: _13.fld2,fld3: 18390084262270816829_u64 };
_13.fld5.0.3.1 = -_6;
_13.fld5.0.3 = (_8.0, _6, _8.2);
RET = _10.fld1.0 as i16;
_13.fld5.0.1 = _9.0;
_13.fld0 = 6860593691803028239_usize & 0_usize;
_19.1 = _4;
match _13.fld5.0.0 {
0 => bb3,
1 => bb5,
2 => bb7,
3 => bb8,
4 => bb9,
104 => bb11,
_ => bb10
}
}
bb13 = {
_10.fld3 = 6609379637342187124_u64 ^ 13386827706949313862_u64;
_8.0 = true;
_3 = [_13.fld2,_1,_1,_1];
_13.fld5.0.3.1 = _8.1 * _6;
_8.0 = !true;
_8.1 = -_13.fld5.0.3.1;
_13.fld5.0.3.1 = 919972288_u32 as f64;
_5 = (_3,);
Call(_13.fld5.0.3 = fn7(_8.0, _8.1, _8, _8, _8.0), ReturnTo(bb4), UnwindUnreachable())
}
bb14 = {
_10.fld2 = -_13.fld2;
_12 = _10.fld1;
_13.fld3 = 1518920_u32 * 3994037870_u32;
_11 = !99550161944374499854612095074820320613_u128;
_13.fld5.0.3.0 = !_8.0;
_13.fld2 = _10.fld2;
_8.2 = _13.fld5.0.3.2;
_11 = 199904426449434925769612572746629528395_u128 + 100683785133368127259988995057496701552_u128;
_1 = !_10.fld2;
_2 = _6 as isize;
_1 = _2;
Call(_9 = fn13(_8, _2, _8.2, _13.fld5.0.3.2), ReturnTo(bb5), UnwindUnreachable())
}
bb15 = {
_13.fld5.0 = ((-128_i8), _10.fld0, 619826696012351007_i64, _8);
_12.0 = _10.fld1.0;
_10.fld1.0 = RET as u8;
_14 = [_13.fld0];
_20 = _13.fld3 as f64;
_20 = _13.fld3 as f64;
_5 = (_3,);
_4 = core::ptr::addr_of_mut!(_13.fld7);
_13.fld5.0.3.2 = _8.1 as f32;
_8.2 = _13.fld5.0.3.2 + _13.fld5.0.3.2;
_6 = -_13.fld5.0.3.1;
_15 = &_6;
_16 = (*_15) + (*_15);
_14 = _7;
_2 = _10.fld2;
_9.0 = _13.fld5.0.1;
_9 = (_13.fld5.0.1,);
_13.fld0 = 6_usize * 5_usize;
_15 = &(*_15);
_13.fld5.0.2 = (-4330395233158149872_i64);
RET = _13.fld5.0.0 as i16;
_1 = _10.fld2;
Goto(bb16)
}
bb16 = {
Call(_24 = dump_var(6_usize, 7_usize, Move(_7), 5_usize, Move(_5), 2_usize, Move(_2), 14_usize, Move(_14)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn7(mut _1: bool,mut _2: f64,mut _3: (bool, f64, f32),mut _4: (bool, f64, f32),mut _5: bool) -> (bool, f64, f32) {
mir! {
type RET = (bool, f64, f32);
let _6: ([i64; 4], u128, isize, usize);
let _7: isize;
let _8: bool;
let _9: isize;
let _10: i64;
let _11: f64;
let _12: [isize; 4];
let _13: [i32; 4];
let _14: ();
let _15: ();
{
RET = _3;
_3.1 = -RET.1;
_6.1 = !122454548086553675348216612328384015502_u128;
_7 = 195_u8 as isize;
RET.2 = (-11759937977070338760059400131503691510_i128) as f32;
RET.1 = _6.1 as f64;
_3 = (_5, _2, RET.2);
Call(_7 = fn8(_4.1, _3, _4.1, _3.1, _4.1, _4.1), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_3.0 = !_1;
RET.0 = _5;
Call(_6.0 = fn9(_7, _2, _7, RET.2, _2, _7, _7, _2, _2, _6.1, _7, _2, _3.1), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_3.2 = _4.2;
_3 = (_4.0, _4.1, RET.2);
RET.0 = _5 ^ _1;
_6.3 = 7_usize;
_6.3 = 5168_i16 as usize;
_6.3 = 5361938153744354940_usize + 1192657257688484371_usize;
_1 = !RET.0;
_11 = _3.1;
RET.1 = RET.2 as f64;
_10 = (-9_i8) as i64;
_3.1 = _11 + _11;
_3.0 = _10 == _10;
_6.0 = [_10,_10,_10,_10];
_6.2 = _7 | _7;
_4 = (_3.0, _3.1, _3.2);
_5 = _1;
_9 = _6.3 as isize;
_2 = _3.1;
_8 = RET.0;
_9 = _7;
RET.1 = 41362_u16 as f64;
RET.2 = _4.1 as f32;
_4 = (RET.0, _11, RET.2);
_3.2 = RET.2 + _4.2;
_4.2 = RET.2 + _3.2;
Goto(bb3)
}
bb3 = {
Call(_14 = dump_var(7_usize, 9_usize, Move(_9), 8_usize, Move(_8), 6_usize, Move(_6), 15_usize, _15), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn8(mut _1: f64,mut _2: (bool, f64, f32),mut _3: f64,mut _4: f64,mut _5: f64,mut _6: f64) -> isize {
mir! {
type RET = isize;
let _7: [i64; 4];
let _8: ([i64; 4], u128, isize, usize);
let _9: isize;
let _10: [u64; 3];
let _11: [isize; 4];
let _12: Adt44;
let _13: [u16; 8];
let _14: isize;
let _15: i64;
let _16: i64;
let _17: ();
let _18: ();
{
_6 = _1;
_6 = _5;
RET = 11_i8 as isize;
_7 = [4383781643815798655_i64,(-6194815519185050805_i64),8977959524772764083_i64,3061171975270000930_i64];
RET = -9223372036854775807_isize;
_7 = [7349879818971171759_i64,(-610967036767539583_i64),5447899264811219688_i64,(-4783537852907515993_i64)];
_8.0 = [120835083179650424_i64,(-1016064150532015413_i64),(-2459121543367226555_i64),966260317477164908_i64];
_8.1 = _4 as u128;
_4 = _8.1 as f64;
_8.2 = RET ^ RET;
_8.2 = 6181364736658889466_i64 as isize;
RET = _8.2 & _8.2;
_1 = -_3;
RET = _8.2 & _8.2;
RET = (-3884150808795535579_i64) as isize;
_4 = _6;
RET = _8.2;
_10 = [9352404489312523240_u64,11219194297151346573_u64,9717383745148008481_u64];
_2.0 = false;
_4 = 49537_u16 as f64;
Goto(bb1)
}
bb1 = {
_4 = 9045022468051974604_i64 as f64;
_3 = 58587_u16 as f64;
_4 = _5 - _2.1;
_5 = -_3;
_8.3 = _2.0 as usize;
_3 = _4;
_9 = RET;
_9 = 198_u8 as isize;
Goto(bb2)
}
bb2 = {
_2.1 = 807_i16 as f64;
_3 = _8.3 as f64;
_8.3 = _9 as usize;
_7 = [(-2294916461184089813_i64),(-3119366792795181763_i64),(-6696844593534038959_i64),8521665086389846937_i64];
RET = _8.2 * _9;
_6 = 21298_u16 as f64;
_8.3 = 7023586548387169696_usize;
_8.2 = _8.1 as isize;
_2.1 = 95_u8 as f64;
_9 = _8.3 as isize;
_8.3 = 2_usize;
RET = _8.2 & _8.2;
_1 = _4;
_8.3 = 0_usize;
_13 = [57080_u16,56802_u16,18447_u16,37508_u16,16993_u16,41122_u16,50130_u16,61786_u16];
_8.0 = [1970184738793095367_i64,(-3203187775317258923_i64),9065666099940674482_i64,(-6348904925597840063_i64)];
Goto(bb3)
}
bb3 = {
Call(_17 = dump_var(8_usize, 8_usize, Move(_8), 7_usize, Move(_7), 18_usize, _18, 18_usize, _18), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn9(mut _1: isize,mut _2: f64,mut _3: isize,mut _4: f32,mut _5: f64,mut _6: isize,mut _7: isize,mut _8: f64,mut _9: f64,mut _10: u128,mut _11: isize,mut _12: f64,mut _13: f64) -> [i64; 4] {
mir! {
type RET = [i64; 4];
let _14: isize;
let _15: (i16, u16, i16, [i32; 4]);
let _16: [isize; 4];
let _17: i8;
let _18: f64;
let _19: usize;
let _20: isize;
let _21: bool;
let _22: char;
let _23: (i8, *mut i64, i64, (bool, f64, f32));
let _24: Adt47;
let _25: bool;
let _26: bool;
let _27: f32;
let _28: u8;
let _29: isize;
let _30: char;
let _31: [i64; 7];
let _32: [i32; 4];
let _33: f64;
let _34: f64;
let _35: [usize; 1];
let _36: Adt54;
let _37: (bool, f64, f32);
let _38: bool;
let _39: ([i64; 4], u128, isize, usize);
let _40: u64;
let _41: f64;
let _42: Adt53;
let _43: u64;
let _44: u128;
let _45: f32;
let _46: f64;
let _47: bool;
let _48: Adt56;
let _49: Adt60;
let _50: u32;
let _51: Adt44;
let _52: [i64; 4];
let _53: ();
let _54: ();
{
_1 = !_3;
RET = [8696699859761464697_i64,5629427049750098846_i64,(-3994424628193141509_i64),(-1836396465209875443_i64)];
_15.0 = (-1626_i16) * (-2120_i16);
_7 = _5 as isize;
_15.1 = _10 as u16;
_12 = _4 as f64;
_5 = -_2;
_2 = _8 - _5;
Call(_12 = core::intrinsics::transmute(_7), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_7 = _11 >> _3;
_13 = _5 * _2;
_4 = 109_u8 as f32;
RET = [2821741937394630350_i64,2448192930348738288_i64,(-6875227944721959236_i64),(-932678478984206911_i64)];
_13 = _2 * _2;
_2 = 2218753960_u32 as f64;
_5 = _13 * _13;
_13 = _5 - _5;
_12 = (-124_i8) as f64;
_15.3 = [410818933_i32,(-341715503_i32),1532812888_i32,676410354_i32];
_15.0 = 17721_i16 * (-8898_i16);
_2 = _5;
_1 = !_11;
_8 = -_5;
_6 = !_11;
RET = [(-2287801406950365256_i64),1339605804148019707_i64,7341202345216390906_i64,(-2839111998767155735_i64)];
_11 = _6;
_3 = 13955741_u32 as isize;
_13 = _2;
_15.2 = _15.0;
_12 = _2;
_18 = _2 - _8;
Goto(bb2)
}
bb2 = {
_17 = 166_u8 as i8;
_16 = [_6,_11,_11,_11];
_18 = 13414207911162957030_u64 as f64;
_7 = -_1;
_15.0 = (-2050484776_i32) as i16;
_15.1 = 21276_u16 & 29244_u16;
_7 = '\u{c3f1b}' as isize;
_16 = [_11,_6,_1,_6];
_8 = _12;
RET = [8376973166315181432_i64,(-6656472045655854802_i64),7529483820642198647_i64,(-3955382796076261491_i64)];
_15.0 = _15.2;
RET = [(-2236547272264200324_i64),(-1488672855059981416_i64),(-8803188292899971522_i64),3633608167408673513_i64];
_15.1 = 52112_u16 + 46906_u16;
_5 = -_12;
RET = [(-8396841671445154370_i64),8730823189819935911_i64,6250898063447344132_i64,(-4366314392298284383_i64)];
_18 = _15.2 as f64;
_14 = 83_u8 as isize;
_19 = 2_usize - 2_usize;
_9 = _2 - _5;
_12 = _8 - _5;
RET = [(-4353099615852756737_i64),6817502351353434878_i64,4657927177512133209_i64,6590941474171169774_i64];
Call(_18 = core::intrinsics::transmute(_6), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_2 = -_13;
_7 = _6;
_5 = _15.0 as f64;
_8 = -_2;
_23.2 = _17 as i64;
_11 = -_6;
_23.1 = core::ptr::addr_of_mut!(_23.2);
RET = [_23.2,_23.2,_23.2,_23.2];
_23.0 = -_17;
_19 = _10 as usize;
_9 = _10 as f64;
_19 = 2588362259469256297_usize;
_15.1 = !5912_u16;
_13 = _15.2 as f64;
_23.3 = (false, _12, _4);
_2 = _8 - _23.3.1;
_22 = '\u{48b0}';
_6 = _15.0 as isize;
_18 = _23.3.1;
_3 = _11 * _1;
Call(_23.3 = fn10(_18, _12, _3, _18, _8, _16, _8, _12, _2), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
RET = [_23.2,_23.2,_23.2,_23.2];
_23.0 = _22 as i8;
_23.3.1 = -_18;
_1 = _23.3.2 as isize;
_18 = -_12;
_19 = 7_usize;
_23.3.2 = _4 * _4;
_23.3.0 = true;
_7 = -_1;
_25 = _18 <= _2;
_5 = _15.2 as f64;
_18 = -_23.3.1;
_15.1 = 56917_u16;
_28 = !170_u8;
RET = [_23.2,_23.2,_23.2,_23.2];
_15.1 = 35446_u16;
_26 = _25;
_6 = -_3;
_21 = _26;
_13 = _8;
RET = [_23.2,_23.2,_23.2,_23.2];
_22 = '\u{c9474}';
Goto(bb5)
}
bb5 = {
_21 = !_26;
_23.3 = (_25, _2, _4);
_23.3 = (_21, _12, _4);
_7 = _6;
_8 = -_23.3.1;
_26 = _23.3.0 | _21;
_29 = _7;
_31 = [_23.2,_23.2,_23.2,_23.2,_23.2,_23.2,_23.2];
_19 = 5_usize * 231365432290084461_usize;
_28 = 75_u8 | 110_u8;
_10 = 66693695382505053094513496487407104759_u128;
_28 = 171_u8;
_22 = '\u{c7bb8}';
_15.2 = !_15.0;
_4 = -_23.3.2;
_15.0 = _15.2;
_2 = 1486460618_i32 as f64;
_14 = -_3;
_12 = -_13;
_12 = -_8;
Call(_1 = fn11(_23, _6, _7, _14, _25), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
RET = [_23.2,_23.2,_23.2,_23.2];
_23.3 = (_21, _18, _4);
_3 = _22 as isize;
_27 = _4;
match _28 {
0 => bb1,
171 => bb8,
_ => bb7
}
}
bb7 = {
RET = [_23.2,_23.2,_23.2,_23.2];
_23.0 = _22 as i8;
_23.3.1 = -_18;
_1 = _23.3.2 as isize;
_18 = -_12;
_19 = 7_usize;
_23.3.2 = _4 * _4;
_23.3.0 = true;
_7 = -_1;
_25 = _18 <= _2;
_5 = _15.2 as f64;
_18 = -_23.3.1;
_15.1 = 56917_u16;
_28 = !170_u8;
RET = [_23.2,_23.2,_23.2,_23.2];
_15.1 = 35446_u16;
_26 = _25;
_6 = -_3;
_21 = _26;
_13 = _8;
RET = [_23.2,_23.2,_23.2,_23.2];
_22 = '\u{c9474}';
Goto(bb5)
}
bb8 = {
_23.1 = core::ptr::addr_of_mut!(_23.2);
_14 = -_7;
_35 = [_19];
_14 = _6 & _1;
_35 = [_19];
_22 = '\u{27934}';
_15.3 = [1763680598_i32,1068596499_i32,(-1216007294_i32),617213517_i32];
_23.1 = core::ptr::addr_of_mut!(_23.2);
_37.1 = _18 - _18;
_4 = _28 as f32;
RET = [_23.2,_23.2,_23.2,_23.2];
_14 = _7 << _6;
RET = [_23.2,_23.2,_23.2,_23.2];
_26 = _13 == _23.3.1;
_15.2 = !_15.0;
_30 = _22;
_37 = _23.3;
Goto(bb9)
}
bb9 = {
_13 = -_23.3.1;
_23.3.0 = !_26;
_17 = _23.3.2 as i8;
_37.2 = -_23.3.2;
_38 = !_26;
_35 = [_19];
_23.3.1 = _37.1;
_7 = _29 | _1;
_1 = _7;
_15.3 = [15158603_i32,966590510_i32,(-467896658_i32),1536892002_i32];
_21 = !_23.3.0;
_31 = [_23.2,_23.2,_23.2,_23.2,_23.2,_23.2,_23.2];
_7 = _23.3.2 as isize;
_2 = _12 * _18;
_6 = _17 as isize;
_42.fld2 = _23.2 >> _1;
Call(_2 = fn12(_12, _8), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_17 = !_23.0;
_23.0 = _14 as i8;
match _15.1 {
0 => bb11,
35446 => bb13,
_ => bb12
}
}
bb11 = {
RET = [_23.2,_23.2,_23.2,_23.2];
_23.0 = _22 as i8;
_23.3.1 = -_18;
_1 = _23.3.2 as isize;
_18 = -_12;
_19 = 7_usize;
_23.3.2 = _4 * _4;
_23.3.0 = true;
_7 = -_1;
_25 = _18 <= _2;
_5 = _15.2 as f64;
_18 = -_23.3.1;
_15.1 = 56917_u16;
_28 = !170_u8;
RET = [_23.2,_23.2,_23.2,_23.2];
_15.1 = 35446_u16;
_26 = _25;
_6 = -_3;
_21 = _26;
_13 = _8;
RET = [_23.2,_23.2,_23.2,_23.2];
_22 = '\u{c9474}';
Goto(bb5)
}
bb12 = {
_7 = _11 >> _3;
_13 = _5 * _2;
_4 = 109_u8 as f32;
RET = [2821741937394630350_i64,2448192930348738288_i64,(-6875227944721959236_i64),(-932678478984206911_i64)];
_13 = _2 * _2;
_2 = 2218753960_u32 as f64;
_5 = _13 * _13;
_13 = _5 - _5;
_12 = (-124_i8) as f64;
_15.3 = [410818933_i32,(-341715503_i32),1532812888_i32,676410354_i32];
_15.0 = 17721_i16 * (-8898_i16);
_2 = _5;
_1 = !_11;
_8 = -_5;
_6 = !_11;
RET = [(-2287801406950365256_i64),1339605804148019707_i64,7341202345216390906_i64,(-2839111998767155735_i64)];
_11 = _6;
_3 = 13955741_u32 as isize;
_13 = _2;
_15.2 = _15.0;
_12 = _2;
_18 = _2 - _8;
Goto(bb2)
}
bb13 = {
_11 = !_14;
_20 = _11 >> _42.fld2;
_15.0 = -_15.2;
_23.3.0 = !_26;
_15.0 = -_15.2;
_28 = !83_u8;
_3 = _11;
_17 = -_23.0;
_18 = _10 as f64;
_27 = -_37.2;
_23.0 = -_17;
_42.fld1 = _10 / _10;
_16 = [_3,_20,_11,_14];
_45 = _4 - _4;
_45 = 1278280140_u32 as f32;
_23.2 = _42.fld2;
_48.fld2 = (_28,);
_42 = Adt53 { fld0: _35,fld1: _10,fld2: _23.2 };
_34 = _23.3.1;
_48.fld0 = (_37.0, _37.1, _27);
_6 = _42.fld2 as isize;
match _15.1 {
0 => bb14,
1 => bb15,
2 => bb16,
3 => bb17,
35446 => bb19,
_ => bb18
}
}
bb14 = {
_7 = _11 >> _3;
_13 = _5 * _2;
_4 = 109_u8 as f32;
RET = [2821741937394630350_i64,2448192930348738288_i64,(-6875227944721959236_i64),(-932678478984206911_i64)];
_13 = _2 * _2;
_2 = 2218753960_u32 as f64;
_5 = _13 * _13;
_13 = _5 - _5;
_12 = (-124_i8) as f64;
_15.3 = [410818933_i32,(-341715503_i32),1532812888_i32,676410354_i32];
_15.0 = 17721_i16 * (-8898_i16);
_2 = _5;
_1 = !_11;
_8 = -_5;
_6 = !_11;
RET = [(-2287801406950365256_i64),1339605804148019707_i64,7341202345216390906_i64,(-2839111998767155735_i64)];
_11 = _6;
_3 = 13955741_u32 as isize;
_13 = _2;
_15.2 = _15.0;
_12 = _2;
_18 = _2 - _8;
Goto(bb2)
}
bb15 = {
RET = [_23.2,_23.2,_23.2,_23.2];
_23.0 = _22 as i8;
_23.3.1 = -_18;
_1 = _23.3.2 as isize;
_18 = -_12;
_19 = 7_usize;
_23.3.2 = _4 * _4;
_23.3.0 = true;
_7 = -_1;
_25 = _18 <= _2;
_5 = _15.2 as f64;
_18 = -_23.3.1;
_15.1 = 56917_u16;
_28 = !170_u8;
RET = [_23.2,_23.2,_23.2,_23.2];
_15.1 = 35446_u16;
_26 = _25;
_6 = -_3;
_21 = _26;
_13 = _8;
RET = [_23.2,_23.2,_23.2,_23.2];
_22 = '\u{c9474}';
Goto(bb5)
}
bb16 = {
_17 = 166_u8 as i8;
_16 = [_6,_11,_11,_11];
_18 = 13414207911162957030_u64 as f64;
_7 = -_1;
_15.0 = (-2050484776_i32) as i16;
_15.1 = 21276_u16 & 29244_u16;
_7 = '\u{c3f1b}' as isize;
_16 = [_11,_6,_1,_6];
_8 = _12;
RET = [8376973166315181432_i64,(-6656472045655854802_i64),7529483820642198647_i64,(-3955382796076261491_i64)];
_15.0 = _15.2;
RET = [(-2236547272264200324_i64),(-1488672855059981416_i64),(-8803188292899971522_i64),3633608167408673513_i64];
_15.1 = 52112_u16 + 46906_u16;
_5 = -_12;
RET = [(-8396841671445154370_i64),8730823189819935911_i64,6250898063447344132_i64,(-4366314392298284383_i64)];
_18 = _15.2 as f64;
_14 = 83_u8 as isize;
_19 = 2_usize - 2_usize;
_9 = _2 - _5;
_12 = _8 - _5;
RET = [(-4353099615852756737_i64),6817502351353434878_i64,4657927177512133209_i64,6590941474171169774_i64];
Call(_18 = core::intrinsics::transmute(_6), ReturnTo(bb3), UnwindUnreachable())
}
bb17 = {
_13 = -_23.3.1;
_23.3.0 = !_26;
_17 = _23.3.2 as i8;
_37.2 = -_23.3.2;
_38 = !_26;
_35 = [_19];
_23.3.1 = _37.1;
_7 = _29 | _1;
_1 = _7;
_15.3 = [15158603_i32,966590510_i32,(-467896658_i32),1536892002_i32];
_21 = !_23.3.0;
_31 = [_23.2,_23.2,_23.2,_23.2,_23.2,_23.2,_23.2];
_7 = _23.3.2 as isize;
_2 = _12 * _18;
_6 = _17 as isize;
_42.fld2 = _23.2 >> _1;
Call(_2 = fn12(_12, _8), ReturnTo(bb10), UnwindUnreachable())
}
bb18 = {
_2 = -_13;
_7 = _6;
_5 = _15.0 as f64;
_8 = -_2;
_23.2 = _17 as i64;
_11 = -_6;
_23.1 = core::ptr::addr_of_mut!(_23.2);
RET = [_23.2,_23.2,_23.2,_23.2];
_23.0 = -_17;
_19 = _10 as usize;
_9 = _10 as f64;
_19 = 2588362259469256297_usize;
_15.1 = !5912_u16;
_13 = _15.2 as f64;
_23.3 = (false, _12, _4);
_2 = _8 - _23.3.1;
_22 = '\u{48b0}';
_6 = _15.0 as isize;
_18 = _23.3.1;
_3 = _11 * _1;
Call(_23.3 = fn10(_18, _12, _3, _18, _8, _16, _8, _12, _2), ReturnTo(bb4), UnwindUnreachable())
}
bb19 = {
_44 = _42.fld1 | _42.fld1;
_37 = (_48.fld0.0, _13, _27);
_16 = [_11,_20,_1,_14];
_37 = (_21, _34, _4);
_45 = 25845970107494375877693114620950553302_i128 as f32;
_15.1 = 26465_u16 | 38211_u16;
_15.3 = [1645435578_i32,1603953969_i32,1376476292_i32,1218819576_i32];
_27 = -_48.fld0.2;
_23.3.0 = _8 == _23.3.1;
_16 = [_20,_14,_11,_1];
_11 = !_1;
RET = [_42.fld2,_23.2,_42.fld2,_23.2];
RET = [_42.fld2,_23.2,_23.2,_42.fld2];
_34 = _48.fld0.1;
_43 = !7447578053428011055_u64;
_20 = _14;
_37.2 = _45;
_44 = _10 % _42.fld1;
_46 = _37.1;
_50 = _23.3.2 as u32;
_32 = [1590640009_i32,96830321_i32,1684745179_i32,(-1162848728_i32)];
_52 = RET;
Goto(bb20)
}
bb20 = {
Call(_53 = dump_var(9_usize, 44_usize, Move(_44), 19_usize, Move(_19), 38_usize, Move(_38), 17_usize, Move(_17)), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
Call(_53 = dump_var(9_usize, 25_usize, Move(_25), 29_usize, Move(_29), 10_usize, Move(_10), 43_usize, Move(_43)), ReturnTo(bb22), UnwindUnreachable())
}
bb22 = {
Call(_53 = dump_var(9_usize, 7_usize, Move(_7), 3_usize, Move(_3), 50_usize, Move(_50), 52_usize, Move(_52)), ReturnTo(bb23), UnwindUnreachable())
}
bb23 = {
Call(_53 = dump_var(9_usize, 32_usize, Move(_32), 54_usize, _54, 54_usize, _54, 54_usize, _54), ReturnTo(bb24), UnwindUnreachable())
}
bb24 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn10(mut _1: f64,mut _2: f64,mut _3: isize,mut _4: f64,mut _5: f64,mut _6: [isize; 4],mut _7: f64,mut _8: f64,mut _9: f64) -> (bool, f64, f32) {
mir! {
type RET = (bool, f64, f32);
let _10: u64;
let _11: isize;
let _12: Adt53;
let _13: isize;
let _14: ();
let _15: ();
{
_9 = 1092504133_i32 as f64;
RET.0 = true;
_7 = _1 - _2;
RET.1 = -_2;
RET.2 = 1419236952_i32 as f32;
_5 = _7 - _8;
RET.1 = _1;
RET.2 = 6884_i16 as f32;
RET.1 = (-8711120052872737577_i64) as f64;
RET.0 = false | true;
_3 = 53311_u16 as isize;
_12.fld0 = [3_usize];
_12.fld2 = (-2387458270334880048_i64) | 4024359985451546479_i64;
RET.0 = false ^ true;
_12.fld2 = 6514869108346874224_i64 ^ (-2200024643157761835_i64);
RET.2 = 54017_u16 as f32;
RET.2 = (-26562_i16) as f32;
_5 = _2;
_10 = 8319855025596906011_u64 * 1594313025371867518_u64;
RET.2 = _5 as f32;
_5 = _1 - _1;
_11 = _3;
_10 = 17676302001802954555_u64;
_13 = _3 ^ _3;
Goto(bb1)
}
bb1 = {
Call(_14 = dump_var(10_usize, 10_usize, Move(_10), 6_usize, Move(_6), 15_usize, _15, 15_usize, _15), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn11(mut _1: (i8, *mut i64, i64, (bool, f64, f32)),mut _2: isize,mut _3: isize,mut _4: isize,mut _5: bool) -> isize {
mir! {
type RET = isize;
let _6: isize;
let _7: isize;
let _8: ();
let _9: ();
{
RET = 190019644010097499286867646247949869773_u128 as isize;
_1.3.0 = _5;
_2 = _4;
RET = _2;
_1.0 = (-78_i8);
_1.3.1 = 355160453_u32 as f64;
_4 = RET;
RET = _3;
RET = _2;
_1.2 = 543386401934505975_i64;
_4 = -_2;
RET = _4 ^ _3;
RET = _4;
_2 = !_3;
_1.3.0 = _5;
_4 = RET - _2;
RET = _3;
Goto(bb1)
}
bb1 = {
Call(_8 = dump_var(11_usize, 5_usize, Move(_5), 4_usize, Move(_4), 9_usize, _9, 9_usize, _9), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn12(mut _1: f64,mut _2: f64) -> f64 {
mir! {
type RET = f64;
let _3: isize;
let _4: isize;
let _5: f64;
let _6: u8;
let _7: f64;
let _8: i16;
let _9: isize;
let _10: isize;
let _11: [i32; 4];
let _12: bool;
let _13: ((i8, *mut i64, i64, (bool, f64, f32)), (*mut i64,), *mut *mut f32);
let _14: u8;
let _15: *mut [i64; 4];
let _16: ((i8, *mut i64, i64, (bool, f64, f32)), (*mut i64,), *mut *mut f32);
let _17: f64;
let _18: char;
let _19: (i16, u16, i16, [i32; 4]);
let _20: f64;
let _21: [usize; 1];
let _22: Adt55;
let _23: isize;
let _24: f64;
let _25: [u64; 3];
let _26: [i32; 4];
let _27: i64;
let _28: isize;
let _29: i16;
let _30: u8;
let _31: ();
let _32: ();
{
RET = -_2;
_2 = RET - RET;
_1 = _2 + _2;
_3 = (-9223372036854775808_isize) * 9223372036854775807_isize;
RET = _1 + _1;
_1 = RET;
RET = 3002314066_u32 as f64;
_1 = _2;
_1 = 246_u8 as f64;
_2 = -_1;
RET = _2 * _1;
_1 = RET;
_4 = 3036077546711413773_u64 as isize;
_3 = _4 | _4;
Goto(bb1)
}
bb1 = {
RET = _1 + _1;
_1 = 885885007071220739_i64 as f64;
_3 = 62020_u16 as isize;
_3 = (-1744159879_i32) as isize;
_6 = (-85_i8) as u8;
_4 = !_3;
_5 = _2;
_7 = 307729746969947171_u64 as f64;
_6 = 105_u8;
_6 = 31_u8 - 2_u8;
_3 = _4;
RET = (-3937752143718592162_i64) as f64;
_6 = 1826237964570073722_i64 as u8;
_1 = (-136674733700472089861194889845182999668_i128) as f64;
_3 = (-26911015320092498495513773031211433218_i128) as isize;
_4 = _1 as isize;
_2 = _5 * _7;
Goto(bb2)
}
bb2 = {
_7 = _5 * _2;
_1 = RET * _2;
_2 = _7 * _7;
_5 = _2;
Goto(bb3)
}
bb3 = {
_6 = 248_u8 + 252_u8;
_1 = _5;
Call(_2 = core::intrinsics::fmaf64(_1, _7, RET), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_11 = [283358294_i32,1751076335_i32,(-660025315_i32),(-951843922_i32)];
_1 = -_2;
_8 = 9345_i16 - (-28097_i16);
_9 = _3;
_3 = _8 as isize;
RET = -_5;
RET = -_7;
RET = 1445821736_u32 as f64;
RET = _7;
_13.0.3.1 = 3614725480_u32 as f64;
_1 = _3 as f64;
_13.0.0 = _6 as i8;
_13.0.1 = core::ptr::addr_of_mut!(_13.0.2);
_7 = _13.0.0 as f64;
_4 = _9 >> _3;
_5 = _8 as f64;
Call(RET = core::intrinsics::transmute(_4), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
_11 = [(-1068884197_i32),1027489563_i32,497604738_i32,934502579_i32];
_13.0.3.0 = !false;
RET = 17705_u16 as f64;
_8 = (-5278_i16);
_13.1.0 = core::ptr::addr_of_mut!(_13.0.2);
_5 = _2;
_13.1.0 = core::ptr::addr_of_mut!(_13.0.2);
_13.0.3.0 = !false;
_13.1.0 = core::ptr::addr_of_mut!(_13.0.2);
RET = _2;
_13.1.0 = core::ptr::addr_of_mut!(_13.0.2);
_14 = 3800122776711300487_i64 as u8;
RET = _2;
_16.0.0 = _13.0.0;
_1 = 1697631951290472582_i64 as f64;
_13.0.3.1 = _7;
RET = -_1;
RET = _6 as f64;
_18 = '\u{6c8e9}';
_16.0.3.0 = _13.0.3.0 & _13.0.3.0;
_19.2 = _8 << _6;
RET = _13.0.3.1 * _13.0.3.1;
_20 = _2;
match _8 {
0 => bb6,
340282366920938463463374607431768206178 => bb8,
_ => bb7
}
}
bb6 = {
RET = _1 + _1;
_1 = 885885007071220739_i64 as f64;
_3 = 62020_u16 as isize;
_3 = (-1744159879_i32) as isize;
_6 = (-85_i8) as u8;
_4 = !_3;
_5 = _2;
_7 = 307729746969947171_u64 as f64;
_6 = 105_u8;
_6 = 31_u8 - 2_u8;
_3 = _4;
RET = (-3937752143718592162_i64) as f64;
_6 = 1826237964570073722_i64 as u8;
_1 = (-136674733700472089861194889845182999668_i128) as f64;
_3 = (-26911015320092498495513773031211433218_i128) as isize;
_4 = _1 as isize;
_2 = _5 * _7;
Goto(bb2)
}
bb7 = {
_6 = 248_u8 + 252_u8;
_1 = _5;
Call(_2 = core::intrinsics::fmaf64(_1, _7, RET), ReturnTo(bb4), UnwindUnreachable())
}
bb8 = {
_19.2 = _8;
_14 = _6;
_17 = _5;
_11 = [121765827_i32,(-934199983_i32),(-354363636_i32),376645804_i32];
_22.fld1 = 4050995009_u32 as u16;
_10 = _9 + _3;
RET = _20;
_13.0.3.2 = RET as f32;
_13.0.3.0 = _16.0.3.0 & _16.0.3.0;
_19 = (_8, _22.fld1, _8, _11);
_12 = _13.0.0 > _16.0.0;
_22.fld3 = _20 as i8;
_23 = _10;
_12 = _20 < _17;
_22.fld1 = _13.0.3.2 as u16;
_16.0.1 = core::ptr::addr_of_mut!(_16.0.2);
_13.0.3.0 = !_12;
match _8 {
0 => bb2,
1 => bb9,
2 => bb10,
3 => bb11,
340282366920938463463374607431768206178 => bb13,
_ => bb12
}
}
bb9 = {
RET = _1 + _1;
_1 = 885885007071220739_i64 as f64;
_3 = 62020_u16 as isize;
_3 = (-1744159879_i32) as isize;
_6 = (-85_i8) as u8;
_4 = !_3;
_5 = _2;
_7 = 307729746969947171_u64 as f64;
_6 = 105_u8;
_6 = 31_u8 - 2_u8;
_3 = _4;
RET = (-3937752143718592162_i64) as f64;
_6 = 1826237964570073722_i64 as u8;
_1 = (-136674733700472089861194889845182999668_i128) as f64;
_3 = (-26911015320092498495513773031211433218_i128) as isize;
_4 = _1 as isize;
_2 = _5 * _7;
Goto(bb2)
}
bb10 = {
RET = _1 + _1;
_1 = 885885007071220739_i64 as f64;
_3 = 62020_u16 as isize;
_3 = (-1744159879_i32) as isize;
_6 = (-85_i8) as u8;
_4 = !_3;
_5 = _2;
_7 = 307729746969947171_u64 as f64;
_6 = 105_u8;
_6 = 31_u8 - 2_u8;
_3 = _4;
RET = (-3937752143718592162_i64) as f64;
_6 = 1826237964570073722_i64 as u8;
_1 = (-136674733700472089861194889845182999668_i128) as f64;
_3 = (-26911015320092498495513773031211433218_i128) as isize;
_4 = _1 as isize;
_2 = _5 * _7;
Goto(bb2)
}
bb11 = {
_6 = 248_u8 + 252_u8;
_1 = _5;
Call(_2 = core::intrinsics::fmaf64(_1, _7, RET), ReturnTo(bb4), UnwindUnreachable())
}
bb12 = {
_11 = [283358294_i32,1751076335_i32,(-660025315_i32),(-951843922_i32)];
_1 = -_2;
_8 = 9345_i16 - (-28097_i16);
_9 = _3;
_3 = _8 as isize;
RET = -_5;
RET = -_7;
RET = 1445821736_u32 as f64;
RET = _7;
_13.0.3.1 = 3614725480_u32 as f64;
_1 = _3 as f64;
_13.0.0 = _6 as i8;
_13.0.1 = core::ptr::addr_of_mut!(_13.0.2);
_7 = _13.0.0 as f64;
_4 = _9 >> _3;
_5 = _8 as f64;
Call(RET = core::intrinsics::transmute(_4), ReturnTo(bb5), UnwindUnreachable())
}
bb13 = {
_8 = !_19.0;
_23 = _19.2 as isize;
_16.0.3.1 = _13.0.3.1 + _13.0.3.1;
_22.fld0 = [_22.fld1,_22.fld1,_22.fld1,_22.fld1,_22.fld1,_22.fld1,_19.1,_22.fld1];
_13.0.3.2 = 7075033773438884224_usize as f32;
RET = _16.0.3.1;
_9 = !_4;
_12 = _13.0.3.0 & _13.0.3.0;
_29 = 27544934937626535921249178144826728000_i128 as i16;
RET = (-34856256637522803124777325192507942458_i128) as f64;
_2 = _16.0.3.1 * _16.0.3.1;
match _19.0 {
340282366920938463463374607431768206178 => bb14,
_ => bb7
}
}
bb14 = {
_16.0.2 = 2332918944065559761_i64;
_27 = !_16.0.2;
_29 = _8;
_26 = [2105678545_i32,(-1972068986_i32),(-1930320516_i32),(-273994866_i32)];
_24 = 9919358975048403263_u64 as f64;
_13.1.0 = _16.0.1;
_1 = 217038317906401718054573766706465229171_u128 as f64;
_16.1 = _13.1;
_16.0.3.2 = -_13.0.3.2;
_11 = _26;
_16.1.0 = core::ptr::addr_of_mut!(_16.0.2);
RET = -_17;
_13.0.1 = _16.0.1;
_17 = -_5;
_29 = _8 | _8;
_22.fld3 = _16.0.0 | _13.0.0;
_22.fld1 = _6 as u16;
_8 = _19.2 & _29;
_16.0 = (_22.fld3, _13.1.0, _27, _13.0.3);
_2 = _17 + _16.0.3.1;
_19.0 = !_8;
_7 = _2;
_13.0.0 = 60376620936339016088006094645557743653_i128 as i8;
_13.0.2 = _27;
_20 = _2 - _17;
_13.0.3.2 = _16.0.3.2 + _16.0.3.2;
_13.0.3.0 = _16.0.3.0;
_30 = _16.0.0 as u8;
_21 = [15497640071462527940_usize];
Goto(bb15)
}
bb15 = {
Call(_31 = dump_var(12_usize, 30_usize, Move(_30), 8_usize, Move(_8), 9_usize, Move(_9), 11_usize, Move(_11)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_31 = dump_var(12_usize, 21_usize, Move(_21), 26_usize, Move(_26), 18_usize, Move(_18), 12_usize, Move(_12)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn13(mut _1: (bool, f64, f32),mut _2: isize,mut _3: f32,mut _4: f32) -> (*mut i64,) {
mir! {
type RET = (*mut i64,);
let _5: *mut f32;
let _6: u128;
let _7: isize;
let _8: i8;
let _9: [u16; 8];
let _10: ([isize; 4],);
let _11: Adt59;
let _12: u64;
let _13: ([i64; 4], u128, isize, usize);
let _14: f32;
let _15: ([i64; 4], u128, isize, usize);
let _16: Adt60;
let _17: u32;
let _18: (u8,);
let _19: i32;
let _20: i64;
let _21: char;
let _22: i16;
let _23: i32;
let _24: [i64; 7];
let _25: i32;
let _26: Adt46;
let _27: isize;
let _28: Adt54;
let _29: i32;
let _30: isize;
let _31: i16;
let _32: i8;
let _33: ();
let _34: ();
{
_4 = _3;
_6 = _1.0 as u128;
_6 = !105963741593778684874524960677736105243_u128;
_5 = core::ptr::addr_of_mut!(_1.2);
_1.0 = !false;
_1.2 = _3;
_1.0 = !false;
_1.1 = 791889381_u32 as f64;
_4 = -_3;
_5 = core::ptr::addr_of_mut!(_1.2);
_1.2 = 36136_u16 as f32;
_7 = _2 | _2;
_1.0 = true | true;
_4 = _3 - _3;
_5 = core::ptr::addr_of_mut!(_1.2);
_6 = 163779406121895526450579769896856124052_u128 ^ 260167254985046818513685913994525002429_u128;
_9 = [11199_u16,7036_u16,59232_u16,22856_u16,3264_u16,586_u16,48746_u16,37194_u16];
_6 = 44943900078088911926446804719285878772_i128 as u128;
_2 = -_7;
Goto(bb1)
}
bb1 = {
_1.0 = false | true;
_7 = _2;
_8 = _1.1 as i8;
_1.1 = 2442728916065529265_u64 as f64;
_1.0 = !false;
_6 = 227463436080264506327241482535745624845_u128;
_5 = core::ptr::addr_of_mut!(_1.2);
_3 = _4 * _4;
_9 = [52370_u16,63271_u16,61678_u16,21520_u16,16078_u16,35811_u16,61359_u16,43864_u16];
match _6 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
227463436080264506327241482535745624845 => bb8,
_ => bb7
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_13.3 = _1.1 as usize;
_13.0 = [3545856425693844787_i64,8189618123699419557_i64,(-7483414824452525335_i64),(-4503266946783939881_i64)];
_13.2 = _7 - _2;
_1.1 = 1231604236_i32 as f64;
_3 = 13866603611668034797_u64 as f32;
_13.1 = _6 % _6;
_13.0 = [6845000310361650805_i64,6678903286825966019_i64,6406016425732524599_i64,8436703389130522319_i64];
_13.2 = -_7;
_1.2 = 2322649557505127100_u64 as f32;
_13.0 = [(-7611560893725502628_i64),1901174390537816182_i64,(-3476649614314568092_i64),3215319622922035019_i64];
_10.0 = [_2,_13.2,_2,_2];
Goto(bb9)
}
bb9 = {
_15.2 = _7;
_4 = (-3775643722277017313_i64) as f32;
_15.3 = !_13.3;
_6 = !_13.1;
_13.1 = _8 as u128;
_15.0 = [2868582666065445486_i64,(-7551660356525427078_i64),(-1090695923302167487_i64),8804697227595039046_i64];
_15.0 = _13.0;
_10.0 = [_13.2,_13.2,_7,_15.2];
_14 = _1.2;
_15.3 = _13.3;
_1.0 = false;
_13.2 = -_15.2;
_5 = core::ptr::addr_of_mut!(_3);
_15.1 = !_13.1;
_7 = _15.2 | _2;
_6 = _15.1;
_15.3 = _6 as usize;
_3 = 741975585_u32 as f32;
_13.0 = [(-4104477373237700017_i64),7480067668843906386_i64,(-6330833071213505000_i64),(-2578870517206061086_i64)];
_6 = _13.1 << _7;
_13.3 = _15.3;
_13.3 = !_15.3;
_15.1 = _6;
_10.0 = [_7,_15.2,_7,_7];
_13.0 = [2921720101888019772_i64,(-1898819926069778513_i64),(-8842367707638132583_i64),856072434874899255_i64];
_12 = !13258444536985171973_u64;
_15.1 = _6 - _13.1;
_13.1 = 318175977_i32 as u128;
Goto(bb10)
}
bb10 = {
_15.1 = '\u{eea23}' as u128;
_5 = core::ptr::addr_of_mut!((*_5));
_13.3 = _15.3;
_6 = !_13.1;
_10.0 = [_2,_13.2,_15.2,_7];
_7 = _13.2;
_15.1 = _13.1;
_5 = core::ptr::addr_of_mut!(_4);
Goto(bb11)
}
bb11 = {
_15.2 = _13.2;
_12 = !2205469158752826317_u64;
_18 = (28_u8,);
_14 = (*_5);
_15.2 = _3 as isize;
_15.0 = _13.0;
_13.2 = _18.0 as isize;
RET.0 = core::ptr::addr_of_mut!(_20);
_13.1 = 15821_i16 as u128;
_15.3 = _13.3 >> _13.2;
Call(_1.1 = core::intrinsics::transmute(_2), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
_20 = !1430275872855821326_i64;
_13.1 = _15.1;
_15.0 = [_20,_20,_20,_20];
_9 = [22076_u16,15999_u16,20942_u16,37659_u16,32375_u16,45214_u16,60796_u16,39732_u16];
_15.3 = !_13.3;
_6 = !_15.1;
_1.2 = (*_5);
_18.0 = 232_u8 << _6;
_26.fld3 = _6 >> _15.1;
_24 = [_20,_20,_20,_20,_20,_20,_20];
_15.1 = _26.fld3;
_23 = (-336446236_i32) * 1330475470_i32;
_13.1 = !_15.1;
_15.0 = [_20,_20,_20,_20];
_26.fld2 = _9;
_20 = _3 as i64;
Call(_15.1 = core::intrinsics::bswap(_26.fld3), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
_14 = -_1.2;
_13.1 = !_26.fld3;
_8 = '\u{9ea25}' as i8;
_4 = _3 + _3;
_15.1 = !_26.fld3;
_26.fld3 = _6 * _6;
_5 = core::ptr::addr_of_mut!((*_5));
_26.fld5 = core::ptr::addr_of!(_5);
_24 = [_20,_20,_20,_20,_20,_20,_20];
_9 = _26.fld2;
RET.0 = core::ptr::addr_of_mut!(_20);
_21 = '\u{561f9}';
_26.fld3 = !_15.1;
_18 = (225_u8,);
_10.0 = [_2,_2,_7,_2];
RET.0 = core::ptr::addr_of_mut!(_20);
_12 = !16929830362120636888_u64;
_2 = _21 as isize;
_27 = _23 as isize;
_29 = _23;
_25 = _12 as i32;
_13.3 = _15.3 * _15.3;
_26.fld0 = !(-32539232344243807848339599082060741235_i128);
_13.2 = _7 << _13.3;
Goto(bb14)
}
bb14 = {
_7 = !_13.2;
_1.0 = true ^ true;
_15.0 = [_20,_20,_20,_20];
Goto(bb15)
}
bb15 = {
Call(_33 = dump_var(13_usize, 9_usize, Move(_9), 6_usize, Move(_6), 20_usize, Move(_20), 10_usize, Move(_10)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_33 = dump_var(13_usize, 27_usize, Move(_27), 13_usize, Move(_13), 23_usize, Move(_23), 7_usize, Move(_7)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn14(mut _1: f64,mut _2: bool,mut _3: isize,mut _4: (bool, f64, f32),mut _5: bool,mut _6: f64,mut _7: bool,mut _8: isize,mut _9: f64,mut _10: i32,mut _11: f32) -> i64 {
mir! {
type RET = i64;
let _12: *mut *mut f32;
let _13: ([isize; 4],);
let _14: f64;
let _15: f64;
let _16: (u8,);
let _17: ((i8, *mut i64, i64, (bool, f64, f32)), (*mut i64,), *mut *mut f32);
let _18: [u16; 8];
let _19: bool;
let _20: Adt44;
let _21: [u64; 3];
let _22: char;
let _23: u128;
let _24: Adt56;
let _25: [isize; 4];
let _26: [u16; 8];
let _27: u128;
let _28: u128;
let _29: (i16, u16, i16, [i32; 4]);
let _30: *mut f32;
let _31: [i64; 4];
let _32: isize;
let _33: isize;
let _34: ();
let _35: ();
{
_6 = _1 + _1;
RET = 3819293370_u32 as i64;
_6 = _1;
_10 = !(-153047701_i32);
_1 = _9 * _6;
_7 = !_4.0;
_4.1 = -_6;
_7 = _4.0;
_9 = _11 as f64;
RET = (-7414412025721103507_i64) << _3;
_10 = '\u{7c3be}' as i32;
_17.0.2 = RET | RET;
Goto(bb1)
}
bb1 = {
_17.0.3 = (_7, _1, _11);
_9 = -_1;
RET = '\u{c3a3e}' as i64;
_13.0 = [_3,_8,_8,_3];
_16 = (37_u8,);
_6 = _9 - _17.0.3.1;
_15 = _6 + _4.1;
_17.0.2 = RET + RET;
_14 = _6;
_4.2 = (-4811_i16) as f32;
_17.0.2 = RET;
_4 = (_17.0.3.0, _17.0.3.1, _11);
_17.1.0 = core::ptr::addr_of_mut!(RET);
_13.0 = [_3,_3,_8,_8];
_17.0 = ((-50_i8), _17.1.0, RET, _4);
_4.0 = _17.0.3.1 <= _1;
_17.0.3.1 = _4.1 + _1;
_16.0 = 109_u8 >> _17.0.0;
_4.0 = _5 | _7;
_16 = (159_u8,);
_10 = 1001818552_i32;
_13.0 = [_3,_3,_8,_8];
_4.0 = _7;
RET = -_17.0.2;
_6 = (-18803_i16) as f64;
_10 = (-1568972392_i32) & 309107989_i32;
_11 = _17.0.3.2;
_4.2 = (-41855622472304339980431476029822549677_i128) as f32;
Goto(bb2)
}
bb2 = {
_17.1 = (_17.0.1,);
_4.0 = !_7;
_4.2 = _17.0.3.2 + _11;
_13.0 = [_8,_8,_8,_8];
_4.0 = _7;
_6 = -_4.1;
_4 = (_17.0.3.0, _6, _17.0.3.2);
_8 = 5917949767850011458_usize as isize;
_11 = 17870028720428945668_usize as f32;
_2 = _5;
_4 = (_17.0.3.0, _14, _11);
_4.0 = _4.1 < _1;
RET = !_17.0.2;
_4.2 = _17.0.3.2;
_2 = !_4.0;
_17.0.3.2 = -_4.2;
_17.0.1 = core::ptr::addr_of_mut!(_17.0.2);
_17.1.0 = core::ptr::addr_of_mut!(_17.0.2);
_17.0.2 = RET;
_16 = (246_u8,);
_17.1.0 = _17.0.1;
_7 = !_2;
_14 = _17.0.3.2 as f64;
_19 = _7;
_4.2 = (-22524_i16) as f32;
RET = _17.0.2;
_17.0.3.1 = _4.1;
RET = 0_usize as i64;
Goto(bb3)
}
bb3 = {
_5 = _15 > _17.0.3.1;
_5 = _4.0 <= _7;
_11 = -_4.2;
_4.2 = 6370669711847579790_u64 as f32;
_17.0.3 = (_2, _4.1, _11);
_13.0 = [_3,_3,_3,_3];
_17.0.3 = _4;
_18 = [63458_u16,51924_u16,63581_u16,37605_u16,58854_u16,19764_u16,5076_u16,39432_u16];
_7 = _5;
_22 = '\u{31b51}';
Goto(bb4)
}
bb4 = {
_11 = _17.0.3.2 * _4.2;
_6 = _17.0.3.1 - _4.1;
_4 = (_19, _14, _11);
_17.0.3.0 = _7 > _7;
match _17.0.0 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb5,
4 => bb6,
340282366920938463463374607431768211406 => bb8,
_ => bb7
}
}
bb5 = {
_5 = _15 > _17.0.3.1;
_5 = _4.0 <= _7;
_11 = -_4.2;
_4.2 = 6370669711847579790_u64 as f32;
_17.0.3 = (_2, _4.1, _11);
_13.0 = [_3,_3,_3,_3];
_17.0.3 = _4;
_18 = [63458_u16,51924_u16,63581_u16,37605_u16,58854_u16,19764_u16,5076_u16,39432_u16];
_7 = _5;
_22 = '\u{31b51}';
Goto(bb4)
}
bb6 = {
_17.1 = (_17.0.1,);
_4.0 = !_7;
_4.2 = _17.0.3.2 + _11;
_13.0 = [_8,_8,_8,_8];
_4.0 = _7;
_6 = -_4.1;
_4 = (_17.0.3.0, _6, _17.0.3.2);
_8 = 5917949767850011458_usize as isize;
_11 = 17870028720428945668_usize as f32;
_2 = _5;
_4 = (_17.0.3.0, _14, _11);
_4.0 = _4.1 < _1;
RET = !_17.0.2;
_4.2 = _17.0.3.2;
_2 = !_4.0;
_17.0.3.2 = -_4.2;
_17.0.1 = core::ptr::addr_of_mut!(_17.0.2);
_17.1.0 = core::ptr::addr_of_mut!(_17.0.2);
_17.0.2 = RET;
_16 = (246_u8,);
_17.1.0 = _17.0.1;
_7 = !_2;
_14 = _17.0.3.2 as f64;
_19 = _7;
_4.2 = (-22524_i16) as f32;
RET = _17.0.2;
_17.0.3.1 = _4.1;
RET = 0_usize as i64;
Goto(bb3)
}
bb7 = {
_17.0.3 = (_7, _1, _11);
_9 = -_1;
RET = '\u{c3a3e}' as i64;
_13.0 = [_3,_8,_8,_3];
_16 = (37_u8,);
_6 = _9 - _17.0.3.1;
_15 = _6 + _4.1;
_17.0.2 = RET + RET;
_14 = _6;
_4.2 = (-4811_i16) as f32;
_17.0.2 = RET;
_4 = (_17.0.3.0, _17.0.3.1, _11);
_17.1.0 = core::ptr::addr_of_mut!(RET);
_13.0 = [_3,_3,_8,_8];
_17.0 = ((-50_i8), _17.1.0, RET, _4);
_4.0 = _17.0.3.1 <= _1;
_17.0.3.1 = _4.1 + _1;
_16.0 = 109_u8 >> _17.0.0;
_4.0 = _5 | _7;
_16 = (159_u8,);
_10 = 1001818552_i32;
_13.0 = [_3,_3,_8,_8];
_4.0 = _7;
RET = -_17.0.2;
_6 = (-18803_i16) as f64;
_10 = (-1568972392_i32) & 309107989_i32;
_11 = _17.0.3.2;
_4.2 = (-41855622472304339980431476029822549677_i128) as f32;
Goto(bb2)
}
bb8 = {
_11 = _4.2;
_9 = _15;
_9 = 27244_i16 as f64;
_20 = Adt44::Variant0 { fld0: _15,fld1: _16.0,fld2: _13,fld3: _17.0.0,fld4: (-9366_i16) };
_13 = (Field::<([isize; 4],)>(Variant(_20, 0), 2).0,);
_21 = [5982494231010044129_u64,9799846947716505112_u64,6531570081562143023_u64];
place!(Field::<i16>(Variant(_20, 0), 4)) = 12445_i16;
RET = !_17.0.2;
place!(Field::<i8>(Variant(_20, 0), 3)) = _17.0.0;
Call(RET = core::intrinsics::transmute(_3), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
_17.0.3.2 = _4.2;
_24.fld0.0 = !_5;
_4.1 = _1 * _6;
_10 = 2077394923_i32;
SetDiscriminant(_20, 1);
_7 = !_5;
_18 = [31060_u16,59992_u16,34198_u16,43512_u16,41599_u16,43507_u16,20683_u16,40465_u16];
_24.fld0 = (_7, _4.1, _11);
_24.fld1 = 61104_u16;
_23 = !332981659110956495198598756370253690882_u128;
_17.1.0 = core::ptr::addr_of_mut!(RET);
_24.fld2 = (_16.0,);
_24.fld4 = 17982508881333941626_u64 as u32;
_15 = -_24.fld0.1;
_24.fld2 = _16;
_23 = 253383718455626545386111326607883535395_u128 + 13007806276847809772311977145420618407_u128;
_10 = (-337702555_i32);
_16.0 = _24.fld2.0;
_17.0.3 = _4;
_4.1 = _15;
_2 = _15 != _24.fld0.1;
_13.0 = [_3,_8,_8,_3];
_17.0.1 = core::ptr::addr_of_mut!(RET);
_25 = [_8,_3,_3,_3];
Goto(bb10)
}
bb10 = {
_24.fld2.0 = _16.0 & _16.0;
_4.1 = -_1;
_25 = [_8,_3,_8,_3];
_21 = [4067390429754211971_u64,7975768520649709752_u64,3738929432159390460_u64];
_24.fld0.1 = (-6247_i16) as f64;
_15 = _17.0.3.1;
place!(Field::<*mut i8>(Variant(_20, 1), 1)) = core::ptr::addr_of_mut!(_17.0.0);
_25 = [_3,_8,_3,_3];
place!(Field::<([isize; 4],)>(Variant(_20, 1), 0)).0 = [_8,_3,_3,_3];
_17.0.3 = (_2, _1, _4.2);
Call(_29.0 = fn15(_4.0, _2, _17.0.3, _17.0.3.0, _17.0, _19, _17.0, Field::<*mut i8>(Variant(_20, 1), 1), _17.0.3.0), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_29.0 = 32707_i16;
_23 = !256021693808476432212240194292202629384_u128;
_29.3 = [_10,_10,_10,_10];
_24.fld2 = _16;
_17.1.0 = _17.0.1;
_28 = _23;
place!(Field::<([isize; 4],)>(Variant(_20, 1), 0)) = _13;
place!(Field::<[i32; 4]>(Variant(_20, 1), 2)) = _29.3;
_29 = (9626_i16, _24.fld1, (-8919_i16), Field::<[i32; 4]>(Variant(_20, 1), 2));
_17.0.3.0 = _5;
_29.3 = Field::<[i32; 4]>(Variant(_20, 1), 2);
_13 = Field::<([isize; 4],)>(Variant(_20, 1), 0);
_29.1 = !_24.fld1;
_24.fld2 = (_16.0,);
_17.2 = core::ptr::addr_of_mut!(_30);
_8 = _6 as isize;
RET = _17.0.2 << _8;
Goto(bb12)
}
bb12 = {
Call(_34 = dump_var(14_usize, 28_usize, Move(_28), 10_usize, Move(_10), 2_usize, Move(_2), 7_usize, Move(_7)), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
Call(_34 = dump_var(14_usize, 22_usize, Move(_22), 13_usize, Move(_13), 25_usize, Move(_25), 16_usize, Move(_16)), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn15(mut _1: bool,mut _2: bool,mut _3: (bool, f64, f32),mut _4: bool,mut _5: (i8, *mut i64, i64, (bool, f64, f32)),mut _6: bool,mut _7: (i8, *mut i64, i64, (bool, f64, f32)),mut _8: *mut i8,mut _9: bool) -> i16 {
mir! {
type RET = i16;
let _10: Adt53;
let _11: [u16; 8];
let _12: i64;
let _13: f64;
let _14: &'static f64;
let _15: u16;
let _16: Adt60;
let _17: char;
let _18: ([isize; 4],);
let _19: Adt47;
let _20: isize;
let _21: Adt44;
let _22: u128;
let _23: Adt52;
let _24: f64;
let _25: [u64; 3];
let _26: [u16; 8];
let _27: ([isize; 4],);
let _28: char;
let _29: [u32; 4];
let _30: [i32; 4];
let _31: ([isize; 4],);
let _32: *mut *mut f32;
let _33: [i64; 4];
let _34: bool;
let _35: (bool, f64, f32);
let _36: Adt53;
let _37: [i32; 4];
let _38: u64;
let _39: bool;
let _40: [i32; 4];
let _41: Adt59;
let _42: [usize; 1];
let _43: u16;
let _44: *const i16;
let _45: bool;
let _46: (u8,);
let _47: ([i64; 4], u128, isize, usize);
let _48: ();
let _49: ();
{
_11 = [44026_u16,9451_u16,57324_u16,25500_u16,54549_u16,44984_u16,33555_u16,52975_u16];
_1 = _4 & _4;
_5.3.1 = 17605595886555256573_u64 as f64;
_7.0 = -_5.0;
_7.3.1 = _3.1;
_6 = _2;
_5.3.0 = _3.0 & _9;
_5.3 = _7.3;
_8 = core::ptr::addr_of_mut!(_7.0);
_11 = [36347_u16,32751_u16,53623_u16,25660_u16,51907_u16,4458_u16,40615_u16,54104_u16];
_10.fld0 = [4676506814077570759_usize];
_7.0 = (-139535953472049003146377917678828540644_i128) as i8;
_15 = !53634_u16;
RET = 2180210268_u32 as i16;
_8 = core::ptr::addr_of_mut!(_5.0);
_8 = core::ptr::addr_of_mut!((*_8));
Goto(bb1)
}
bb1 = {
_7.3.2 = _5.3.2 + _5.3.2;
_7.0 = '\u{dda6c}' as i8;
_14 = &_3.1;
_10.fld2 = !_5.2;
_5.3 = _7.3;
_9 = _2;
_7.3.0 = _5.3.0;
RET = 16394317799086096942_u64 as i16;
_5.2 = _7.2;
_5.3 = (_6, _3.1, _7.3.2);
_7.2 = -_5.2;
_17 = '\u{8b93a}';
_4 = _5.3.0;
_7.0 = _5.0;
_7.3.0 = !_3.0;
_5.3.1 = (*_14) * (*_14);
_7.3.1 = -_5.3.1;
_14 = &_3.1;
_11 = [_15,_15,_15,_15,_15,_15,_15,_15];
_11 = [_15,_15,_15,_15,_15,_15,_15,_15];
_2 = _7.3.0 == _9;
_1 = !_4;
_12 = _5.2;
_12 = _7.2;
Goto(bb2)
}
bb2 = {
_18.0 = [9223372036854775807_isize,9223372036854775807_isize,9223372036854775807_isize,9223372036854775807_isize];
_10.fld0 = [4_usize];
_20 = -9223372036854775807_isize;
_8 = core::ptr::addr_of_mut!(_7.0);
_3.2 = -_5.3.2;
_14 = &_5.3.1;
_7.2 = _15 as i64;
_7.0 = -_5.0;
_7 = _5;
Goto(bb3)
}
bb3 = {
RET = -(-11984_i16);
_1 = _4 > _9;
_1 = !_3.0;
_10.fld1 = 3748346723182389048425812753912461675_u128;
_5.3.0 = !_4;
_10.fld0 = [14761964569943161347_usize];
_5.3.1 = _7.3.1;
_23.fld5.0 = ((*_8), _5.1, _5.2, _5.3);
match _23.fld5.0.0 {
0 => bb4,
340282366920938463463374607431768211406 => bb6,
_ => bb5
}
}
bb4 = {
_18.0 = [9223372036854775807_isize,9223372036854775807_isize,9223372036854775807_isize,9223372036854775807_isize];
_10.fld0 = [4_usize];
_20 = -9223372036854775807_isize;
_8 = core::ptr::addr_of_mut!(_7.0);
_3.2 = -_5.3.2;
_14 = &_5.3.1;
_7.2 = _15 as i64;
_7.0 = -_5.0;
_7 = _5;
Goto(bb3)
}
bb5 = {
_7.3.2 = _5.3.2 + _5.3.2;
_7.0 = '\u{dda6c}' as i8;
_14 = &_3.1;
_10.fld2 = !_5.2;
_5.3 = _7.3;
_9 = _2;
_7.3.0 = _5.3.0;
RET = 16394317799086096942_u64 as i16;
_5.2 = _7.2;
_5.3 = (_6, _3.1, _7.3.2);
_7.2 = -_5.2;
_17 = '\u{8b93a}';
_4 = _5.3.0;
_7.0 = _5.0;
_7.3.0 = !_3.0;
_5.3.1 = (*_14) * (*_14);
_7.3.1 = -_5.3.1;
_14 = &_3.1;
_11 = [_15,_15,_15,_15,_15,_15,_15,_15];
_11 = [_15,_15,_15,_15,_15,_15,_15,_15];
_2 = _7.3.0 == _9;
_1 = !_4;
_12 = _5.2;
_12 = _7.2;
Goto(bb2)
}
bb6 = {
_23.fld5.0.2 = _10.fld1 as i64;
_1 = !_4;
_5.3 = (_9, _3.1, _3.2);
_23.fld4 = (_7.1,);
Goto(bb7)
}
bb7 = {
_23.fld5.0 = (_5.0, _5.1, _7.2, _5.3);
_5.1 = _23.fld4.0;
_7.3.0 = !_2;
_23.fld5.0.3.2 = _15 as f32;
_3.2 = _7.3.2 - _7.3.2;
_7.3.0 = _2 ^ _3.0;
_23.fld3 = !4166198196_u32;
_23.fld5.1.0 = _5.1;
_23.fld2 = _20 | _20;
_23.fld7 = [_5.2,_5.2,_7.2,_5.2];
_3.1 = _7.2 as f64;
_1 = _7.3.0;
_3.1 = -_23.fld5.0.3.1;
Goto(bb8)
}
bb8 = {
_3.0 = _1;
_23.fld0 = 2_usize;
_11 = [_15,_15,_15,_15,_15,_15,_15,_15];
_23.fld5.0.1 = _7.1;
_5.3.0 = !_9;
_23.fld5.0.0 = _23.fld3 as i8;
_21 = Adt44::Variant0 { fld0: _23.fld5.0.3.1,fld1: 160_u8,fld2: _18,fld3: _7.0,fld4: RET };
_14 = &_23.fld5.0.3.1;
_4 = !_23.fld5.0.3.0;
_23.fld5.0 = _7;
_26 = [_15,_15,_15,_15,_15,_15,_15,_15];
_23.fld4.0 = _23.fld5.0.1;
_7.1 = core::ptr::addr_of_mut!(_12);
_5.2 = _12;
_23.fld6 = [_10.fld2,_5.2,_5.2,_5.2,_23.fld5.0.2,_10.fld2,_7.2];
_26 = [_15,_15,_15,_15,_15,_15,_15,_15];
_10.fld2 = _23.fld5.0.2 * _7.2;
place!(Field::<u8>(Variant(_21, 0), 1)) = 205_u8 | 0_u8;
_17 = '\u{50888}';
_23.fld7 = [_10.fld2,_5.2,_23.fld5.0.2,_5.2];
Call(_6 = fn16(_3, _23.fld5.0.3, _23.fld2, _5.3.0, _7.3, _3, Move(_21), _23.fld5.0.3, _5.3, _7, _23.fld5.0, _3, _3), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
_27 = (_18.0,);
_27.0 = [_23.fld2,_20,_23.fld2,_20];
_5.0 = _23.fld5.0.0 ^ (*_8);
_23.fld5.1.0 = core::ptr::addr_of_mut!(_23.fld5.0.2);
_3 = (_7.3.0, _23.fld5.0.3.1, _7.3.2);
_7.3.0 = !_5.3.0;
_23.fld5.1 = (_23.fld5.0.1,);
_23.fld5.0 = (_5.0, _23.fld4.0, _5.2, _3);
_7.0 = _23.fld5.0.0 & _23.fld5.0.0;
_23.fld0 = 746507726134048720_usize;
_23.fld0 = 10781597488965695356_u64 as usize;
_5.3.0 = _4 <= _23.fld5.0.3.0;
_20 = _23.fld2;
_13 = _7.3.1 + _23.fld5.0.3.1;
_6 = !_23.fld5.0.3.0;
_7.3.2 = _5.3.2 - _3.2;
_3 = (_5.3.0, _7.3.1, _23.fld5.0.3.2);
_28 = _17;
_3.1 = _13 * _23.fld5.0.3.1;
_23.fld5.1 = _23.fld4;
_24 = _3.1 - _13;
Call(_3.0 = fn17(_24, _23.fld5.0.3, _24, _9, _6, _23.fld5.0, _5, _24, _20, _9, _23.fld5.0.3.0, _5.3.0, _23.fld5.0, _5, _13), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_23.fld5.0.3.0 = !_3.0;
_31 = (_18.0,);
_5.1 = _23.fld4.0;
_18 = (_27.0,);
_17 = _28;
_30 = [(-1857449796_i32),1961038041_i32,(-451671984_i32),(-2052674176_i32)];
_23.fld5.1.0 = core::ptr::addr_of_mut!(_7.2);
_35.0 = _1;
_21 = Adt44::Variant0 { fld0: _3.1,fld1: 175_u8,fld2: _31,fld3: (*_8),fld4: RET };
_7.3 = _23.fld5.0.3;
_39 = !_7.3.0;
_40 = _30;
_36.fld1 = _10.fld1 % _10.fld1;
_14 = &_13;
_22 = _36.fld1 << (*_8);
_5.1 = _7.1;
place!(Field::<i8>(Variant(_21, 0), 3)) = -_5.0;
_31 = Field::<([isize; 4],)>(Variant(_21, 0), 2);
_11 = _26;
_6 = _22 != _22;
RET = _5.3.2 as i16;
_23.fld5.0.3.0 = !_7.3.0;
Call(_36.fld1 = core::intrinsics::bswap(_22), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_3.0 = !_4;
_36.fld0 = _10.fld0;
_34 = !_1;
_3.0 = !_5.3.0;
_7.0 = Field::<i8>(Variant(_21, 0), 3) + Field::<i8>(Variant(_21, 0), 3);
_23.fld4 = (_7.1,);
_6 = _34 & _9;
match _10.fld1 {
0 => bb6,
1 => bb2,
2 => bb10,
3 => bb5,
4 => bb12,
5 => bb13,
3748346723182389048425812753912461675 => bb15,
_ => bb14
}
}
bb12 = {
_23.fld5.0 = (_5.0, _5.1, _7.2, _5.3);
_5.1 = _23.fld4.0;
_7.3.0 = !_2;
_23.fld5.0.3.2 = _15 as f32;
_3.2 = _7.3.2 - _7.3.2;
_7.3.0 = _2 ^ _3.0;
_23.fld3 = !4166198196_u32;
_23.fld5.1.0 = _5.1;
_23.fld2 = _20 | _20;
_23.fld7 = [_5.2,_5.2,_7.2,_5.2];
_3.1 = _7.2 as f64;
_1 = _7.3.0;
_3.1 = -_23.fld5.0.3.1;
Goto(bb8)
}
bb13 = {
_7.3.2 = _5.3.2 + _5.3.2;
_7.0 = '\u{dda6c}' as i8;
_14 = &_3.1;
_10.fld2 = !_5.2;
_5.3 = _7.3;
_9 = _2;
_7.3.0 = _5.3.0;
RET = 16394317799086096942_u64 as i16;
_5.2 = _7.2;
_5.3 = (_6, _3.1, _7.3.2);
_7.2 = -_5.2;
_17 = '\u{8b93a}';
_4 = _5.3.0;
_7.0 = _5.0;
_7.3.0 = !_3.0;
_5.3.1 = (*_14) * (*_14);
_7.3.1 = -_5.3.1;
_14 = &_3.1;
_11 = [_15,_15,_15,_15,_15,_15,_15,_15];
_11 = [_15,_15,_15,_15,_15,_15,_15,_15];
_2 = _7.3.0 == _9;
_1 = !_4;
_12 = _5.2;
_12 = _7.2;
Goto(bb2)
}
bb14 = {
_18.0 = [9223372036854775807_isize,9223372036854775807_isize,9223372036854775807_isize,9223372036854775807_isize];
_10.fld0 = [4_usize];
_20 = -9223372036854775807_isize;
_8 = core::ptr::addr_of_mut!(_7.0);
_3.2 = -_5.3.2;
_14 = &_5.3.1;
_7.2 = _15 as i64;
_7.0 = -_5.0;
_7 = _5;
Goto(bb3)
}
bb15 = {
place!(Field::<f64>(Variant(_21, 0), 0)) = -_13;
place!(Field::<i16>(Variant(_21, 0), 4)) = -RET;
_31 = (Field::<([isize; 4],)>(Variant(_21, 0), 2).0,);
_35.0 = _1 == _7.3.0;
_10.fld0 = [_23.fld0];
RET = Field::<i16>(Variant(_21, 0), 4) << _7.0;
_23.fld5.0.3.1 = _13;
_7.0 = _5.0;
_42 = [_23.fld0];
_23.fld5.0.3.0 = _3.0 ^ _5.3.0;
_43 = Field::<i8>(Variant(_21, 0), 3) as u16;
_5.3.2 = _7.3.2;
_37 = [2101999616_i32,(-2008734769_i32),572041168_i32,582696436_i32];
_23.fld5.0.2 = _10.fld2 ^ _10.fld2;
_31.0 = Field::<([isize; 4],)>(Variant(_21, 0), 2).0;
_23.fld5.1.0 = _23.fld5.0.1;
_17 = _28;
_10.fld1 = !_22;
place!(Field::<([isize; 4],)>(Variant(_21, 0), 2)).0 = [_20,_23.fld2,_23.fld2,_23.fld2];
_3.1 = _23.fld5.0.3.1;
_47 = (_23.fld7, _22, _23.fld2, _23.fld0);
_33 = [_7.2,_10.fld2,_23.fld5.0.2,_23.fld5.0.2];
Goto(bb16)
}
bb16 = {
Call(_48 = dump_var(15_usize, 47_usize, Move(_47), 1_usize, Move(_1), 40_usize, Move(_40), 20_usize, Move(_20)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_48 = dump_var(15_usize, 30_usize, Move(_30), 22_usize, Move(_22), 43_usize, Move(_43), 34_usize, Move(_34)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_48 = dump_var(15_usize, 2_usize, Move(_2), 37_usize, Move(_37), 27_usize, Move(_27), 33_usize, Move(_33)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn16(mut _1: (bool, f64, f32),mut _2: (bool, f64, f32),mut _3: isize,mut _4: bool,mut _5: (bool, f64, f32),mut _6: (bool, f64, f32),mut _7: Adt44,mut _8: (bool, f64, f32),mut _9: (bool, f64, f32),mut _10: (i8, *mut i64, i64, (bool, f64, f32)),mut _11: (i8, *mut i64, i64, (bool, f64, f32)),mut _12: (bool, f64, f32),mut _13: (bool, f64, f32)) -> bool {
mir! {
type RET = bool;
let _14: Adt60;
let _15: u128;
let _16: u64;
let _17: Adt56;
let _18: Adt59;
let _19: [u32; 4];
let _20: isize;
let _21: ();
let _22: ();
{
SetDiscriminant(_7, 1);
_9 = (_8.0, _8.1, _1.2);
_9 = (_11.3.0, _8.1, _12.2);
_12.2 = _11.3.2;
RET = _12.0;
_6.2 = -_8.2;
_11 = (_10.0, _10.1, _10.2, _1);
_12.1 = -_5.1;
_12 = _2;
_15 = 1310179344_u32 as u128;
_1.2 = 12830118972729627218_u64 as f32;
_6.0 = _5.0;
place!(Field::<*mut i8>(Variant(_7, 1), 1)) = core::ptr::addr_of_mut!(_10.0);
_10.3.1 = _9.1;
_10.3.0 = _12.0 | _12.0;
_17.fld0.0 = !_11.3.0;
Goto(bb1)
}
bb1 = {
Call(_21 = dump_var(16_usize, 15_usize, Move(_15), 22_usize, _22, 22_usize, _22, 22_usize, _22), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn17(mut _1: f64,mut _2: (bool, f64, f32),mut _3: f64,mut _4: bool,mut _5: bool,mut _6: (i8, *mut i64, i64, (bool, f64, f32)),mut _7: (i8, *mut i64, i64, (bool, f64, f32)),mut _8: f64,mut _9: isize,mut _10: bool,mut _11: bool,mut _12: bool,mut _13: (i8, *mut i64, i64, (bool, f64, f32)),mut _14: (i8, *mut i64, i64, (bool, f64, f32)),mut _15: f64) -> bool {
mir! {
type RET = bool;
let _16: [i64; 7];
let _17: i16;
let _18: *mut [i64; 4];
let _19: f32;
let _20: isize;
let _21: ([i64; 4], u128, isize, usize);
let _22: bool;
let _23: &'static f64;
let _24: f64;
let _25: ();
let _26: ();
{
_13.3.0 = !_6.3.0;
_14.3.0 = _14.3.1 >= _8;
_6.3.1 = 12596364339758833717_usize as f64;
_8 = _3;
_2.0 = _4 < _5;
Goto(bb1)
}
bb1 = {
RET = _5;
_13.1 = _6.1;
_6 = (_14.0, _13.1, _13.2, _7.3);
_2.0 = _6.3.0 != RET;
_14.3.1 = 12620918657789407697_u64 as f64;
_1 = 44582_u16 as f64;
_7.0 = _6.0 | _6.0;
_8 = _15;
RET = !_10;
_21.1 = 292519995595831773241903039033546618008_u128;
_21.0 = [_7.2,_14.2,_14.2,_14.2];
_13 = _14;
_7.3.0 = _4;
_8 = _3 + _3;
_8 = -_3;
_16 = [_7.2,_14.2,_13.2,_7.2,_6.2,_14.2,_14.2];
_21.3 = !6_usize;
_6.0 = _7.0;
_19 = _13.3.2 - _6.3.2;
_7.1 = core::ptr::addr_of_mut!(_7.2);
_21.3 = !8984573386566739392_usize;
_14.2 = _14.0 as i64;
_14.2 = -_13.2;
Goto(bb2)
}
bb2 = {
Call(_25 = dump_var(17_usize, 4_usize, Move(_4), 11_usize, Move(_11), 10_usize, Move(_10), 26_usize, _26), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Return()
}

}
}
pub fn main() {
                fn0(std::hint::black_box(false), std::hint::black_box('\u{68580}'), std::hint::black_box(114_isize), std::hint::black_box(115_i8), std::hint::black_box((-20717_i16)), std::hint::black_box((-2088801439_i32)), std::hint::black_box((-4950637342864001169_i64)), std::hint::black_box(85362135688432399391191344325399091005_i128), std::hint::black_box(6631178138247601878_usize), std::hint::black_box(44_u8), std::hint::black_box(25336_u16), std::hint::black_box(4009581657_u32), std::hint::black_box(17561796753744430258_u64), std::hint::black_box(218280556937290404715358548434474782042_u128));
                
            }
#[derive(Debug)]
pub enum Adt44 {
Variant0{
fld0: f64,
fld1: u8,
fld2: ([isize; 4],),
fld3: i8,
fld4: i16,

},
Variant1{
fld0: ([isize; 4],),
fld1: *mut i8,
fld2: [i32; 4],
fld3: *mut [i64; 7],

}}
#[derive(Debug)]
pub enum Adt45 {
Variant0{
fld0: *mut i8,
fld1: char,
fld2: ([i64; 4], u128, isize, usize),
fld3: *mut [i64; 4],
fld4: u64,

},
Variant1{
fld0: f64,
fld1: u128,
fld2: [i64; 7],
fld3: ([isize; 4],),

},
Variant2{
fld0: (*const *mut f32, *mut [i64; 4]),

}}
#[derive(Debug)]
pub struct Adt46 {
fld0: i128,
fld1: char,
fld2: [u16; 8],
fld3: u128,
fld4: Adt45,
fld5: *const *mut f32,
}
#[derive(Debug)]
pub enum Adt47 {
Variant0{
fld0: ((i8, *mut i64, i64, (bool, f64, f32)), (*mut i64,), *mut *mut f32),
fld1: char,
fld2: [i32; 4],
fld3: f64,

},
Variant1{
fld0: (*const *mut f32, *mut [i64; 4]),
fld1: [u64; 3],
fld2: Adt46,
fld3: *mut *mut f32,
fld4: (u8,),

},
Variant2{
fld0: (i8, *mut i64, i64, (bool, f64, f32)),
fld1: u32,
fld2: i128,
fld3: Adt45,
fld4: u64,
fld5: [isize; 4],

},
Variant3{
fld0: (i16, u16, i16, [i32; 4]),
fld1: char,
fld2: isize,
fld3: *mut [i64; 4],
fld4: u64,
fld5: (*mut i64,),
fld6: usize,

}}
#[derive(Debug)]
pub enum Adt48 {
Variant0{
fld0: i64,
fld1: *mut i16,
fld2: i8,

},
Variant1{
fld0: (*mut i64,),
fld1: *mut i8,
fld2: *mut *mut f32,
fld3: (*const *mut f32, *mut [i64; 4]),
fld4: u128,
fld5: f64,

}}
#[derive(Debug)]
pub enum Adt49 {
Variant0{
fld0: ((i8, *mut i64, i64, (bool, f64, f32)), (*mut i64,), *mut *mut f32),
fld1: *mut i16,
fld2: isize,
fld3: u16,
fld4: *mut [i64; 7],
fld5: i32,
fld6: i64,
fld7: i128,

},
Variant1{
fld0: *const *mut f32,

},
Variant2{
fld0: (i8, *mut i64, i64, (bool, f64, f32)),
fld1: (i16, u16, i16, [i32; 4]),
fld2: [usize; 1],
fld3: ([isize; 4],),

},
Variant3{
fld0: [isize; 4],
fld1: *const *mut f32,
fld2: Adt47,

}}
#[derive(Debug)]
pub enum Adt50 {
Variant0{
fld0: bool,
fld1: f32,
fld2: u64,
fld3: Adt46,
fld4: i16,
fld5: [u64; 3],
fld6: [usize; 1],
fld7: (*const *mut f32, *mut [i64; 4]),

},
Variant1{
fld0: Adt48,

},
Variant2{
fld0: ([i64; 4], u128, isize, usize),
fld1: ((i8, *mut i64, i64, (bool, f64, f32)), (*mut i64,), *mut *mut f32),

}}
#[derive(Debug,Copy,Clone)]
pub struct Adt51 {
fld0: *mut i64,
fld1: (u8,),
fld2: isize,
fld3: u64,
}
#[derive(Debug)]
pub struct Adt52 {
fld0: usize,
fld1: Adt47,
fld2: isize,
fld3: u32,
fld4: (*mut i64,),
fld5: ((i8, *mut i64, i64, (bool, f64, f32)), (*mut i64,), *mut *mut f32),
fld6: [i64; 7],
fld7: [i64; 4],
}
#[derive(Debug,Copy,Clone)]
pub struct Adt53 {
fld0: [usize; 1],
fld1: u128,
fld2: i64,
}
#[derive(Debug)]
pub enum Adt54 {
Variant0{
fld0: (u8,),
fld1: [usize; 1],
fld2: (i8, *mut i64, i64, (bool, f64, f32)),
fld3: *const *mut f32,

},
Variant1{
fld0: Adt47,
fld1: i128,
fld2: Adt49,
fld3: i8,
fld4: (*const *mut f32, *mut [i64; 4]),
fld5: usize,
fld6: *mut i16,

}}
#[derive(Debug)]
pub struct Adt55 {
fld0: [u16; 8],
fld1: u16,
fld2: Adt49,
fld3: i8,
fld4: (*const *mut f32, *mut [i64; 4]),
fld5: *mut *mut f32,
}
#[derive(Debug)]
pub struct Adt56 {
fld0: (bool, f64, f32),
fld1: u16,
fld2: (u8,),
fld3: Adt45,
fld4: u32,
fld5: Adt48,
}
#[derive(Debug)]
pub enum Adt57 {
Variant0{
fld0: [usize; 1],
fld1: i128,
fld2: usize,
fld3: Adt52,
fld4: u64,
fld5: i32,

},
Variant1{
fld0: [u32; 4],
fld1: *mut i16,
fld2: Adt47,
fld3: [u16; 8],
fld4: i16,
fld5: (u8,),
fld6: Adt49,

},
Variant2{
fld0: *mut [i64; 4],
fld1: [isize; 4],
fld2: (*const *mut f32, *mut [i64; 4]),
fld3: [u32; 4],
fld4: f64,
fld5: i32,
fld6: i64,
fld7: [i32; 4],

}}
#[derive(Debug)]
pub struct Adt58 {
fld0: *mut i8,
fld1: f32,
fld2: Adt56,
fld3: Adt45,
fld4: *mut [i64; 7],
fld5: u8,
}
#[derive(Debug)]
pub enum Adt59 {
Variant0{
fld0: u32,
fld1: f64,
fld2: *mut i64,
fld3: (u8,),
fld4: Adt55,
fld5: i32,
fld6: u64,

},
Variant1{
fld0: Adt53,
fld1: i64,
fld2: Adt51,
fld3: *const *mut f32,

}}
#[derive(Debug)]
pub enum Adt60 {
Variant0{
fld0: Adt49,
fld1: char,
fld2: Adt53,
fld3: [i32; 4],
fld4: ((i8, *mut i64, i64, (bool, f64, f32)), (*mut i64,), *mut *mut f32),
fld5: i32,

},
Variant1{
fld0: (u8,),
fld1: Adt52,
fld2: [u16; 8],
fld3: *const i16,
fld4: *mut i16,
fld5: [i32; 4],

},
Variant2{
fld0: bool,
fld1: Adt53,
fld2: *mut [i64; 7],
fld3: (*mut i64,),
fld4: Adt57,
fld5: ((i8, *mut i64, i64, (bool, f64, f32)), (*mut i64,), *mut *mut f32),
fld6: u16,
fld7: (*const *mut f32, *mut [i64; 4]),

},
Variant3{
fld0: Adt47,
fld1: char,
fld2: Adt49,
fld3: (i16, u16, i16, [i32; 4]),
fld4: *mut i16,
fld5: *mut *mut f32,
fld6: *mut i64,

}}

