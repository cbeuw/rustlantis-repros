#![recursion_limit = "1024"]
    #![feature(custom_mir, core_intrinsics, const_hash)]
    #![allow(unused_parens, unused_assignments, overflowing_literals)]
    extern crate core;
    use core::intrinsics::mir::*;

    use std::fmt::Debug;

    #[inline(never)]
    fn dump_var(
        f: usize,
        var0: usize, val0: impl Debug,
        var1: usize, val1: impl Debug,
        var2: usize, val2: impl Debug,
        var3: usize, val3: impl Debug,
    ) {
        println!("fn{f}:_{var0} = {val0:?}\n_{var1} = {val1:?}\n_{var2} = {val2:?}\n_{var3} = {val3:?}");
    }
    #[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn0(mut _1: bool,mut _2: char,mut _3: isize,mut _4: i64,mut _5: i16,mut _6: u16) -> i64 {
mir! {
type RET = i64;
let _7: *mut (u32, u64);
let _8: [i16; 1];
let _9: ([isize; 3],);
let _10: (i128, i16);
let _11: isize;
let _12: [isize; 3];
let _13: (*mut i128,);
let _14: (char, [isize; 3]);
let _15: *mut i128;
let _16: [bool; 3];
let _17: Adt48;
let _18: ([isize; 3],);
let _19: (char, [isize; 3]);
let _20: [i128; 1];
let _21: (*mut i128,);
let _22: [isize; 3];
let _23: [i16; 1];
let _24: [i64; 3];
let _25: (char, [isize; 3]);
let _26: [isize; 3];
let _27: [bool; 3];
let _28: [i64; 3];
let _29: isize;
let _30: ();
let _31: ();
{
_5 = '\u{906dd}' as i16;
RET = 68_u8 as i64;
_1 = false & false;
_2 = '\u{7398}';
_5 = (-8971_i16);
_2 = '\u{30de4}';
_1 = !false;
RET = !(-6945205033697997619_i64);
_4 = RET & RET;
_2 = '\u{12718}';
_4 = !RET;
RET = _4;
_1 = !true;
_4 = !RET;
_9.0 = [(-9223372036854775808_isize),9223372036854775807_isize,(-9223372036854775808_isize)];
_10.1 = _5 << _4;
_8 = [_10.1];
_10 = (44782931278776431039529381179813079316_i128, _5);
_3 = 209598262284958550884361967512355921090_u128 as isize;
_9.0 = [_3,_3,_3];
match _10.0 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb5,
5 => bb6,
44782931278776431039529381179813079316 => bb8,
_ => bb7
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_11 = _3 - _3;
_10.1 = _5 - _5;
_6 = _10.1 as u16;
_10.1 = _1 as i16;
_6 = 63498_u16;
_10 = ((-45497260791833657711495750410442235797_i128), _5);
_11 = !_3;
_5 = -_10.1;
_9.0 = [_11,_11,_11];
_10.0 = !(-159246116163552053844234998924149870947_i128);
_4 = !RET;
_4 = _6 as i64;
_6 = 64841_u16 >> _10.1;
RET = _4;
_6 = _5 as u16;
_10.0 = (-147867099832168433930072050497601965423_i128) - (-87518817571017897467133265701270488001_i128);
_6 = _5 as u16;
_12 = _9.0;
_8 = [_10.1];
Goto(bb9)
}
bb9 = {
RET = _4;
_10.0 = 64_i8 as i128;
_12 = [_11,_11,_11];
_14 = (_2, _9.0);
_4 = -RET;
_5 = _10.1 << _3;
_10.1 = _5 - _5;
_2 = _14.0;
_9 = (_12,);
_11 = !_3;
_2 = _14.0;
_14.1 = [_11,_11,_11];
_4 = 1667753526_u32 as i64;
Goto(bb10)
}
bb10 = {
_11 = _3;
_14.1 = _9.0;
_10 = ((-159876196078360853069002184643045321599_i128), _5);
_15 = core::ptr::addr_of_mut!(_10.0);
_15 = core::ptr::addr_of_mut!(_10.0);
_6 = !62707_u16;
_16 = [_1,_1,_1];
_13.0 = core::ptr::addr_of_mut!((*_15));
_16 = [_1,_1,_1];
_18 = _9;
_2 = _14.0;
_10.1 = -_5;
_8 = [_10.1];
_20 = [(*_15)];
RET = _4 ^ _4;
_14.1 = _18.0;
_21 = (_15,);
_18.0 = _9.0;
_17.fld0 = Adt45::Variant3 { fld0: _3 };
_21.0 = _15;
_22 = [_11,_11,_11];
_14.0 = _2;
_1 = _10.1 != _10.1;
Goto(bb11)
}
bb11 = {
_8 = [_5];
_10.0 = _4 as i128;
_15 = _21.0;
_4 = -RET;
Call(_8 = fn1(_14.0, _13.0, _16), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
_19 = (_2, _22);
_4 = RET;
_11 = !_3;
_19 = _14;
_19.0 = _2;
_25.0 = _19.0;
_17.fld1 = [_1,_1,_1];
_13 = (_15,);
_21 = (_15,);
_4 = RET - RET;
_4 = -RET;
_10 = ((-85366996235602010857176230962245497601_i128), _5);
_4 = -RET;
_18.0 = [_3,_3,_3];
_20 = [_10.0];
match _10.0 {
0 => bb8,
1 => bb9,
2 => bb3,
3 => bb6,
4 => bb13,
5 => bb14,
254915370685336452606198376469522713855 => bb16,
_ => bb15
}
}
bb13 = {
Return()
}
bb14 = {
Return()
}
bb15 = {
Return()
}
bb16 = {
_13.0 = _21.0;
_24 = [RET,_4,_4];
_6 = 44895_u16;
_23 = [_10.1];
RET = _4;
_5 = _10.0 as i16;
_10 = (81278644129506244232401104981259304681_i128, _5);
_10.0 = (-69929150218799224052624899434674735266_i128) * (-63484779232788143041265774703382925987_i128);
_19.1 = [_11,_11,_11];
_25 = (_14.0, _19.1);
_25 = (_19.0, _9.0);
place!(Field::<isize>(Variant(_17.fld0, 3), 0)) = -_3;
_17.fld2 = _25.1;
_21.0 = _13.0;
_9.0 = [_3,_3,Field::<isize>(Variant(_17.fld0, 3), 0)];
_23 = [_10.1];
_19.0 = _25.0;
_1 = false;
_16 = [_1,_1,_1];
_22 = [_3,_3,_11];
_26 = _22;
_19.0 = _14.0;
_27 = [_1,_1,_1];
_4 = !RET;
_6 = !60975_u16;
_3 = _11 << _5;
_11 = _3 & Field::<isize>(Variant(_17.fld0, 3), 0);
_5 = _10.0 as i16;
Goto(bb17)
}
bb17 = {
Call(_30 = dump_var(0_usize, 22_usize, Move(_22), 1_usize, Move(_1), 23_usize, Move(_23), 8_usize, Move(_8)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_30 = dump_var(0_usize, 2_usize, Move(_2), 19_usize, Move(_19), 12_usize, Move(_12), 14_usize, Move(_14)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_30 = dump_var(0_usize, 10_usize, Move(_10), 27_usize, Move(_27), 11_usize, Move(_11), 31_usize, _31), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn1(mut _1: char,mut _2: *mut i128,mut _3: [bool; 3]) -> [i16; 1] {
mir! {
type RET = [i16; 1];
let _4: *mut *mut *mut i128;
let _5: char;
let _6: [isize; 3];
let _7: *mut *mut i128;
let _8: f32;
let _9: *const i128;
let _10: f64;
let _11: Adt42;
let _12: f64;
let _13: char;
let _14: bool;
let _15: u16;
let _16: u16;
let _17: (*mut i128,);
let _18: f32;
let _19: [bool; 3];
let _20: bool;
let _21: f64;
let _22: Adt52;
let _23: f64;
let _24: [i16; 1];
let _25: ([isize; 3],);
let _26: ();
let _27: ();
{
RET = [8872_i16];
Call(RET = fn2(_1, _2, _1, _2, _3, _2, _3, _3), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
RET = [(-25076_i16)];
_1 = '\u{cb209}';
_3 = [true,false,false];
_1 = '\u{10fd29}';
RET = [9965_i16];
RET = [20244_i16];
_3 = [true,true,false];
_3 = [true,true,true];
RET = [3034_i16];
_3 = [false,true,false];
_5 = _1;
RET = [5394_i16];
_1 = _5;
RET = [11894_i16];
_3 = [true,false,false];
_1 = _5;
RET = [28602_i16];
_1 = _5;
_1 = _5;
Goto(bb2)
}
bb2 = {
_3 = [false,true,true];
_5 = _1;
RET = [27248_i16];
_3 = [false,false,true];
Goto(bb3)
}
bb3 = {
_6 = [(-23_isize),9223372036854775807_isize,(-9223372036854775808_isize)];
_7 = core::ptr::addr_of_mut!(_2);
RET = [20143_i16];
RET = [(-224_i16)];
_4 = core::ptr::addr_of_mut!(_7);
_1 = _5;
_3 = [false,true,true];
_1 = _5;
_3 = [false,false,true];
RET = [12506_i16];
RET = [(-18692_i16)];
_4 = core::ptr::addr_of_mut!((*_4));
_5 = _1;
_4 = core::ptr::addr_of_mut!((*_4));
_7 = core::ptr::addr_of_mut!((*_7));
Goto(bb4)
}
bb4 = {
Goto(bb5)
}
bb5 = {
_8 = 1409485915511670704_i64 as f32;
Goto(bb6)
}
bb6 = {
_10 = (-104_i8) as f64;
_1 = _5;
_4 = core::ptr::addr_of_mut!((*_4));
_6 = [9223372036854775807_isize,(-9223372036854775808_isize),(-9223372036854775808_isize)];
RET = [23606_i16];
_5 = _1;
_11 = Adt42 { fld0: 337349651844498589053114501075686683206_u128 };
_3 = [false,false,false];
_3 = [true,true,true];
_6 = [(-9223372036854775808_isize),(-9223372036854775808_isize),66_isize];
_8 = _11.fld0 as f32;
_8 = (-106365226041101895446229519838744438918_i128) as f32;
_7 = core::ptr::addr_of_mut!((*_7));
_4 = core::ptr::addr_of_mut!((*_4));
_7 = core::ptr::addr_of_mut!((*_7));
RET = [(-509_i16)];
_11 = Adt42 { fld0: 338870876158723582811702126158793972336_u128 };
_11 = Adt42 { fld0: 183114637219124592966014570159880140725_u128 };
_5 = _1;
_12 = -_10;
_11.fld0 = 291611017029924380264833502890105300627_u128 & 217025074341864803769068523460450501870_u128;
Goto(bb7)
}
bb7 = {
RET = [(-466_i16)];
RET = [20376_i16];
_6 = [9223372036854775807_isize,(-111_isize),(-89_isize)];
_16 = 18348_u16;
_15 = _11.fld0 as u16;
_14 = !false;
RET = [(-90_i16)];
_14 = false;
_11 = Adt42 { fld0: 215340421134183725981518688403338403466_u128 };
match _11.fld0 {
0 => bb2,
215340421134183725981518688403338403466 => bb9,
_ => bb8
}
}
bb8 = {
_8 = 1409485915511670704_i64 as f32;
Goto(bb6)
}
bb9 = {
_14 = true;
RET = [15327_i16];
_6 = [(-9223372036854775808_isize),(-9223372036854775808_isize),79_isize];
_11.fld0 = 271042705072570639708190223879998463384_u128;
_7 = core::ptr::addr_of_mut!((*_7));
_6 = [9223372036854775807_isize,9223372036854775807_isize,50_isize];
_12 = _10 + _10;
_5 = _1;
_16 = _15 + _15;
_18 = _8 + _8;
_10 = _18 as f64;
_19 = [_14,_14,_14];
_20 = !_14;
_6 = [9223372036854775807_isize,9223372036854775807_isize,(-9223372036854775808_isize)];
_1 = _5;
_16 = _5 as u16;
_1 = _5;
_18 = _8;
_17 = ((*_7),);
_2 = _17.0;
_21 = 582131950_u32 as f64;
_21 = _10 - _10;
_21 = 723695194_i32 as f64;
_21 = (-2937028286379323785_i64) as f64;
_6 = [(-128_isize),(-9223372036854775808_isize),80_isize];
match _11.fld0 {
0 => bb6,
1 => bb2,
2 => bb10,
3 => bb11,
271042705072570639708190223879998463384 => bb13,
_ => bb12
}
}
bb10 = {
_3 = [false,true,true];
_5 = _1;
RET = [27248_i16];
_3 = [false,false,true];
Goto(bb3)
}
bb11 = {
Goto(bb5)
}
bb12 = {
_10 = (-104_i8) as f64;
_1 = _5;
_4 = core::ptr::addr_of_mut!((*_4));
_6 = [9223372036854775807_isize,(-9223372036854775808_isize),(-9223372036854775808_isize)];
RET = [23606_i16];
_5 = _1;
_11 = Adt42 { fld0: 337349651844498589053114501075686683206_u128 };
_3 = [false,false,false];
_3 = [true,true,true];
_6 = [(-9223372036854775808_isize),(-9223372036854775808_isize),66_isize];
_8 = _11.fld0 as f32;
_8 = (-106365226041101895446229519838744438918_i128) as f32;
_7 = core::ptr::addr_of_mut!((*_7));
_4 = core::ptr::addr_of_mut!((*_4));
_7 = core::ptr::addr_of_mut!((*_7));
RET = [(-509_i16)];
_11 = Adt42 { fld0: 338870876158723582811702126158793972336_u128 };
_11 = Adt42 { fld0: 183114637219124592966014570159880140725_u128 };
_5 = _1;
_12 = -_10;
_11.fld0 = 291611017029924380264833502890105300627_u128 & 217025074341864803769068523460450501870_u128;
Goto(bb7)
}
bb13 = {
RET = [1203_i16];
_13 = _1;
_19 = [_20,_20,_14];
_20 = _14;
_4 = core::ptr::addr_of_mut!(_7);
_12 = -_10;
_18 = 2514966360_u32 as f32;
_17.0 = (*_7);
_12 = -_21;
_8 = _18 + _18;
_17 = ((*_7),);
_14 = _20;
_17 = (_2,);
_4 = core::ptr::addr_of_mut!(_7);
_16 = !_15;
_7 = core::ptr::addr_of_mut!((*_7));
RET = [12423_i16];
_17.0 = (*_7);
_16 = _15;
_11 = Adt42 { fld0: 122827628725096864253514322721911534437_u128 };
_1 = _5;
_4 = core::ptr::addr_of_mut!((*_4));
_10 = _12;
_2 = _17.0;
_12 = -_10;
match _11.fld0 {
0 => bb14,
1 => bb15,
2 => bb16,
3 => bb17,
4 => bb18,
122827628725096864253514322721911534437 => bb20,
_ => bb19
}
}
bb14 = {
_10 = (-104_i8) as f64;
_1 = _5;
_4 = core::ptr::addr_of_mut!((*_4));
_6 = [9223372036854775807_isize,(-9223372036854775808_isize),(-9223372036854775808_isize)];
RET = [23606_i16];
_5 = _1;
_11 = Adt42 { fld0: 337349651844498589053114501075686683206_u128 };
_3 = [false,false,false];
_3 = [true,true,true];
_6 = [(-9223372036854775808_isize),(-9223372036854775808_isize),66_isize];
_8 = _11.fld0 as f32;
_8 = (-106365226041101895446229519838744438918_i128) as f32;
_7 = core::ptr::addr_of_mut!((*_7));
_4 = core::ptr::addr_of_mut!((*_4));
_7 = core::ptr::addr_of_mut!((*_7));
RET = [(-509_i16)];
_11 = Adt42 { fld0: 338870876158723582811702126158793972336_u128 };
_11 = Adt42 { fld0: 183114637219124592966014570159880140725_u128 };
_5 = _1;
_12 = -_10;
_11.fld0 = 291611017029924380264833502890105300627_u128 & 217025074341864803769068523460450501870_u128;
Goto(bb7)
}
bb15 = {
RET = [(-25076_i16)];
_1 = '\u{cb209}';
_3 = [true,false,false];
_1 = '\u{10fd29}';
RET = [9965_i16];
RET = [20244_i16];
_3 = [true,true,false];
_3 = [true,true,true];
RET = [3034_i16];
_3 = [false,true,false];
_5 = _1;
RET = [5394_i16];
_1 = _5;
RET = [11894_i16];
_3 = [true,false,false];
_1 = _5;
RET = [28602_i16];
_1 = _5;
_1 = _5;
Goto(bb2)
}
bb16 = {
_3 = [false,true,true];
_5 = _1;
RET = [27248_i16];
_3 = [false,false,true];
Goto(bb3)
}
bb17 = {
_14 = true;
RET = [15327_i16];
_6 = [(-9223372036854775808_isize),(-9223372036854775808_isize),79_isize];
_11.fld0 = 271042705072570639708190223879998463384_u128;
_7 = core::ptr::addr_of_mut!((*_7));
_6 = [9223372036854775807_isize,9223372036854775807_isize,50_isize];
_12 = _10 + _10;
_5 = _1;
_16 = _15 + _15;
_18 = _8 + _8;
_10 = _18 as f64;
_19 = [_14,_14,_14];
_20 = !_14;
_6 = [9223372036854775807_isize,9223372036854775807_isize,(-9223372036854775808_isize)];
_1 = _5;
_16 = _5 as u16;
_1 = _5;
_18 = _8;
_17 = ((*_7),);
_2 = _17.0;
_21 = 582131950_u32 as f64;
_21 = _10 - _10;
_21 = 723695194_i32 as f64;
_21 = (-2937028286379323785_i64) as f64;
_6 = [(-128_isize),(-9223372036854775808_isize),80_isize];
match _11.fld0 {
0 => bb6,
1 => bb2,
2 => bb10,
3 => bb11,
271042705072570639708190223879998463384 => bb13,
_ => bb12
}
}
bb18 = {
_10 = (-104_i8) as f64;
_1 = _5;
_4 = core::ptr::addr_of_mut!((*_4));
_6 = [9223372036854775807_isize,(-9223372036854775808_isize),(-9223372036854775808_isize)];
RET = [23606_i16];
_5 = _1;
_11 = Adt42 { fld0: 337349651844498589053114501075686683206_u128 };
_3 = [false,false,false];
_3 = [true,true,true];
_6 = [(-9223372036854775808_isize),(-9223372036854775808_isize),66_isize];
_8 = _11.fld0 as f32;
_8 = (-106365226041101895446229519838744438918_i128) as f32;
_7 = core::ptr::addr_of_mut!((*_7));
_4 = core::ptr::addr_of_mut!((*_4));
_7 = core::ptr::addr_of_mut!((*_7));
RET = [(-509_i16)];
_11 = Adt42 { fld0: 338870876158723582811702126158793972336_u128 };
_11 = Adt42 { fld0: 183114637219124592966014570159880140725_u128 };
_5 = _1;
_12 = -_10;
_11.fld0 = 291611017029924380264833502890105300627_u128 & 217025074341864803769068523460450501870_u128;
Goto(bb7)
}
bb19 = {
_8 = 1409485915511670704_i64 as f32;
Goto(bb6)
}
bb20 = {
_13 = _1;
_6 = [125_isize,(-9223372036854775808_isize),9223372036854775807_isize];
_8 = _15 as f32;
_24 = [(-24830_i16)];
_15 = _16 << _11.fld0;
_24 = [12855_i16];
Goto(bb21)
}
bb21 = {
Call(_26 = dump_var(1_usize, 15_usize, Move(_15), 24_usize, Move(_24), 19_usize, Move(_19), 3_usize, Move(_3)), ReturnTo(bb22), UnwindUnreachable())
}
bb22 = {
Call(_26 = dump_var(1_usize, 13_usize, Move(_13), 27_usize, _27, 27_usize, _27, 27_usize, _27), ReturnTo(bb23), UnwindUnreachable())
}
bb23 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn2(mut _1: char,mut _2: *mut i128,mut _3: char,mut _4: *mut i128,mut _5: [bool; 3],mut _6: *mut i128,mut _7: [bool; 3],mut _8: [bool; 3]) -> [i16; 1] {
mir! {
type RET = [i16; 1];
let _9: [usize; 3];
let _10: u16;
let _11: [i16; 1];
let _12: [bool; 3];
let _13: *mut *const u32;
let _14: (char, [isize; 3]);
let _15: isize;
let _16: i128;
let _17: u64;
let _18: bool;
let _19: f64;
let _20: *mut *mut i128;
let _21: f32;
let _22: f64;
let _23: (*mut i128,);
let _24: Adt54;
let _25: bool;
let _26: u8;
let _27: bool;
let _28: [isize; 3];
let _29: i32;
let _30: f32;
let _31: f32;
let _32: (char, [isize; 3]);
let _33: i128;
let _34: i16;
let _35: [bool; 3];
let _36: isize;
let _37: bool;
let _38: f32;
let _39: i8;
let _40: *mut *mut i128;
let _41: ();
let _42: ();
{
RET = [10534_i16];
_6 = _4;
RET = [21318_i16];
_6 = _4;
RET = [(-4780_i16)];
_1 = _3;
_10 = !30540_u16;
_6 = _2;
_6 = _2;
_2 = _6;
_3 = _1;
_7 = [false,false,true];
_8 = [true,true,false];
_10 = 7_usize as u16;
_7 = _8;
_3 = _1;
_14.0 = _1;
Goto(bb1)
}
bb1 = {
_10 = 35605_u16 - 64331_u16;
_11 = [(-17193_i16)];
_2 = _6;
_9 = [2683411434578370524_usize,11842247635893436993_usize,6389803066818358442_usize];
_1 = _14.0;
_7 = [true,true,true];
_8 = [false,true,false];
RET = _11;
_10 = 64727_u16 | 21877_u16;
_1 = _14.0;
_12 = [true,true,false];
_5 = _7;
_5 = [false,true,true];
_8 = [true,true,true];
_15 = (-9223372036854775808_isize) & (-9223372036854775808_isize);
_3 = _1;
Call(_13 = fn3(_12, _9, _15, _8, _12, _5), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
RET = [(-2607_i16)];
_18 = !false;
_14.1 = [_15,_15,_15];
_17 = _10 as u64;
_16 = 56540909393641435441378168913237288669_i128 + (-59173542839088441955473045606293917832_i128);
_15 = -9223372036854775807_isize;
_7 = [_18,_18,_18];
_14.1 = [_15,_15,_15];
_2 = core::ptr::addr_of_mut!(_16);
_6 = core::ptr::addr_of_mut!(_16);
RET = [(-9007_i16)];
_4 = core::ptr::addr_of_mut!((*_2));
_5 = [_18,_18,_18];
_10 = 2493094773714081035_i64 as u16;
_11 = [(-10177_i16)];
_14.1 = [_15,_15,_15];
_6 = core::ptr::addr_of_mut!((*_4));
_5 = [_18,_18,_18];
_19 = (-1942634060_i32) as f64;
_16 = 158592387761474090246368317893359074822_i128 + (-150375971825716028938769824772265642207_i128);
_10 = 59838_u16;
_8 = [_18,_18,_18];
_15 = (-3422356399281148019_i64) as isize;
RET = [28675_i16];
_7 = [_18,_18,_18];
_17 = !10536343559571492780_u64;
_21 = 106_i8 as f32;
_10 = (*_4) as u16;
Goto(bb3)
}
bb3 = {
_5 = [_18,_18,_18];
Goto(bb4)
}
bb4 = {
_9 = [8305059811868838475_usize,3334200369217244572_usize,472891703151529114_usize];
_22 = _19 * _19;
_6 = core::ptr::addr_of_mut!((*_2));
_11 = RET;
RET = _11;
_10 = 65349_u16 << (*_6);
_3 = _1;
_20 = core::ptr::addr_of_mut!(_23.0);
_11 = [25780_i16];
_10 = 24516_u16 ^ 7545_u16;
_9 = [14460307946130118727_usize,6043443516952213083_usize,3580950949861947242_usize];
_22 = _19;
_23.0 = _2;
_20 = core::ptr::addr_of_mut!(_6);
Goto(bb5)
}
bb5 = {
RET = _11;
_15 = 29_isize | 9223372036854775807_isize;
_3 = _1;
_18 = !true;
_17 = 32539_i16 as u64;
_10 = 9650_u16 + 54265_u16;
_6 = core::ptr::addr_of_mut!((*_2));
Goto(bb6)
}
bb6 = {
_14.1 = [_15,_15,_15];
_5 = [_18,_18,_18];
Goto(bb7)
}
bb7 = {
_25 = _16 != (*_2);
_15 = -(-9223372036854775808_isize);
_17 = 16594761093745052298_u64;
_18 = _25 < _25;
_8 = _12;
_15 = 23_isize - 9223372036854775807_isize;
_8 = _12;
_14.0 = _3;
_22 = _19 + _19;
_28 = [_15,_15,_15];
_25 = _18 | _18;
_23 = (_6,);
_14.1 = _28;
_14 = (_3, _28);
_19 = 119_i8 as f64;
RET = _11;
match _17 {
0 => bb6,
16594761093745052298 => bb9,
_ => bb8
}
}
bb8 = {
RET = [(-2607_i16)];
_18 = !false;
_14.1 = [_15,_15,_15];
_17 = _10 as u64;
_16 = 56540909393641435441378168913237288669_i128 + (-59173542839088441955473045606293917832_i128);
_15 = -9223372036854775807_isize;
_7 = [_18,_18,_18];
_14.1 = [_15,_15,_15];
_2 = core::ptr::addr_of_mut!(_16);
_6 = core::ptr::addr_of_mut!(_16);
RET = [(-9007_i16)];
_4 = core::ptr::addr_of_mut!((*_2));
_5 = [_18,_18,_18];
_10 = 2493094773714081035_i64 as u16;
_11 = [(-10177_i16)];
_14.1 = [_15,_15,_15];
_6 = core::ptr::addr_of_mut!((*_4));
_5 = [_18,_18,_18];
_19 = (-1942634060_i32) as f64;
_16 = 158592387761474090246368317893359074822_i128 + (-150375971825716028938769824772265642207_i128);
_10 = 59838_u16;
_8 = [_18,_18,_18];
_15 = (-3422356399281148019_i64) as isize;
RET = [28675_i16];
_7 = [_18,_18,_18];
_17 = !10536343559571492780_u64;
_21 = 106_i8 as f32;
_10 = (*_4) as u16;
Goto(bb3)
}
bb9 = {
RET = _11;
_25 = !_18;
_21 = (-23529_i16) as f32;
_23 = ((*_20),);
_3 = _14.0;
_28 = _14.1;
_19 = _10 as f64;
match _17 {
16594761093745052298 => bb10,
_ => bb2
}
}
bb10 = {
_12 = _8;
_26 = 180_u8;
RET = [27542_i16];
_29 = !706731393_i32;
_3 = _14.0;
_15 = _3 as isize;
_14 = (_1, _28);
_3 = _14.0;
_9 = [3_usize,7_usize,7_usize];
_3 = _1;
_25 = _18 & _18;
Goto(bb11)
}
bb11 = {
RET = _11;
_5 = [_25,_18,_18];
_28 = _14.1;
_15 = (-9223372036854775808_isize) ^ 6_isize;
Goto(bb12)
}
bb12 = {
_30 = _21 * _21;
_32.0 = _3;
_17 = 4794731959780658869_u64;
_23.0 = _6;
_20 = core::ptr::addr_of_mut!(_4);
_2 = core::ptr::addr_of_mut!((*_2));
_27 = _25 & _25;
_8 = [_27,_18,_18];
_32.0 = _1;
_32 = _14;
_36 = !_15;
match _26 {
0 => bb7,
1 => bb4,
2 => bb13,
3 => bb14,
4 => bb15,
180 => bb17,
_ => bb16
}
}
bb13 = {
RET = _11;
_15 = 29_isize | 9223372036854775807_isize;
_3 = _1;
_18 = !true;
_17 = 32539_i16 as u64;
_10 = 9650_u16 + 54265_u16;
_6 = core::ptr::addr_of_mut!((*_2));
Goto(bb6)
}
bb14 = {
_14.1 = [_15,_15,_15];
_5 = [_18,_18,_18];
Goto(bb7)
}
bb15 = {
RET = _11;
_25 = !_18;
_21 = (-23529_i16) as f32;
_23 = ((*_20),);
_3 = _14.0;
_28 = _14.1;
_19 = _10 as f64;
match _17 {
16594761093745052298 => bb10,
_ => bb2
}
}
bb16 = {
_5 = [_18,_18,_18];
Goto(bb4)
}
bb17 = {
_23.0 = core::ptr::addr_of_mut!((*_2));
_26 = _3 as u8;
_33 = (*_4) >> (*_4);
_12 = [_25,_27,_25];
_1 = _3;
_32.0 = _1;
_36 = -_15;
_12 = _8;
RET = [11497_i16];
_36 = !_15;
_32 = _14;
_12 = _8;
_36 = _15;
_3 = _32.0;
_38 = 125019024113960158468585344822194257520_u128 as f32;
_7 = [_25,_27,_25];
_17 = !13129829147083775402_u64;
_34 = -(-15765_i16);
Goto(bb18)
}
bb18 = {
Call(_41 = dump_var(2_usize, 1_usize, Move(_1), 18_usize, Move(_18), 8_usize, Move(_8), 29_usize, Move(_29)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_41 = dump_var(2_usize, 36_usize, Move(_36), 17_usize, Move(_17), 5_usize, Move(_5), 28_usize, Move(_28)), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Call(_41 = dump_var(2_usize, 16_usize, Move(_16), 34_usize, Move(_34), 32_usize, Move(_32), 42_usize, _42), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn3(mut _1: [bool; 3],mut _2: [usize; 3],mut _3: isize,mut _4: [bool; 3],mut _5: [bool; 3],mut _6: [bool; 3]) -> *mut *const u32 {
mir! {
type RET = *mut *const u32;
let _7: (u32, u64);
let _8: Adt47;
let _9: (*mut i128,);
let _10: (u32, u64);
let _11: f64;
let _12: f64;
let _13: i8;
let _14: *const [i128; 1];
let _15: Adt50;
let _16: *mut i128;
let _17: (i128, i16);
let _18: [i64; 3];
let _19: bool;
let _20: [isize; 3];
let _21: (char, [isize; 3]);
let _22: bool;
let _23: isize;
let _24: i16;
let _25: f32;
let _26: [isize; 3];
let _27: [i16; 1];
let _28: char;
let _29: [i128; 2];
let _30: isize;
let _31: isize;
let _32: isize;
let _33: Adt48;
let _34: bool;
let _35: Adt49;
let _36: f64;
let _37: u32;
let _38: [isize; 3];
let _39: isize;
let _40: (char, [isize; 3]);
let _41: (u32, u64);
let _42: isize;
let _43: Adt56;
let _44: [i128; 2];
let _45: bool;
let _46: isize;
let _47: Adt50;
let _48: isize;
let _49: [i16; 1];
let _50: u32;
let _51: f64;
let _52: char;
let _53: Adt50;
let _54: u8;
let _55: (i128, i16);
let _56: (char, [isize; 3]);
let _57: Adt51;
let _58: i8;
let _59: isize;
let _60: isize;
let _61: char;
let _62: *mut (char, [isize; 3]);
let _63: [i128; 1];
let _64: i64;
let _65: [i128; 2];
let _66: (char, [isize; 3]);
let _67: isize;
let _68: isize;
let _69: f64;
let _70: *mut *mut *mut i128;
let _71: *mut *mut i128;
let _72: (u32, u64);
let _73: bool;
let _74: char;
let _75: char;
let _76: u8;
let _77: ();
let _78: ();
{
_1 = _6;
_4 = [true,true,false];
_4 = _5;
_6 = [false,true,false];
_4 = [false,true,false];
_1 = _4;
_5 = _1;
_5 = [false,true,true];
_3 = -(-39_isize);
_6 = [false,false,false];
_5 = [true,false,true];
_6 = _5;
_1 = [false,true,true];
_1 = _4;
_1 = _4;
_3 = !(-101_isize);
_5 = [false,false,false];
_4 = [true,true,true];
_2 = [8016777190069216280_usize,1_usize,5_usize];
_4 = _1;
_6 = [false,false,false];
_5 = [false,true,true];
_5 = [true,true,false];
_7.0 = 8289663170753861825_u64 as u32;
Goto(bb1)
}
bb1 = {
_7.1 = 17226818577159676451_u64;
_4 = [true,false,true];
_1 = _5;
_1 = [true,false,false];
_7.1 = !12266782379178879083_u64;
_1 = [true,true,true];
Call(_9 = fn4(_1, _6, _6, _1, _4, _2, _5, _2, _3, _6, _5), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_4 = [false,true,true];
_3 = (-9223372036854775808_isize);
_3 = !80_isize;
Goto(bb3)
}
bb3 = {
_6 = [false,false,false];
_3 = 9223372036854775807_isize;
_10.1 = _7.1 ^ _7.1;
_10.0 = false as u32;
_7.1 = _10.1;
_7.1 = !_10.1;
_2 = [15463509043176061580_usize,17358356036894024432_usize,0_usize];
_2 = [8249566261165138204_usize,3_usize,18401664054223463231_usize];
_5 = [true,true,false];
_7 = _10;
_10 = _7;
_3 = -(-3_isize);
_7.0 = !_10.0;
_6 = [true,false,true];
_4 = [true,true,false];
_12 = 206_u8 as f64;
_7.1 = _10.1 | _10.1;
_10 = (_7.0, _7.1);
_7 = (_10.0, _10.1);
_7.0 = _10.0 & _10.0;
_7 = _10;
_1 = _4;
_13 = (-120_i8) - (-23_i8);
_12 = 278073184734466542906481386501922700979_u128 as f64;
_13 = false as i8;
_12 = 9063065744220344041_usize as f64;
_11 = (-1394858857_i32) as f64;
Call(_9.0 = fn7(_1, _7.1, _6, _10, _1, _10.1, _5, _10.1, _3, _7.0, _10), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_3 = 89_isize;
_1 = [false,true,false];
_7 = (_10.0, _10.1);
_7.1 = _3 as u64;
_3 = 129010536549512585923335725578565956305_u128 as isize;
_10.1 = (-479658517_i32) as u64;
_10.0 = 0_usize as u32;
_11 = -_12;
_7.0 = !_10.0;
Goto(bb5)
}
bb5 = {
_13 = 40244506490633888064831241156777719536_i128 as i8;
_3 = -(-9223372036854775808_isize);
_10.0 = _7.0 >> _3;
_17 = ((-92457118215801145386987979507083529151_i128), (-18966_i16));
_9.0 = core::ptr::addr_of_mut!(_17.0);
_17.1 = 30091_i16;
_10.0 = _17.1 as u32;
_12 = 160093929648752936611302137298703064635_u128 as f64;
_2 = [10476570891262347796_usize,5_usize,10660491760458018790_usize];
_3 = (-9223372036854775808_isize);
_17 = (138380603400465215358239654678970031657_i128, 32461_i16);
_18 = [(-44959910535294231_i64),6351228784908071727_i64,1897683179439399145_i64];
_16 = _9.0;
_17.0 = (-43638474485542428045894325152353596392_i128) & 133138217726560371814428095289764305550_i128;
_10.0 = _7.0 | _7.0;
_10.1 = _7.1 & _7.1;
_13 = _12 as i8;
_10.1 = _7.1 - _7.1;
_7.0 = _17.0 as u32;
_6 = [false,true,true];
_7.0 = _17.1 as u32;
_16 = _9.0;
_4 = [true,false,false];
Goto(bb6)
}
bb6 = {
_21.0 = '\u{ea50f}';
_9 = (_16,);
_7.0 = 33678_u16 as u32;
_21.1 = [_3,_3,_3];
_16 = _9.0;
_19 = !false;
_2 = [10015401425883692183_usize,4_usize,5_usize];
_18 = [(-5411344054317149320_i64),(-1203831082847026783_i64),2792490252189345349_i64];
_20 = _21.1;
_22 = _19;
match _3 {
0 => bb7,
340282366920938463454151235394913435648 => bb9,
_ => bb8
}
}
bb7 = {
_13 = 40244506490633888064831241156777719536_i128 as i8;
_3 = -(-9223372036854775808_isize);
_10.0 = _7.0 >> _3;
_17 = ((-92457118215801145386987979507083529151_i128), (-18966_i16));
_9.0 = core::ptr::addr_of_mut!(_17.0);
_17.1 = 30091_i16;
_10.0 = _17.1 as u32;
_12 = 160093929648752936611302137298703064635_u128 as f64;
_2 = [10476570891262347796_usize,5_usize,10660491760458018790_usize];
_3 = (-9223372036854775808_isize);
_17 = (138380603400465215358239654678970031657_i128, 32461_i16);
_18 = [(-44959910535294231_i64),6351228784908071727_i64,1897683179439399145_i64];
_16 = _9.0;
_17.0 = (-43638474485542428045894325152353596392_i128) & 133138217726560371814428095289764305550_i128;
_10.0 = _7.0 | _7.0;
_10.1 = _7.1 & _7.1;
_13 = _12 as i8;
_10.1 = _7.1 - _7.1;
_7.0 = _17.0 as u32;
_6 = [false,true,true];
_7.0 = _17.1 as u32;
_16 = _9.0;
_4 = [true,false,false];
Goto(bb6)
}
bb8 = {
_6 = [false,false,false];
_3 = 9223372036854775807_isize;
_10.1 = _7.1 ^ _7.1;
_10.0 = false as u32;
_7.1 = _10.1;
_7.1 = !_10.1;
_2 = [15463509043176061580_usize,17358356036894024432_usize,0_usize];
_2 = [8249566261165138204_usize,3_usize,18401664054223463231_usize];
_5 = [true,true,false];
_7 = _10;
_10 = _7;
_3 = -(-3_isize);
_7.0 = !_10.0;
_6 = [true,false,true];
_4 = [true,true,false];
_12 = 206_u8 as f64;
_7.1 = _10.1 | _10.1;
_10 = (_7.0, _7.1);
_7 = (_10.0, _10.1);
_7.0 = _10.0 & _10.0;
_7 = _10;
_1 = _4;
_13 = (-120_i8) - (-23_i8);
_12 = 278073184734466542906481386501922700979_u128 as f64;
_13 = false as i8;
_12 = 9063065744220344041_usize as f64;
_11 = (-1394858857_i32) as f64;
Call(_9.0 = fn7(_1, _7.1, _6, _10, _1, _10.1, _5, _10.1, _3, _7.0, _10), ReturnTo(bb4), UnwindUnreachable())
}
bb9 = {
_17.1 = (-9031_i16);
_4 = [_19,_19,_19];
_17.1 = 19186_i16;
_18 = [(-2491594349413040809_i64),(-2532322871976668020_i64),5118885257725560816_i64];
_23 = -_3;
_22 = _19;
_9 = (_16,);
_20 = _21.1;
_17 = ((-25236192713362565739774123836856467829_i128), (-29969_i16));
match _17.0 {
0 => bb1,
315046174207575897723600483594911743627 => bb10,
_ => bb3
}
}
bb10 = {
_17.0 = (-81933878173103857388621312858588812914_i128);
_7.0 = !_10.0;
match _17.0 {
0 => bb11,
1 => bb12,
2 => bb13,
258348488747834606074753294573179398542 => bb15,
_ => bb14
}
}
bb11 = {
_17.1 = (-9031_i16);
_4 = [_19,_19,_19];
_17.1 = 19186_i16;
_18 = [(-2491594349413040809_i64),(-2532322871976668020_i64),5118885257725560816_i64];
_23 = -_3;
_22 = _19;
_9 = (_16,);
_20 = _21.1;
_17 = ((-25236192713362565739774123836856467829_i128), (-29969_i16));
match _17.0 {
0 => bb1,
315046174207575897723600483594911743627 => bb10,
_ => bb3
}
}
bb12 = {
_6 = [false,false,false];
_3 = 9223372036854775807_isize;
_10.1 = _7.1 ^ _7.1;
_10.0 = false as u32;
_7.1 = _10.1;
_7.1 = !_10.1;
_2 = [15463509043176061580_usize,17358356036894024432_usize,0_usize];
_2 = [8249566261165138204_usize,3_usize,18401664054223463231_usize];
_5 = [true,true,false];
_7 = _10;
_10 = _7;
_3 = -(-3_isize);
_7.0 = !_10.0;
_6 = [true,false,true];
_4 = [true,true,false];
_12 = 206_u8 as f64;
_7.1 = _10.1 | _10.1;
_10 = (_7.0, _7.1);
_7 = (_10.0, _10.1);
_7.0 = _10.0 & _10.0;
_7 = _10;
_1 = _4;
_13 = (-120_i8) - (-23_i8);
_12 = 278073184734466542906481386501922700979_u128 as f64;
_13 = false as i8;
_12 = 9063065744220344041_usize as f64;
_11 = (-1394858857_i32) as f64;
Call(_9.0 = fn7(_1, _7.1, _6, _10, _1, _10.1, _5, _10.1, _3, _7.0, _10), ReturnTo(bb4), UnwindUnreachable())
}
bb13 = {
_4 = [false,true,true];
_3 = (-9223372036854775808_isize);
_3 = !80_isize;
Goto(bb3)
}
bb14 = {
_13 = 40244506490633888064831241156777719536_i128 as i8;
_3 = -(-9223372036854775808_isize);
_10.0 = _7.0 >> _3;
_17 = ((-92457118215801145386987979507083529151_i128), (-18966_i16));
_9.0 = core::ptr::addr_of_mut!(_17.0);
_17.1 = 30091_i16;
_10.0 = _17.1 as u32;
_12 = 160093929648752936611302137298703064635_u128 as f64;
_2 = [10476570891262347796_usize,5_usize,10660491760458018790_usize];
_3 = (-9223372036854775808_isize);
_17 = (138380603400465215358239654678970031657_i128, 32461_i16);
_18 = [(-44959910535294231_i64),6351228784908071727_i64,1897683179439399145_i64];
_16 = _9.0;
_17.0 = (-43638474485542428045894325152353596392_i128) & 133138217726560371814428095289764305550_i128;
_10.0 = _7.0 | _7.0;
_10.1 = _7.1 & _7.1;
_13 = _12 as i8;
_10.1 = _7.1 - _7.1;
_7.0 = _17.0 as u32;
_6 = [false,true,true];
_7.0 = _17.1 as u32;
_16 = _9.0;
_4 = [true,false,false];
Goto(bb6)
}
bb15 = {
_9 = (_16,);
_16 = _9.0;
_21.0 = '\u{abdb3}';
_10 = _7;
_2 = [7534170438818440168_usize,6_usize,8441108150659703680_usize];
_16 = core::ptr::addr_of_mut!(_17.0);
_10.0 = _7.0 ^ _7.0;
_6 = [_22,_22,_22];
_11 = _23 as f64;
_27 = [_17.1];
_26 = _21.1;
_18 = [7791961883795582243_i64,7403646486456207731_i64,(-7139554584858888364_i64)];
_4 = [_19,_19,_22];
_21.1 = [_3,_23,_23];
_11 = _12;
_27 = [_17.1];
_9.0 = core::ptr::addr_of_mut!((*_16));
_10.0 = _7.0;
_17 = ((-101307329607940238838260054411220137046_i128), 153_i16);
_17.0 = -(-13609504836284694943045003685394290098_i128);
_21.0 = '\u{48c2a}';
match _17.1 {
0 => bb6,
1 => bb2,
2 => bb16,
3 => bb17,
4 => bb18,
153 => bb20,
_ => bb19
}
}
bb16 = {
_4 = [false,true,true];
_3 = (-9223372036854775808_isize);
_3 = !80_isize;
Goto(bb3)
}
bb17 = {
_6 = [false,false,false];
_3 = 9223372036854775807_isize;
_10.1 = _7.1 ^ _7.1;
_10.0 = false as u32;
_7.1 = _10.1;
_7.1 = !_10.1;
_2 = [15463509043176061580_usize,17358356036894024432_usize,0_usize];
_2 = [8249566261165138204_usize,3_usize,18401664054223463231_usize];
_5 = [true,true,false];
_7 = _10;
_10 = _7;
_3 = -(-3_isize);
_7.0 = !_10.0;
_6 = [true,false,true];
_4 = [true,true,false];
_12 = 206_u8 as f64;
_7.1 = _10.1 | _10.1;
_10 = (_7.0, _7.1);
_7 = (_10.0, _10.1);
_7.0 = _10.0 & _10.0;
_7 = _10;
_1 = _4;
_13 = (-120_i8) - (-23_i8);
_12 = 278073184734466542906481386501922700979_u128 as f64;
_13 = false as i8;
_12 = 9063065744220344041_usize as f64;
_11 = (-1394858857_i32) as f64;
Call(_9.0 = fn7(_1, _7.1, _6, _10, _1, _10.1, _5, _10.1, _3, _7.0, _10), ReturnTo(bb4), UnwindUnreachable())
}
bb18 = {
_3 = 89_isize;
_1 = [false,true,false];
_7 = (_10.0, _10.1);
_7.1 = _3 as u64;
_3 = 129010536549512585923335725578565956305_u128 as isize;
_10.1 = (-479658517_i32) as u64;
_10.0 = 0_usize as u32;
_11 = -_12;
_7.0 = !_10.0;
Goto(bb5)
}
bb19 = {
_17.1 = (-9031_i16);
_4 = [_19,_19,_19];
_17.1 = 19186_i16;
_18 = [(-2491594349413040809_i64),(-2532322871976668020_i64),5118885257725560816_i64];
_23 = -_3;
_22 = _19;
_9 = (_16,);
_20 = _21.1;
_17 = ((-25236192713362565739774123836856467829_i128), (-29969_i16));
match _17.0 {
0 => bb1,
315046174207575897723600483594911743627 => bb10,
_ => bb3
}
}
bb20 = {
_3 = _23 * _23;
_25 = _13 as f32;
_4 = [_22,_22,_19];
_24 = _17.1;
Goto(bb21)
}
bb21 = {
_4 = [_19,_22,_22];
_20 = [_3,_23,_3];
_6 = [_22,_19,_19];
_7.0 = !_10.0;
_7.1 = !_10.1;
_7.1 = (*_16) as u64;
_28 = _21.0;
_28 = _21.0;
_21.1 = [_23,_3,_3];
_13 = !(-120_i8);
_7 = (_10.0, _10.1);
_21.0 = _28;
_10.0 = !_7.0;
_16 = _9.0;
_13 = 0_usize as i8;
_11 = -_12;
_22 = _19 ^ _19;
_29 = [_17.0,_17.0];
match _17.1 {
0 => bb22,
1 => bb23,
2 => bb24,
3 => bb25,
4 => bb26,
153 => bb28,
_ => bb27
}
}
bb22 = {
_3 = _23 * _23;
_25 = _13 as f32;
_4 = [_22,_22,_19];
_24 = _17.1;
Goto(bb21)
}
bb23 = {
_6 = [false,false,false];
_3 = 9223372036854775807_isize;
_10.1 = _7.1 ^ _7.1;
_10.0 = false as u32;
_7.1 = _10.1;
_7.1 = !_10.1;
_2 = [15463509043176061580_usize,17358356036894024432_usize,0_usize];
_2 = [8249566261165138204_usize,3_usize,18401664054223463231_usize];
_5 = [true,true,false];
_7 = _10;
_10 = _7;
_3 = -(-3_isize);
_7.0 = !_10.0;
_6 = [true,false,true];
_4 = [true,true,false];
_12 = 206_u8 as f64;
_7.1 = _10.1 | _10.1;
_10 = (_7.0, _7.1);
_7 = (_10.0, _10.1);
_7.0 = _10.0 & _10.0;
_7 = _10;
_1 = _4;
_13 = (-120_i8) - (-23_i8);
_12 = 278073184734466542906481386501922700979_u128 as f64;
_13 = false as i8;
_12 = 9063065744220344041_usize as f64;
_11 = (-1394858857_i32) as f64;
Call(_9.0 = fn7(_1, _7.1, _6, _10, _1, _10.1, _5, _10.1, _3, _7.0, _10), ReturnTo(bb4), UnwindUnreachable())
}
bb24 = {
_17.1 = (-9031_i16);
_4 = [_19,_19,_19];
_17.1 = 19186_i16;
_18 = [(-2491594349413040809_i64),(-2532322871976668020_i64),5118885257725560816_i64];
_23 = -_3;
_22 = _19;
_9 = (_16,);
_20 = _21.1;
_17 = ((-25236192713362565739774123836856467829_i128), (-29969_i16));
match _17.0 {
0 => bb1,
315046174207575897723600483594911743627 => bb10,
_ => bb3
}
}
bb25 = {
_17.1 = (-9031_i16);
_4 = [_19,_19,_19];
_17.1 = 19186_i16;
_18 = [(-2491594349413040809_i64),(-2532322871976668020_i64),5118885257725560816_i64];
_23 = -_3;
_22 = _19;
_9 = (_16,);
_20 = _21.1;
_17 = ((-25236192713362565739774123836856467829_i128), (-29969_i16));
match _17.0 {
0 => bb1,
315046174207575897723600483594911743627 => bb10,
_ => bb3
}
}
bb26 = {
_17.0 = (-81933878173103857388621312858588812914_i128);
_7.0 = !_10.0;
match _17.0 {
0 => bb11,
1 => bb12,
2 => bb13,
258348488747834606074753294573179398542 => bb15,
_ => bb14
}
}
bb27 = {
_9 = (_16,);
_16 = _9.0;
_21.0 = '\u{abdb3}';
_10 = _7;
_2 = [7534170438818440168_usize,6_usize,8441108150659703680_usize];
_16 = core::ptr::addr_of_mut!(_17.0);
_10.0 = _7.0 ^ _7.0;
_6 = [_22,_22,_22];
_11 = _23 as f64;
_27 = [_17.1];
_26 = _21.1;
_18 = [7791961883795582243_i64,7403646486456207731_i64,(-7139554584858888364_i64)];
_4 = [_19,_19,_22];
_21.1 = [_3,_23,_23];
_11 = _12;
_27 = [_17.1];
_9.0 = core::ptr::addr_of_mut!((*_16));
_10.0 = _7.0;
_17 = ((-101307329607940238838260054411220137046_i128), 153_i16);
_17.0 = -(-13609504836284694943045003685394290098_i128);
_21.0 = '\u{48c2a}';
match _17.1 {
0 => bb6,
1 => bb2,
2 => bb16,
3 => bb17,
4 => bb18,
153 => bb20,
_ => bb19
}
}
bb28 = {
_31 = _3 + _23;
_24 = _17.1 + _17.1;
_7 = (_10.0, _10.1);
_5 = [_19,_22,_19];
_17.0 = !59114786275330894675645429539677672728_i128;
_30 = 432072109_i32 as isize;
_28 = _21.0;
_9.0 = _16;
_2 = [6307323184316459090_usize,6732980736344636964_usize,5073186532059414077_usize];
_36 = _12 - _11;
_9 = (_16,);
_28 = _21.0;
_1 = [_22,_19,_22];
Call(_11 = core::intrinsics::transmute(_3), ReturnTo(bb29), UnwindUnreachable())
}
bb29 = {
_17.1 = _23 as i16;
_32 = !_31;
_21.0 = _28;
_36 = -_12;
_13 = (-52_i8) << _7.0;
_6 = _5;
_31 = _30 * _32;
_21 = (_28, _26);
_34 = !_22;
_33.fld2 = [_31,_31,_32];
_11 = -_12;
_25 = 134_u8 as f32;
_17.1 = _17.0 as i16;
_24 = _17.1;
_11 = _36;
_2 = [7_usize,6636426374426811330_usize,10115207267939510206_usize];
Goto(bb30)
}
bb30 = {
_41 = _10;
_32 = -_3;
_21.1 = [_3,_31,_31];
_44 = _29;
_40.0 = _28;
_40 = _21;
_38 = [_31,_31,_31];
_40.1 = [_3,_31,_30];
_45 = _22 > _22;
_17.1 = 25029_u16 as i16;
_37 = _41.0;
_10.1 = !_41.1;
_41.1 = _7.1 ^ _7.1;
_10.1 = _40.0 as u64;
_20 = _21.1;
_37 = !_10.0;
_9.0 = _16;
_25 = 259166005665945613361242446696547987098_u128 as f32;
_48 = _32 << _32;
_26 = [_32,_31,_3];
_40.1 = [_31,_30,_48];
_40 = (_21.0, _26);
_44 = [_17.0,_17.0];
Call(_25 = core::intrinsics::transmute(_10.0), ReturnTo(bb31), UnwindUnreachable())
}
bb31 = {
_18 = [(-2861741338652920132_i64),486064102874046339_i64,(-1869242841745270840_i64)];
_1 = [_22,_22,_19];
_41.0 = _37;
_41 = _10;
_33.fld2 = [_48,_3,_23];
_50 = 227_u8 as u32;
_32 = -_48;
_39 = _30 * _32;
_31 = _23 << _41.0;
_17.1 = _24 & _24;
_17 = ((-128389155157242190369753400788007037015_i128), _24);
_24 = !_17.1;
_4 = [_45,_22,_22];
_21.1 = [_39,_3,_39];
_42 = _39 + _48;
Goto(bb32)
}
bb32 = {
_10.1 = _7.1;
_51 = -_11;
_40.0 = _28;
_16 = core::ptr::addr_of_mut!(_17.0);
_20 = [_31,_42,_30];
_3 = _48;
_7 = (_41.0, _10.1);
_9.0 = core::ptr::addr_of_mut!((*_16));
Goto(bb33)
}
bb33 = {
_31 = _42 + _48;
_31 = !_48;
_23 = _10.0 as isize;
_32 = 10821849386522524043_usize as isize;
_13 = -(-7_i8);
_27 = [_17.1];
match (*_16) {
0 => bb34,
1 => bb35,
2 => bb36,
211893211763696273093621206643761174441 => bb38,
_ => bb37
}
}
bb34 = {
_6 = [false,false,false];
_3 = 9223372036854775807_isize;
_10.1 = _7.1 ^ _7.1;
_10.0 = false as u32;
_7.1 = _10.1;
_7.1 = !_10.1;
_2 = [15463509043176061580_usize,17358356036894024432_usize,0_usize];
_2 = [8249566261165138204_usize,3_usize,18401664054223463231_usize];
_5 = [true,true,false];
_7 = _10;
_10 = _7;
_3 = -(-3_isize);
_7.0 = !_10.0;
_6 = [true,false,true];
_4 = [true,true,false];
_12 = 206_u8 as f64;
_7.1 = _10.1 | _10.1;
_10 = (_7.0, _7.1);
_7 = (_10.0, _10.1);
_7.0 = _10.0 & _10.0;
_7 = _10;
_1 = _4;
_13 = (-120_i8) - (-23_i8);
_12 = 278073184734466542906481386501922700979_u128 as f64;
_13 = false as i8;
_12 = 9063065744220344041_usize as f64;
_11 = (-1394858857_i32) as f64;
Call(_9.0 = fn7(_1, _7.1, _6, _10, _1, _10.1, _5, _10.1, _3, _7.0, _10), ReturnTo(bb4), UnwindUnreachable())
}
bb35 = {
_3 = _23 * _23;
_25 = _13 as f32;
_4 = [_22,_22,_19];
_24 = _17.1;
Goto(bb21)
}
bb36 = {
_7.1 = 17226818577159676451_u64;
_4 = [true,false,true];
_1 = _5;
_1 = [true,false,false];
_7.1 = !12266782379178879083_u64;
_1 = [true,true,true];
Call(_9 = fn4(_1, _6, _6, _1, _4, _2, _5, _2, _3, _6, _5), ReturnTo(bb2), UnwindUnreachable())
}
bb37 = {
_17.1 = (-9031_i16);
_4 = [_19,_19,_19];
_17.1 = 19186_i16;
_18 = [(-2491594349413040809_i64),(-2532322871976668020_i64),5118885257725560816_i64];
_23 = -_3;
_22 = _19;
_9 = (_16,);
_20 = _21.1;
_17 = ((-25236192713362565739774123836856467829_i128), (-29969_i16));
match _17.0 {
0 => bb1,
315046174207575897723600483594911743627 => bb10,
_ => bb3
}
}
bb38 = {
_22 = _45 & _45;
_17 = ((-53416203530068882776213253643368267974_i128), _24);
_1 = [_45,_22,_22];
_49 = [_17.1];
_45 = _22;
_33.fld1 = [_19,_45,_22];
_48 = _39;
_55 = _17;
_36 = -_51;
_7.1 = 236453508289674922728914480751242643520_u128 as u64;
_17.0 = _51 as i128;
_50 = _37 & _10.0;
_41 = (_10.0, _10.1);
_52 = _28;
_21.1 = [_39,_31,_31];
_48 = -_42;
_54 = 63592_u16 as u8;
_52 = _21.0;
match _55.0 {
0 => bb35,
1 => bb10,
286866163390869580687161353788399943482 => bb39,
_ => bb14
}
}
bb39 = {
_40.0 = _52;
_38 = [_48,_48,_3];
_22 = _48 < _42;
_41 = _10;
_23 = _31;
_44 = [_55.0,(*_16)];
_18 = [(-7816529142703968922_i64),7517204239922436238_i64,(-6057307633196787835_i64)];
_40.0 = _52;
_59 = -_30;
_56.0 = _40.0;
_42 = _13 as isize;
_36 = _51 * _12;
_17 = (_55.0, _55.1);
_39 = _3 | _23;
_41.1 = _7.1;
_56 = (_28, _38);
_7.0 = 6_usize as u32;
_30 = _23 >> _10.0;
_41.1 = _7.1 & _7.1;
_33.fld1 = [_22,_45,_34];
_28 = _40.0;
_1 = [_45,_22,_22];
_30 = !_48;
_21.0 = _56.0;
_10.0 = _7.0 >> _50;
_55.0 = -(*_16);
match _17.0 {
0 => bb40,
1 => bb41,
2 => bb42,
286866163390869580687161353788399943482 => bb44,
_ => bb43
}
}
bb40 = {
_6 = [false,false,false];
_3 = 9223372036854775807_isize;
_10.1 = _7.1 ^ _7.1;
_10.0 = false as u32;
_7.1 = _10.1;
_7.1 = !_10.1;
_2 = [15463509043176061580_usize,17358356036894024432_usize,0_usize];
_2 = [8249566261165138204_usize,3_usize,18401664054223463231_usize];
_5 = [true,true,false];
_7 = _10;
_10 = _7;
_3 = -(-3_isize);
_7.0 = !_10.0;
_6 = [true,false,true];
_4 = [true,true,false];
_12 = 206_u8 as f64;
_7.1 = _10.1 | _10.1;
_10 = (_7.0, _7.1);
_7 = (_10.0, _10.1);
_7.0 = _10.0 & _10.0;
_7 = _10;
_1 = _4;
_13 = (-120_i8) - (-23_i8);
_12 = 278073184734466542906481386501922700979_u128 as f64;
_13 = false as i8;
_12 = 9063065744220344041_usize as f64;
_11 = (-1394858857_i32) as f64;
Call(_9.0 = fn7(_1, _7.1, _6, _10, _1, _10.1, _5, _10.1, _3, _7.0, _10), ReturnTo(bb4), UnwindUnreachable())
}
bb41 = {
_17.1 = (-9031_i16);
_4 = [_19,_19,_19];
_17.1 = 19186_i16;
_18 = [(-2491594349413040809_i64),(-2532322871976668020_i64),5118885257725560816_i64];
_23 = -_3;
_22 = _19;
_9 = (_16,);
_20 = _21.1;
_17 = ((-25236192713362565739774123836856467829_i128), (-29969_i16));
match _17.0 {
0 => bb1,
315046174207575897723600483594911743627 => bb10,
_ => bb3
}
}
bb42 = {
_9 = (_16,);
_16 = _9.0;
_21.0 = '\u{abdb3}';
_10 = _7;
_2 = [7534170438818440168_usize,6_usize,8441108150659703680_usize];
_16 = core::ptr::addr_of_mut!(_17.0);
_10.0 = _7.0 ^ _7.0;
_6 = [_22,_22,_22];
_11 = _23 as f64;
_27 = [_17.1];
_26 = _21.1;
_18 = [7791961883795582243_i64,7403646486456207731_i64,(-7139554584858888364_i64)];
_4 = [_19,_19,_22];
_21.1 = [_3,_23,_23];
_11 = _12;
_27 = [_17.1];
_9.0 = core::ptr::addr_of_mut!((*_16));
_10.0 = _7.0;
_17 = ((-101307329607940238838260054411220137046_i128), 153_i16);
_17.0 = -(-13609504836284694943045003685394290098_i128);
_21.0 = '\u{48c2a}';
match _17.1 {
0 => bb6,
1 => bb2,
2 => bb16,
3 => bb17,
4 => bb18,
153 => bb20,
_ => bb19
}
}
bb43 = {
_41 = _10;
_32 = -_3;
_21.1 = [_3,_31,_31];
_44 = _29;
_40.0 = _28;
_40 = _21;
_38 = [_31,_31,_31];
_40.1 = [_3,_31,_30];
_45 = _22 > _22;
_17.1 = 25029_u16 as i16;
_37 = _41.0;
_10.1 = !_41.1;
_41.1 = _7.1 ^ _7.1;
_10.1 = _40.0 as u64;
_20 = _21.1;
_37 = !_10.0;
_9.0 = _16;
_25 = 259166005665945613361242446696547987098_u128 as f32;
_48 = _32 << _32;
_26 = [_32,_31,_3];
_40.1 = [_31,_30,_48];
_40 = (_21.0, _26);
_44 = [_17.0,_17.0];
Call(_25 = core::intrinsics::transmute(_10.0), ReturnTo(bb31), UnwindUnreachable())
}
bb44 = {
_60 = -_30;
_2 = [1_usize,3_usize,3_usize];
_21.0 = _56.0;
_42 = !_30;
_29 = [_17.0,(*_16)];
_31 = 51590291537106485400226623189449439272_u128 as isize;
match (*_16) {
0 => bb18,
1 => bb6,
286866163390869580687161353788399943482 => bb46,
_ => bb45
}
}
bb45 = {
_9 = (_16,);
_16 = _9.0;
_21.0 = '\u{abdb3}';
_10 = _7;
_2 = [7534170438818440168_usize,6_usize,8441108150659703680_usize];
_16 = core::ptr::addr_of_mut!(_17.0);
_10.0 = _7.0 ^ _7.0;
_6 = [_22,_22,_22];
_11 = _23 as f64;
_27 = [_17.1];
_26 = _21.1;
_18 = [7791961883795582243_i64,7403646486456207731_i64,(-7139554584858888364_i64)];
_4 = [_19,_19,_22];
_21.1 = [_3,_23,_23];
_11 = _12;
_27 = [_17.1];
_9.0 = core::ptr::addr_of_mut!((*_16));
_10.0 = _7.0;
_17 = ((-101307329607940238838260054411220137046_i128), 153_i16);
_17.0 = -(-13609504836284694943045003685394290098_i128);
_21.0 = '\u{48c2a}';
match _17.1 {
0 => bb6,
1 => bb2,
2 => bb16,
3 => bb17,
4 => bb18,
153 => bb20,
_ => bb19
}
}
bb46 = {
_7.0 = _50 >> _17.0;
_52 = _56.0;
_37 = !_10.0;
_16 = core::ptr::addr_of_mut!((*_16));
_17 = _55;
_66.0 = _56.0;
_2 = [7_usize,1_usize,1559529813240719035_usize];
_58 = _22 as i8;
_63 = [(*_16)];
_60 = !_42;
_66.1 = [_42,_39,_32];
_7.1 = 2381398360396003155_usize as u64;
_41.1 = _10.1;
_30 = -_48;
_39 = -_42;
_64 = 191633234651011406_i64;
_63 = [(*_16)];
_26 = [_39,_39,_23];
_68 = _59 & _60;
_28 = _52;
_54 = !20_u8;
_14 = core::ptr::addr_of!(_63);
_62 = core::ptr::addr_of_mut!(_21);
Call(RET = fn12(_58, _66.0, _30, _22, _41, _38, _21, _10, _51), ReturnTo(bb47), UnwindUnreachable())
}
bb47 = {
_21.0 = _66.0;
_8 = Adt47::Variant2 { fld0: 124286450846163560331871715669533887209_u128,fld1: (*_14) };
_67 = _39 >> _3;
_43 = Adt56::Variant0 { fld0: _17.1 };
_66 = _56;
_69 = -_36;
_32 = _56.0 as isize;
_55.1 = !_17.1;
_72.0 = _64 as u32;
_39 = _30 - _23;
_13 = !_58;
_8 = Adt47::Variant2 { fld0: 30429763084604141096633839837741743352_u128,fld1: (*_14) };
_56 = (_28, _26);
_71 = core::ptr::addr_of_mut!(_16);
_2 = [1197052461765751109_usize,3_usize,11560823289255037671_usize];
_5 = [_22,_22,_45];
_67 = _60 ^ _30;
_21.1 = [_60,_42,_60];
SetDiscriminant(_43, 1);
_45 = !_22;
_6 = [_45,_45,_45];
_70 = core::ptr::addr_of_mut!(_71);
Goto(bb48)
}
bb48 = {
Call(_77 = dump_var(3_usize, 68_usize, Move(_68), 67_usize, Move(_67), 26_usize, Move(_26), 28_usize, Move(_28)), ReturnTo(bb49), UnwindUnreachable())
}
bb49 = {
Call(_77 = dump_var(3_usize, 37_usize, Move(_37), 13_usize, Move(_13), 56_usize, Move(_56), 49_usize, Move(_49)), ReturnTo(bb50), UnwindUnreachable())
}
bb50 = {
Call(_77 = dump_var(3_usize, 38_usize, Move(_38), 32_usize, Move(_32), 41_usize, Move(_41), 59_usize, Move(_59)), ReturnTo(bb51), UnwindUnreachable())
}
bb51 = {
Call(_77 = dump_var(3_usize, 55_usize, Move(_55), 52_usize, Move(_52), 31_usize, Move(_31), 2_usize, Move(_2)), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
Call(_77 = dump_var(3_usize, 29_usize, Move(_29), 20_usize, Move(_20), 23_usize, Move(_23), 63_usize, Move(_63)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Call(_77 = dump_var(3_usize, 21_usize, Move(_21), 34_usize, Move(_34), 5_usize, Move(_5), 3_usize, Move(_3)), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn4(mut _1: [bool; 3],mut _2: [bool; 3],mut _3: [bool; 3],mut _4: [bool; 3],mut _5: [bool; 3],mut _6: [usize; 3],mut _7: [bool; 3],mut _8: [usize; 3],mut _9: isize,mut _10: [bool; 3],mut _11: [bool; 3]) -> (*mut i128,) {
mir! {
type RET = (*mut i128,);
let _12: (char, [isize; 3]);
let _13: f32;
let _14: Adt45;
let _15: isize;
let _16: bool;
let _17: f32;
let _18: *mut u128;
let _19: i16;
let _20: ([isize; 3],);
let _21: Adt42;
let _22: (u32, u64);
let _23: Adt57;
let _24: char;
let _25: bool;
let _26: u128;
let _27: i128;
let _28: bool;
let _29: [i128; 1];
let _30: [isize; 3];
let _31: f32;
let _32: isize;
let _33: Adt42;
let _34: [bool; 3];
let _35: *const [i128; 1];
let _36: f32;
let _37: f64;
let _38: Adt46;
let _39: ();
let _40: ();
{
_5 = [true,false,true];
_5 = [true,true,false];
_9 = -(-57_isize);
_8 = [6811923601036721595_usize,10448231556026211615_usize,2306942306933938539_usize];
_11 = [false,false,false];
_10 = _3;
_2 = _5;
_5 = _3;
_3 = _1;
_12.1 = [_9,_9,_9];
_1 = _2;
_5 = [true,true,true];
_12.1 = [_9,_9,_9];
_13 = 3_i8 as f32;
_5 = _4;
_3 = _5;
_4 = [true,false,true];
_8 = [17361982694777564367_usize,14424444966075182050_usize,2_usize];
_9 = _13 as isize;
_4 = [true,true,false];
_10 = [false,true,true];
_7 = _11;
_4 = _3;
Call(_13 = fn5(_12.1, _2, _1), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_16 = true;
_8 = [6_usize,5_usize,2_usize];
_7 = [_16,_16,_16];
_15 = -_9;
Goto(bb2)
}
bb2 = {
_1 = [_16,_16,_16];
_12.0 = '\u{c52b0}';
_13 = 8604468814592574166_usize as f32;
_8 = [7_usize,18006906515337583323_usize,5_usize];
_6 = _8;
_13 = (-53_i8) as f32;
_7 = _10;
_7 = [_16,_16,_16];
_20.0 = _12.1;
_8 = [842490235881910502_usize,7_usize,10473925382361048637_usize];
_11 = [_16,_16,_16];
_7 = [_16,_16,_16];
_10 = [_16,_16,_16];
Goto(bb3)
}
bb3 = {
_11 = _4;
_18 = core::ptr::addr_of_mut!(_21.fld0);
_14 = Adt45::Variant3 { fld0: _9 };
_16 = false ^ true;
Goto(bb4)
}
bb4 = {
_13 = (-1637709312_i32) as f32;
SetDiscriminant(_14, 2);
_22.0 = 1870949106_u32 >> _15;
_24 = _12.0;
_17 = 0_usize as f32;
place!(Field::<*const u32>(Variant(_14, 2), 0)) = core::ptr::addr_of!(_22.0);
_19 = !15008_i16;
_8 = [6363867486587218945_usize,3342882189589968277_usize,16739531721813696339_usize];
place!(Field::<[i64; 3]>(Variant(_14, 2), 5)) = [1006055323205714129_i64,1740123947009474165_i64,(-7983093485558457425_i64)];
_8 = _6;
place!(Field::<isize>(Variant(_14, 2), 2)) = _9;
place!(Field::<u64>(Variant(_14, 2), 1)) = 12545912909985697892_u64;
_22.1 = !Field::<u64>(Variant(_14, 2), 1);
_16 = false;
place!(Field::<*const u32>(Variant(_14, 2), 0)) = core::ptr::addr_of!(_22.0);
_12 = (_24, _20.0);
match Field::<u64>(Variant(_14, 2), 1) {
0 => bb1,
1 => bb2,
2 => bb3,
12545912909985697892 => bb6,
_ => bb5
}
}
bb5 = {
_11 = _4;
_18 = core::ptr::addr_of_mut!(_21.fld0);
_14 = Adt45::Variant3 { fld0: _9 };
_16 = false ^ true;
Goto(bb4)
}
bb6 = {
_19 = !(-31297_i16);
_10 = [_16,_16,_16];
place!(Field::<u8>(Variant(_14, 2), 3)) = !242_u8;
_12.1 = _20.0;
place!(Field::<i16>(Variant(_14, 2), 4)) = -_19;
RET.0 = core::ptr::addr_of_mut!(_27);
RET.0 = core::ptr::addr_of_mut!(_27);
_1 = [_16,_16,_16];
_4 = _3;
Goto(bb7)
}
bb7 = {
_21.fld0 = !59520380278947142988315689794986303803_u128;
_3 = [_16,_16,_16];
_1 = [_16,_16,_16];
_10 = [_16,_16,_16];
place!(Field::<i16>(Variant(_14, 2), 4)) = _19 >> _22.1;
place!(Field::<isize>(Variant(_14, 2), 2)) = (-43_i8) as isize;
_21.fld0 = _12.0 as u128;
place!(Field::<u8>(Variant(_14, 2), 3)) = !241_u8;
_1 = _11;
RET.0 = core::ptr::addr_of_mut!(_27);
_8 = _6;
Goto(bb8)
}
bb8 = {
_24 = _12.0;
place!(Field::<i16>(Variant(_14, 2), 4)) = -_19;
match Field::<u64>(Variant(_14, 2), 1) {
0 => bb9,
12545912909985697892 => bb11,
_ => bb10
}
}
bb9 = {
_1 = [_16,_16,_16];
_12.0 = '\u{c52b0}';
_13 = 8604468814592574166_usize as f32;
_8 = [7_usize,18006906515337583323_usize,5_usize];
_6 = _8;
_13 = (-53_i8) as f32;
_7 = _10;
_7 = [_16,_16,_16];
_20.0 = _12.1;
_8 = [842490235881910502_usize,7_usize,10473925382361048637_usize];
_11 = [_16,_16,_16];
_7 = [_16,_16,_16];
_10 = [_16,_16,_16];
Goto(bb3)
}
bb10 = {
_16 = true;
_8 = [6_usize,5_usize,2_usize];
_7 = [_16,_16,_16];
_15 = -_9;
Goto(bb2)
}
bb11 = {
_25 = !_16;
_11 = [_16,_25,_25];
_18 = core::ptr::addr_of_mut!(_26);
_28 = _25;
_21.fld0 = 159069133464016609223432948855078705731_u128 << Field::<isize>(Variant(_14, 2), 2);
place!(Field::<[i64; 3]>(Variant(_14, 2), 5)) = [(-3941610940859243838_i64),(-6340263609444051529_i64),(-521450317534462010_i64)];
_22 = (2422046441_u32, Field::<u64>(Variant(_14, 2), 1));
_10 = _11;
_22.0 = !3150980645_u32;
_7 = [_28,_28,_16];
_20 = (_12.1,);
RET.0 = core::ptr::addr_of_mut!(_27);
place!(Field::<[i16; 1]>(Variant(_14, 2), 6)) = [_19];
_30 = [Field::<isize>(Variant(_14, 2), 2),_15,Field::<isize>(Variant(_14, 2), 2)];
place!(Field::<u8>(Variant(_14, 2), 3)) = _21.fld0 as u8;
place!(Field::<isize>(Variant(_14, 2), 2)) = !_9;
_25 = _28;
SetDiscriminant(_14, 2);
place!(Field::<[i64; 3]>(Variant(_14, 2), 5)) = [5067472891491716095_i64,(-3148942874276034317_i64),(-3462036510334841149_i64)];
place!(Field::<u64>(Variant(_14, 2), 1)) = _22.1 % _22.1;
_21 = Adt42 { fld0: 52797421792392490773708281284162728823_u128 };
_8 = [11368773937835209866_usize,1_usize,3_usize];
_12.0 = _24;
match _22.1 {
0 => bb5,
12545912909985697892 => bb13,
_ => bb12
}
}
bb12 = {
_24 = _12.0;
place!(Field::<i16>(Variant(_14, 2), 4)) = -_19;
match Field::<u64>(Variant(_14, 2), 1) {
0 => bb9,
12545912909985697892 => bb11,
_ => bb10
}
}
bb13 = {
_22.0 = (-147260401021015494426663161461296383481_i128) as u32;
place!(Field::<isize>(Variant(_14, 2), 2)) = _9;
_25 = !_28;
_2 = [_16,_25,_25];
Goto(bb14)
}
bb14 = {
place!(Field::<[i16; 1]>(Variant(_14, 2), 6)) = [_19];
_2 = _4;
_21 = Adt42 { fld0: 3064686651556139228183601883406596780_u128 };
_7 = [_28,_28,_16];
_34 = [_28,_16,_25];
_25 = _28 & _28;
_34 = [_25,_25,_25];
place!(Field::<u8>(Variant(_14, 2), 3)) = !217_u8;
_5 = [_25,_16,_28];
_31 = 1601317148_i32 as f32;
_30 = [Field::<isize>(Variant(_14, 2), 2),Field::<isize>(Variant(_14, 2), 2),Field::<isize>(Variant(_14, 2), 2)];
place!(Field::<*const u32>(Variant(_14, 2), 0)) = core::ptr::addr_of!(_22.0);
_35 = core::ptr::addr_of!(_29);
place!(Field::<i16>(Variant(_14, 2), 4)) = _19;
_29 = [52270782436067220670054226897701027309_i128];
SetDiscriminant(_14, 1);
_33 = Adt42 { fld0: _21.fld0 };
_20 = (_30,);
_33 = Adt42 { fld0: _21.fld0 };
_21.fld0 = _33.fld0 | _33.fld0;
_22.0 = 863266035_u32 | 1245195101_u32;
_11 = [_28,_25,_25];
_30 = [_9,_9,_15];
_2 = _34;
_22.1 = 17607186943175885996_u64;
_38.fld1.0 = _24;
Goto(bb15)
}
bb15 = {
Call(_39 = dump_var(4_usize, 3_usize, Move(_3), 24_usize, Move(_24), 34_usize, Move(_34), 1_usize, Move(_1)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_39 = dump_var(4_usize, 19_usize, Move(_19), 6_usize, Move(_6), 9_usize, Move(_9), 29_usize, Move(_29)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_39 = dump_var(4_usize, 12_usize, Move(_12), 8_usize, Move(_8), 11_usize, Move(_11), 40_usize, _40), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn5(mut _1: [isize; 3],mut _2: [bool; 3],mut _3: [bool; 3]) -> f32 {
mir! {
type RET = f32;
let _4: usize;
let _5: [i16; 1];
let _6: isize;
let _7: usize;
let _8: f32;
let _9: [i128; 2];
let _10: Adt44;
let _11: bool;
let _12: ();
let _13: ();
{
_3 = _2;
RET = 139011847453068163846674496911199144886_i128 as f32;
_3 = _2;
RET = (-125866721390209624563928002833360315344_i128) as f32;
_3 = _2;
_4 = (-121892046_i32) as usize;
_6 = !9223372036854775807_isize;
_6 = !(-9223372036854775808_isize);
RET = 1322_i16 as f32;
_7 = !_4;
_5 = [(-5244_i16)];
Goto(bb1)
}
bb1 = {
_6 = '\u{27875}' as isize;
_2 = _3;
_8 = 2104150310_u32 as f32;
_8 = -RET;
_6 = !75_isize;
_8 = -RET;
_7 = _4 & _4;
_1 = [_6,_6,_6];
_3 = [true,true,false];
_3 = [false,false,false];
RET = _8 + _8;
_3 = _2;
_7 = !_4;
_2 = _3;
_3 = [true,true,false];
_5 = [21195_i16];
_3 = [false,true,true];
RET = 3291405080_u32 as f32;
_8 = RET;
_1 = [_6,_6,_6];
_3 = [true,true,false];
_3 = _2;
_7 = _4;
RET = _8 + _8;
_6 = !9223372036854775807_isize;
_4 = 1199583209_u32 as usize;
Call(_7 = fn6(_2, _4, _2, _5, RET, _3, _2, _6, RET, _2, _1, _6), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_8 = RET - RET;
_3 = [true,true,false];
_8 = RET;
Goto(bb3)
}
bb3 = {
_8 = RET;
_1 = [_6,_6,_6];
_1 = [_6,_6,_6];
RET = _8;
_9 = [(-61828605356172058990937652329595221875_i128),(-151162861576727505615599240669165868436_i128)];
RET = _7 as f32;
_2 = [false,true,true];
_3 = _2;
_9 = [(-49620850900765999428148627682302149740_i128),(-91473752708495230905313130565664503381_i128)];
_2 = [true,true,true];
_11 = !false;
Goto(bb4)
}
bb4 = {
Call(_12 = dump_var(5_usize, 7_usize, Move(_7), 6_usize, Move(_6), 4_usize, Move(_4), 5_usize, Move(_5)), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn6(mut _1: [bool; 3],mut _2: usize,mut _3: [bool; 3],mut _4: [i16; 1],mut _5: f32,mut _6: [bool; 3],mut _7: [bool; 3],mut _8: isize,mut _9: f32,mut _10: [bool; 3],mut _11: [isize; 3],mut _12: isize) -> usize {
mir! {
type RET = usize;
let _13: f64;
let _14: u32;
let _15: [isize; 3];
let _16: f64;
let _17: (u32, u64);
let _18: *const u32;
let _19: isize;
let _20: ();
let _21: ();
{
_7 = [false,false,true];
_1 = [false,true,false];
_10 = [true,true,false];
RET = _2 << _12;
_8 = !_12;
RET = !_2;
_1 = [false,true,true];
_4 = [15815_i16];
RET = _2 & _2;
_10 = [false,true,true];
_12 = _8;
Goto(bb1)
}
bb1 = {
_3 = _1;
_3 = _1;
_8 = !_12;
_9 = _5;
_2 = RET - RET;
_7 = [true,false,false];
_9 = _5 * _5;
_8 = !_12;
_5 = _9 * _9;
_5 = 2963014993_u32 as f32;
_10 = [false,false,false];
_11 = [_8,_8,_12];
_12 = _8 | _8;
RET = _2;
RET = _8 as usize;
_7 = [false,true,true];
_9 = 5289_u16 as f32;
_9 = 63597_u16 as f32;
_13 = _12 as f64;
_5 = _9 * _9;
_4 = [32047_i16];
_5 = _9;
_9 = -_5;
Goto(bb2)
}
bb2 = {
_7 = [false,false,true];
_11 = [_8,_12,_12];
RET = !_2;
_11 = [_8,_8,_12];
_14 = !2792229571_u32;
_7 = _6;
_4 = [20532_i16];
_2 = RET - RET;
RET = _2;
_14 = 13356513926466026999_u64 as u32;
_17.1 = !2613725443151177788_u64;
_19 = -_12;
_8 = _12 | _12;
_13 = 41285752503163389380663663509271471653_u128 as f64;
RET = _2 * _2;
Goto(bb3)
}
bb3 = {
Call(_20 = dump_var(6_usize, 2_usize, Move(_2), 11_usize, Move(_11), 1_usize, Move(_1), 4_usize, Move(_4)), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
Call(_20 = dump_var(6_usize, 14_usize, Move(_14), 6_usize, Move(_6), 21_usize, _21, 21_usize, _21), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn7(mut _1: [bool; 3],mut _2: u64,mut _3: [bool; 3],mut _4: (u32, u64),mut _5: [bool; 3],mut _6: u64,mut _7: [bool; 3],mut _8: u64,mut _9: isize,mut _10: u32,mut _11: (u32, u64)) -> *mut i128 {
mir! {
type RET = *mut i128;
let _12: u32;
let _13: i32;
let _14: i8;
let _15: isize;
let _16: isize;
let _17: i32;
let _18: isize;
let _19: f64;
let _20: [i64; 3];
let _21: Adt42;
let _22: i16;
let _23: Adt56;
let _24: Adt43;
let _25: isize;
let _26: [bool; 3];
let _27: f64;
let _28: f64;
let _29: i64;
let _30: f32;
let _31: i128;
let _32: f64;
let _33: ();
let _34: ();
{
_9 = (-99_isize) ^ 9223372036854775807_isize;
_13 = 1760094336_i32 << _2;
_12 = _11.1 as u32;
_11.0 = 23758_i16 as u32;
_2 = (-87980879099668696804885728756016813015_i128) as u64;
_4.0 = !_12;
_10 = _12 >> _11.1;
_13 = -1925803921_i32;
_10 = _4.0 ^ _12;
_11 = _4;
_1 = [true,true,true];
Call(_11.1 = fn8(_4.0, _1, _9, _4, _11.0, _4.0, _8, _6, _12, _4, _8, _9, _12), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_7 = _5;
_10 = _11.0;
_14 = 11_i8;
_13 = _9 as i32;
_12 = _4.0 >> _11.1;
_4.0 = _13 as u32;
_6 = _13 as u64;
_6 = _11.1;
_9 = 9223372036854775807_isize & 12_isize;
_10 = false as u32;
_1 = [false,true,true];
_8 = _12 as u64;
_20 = [7989372482787021062_i64,(-70892314021570748_i64),(-8927133771939290980_i64)];
_6 = _11.1;
_14 = 9_i8;
_18 = _9;
_1 = _3;
_11 = (_12, _6);
_16 = -_18;
_19 = (-30547_i16) as f64;
Goto(bb2)
}
bb2 = {
_21 = Adt42 { fld0: 48599722340628406480877096874398557724_u128 };
_2 = !_8;
_11 = _4;
_11.1 = !_2;
_9 = _16 >> _2;
_11.0 = _12;
_18 = 97315679732512911806053038759212049468_i128 as isize;
_12 = !_11.0;
_17 = 40023_u16 as i32;
_16 = _21.fld0 as isize;
_2 = _11.1;
_8 = _2;
_4.1 = _11.0 as u64;
_21.fld0 = '\u{ff257}' as u128;
_6 = !_8;
_15 = _9;
_20 = [(-712514201499544519_i64),1344481862425361445_i64,3779439204401918897_i64];
_15 = _9;
_21.fld0 = 186048334268406030508866890660855311_u128;
_4.1 = _8 | _11.1;
match _14 {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
4 => bb7,
5 => bb8,
6 => bb9,
9 => bb11,
_ => bb10
}
}
bb3 = {
_7 = _5;
_10 = _11.0;
_14 = 11_i8;
_13 = _9 as i32;
_12 = _4.0 >> _11.1;
_4.0 = _13 as u32;
_6 = _13 as u64;
_6 = _11.1;
_9 = 9223372036854775807_isize & 12_isize;
_10 = false as u32;
_1 = [false,true,true];
_8 = _12 as u64;
_20 = [7989372482787021062_i64,(-70892314021570748_i64),(-8927133771939290980_i64)];
_6 = _11.1;
_14 = 9_i8;
_18 = _9;
_1 = _3;
_11 = (_12, _6);
_16 = -_18;
_19 = (-30547_i16) as f64;
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
_17 = _13;
_19 = 6_usize as f64;
_7 = _3;
_5 = _7;
_16 = _9 << _12;
_8 = _19 as u64;
_1 = [true,true,true];
_4.0 = _12 - _11.0;
_21.fld0 = 185841611212552647650583896943738224353_u128;
_21 = Adt42 { fld0: 269229502033614557752955491731577338157_u128 };
_18 = _15;
_7 = [true,true,true];
_15 = _16 - _9;
_21.fld0 = !163108234681724484428990826404837040908_u128;
_12 = !_4.0;
_23 = Adt56::Variant0 { fld0: (-14665_i16) };
_7 = [false,true,false];
_5 = [false,true,false];
place!(Field::<i16>(Variant(_23, 0), 0)) = 30122_i16 - (-28487_i16);
_8 = _6 & _4.1;
_26 = [true,false,true];
_16 = -_9;
_8 = 4_usize as u64;
SetDiscriminant(_23, 1);
_6 = _13 as u64;
match _14 {
9 => bb13,
_ => bb12
}
}
bb12 = {
Return()
}
bb13 = {
place!(Field::<f32>(Variant(_23, 1), 4)) = 17812_i16 as f32;
_12 = _4.0;
Call(_18 = fn11(_4, _15, _12, _16, _4.1, _4.0, _15, _15, _11.1, _16, _16, _4.1, _12, _16, _4), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
_25 = -_18;
_13 = _19 as i32;
_14 = 31043_u16 as i8;
Goto(bb15)
}
bb15 = {
_10 = 5062_i16 as u32;
place!(Field::<u128>(Variant(_23, 1), 1)) = !_21.fld0;
_10 = _19 as u32;
_27 = _19;
_12 = _11.0 << _25;
_17 = -_13;
_22 = 18943_i16;
_30 = -Field::<f32>(Variant(_23, 1), 4);
place!(Field::<[isize; 3]>(Variant(_23, 1), 6)) = [_18,_15,_18];
place!(Field::<[i128; 2]>(Variant(_23, 1), 3)) = [(-43941715365054469382018617793605354462_i128),(-167070938437803005009554525739857663969_i128)];
RET = core::ptr::addr_of_mut!(_31);
_17 = _13;
_16 = _15 << _11.0;
_4.0 = _12 >> _4.1;
Goto(bb16)
}
bb16 = {
Call(_33 = dump_var(7_usize, 8_usize, Move(_8), 13_usize, Move(_13), 22_usize, Move(_22), 7_usize, Move(_7)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_33 = dump_var(7_usize, 14_usize, Move(_14), 2_usize, Move(_2), 25_usize, Move(_25), 1_usize, Move(_1)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_33 = dump_var(7_usize, 11_usize, Move(_11), 10_usize, Move(_10), 17_usize, Move(_17), 34_usize, _34), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn8(mut _1: u32,mut _2: [bool; 3],mut _3: isize,mut _4: (u32, u64),mut _5: u32,mut _6: u32,mut _7: u64,mut _8: u64,mut _9: u32,mut _10: (u32, u64),mut _11: u64,mut _12: isize,mut _13: u32) -> u64 {
mir! {
type RET = u64;
let _14: *mut *mut i128;
let _15: [bool; 3];
let _16: [isize; 3];
let _17: i8;
let _18: i16;
let _19: f32;
let _20: *mut i128;
let _21: isize;
let _22: f64;
let _23: i16;
let _24: [usize; 3];
let _25: bool;
let _26: [i16; 1];
let _27: *mut i128;
let _28: [i16; 1];
let _29: f64;
let _30: *mut (char, [isize; 3]);
let _31: isize;
let _32: f32;
let _33: [i64; 3];
let _34: Adt42;
let _35: Adt57;
let _36: (i128, i16);
let _37: Adt47;
let _38: ();
let _39: ();
{
_2 = [false,false,false];
_7 = 26321_i16 as u64;
_4.0 = 54_i8 as u32;
_1 = _9;
_12 = '\u{cb413}' as isize;
_4.0 = !_9;
_10 = _4;
_6 = _13 | _9;
_10 = (_1, _4.1);
RET = _4.1;
_11 = !_7;
Goto(bb1)
}
bb1 = {
RET = !_10.1;
_1 = !_13;
_6 = _9 + _13;
_4 = _10;
_4.1 = _11 & _8;
_4.1 = !_8;
_13 = _6 | _1;
_8 = _4.1;
_4.0 = _10.0;
RET = (-24774_i16) as u64;
_15 = [false,false,true];
_1 = 49444_u16 as u32;
_5 = _13;
_11 = _4.1;
_5 = !_13;
_11 = !_4.1;
RET = !_10.1;
_10.0 = _5;
_10 = _4;
_4 = _10;
_9 = 75_i8 as u32;
Call(_10 = fn9(_6, _13, _2, _15, RET, _4, _4, _11, _13, _13, _8, _12), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_10 = (_5, RET);
_6 = 106956926177028238221343736970816968023_i128 as u32;
_3 = !_12;
_4.0 = 709257805_i32 as u32;
RET = _7 - _8;
_10.0 = _13;
_4.0 = _10.0 >> _10.0;
RET = !_8;
_17 = (-53_i8) >> _4.0;
Call(_10.1 = core::intrinsics::bswap(_7), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_2 = [false,true,false];
_8 = _10.1 ^ _10.1;
_11 = 49791_u16 as u64;
_2 = [false,true,false];
_10.0 = !_5;
_2 = _15;
_19 = _17 as f32;
_5 = _10.0;
_13 = !_4.0;
RET = !_8;
_16 = [_12,_12,_3];
_6 = !_13;
_17 = !47_i8;
_21 = -_12;
_14 = core::ptr::addr_of_mut!(_20);
_25 = _6 <= _4.0;
_23 = (-13254_i16);
_14 = core::ptr::addr_of_mut!(_20);
_18 = _23 >> _8;
RET = !_8;
Goto(bb4)
}
bb4 = {
_10.0 = _6 >> _13;
_13 = _10.0 + _4.0;
_21 = 50022653493329819367219305967586281007_i128 as isize;
match _23 {
0 => bb3,
1 => bb5,
2 => bb6,
3 => bb7,
4 => bb8,
340282366920938463463374607431768198202 => bb10,
_ => bb9
}
}
bb5 = {
_2 = [false,true,false];
_8 = _10.1 ^ _10.1;
_11 = 49791_u16 as u64;
_2 = [false,true,false];
_10.0 = !_5;
_2 = _15;
_19 = _17 as f32;
_5 = _10.0;
_13 = !_4.0;
RET = !_8;
_16 = [_12,_12,_3];
_6 = !_13;
_17 = !47_i8;
_21 = -_12;
_14 = core::ptr::addr_of_mut!(_20);
_25 = _6 <= _4.0;
_23 = (-13254_i16);
_14 = core::ptr::addr_of_mut!(_20);
_18 = _23 >> _8;
RET = !_8;
Goto(bb4)
}
bb6 = {
_10 = (_5, RET);
_6 = 106956926177028238221343736970816968023_i128 as u32;
_3 = !_12;
_4.0 = 709257805_i32 as u32;
RET = _7 - _8;
_10.0 = _13;
_4.0 = _10.0 >> _10.0;
RET = !_8;
_17 = (-53_i8) >> _4.0;
Call(_10.1 = core::intrinsics::bswap(_7), ReturnTo(bb3), UnwindUnreachable())
}
bb7 = {
RET = !_10.1;
_1 = !_13;
_6 = _9 + _13;
_4 = _10;
_4.1 = _11 & _8;
_4.1 = !_8;
_13 = _6 | _1;
_8 = _4.1;
_4.0 = _10.0;
RET = (-24774_i16) as u64;
_15 = [false,false,true];
_1 = 49444_u16 as u32;
_5 = _13;
_11 = _4.1;
_5 = !_13;
_11 = !_4.1;
RET = !_10.1;
_10.0 = _5;
_10 = _4;
_4 = _10;
_9 = 75_i8 as u32;
Call(_10 = fn9(_6, _13, _2, _15, RET, _4, _4, _11, _13, _13, _8, _12), ReturnTo(bb2), UnwindUnreachable())
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_19 = 199563712222742988158468899853050091864_u128 as f32;
_13 = !_6;
_23 = _18;
_19 = (-7846298484505039297_i64) as f32;
_26 = [_18];
_13 = _21 as u32;
_16 = [_12,_21,_12];
Goto(bb11)
}
bb11 = {
_24 = [17494750720944616368_usize,1694481245634941849_usize,2_usize];
_3 = _12;
_16 = [_21,_12,_12];
_10.0 = _6;
_5 = _4.0;
_4 = (_5, _10.1);
_6 = !_1;
_9 = _10.0;
_8 = _7 << _7;
_5 = !_9;
_8 = _4.1 - _10.1;
_10.0 = _6 ^ _4.0;
_4 = (_1, RET);
_21 = _3;
_24 = [5_usize,5_usize,7_usize];
_28 = [_18];
Goto(bb12)
}
bb12 = {
_8 = RET | _4.1;
_14 = core::ptr::addr_of_mut!(_27);
_25 = false;
_28 = [_23];
_6 = _9;
_4 = (_10.0, _8);
_17 = _6 as i8;
_31 = _12;
_3 = _12;
_14 = core::ptr::addr_of_mut!(_20);
_23 = _10.0 as i16;
_4.0 = 47988089405934040970728651622111662953_u128 as u32;
_4.0 = _6 >> _5;
_21 = _3 << _4.0;
_2 = _15;
_31 = !_21;
_32 = _19 - _19;
_9 = _4.0 << _21;
_7 = !_4.1;
RET = (-2580791688723935078_i64) as u64;
_24 = [4375808069993990823_usize,3247763353387146913_usize,6_usize];
_2 = [_25,_25,_25];
_3 = _31 ^ _21;
_29 = _5 as f64;
_19 = _32;
_17 = 36_i8;
Goto(bb13)
}
bb13 = {
RET = _4.1 & _8;
_1 = !_9;
_34.fld0 = 315306704613127746292746982313790261675_u128 | 142354716626837765906702425183324529898_u128;
_23 = _18 | _18;
_7 = !_4.1;
_26 = [_18];
_9 = !_6;
_5 = _1;
_19 = _32;
_4.0 = _1;
_36 = ((-19126168354955805137656960842365772074_i128), _23);
_9 = _1 + _1;
Goto(bb14)
}
bb14 = {
Call(_38 = dump_var(8_usize, 12_usize, Move(_12), 2_usize, Move(_2), 6_usize, Move(_6), 8_usize, Move(_8)), ReturnTo(bb15), UnwindUnreachable())
}
bb15 = {
Call(_38 = dump_var(8_usize, 10_usize, Move(_10), 4_usize, Move(_4), 11_usize, Move(_11), 31_usize, Move(_31)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_38 = dump_var(8_usize, 1_usize, Move(_1), 21_usize, Move(_21), 25_usize, Move(_25), 7_usize, Move(_7)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn9(mut _1: u32,mut _2: u32,mut _3: [bool; 3],mut _4: [bool; 3],mut _5: u64,mut _6: (u32, u64),mut _7: (u32, u64),mut _8: u64,mut _9: u32,mut _10: u32,mut _11: u64,mut _12: isize) -> (u32, u64) {
mir! {
type RET = (u32, u64);
let _13: [i128; 2];
let _14: *mut i128;
let _15: (u32, u64);
let _16: (i128, i16);
let _17: bool;
let _18: isize;
let _19: u128;
let _20: bool;
let _21: char;
let _22: usize;
let _23: f32;
let _24: u128;
let _25: isize;
let _26: [bool; 3];
let _27: &'static *const [i128; 1];
let _28: ();
let _29: ();
{
_3 = _4;
RET = (_10, _11);
RET.1 = 30020_u16 as u64;
_4 = [true,false,true];
_4 = [false,true,true];
_10 = 2150_u16 as u32;
_6 = (_2, _5);
_14 = core::ptr::addr_of_mut!(_16.0);
RET = _6;
_15.0 = _6.0;
RET.1 = 6_usize as u64;
RET.1 = _5;
_12 = 25_isize ^ 112_isize;
_16.1 = 16983_i16 * (-1706_i16);
_5 = 116_u8 as u64;
_16.0 = !(-108291624282704570617691139628917910272_i128);
_11 = _7.1;
_15.0 = _6.0 - RET.0;
_15 = (_6.0, _11);
RET.0 = (-3332941168789217353_i64) as u32;
RET.0 = (-477688926_i32) as u32;
Call(_6.0 = fn10(_15, _15.0), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_13 = [_16.0,_16.0];
_2 = _15.0 << _6.0;
RET.0 = '\u{c8617}' as u32;
_19 = !154724975890827560609081899042028327670_u128;
_3 = [true,false,false];
_10 = _6.0 >> _6.0;
_9 = _2 >> _6.0;
_20 = false;
_5 = (-2061056098_i32) as u64;
_15.0 = _2;
_2 = _20 as u32;
_5 = !_15.1;
_17 = _20 & _20;
_17 = !_20;
RET.0 = _19 as u32;
_12 = (-9223372036854775808_isize) ^ 9223372036854775807_isize;
_6 = _15;
Goto(bb2)
}
bb2 = {
_18 = _12;
_18 = !_12;
RET = _15;
_21 = '\u{ac006}';
_15.1 = RET.1;
_4 = [_20,_20,_17];
_12 = _21 as isize;
RET = _6;
_14 = core::ptr::addr_of_mut!((*_14));
_6 = RET;
_16.0 = 12735038478304341846165346128840718805_i128 >> _6.0;
_23 = _19 as f32;
RET = (_10, _8);
RET = _6;
_26 = [_17,_20,_20];
_2 = _9;
_4 = _3;
_5 = _8;
_18 = _12 >> _9;
_26 = _4;
_15.1 = !_7.1;
RET.1 = _16.1 as u64;
_16.1 = 248_i16;
_5 = !_11;
_16.1 = !(-15889_i16);
RET.1 = 1_usize as u64;
_8 = RET.1;
Goto(bb3)
}
bb3 = {
Call(_28 = dump_var(9_usize, 21_usize, Move(_21), 10_usize, Move(_10), 2_usize, Move(_2), 20_usize, Move(_20)), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
Call(_28 = dump_var(9_usize, 5_usize, Move(_5), 16_usize, Move(_16), 8_usize, Move(_8), 9_usize, Move(_9)), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
Call(_28 = dump_var(9_usize, 15_usize, Move(_15), 3_usize, Move(_3), 29_usize, _29, 29_usize, _29), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn10(mut _1: (u32, u64),mut _2: u32) -> u32 {
mir! {
type RET = u32;
let _3: ();
let _4: ();
{
_1.0 = _2;
_1.0 = _2;
RET = _2 << _2;
_1.0 = (-135779852178120894004038594635840345939_i128) as u32;
_2 = !RET;
_1.1 = !1168692844423061466_u64;
_1.1 = 80_i8 as u64;
RET = _2;
_1.1 = 14460262263602131004_u64;
_2 = _1.0 ^ RET;
_2 = RET >> RET;
RET = '\u{f4b48}' as u32;
_1.1 = !10198701077694421333_u64;
_1 = (_2, 1612259597409761974_u64);
RET = _1.0;
RET = _2 + _1.0;
Goto(bb1)
}
bb1 = {
Call(_3 = dump_var(10_usize, 2_usize, Move(_2), 4_usize, _4, 4_usize, _4, 4_usize, _4), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn11(mut _1: (u32, u64),mut _2: isize,mut _3: u32,mut _4: isize,mut _5: u64,mut _6: u32,mut _7: isize,mut _8: isize,mut _9: u64,mut _10: isize,mut _11: isize,mut _12: u64,mut _13: u32,mut _14: isize,mut _15: (u32, u64)) -> isize {
mir! {
type RET = isize;
let _16: ([isize; 3],);
let _17: ([isize; 3],);
let _18: i16;
let _19: Adt52;
let _20: ();
let _21: ();
{
_4 = '\u{82364}' as isize;
RET = _2 - _7;
_10 = RET & _2;
_1 = _15;
_6 = !_15.0;
_8 = _2 >> RET;
_1.0 = _13 * _15.0;
_11 = RET;
RET = -_10;
_8 = _11 + RET;
_6 = !_3;
_7 = -_8;
RET = _7 | _14;
_13 = _5 as u32;
_16.0 = [_7,_10,_14];
_13 = (-20703_i16) as u32;
RET = _2 - _8;
_1.1 = !_12;
_17.0 = [RET,_7,_2];
_10 = (-23259_i16) as isize;
_17 = (_16.0,);
_4 = RET * _2;
Goto(bb1)
}
bb1 = {
Call(_20 = dump_var(11_usize, 14_usize, Move(_14), 1_usize, Move(_1), 4_usize, Move(_4), 6_usize, Move(_6)), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Call(_20 = dump_var(11_usize, 12_usize, Move(_12), 15_usize, Move(_15), 2_usize, Move(_2), 5_usize, Move(_5)), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn12(mut _1: i8,mut _2: char,mut _3: isize,mut _4: bool,mut _5: (u32, u64),mut _6: [isize; 3],mut _7: (char, [isize; 3]),mut _8: (u32, u64),mut _9: f64) -> *mut *const u32 {
mir! {
type RET = *mut *const u32;
let _10: *mut i128;
let _11: f64;
let _12: u64;
let _13: f64;
let _14: (char, [isize; 3]);
let _15: *mut *mut *mut i128;
let _16: u64;
let _17: i8;
let _18: Adt41;
let _19: (i128, i16);
let _20: isize;
let _21: bool;
let _22: (u32, u64);
let _23: u16;
let _24: Adt53;
let _25: u128;
let _26: [i16; 1];
let _27: ([isize; 3],);
let _28: i32;
let _29: *const i128;
let _30: isize;
let _31: u64;
let _32: *const [i128; 1];
let _33: [i64; 3];
let _34: (i128, i16);
let _35: *const i128;
let _36: i32;
let _37: isize;
let _38: (u32, u64);
let _39: *const [i128; 1];
let _40: *mut i128;
let _41: [isize; 3];
let _42: bool;
let _43: [isize; 3];
let _44: f64;
let _45: [usize; 3];
let _46: Adt43;
let _47: f32;
let _48: Adt50;
let _49: i8;
let _50: &'static *const [i128; 1];
let _51: isize;
let _52: f32;
let _53: bool;
let _54: u32;
let _55: i16;
let _56: Adt55;
let _57: [bool; 3];
let _58: [i128; 2];
let _59: *const [i128; 1];
let _60: i8;
let _61: u64;
let _62: *const u32;
let _63: isize;
let _64: i64;
let _65: Adt53;
let _66: [i128; 2];
let _67: *mut *const u32;
let _68: [i128; 2];
let _69: ();
let _70: ();
{
_8.0 = _5.0 >> _1;
_7 = (_2, _6);
_7 = (_2, _6);
_5 = _8;
_6 = [_3,_3,_3];
_7 = (_2, _6);
_4 = !true;
_3 = _5.1 as isize;
_11 = _9;
_7 = (_2, _6);
_3 = !9223372036854775807_isize;
_8.0 = _5.0;
_6 = _7.1;
_6 = [_3,_3,_3];
_7 = (_2, _6);
_7.1 = _6;
_7.1 = [_3,_3,_3];
_12 = _8.1;
_5.0 = 27344_u16 as u32;
Call(_7.1 = fn13(_8.0, _8, _8, _2, _8, _8, _1, _3, _8.0, _8.0), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_4 = _8.0 < _8.0;
_7.1 = _6;
_12 = _8.1;
_7.0 = _2;
_13 = -_11;
_2 = _7.0;
_4 = false;
_14.0 = _7.0;
_7 = (_14.0, _6);
_16 = !_8.1;
_14.0 = _7.0;
_11 = -_9;
_14.0 = _2;
_14.1 = [_3,_3,_3];
_14.1 = _7.1;
_13 = _1 as f64;
_14.0 = _2;
Goto(bb2)
}
bb2 = {
_5.0 = _4 as u32;
_14 = _7;
_14.0 = _7.0;
_5.1 = _8.0 as u64;
_9 = _5.1 as f64;
_8 = (_5.0, _5.1);
_17 = !_1;
_8.0 = !_5.0;
_8.1 = _5.1 << _17;
_14.1 = [_3,_3,_3];
_5.1 = 223598392_i32 as u64;
_19.0 = _8.1 as i128;
_16 = !_8.1;
_5 = (_8.0, _16);
_19.0 = (-75521045057382905555367006391540098354_i128) * (-51721958110507901472831055481419860540_i128);
_2 = _7.0;
_18 = Adt41::Variant1 { fld0: _7,fld1: 18589_u16,fld2: _19.0 };
_19 = (Field::<i128>(Variant(_18, 1), 2), (-16375_i16));
place!(Field::<(char, [isize; 3])>(Variant(_18, 1), 0)).0 = _2;
_7.1 = [_3,_3,_3];
match _19.1 {
0 => bb1,
1 => bb3,
340282366920938463463374607431768195081 => bb5,
_ => bb4
}
}
bb3 = {
_4 = _8.0 < _8.0;
_7.1 = _6;
_12 = _8.1;
_7.0 = _2;
_13 = -_11;
_2 = _7.0;
_4 = false;
_14.0 = _7.0;
_7 = (_14.0, _6);
_16 = !_8.1;
_14.0 = _7.0;
_11 = -_9;
_14.0 = _2;
_14.1 = [_3,_3,_3];
_14.1 = _7.1;
_13 = _1 as f64;
_14.0 = _2;
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
_7.1 = Field::<(char, [isize; 3])>(Variant(_18, 1), 0).1;
_10 = core::ptr::addr_of_mut!(place!(Field::<i128>(Variant(_18, 1), 2)));
_14.0 = _2;
_2 = _7.0;
_11 = -_9;
_14.0 = _7.0;
_22 = (_8.0, _5.1);
_14 = (Field::<(char, [isize; 3])>(Variant(_18, 1), 0).0, _7.1);
_18 = Adt41::Variant1 { fld0: _14,fld1: 14202_u16,fld2: _19.0 };
_2 = _14.0;
_2 = _14.0;
_5 = (_8.0, _16);
_19.1 = -26158_i16;
_22.0 = !_8.0;
place!(Field::<(char, [isize; 3])>(Variant(_18, 1), 0)).1 = [_3,_3,_3];
_23 = 141004507676043371121222966042671509398_u128 as u16;
_14.0 = _7.0;
_2 = Field::<(char, [isize; 3])>(Variant(_18, 1), 0).0;
place!(Field::<(char, [isize; 3])>(Variant(_18, 1), 0)) = (_14.0, _6);
_20 = _3 + _3;
_22 = _5;
_6 = [_20,_3,_20];
_18 = Adt41::Variant1 { fld0: _14,fld1: _23,fld2: _19.0 };
Goto(bb6)
}
bb6 = {
_8 = (_22.0, _5.1);
place!(Field::<(char, [isize; 3])>(Variant(_18, 1), 0)).0 = _7.0;
_11 = _13 * _13;
_14.1 = [_20,_20,_20];
place!(Field::<(char, [isize; 3])>(Variant(_18, 1), 0)) = (_2, _6);
_3 = Field::<i128>(Variant(_18, 1), 2) as isize;
_22.0 = !_5.0;
_6 = [_20,_20,_20];
_8.0 = _5.0 + _22.0;
_22.0 = !_8.0;
_5 = (_22.0, _16);
_8.1 = _5.0 as u64;
_8 = (_5.0, _16);
_10 = core::ptr::addr_of_mut!(place!(Field::<i128>(Variant(_18, 1), 2)));
Goto(bb7)
}
bb7 = {
_7.1 = _6;
_8.1 = _11 as u64;
_25 = 247485662978659288820606022020653076400_u128 * 76418150722322224533682861569620245088_u128;
place!(Field::<(char, [isize; 3])>(Variant(_18, 1), 0)).0 = _7.0;
_5.0 = _22.0;
_26 = [_19.1];
_4 = !true;
_7.0 = _14.0;
_22 = _5;
_8 = (_5.0, _16);
_21 = _4 ^ _4;
_5 = (_8.0, _12);
_21 = !_4;
place!(Field::<i128>(Variant(_18, 1), 2)) = _19.0;
_7.0 = Field::<(char, [isize; 3])>(Variant(_18, 1), 0).0;
_23 = Field::<u16>(Variant(_18, 1), 1);
_4 = _21;
_5.1 = _22.1 + _16;
_29 = core::ptr::addr_of!(place!(Field::<i128>(Variant(_18, 1), 2)));
_7 = _14;
_8.0 = _8.1 as u32;
_1 = -_17;
_29 = core::ptr::addr_of!((*_29));
_4 = _21 | _21;
Call(_11 = fn18(_22, _5.1, _9, _8, _16, _5.1), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
SetDiscriminant(_18, 0);
_19.0 = 24240764033231493171033599284525232837_i128;
_5.0 = _11 as u32;
_29 = core::ptr::addr_of!(_19.0);
_14 = (_2, _7.1);
_5.1 = !_16;
_30 = _8.0 as isize;
_14.1 = [_30,_20,_30];
_18 = Adt41::Variant1 { fld0: _14,fld1: _23,fld2: (*_29) };
SetDiscriminant(_18, 1);
match (*_29) {
0 => bb9,
1 => bb10,
24240764033231493171033599284525232837 => bb12,
_ => bb11
}
}
bb9 = {
_4 = _8.0 < _8.0;
_7.1 = _6;
_12 = _8.1;
_7.0 = _2;
_13 = -_11;
_2 = _7.0;
_4 = false;
_14.0 = _7.0;
_7 = (_14.0, _6);
_16 = !_8.1;
_14.0 = _7.0;
_11 = -_9;
_14.0 = _2;
_14.1 = [_3,_3,_3];
_14.1 = _7.1;
_13 = _1 as f64;
_14.0 = _2;
Goto(bb2)
}
bb10 = {
_4 = _8.0 < _8.0;
_7.1 = _6;
_12 = _8.1;
_7.0 = _2;
_13 = -_11;
_2 = _7.0;
_4 = false;
_14.0 = _7.0;
_7 = (_14.0, _6);
_16 = !_8.1;
_14.0 = _7.0;
_11 = -_9;
_14.0 = _2;
_14.1 = [_3,_3,_3];
_14.1 = _7.1;
_13 = _1 as f64;
_14.0 = _2;
Goto(bb2)
}
bb11 = {
_5.0 = _4 as u32;
_14 = _7;
_14.0 = _7.0;
_5.1 = _8.0 as u64;
_9 = _5.1 as f64;
_8 = (_5.0, _5.1);
_17 = !_1;
_8.0 = !_5.0;
_8.1 = _5.1 << _17;
_14.1 = [_3,_3,_3];
_5.1 = 223598392_i32 as u64;
_19.0 = _8.1 as i128;
_16 = !_8.1;
_5 = (_8.0, _16);
_19.0 = (-75521045057382905555367006391540098354_i128) * (-51721958110507901472831055481419860540_i128);
_2 = _7.0;
_18 = Adt41::Variant1 { fld0: _7,fld1: 18589_u16,fld2: _19.0 };
_19 = (Field::<i128>(Variant(_18, 1), 2), (-16375_i16));
place!(Field::<(char, [isize; 3])>(Variant(_18, 1), 0)).0 = _2;
_7.1 = [_3,_3,_3];
match _19.1 {
0 => bb1,
1 => bb3,
340282366920938463463374607431768195081 => bb5,
_ => bb4
}
}
bb12 = {
_14.1 = [_30,_30,_30];
match (*_29) {
0 => bb5,
1 => bb13,
24240764033231493171033599284525232837 => bb15,
_ => bb14
}
}
bb13 = {
SetDiscriminant(_18, 0);
_19.0 = 24240764033231493171033599284525232837_i128;
_5.0 = _11 as u32;
_29 = core::ptr::addr_of!(_19.0);
_14 = (_2, _7.1);
_5.1 = !_16;
_30 = _8.0 as isize;
_14.1 = [_30,_20,_30];
_18 = Adt41::Variant1 { fld0: _14,fld1: _23,fld2: (*_29) };
SetDiscriminant(_18, 1);
match (*_29) {
0 => bb9,
1 => bb10,
24240764033231493171033599284525232837 => bb12,
_ => bb11
}
}
bb14 = {
_4 = _8.0 < _8.0;
_7.1 = _6;
_12 = _8.1;
_7.0 = _2;
_13 = -_11;
_2 = _7.0;
_4 = false;
_14.0 = _7.0;
_7 = (_14.0, _6);
_16 = !_8.1;
_14.0 = _7.0;
_11 = -_9;
_14.0 = _2;
_14.1 = [_3,_3,_3];
_14.1 = _7.1;
_13 = _1 as f64;
_14.0 = _2;
Goto(bb2)
}
bb15 = {
place!(Field::<u16>(Variant(_18, 1), 1)) = _23 + _23;
_6 = [_30,_30,_30];
_7.1 = _14.1;
_14.1 = [_30,_30,_30];
match _19.0 {
0 => bb13,
1 => bb11,
2 => bb10,
3 => bb8,
4 => bb12,
5 => bb16,
24240764033231493171033599284525232837 => bb18,
_ => bb17
}
}
bb16 = {
_4 = _8.0 < _8.0;
_7.1 = _6;
_12 = _8.1;
_7.0 = _2;
_13 = -_11;
_2 = _7.0;
_4 = false;
_14.0 = _7.0;
_7 = (_14.0, _6);
_16 = !_8.1;
_14.0 = _7.0;
_11 = -_9;
_14.0 = _2;
_14.1 = [_3,_3,_3];
_14.1 = _7.1;
_13 = _1 as f64;
_14.0 = _2;
Goto(bb2)
}
bb17 = {
SetDiscriminant(_18, 0);
_19.0 = 24240764033231493171033599284525232837_i128;
_5.0 = _11 as u32;
_29 = core::ptr::addr_of!(_19.0);
_14 = (_2, _7.1);
_5.1 = !_16;
_30 = _8.0 as isize;
_14.1 = [_30,_20,_30];
_18 = Adt41::Variant1 { fld0: _14,fld1: _23,fld2: (*_29) };
SetDiscriminant(_18, 1);
match (*_29) {
0 => bb9,
1 => bb10,
24240764033231493171033599284525232837 => bb12,
_ => bb11
}
}
bb18 = {
_30 = !_3;
_11 = _5.1 as f64;
_27.0 = [_30,_3,_20];
_11 = -_13;
_34 = _19;
_1 = _17 | _17;
_20 = _3 & _3;
_36 = 742688474_i32 ^ (-2115857984_i32);
_38.0 = _8.0;
_34.1 = !_19.1;
_40 = _10;
_38.0 = _8.0 & _8.0;
_22.0 = _38.0;
_13 = 7_usize as f64;
_20 = _3 >> _1;
_28 = _19.0 as i32;
_8.1 = !_5.1;
_21 = _4;
_5.0 = !_38.0;
Call(_37 = fn19(_6, _36, _7.1, _8.0, _16, _5.1, _7, _8, _8.0, _28, _16, _5.0, _22.1), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
_7 = (_2, _14.1);
_34 = ((*_29), _19.1);
_28 = _9 as i32;
_5 = (_38.0, _8.1);
_7.0 = _2;
_5 = (_38.0, _16);
_33 = [2892494966038998252_i64,5167293967700547519_i64,(-5507697536189979389_i64)];
_28 = _21 as i32;
_34.1 = Field::<u16>(Variant(_18, 1), 1) as i16;
_20 = _34.1 as isize;
_3 = !_20;
_41 = [_3,_37,_30];
_18 = Adt41::Variant1 { fld0: _14,fld1: _23,fld2: (*_29) };
_27.0 = [_30,_37,_30];
Goto(bb20)
}
bb20 = {
place!(Field::<(char, [isize; 3])>(Variant(_18, 1), 0)).1 = [_37,_3,_20];
place!(Field::<(char, [isize; 3])>(Variant(_18, 1), 0)) = (_7.0, _14.1);
_9 = _28 as f64;
_10 = _40;
_35 = _29;
_30 = _11 as isize;
SetDiscriminant(_18, 0);
_38 = (_22.0, _8.1);
_35 = _29;
_7.1 = [_30,_30,_30];
_38 = (_8.0, _5.1);
_22.0 = !_5.0;
_14.0 = _7.0;
_45 = [3_usize,0_usize,1_usize];
_19.0 = !_34.0;
_3 = _30 ^ _30;
_5.0 = _22.0;
place!(Field::<f32>(Variant(_18, 0), 1)) = (*_29) as f32;
_38 = (_8.0, _5.1);
_19.1 = _34.1;
_45 = [11680433023671247276_usize,16775366047424012913_usize,5_usize];
_40 = _10;
Goto(bb21)
}
bb21 = {
_10 = _40;
_6 = [_30,_3,_3];
_45 = [0_usize,4408586470725369333_usize,2_usize];
_22.0 = !_38.0;
_33 = [7913407647664206411_i64,(-3386494830129820512_i64),(-6553785272789270608_i64)];
_21 = !_4;
_8.1 = _22.1 | _22.1;
_2 = _7.0;
_43 = [_3,_30,_3];
_19 = (_34.0, _34.1);
_26 = [_19.1];
_3 = !_37;
_19.1 = _34.1 >> _8.0;
_35 = _29;
_29 = _35;
_23 = _9 as u16;
_49 = (-9086808033334290252_i64) as i8;
_42 = _4;
_9 = _11;
_17 = Field::<f32>(Variant(_18, 0), 1) as i8;
_25 = 123028162329246299393875269118813133564_u128 << _38.0;
_7 = _14;
Call(place!(Field::<u16>(Variant(_18, 0), 0)) = core::intrinsics::transmute(_19.1), ReturnTo(bb22), UnwindUnreachable())
}
bb22 = {
_33 = [7317337714340483589_i64,(-4908252325261845331_i64),(-3887735288438360169_i64)];
_4 = _21 | _42;
Goto(bb23)
}
bb23 = {
_41 = [_30,_30,_30];
_19.1 = _9 as i16;
_30 = _3 ^ _20;
_45 = [3647072766086956601_usize,7_usize,1_usize];
_19.0 = _7.0 as i128;
_27 = (_7.1,);
_34 = (_19.0, _19.1);
_43 = _6;
_8.1 = !_16;
_9 = _11;
_16 = _5.1;
_40 = _10;
_27 = (_7.1,);
_23 = !Field::<u16>(Variant(_18, 0), 0);
_20 = _30 ^ _3;
_7.0 = _2;
_27.0 = [_20,_20,_20];
Goto(bb24)
}
bb24 = {
_30 = _2 as isize;
_9 = -_11;
_5 = _8;
_23 = _11 as u16;
_7 = (_2, _43);
_47 = Field::<f32>(Variant(_18, 0), 1) - Field::<f32>(Variant(_18, 0), 1);
_35 = _29;
_12 = !_5.1;
_36 = _28 & _28;
_20 = _3;
_45 = [12980218649934966088_usize,5_usize,16905357534008724871_usize];
_7.1 = [_3,_20,_3];
_26 = [_19.1];
_5.1 = _38.1 | _8.1;
_23 = Field::<u16>(Variant(_18, 0), 0);
_40 = core::ptr::addr_of_mut!(_34.0);
_2 = _7.0;
_10 = core::ptr::addr_of_mut!((*_40));
_44 = _9 * _9;
_22.1 = 6410393028228773887_i64 as u64;
_54 = 133_u8 as u32;
_22 = (_38.0, _12);
_57 = [_4,_21,_42];
_52 = _25 as f32;
Goto(bb25)
}
bb25 = {
place!(Field::<u16>(Variant(_18, 0), 0)) = _1 as u16;
_55 = _19.1 >> _22.1;
_6 = [_37,_37,_30];
Goto(bb26)
}
bb26 = {
_12 = !_22.1;
_51 = _7.0 as isize;
_19 = ((*_10), _55);
_19 = _34;
_30 = _3 - _3;
_8.1 = _22.1;
_8 = (_5.0, _12);
_8.1 = _5.1;
_7.0 = _14.0;
_30 = _1 as isize;
Goto(bb27)
}
bb27 = {
_3 = _52 as isize;
_22.1 = _5.1;
_60 = _1 >> _36;
_30 = -_3;
_7 = _14;
_60 = -_1;
_11 = _9;
_33 = [9124461539946502702_i64,(-6544499297030001865_i64),3876722202342308901_i64];
_50 = &_39;
_43 = [_30,_20,_3];
Goto(bb28)
}
bb28 = {
_62 = core::ptr::addr_of!(_22.0);
_16 = _23 as u64;
_5.1 = _22.1 ^ _22.1;
_66 = [(*_40),(*_40)];
_53 = !_21;
_66 = [(*_10),_34.0];
_16 = 104_u8 as u64;
_4 = _21;
RET = core::ptr::addr_of_mut!(_62);
_16 = _5.1;
Goto(bb29)
}
bb29 = {
Call(_69 = dump_var(12_usize, 7_usize, Move(_7), 6_usize, Move(_6), 42_usize, Move(_42), 34_usize, Move(_34)), ReturnTo(bb30), UnwindUnreachable())
}
bb30 = {
Call(_69 = dump_var(12_usize, 51_usize, Move(_51), 3_usize, Move(_3), 16_usize, Move(_16), 33_usize, Move(_33)), ReturnTo(bb31), UnwindUnreachable())
}
bb31 = {
Call(_69 = dump_var(12_usize, 22_usize, Move(_22), 28_usize, Move(_28), 49_usize, Move(_49), 2_usize, Move(_2)), ReturnTo(bb32), UnwindUnreachable())
}
bb32 = {
Call(_69 = dump_var(12_usize, 30_usize, Move(_30), 14_usize, Move(_14), 57_usize, Move(_57), 37_usize, Move(_37)), ReturnTo(bb33), UnwindUnreachable())
}
bb33 = {
Call(_69 = dump_var(12_usize, 23_usize, Move(_23), 26_usize, Move(_26), 55_usize, Move(_55), 70_usize, _70), ReturnTo(bb34), UnwindUnreachable())
}
bb34 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn13(mut _1: u32,mut _2: (u32, u64),mut _3: (u32, u64),mut _4: char,mut _5: (u32, u64),mut _6: (u32, u64),mut _7: i8,mut _8: isize,mut _9: u32,mut _10: u32) -> [isize; 3] {
mir! {
type RET = [isize; 3];
let _11: isize;
let _12: f64;
let _13: isize;
let _14: usize;
let _15: usize;
let _16: char;
let _17: (char, [isize; 3]);
let _18: [i128; 2];
let _19: char;
let _20: bool;
let _21: [i16; 1];
let _22: i16;
let _23: isize;
let _24: Adt49;
let _25: i16;
let _26: i64;
let _27: Adt53;
let _28: [isize; 3];
let _29: isize;
let _30: i128;
let _31: (i128, i16);
let _32: (*mut i128,);
let _33: ([isize; 3],);
let _34: f64;
let _35: isize;
let _36: u32;
let _37: [bool; 3];
let _38: Adt52;
let _39: ();
let _40: ();
{
_9 = _6.0 | _6.0;
_5.0 = !_9;
_3.1 = (-8024899364495566491_i64) as u64;
_3 = (_9, _6.1);
Call(_4 = fn14(_6.0, _3.0, _9, _6, _3, _3, _3.0, _2.0, _1, _10, _2.0, _3, _2, _1), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_4 = '\u{44c33}';
_1 = _5.0 >> _7;
_5 = _3;
_10 = (-50389792183466699981732815881288764732_i128) as u32;
_5 = (_1, _6.1);
RET = [_8,_8,_8];
_1 = _9;
_1 = _9;
_11 = _4 as isize;
_8 = _11;
_11 = -_8;
_2.0 = _9;
_11 = !_8;
_4 = '\u{598c5}';
RET = [_11,_8,_11];
RET = [_8,_8,_8];
_5.1 = !_3.1;
_9 = !_5.0;
_5 = (_10, _6.1);
_6 = _2;
_3.1 = _6.1 * _5.1;
_4 = '\u{e42a4}';
Goto(bb2)
}
bb2 = {
_14 = !5414955588535706989_usize;
RET = [_8,_11,_8];
_13 = _8 & _8;
_12 = _11 as f64;
_4 = '\u{b03b6}';
_14 = 486570041418095069_usize - 12635952766650268576_usize;
_2.1 = _5.1 | _5.1;
_15 = _14;
_2 = (_6.0, _3.1);
_10 = _6.0;
_14 = _15 << _3.0;
_12 = 42413_u16 as f64;
_5.1 = _6.1 & _6.1;
_4 = '\u{b1097}';
Goto(bb3)
}
bb3 = {
_2.1 = _3.1;
_3.0 = !_1;
_6 = (_2.0, _2.1);
_6.1 = !_5.1;
_2.0 = _3.0 | _9;
_3 = _2;
_4 = '\u{7e70d}';
_6.0 = !_3.0;
_14 = !_15;
_16 = _4;
_6.1 = _2.1;
_17 = (_4, RET);
_4 = _16;
_17.0 = _4;
_3.0 = _2.1 as u32;
_5 = (_9, _2.1);
_10 = true as u32;
_6.0 = !_2.0;
_6.1 = _3.1;
_17 = (_4, RET);
_5.0 = _2.0 | _2.0;
_15 = !_14;
_4 = _16;
_18 = [131586719383008246356619286771011522899_i128,134829457912558490211784219991196532120_i128];
_17.1 = [_11,_13,_11];
_14 = _15 << _1;
Goto(bb4)
}
bb4 = {
_2.1 = _3.1 >> _6.0;
_8 = (-27488_i16) as isize;
_6.0 = _5.0;
_18 = [46867525823383407453070671663178672831_i128,154541686178587181319688268541591957606_i128];
_3 = (_5.0, _2.1);
_11 = -_8;
_2.0 = !_1;
_7 = _3.0 as i8;
_16 = _17.0;
_19 = _17.0;
_13 = !_11;
_1 = 54394_u16 as u32;
_17.1 = [_11,_11,_11];
Goto(bb5)
}
bb5 = {
_11 = _8 & _13;
Goto(bb6)
}
bb6 = {
_4 = _17.0;
_2.1 = (-144908416267306562218294313969092128554_i128) as u64;
_12 = _7 as f64;
_5.0 = _9;
_19 = _17.0;
_2 = _3;
_12 = 9353_u16 as f64;
_16 = _4;
_3.0 = _9;
_21 = [23180_i16];
_16 = _17.0;
_12 = _3.1 as f64;
RET = [_11,_13,_13];
_3.0 = 1132109102_i32 as u32;
_23 = !_11;
RET = [_8,_13,_13];
_16 = _4;
_22 = !(-2174_i16);
_15 = _6.0 as usize;
_6.1 = _3.1;
_5.0 = _2.0 << _7;
_2.0 = !_6.0;
_15 = !_14;
_20 = !true;
_2 = (_5.0, _6.1);
Call(_22 = core::intrinsics::bswap((-1916_i16)), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
_23 = _13;
_14 = !_15;
RET = [_11,_11,_13];
_15 = _14;
_6.0 = _2.0;
Goto(bb8)
}
bb8 = {
_21 = [_22];
_5.0 = _14 as u32;
_10 = _5.0 + _6.0;
_3.0 = _2.0;
_6.1 = _3.1;
_22 = -11668_i16;
_22 = 4800_i16;
match _22 {
0 => bb3,
4800 => bb10,
_ => bb9
}
}
bb9 = {
_11 = _8 & _13;
Goto(bb6)
}
bb10 = {
_6 = _5;
_2.1 = (-6322183696821290956_i64) as u64;
_32.0 = core::ptr::addr_of_mut!(_30);
_31.1 = _7 as i16;
_25 = _31.1 * _31.1;
_23 = _11 ^ _8;
_14 = (-9035969132373435976_i64) as usize;
_2.0 = _3.0;
match _22 {
0 => bb11,
1 => bb12,
4800 => bb14,
_ => bb13
}
}
bb11 = {
_4 = _17.0;
_2.1 = (-144908416267306562218294313969092128554_i128) as u64;
_12 = _7 as f64;
_5.0 = _9;
_19 = _17.0;
_2 = _3;
_12 = 9353_u16 as f64;
_16 = _4;
_3.0 = _9;
_21 = [23180_i16];
_16 = _17.0;
_12 = _3.1 as f64;
RET = [_11,_13,_13];
_3.0 = 1132109102_i32 as u32;
_23 = !_11;
RET = [_8,_13,_13];
_16 = _4;
_22 = !(-2174_i16);
_15 = _6.0 as usize;
_6.1 = _3.1;
_5.0 = _2.0 << _7;
_2.0 = !_6.0;
_15 = !_14;
_20 = !true;
_2 = (_5.0, _6.1);
Call(_22 = core::intrinsics::bswap((-1916_i16)), ReturnTo(bb7), UnwindUnreachable())
}
bb12 = {
_21 = [_22];
_5.0 = _14 as u32;
_10 = _5.0 + _6.0;
_3.0 = _2.0;
_6.1 = _3.1;
_22 = -11668_i16;
_22 = 4800_i16;
match _22 {
0 => bb3,
4800 => bb10,
_ => bb9
}
}
bb13 = {
_23 = _13;
_14 = !_15;
RET = [_11,_11,_13];
_15 = _14;
_6.0 = _2.0;
Goto(bb8)
}
bb14 = {
_31 = ((-101686186089760028808147869049077927097_i128), _25);
_8 = _23;
_7 = 75_i8 * (-105_i8);
_7 = _12 as i8;
_5.0 = _7 as u32;
_17.1 = RET;
_21 = [_31.1];
_8 = _23 & _23;
_32.0 = core::ptr::addr_of_mut!(_30);
_4 = _17.0;
_28 = _17.1;
_19 = _4;
_17.1 = _28;
_31 = (50414009528881047150422352225052180952_i128, _25);
_16 = _4;
_33 = (RET,);
_25 = _31.1 >> _31.0;
_16 = _4;
Goto(bb15)
}
bb15 = {
Call(_39 = dump_var(13_usize, 5_usize, Move(_5), 21_usize, Move(_21), 15_usize, Move(_15), 16_usize, Move(_16)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_39 = dump_var(13_usize, 17_usize, Move(_17), 13_usize, Move(_13), 18_usize, Move(_18), 8_usize, Move(_8)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_39 = dump_var(13_usize, 33_usize, Move(_33), 25_usize, Move(_25), 1_usize, Move(_1), 19_usize, Move(_19)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_39 = dump_var(13_usize, 10_usize, Move(_10), 40_usize, _40, 40_usize, _40, 40_usize, _40), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn14(mut _1: u32,mut _2: u32,mut _3: u32,mut _4: (u32, u64),mut _5: (u32, u64),mut _6: (u32, u64),mut _7: u32,mut _8: u32,mut _9: u32,mut _10: u32,mut _11: u32,mut _12: (u32, u64),mut _13: (u32, u64),mut _14: u32) -> char {
mir! {
type RET = char;
let _15: u128;
let _16: i8;
let _17: f64;
let _18: u64;
let _19: Adt50;
let _20: *mut *mut *mut i128;
let _21: Adt56;
let _22: isize;
let _23: i64;
let _24: [i128; 1];
let _25: Adt42;
let _26: isize;
let _27: *const [i128; 1];
let _28: &'static *const [i128; 1];
let _29: usize;
let _30: (i128, i16);
let _31: (u32, u64);
let _32: isize;
let _33: [i16; 1];
let _34: bool;
let _35: Adt53;
let _36: Adt42;
let _37: Adt43;
let _38: [i16; 1];
let _39: i8;
let _40: [isize; 3];
let _41: u64;
let _42: i64;
let _43: [i128; 1];
let _44: Adt41;
let _45: f32;
let _46: i16;
let _47: isize;
let _48: ();
let _49: ();
{
RET = '\u{98596}';
_6.1 = !_13.1;
_12.0 = 206307794339379533_usize as u32;
_4 = (_5.0, _13.1);
_11 = !_7;
_3 = !_6.0;
_3 = _6.0 + _1;
_7 = false as u32;
_1 = _14 & _13.0;
_10 = (-1629605786_i32) as u32;
_4 = _5;
RET = '\u{268a4}';
_13.1 = _5.1 >> _5.0;
_9 = !_2;
_4 = (_5.0, _13.1);
_4 = _13;
_6.0 = !_10;
Goto(bb1)
}
bb1 = {
_5.1 = !_13.1;
_5.0 = _9;
_4.1 = !_5.1;
_18 = _5.1;
_5.0 = _1;
_16 = 119_i8 & 109_i8;
_12 = (_13.0, _18);
_13.1 = !_18;
_7 = _12.0 + _13.0;
_18 = _4.1 + _5.1;
_6.1 = _12.1;
_12.0 = RET as u32;
Goto(bb2)
}
bb2 = {
_24 = [55511548237453544943374361856594615903_i128];
_12.1 = !_13.1;
_5.0 = _3;
_17 = 9223372036854775807_isize as f64;
_11 = !_1;
_6 = _5;
_1 = _7;
_18 = _6.1 * _13.1;
_14 = !_8;
_12.0 = _5.0 * _3;
_4 = _5;
_5 = _12;
_8 = _14 + _5.0;
_13.0 = _4.0 * _8;
_12.1 = _5.1 * _5.1;
_23 = _16 as i64;
_6 = (_12.0, _18);
_13.0 = !_4.0;
_7 = _3;
_26 = -9223372036854775807_isize;
_25.fld0 = !40197033806408984766103777531025803203_u128;
_17 = 58748_u16 as f64;
_15 = (-154259575184076662040889697717023593524_i128) as u128;
_4.1 = _12.1 << _6.1;
_5.0 = RET as u32;
_12.0 = _23 as u32;
_3 = _12.1 as u32;
Goto(bb3)
}
bb3 = {
RET = '\u{f0f96}';
_22 = _26;
_6.0 = _7 * _8;
_13.0 = _8 + _8;
_8 = !_7;
_21 = Adt56::Variant0 { fld0: 10078_i16 };
_4.0 = 11_u8 as u32;
_8 = _16 as u32;
place!(Field::<i16>(Variant(_21, 0), 0)) = (-15565_i16);
_11 = 784918714_i32 as u32;
_4 = (_6.0, _18);
_10 = _1;
_13.1 = _6.1;
match Field::<i16>(Variant(_21, 0), 0) {
0 => bb4,
1 => bb5,
340282366920938463463374607431768195891 => bb7,
_ => bb6
}
}
bb4 = {
_24 = [55511548237453544943374361856594615903_i128];
_12.1 = !_13.1;
_5.0 = _3;
_17 = 9223372036854775807_isize as f64;
_11 = !_1;
_6 = _5;
_1 = _7;
_18 = _6.1 * _13.1;
_14 = !_8;
_12.0 = _5.0 * _3;
_4 = _5;
_5 = _12;
_8 = _14 + _5.0;
_13.0 = _4.0 * _8;
_12.1 = _5.1 * _5.1;
_23 = _16 as i64;
_6 = (_12.0, _18);
_13.0 = !_4.0;
_7 = _3;
_26 = -9223372036854775807_isize;
_25.fld0 = !40197033806408984766103777531025803203_u128;
_17 = 58748_u16 as f64;
_15 = (-154259575184076662040889697717023593524_i128) as u128;
_4.1 = _12.1 << _6.1;
_5.0 = RET as u32;
_12.0 = _23 as u32;
_3 = _12.1 as u32;
Goto(bb3)
}
bb5 = {
_5.1 = !_13.1;
_5.0 = _9;
_4.1 = !_5.1;
_18 = _5.1;
_5.0 = _1;
_16 = 119_i8 & 109_i8;
_12 = (_13.0, _18);
_13.1 = !_18;
_7 = _12.0 + _13.0;
_18 = _4.1 + _5.1;
_6.1 = _12.1;
_12.0 = RET as u32;
Goto(bb2)
}
bb6 = {
Return()
}
bb7 = {
RET = '\u{f47e0}';
_1 = !_6.0;
_30 = (46002271920414982851534662436831389164_i128, Field::<i16>(Variant(_21, 0), 0));
_4.1 = !_12.1;
_31.0 = _3 >> _4.0;
_16 = 9_i8 - (-110_i8);
_28 = &_27;
_5.0 = !_14;
_6 = _13;
_27 = core::ptr::addr_of!(_24);
_30.1 = Field::<i16>(Variant(_21, 0), 0) * Field::<i16>(Variant(_21, 0), 0);
SetDiscriminant(_21, 0);
_4.1 = !_6.1;
_25.fld0 = 0_usize as u128;
_5.0 = (-1454899779_i32) as u32;
_9 = !_7;
_12 = (_13.0, _18);
_13 = (_4.0, _12.1);
_8 = !_3;
Call(_26 = fn15(_12.1, _18, _4.0, _2, _4.1), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
_1 = _12.0 & _12.0;
_31.1 = _13.1 << _4.1;
_26 = _22;
_8 = _30.0 as u32;
_18 = _16 as u64;
_30.0 = 146797308229678472503968014333915748425_i128 << _6.0;
_13 = (_6.0, _31.1);
_30.0 = (-146603606759005006511009456637352571713_i128);
_10 = !_1;
_31.0 = _30.1 as u32;
_6.1 = _4.1 + _31.1;
_11 = _12.0 ^ _13.0;
_12.1 = !_4.1;
_4.0 = _10 & _11;
_33 = [_30.1];
_9 = _10 | _6.0;
_9 = _12.0 << _10;
_6.0 = _13.0;
_31 = (_11, _12.1);
_17 = _23 as f64;
_36.fld0 = _25.fld0;
_22 = -_26;
_33 = [_30.1];
_31 = (_10, _12.1);
match _30.0 {
193678760161933456952365150794415639743 => bb10,
_ => bb9
}
}
bb9 = {
Return()
}
bb10 = {
_29 = 9532245750644254693_usize;
_39 = _16 | _16;
_13 = _6;
_5.1 = 1662128010_i32 as u64;
_33 = [_30.1];
_40 = [_22,_26,_26];
Goto(bb11)
}
bb11 = {
_6.0 = !_9;
_21 = Adt56::Variant0 { fld0: _30.1 };
_30.1 = true as i16;
RET = '\u{ab5d9}';
_30.0 = 160517014122463337557762332896614179866_i128 & (-32190257474869946246062927959983301370_i128);
_31.0 = _7;
_4.1 = _31.1 << _6.0;
match _29 {
0 => bb1,
1 => bb12,
9532245750644254693 => bb14,
_ => bb13
}
}
bb12 = {
_29 = 9532245750644254693_usize;
_39 = _16 | _16;
_13 = _6;
_5.1 = 1662128010_i32 as u64;
_33 = [_30.1];
_40 = [_22,_26,_26];
Goto(bb11)
}
bb13 = {
RET = '\u{f0f96}';
_22 = _26;
_6.0 = _7 * _8;
_13.0 = _8 + _8;
_8 = !_7;
_21 = Adt56::Variant0 { fld0: 10078_i16 };
_4.0 = 11_u8 as u32;
_8 = _16 as u32;
place!(Field::<i16>(Variant(_21, 0), 0)) = (-15565_i16);
_11 = 784918714_i32 as u32;
_4 = (_6.0, _18);
_10 = _1;
_13.1 = _6.1;
match Field::<i16>(Variant(_21, 0), 0) {
0 => bb4,
1 => bb5,
340282366920938463463374607431768195891 => bb7,
_ => bb6
}
}
bb14 = {
_3 = _4.0 + _1;
_3 = _12.0;
_32 = _26 & _26;
_31.0 = !_4.0;
_25.fld0 = _36.fld0 & _15;
SetDiscriminant(_21, 1);
_42 = -_23;
_26 = _32 ^ _32;
_4.0 = _31.1 as u32;
_29 = !6_usize;
Goto(bb15)
}
bb15 = {
Call(_48 = dump_var(14_usize, 13_usize, Move(_13), 4_usize, Move(_4), 14_usize, Move(_14), 8_usize, Move(_8)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_48 = dump_var(14_usize, 32_usize, Move(_32), 42_usize, Move(_42), 33_usize, Move(_33), 30_usize, Move(_30)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_48 = dump_var(14_usize, 5_usize, Move(_5), 40_usize, Move(_40), 9_usize, Move(_9), 23_usize, Move(_23)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_48 = dump_var(14_usize, 10_usize, Move(_10), 12_usize, Move(_12), 49_usize, _49, 49_usize, _49), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn15(mut _1: u64,mut _2: u64,mut _3: u32,mut _4: u32,mut _5: u64) -> isize {
mir! {
type RET = isize;
let _6: [bool; 3];
let _7: i32;
let _8: i32;
let _9: isize;
let _10: ([isize; 3],);
let _11: [i128; 2];
let _12: char;
let _13: Adt51;
let _14: (char, [isize; 3]);
let _15: [i16; 1];
let _16: (u32, u64);
let _17: i128;
let _18: u64;
let _19: [i128; 2];
let _20: u64;
let _21: Adt55;
let _22: (u32, u64);
let _23: char;
let _24: Adt53;
let _25: f64;
let _26: ();
let _27: ();
{
RET = 9223372036854775807_isize - 9223372036854775807_isize;
_2 = _5 << _4;
RET = (-9223372036854775808_isize) + (-9223372036854775808_isize);
_3 = 5344949624805778541_i64 as u32;
_6 = [false,true,true];
RET = (-9223372036854775808_isize);
_5 = _2 - _2;
RET = (-68_isize) + 9223372036854775807_isize;
_4 = _3;
_6 = [false,true,false];
_7 = 31852_i16 as i32;
_2 = !_1;
_5 = _1;
_4 = 50422881378754797424331515005843196971_u128 as u32;
_3 = _4;
Goto(bb1)
}
bb1 = {
_3 = _4 << _2;
RET = (-9223372036854775808_isize);
RET = -(-24_isize);
_7 = 2046185568_i32;
_11 = [(-15507037057798228546276157578532736198_i128),(-32580666815832863473936130952034384625_i128)];
_9 = '\u{7cc19}' as isize;
_11 = [135580382513512289953072043137248102663_i128,(-29136439457769958850565020607847343620_i128)];
_8 = _1 as i32;
_10.0 = [RET,_9,_9];
_2 = _1;
_9 = -RET;
_7 = _8 >> _2;
_7 = 15461_u16 as i32;
RET = 58_u8 as isize;
_3 = '\u{290ba}' as u32;
_5 = _2;
_9 = -RET;
_11 = [51470553600481891874981807701923616048_i128,(-28703080286733495822474968183460918419_i128)];
_5 = !_2;
_11 = [(-161531578234726769557114010590665252830_i128),16864347019445872296319845331174860455_i128];
_8 = 5604900965827892585_i64 as i32;
_14.0 = '\u{2daab}';
_14.1 = [_9,RET,RET];
_12 = _14.0;
_4 = _7 as u32;
RET = -_9;
Goto(bb2)
}
bb2 = {
_5 = _1;
_14 = (_12, _10.0);
_11 = [158244450281673701722129681426881871986_i128,88277726006743450715364345179198758297_i128];
RET = _9 & _9;
RET = _9;
_14.1 = [RET,_9,_9];
_14 = (_12, _10.0);
Call(_4 = fn16(_2, _2, _5, _2, _5, _5, _1), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_10 = (_14.1,);
_3 = _4;
_10.0 = [_9,_9,RET];
_10 = (_14.1,);
_16.0 = _3 + _4;
_14 = (_12, _10.0);
_7 = 249_u8 as i32;
_4 = _3;
_5 = _1;
RET = -_9;
_14 = (_12, _10.0);
RET = _9;
_2 = _5;
_17 = _4 as i128;
Goto(bb4)
}
bb4 = {
_3 = _16.0 >> _17;
_20 = _5 & _2;
_16.0 = _3;
_12 = _14.0;
_19 = _11;
RET = 190_u8 as isize;
_11 = [_17,_17];
_15 = [20859_i16];
_10.0 = [RET,_9,_9];
_16 = (_3, _2);
_14 = (_12, _10.0);
_8 = -_7;
_21 = Adt55::Variant0 { fld0: 84399181949647529_i64 };
_5 = 175_u8 as u64;
Goto(bb5)
}
bb5 = {
_1 = !_20;
RET = -_9;
_19 = [_17,_17];
_2 = !_16.1;
_1 = _20 >> _2;
_2 = _1;
RET = -_9;
_16 = (_4, _1);
_10.0 = _14.1;
_10 = (_14.1,);
RET = !_9;
_22 = (_16.0, _1);
_17 = (-111856654732505620631726846283534067624_i128) & 68329515256005222321184203134337459227_i128;
_8 = _7 - _7;
_18 = _1;
_14.1 = _10.0;
_23 = _12;
_20 = _18;
_1 = (-27_i8) as u64;
place!(Field::<i64>(Variant(_21, 0), 0)) = 15013312330520874342_usize as i64;
_16 = (_3, _22.1);
_15 = [(-23998_i16)];
_18 = _20 * _22.1;
RET = _9 >> _3;
_12 = _14.0;
_21 = Adt55::Variant0 { fld0: 7854579325224383828_i64 };
_10.0 = _14.1;
RET = -_9;
_9 = -RET;
Goto(bb6)
}
bb6 = {
_6 = [false,false,false];
_14.0 = _12;
_19 = [_17,_17];
_1 = _2;
RET = _4 as isize;
_18 = _2;
place!(Field::<i64>(Variant(_21, 0), 0)) = 7804907231704575577_i64;
RET = -_9;
_23 = _12;
_23 = _12;
_5 = !_1;
_7 = -_8;
_19 = [_17,_17];
_14.0 = _23;
_22.1 = _16.1;
_22.1 = _16.1 * _18;
_22 = _16;
SetDiscriminant(_21, 1);
RET = _9 >> _16.0;
place!(Field::<bool>(Variant(_21, 1), 0)) = _16.0 == _4;
_22.1 = _5;
_12 = _23;
_16 = (_4, _2);
_16.0 = _3 | _22.0;
_20 = !_16.1;
place!(Field::<isize>(Variant(_21, 1), 2)) = !RET;
Goto(bb7)
}
bb7 = {
Call(_26 = dump_var(15_usize, 20_usize, Move(_20), 3_usize, Move(_3), 6_usize, Move(_6), 10_usize, Move(_10)), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
Call(_26 = dump_var(15_usize, 15_usize, Move(_15), 8_usize, Move(_8), 12_usize, Move(_12), 5_usize, Move(_5)), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
Call(_26 = dump_var(15_usize, 1_usize, Move(_1), 22_usize, Move(_22), 27_usize, _27, 27_usize, _27), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn16(mut _1: u64,mut _2: u64,mut _3: u64,mut _4: u64,mut _5: u64,mut _6: u64,mut _7: u64) -> u32 {
mir! {
type RET = u32;
let _8: &'static *const [i128; 1];
let _9: isize;
let _10: i128;
let _11: [i128; 2];
let _12: [i128; 1];
let _13: (*mut i128,);
let _14: u16;
let _15: f32;
let _16: [i16; 1];
let _17: Adt46;
let _18: u32;
let _19: (char, [isize; 3]);
let _20: isize;
let _21: [i16; 1];
let _22: &'static *const [i128; 1];
let _23: f64;
let _24: u16;
let _25: char;
let _26: *mut i128;
let _27: (i128, i16);
let _28: *mut u128;
let _29: [i16; 1];
let _30: isize;
let _31: (u32, u64);
let _32: i16;
let _33: [usize; 3];
let _34: isize;
let _35: char;
let _36: char;
let _37: bool;
let _38: char;
let _39: (char, [isize; 3]);
let _40: ();
let _41: ();
{
_1 = 261900966856996613375261824039037177833_u128 as u64;
RET = !1582740808_u32;
RET = 242178586_u32 << _4;
_1 = _5;
_4 = _3;
_5 = _3 ^ _1;
_3 = _6 + _4;
_11 = [19752064520938643979056800902724154917_i128,136963474289521947138784150003991645182_i128];
RET = !1711401865_u32;
_13.0 = core::ptr::addr_of_mut!(_10);
RET = 2609203318_u32;
_2 = 282104666345817277435732508435013238342_u128 as u64;
_12 = [(-97126876241835667284675797542695500481_i128)];
_1 = _3;
_7 = _4 ^ _3;
_5 = 194496087512593716506557573503731268849_u128 as u64;
_17.fld5 = !13374_u16;
_17.fld0.fld0 = 5897874365113957145_i64 as u128;
_14 = _17.fld5 | _17.fld5;
_4 = !_6;
_6 = RET as u64;
_17.fld0 = Adt42 { fld0: 1238811717048035958302019234287794485_u128 };
Goto(bb1)
}
bb1 = {
_17.fld1.1 = [(-9223372036854775808_isize),(-28_isize),(-10_isize)];
_18 = 195533224_i32 as u32;
_16 = [(-14981_i16)];
_17.fld0.fld0 = true as u128;
_17.fld4 = [(-143892533823973705821454581086340181837_i128)];
_4 = _3 + _1;
_19.1 = [(-9223372036854775808_isize),(-9223372036854775808_isize),9223372036854775807_isize];
_17.fld0 = Adt42 { fld0: 274013041339170350545394083841967776814_u128 };
_19 = ('\u{eabb5}', _17.fld1.1);
_4 = _7;
_17.fld5 = _14 + _14;
_12 = [(-42973512217375945760224518439717618928_i128)];
_17.fld5 = !_14;
_3 = _7 * _7;
_17.fld2 = core::ptr::addr_of!(_12);
RET = _19.0 as u32;
_5 = _3 << _3;
_17.fld0.fld0 = (-85_i8) as u128;
_11 = [(-137299294755363035718686077490479710501_i128),144689738550028235537305833313983910127_i128];
_19 = ('\u{bb50e}', _17.fld1.1);
_9 = (-9223372036854775808_isize) >> _7;
_19.0 = '\u{db540}';
_19.0 = '\u{34161}';
RET = !_18;
Goto(bb2)
}
bb2 = {
_19.1 = [_9,_9,_9];
_13.0 = core::ptr::addr_of_mut!(_10);
_13.0 = core::ptr::addr_of_mut!(_10);
Call(_10 = fn17(_19.1, _3), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_9 = (-29516_i16) as isize;
Goto(bb4)
}
bb4 = {
_17.fld1.1 = [_9,_9,_9];
_20 = _9 << _5;
_16 = [22688_i16];
_5 = _4 * _7;
_9 = -_20;
_17.fld4 = [_10];
_16 = [(-26366_i16)];
Goto(bb5)
}
bb5 = {
_12 = [_10];
_8 = &_17.fld2;
_16 = [3184_i16];
_10 = (-143731614041888224040815520864552650157_i128);
_25 = _19.0;
_20 = _9;
_17.fld1.0 = _19.0;
_12 = [_10];
_17.fld1.1 = _19.1;
Call(RET = core::intrinsics::bswap(_18), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
_15 = 14_i8 as f32;
RET = true as u32;
_15 = _17.fld0.fld0 as f32;
_14 = !_17.fld5;
_27.0 = !_10;
_2 = (-39_i8) as u64;
_16 = [(-32478_i16)];
_14 = _15 as u16;
_31.0 = _27.0 as u32;
_8 = &(*_8);
_31.1 = !_3;
_31.1 = _4 - _3;
_17.fld3 = core::ptr::addr_of_mut!(_31);
_31.0 = RET << _3;
_1 = !_4;
_32 = (-5818_i16);
_8 = &_17.fld2;
_24 = _17.fld5 + _17.fld5;
Goto(bb7)
}
bb7 = {
_34 = -_9;
_18 = !_31.0;
_26 = core::ptr::addr_of_mut!(_27.0);
_19.0 = _25;
_4 = _1;
_16 = [_32];
_30 = _31.0 as isize;
_30 = _9;
_8 = &(*_8);
_5 = _7;
_17.fld3 = core::ptr::addr_of_mut!(_31);
_8 = &_17.fld2;
_38 = _17.fld1.0;
_10 = 163_u8 as i128;
_8 = &(*_8);
_10 = (*_26);
_36 = _38;
_4 = _32 as u64;
_21 = [_32];
_6 = _1;
RET = !_31.0;
_31.1 = _7 - _3;
_17.fld0.fld0 = 81412183365399137376503036054084753742_u128 + 96641042351207573394960364526874570755_u128;
_17.fld0.fld0 = _7 as u128;
_2 = !_7;
Goto(bb8)
}
bb8 = {
Call(_40 = dump_var(16_usize, 9_usize, Move(_9), 34_usize, Move(_34), 1_usize, Move(_1), 10_usize, Move(_10)), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
Call(_40 = dump_var(16_usize, 20_usize, Move(_20), 2_usize, Move(_2), 19_usize, Move(_19), 4_usize, Move(_4)), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
Call(_40 = dump_var(16_usize, 38_usize, Move(_38), 12_usize, Move(_12), 7_usize, Move(_7), 25_usize, Move(_25)), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn17(mut _1: [isize; 3],mut _2: u64) -> i128 {
mir! {
type RET = i128;
let _3: f32;
let _4: char;
let _5: isize;
let _6: (i128, i16);
let _7: i16;
let _8: Adt42;
let _9: Adt43;
let _10: isize;
let _11: isize;
let _12: bool;
let _13: u8;
let _14: [i128; 1];
let _15: Adt41;
let _16: (char, [isize; 3]);
let _17: (u32, u64);
let _18: char;
let _19: char;
let _20: [i128; 2];
let _21: Adt48;
let _22: bool;
let _23: *mut (char, [isize; 3]);
let _24: ();
let _25: ();
{
_2 = 1148147015254413821_u64 | 17831402254614769891_u64;
RET = 121379910382109505936592818601488929536_i128 >> _2;
_1 = [(-9223372036854775808_isize),61_isize,58_isize];
_1 = [(-10_isize),(-39_isize),53_isize];
RET = (-105135693221198067494165194428935331690_i128) | 75458560415007209992765652591368206128_i128;
RET = (-46211757509907333914004513769772896588_i128) & (-134553535676518113119278279632824248139_i128);
_3 = (-27828_i16) as f32;
_1 = [(-119_isize),118_isize,(-7_isize)];
_2 = 11213934221813790622_u64 << RET;
RET = -(-151264627846828144280035699648033916082_i128);
RET = (-105685675124177526400299057524028507463_i128) << _2;
RET = (-41688251407568517574932348096577427483_i128);
_1 = [(-9223372036854775808_isize),(-114_isize),53_isize];
_3 = 5_usize as f32;
RET = 38977032764548496047135779541417621092_i128;
_1 = [(-9223372036854775808_isize),(-9223372036854775808_isize),(-29_isize)];
_1 = [(-38_isize),9223372036854775807_isize,(-111_isize)];
_2 = 1593581705342717627_u64;
_2 = !2575008494274023037_u64;
_1 = [(-57_isize),(-9223372036854775808_isize),9223372036854775807_isize];
match RET {
0 => bb1,
38977032764548496047135779541417621092 => bb3,
_ => bb2
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
_4 = '\u{116bc}';
_1 = [9223372036854775807_isize,(-9223372036854775808_isize),14_isize];
_2 = 2849385492621925133_u64 & 5085407910536136355_u64;
_1 = [9223372036854775807_isize,(-87_isize),(-100_isize)];
RET = (-48563366151498737887882520962019127316_i128);
_2 = 725870234673661647_u64;
_6.1 = 48697685934026726173258176400909097099_u128 as i16;
_2 = !6904902194583183155_u64;
_6.0 = RET;
_6.0 = RET - RET;
_3 = 41600_u16 as f32;
RET = _6.0 >> _6.0;
_5 = 87_isize | 9223372036854775807_isize;
_6 = (RET, (-18304_i16));
_6.0 = !RET;
RET = !_6.0;
_4 = '\u{7b0ad}';
_10 = (-30_i8) as isize;
RET = _6.0;
_6.1 = (-1727_i16) + (-16909_i16);
_8 = Adt42 { fld0: 72934654799538390865351459694459131615_u128 };
_7 = -_6.1;
_6.1 = _7;
_10 = _3 as isize;
_5 = 218_u8 as isize;
_8 = Adt42 { fld0: 191673658178207137750335254392162215025_u128 };
match _8.fld0 {
0 => bb1,
1 => bb2,
2 => bb4,
3 => bb5,
4 => bb6,
191673658178207137750335254392162215025 => bb8,
_ => bb7
}
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_6.1 = _7 >> RET;
_3 = _6.0 as f32;
Call(_6.0 = core::intrinsics::transmute(RET), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
_8 = Adt42 { fld0: 12795494295858660055909447761413369672_u128 };
_8.fld0 = 1564460555_i32 as u128;
_7 = _2 as i16;
_1 = [_5,_5,_10];
_2 = 8017075702633607319_u64 * 15217071356633267522_u64;
_8 = Adt42 { fld0: 244375025015656261668572243449196915989_u128 };
_2 = 18278418763004883872_u64;
_11 = -_5;
_8.fld0 = !177783596407809710220749989982271875386_u128;
_6.1 = _7;
_7 = -_6.1;
_5 = !_11;
_5 = _10;
_1 = [_10,_11,_11];
_12 = true;
_5 = 0_usize as isize;
_7 = 2901283542917674438_i64 as i16;
_13 = 79_u8;
_6 = (RET, _7);
RET = -_6.0;
_2 = !16941960829484683599_u64;
_10 = !_5;
_12 = true;
_6.1 = 118_i8 as i16;
_3 = 2993089535_u32 as f32;
_13 = 16_u8 * 196_u8;
_5 = _12 as isize;
Goto(bb10)
}
bb10 = {
_6.0 = !RET;
_2 = 7336629540164685479_u64;
_1 = [_5,_5,_10];
_4 = '\u{85d06}';
_5 = !_10;
Goto(bb11)
}
bb11 = {
_6 = (RET, _7);
_6.1 = _7;
_14 = [RET];
_16.1 = [_5,_11,_5];
_8.fld0 = 262998423695760657302128287820208688284_u128 & 221895496967594045070583492193387216639_u128;
_12 = !true;
_16.1 = [_11,_10,_5];
_11 = _8.fld0 as isize;
match _2 {
7336629540164685479 => bb12,
_ => bb5
}
}
bb12 = {
_17.1 = _2;
_16 = (_4, _1);
_14 = [_6.0];
RET = !_6.0;
match _17.1 {
0 => bb13,
7336629540164685479 => bb15,
_ => bb14
}
}
bb13 = {
_6 = (RET, _7);
_6.1 = _7;
_14 = [RET];
_16.1 = [_5,_11,_5];
_8.fld0 = 262998423695760657302128287820208688284_u128 & 221895496967594045070583492193387216639_u128;
_12 = !true;
_16.1 = [_11,_10,_5];
_11 = _8.fld0 as isize;
match _2 {
7336629540164685479 => bb12,
_ => bb5
}
}
bb14 = {
Return()
}
bb15 = {
RET = _8.fld0 as i128;
_16.1 = [_11,_11,_10];
_2 = _17.1 >> _13;
_6.1 = _12 as i16;
_12 = true;
_17.0 = !1361681141_u32;
_16.0 = _4;
_17.0 = 37129_u16 as u32;
_17.0 = 2658378483_u32;
_14 = [_6.0];
_6 = (RET, _7);
_17.0 = !1926535529_u32;
_18 = _4;
_17.1 = !_2;
_13 = 9192_u16 as u8;
_5 = _10 * _11;
_16.0 = _18;
_1 = _16.1;
_15 = Adt41::Variant1 { fld0: _16,fld1: 36914_u16,fld2: _6.0 };
_21.fld1 = [_12,_12,_12];
place!(Field::<(char, [isize; 3])>(Variant(_15, 1), 0)).1 = _16.1;
Goto(bb16)
}
bb16 = {
Call(_24 = dump_var(17_usize, 10_usize, Move(_10), 5_usize, Move(_5), 7_usize, Move(_7), 13_usize, Move(_13)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_24 = dump_var(17_usize, 17_usize, Move(_17), 16_usize, Move(_16), 6_usize, Move(_6), 25_usize, _25), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn18(mut _1: (u32, u64),mut _2: u64,mut _3: f64,mut _4: (u32, u64),mut _5: u64,mut _6: u64) -> f64 {
mir! {
type RET = f64;
let _7: f32;
let _8: ([isize; 3],);
let _9: ();
let _10: ();
{
_4.1 = _1.1 + _2;
RET = _3;
_1 = (_4.0, _6);
_3 = RET;
_5 = _1.1;
_6 = _5 * _4.1;
RET = _3;
Goto(bb1)
}
bb1 = {
Call(_9 = dump_var(18_usize, 5_usize, Move(_5), 1_usize, Move(_1), 10_usize, _10, 10_usize, _10), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn19(mut _1: [isize; 3],mut _2: i32,mut _3: [isize; 3],mut _4: u32,mut _5: u64,mut _6: u64,mut _7: (char, [isize; 3]),mut _8: (u32, u64),mut _9: u32,mut _10: i32,mut _11: u64,mut _12: u32,mut _13: u64) -> isize {
mir! {
type RET = isize;
let _14: i8;
let _15: Adt56;
let _16: isize;
let _17: (*mut i128,);
let _18: i32;
let _19: Adt42;
let _20: *mut i128;
let _21: f64;
let _22: *mut *mut *mut i128;
let _23: bool;
let _24: i64;
let _25: ([isize; 3],);
let _26: bool;
let _27: (i128, i16);
let _28: f32;
let _29: ();
let _30: ();
{
_2 = -_10;
_1 = _3;
_4 = _9 >> _6;
_1 = _3;
_7 = ('\u{473eb}', _1);
RET = true as isize;
_12 = _9 << _13;
_6 = _5;
_3 = [RET,RET,RET];
_7.1 = [RET,RET,RET];
_8 = (_9, _11);
_13 = (-140559124461073805016372904503881747460_i128) as u64;
_10 = !_2;
_4 = _9 ^ _12;
_7.0 = '\u{22e9d}';
_8.0 = _4;
_8.1 = !_11;
_5 = 111_u8 as u64;
_2 = _10;
_8.1 = !_6;
_13 = !_6;
Goto(bb1)
}
bb1 = {
_10 = (-6576491498754374076_i64) as i32;
Goto(bb2)
}
bb2 = {
_8.0 = _4;
_4 = !_12;
_12 = _8.0 | _9;
_10 = _2;
_3 = [RET,RET,RET];
_7.1 = [RET,RET,RET];
_4 = _12 + _12;
_8.0 = _7.0 as u32;
_8.1 = _11;
_14 = (-28_i8) - (-2_i8);
_6 = _11;
_7 = ('\u{1087ff}', _1);
_7 = ('\u{9e884}', _1);
_14 = !(-108_i8);
_6 = _8.1;
_16 = RET + RET;
Goto(bb3)
}
bb3 = {
_18 = _10;
_1 = _7.1;
_19 = Adt42 { fld0: 152980407509807918447940017531187635009_u128 };
_21 = _14 as f64;
_18 = _10;
_10 = _18;
_8.0 = _9;
_1 = [RET,_16,_16];
Call(_16 = core::intrinsics::bswap(RET), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_21 = _19.fld0 as f64;
_24 = !(-4389120069511269932_i64);
_21 = _14 as f64;
_8.0 = _12;
_7.0 = '\u{70fa5}';
_7.0 = '\u{ac45f}';
_4 = _12 * _12;
RET = -_16;
_7.1 = [_16,_16,_16];
_5 = _11 * _8.1;
_10 = _2;
Call(_10 = core::intrinsics::transmute(_4), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
_6 = _13;
match _19.fld0 {
0 => bb3,
1 => bb2,
2 => bb6,
3 => bb7,
4 => bb8,
5 => bb9,
6 => bb10,
152980407509807918447940017531187635009 => bb12,
_ => bb11
}
}
bb6 = {
_21 = _19.fld0 as f64;
_24 = !(-4389120069511269932_i64);
_21 = _14 as f64;
_8.0 = _12;
_7.0 = '\u{70fa5}';
_7.0 = '\u{ac45f}';
_4 = _12 * _12;
RET = -_16;
_7.1 = [_16,_16,_16];
_5 = _11 * _8.1;
_10 = _2;
Call(_10 = core::intrinsics::transmute(_4), ReturnTo(bb5), UnwindUnreachable())
}
bb7 = {
_18 = _10;
_1 = _7.1;
_19 = Adt42 { fld0: 152980407509807918447940017531187635009_u128 };
_21 = _14 as f64;
_18 = _10;
_10 = _18;
_8.0 = _9;
_1 = [RET,_16,_16];
Call(_16 = core::intrinsics::bswap(RET), ReturnTo(bb4), UnwindUnreachable())
}
bb8 = {
_8.0 = _4;
_4 = !_12;
_12 = _8.0 | _9;
_10 = _2;
_3 = [RET,RET,RET];
_7.1 = [RET,RET,RET];
_4 = _12 + _12;
_8.0 = _7.0 as u32;
_8.1 = _11;
_14 = (-28_i8) - (-2_i8);
_6 = _11;
_7 = ('\u{1087ff}', _1);
_7 = ('\u{9e884}', _1);
_14 = !(-108_i8);
_6 = _8.1;
_16 = RET + RET;
Goto(bb3)
}
bb9 = {
_10 = (-6576491498754374076_i64) as i32;
Goto(bb2)
}
bb10 = {
Return()
}
bb11 = {
Return()
}
bb12 = {
_23 = false;
RET = (-27316_i16) as isize;
_25 = (_7.1,);
_1 = [_16,_16,RET];
Goto(bb13)
}
bb13 = {
_5 = 4_u8 as u64;
_8 = (_12, _6);
_15 = Adt56::Variant0 { fld0: (-32253_i16) };
_8.0 = _9;
_11 = _6 << _4;
_25.0 = _3;
_7.1 = _1;
_25 = (_3,);
_10 = _2 + _18;
_25.0 = [_16,RET,RET];
_8.0 = _10 as u32;
RET = _16 & _16;
place!(Field::<i16>(Variant(_15, 0), 0)) = -(-15776_i16);
_21 = 3564_u16 as f64;
_26 = _23;
_6 = _11 - _11;
_2 = _6 as i32;
_3 = [_16,RET,RET];
_25 = (_7.1,);
_23 = _26;
_8.1 = !_11;
_8 = (_9, _11);
_19 = Adt42 { fld0: 174657701988876675148790302215356262045_u128 };
_21 = 101415536117479223518307790688564102807_i128 as f64;
match _19.fld0 {
174657701988876675148790302215356262045 => bb15,
_ => bb14
}
}
bb14 = {
Return()
}
bb15 = {
_13 = !_6;
_14 = _6 as i8;
_7.1 = [RET,RET,RET];
_20 = core::ptr::addr_of_mut!(_27.0);
RET = !_16;
_27.1 = Field::<i16>(Variant(_15, 0), 0);
_17.0 = core::ptr::addr_of_mut!((*_20));
_28 = _16 as f32;
_24 = 5284709989567376955_i64 | (-1718190635661670712_i64);
_27.1 = 86_u8 as i16;
SetDiscriminant(_15, 1);
_8 = (_9, _6);
_27 = (41430099010477196546609761467268134528_i128, (-18193_i16));
_26 = _23;
place!(Field::<*mut u128>(Variant(_15, 1), 5)) = core::ptr::addr_of_mut!(_19.fld0);
Goto(bb16)
}
bb16 = {
Call(_29 = dump_var(19_usize, 2_usize, Move(_2), 4_usize, Move(_4), 23_usize, Move(_23), 13_usize, Move(_13)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_29 = dump_var(19_usize, 18_usize, Move(_18), 27_usize, Move(_27), 24_usize, Move(_24), 12_usize, Move(_12)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_29 = dump_var(19_usize, 8_usize, Move(_8), 10_usize, Move(_10), 30_usize, _30, 30_usize, _30), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
pub fn main() {
                fn0(std::hint::black_box(false), std::hint::black_box('\u{101943}'), std::hint::black_box((-9223372036854775808_isize)), std::hint::black_box(6590828313272416987_i64), std::hint::black_box((-9286_i16)), std::hint::black_box(20270_u16));
                
            }
#[derive(Debug,Copy,Clone)]
pub enum Adt41 {
Variant0{
fld0: u16,
fld1: f32,
fld2: *const i128,

},
Variant1{
fld0: (char, [isize; 3]),
fld1: u16,
fld2: i128,

},
Variant2{
fld0: bool,
fld1: ([isize; 3],),
fld2: [bool; 3],
fld3: *const [i128; 1],

}}
#[derive(Debug,Copy,Clone)]
pub struct Adt42 {
fld0: u128,
}
#[derive(Debug)]
pub enum Adt43 {
Variant0{
fld0: *mut (char, [isize; 3]),
fld1: *const i128,
fld2: i128,
fld3: i8,

},
Variant1{
fld0: *mut (u32, u64),
fld1: [i64; 3],

}}
#[derive(Debug)]
pub enum Adt44 {
Variant0{
fld0: [i128; 1],
fld1: *mut (u32, u64),
fld2: *mut u128,
fld3: i8,
fld4: [isize; 3],
fld5: u8,

},
Variant1{
fld0: [isize; 3],
fld1: char,
fld2: Adt43,

}}
#[derive(Debug)]
pub enum Adt45 {
Variant0{
fld0: u16,
fld1: *const i8,

},
Variant1{
fld0: *mut (char, [isize; 3]),
fld1: [isize; 3],
fld2: i32,

},
Variant2{
fld0: *const u32,
fld1: u64,
fld2: isize,
fld3: u8,
fld4: i16,
fld5: [i64; 3],
fld6: [i16; 1],

},
Variant3{
fld0: isize,

}}
#[derive(Debug,Copy,Clone)]
pub struct Adt46 {
fld0: Adt42,
fld1: (char, [isize; 3]),
fld2: *const [i128; 1],
fld3: *mut (u32, u64),
fld4: [i128; 1],
fld5: u16,
}
#[derive(Debug)]
pub enum Adt47 {
Variant0{
fld0: [i128; 1],
fld1: *mut *mut *mut i128,
fld2: isize,
fld3: usize,
fld4: (*mut i128,),

},
Variant1{
fld0: u64,
fld1: char,
fld2: Adt44,
fld3: *const i128,
fld4: [i64; 3],
fld5: f64,
fld6: u16,
fld7: [i128; 2],

},
Variant2{
fld0: u128,
fld1: [i128; 1],

}}
#[derive(Debug)]
pub struct Adt48 {
fld0: Adt45,
fld1: [bool; 3],
fld2: [isize; 3],
}
#[derive(Debug)]
pub enum Adt49 {
Variant0{
fld0: [i128; 1],
fld1: *mut (u32, u64),
fld2: (char, [isize; 3]),

},
Variant1{
fld0: [i128; 2],
fld1: Adt44,
fld2: u64,
fld3: [i64; 3],
fld4: ([isize; 3],),
fld5: u8,
fld6: Adt41,

}}
#[derive(Debug)]
pub enum Adt50 {
Variant0{
fld0: bool,
fld1: *const u32,
fld2: *mut (char, [isize; 3]),
fld3: Adt49,
fld4: u64,
fld5: u8,
fld6: Adt43,
fld7: i128,

},
Variant1{
fld0: Adt41,
fld1: Adt42,

},
Variant2{
fld0: f32,
fld1: Adt49,
fld2: [bool; 3],
fld3: u32,
fld4: *mut u128,

}}
#[derive(Debug)]
pub enum Adt51 {
Variant0{
fld0: *const i128,
fld1: Adt43,
fld2: Adt44,
fld3: u64,
fld4: i16,
fld5: *const i8,
fld6: *mut u128,

},
Variant1{
fld0: [i128; 2],
fld1: Adt45,
fld2: *mut (char, [isize; 3]),
fld3: *const [i128; 1],
fld4: *mut i128,
fld5: *mut *mut *mut i128,
fld6: Adt49,
fld7: *mut u128,

},
Variant2{
fld0: f64,
fld1: char,
fld2: *mut (char, [isize; 3]),
fld3: *mut (u32, u64),
fld4: Adt49,
fld5: [bool; 3],
fld6: *mut i128,

}}
#[derive(Debug)]
pub enum Adt52 {
Variant0{
fld0: (u32, u64),

},
Variant1{
fld0: *mut i128,
fld1: *const [i128; 1],
fld2: f32,

},
Variant2{
fld0: *mut (char, [isize; 3]),
fld1: *mut u128,
fld2: Adt50,

},
Variant3{
fld0: f32,
fld1: u128,
fld2: Adt49,
fld3: [usize; 3],
fld4: *mut *const u32,
fld5: Adt44,
fld6: (i128, i16),
fld7: *const i8,

}}
#[derive(Debug)]
pub enum Adt53 {
Variant0{
fld0: u16,
fld1: Adt45,
fld2: f64,
fld3: (*mut i128,),
fld4: [i64; 3],
fld5: *mut (u32, u64),
fld6: [i128; 1],
fld7: Adt46,

},
Variant1{
fld0: f64,
fld1: [i64; 3],
fld2: Adt51,
fld3: i8,
fld4: u128,
fld5: *mut i128,
fld6: [bool; 3],

}}
#[derive(Debug)]
pub enum Adt54 {
Variant0{
fld0: (char, [isize; 3]),
fld1: u8,
fld2: *mut u128,
fld3: u16,
fld4: i16,
fld5: i32,
fld6: u32,
fld7: usize,

},
Variant1{
fld0: *const [i128; 1],
fld1: *mut *mut *mut i128,
fld2: (char, [isize; 3]),
fld3: u128,
fld4: [isize; 3],
fld5: Adt45,
fld6: u16,

},
Variant2{
fld0: Adt46,
fld1: f64,
fld2: *mut (char, [isize; 3]),
fld3: u128,
fld4: *mut *mut *mut i128,
fld5: [i16; 1],
fld6: (u32, u64),
fld7: *const [i128; 1],

}}
#[derive(Debug)]
pub enum Adt55 {
Variant0{
fld0: i64,

},
Variant1{
fld0: bool,
fld1: Adt41,
fld2: isize,
fld3: *mut *mut i128,
fld4: [isize; 3],
fld5: i128,

},
Variant2{
fld0: *mut (char, [isize; 3]),
fld1: Adt51,
fld2: isize,
fld3: i8,
fld4: [i128; 1],
fld5: i32,
fld6: (char, [isize; 3]),
fld7: Adt46,

}}
#[derive(Debug,Copy,Clone)]
pub enum Adt56 {
Variant0{
fld0: i16,

},
Variant1{
fld0: *const [i128; 1],
fld1: u128,
fld2: u64,
fld3: [i128; 2],
fld4: f32,
fld5: *mut u128,
fld6: [isize; 3],

}}
#[derive(Debug)]
pub enum Adt57 {
Variant0{
fld0: *const u32,
fld1: *mut (char, [isize; 3]),
fld2: u16,
fld3: (*mut i128,),

},
Variant1{
fld0: i16,
fld1: Adt49,
fld2: Adt51,
fld3: Adt41,

}}

