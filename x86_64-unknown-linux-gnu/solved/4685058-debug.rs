#![recursion_limit = "1024"]
    #![feature(custom_mir, core_intrinsics, const_hash)]
    #![allow(unused_parens, unused_assignments, overflowing_literals)]
    extern crate core;
    use core::intrinsics::mir::*;

    use std::fmt::Debug;

    #[inline(never)]
    fn dump_var(
        f: usize,
        var0: usize, val0: impl Debug,
        var1: usize, val1: impl Debug,
        var2: usize, val2: impl Debug,
        var3: usize, val3: impl Debug,
    ) {
        println!("fn{f}:_{var0} = {val0:?}\n_{var1} = {val1:?}\n_{var2} = {val2:?}\n_{var3} = {val3:?}");
    }
    #[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn0(mut _1: bool,mut _2: u64,mut _3: isize,mut _4: u16,mut _5: i16,mut _6: i32,mut _7: u32,mut _8: u128,mut _9: usize,mut _10: u8) -> u16 {
mir! {
type RET = u16;
let _11: char;
let _12: Adt50;
let _13: u128;
let _14: usize;
let _15: u8;
let _16: f32;
let _17: f64;
let _18: *mut [i128; 8];
let _19: i16;
let _20: isize;
let _21: isize;
let _22: u32;
let _23: u16;
let _24: char;
let _25: Adt45;
let _26: u8;
let _27: usize;
let _28: i32;
let _29: usize;
let _30: Adt46;
let _31: [isize; 4];
let _32: u8;
let _33: ();
let _34: ();
{
_9 = 1_usize << 236164806457880842825549249248673817513_u128;
_7 = !2451981347_u32;
_3 = 123_isize;
_8 = 562978604_i32 as u128;
_1 = !true;
_10 = 125_u8;
_7 = 1661691288_u32 - 497189784_u32;
_4 = !41765_u16;
_1 = _10 > _10;
Goto(bb1)
}
bb1 = {
RET = _4 | _4;
_8 = !131724116427999022868696590001793853057_u128;
_2 = 3905839611910755096_u64;
_6 = (-1644036596_i32);
_11 = '\u{a2a69}';
_5 = 9801_i16;
_3 = _10 as isize;
_6 = 41_i8 as i32;
RET = _7 as u16;
_10 = (-11_i8) as u8;
_2 = _8 as u64;
RET = !_4;
_3 = -64_isize;
_7 = 7899407_u32;
_7 = 4002150740_u32 << _8;
_8 = _10 as u128;
_8 = !56267198822550394149494690147278159825_u128;
_10 = !164_u8;
RET = _4;
_5 = 21852_i16;
RET = _4;
_10 = 242_u8 << _3;
RET = _4;
_10 = !79_u8;
_3 = 9223372036854775807_isize;
Call(_5 = fn1(_11, _3, _3, _7, _1), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_13 = !_8;
RET = _4;
_4 = RET | RET;
_13 = !_8;
_13 = _8 + _8;
_4 = RET;
_13 = _8;
_10 = !21_u8;
Call(RET = fn3(_5, _7), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_2 = 5608862988141687115_u64;
_9 = 3054455516321955556_usize;
_4 = RET;
_14 = RET as usize;
RET = _4;
_3 = (-2_isize) & 9223372036854775807_isize;
_10 = 178_u8;
_4 = 70652165731184750059264310029847363966_i128 as u16;
RET = _7 as u16;
RET = _5 as u16;
_3 = 9223372036854775807_isize;
_9 = !_14;
_8 = _9 as u128;
_13 = _8;
_11 = '\u{583d6}';
_13 = (-87907454326783335669885481701379110884_i128) as u128;
_6 = 365272318_i32;
_1 = _7 <= _7;
_3 = 9223372036854775807_isize;
_7 = 2855119455_u32 - 2836373333_u32;
_11 = '\u{63bd1}';
RET = _4;
_5 = -(-3262_i16);
Goto(bb4)
}
bb4 = {
_16 = 166971142340888673_i64 as f32;
_6 = (-1949659569_i32) << _10;
_16 = _2 as f32;
match _2 {
5608862988141687115 => bb5,
_ => bb2
}
}
bb5 = {
_16 = (-27_i8) as f32;
_11 = '\u{a132a}';
_3 = 76_isize;
_17 = _7 as f64;
_16 = (-48_i8) as f32;
_17 = _7 as f64;
_19 = _5 - _5;
_4 = RET ^ RET;
_20 = -_3;
_2 = 1319121956173757203_u64;
_9 = _14;
_15 = (-6_i8) as u8;
Goto(bb6)
}
bb6 = {
_3 = _20 << _10;
_14 = _9 * _9;
_2 = 14192862593247177892_u64;
_7 = !627725137_u32;
_21 = _3;
_2 = 17691739643565391581_u64 & 14730834943991977008_u64;
_19 = (-52_i8) as i16;
_9 = !_14;
_7 = 1011558786_u32;
_17 = RET as f64;
_20 = !_3;
_13 = _1 as u128;
RET = _4;
_5 = _19 + _19;
_3 = _20 ^ _21;
_19 = _5 - _5;
_11 = '\u{2c1b3}';
RET = !_4;
_19 = !_5;
_11 = '\u{4a45d}';
_16 = _5 as f32;
_7 = !2636161824_u32;
_3 = _20;
_7 = 935311952_u32;
Call(RET = core::intrinsics::bswap(_4), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
_2 = 14663576008519443717_u64;
RET = _4;
_23 = _17 as u16;
_4 = 167486045736811190256312911560551957648_i128 as u16;
_13 = _19 as u128;
_25.fld4.fld3.1 = -(-8706679459048966491_i64);
_25.fld4.fld3.0.0 = _4 as u32;
_25.fld4.fld3.1 = (-6219871111686430263_i64) >> _4;
_8 = _13;
_25.fld3.fld5 = !RET;
_25.fld4.fld0 = _19 < _5;
_25.fld4.fld5 = _6 >> _5;
_25.fld4.fld3.2.2 = _11;
_25.fld4.fld3.3 = [_19,_19,_19,_5,_19,_19];
_16 = _2 as f32;
_25.fld4.fld3.0 = (_7, _21, _14, _19);
_25.fld4.fld5 = 37_i8 as i32;
_25.fld4.fld5 = !_6;
_25.fld3.fld2 = [_11];
_25.fld4.fld3.0.1 = !_3;
_25.fld3.fld0 = [_19,_19,_25.fld4.fld3.0.3,_25.fld4.fld3.0.3,_19,_19];
_25.fld4.fld0 = _1;
_25.fld3.fld1 = _11;
_25.fld4.fld3.0.1 = !_20;
_26 = _15 | _15;
match _2 {
0 => bb8,
1 => bb9,
2 => bb10,
3 => bb11,
4 => bb12,
5 => bb13,
6 => bb14,
14663576008519443717 => bb16,
_ => bb15
}
}
bb8 = {
_3 = _20 << _10;
_14 = _9 * _9;
_2 = 14192862593247177892_u64;
_7 = !627725137_u32;
_21 = _3;
_2 = 17691739643565391581_u64 & 14730834943991977008_u64;
_19 = (-52_i8) as i16;
_9 = !_14;
_7 = 1011558786_u32;
_17 = RET as f64;
_20 = !_3;
_13 = _1 as u128;
RET = _4;
_5 = _19 + _19;
_3 = _20 ^ _21;
_19 = _5 - _5;
_11 = '\u{2c1b3}';
RET = !_4;
_19 = !_5;
_11 = '\u{4a45d}';
_16 = _5 as f32;
_7 = !2636161824_u32;
_3 = _20;
_7 = 935311952_u32;
Call(RET = core::intrinsics::bswap(_4), ReturnTo(bb7), UnwindUnreachable())
}
bb9 = {
_16 = (-27_i8) as f32;
_11 = '\u{a132a}';
_3 = 76_isize;
_17 = _7 as f64;
_16 = (-48_i8) as f32;
_17 = _7 as f64;
_19 = _5 - _5;
_4 = RET ^ RET;
_20 = -_3;
_2 = 1319121956173757203_u64;
_9 = _14;
_15 = (-6_i8) as u8;
Goto(bb6)
}
bb10 = {
_16 = 166971142340888673_i64 as f32;
_6 = (-1949659569_i32) << _10;
_16 = _2 as f32;
match _2 {
5608862988141687115 => bb5,
_ => bb2
}
}
bb11 = {
_2 = 5608862988141687115_u64;
_9 = 3054455516321955556_usize;
_4 = RET;
_14 = RET as usize;
RET = _4;
_3 = (-2_isize) & 9223372036854775807_isize;
_10 = 178_u8;
_4 = 70652165731184750059264310029847363966_i128 as u16;
RET = _7 as u16;
RET = _5 as u16;
_3 = 9223372036854775807_isize;
_9 = !_14;
_8 = _9 as u128;
_13 = _8;
_11 = '\u{583d6}';
_13 = (-87907454326783335669885481701379110884_i128) as u128;
_6 = 365272318_i32;
_1 = _7 <= _7;
_3 = 9223372036854775807_isize;
_7 = 2855119455_u32 - 2836373333_u32;
_11 = '\u{63bd1}';
RET = _4;
_5 = -(-3262_i16);
Goto(bb4)
}
bb12 = {
_13 = !_8;
RET = _4;
_4 = RET | RET;
_13 = !_8;
_13 = _8 + _8;
_4 = RET;
_13 = _8;
_10 = !21_u8;
Call(RET = fn3(_5, _7), ReturnTo(bb3), UnwindUnreachable())
}
bb13 = {
RET = _4 | _4;
_8 = !131724116427999022868696590001793853057_u128;
_2 = 3905839611910755096_u64;
_6 = (-1644036596_i32);
_11 = '\u{a2a69}';
_5 = 9801_i16;
_3 = _10 as isize;
_6 = 41_i8 as i32;
RET = _7 as u16;
_10 = (-11_i8) as u8;
_2 = _8 as u64;
RET = !_4;
_3 = -64_isize;
_7 = 7899407_u32;
_7 = 4002150740_u32 << _8;
_8 = _10 as u128;
_8 = !56267198822550394149494690147278159825_u128;
_10 = !164_u8;
RET = _4;
_5 = 21852_i16;
RET = _4;
_10 = 242_u8 << _3;
RET = _4;
_10 = !79_u8;
_3 = 9223372036854775807_isize;
Call(_5 = fn1(_11, _3, _3, _7, _1), ReturnTo(bb2), UnwindUnreachable())
}
bb14 = {
Return()
}
bb15 = {
Return()
}
bb16 = {
_3 = _20 << _14;
_25.fld5 = -_25.fld4.fld5;
_10 = !_26;
RET = !_4;
_25.fld4.fld4 = _9;
_25.fld4.fld3.3 = _25.fld3.fld0;
_25.fld4.fld3.0.2 = _9;
_25.fld3.fld1 = _25.fld4.fld3.2.2;
_25.fld2 = _17 - _17;
_1 = !_25.fld4.fld0;
_17 = -_25.fld2;
_24 = _25.fld3.fld1;
_22 = _7 + _25.fld4.fld3.0.0;
_1 = _25.fld4.fld0;
_6 = !_25.fld5;
_27 = !_9;
_25.fld1 = _25.fld3.fld0;
_25.fld5 = !_6;
_13 = _8 - _8;
Goto(bb17)
}
bb17 = {
Call(_33 = dump_var(0_usize, 5_usize, Move(_5), 15_usize, Move(_15), 19_usize, Move(_19), 26_usize, Move(_26)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_33 = dump_var(0_usize, 11_usize, Move(_11), 21_usize, Move(_21), 9_usize, Move(_9), 27_usize, Move(_27)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_33 = dump_var(0_usize, 13_usize, Move(_13), 22_usize, Move(_22), 20_usize, Move(_20), 34_usize, _34), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn1(mut _1: char,mut _2: isize,mut _3: isize,mut _4: u32,mut _5: bool) -> i16 {
mir! {
type RET = i16;
let _6: i64;
let _7: f32;
let _8: [i16; 5];
let _9: i8;
let _10: isize;
let _11: [u8; 1];
let _12: Adt49;
let _13: f64;
let _14: f32;
let _15: (*mut [i128; 8], *const [i16; 5]);
let _16: u128;
let _17: char;
let _18: (i32, i64, char);
let _19: f32;
let _20: f32;
let _21: Adt54;
let _22: f64;
let _23: f32;
let _24: Adt45;
let _25: u16;
let _26: *const bool;
let _27: ((u32, isize, usize, i16), i64, (i32, i64, char), [i16; 6]);
let _28: [i128; 8];
let _29: u64;
let _30: *const [i16; 5];
let _31: f32;
let _32: (f64, u128);
let _33: ();
let _34: ();
{
RET = (-9125_i16) * (-15230_i16);
_2 = _3 >> RET;
_5 = true;
_6 = 225_u8 as i64;
_3 = RET as isize;
_4 = 447763349_u32;
RET = _3 as i16;
_8 = [RET,RET,RET,RET,RET];
_5 = false;
_8 = [RET,RET,RET,RET,RET];
_1 = '\u{26a75}';
_6 = (-44145685795314932816910956905265555767_i128) as i64;
RET = (-7645_i16) * (-18640_i16);
RET = 22462_u16 as i16;
_10 = _2 + _3;
_3 = _10;
_6 = (-6287440199717623538_i64) & 6546283718276189508_i64;
_5 = !false;
_3 = _10 | _10;
_9 = 0_usize as i8;
RET = 10218_i16 ^ (-24179_i16);
_3 = -_10;
_1 = '\u{1981c}';
RET = 31691_i16 << _4;
_5 = !true;
Call(_9 = fn2(_3, _10, _2, _10, _3, _3, _10, _3), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_3 = _10;
_6 = 57697_u16 as i64;
_8 = [RET,RET,RET,RET,RET];
RET = !13492_i16;
_6 = (-9191631615206500353_i64);
_7 = _9 as f32;
_11 = [140_u8];
_1 = '\u{82646}';
_7 = 48511439460938687732603607959778499580_u128 as f32;
_4 = _5 as u32;
_12.fld3 = !5_usize;
_1 = '\u{f1df4}';
match _6 {
0 => bb2,
1 => bb3,
340282366920938463454182975816561711103 => bb5,
_ => bb4
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
_2 = _10 | _10;
_11 = [177_u8];
_9 = 14_i8 + 17_i8;
_12.fld2 = [_5,_5,_5,_5,_5,_5,_5,_5];
_12.fld4 = [RET,RET,RET,RET,RET];
_12.fld0 = !_5;
match _6 {
0 => bb4,
1 => bb2,
2 => bb3,
3 => bb6,
340282366920938463454182975816561711103 => bb8,
_ => bb7
}
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_4 = _6 as u32;
_12.fld7 = [253_u8,0_u8,3_u8,46_u8];
_15.1 = core::ptr::addr_of!(_8);
_17 = _1;
_12.fld6 = core::ptr::addr_of!(_14);
_3 = _4 as isize;
_12.fld2 = [_12.fld0,_5,_12.fld0,_5,_12.fld0,_5,_5,_5];
_14 = _7 - _7;
RET = (-22402_i16);
RET = (-9949_i16);
_13 = RET as f64;
_2 = _10;
RET = !18587_i16;
_12.fld4 = [RET,RET,RET,RET,RET];
RET = 21593_i16;
_12.fld6 = core::ptr::addr_of!(_14);
_11 = [195_u8];
_13 = (-69352052475105362954004298103984376373_i128) as f64;
_12.fld7 = [255_u8,186_u8,119_u8,84_u8];
_11 = [67_u8];
_16 = !288479817395921761666469105841701600502_u128;
_4 = 3168394395_u32 - 1184812589_u32;
_11 = [113_u8];
_12.fld6 = core::ptr::addr_of!(_14);
match _6 {
340282366920938463454182975816561711103 => bb9,
_ => bb2
}
}
bb9 = {
_1 = _17;
RET = !245_i16;
RET = (-11533_i16) & (-14193_i16);
_12.fld7 = [14_u8,246_u8,107_u8,248_u8];
_11 = [203_u8];
_12.fld4 = _8;
_12.fld6 = core::ptr::addr_of!(_14);
_7 = _14 - _14;
_12.fld6 = core::ptr::addr_of!(_7);
_4 = _16 as u32;
RET = -19077_i16;
_9 = _4 as i8;
_1 = _17;
_18.1 = _6 + _6;
_8 = [RET,RET,RET,RET,RET];
_17 = _1;
_2 = !_10;
_12.fld4 = [RET,RET,RET,RET,RET];
_18 = (782676135_i32, _6, _1);
_5 = _12.fld0;
_12.fld6 = core::ptr::addr_of!(_14);
_20 = -_7;
_8 = [RET,RET,RET,RET,RET];
_1 = _18.2;
match _18.0 {
0 => bb1,
1 => bb7,
2 => bb3,
3 => bb4,
4 => bb10,
5 => bb11,
782676135 => bb13,
_ => bb12
}
}
bb10 = {
Return()
}
bb11 = {
Return()
}
bb12 = {
Return()
}
bb13 = {
_5 = !_12.fld0;
_12.fld3 = !9361322515725557621_usize;
_18.0 = 775003586_i32 * 98327320_i32;
_13 = _18.0 as f64;
RET = 28545_i16;
_16 = 148413966213325094080046283076317830228_u128 >> _2;
_7 = _14 - _14;
_16 = 42078767633669477975872987874377401548_u128;
_12.fld2 = [_5,_12.fld0,_5,_5,_12.fld0,_5,_5,_12.fld0];
_24.fld3.fld4 = [_3,_10,_10,_10];
_19 = -_20;
_13 = _20 as f64;
_12.fld0 = _20 != _7;
_24.fld4.fld3.3 = [RET,RET,RET,RET,RET,RET];
_24.fld4.fld3.2.1 = _18.1 & _6;
Goto(bb14)
}
bb14 = {
_24.fld4.fld4 = 45_u8 as usize;
_5 = !_12.fld0;
_24.fld4.fld3.0.0 = _4 - _4;
_24.fld2 = _7 as f64;
_27.0.0 = _4;
_6 = _1 as i64;
_27.0.3 = !RET;
_6 = -_18.1;
_24.fld0 = [_17];
_24.fld4.fld5 = -_18.0;
_1 = _18.2;
_18.2 = _1;
_27.0.2 = _24.fld4.fld3.2.1 as usize;
_27.2.1 = _24.fld4.fld3.2.1;
_12.fld6 = core::ptr::addr_of!(_14);
_1 = _17;
_24.fld3.fld4 = [_2,_3,_2,_10];
_24.fld3.fld1 = _1;
_15.0 = core::ptr::addr_of_mut!(_28);
Goto(bb15)
}
bb15 = {
Call(_33 = dump_var(1_usize, 18_usize, Move(_18), 9_usize, Move(_9), 17_usize, Move(_17), 1_usize, Move(_1)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_33 = dump_var(1_usize, 10_usize, Move(_10), 6_usize, Move(_6), 34_usize, _34, 34_usize, _34), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn2(mut _1: isize,mut _2: isize,mut _3: isize,mut _4: isize,mut _5: isize,mut _6: isize,mut _7: isize,mut _8: isize) -> i8 {
mir! {
type RET = i8;
let _9: u8;
let _10: f64;
let _11: Adt43;
let _12: isize;
let _13: char;
let _14: *const bool;
let _15: i8;
let _16: (i32, i64, char);
let _17: isize;
let _18: i8;
let _19: u16;
let _20: char;
let _21: u16;
let _22: Adt54;
let _23: f32;
let _24: [bool; 2];
let _25: isize;
let _26: Adt50;
let _27: Adt52;
let _28: u128;
let _29: isize;
let _30: ();
let _31: ();
{
_7 = _1 << _2;
_6 = 186_u8 as isize;
_2 = !_6;
_2 = 37_i8 as isize;
Goto(bb1)
}
bb1 = {
_5 = _7;
RET = 117_i8 | (-33_i8);
RET = 20_i8;
_7 = _5;
_4 = (-4679375521469960342_i64) as isize;
RET = 151_u8 as i8;
_1 = !_5;
_1 = 929548643_i32 as isize;
_2 = _8 ^ _7;
_4 = _5 ^ _5;
_4 = _3;
RET = (-52_i8) * (-120_i8);
_9 = 200_u8;
_7 = _2;
_2 = 9376633739609545701_u64 as isize;
_9 = 52_u8;
_8 = (-7748_i16) as isize;
_10 = 301963488226941605874070782602039592609_u128 as f64;
_11.fld2 = ['\u{586d4}'];
_11.fld4 = [_7,_5,_7,_7];
_11.fld3 = _9 * _9;
_11.fld1 = '\u{4fc63}';
_5 = _8 | _7;
_1 = !_5;
Goto(bb2)
}
bb2 = {
_11.fld5 = 35817_u16 ^ 55007_u16;
_11.fld5 = !24296_u16;
_11.fld4 = [_1,_1,_7,_1];
Goto(bb3)
}
bb3 = {
_4 = 282733346_i32 as isize;
_8 = _5 & _1;
RET = 94_i8 & (-37_i8);
Goto(bb4)
}
bb4 = {
_6 = -_8;
_13 = _11.fld1;
_11.fld4 = [_1,_7,_5,_5];
_16.2 = _11.fld1;
_15 = RET;
_2 = 1740035150_u32 as isize;
_15 = 1409980570_u32 as i8;
_3 = _8;
_11.fld0 = [14338_i16,(-807_i16),(-27788_i16),(-3285_i16),(-2395_i16),26617_i16];
_16 = (110985669_i32, (-7946246667676287492_i64), _13);
_12 = _3 + _6;
Goto(bb5)
}
bb5 = {
_9 = _11.fld3;
_6 = _5;
_11.fld4 = [_5,_3,_12,_8];
_2 = _16.0 as isize;
_8 = _1 ^ _12;
RET = !_15;
_18 = RET;
_17 = _8 | _12;
_16.1 = _16.0 as i64;
match _16.0 {
0 => bb3,
1 => bb2,
2 => bb6,
3 => bb7,
4 => bb8,
5 => bb9,
6 => bb10,
110985669 => bb12,
_ => bb11
}
}
bb6 = {
_6 = -_8;
_13 = _11.fld1;
_11.fld4 = [_1,_7,_5,_5];
_16.2 = _11.fld1;
_15 = RET;
_2 = 1740035150_u32 as isize;
_15 = 1409980570_u32 as i8;
_3 = _8;
_11.fld0 = [14338_i16,(-807_i16),(-27788_i16),(-3285_i16),(-2395_i16),26617_i16];
_16 = (110985669_i32, (-7946246667676287492_i64), _13);
_12 = _3 + _6;
Goto(bb5)
}
bb7 = {
_4 = 282733346_i32 as isize;
_8 = _5 & _1;
RET = 94_i8 & (-37_i8);
Goto(bb4)
}
bb8 = {
_11.fld5 = 35817_u16 ^ 55007_u16;
_11.fld5 = !24296_u16;
_11.fld4 = [_1,_1,_7,_1];
Goto(bb3)
}
bb9 = {
_5 = _7;
RET = 117_i8 | (-33_i8);
RET = 20_i8;
_7 = _5;
_4 = (-4679375521469960342_i64) as isize;
RET = 151_u8 as i8;
_1 = !_5;
_1 = 929548643_i32 as isize;
_2 = _8 ^ _7;
_4 = _5 ^ _5;
_4 = _3;
RET = (-52_i8) * (-120_i8);
_9 = 200_u8;
_7 = _2;
_2 = 9376633739609545701_u64 as isize;
_9 = 52_u8;
_8 = (-7748_i16) as isize;
_10 = 301963488226941605874070782602039592609_u128 as f64;
_11.fld2 = ['\u{586d4}'];
_11.fld4 = [_7,_5,_7,_7];
_11.fld3 = _9 * _9;
_11.fld1 = '\u{4fc63}';
_5 = _8 | _7;
_1 = !_5;
Goto(bb2)
}
bb10 = {
Return()
}
bb11 = {
Return()
}
bb12 = {
RET = _18 & _18;
_11.fld0 = [5536_i16,(-29630_i16),(-20791_i16),(-19000_i16),(-12136_i16),4836_i16];
_11.fld1 = _13;
_19 = _11.fld1 as u16;
_7 = !_17;
_16 = (208870865_i32, (-3026202124354092737_i64), _11.fld1);
_19 = !_11.fld5;
_11.fld2 = [_11.fld1];
_16 = (715238719_i32, (-2278772711317211740_i64), _13);
RET = _16.0 as i8;
_3 = _7;
_13 = _11.fld1;
_1 = _12 + _7;
_9 = !_11.fld3;
_12 = _15 as isize;
_5 = !_3;
_20 = _13;
_17 = _5 + _3;
_9 = _11.fld3 - _11.fld3;
RET = _15 + _18;
Call(RET = core::intrinsics::bswap(_15), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
_11.fld5 = _16.1 as u16;
_6 = _7 & _8;
_3 = _17;
_12 = 1381884194_u32 as isize;
_16.0 = _17 as i32;
_18 = RET ^ RET;
_22 = Adt54::Variant2 { fld0: _9,fld1: 164483152636820482061374453936104738046_u128,fld2: _16 };
_11.fld4 = [_5,_6,_5,_8];
_22 = Adt54::Variant2 { fld0: _9,fld1: 144614234620350848950320954921586266715_u128,fld2: _16 };
_2 = _6 + _8;
_15 = RET;
_19 = !_11.fld5;
_16.0 = Field::<(i32, i64, char)>(Variant(_22, 2), 2).0;
_24 = [true,false];
_12 = _5;
_15 = Field::<u8>(Variant(_22, 2), 0) as i8;
_11.fld0 = [22807_i16,(-12308_i16),(-8839_i16),(-2662_i16),(-12346_i16),10744_i16];
_19 = _11.fld5;
match _16.1 {
340282366920938463461095834720450999716 => bb15,
_ => bb14
}
}
bb14 = {
_6 = -_8;
_13 = _11.fld1;
_11.fld4 = [_1,_7,_5,_5];
_16.2 = _11.fld1;
_15 = RET;
_2 = 1740035150_u32 as isize;
_15 = 1409980570_u32 as i8;
_3 = _8;
_11.fld0 = [14338_i16,(-807_i16),(-27788_i16),(-3285_i16),(-2395_i16),26617_i16];
_16 = (110985669_i32, (-7946246667676287492_i64), _13);
_12 = _3 + _6;
Goto(bb5)
}
bb15 = {
_18 = 32220_i16 as i8;
_2 = Field::<(i32, i64, char)>(Variant(_22, 2), 2).0 as isize;
_8 = _7 - _3;
_5 = _1;
_25 = _6;
_29 = Field::<u8>(Variant(_22, 2), 0) as isize;
_16.1 = Field::<(i32, i64, char)>(Variant(_22, 2), 2).1 + Field::<(i32, i64, char)>(Variant(_22, 2), 2).1;
_1 = -_5;
_24 = [false,true];
place!(Field::<u128>(Variant(_22, 2), 1)) = !199903831230944293077719788053546399350_u128;
Goto(bb16)
}
bb16 = {
Call(_30 = dump_var(2_usize, 29_usize, Move(_29), 5_usize, Move(_5), 19_usize, Move(_19), 8_usize, Move(_8)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_30 = dump_var(2_usize, 25_usize, Move(_25), 1_usize, Move(_1), 4_usize, Move(_4), 18_usize, Move(_18)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_30 = dump_var(2_usize, 6_usize, Move(_6), 9_usize, Move(_9), 31_usize, _31, 31_usize, _31), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn3(mut _1: i16,mut _2: u32) -> u16 {
mir! {
type RET = u16;
let _3: [char; 1];
let _4: Adt54;
let _5: (f64, u128);
let _6: [u32; 7];
let _7: (([i16; 6],), u8, ([i16; 6],), *const bool);
let _8: bool;
let _9: isize;
let _10: &'static [i16; 6];
let _11: *const u64;
let _12: f64;
let _13: i32;
let _14: (u32, isize, usize, i16);
let _15: Adt57;
let _16: *mut [i128; 8];
let _17: u16;
let _18: u32;
let _19: isize;
let _20: &'static [i16; 6];
let _21: Adt52;
let _22: Adt57;
let _23: Adt44;
let _24: isize;
let _25: ();
let _26: ();
{
_2 = 1033953084_u32 ^ 4162871685_u32;
_2 = 668049103_u32 & 4111034288_u32;
_3 = ['\u{8f61d}'];
RET = 9184567997725773271_i64 as u16;
RET = 3406_u16;
RET = !5043_u16;
match _1 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
28545 => bb6,
_ => bb5
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
_2 = (-109_i8) as u32;
RET = 45501_u16;
_1 = 24571_i16 & (-5910_i16);
_3 = ['\u{3cec8}'];
RET = 4567769263490305327_i64 as u16;
_3 = ['\u{850ee}'];
_5.1 = 200864356253027310423063465149768442055_u128;
_1 = (-24243_i16) - (-31527_i16);
_1 = !32293_i16;
_5.0 = 16399983673142299384_usize as f64;
RET = (-38506304299071652029517320499835685181_i128) as u16;
_5.0 = 9223372036854775807_isize as f64;
_2 = !2330173700_u32;
_5.1 = 9461004527911908160182657765701952800_u128 & 307208262197831298963161409961502905365_u128;
_2 = 2482735810_u32;
_1 = 29981_i16;
Call(_5.1 = fn4(_3, _1, RET, RET, _5.0), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
_1 = 7932_i16 >> RET;
_5.1 = 9_isize as u128;
_2 = !3936986666_u32;
_2 = !3921208158_u32;
_6 = [_2,_2,_2,_2,_2,_2,_2];
_1 = (-21857_i16);
_1 = (-20197_i16) << RET;
_5.0 = 1252817678_i32 as f64;
Goto(bb8)
}
bb8 = {
_6 = [_2,_2,_2,_2,_2,_2,_2];
_5.1 = !109740113087589085021545983633166136048_u128;
_7.1 = 65_u8;
_8 = !true;
_2 = 1503250581_u32 + 3660308034_u32;
_8 = !false;
_6 = [_2,_2,_2,_2,_2,_2,_2];
_1 = !(-491_i16);
_5.0 = (-68575301729328936813462555434472798321_i128) as f64;
_8 = !false;
_9 = !89_isize;
_3 = ['\u{cbf39}'];
_6 = [_2,_2,_2,_2,_2,_2,_2];
_9 = (-9223372036854775808_isize);
_7.0.0 = [_1,_1,_1,_1,_1,_1];
_7.3 = core::ptr::addr_of!(_8);
_7.0.0 = [_1,_1,_1,_1,_1,_1];
_7.2.0 = [_1,_1,_1,_1,_1,_1];
_5.1 = 300836502414944822422175697705151920272_u128;
_8 = false ^ true;
Goto(bb9)
}
bb9 = {
_13 = RET as i32;
RET = _13 as u16;
Goto(bb10)
}
bb10 = {
_12 = _5.0;
_1 = (-28534_i16) + (-31549_i16);
_13 = 1941436164_i32 - 518727212_i32;
_7.3 = core::ptr::addr_of!(_8);
_7.3 = core::ptr::addr_of!(_8);
_14.0 = _2 ^ _2;
_6 = [_2,_14.0,_14.0,_14.0,_14.0,_14.0,_2];
_14.3 = !_1;
_7.0 = (_7.2.0,);
_12 = _5.0;
_7.2 = _7.0;
Goto(bb11)
}
bb11 = {
RET = 4977_u16;
_14.3 = -_1;
_14.3 = _1 - _1;
_14.2 = !10024980778271259920_usize;
_13 = 1276138406_i32 * (-1572272208_i32);
RET = 51962_u16 - 62146_u16;
_2 = _14.0;
_3 = ['\u{d8517}'];
_5.0 = _12 * _12;
_17 = !RET;
match _9 {
0 => bb2,
1 => bb12,
2 => bb13,
3 => bb14,
4 => bb15,
5 => bb16,
6 => bb17,
340282366920938463454151235394913435648 => bb19,
_ => bb18
}
}
bb12 = {
_12 = _5.0;
_1 = (-28534_i16) + (-31549_i16);
_13 = 1941436164_i32 - 518727212_i32;
_7.3 = core::ptr::addr_of!(_8);
_7.3 = core::ptr::addr_of!(_8);
_14.0 = _2 ^ _2;
_6 = [_2,_14.0,_14.0,_14.0,_14.0,_14.0,_2];
_14.3 = !_1;
_7.0 = (_7.2.0,);
_12 = _5.0;
_7.2 = _7.0;
Goto(bb11)
}
bb13 = {
Return()
}
bb14 = {
_6 = [_2,_2,_2,_2,_2,_2,_2];
_5.1 = !109740113087589085021545983633166136048_u128;
_7.1 = 65_u8;
_8 = !true;
_2 = 1503250581_u32 + 3660308034_u32;
_8 = !false;
_6 = [_2,_2,_2,_2,_2,_2,_2];
_1 = !(-491_i16);
_5.0 = (-68575301729328936813462555434472798321_i128) as f64;
_8 = !false;
_9 = !89_isize;
_3 = ['\u{cbf39}'];
_6 = [_2,_2,_2,_2,_2,_2,_2];
_9 = (-9223372036854775808_isize);
_7.0.0 = [_1,_1,_1,_1,_1,_1];
_7.3 = core::ptr::addr_of!(_8);
_7.0.0 = [_1,_1,_1,_1,_1,_1];
_7.2.0 = [_1,_1,_1,_1,_1,_1];
_5.1 = 300836502414944822422175697705151920272_u128;
_8 = false ^ true;
Goto(bb9)
}
bb15 = {
_1 = 7932_i16 >> RET;
_5.1 = 9_isize as u128;
_2 = !3936986666_u32;
_2 = !3921208158_u32;
_6 = [_2,_2,_2,_2,_2,_2,_2];
_1 = (-21857_i16);
_1 = (-20197_i16) << RET;
_5.0 = 1252817678_i32 as f64;
Goto(bb8)
}
bb16 = {
_2 = (-109_i8) as u32;
RET = 45501_u16;
_1 = 24571_i16 & (-5910_i16);
_3 = ['\u{3cec8}'];
RET = 4567769263490305327_i64 as u16;
_3 = ['\u{850ee}'];
_5.1 = 200864356253027310423063465149768442055_u128;
_1 = (-24243_i16) - (-31527_i16);
_1 = !32293_i16;
_5.0 = 16399983673142299384_usize as f64;
RET = (-38506304299071652029517320499835685181_i128) as u16;
_5.0 = 9223372036854775807_isize as f64;
_2 = !2330173700_u32;
_5.1 = 9461004527911908160182657765701952800_u128 & 307208262197831298963161409961502905365_u128;
_2 = 2482735810_u32;
_1 = 29981_i16;
Call(_5.1 = fn4(_3, _1, RET, RET, _5.0), ReturnTo(bb7), UnwindUnreachable())
}
bb17 = {
Return()
}
bb18 = {
Return()
}
bb19 = {
_7.2 = _7.0;
_20 = &_23.fld3.3;
RET = _5.0 as u16;
_18 = !_14.0;
_23.fld5 = !_13;
_23.fld3.2.0 = !_23.fld5;
_17 = RET;
_23.fld3.0 = (_18, _9, _14.2, _1);
_14.3 = -_1;
_23.fld3.2.0 = _13 & _23.fld5;
_23.fld3.2.1 = (-8473910972308163841_i64);
_23.fld3.0.0 = _2 + _2;
Goto(bb20)
}
bb20 = {
Call(_25 = dump_var(3_usize, 9_usize, Move(_9), 2_usize, Move(_2), 17_usize, Move(_17), 13_usize, Move(_13)), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn4(mut _1: [char; 1],mut _2: i16,mut _3: u16,mut _4: u16,mut _5: f64) -> u128 {
mir! {
type RET = u128;
let _6: (*mut [i128; 8], *const [i16; 5]);
let _7: i16;
let _8: usize;
let _9: i128;
let _10: char;
let _11: isize;
let _12: [i16; 6];
let _13: [u8; 1];
let _14: [isize; 4];
let _15: i16;
let _16: Adt52;
let _17: [bool; 2];
let _18: f64;
let _19: [isize; 4];
let _20: isize;
let _21: usize;
let _22: bool;
let _23: isize;
let _24: Adt43;
let _25: &'static [i16; 6];
let _26: char;
let _27: f64;
let _28: char;
let _29: [u8; 1];
let _30: ((u32, isize, usize, i16), i64, (i32, i64, char), [i16; 6]);
let _31: char;
let _32: f64;
let _33: [i16; 6];
let _34: ();
let _35: ();
{
_1 = ['\u{5f228}'];
RET = !176358706135939726730863933069298054290_u128;
match _2 {
29981 => bb2,
_ => bb1
}
}
bb1 = {
Return()
}
bb2 = {
RET = !69224433988354597495370619403481087106_u128;
_4 = _3;
_3 = (-51_i8) as u16;
_5 = 3390768076145535922_u64 as f64;
_5 = 2122187603789035385_i64 as f64;
_3 = !_4;
_4 = _3;
RET = !281148745804566435261708539804524299707_u128;
_7 = false as i16;
_9 = (-3807160350443907331_i64) as i128;
_1 = ['\u{a2ef}'];
_8 = 3_usize | 10937919892248885331_usize;
_10 = '\u{f99c6}';
_2 = _7 * _7;
_1 = [_10];
_8 = !0_usize;
RET = 91149758563007008021450111484499210161_u128 + 143731308023858214140905372807695941577_u128;
_3 = _9 as u16;
_3 = !_4;
_5 = 869301837_u32 as f64;
RET = _8 as u128;
RET = 243441510948176583498594879690371721827_u128;
_1 = [_10];
_7 = _2 * _2;
_9 = !(-110670897193448141541730709305216417414_i128);
_4 = _3 + _3;
match RET {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
4 => bb7,
5 => bb8,
243441510948176583498594879690371721827 => bb10,
_ => bb9
}
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_7 = (-82_isize) as i16;
RET = 315667853788410996745138150071200697559_u128 - 268054539836369076991410016876646679406_u128;
_2 = true as i16;
RET = true as u128;
_8 = 1375980065_u32 as usize;
_9 = -106845820725878560482160892630184470331_i128;
RET = !139518284406226595878881268496855364485_u128;
RET = 113494832029413043681711966196922378708_u128 * 34973506439160494965609376581564590686_u128;
RET = 261839232259761105651307440563665354217_u128;
_2 = _7;
_3 = _4 & _4;
_9 = RET as i128;
RET = 272906871161393973596008584987120659786_u128;
RET = !71986920588587666701530118334205954068_u128;
_2 = _7 << _7;
_11 = 1766658743_i32 as isize;
_4 = _3 + _3;
RET = _9 as u128;
_4 = !_3;
_1 = [_10];
_4 = _3;
_13 = [18_u8];
_4 = _3;
_12 = [_2,_2,_2,_7,_7,_2];
Call(_2 = fn5(_4, _12), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
RET = 287194386732136619013800695114548244865_u128;
_14 = [_11,_11,_11,_11];
RET = 163137753476695121732176840312212503505_u128;
_15 = !_2;
_10 = '\u{482e9}';
_15 = _2 >> _4;
_13 = [210_u8];
_5 = 667840710_u32 as f64;
_7 = _15 >> _15;
_3 = _4 | _4;
_14 = [_11,_11,_11,_11];
_10 = '\u{51ab}';
_13 = [158_u8];
_17 = [false,false];
_14 = [_11,_11,_11,_11];
RET = 106507391567929166416235081441154119219_u128 + 89750527731300723744252297273769259493_u128;
_7 = _15 << _15;
_7 = _15;
_18 = _5 * _5;
_15 = 99_u8 as i16;
_8 = 5_usize ^ 193286968801497794_usize;
_11 = 9223372036854775807_isize;
RET = _11 as u128;
_14 = [_11,_11,_11,_11];
RET = 31145772030480991165430007120826455202_u128 | 56761820024762401539602602653807164310_u128;
Goto(bb12)
}
bb12 = {
_14 = [_11,_11,_11,_11];
RET = 90833369500540797278148987912790320409_u128 >> _2;
_7 = _2 + _2;
_18 = -_5;
_8 = !14501987039587231066_usize;
_18 = -_5;
_5 = RET as f64;
_3 = _4;
_21 = _8 | _8;
_19 = [_11,_11,_11,_11];
_9 = (-97847130057619159851320341893395243500_i128) & (-116672113105907532917716750040901849778_i128);
_5 = _18;
_11 = -(-9223372036854775808_isize);
RET = 12251191590625802409_u64 as u128;
_11 = (-43_isize) + (-13_isize);
_22 = _2 >= _2;
_19 = _14;
_19 = [_11,_11,_11,_11];
Goto(bb13)
}
bb13 = {
_10 = '\u{f48b5}';
_7 = RET as i16;
_15 = _2;
_24.fld2 = [_10];
_10 = '\u{831c0}';
_19 = [_11,_11,_11,_11];
_24.fld1 = _10;
_1 = [_24.fld1];
_17 = [_22,_22];
_15 = _2;
_29 = [163_u8];
_5 = -_18;
_24.fld2 = [_24.fld1];
_22 = true;
_30.2 = (188346137_i32, (-8767312715282587276_i64), _10);
_28 = _30.2.2;
_19 = [_11,_11,_11,_11];
_3 = _4 ^ _4;
_28 = _30.2.2;
_24.fld5 = _3 - _4;
_30.2.0 = _11 as i32;
Goto(bb14)
}
bb14 = {
RET = 84962728879907412057250773149685818216_u128 >> _2;
_27 = _5 + _18;
_30.0.2 = !_21;
RET = !195891578208519389966585464469155293570_u128;
_24 = Adt43 { fld0: _12,fld1: _28,fld2: _1,fld3: 84_u8,fld4: _19,fld5: _3 };
_26 = _10;
_12 = _24.fld0;
_18 = _27 - _27;
_5 = _27;
_7 = _2 - _15;
_12 = [_7,_7,_7,_7,_2,_7];
RET = !335307512209912468035354235843243640580_u128;
_30.3 = [_7,_7,_7,_7,_15,_7];
_30.0.0 = _24.fld3 as u32;
_18 = _5;
_20 = -_11;
RET = 258218435657822523601137133517249417706_u128 + 40216167738565116221416301716136248911_u128;
_29 = _13;
_30.1 = !_30.2.1;
_11 = _28 as isize;
_24.fld0 = [_2,_7,_7,_7,_15,_2];
_30.0.0 = _30.2.0 as u32;
_12 = _30.3;
_5 = _21 as f64;
_5 = -_18;
_32 = _5;
_10 = _26;
Goto(bb15)
}
bb15 = {
Call(_34 = dump_var(4_usize, 1_usize, Move(_1), 20_usize, Move(_20), 22_usize, Move(_22), 13_usize, Move(_13)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_34 = dump_var(4_usize, 19_usize, Move(_19), 28_usize, Move(_28), 12_usize, Move(_12), 11_usize, Move(_11)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_34 = dump_var(4_usize, 9_usize, Move(_9), 29_usize, Move(_29), 35_usize, _35, 35_usize, _35), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn5(mut _1: u16,mut _2: [i16; 6]) -> i16 {
mir! {
type RET = i16;
let _3: ((u32, isize, usize, i16), i64, (i32, i64, char), [i16; 6]);
let _4: [u32; 1];
let _5: *mut [i128; 8];
let _6: (([i16; 6],), u8, ([i16; 6],), *const bool);
let _7: isize;
let _8: [bool; 8];
let _9: u64;
let _10: bool;
let _11: *const u64;
let _12: f64;
let _13: f64;
let _14: Adt55;
let _15: Adt51;
let _16: (*mut [i128; 8], *const [i16; 5]);
let _17: char;
let _18: u32;
let _19: &'static [i16; 6];
let _20: Adt51;
let _21: ([i16; 6],);
let _22: ();
let _23: ();
{
RET = (-26377_i16) + (-31343_i16);
_2 = [RET,RET,RET,RET,RET,RET];
_1 = 27004_u16;
RET = (-16234_i16);
_2 = [RET,RET,RET,RET,RET,RET];
_3.1 = (-8820736560769662190_i64) >> _1;
_3.0.0 = 1279805003_u32;
_3.0.1 = -44_isize;
_3.2.2 = '\u{fd7c7}';
_3.2.2 = '\u{ab7b1}';
RET = (-15763_i16);
_3.2.2 = '\u{1efb3}';
Goto(bb1)
}
bb1 = {
_3.2 = ((-626639355_i32), _3.1, '\u{67fa2}');
_3.2.0 = -1710998130_i32;
_3.2.2 = '\u{f7569}';
_4 = [_3.0.0];
_3.0.0 = 1277863847_u32 - 2530948444_u32;
_3.0.2 = 0_usize >> _3.1;
_1 = !50740_u16;
RET = 26397_i16;
RET = -(-7832_i16);
_3.0.3 = RET + RET;
_4 = [_3.0.0];
_6.1 = 210_u8 ^ 106_u8;
_8 = [false,false,true,false,false,true,false,true];
_6.0.0 = [_3.0.3,_3.0.3,RET,_3.0.3,_3.0.3,_3.0.3];
_6.2.0 = [_3.0.3,_3.0.3,RET,RET,_3.0.3,_3.0.3];
_4 = [_3.0.0];
_3.2.1 = _3.1;
_2 = _6.2.0;
_3.3 = [_3.0.3,RET,_3.0.3,_3.0.3,_3.0.3,_3.0.3];
Goto(bb2)
}
bb2 = {
_3.2 = (1607721112_i32, _3.1, '\u{6839d}');
_3.2.1 = _3.1 - _3.1;
_3.0.1 = (-9223372036854775808_isize) | 94_isize;
_6.1 = !41_u8;
RET = _3.0.3;
Call(_6.0.0 = fn6(_3.2.2, _3.0.1, _3.0.1, _3.0.2), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_8 = [false,false,false,false,true,false,true,true];
_7 = _6.1 as isize;
_3.0.2 = !7_usize;
_3.2.1 = _1 as i64;
_3.0.2 = _3.0.0 as usize;
_3.0.3 = 106_i8 as i16;
_8 = [false,false,true,true,true,false,false,true];
_3.2.2 = '\u{56a6a}';
_6.2.0 = _6.0.0;
_3.0.1 = !_7;
_3.2.1 = -_3.1;
_6.0 = (_6.2.0,);
_6.2 = _6.0;
_3.2.1 = _3.1 + _3.1;
_1 = !26645_u16;
_6.1 = !79_u8;
_2 = _6.2.0;
_3.0.1 = _7;
_3.2.2 = '\u{bb332}';
_6.0.0 = [_3.0.3,_3.0.3,_3.0.3,RET,_3.0.3,RET];
RET = false as i16;
_7 = (-1_i8) as isize;
RET = _3.1 as i16;
_6.0 = _6.2;
match _3.2.0 {
0 => bb1,
1 => bb2,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
6 => bb8,
1607721112 => bb10,
_ => bb9
}
}
bb4 = {
_3.2 = (1607721112_i32, _3.1, '\u{6839d}');
_3.2.1 = _3.1 - _3.1;
_3.0.1 = (-9223372036854775808_isize) | 94_isize;
_6.1 = !41_u8;
RET = _3.0.3;
Call(_6.0.0 = fn6(_3.2.2, _3.0.1, _3.0.1, _3.0.2), ReturnTo(bb3), UnwindUnreachable())
}
bb5 = {
_3.2 = ((-626639355_i32), _3.1, '\u{67fa2}');
_3.2.0 = -1710998130_i32;
_3.2.2 = '\u{f7569}';
_4 = [_3.0.0];
_3.0.0 = 1277863847_u32 - 2530948444_u32;
_3.0.2 = 0_usize >> _3.1;
_1 = !50740_u16;
RET = 26397_i16;
RET = -(-7832_i16);
_3.0.3 = RET + RET;
_4 = [_3.0.0];
_6.1 = 210_u8 ^ 106_u8;
_8 = [false,false,true,false,false,true,false,true];
_6.0.0 = [_3.0.3,_3.0.3,RET,_3.0.3,_3.0.3,_3.0.3];
_6.2.0 = [_3.0.3,_3.0.3,RET,RET,_3.0.3,_3.0.3];
_4 = [_3.0.0];
_3.2.1 = _3.1;
_2 = _6.2.0;
_3.3 = [_3.0.3,RET,_3.0.3,_3.0.3,_3.0.3,_3.0.3];
Goto(bb2)
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_9 = 14601386453082656641_u64;
_10 = !false;
_4 = [_3.0.0];
_12 = 121616961041781671317313968560511915386_u128 as f64;
_2 = [RET,_3.0.3,_3.0.3,RET,RET,_3.0.3];
_6.3 = core::ptr::addr_of!(_10);
_3.3 = [RET,_3.0.3,RET,RET,RET,RET];
_6.3 = core::ptr::addr_of!(_10);
Call(_3.0.0 = core::intrinsics::bswap(2376048079_u32), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_3.0 = (390259635_u32, _7, 1465310993638638069_usize, RET);
_10 = !true;
_13 = _3.0.2 as f64;
_3.1 = _3.0.0 as i64;
_3.2.1 = _3.1 >> _3.1;
_9 = _6.1 as u64;
_12 = -_13;
_6.3 = core::ptr::addr_of!(_10);
_11 = core::ptr::addr_of!(_9);
_3.0.1 = _3.1 as isize;
_3.0.2 = 4_usize;
RET = _3.0.3;
_3.0.1 = _3.0.0 as isize;
_3.2.1 = -_3.1;
_9 = _6.1 as u64;
_13 = 49619664459814453200541857965986024516_u128 as f64;
_3.2.0 = _7 as i32;
_9 = RET as u64;
_2 = [_3.0.3,RET,_3.0.3,_3.0.3,_3.0.3,_3.0.3];
_12 = _13 + _13;
_2 = _6.2.0;
_7 = -_3.0.1;
_3.0 = (3843394455_u32, _7, 4_usize, RET);
_6.2 = (_6.0.0,);
Call(RET = fn13(_6.0.0, _6.2.0, _3.2.1, _6.0.0), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
_1 = !37190_u16;
_6.2 = _6.0;
_2 = [_3.0.3,_3.0.3,_3.0.3,_3.0.3,_3.0.3,_3.0.3];
_3.0.0 = 1103213839_u32;
_6.2.0 = [RET,_3.0.3,RET,_3.0.3,RET,_3.0.3];
_3.0.2 = !15208334030249371206_usize;
_19 = &_6.2.0;
_4 = [_3.0.0];
_8 = [_10,_10,_10,_10,_10,_10,_10,_10];
Call(_3.0.1 = fn19(_6.0.0, _3.0.0, _6.2.0, _6, _7, _6.0.0), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
RET = _3.0.3;
_13 = _12;
_3.0.3 = _3.0.1 as i16;
_6.2.0 = [_3.0.3,_3.0.3,_3.0.3,_3.0.3,_3.0.3,_3.0.3];
_8 = [_10,_10,_10,_10,_10,_10,_10,_10];
_18 = _1 as u32;
_11 = core::ptr::addr_of!((*_11));
_17 = _3.2.2;
_3.1 = _3.2.1;
_4 = [_3.0.0];
_13 = _12 - _12;
RET = -_3.0.3;
_3.2.2 = _17;
_10 = _7 == _7;
Goto(bb14)
}
bb14 = {
Call(_22 = dump_var(5_usize, 7_usize, Move(_7), 4_usize, Move(_4), 1_usize, Move(_1), 3_usize, Move(_3)), ReturnTo(bb15), UnwindUnreachable())
}
bb15 = {
Call(_22 = dump_var(5_usize, 17_usize, Move(_17), 23_usize, _23, 23_usize, _23, 23_usize, _23), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn6(mut _1: char,mut _2: isize,mut _3: isize,mut _4: usize) -> [i16; 6] {
mir! {
type RET = [i16; 6];
let _5: f32;
let _6: isize;
let _7: Adt51;
let _8: isize;
let _9: *const bool;
let _10: ((u32, isize, usize, i16), i64, (i32, i64, char), [i16; 6]);
let _11: ((u32, isize, usize, i16), i64, (i32, i64, char), [i16; 6]);
let _12: bool;
let _13: [i128; 8];
let _14: ();
let _15: ();
{
RET = [10281_i16,1244_i16,2921_i16,(-5261_i16),(-23914_i16),24686_i16];
RET = [(-6804_i16),18758_i16,31289_i16,29008_i16,(-8403_i16),24646_i16];
RET = [(-13358_i16),(-21436_i16),543_i16,28188_i16,(-23763_i16),(-11513_i16)];
_4 = !0_usize;
_5 = 63_i8 as f32;
_5 = (-2052221674038853432_i64) as f32;
_4 = 3034742120364254609_usize;
RET = [(-30931_i16),5040_i16,16090_i16,(-21794_i16),4212_i16,26652_i16];
_6 = _2 + _3;
_1 = '\u{a68a5}';
RET = [(-7255_i16),(-18553_i16),(-28689_i16),17122_i16,27367_i16,(-24058_i16)];
RET = [(-30577_i16),(-6765_i16),(-25725_i16),2368_i16,(-12028_i16),(-27183_i16)];
_8 = _2;
RET = [10298_i16,19127_i16,25191_i16,(-16766_i16),(-32082_i16),22631_i16];
Call(_6 = fn7(_4, _1, RET, _1, RET, _2, RET, RET, RET, _2, _8, RET), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_4 = !6_usize;
_10.2.2 = _1;
_10.0.1 = _6 | _6;
_10.0 = (656296285_u32, _6, _4, (-23215_i16));
_11.2.1 = (-5800171845909228349_i64) - 8599750344775187389_i64;
_11.0 = (_10.0.0, _6, _10.0.2, _10.0.3);
_11.2.0 = (-413451500_i32);
_9 = core::ptr::addr_of!(_12);
RET = [_11.0.3,_11.0.3,_11.0.3,_11.0.3,_10.0.3,_10.0.3];
_10.2.2 = _1;
_9 = core::ptr::addr_of!((*_9));
_11.2.1 = (-3748012801267192540_i64);
_10.2.1 = 189_u8 as i64;
_10.2.0 = -_11.2.0;
_10.1 = !_10.2.1;
_11 = (_10.0, _10.1, _10.2, RET);
_10.3 = RET;
_10.1 = true as i64;
_11 = _10;
_11.2 = (_10.2.0, _11.1, _10.2.2);
_11.0 = (_10.0.0, _10.0.1, _4, _10.0.3);
_11.2 = (_10.2.0, _11.1, _10.2.2);
_11.0.1 = _10.0.1 * _6;
_12 = !true;
Goto(bb2)
}
bb2 = {
Call(_14 = dump_var(6_usize, 12_usize, Move(_12), 2_usize, Move(_2), 1_usize, Move(_1), 11_usize, Move(_11)), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn7(mut _1: usize,mut _2: char,mut _3: [i16; 6],mut _4: char,mut _5: [i16; 6],mut _6: isize,mut _7: [i16; 6],mut _8: [i16; 6],mut _9: [i16; 6],mut _10: isize,mut _11: isize,mut _12: [i16; 6]) -> isize {
mir! {
type RET = isize;
let _13: [u8; 4];
let _14: [bool; 2];
let _15: Adt44;
let _16: [bool; 2];
let _17: u128;
let _18: i32;
let _19: ([i16; 6],);
let _20: ([i16; 6],);
let _21: Adt48;
let _22: u64;
let _23: Adt55;
let _24: u128;
let _25: Adt46;
let _26: bool;
let _27: char;
let _28: [char; 1];
let _29: isize;
let _30: usize;
let _31: isize;
let _32: [u32; 1];
let _33: (([i16; 6],), u8, ([i16; 6],), *const bool);
let _34: u128;
let _35: ();
let _36: ();
{
_6 = _10;
_5 = [(-8883_i16),30362_i16,(-23786_i16),(-20435_i16),19649_i16,(-8877_i16)];
_6 = 11876_i16 as isize;
_5 = [21518_i16,(-15368_i16),21348_i16,(-4342_i16),9804_i16,5462_i16];
_3 = [27176_i16,30213_i16,27759_i16,(-14312_i16),(-10141_i16),(-6501_i16)];
_1 = _2 as usize;
_6 = 16418_i16 as isize;
_10 = 623322067_i32 as isize;
RET = _11 >> _11;
RET = _11;
_7 = _9;
RET = 4645_u16 as isize;
RET = !_11;
_6 = RET | RET;
_13 = [38_u8,7_u8,36_u8,250_u8];
_3 = [28084_i16,10948_i16,1659_i16,32583_i16,22362_i16,288_i16];
_3 = [22080_i16,24963_i16,(-17719_i16),16492_i16,(-26225_i16),26360_i16];
_3 = [(-20374_i16),(-26693_i16),26817_i16,(-4748_i16),8312_i16,31798_i16];
_12 = _7;
_9 = [(-16600_i16),5518_i16,22959_i16,(-13959_i16),(-8137_i16),9643_i16];
_3 = [11593_i16,9078_i16,(-4105_i16),7594_i16,(-4385_i16),(-8357_i16)];
_8 = [7872_i16,(-16639_i16),(-6624_i16),(-28148_i16),(-24471_i16),5992_i16];
_13 = [9_u8,95_u8,81_u8,164_u8];
_10 = -_6;
_9 = [(-6453_i16),(-28314_i16),7309_i16,(-4900_i16),(-24028_i16),21766_i16];
_3 = [6222_i16,29751_i16,(-17286_i16),(-9335_i16),(-28267_i16),(-27236_i16)];
RET = 182071310152493137897745208386494988759_u128 as isize;
Goto(bb1)
}
bb1 = {
_9 = _8;
_1 = 4_usize;
_6 = 45697753252428133145563483052247314571_i128 as isize;
_12 = _9;
Goto(bb2)
}
bb2 = {
_6 = RET + _10;
_1 = _8[_1] as usize;
_15.fld3.3 = [(-27045_i16),(-1694_i16),5502_i16,26888_i16,7703_i16,26471_i16];
_15.fld3.0.3 = true as i16;
_15.fld3.3 = _5;
_16 = [true,true];
_11 = _10 ^ _6;
_15.fld3.2.0 = 1775984713_i32;
_15.fld5 = _15.fld3.0.3 as i32;
_17 = 160299797029317899976702435532453838118_u128 - 236334461974473665655916892621845681842_u128;
_15.fld3.0.3 = 4144320208946523969_i64 as i16;
_15.fld0 = _10 != _6;
_9 = [_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3];
_15.fld3.3 = [_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3];
_15.fld3.2 = (_15.fld5, 6369582816567392436_i64, _2);
match _15.fld3.2.1 {
0 => bb1,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
6369582816567392436 => bb9,
_ => bb8
}
}
bb3 = {
_9 = _8;
_1 = 4_usize;
_6 = 45697753252428133145563483052247314571_i128 as isize;
_12 = _9;
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
_15.fld3.0.0 = !459106528_u32;
_11 = _15.fld3.0.3 as isize;
_15.fld3.0.3 = (-24115_i16);
_18 = 14660180349336463397_u64 as i32;
_15.fld2 = _10 >> _6;
_15.fld3.0.3 = _15.fld3.2.0 as i16;
_15.fld3.0.3 = _4 as i16;
_17 = 327872317769641637666659780636667164242_u128 >> _6;
_5 = _3;
_15.fld3.0.2 = _17 as usize;
_15.fld4 = _1 ^ _15.fld3.0.2;
_2 = _15.fld3.2.2;
_7 = [_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3];
_19.0 = _5;
_19.0 = _12;
RET = -_15.fld2;
_15.fld3.0 = (3615358203_u32, RET, _1, (-6235_i16));
_15.fld3.0 = (3968118541_u32, _6, _15.fld4, 8987_i16);
_8 = [_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3];
_15.fld3.0.3 = -(-5930_i16);
_19.0 = [_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3];
_10 = -RET;
Goto(bb10)
}
bb10 = {
_15.fld3.3 = [_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3];
_15.fld3.2.1 = 246_u8 as i64;
_1 = (-90960551476301278336700482696722594596_i128) as usize;
_15.fld3.0 = (1931315436_u32, RET, _15.fld4, 13052_i16);
_15.fld3.2.1 = 271427372386519491_u64 as i64;
_14 = [_15.fld0,_15.fld0];
_7 = [_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3];
_15.fld3.0.1 = _6 ^ RET;
_4 = _15.fld3.2.2;
_15.fld3.1 = 16219295502991377490_u64 as i64;
_15.fld3.2 = (_18, _15.fld3.1, _2);
_15.fld0 = !true;
_15.fld3.0 = (406316402_u32, _15.fld2, _15.fld4, 14019_i16);
_12 = [_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3];
_15.fld3.3 = _3;
_17 = !62705742850616706982553662101766308615_u128;
_15.fld3.0.3 = (-21167_i16);
_15.fld0 = RET > _15.fld3.0.1;
Goto(bb11)
}
bb11 = {
_16 = _14;
_15.fld2 = _15.fld3.0.3 as isize;
_2 = _4;
_15.fld3.2.0 = _15.fld3.0.0 as i32;
_19.0 = [_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3];
_20 = (_8,);
_15.fld1 = core::ptr::addr_of!(_26);
_15.fld3.3 = [_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3];
_26 = _15.fld3.0.2 == _15.fld4;
_15.fld3.1 = _15.fld3.2.1 + _15.fld3.2.1;
_7 = [_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3];
_10 = RET;
_15.fld3.0.2 = _15.fld4;
_20 = (_8,);
_18 = _15.fld3.2.0 - _15.fld3.2.0;
_8 = [_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3];
_13 = [194_u8,5_u8,162_u8,179_u8];
_28 = [_15.fld3.2.2];
_11 = _6 & _10;
_19 = _20;
_22 = !11712083388709150909_u64;
match _15.fld3.0.0 {
0 => bb3,
406316402 => bb12,
_ => bb8
}
}
bb12 = {
_15.fld4 = !_15.fld3.0.2;
_15.fld3.0.3 = -(-11456_i16);
Call(_15.fld3.0.2 = fn8(_18, _12, _3, _15.fld3.0.0, _20.0), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
_7 = [_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3];
_29 = _15.fld3.0.1 - _11;
_24 = !_17;
_15.fld3.0.3 = !11349_i16;
RET = _15.fld3.0.0 as isize;
_7 = [_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3,_15.fld3.0.3];
Goto(bb14)
}
bb14 = {
Call(_35 = dump_var(7_usize, 17_usize, Move(_17), 18_usize, Move(_18), 7_usize, Move(_7), 28_usize, Move(_28)), ReturnTo(bb15), UnwindUnreachable())
}
bb15 = {
Call(_35 = dump_var(7_usize, 1_usize, Move(_1), 16_usize, Move(_16), 24_usize, Move(_24), 19_usize, Move(_19)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_35 = dump_var(7_usize, 5_usize, Move(_5), 2_usize, Move(_2), 13_usize, Move(_13), 10_usize, Move(_10)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn8(mut _1: i32,mut _2: [i16; 6],mut _3: [i16; 6],mut _4: u32,mut _5: [i16; 6]) -> usize {
mir! {
type RET = usize;
let _6: &'static [i16; 6];
let _7: i16;
let _8: (u32, isize, usize, i16);
let _9: (u32, isize, usize, i16);
let _10: usize;
let _11: [bool; 2];
let _12: Adt47;
let _13: i64;
let _14: f32;
let _15: u8;
let _16: [i128; 8];
let _17: u64;
let _18: char;
let _19: Adt46;
let _20: (f64, u128);
let _21: *mut u16;
let _22: [u8; 4];
let _23: (u64,);
let _24: isize;
let _25: f32;
let _26: i8;
let _27: Adt55;
let _28: [u8; 1];
let _29: Adt59;
let _30: ((u32, isize, usize, i16), i64, (i32, i64, char), [i16; 6]);
let _31: Adt45;
let _32: [u32; 1];
let _33: [u8; 4];
let _34: ();
let _35: ();
{
_1 = -(-1745144866_i32);
Goto(bb1)
}
bb1 = {
_4 = 14891_i16 as u32;
_2 = [(-25184_i16),10670_i16,27180_i16,17245_i16,(-4291_i16),26094_i16];
Goto(bb2)
}
bb2 = {
_4 = 2953211833_u32;
_4 = 29524_i16 as u32;
RET = 6_usize << _1;
_3 = [(-14601_i16),653_i16,(-27849_i16),(-27418_i16),(-9146_i16),(-11266_i16)];
_2 = [(-22036_i16),7922_i16,(-6527_i16),5433_i16,(-12264_i16),7040_i16];
_6 = &_5;
_6 = &_3;
_6 = &_2;
RET = 7_usize;
_8.0 = _4 & _4;
_8.2 = RET % RET;
_7 = !(-1374_i16);
_8.0 = 35_u8 as u32;
_8.0 = !_4;
RET = _8.2 << _8.2;
_6 = &_2;
_8.0 = _4 ^ _4;
_8.1 = (-6929276365732026310_i64) as isize;
_8.2 = 201_u8 as usize;
_8 = (_4, (-9223372036854775808_isize), RET, _7);
Goto(bb3)
}
bb3 = {
_2 = [_8.3,_7,_8.3,_7,_8.3,_7];
_9 = _8;
_6 = &_5;
_8.0 = _4;
_9 = (_4, _8.1, _8.2, _7);
RET = !_9.2;
_8.2 = (-37146657028990869095013451909540625669_i128) as usize;
_4 = _9.0 ^ _8.0;
RET = _8.2;
_8.3 = !_9.3;
_8.1 = 30288_u16 as isize;
_5 = _3;
_9 = (_8.0, _8.1, RET, _8.3);
_3 = [_7,_9.3,_9.3,_9.3,_8.3,_9.3];
_8 = _9;
_11 = [false,true];
_8.2 = RET << _1;
RET = _8.2;
Call(_2 = fn9(_9.0, _8.2, _9, _11, _9.1, _8.2, _4, _9.1, _8.0, _3, _9.1, _8.0, _5, _8.1, _7), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_8.3 = -_9.3;
_9.1 = _8.1 & _8.1;
_7 = _9.3 - _8.3;
_7 = _9.3 ^ _8.3;
_8.2 = _1 as usize;
_8 = (_9.0, _9.1, RET, _7);
_10 = _8.2;
_9.3 = _7;
_1 = (-882331957_i32);
_9 = (_4, _8.1, _8.2, _7);
_8.0 = !_9.0;
_7 = _8.3 * _8.3;
_8 = _9;
_9 = (_8.0, _8.1, _8.2, _8.3);
RET = !_9.2;
Goto(bb5)
}
bb5 = {
_13 = !(-4745317584932717256_i64);
_10 = !RET;
_13 = 117749098893760614223775118785567968332_i128 as i64;
_14 = _13 as f32;
_11 = [true,false];
_9.1 = _8.1 | _8.1;
RET = _10;
_13 = 6384209836572154873_i64 << _8.1;
_6 = &_3;
_6 = &_3;
_6 = &_2;
_5 = (*_6);
_11 = [false,false];
match _1 {
0 => bb6,
340282366920938463463374607430885879499 => bb8,
_ => bb7
}
}
bb6 = {
_4 = 2953211833_u32;
_4 = 29524_i16 as u32;
RET = 6_usize << _1;
_3 = [(-14601_i16),653_i16,(-27849_i16),(-27418_i16),(-9146_i16),(-11266_i16)];
_2 = [(-22036_i16),7922_i16,(-6527_i16),5433_i16,(-12264_i16),7040_i16];
_6 = &_5;
_6 = &_3;
_6 = &_2;
RET = 7_usize;
_8.0 = _4 & _4;
_8.2 = RET % RET;
_7 = !(-1374_i16);
_8.0 = 35_u8 as u32;
_8.0 = !_4;
RET = _8.2 << _8.2;
_6 = &_2;
_8.0 = _4 ^ _4;
_8.1 = (-6929276365732026310_i64) as isize;
_8.2 = 201_u8 as usize;
_8 = (_4, (-9223372036854775808_isize), RET, _7);
Goto(bb3)
}
bb7 = {
_4 = 14891_i16 as u32;
_2 = [(-25184_i16),10670_i16,27180_i16,17245_i16,(-4291_i16),26094_i16];
Goto(bb2)
}
bb8 = {
_1 = 910303977_i32 ^ (-184096960_i32);
_17 = 7677138667614312842_u64 << _9.1;
_4 = _9.0 * _8.0;
_9.3 = _7 << _8.0;
_9.2 = 17794_u16 as usize;
_2 = _3;
_8.0 = _1 as u32;
_3 = [_7,_9.3,_9.3,_9.3,_9.3,_7];
_9.0 = (-28_i8) as u32;
_1 = (-1010930021_i32);
_8.2 = !_10;
_15 = 26_u8;
_8.3 = _7;
_9.0 = false as u32;
_8.1 = -_9.1;
_2 = [_9.3,_8.3,_7,_7,_9.3,_8.3];
_9.1 = !_8.1;
_10 = _8.2 | _8.2;
_8.0 = _4;
Goto(bb9)
}
bb9 = {
_15 = 138_u8;
_8.3 = _9.3;
_5 = [_7,_9.3,_7,_9.3,_7,_9.3];
_8.1 = -_9.1;
_8.1 = 14170_u16 as isize;
_17 = !7606249523728535007_u64;
_14 = _13 as f32;
_1 = 1071879853_i32 + (-1864506399_i32);
Goto(bb10)
}
bb10 = {
_11 = [true,true];
_16 = [112866662346067630876404778449079154377_i128,(-153810117513024962831162278779130644319_i128),(-82541745338170258177898586666260241096_i128),9860804803932874006923979485664185472_i128,(-16340262042533207850160246231108444822_i128),22797500655718971819100442471806507051_i128,74515835910524455369156435857879030111_i128,(-61428581421308798698939542049092776573_i128)];
Goto(bb11)
}
bb11 = {
_9.1 = !_8.1;
_16 = [(-95770427547047844282600668758935921525_i128),(-134538471379136118188430478782920407514_i128),81102747584110772855699948073629895879_i128,20250174462233931992360282996335376235_i128,(-64451249091881354021819205142525660626_i128),74276808570426349676599607577503506216_i128,52555912365914893828753633052360600375_i128,(-72600166792532356292091124167899564476_i128)];
_2 = [_8.3,_8.3,_7,_7,_7,_8.3];
_9.1 = (-104834330200044603269865090468976914594_i128) as isize;
_7 = _8.3 - _8.3;
_20.1 = 35198_u16 as u128;
_7 = _17 as i16;
_8.2 = _1 as usize;
_9.1 = _8.1;
_9 = (_4, _8.1, _10, _8.3);
_15 = !96_u8;
Goto(bb12)
}
bb12 = {
_17 = 315618838222700217_u64;
_11 = [true,true];
_6 = &_5;
_7 = _9.3 + _8.3;
_8.2 = !_9.2;
_1 = _13 as i32;
_23.0 = true as u64;
RET = '\u{2a134}' as usize;
_20.0 = _15 as f64;
_22 = [_15,_15,_15,_15];
_9.3 = _9.2 as i16;
_8.2 = !_10;
_3 = [_8.3,_9.3,_9.3,_7,_7,_8.3];
_5 = [_7,_9.3,_8.3,_7,_7,_8.3];
_18 = '\u{ba746}';
_8.0 = _4 << _8.3;
_1 = 1525004580_i32 ^ (-1357051123_i32);
_4 = _9.0 + _8.0;
_11 = [false,true];
Call(_9.3 = core::intrinsics::transmute(_7), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
_6 = &_5;
_6 = &_2;
_24 = _9.1 + _9.1;
_6 = &_3;
_14 = _8.1 as f32;
_6 = &(*_6);
_15 = 249_u8 ^ 190_u8;
_8.3 = !_7;
_8.1 = _18 as isize;
_8.0 = !_4;
_9.2 = _8.2 ^ _8.2;
_8.3 = _9.1 as i16;
_1 = _14 as i32;
_27 = Adt55::Variant1 { fld0: 42977_u16 };
_30.1 = _13 & _13;
_30.2.2 = _18;
_21 = core::ptr::addr_of_mut!(place!(Field::<u16>(Variant(_27, 1), 0)));
_26 = _9.2 as i8;
_30.0.1 = -_24;
_30.0.2 = _10 << _8.0;
match _17 {
0 => bb3,
1 => bb14,
2 => bb15,
3 => bb16,
4 => bb17,
315618838222700217 => bb19,
_ => bb18
}
}
bb14 = {
_17 = 315618838222700217_u64;
_11 = [true,true];
_6 = &_5;
_7 = _9.3 + _8.3;
_8.2 = !_9.2;
_1 = _13 as i32;
_23.0 = true as u64;
RET = '\u{2a134}' as usize;
_20.0 = _15 as f64;
_22 = [_15,_15,_15,_15];
_9.3 = _9.2 as i16;
_8.2 = !_10;
_3 = [_8.3,_9.3,_9.3,_7,_7,_8.3];
_5 = [_7,_9.3,_8.3,_7,_7,_8.3];
_18 = '\u{ba746}';
_8.0 = _4 << _8.3;
_1 = 1525004580_i32 ^ (-1357051123_i32);
_4 = _9.0 + _8.0;
_11 = [false,true];
Call(_9.3 = core::intrinsics::transmute(_7), ReturnTo(bb13), UnwindUnreachable())
}
bb15 = {
_9.1 = !_8.1;
_16 = [(-95770427547047844282600668758935921525_i128),(-134538471379136118188430478782920407514_i128),81102747584110772855699948073629895879_i128,20250174462233931992360282996335376235_i128,(-64451249091881354021819205142525660626_i128),74276808570426349676599607577503506216_i128,52555912365914893828753633052360600375_i128,(-72600166792532356292091124167899564476_i128)];
_2 = [_8.3,_8.3,_7,_7,_7,_8.3];
_9.1 = (-104834330200044603269865090468976914594_i128) as isize;
_7 = _8.3 - _8.3;
_20.1 = 35198_u16 as u128;
_7 = _17 as i16;
_8.2 = _1 as usize;
_9.1 = _8.1;
_9 = (_4, _8.1, _10, _8.3);
_15 = !96_u8;
Goto(bb12)
}
bb16 = {
_8.3 = -_9.3;
_9.1 = _8.1 & _8.1;
_7 = _9.3 - _8.3;
_7 = _9.3 ^ _8.3;
_8.2 = _1 as usize;
_8 = (_9.0, _9.1, RET, _7);
_10 = _8.2;
_9.3 = _7;
_1 = (-882331957_i32);
_9 = (_4, _8.1, _8.2, _7);
_8.0 = !_9.0;
_7 = _8.3 * _8.3;
_8 = _9;
_9 = (_8.0, _8.1, _8.2, _8.3);
RET = !_9.2;
Goto(bb5)
}
bb17 = {
_13 = !(-4745317584932717256_i64);
_10 = !RET;
_13 = 117749098893760614223775118785567968332_i128 as i64;
_14 = _13 as f32;
_11 = [true,false];
_9.1 = _8.1 | _8.1;
RET = _10;
_13 = 6384209836572154873_i64 << _8.1;
_6 = &_3;
_6 = &_3;
_6 = &_2;
_5 = (*_6);
_11 = [false,false];
match _1 {
0 => bb6,
340282366920938463463374607430885879499 => bb8,
_ => bb7
}
}
bb18 = {
_1 = 910303977_i32 ^ (-184096960_i32);
_17 = 7677138667614312842_u64 << _9.1;
_4 = _9.0 * _8.0;
_9.3 = _7 << _8.0;
_9.2 = 17794_u16 as usize;
_2 = _3;
_8.0 = _1 as u32;
_3 = [_7,_9.3,_9.3,_9.3,_9.3,_7];
_9.0 = (-28_i8) as u32;
_1 = (-1010930021_i32);
_8.2 = !_10;
_15 = 26_u8;
_8.3 = _7;
_9.0 = false as u32;
_8.1 = -_9.1;
_2 = [_9.3,_8.3,_7,_7,_9.3,_8.3];
_9.1 = !_8.1;
_10 = _8.2 | _8.2;
_8.0 = _4;
Goto(bb9)
}
bb19 = {
_9.0 = !_8.0;
_15 = _30.1 as u8;
_30.2.1 = !_13;
RET = _30.0.2;
_24 = !_30.0.1;
_31.fld4.fld4 = _30.0.2;
_31.fld4.fld3.0.3 = _9.3;
_31.fld2 = _20.0 * _20.0;
_31.fld4.fld3.2.2 = _30.2.2;
_22 = [_15,_15,_15,_15];
_31.fld4.fld3.0.1 = _1 as isize;
_31.fld4.fld3.2.1 = _13 & _30.1;
_31.fld3.fld2 = [_30.2.2];
_31.fld4.fld3.0.2 = !_31.fld4.fld4;
_8 = (_4, _30.0.1, _31.fld4.fld3.0.2, _7);
_31.fld3.fld1 = _30.2.2;
_30.2 = (_1, _30.1, _31.fld4.fld3.2.2);
_31.fld3.fld2 = [_31.fld3.fld1];
_18 = _31.fld4.fld3.2.2;
_28 = [_15];
_8.1 = _20.1 as isize;
_31.fld4.fld3.2.0 = _1;
_30 = (_8, _31.fld4.fld3.2.1, _31.fld4.fld3.2, (*_6));
_8.2 = _31.fld4.fld4;
_29.fld1.fld2 = _15 as isize;
_20.0 = -_31.fld2;
_8.1 = _29.fld1.fld2;
_21 = core::ptr::addr_of_mut!(_31.fld3.fld5);
Goto(bb20)
}
bb20 = {
Call(_34 = dump_var(8_usize, 26_usize, Move(_26), 2_usize, Move(_2), 16_usize, Move(_16), 11_usize, Move(_11)), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
Call(_34 = dump_var(8_usize, 4_usize, Move(_4), 22_usize, Move(_22), 1_usize, Move(_1), 15_usize, Move(_15)), ReturnTo(bb22), UnwindUnreachable())
}
bb22 = {
Call(_34 = dump_var(8_usize, 8_usize, Move(_8), 23_usize, Move(_23), 35_usize, _35, 35_usize, _35), ReturnTo(bb23), UnwindUnreachable())
}
bb23 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn9(mut _1: u32,mut _2: usize,mut _3: (u32, isize, usize, i16),mut _4: [bool; 2],mut _5: isize,mut _6: usize,mut _7: u32,mut _8: isize,mut _9: u32,mut _10: [i16; 6],mut _11: isize,mut _12: u32,mut _13: [i16; 6],mut _14: isize,mut _15: i16) -> [i16; 6] {
mir! {
type RET = [i16; 6];
let _16: &'static [i16; 6];
let _17: u128;
let _18: Adt44;
let _19: u64;
let _20: f64;
let _21: (u64,);
let _22: (i32, i64, char);
let _23: *const u64;
let _24: [bool; 8];
let _25: isize;
let _26: isize;
let _27: Adt52;
let _28: Adt51;
let _29: ();
let _30: ();
{
_4 = [true,true];
_6 = _2;
_5 = !_3.1;
_1 = 210539823984246666275709385272298637424_u128 as u32;
_1 = _7;
RET = [_3.3,_3.3,_3.3,_15,_3.3,_3.3];
_13 = [_15,_3.3,_15,_15,_15,_3.3];
_3.0 = _9;
RET = [_3.3,_15,_3.3,_15,_15,_15];
_11 = _8 ^ _8;
_15 = 14458118024634151500_u64 as i16;
RET = [_15,_3.3,_15,_3.3,_15,_15];
RET = [_3.3,_3.3,_15,_3.3,_3.3,_15];
_5 = 152114137697133313029906483296687756141_i128 as isize;
RET = [_15,_3.3,_15,_15,_15,_3.3];
RET = [_3.3,_3.3,_15,_3.3,_15,_15];
_7 = _1 & _12;
_2 = _6 + _3.2;
_4 = [false,true];
_6 = (-125_i8) as usize;
_5 = !_11;
RET = [_15,_3.3,_3.3,_3.3,_3.3,_3.3];
_8 = _14;
_3.2 = !_2;
_3.3 = _15;
_17 = 98095465256684108469488255638038987285_u128;
RET = [_3.3,_15,_3.3,_15,_3.3,_15];
_4 = [true,false];
RET = _10;
_15 = _3.3 << _11;
match _17 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb5,
5 => bb6,
6 => bb7,
98095465256684108469488255638038987285 => bb9,
_ => bb8
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
_8 = -_14;
_1 = !_3.0;
_18.fld3.0 = (_7, _14, _6, _15);
_16 = &_13;
_4 = [false,true];
_16 = &_13;
_18.fld1 = core::ptr::addr_of!(_18.fld0);
RET = [_15,_18.fld3.0.3,_3.3,_18.fld3.0.3,_18.fld3.0.3,_15];
_18.fld3.0.2 = _3.2;
_20 = 157164577571136356801743098014650989021_i128 as f64;
_18.fld0 = !true;
_21.0 = _2 as u64;
_12 = _9;
_21 = (902576638629596863_u64,);
match _17 {
98095465256684108469488255638038987285 => bb11,
_ => bb10
}
}
bb10 = {
Return()
}
bb11 = {
_18.fld4 = _3.2;
_18.fld3.2.0 = (-5775043639857229871_i64) as i32;
RET = (*_16);
_18.fld0 = false;
_18.fld3.2.1 = _18.fld3.2.0 as i64;
_25 = _3.1;
_18.fld2 = _5;
_3 = (_18.fld3.0.0, _11, _18.fld3.0.2, _18.fld3.0.3);
_14 = _21.0 as isize;
Goto(bb12)
}
bb12 = {
_1 = !_12;
_25 = _3.1 ^ _14;
_18.fld2 = _25;
_18.fld3.0 = _3;
_18.fld5 = '\u{a5b56}' as i32;
_21.0 = 13833708767726508320_u64;
_6 = _18.fld4 ^ _3.2;
_3 = (_7, _18.fld3.0.1, _2, _15);
_19 = _21.0 >> _11;
_4 = [_18.fld0,_18.fld0];
RET = _13;
_21.0 = _19;
_16 = &(*_16);
_20 = _21.0 as f64;
_1 = !_3.0;
_21.0 = _19;
_24 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_16 = &(*_16);
_6 = _3.2;
_23 = core::ptr::addr_of!(_21.0);
_22.1 = _18.fld3.2.1 + _18.fld3.2.1;
Call(_18.fld3.2.0 = fn10(_18.fld4, _2, _7, _3.1, _25, _21, _23, _3.3), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
_21 = (_19,);
match _17 {
0 => bb11,
1 => bb9,
2 => bb10,
3 => bb14,
4 => bb15,
98095465256684108469488255638038987285 => bb17,
_ => bb16
}
}
bb14 = {
Return()
}
bb15 = {
Return()
}
bb16 = {
Return()
}
bb17 = {
_4 = [_18.fld0,_18.fld0];
Goto(bb18)
}
bb18 = {
Call(_29 = dump_var(9_usize, 3_usize, Move(_3), 2_usize, Move(_2), 19_usize, Move(_19), 24_usize, Move(_24)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_29 = dump_var(9_usize, 25_usize, Move(_25), 10_usize, Move(_10), 12_usize, Move(_12), 14_usize, Move(_14)), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Call(_29 = dump_var(9_usize, 7_usize, Move(_7), 6_usize, Move(_6), 30_usize, _30, 30_usize, _30), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn10(mut _1: usize,mut _2: usize,mut _3: u32,mut _4: isize,mut _5: isize,mut _6: (u64,),mut _7: *const u64,mut _8: i16) -> i32 {
mir! {
type RET = i32;
let _9: char;
let _10: u64;
let _11: [bool; 2];
let _12: isize;
let _13: isize;
let _14: bool;
let _15: *const u64;
let _16: [char; 1];
let _17: Adt47;
let _18: ([i16; 6],);
let _19: f64;
let _20: char;
let _21: [i128; 8];
let _22: isize;
let _23: [u8; 1];
let _24: i128;
let _25: u8;
let _26: Adt58;
let _27: [u32; 1];
let _28: char;
let _29: isize;
let _30: (f64, u128);
let _31: i32;
let _32: ([i16; 6],);
let _33: isize;
let _34: f64;
let _35: Adt59;
let _36: (i32, i64, char);
let _37: [u32; 1];
let _38: (i32, i64, char);
let _39: [u32; 1];
let _40: (u64,);
let _41: (u32, isize, usize, i16);
let _42: ();
let _43: ();
{
RET = 1057139510_i32 >> _2;
_5 = _4 * _4;
_4 = -_5;
_10 = _6.0;
RET = (-81279535_i32) >> _4;
RET = 32205_u16 as i32;
RET = -(-118151307_i32);
_10 = _6.0;
_8 = -6453_i16;
_3 = !208506160_u32;
_5 = !_4;
_4 = _2 as isize;
_5 = !_4;
_9 = '\u{537b4}';
_4 = _5;
_7 = core::ptr::addr_of!(_6.0);
_6.0 = !_10;
_4 = _5 - _5;
_5 = -_4;
Call(RET = fn11(_5, _9, _5, _5), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
RET = !1093948761_i32;
_8 = (-14603_i16) << _2;
_1 = _2;
_1 = _2;
_9 = '\u{104dd0}';
_7 = core::ptr::addr_of!(_6.0);
Call(_13 = fn12(_4, _5, _4, _6.0, _10, (*_7), _6.0), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_4 = true as isize;
_5 = !_13;
_4 = !_13;
_8 = (-15447_i16);
RET = (-1345974794_i32);
_6.0 = !_10;
RET = !(-1750119813_i32);
_8 = (-2673_i16);
_14 = _5 == _13;
_8 = RET as i16;
_3 = 2311507081_u32 & 1793615574_u32;
_9 = '\u{80b03}';
RET = !(-992638539_i32);
_4 = !_5;
_13 = -_4;
_11 = [_14,_14];
_7 = core::ptr::addr_of!(_10);
_12 = _5;
_7 = core::ptr::addr_of!((*_7));
_11 = [_14,_14];
_4 = _9 as isize;
_13 = _5;
_16 = [_9];
_7 = core::ptr::addr_of!(_6.0);
_11 = [_14,_14];
RET = 357202221_i32 ^ (-1898057778_i32);
_5 = !_12;
_6 = (_10,);
Goto(bb3)
}
bb3 = {
_9 = '\u{d4f05}';
_6.0 = _10 + _10;
_3 = !1800879330_u32;
_6.0 = !_10;
_19 = (-87052213477317876584701248432681503401_i128) as f64;
_11 = [_14,_14];
_13 = _12;
_6 = (_10,);
_12 = _14 as isize;
_18.0 = [_8,_8,_8,_8,_8,_8];
_13 = RET as isize;
_11 = [_14,_14];
RET = (-1771770042_i32) | (-2004809975_i32);
_15 = _7;
_13 = -_12;
_6.0 = _10 ^ _10;
_14 = _5 >= _12;
_6.0 = !_10;
_10 = !(*_7);
_6.0 = _10;
_19 = 693005132757530744_i64 as f64;
_6.0 = _10;
RET = _14 as i32;
RET = (-1286371716_i32);
_4 = !_13;
_15 = _7;
_1 = !_2;
_2 = _1 | _1;
match RET {
0 => bb4,
1 => bb5,
340282366920938463463374607430481839740 => bb7,
_ => bb6
}
}
bb4 = {
_4 = true as isize;
_5 = !_13;
_4 = !_13;
_8 = (-15447_i16);
RET = (-1345974794_i32);
_6.0 = !_10;
RET = !(-1750119813_i32);
_8 = (-2673_i16);
_14 = _5 == _13;
_8 = RET as i16;
_3 = 2311507081_u32 & 1793615574_u32;
_9 = '\u{80b03}';
RET = !(-992638539_i32);
_4 = !_5;
_13 = -_4;
_11 = [_14,_14];
_7 = core::ptr::addr_of!(_10);
_12 = _5;
_7 = core::ptr::addr_of!((*_7));
_11 = [_14,_14];
_4 = _9 as isize;
_13 = _5;
_16 = [_9];
_7 = core::ptr::addr_of!(_6.0);
_11 = [_14,_14];
RET = 357202221_i32 ^ (-1898057778_i32);
_5 = !_12;
_6 = (_10,);
Goto(bb3)
}
bb5 = {
RET = !1093948761_i32;
_8 = (-14603_i16) << _2;
_1 = _2;
_1 = _2;
_9 = '\u{104dd0}';
_7 = core::ptr::addr_of!(_6.0);
Call(_13 = fn12(_4, _5, _4, _6.0, _10, (*_7), _6.0), ReturnTo(bb2), UnwindUnreachable())
}
bb6 = {
Return()
}
bb7 = {
_20 = _9;
_21 = [26233448475671864904184180456219123088_i128,51220280718476164387926316989304510391_i128,43726521393671977178511778001281486674_i128,32366387376317803313811412694450891632_i128,167313890523956641303965270827989350137_i128,48687533573503248530877042894571308061_i128,(-163415766226685567279665614923896976808_i128),(-51842811091398021253337970379531685167_i128)];
_18.0 = [_8,_8,_8,_8,_8,_8];
_13 = 25_i8 as isize;
_10 = (*_7) >> _4;
_7 = _15;
_2 = _8 as usize;
_23 = [118_u8];
_6.0 = _10;
_10 = _6.0;
_22 = _19 as isize;
_8 = 27719_i16 | 16617_i16;
_3 = 1404928216_u32 & 2939999216_u32;
_23 = [11_u8];
_6 = (_10,);
_8 = !17419_i16;
_20 = _9;
_22 = 46_u8 as isize;
RET = !1736493859_i32;
_19 = RET as f64;
_2 = 69_i8 as usize;
_7 = core::ptr::addr_of!(_6.0);
_6 = (_10,);
Goto(bb8)
}
bb8 = {
_7 = _15;
_24 = !84380404236241065650072868999714032231_i128;
_3 = !746318525_u32;
_22 = _2 as isize;
_3 = !4100685758_u32;
_20 = _9;
RET = (-619846833_i32);
_6 = (_10,);
_5 = _12 & _12;
_1 = _2;
_6.0 = _24 as u64;
_10 = !_6.0;
_4 = _24 as isize;
_22 = -_5;
_1 = RET as usize;
_18.0 = [_8,_8,_8,_8,_8,_8];
_22 = _19 as isize;
_23 = [250_u8];
_12 = !_5;
_24 = !114082100188063679357308460943270294272_i128;
_25 = 173_u8 ^ 249_u8;
_30 = (_19, 21117484821654343564933694960627045611_u128);
_27 = [_3];
_5 = _12;
_24 = -104855474132627902708760306170678317728_i128;
Goto(bb9)
}
bb9 = {
_29 = _5;
Goto(bb10)
}
bb10 = {
_19 = _10 as f64;
_12 = _5;
_19 = _30.0;
_32.0 = _18.0;
_19 = _30.1 as f64;
_29 = !_4;
_2 = !_1;
_24 = 34060824932527568764874760240579043845_i128 << _5;
match _30.1 {
0 => bb8,
21117484821654343564933694960627045611 => bb11,
_ => bb6
}
}
bb11 = {
_23 = [_25];
_35.fld1.fld2 = _12;
_12 = _5 ^ _35.fld1.fld2;
_22 = _12 ^ _5;
_10 = !_6.0;
_35.fld3 = _7;
_35.fld2 = !_10;
_35.fld1.fld0 = [_3,_3,_3,_3,_3,_3,_3];
_33 = -_12;
_11 = [_14,_14];
_25 = _22 as u8;
RET = 423079580_i32;
_23 = [_25];
_33 = -_35.fld1.fld2;
_38.0 = _8 as i32;
RET = _14 as i32;
_35.fld3 = core::ptr::addr_of!(_6.0);
_33 = -_12;
_6.0 = _35.fld2;
_32 = (_18.0,);
_36.1 = _12 as i64;
Goto(bb12)
}
bb12 = {
Call(_42 = dump_var(10_usize, 18_usize, Move(_18), 13_usize, Move(_13), 33_usize, Move(_33), 8_usize, Move(_8)), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
Call(_42 = dump_var(10_usize, 20_usize, Move(_20), 4_usize, Move(_4), 21_usize, Move(_21), 9_usize, Move(_9)), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
Call(_42 = dump_var(10_usize, 23_usize, Move(_23), 6_usize, Move(_6), 14_usize, Move(_14), 29_usize, Move(_29)), ReturnTo(bb15), UnwindUnreachable())
}
bb15 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn11(mut _1: isize,mut _2: char,mut _3: isize,mut _4: isize) -> i32 {
mir! {
type RET = i32;
let _5: u64;
let _6: [i128; 8];
let _7: (f64, u128);
let _8: isize;
let _9: *const [i16; 5];
let _10: i128;
let _11: u128;
let _12: u8;
let _13: Adt58;
let _14: [bool; 8];
let _15: i128;
let _16: [isize; 4];
let _17: f32;
let _18: Adt45;
let _19: Adt43;
let _20: [u32; 1];
let _21: f64;
let _22: f64;
let _23: Adt47;
let _24: Adt56;
let _25: char;
let _26: bool;
let _27: char;
let _28: ();
let _29: ();
{
RET = -(-314857257_i32);
_4 = _3 << _3;
RET = (-1256773838_i32);
_5 = !13228701522470212233_u64;
_5 = !12633845158464128249_u64;
_4 = !_1;
_2 = '\u{91b44}';
_7.0 = 4_usize as f64;
_7.0 = _4 as f64;
_7.1 = 334711505524590677581387426664420919033_u128 * 10261913961183367034497094048019763576_u128;
_6 = [(-44004244636120014187745000767162158639_i128),18503440047810766795613698917908642262_i128,74520536035479911894347163032641265327_i128,(-51191476025086421235463568993613885207_i128),(-2593123405090529528969360875859606548_i128),(-109982578485633705445291397900922024391_i128),(-64785294278999620767922248178922040993_i128),108238053572792647116011636521812464158_i128];
RET = (-958794963_i32);
_2 = '\u{5fc69}';
_3 = _4 << _1;
RET = 1415981668_i32 ^ (-1216737635_i32);
RET = (-72679490_i32);
_7.1 = 8732378189020277212_i64 as u128;
_7.1 = 109052475397892087715174638689767297590_u128 - 94357923314276143461421215557775206552_u128;
_6 = [(-84438127167901350758087243676000775617_i128),(-100973915786691982594996658936857220310_i128),149458547031711548847078327965489959695_i128,(-159571350413722804289693914910259860895_i128),59507759113459269742566995286400793827_i128,(-81906693393962940692781559749771886217_i128),149009908383296876776166960490614475123_i128,(-34637536304906486796113025918474670819_i128)];
RET = (-2097604540_i32) * (-428398295_i32);
_1 = _3;
_5 = !8425937154853333589_u64;
Goto(bb1)
}
bb1 = {
_4 = 75_i8 as isize;
RET = true as i32;
_11 = _7.1;
_10 = !(-72154401157840391606597600129051600150_i128);
_12 = 249_u8 ^ 26_u8;
RET = _7.0 as i32;
_4 = _3;
_11 = true as u128;
_8 = -_4;
_2 = '\u{1f340}';
_7.0 = 12826592_u32 as f64;
_6 = [_10,_10,_10,_10,_10,_10,_10,_10];
_7.0 = _11 as f64;
_14 = [false,false,false,true,false,false,true,false];
RET = _2 as i32;
_15 = _10;
_18.fld4.fld3.0 = (2060809084_u32, _3, 16736625240657747752_usize, (-26809_i16));
_17 = _18.fld4.fld3.0.1 as f32;
match _18.fld4.fld3.0.0 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
2060809084 => bb7,
_ => bb6
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
_5 = 4023011552533749213_u64 + 12759647261510514242_u64;
_8 = _3;
_18.fld4.fld3.0.1 = _4 + _4;
_18.fld4.fld3.0.2 = _5 as usize;
_18.fld3.fld0 = [_18.fld4.fld3.0.3,_18.fld4.fld3.0.3,_18.fld4.fld3.0.3,_18.fld4.fld3.0.3,_18.fld4.fld3.0.3,_18.fld4.fld3.0.3];
_18.fld4.fld4 = _18.fld4.fld3.0.2;
_19.fld3 = _12;
_18.fld1 = [_18.fld4.fld3.0.3,_18.fld4.fld3.0.3,_18.fld4.fld3.0.3,_18.fld4.fld3.0.3,_18.fld4.fld3.0.3,_18.fld4.fld3.0.3];
_8 = _1;
_18.fld3.fld2 = [_2];
_21 = _7.0 - _7.0;
_19.fld2 = _18.fld3.fld2;
_11 = _7.1;
_20 = [_18.fld4.fld3.0.0];
_3 = _4;
match _18.fld4.fld3.0.0 {
0 => bb5,
1 => bb4,
2 => bb6,
3 => bb8,
4 => bb9,
5 => bb10,
6 => bb11,
2060809084 => bb13,
_ => bb12
}
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
Return()
}
bb12 = {
Return()
}
bb13 = {
_18.fld4.fld1 = core::ptr::addr_of!(_18.fld4.fld0);
_18.fld5 = -RET;
_19.fld0 = [_18.fld4.fld3.0.3,_18.fld4.fld3.0.3,_18.fld4.fld3.0.3,_18.fld4.fld3.0.3,_18.fld4.fld3.0.3,_18.fld4.fld3.0.3];
_15 = -_10;
_18.fld4.fld2 = !_4;
_18.fld3.fld4 = [_1,_8,_18.fld4.fld3.0.1,_1];
_18.fld4.fld5 = _19.fld3 as i32;
_18.fld4.fld3.2 = (RET, 4392446047980382415_i64, _2);
_22 = (-94_i8) as f64;
_18.fld4.fld1 = core::ptr::addr_of!(_18.fld4.fld0);
_7 = (_21, _11);
_18.fld3.fld0 = [_18.fld4.fld3.0.3,_18.fld4.fld3.0.3,_18.fld4.fld3.0.3,_18.fld4.fld3.0.3,_18.fld4.fld3.0.3,_18.fld4.fld3.0.3];
_18.fld0 = _19.fld2;
_17 = _8 as f32;
_18.fld4.fld3.3 = _18.fld3.fld0;
_18.fld4.fld3.0.1 = -_3;
_24.fld3 = core::ptr::addr_of!(_17);
_18.fld4.fld3.2.1 = 3965795868419953452_i64;
Goto(bb14)
}
bb14 = {
_20 = [_18.fld4.fld3.0.0];
_22 = -_21;
_18.fld3.fld1 = _2;
_19.fld5 = 11466_u16;
_18.fld3.fld5 = _19.fld5 << _1;
_18.fld3.fld2 = _19.fld2;
_19.fld5 = !_18.fld3.fld5;
_1 = _18.fld4.fld3.0.3 as isize;
_18.fld4.fld5 = !_18.fld4.fld3.2.0;
_24.fld2 = -_1;
Goto(bb15)
}
bb15 = {
Call(_28 = dump_var(11_usize, 1_usize, Move(_1), 11_usize, Move(_11), 12_usize, Move(_12), 10_usize, Move(_10)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_28 = dump_var(11_usize, 5_usize, Move(_5), 15_usize, Move(_15), 29_usize, _29, 29_usize, _29), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn12(mut _1: isize,mut _2: isize,mut _3: isize,mut _4: u64,mut _5: u64,mut _6: u64,mut _7: u64) -> isize {
mir! {
type RET = isize;
let _8: ([i16; 6],);
let _9: Adt43;
let _10: f64;
let _11: ();
let _12: ();
{
_4 = _7 << _2;
RET = (-103_i8) as isize;
_8.0 = [(-7486_i16),22086_i16,12200_i16,20946_i16,21249_i16,17832_i16];
_7 = _4;
_4 = _7 + _7;
_6 = _4;
RET = _2;
RET = -_3;
_4 = _6 * _6;
_6 = 30_i8 as u64;
_2 = _1 << _4;
RET = 508915751_i32 as isize;
RET = _2 + _2;
_9.fld5 = 72491295410576168193230746499336920492_i128 as u16;
_9.fld1 = '\u{5a3cb}';
_9.fld4 = [_2,_1,RET,_2];
_5 = _4;
_1 = !_2;
_9.fld3 = (-68_i8) as u8;
_6 = _4 - _4;
_10 = 3146057246_u32 as f64;
_8.0 = [29009_i16,(-28045_i16),(-27452_i16),(-32438_i16),(-16219_i16),26883_i16];
_5 = _7 - _4;
_9.fld0 = [(-5102_i16),(-32702_i16),28102_i16,27081_i16,1984_i16,(-23442_i16)];
_5 = _4;
Goto(bb1)
}
bb1 = {
Call(_11 = dump_var(12_usize, 1_usize, Move(_1), 7_usize, Move(_7), 4_usize, Move(_4), 8_usize, Move(_8)), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn13(mut _1: [i16; 6],mut _2: [i16; 6],mut _3: i64,mut _4: [i16; 6]) -> i16 {
mir! {
type RET = i16;
let _5: Adt55;
let _6: f64;
let _7: char;
let _8: (u64,);
let _9: bool;
let _10: [i128; 8];
let _11: *const bool;
let _12: (u64,);
let _13: isize;
let _14: Adt51;
let _15: f64;
let _16: [u32; 1];
let _17: i8;
let _18: *mut u16;
let _19: bool;
let _20: (u32, isize, usize, i16);
let _21: *mut u16;
let _22: isize;
let _23: char;
let _24: (i32, i64, char);
let _25: i16;
let _26: (i32, i64, char);
let _27: *const [i16; 5];
let _28: i128;
let _29: f32;
let _30: Adt43;
let _31: u128;
let _32: *const [i16; 5];
let _33: i16;
let _34: i16;
let _35: i128;
let _36: [i16; 6];
let _37: ([i16; 6],);
let _38: (u32, isize, usize, i16);
let _39: Adt57;
let _40: ();
let _41: ();
{
RET = (-31448_i16);
_2 = [RET,RET,RET,RET,RET,RET];
_2 = [RET,RET,RET,RET,RET,RET];
_4 = _1;
_1 = [RET,RET,RET,RET,RET,RET];
_1 = [RET,RET,RET,RET,RET,RET];
_2 = [RET,RET,RET,RET,RET,RET];
_2 = [RET,RET,RET,RET,RET,RET];
_5 = Adt55::Variant1 { fld0: 60684_u16 };
_2 = [RET,RET,RET,RET,RET,RET];
RET = 14725_i16;
_4 = [RET,RET,RET,RET,RET,RET];
place!(Field::<u16>(Variant(_5, 1), 0)) = 1393_u16 << _3;
RET = 16051_i16;
place!(Field::<u16>(Variant(_5, 1), 0)) = 56955_u16 >> _3;
_4 = _1;
_3 = (-8808619922837032005_i64) << Field::<u16>(Variant(_5, 1), 0);
RET = 14483_i16;
_6 = 150_u8 as f64;
match RET {
0 => bb1,
14483 => bb3,
_ => bb2
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
_7 = '\u{abe1b}';
_7 = '\u{647f7}';
_8.0 = 14906344744669084192_u64;
place!(Field::<u16>(Variant(_5, 1), 0)) = !59465_u16;
_7 = '\u{7b0c6}';
_1 = _2;
_3 = Field::<u16>(Variant(_5, 1), 0) as i64;
_1 = [RET,RET,RET,RET,RET,RET];
_8 = (12510758506260378399_u64,);
_12.0 = _6 as u64;
_8.0 = _12.0;
_2 = [RET,RET,RET,RET,RET,RET];
RET = 3246_i16;
_2 = _4;
_12 = (_8.0,);
_9 = true | true;
Call(_13 = fn14(Field::<u16>(Variant(_5, 1), 0), Move(_5), _7, _8, _8.0), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_10 = [(-32687122674758387428448954082564131618_i128),33849522334535294568800542519390987224_i128,(-148400908993247183778275365009859607062_i128),59050143223320150908907539598923332958_i128,52259474426277208776951550927436620918_i128,(-53946180511098089132003313609889399383_i128),25780762512980815590585043507214232485_i128,(-122943168598044014099917520392951630814_i128)];
RET = -(-11747_i16);
RET = !11364_i16;
_10 = [10405243573679777470800832816831783712_i128,35637059429370447247380186552781849358_i128,(-8487426368377741217582090121002795750_i128),10472380598894763737306822053895262521_i128,1978910906564930672101846636580754208_i128,(-161567703011712152494916366087761329043_i128),25905338506213017828155587527950685877_i128,(-156929107104680231449373573551315852876_i128)];
_8.0 = _12.0;
RET = 8409_i16 - 28203_i16;
_3 = -(-3940225237188939860_i64);
RET = 15480_i16;
Goto(bb5)
}
bb5 = {
_1 = [RET,RET,RET,RET,RET,RET];
_11 = core::ptr::addr_of!(_9);
_2 = _1;
_4 = _1;
_7 = '\u{d872a}';
_9 = !true;
_3 = (-5785981826791219056_i64) ^ (-4028318894770625412_i64);
_15 = _12.0 as f64;
_10 = [(-50481674625291170682518092242527249023_i128),(-6545491057396692076749673529314725522_i128),(-118701445424512569231314680717860377447_i128),(-73819300635456382482425686883126965658_i128),(-113641663928926872179708734364766523693_i128),25335646057205117149360463660145366804_i128,63992915585591474330295709863416170311_i128,(-94690384475062943141237805799425152381_i128)];
_15 = _6;
_4 = _1;
_1 = [RET,RET,RET,RET,RET,RET];
_4 = [RET,RET,RET,RET,RET,RET];
Goto(bb6)
}
bb6 = {
_8 = (_12.0,);
Call(_17 = core::intrinsics::transmute((*_11)), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
_2 = [RET,RET,RET,RET,RET,RET];
match RET {
0 => bb8,
15480 => bb10,
_ => bb9
}
}
bb8 = {
Return()
}
bb9 = {
_1 = [RET,RET,RET,RET,RET,RET];
_11 = core::ptr::addr_of!(_9);
_2 = _1;
_4 = _1;
_7 = '\u{d872a}';
_9 = !true;
_3 = (-5785981826791219056_i64) ^ (-4028318894770625412_i64);
_15 = _12.0 as f64;
_10 = [(-50481674625291170682518092242527249023_i128),(-6545491057396692076749673529314725522_i128),(-118701445424512569231314680717860377447_i128),(-73819300635456382482425686883126965658_i128),(-113641663928926872179708734364766523693_i128),25335646057205117149360463660145366804_i128,63992915585591474330295709863416170311_i128,(-94690384475062943141237805799425152381_i128)];
_15 = _6;
_4 = _1;
_1 = [RET,RET,RET,RET,RET,RET];
_4 = [RET,RET,RET,RET,RET,RET];
Goto(bb6)
}
bb10 = {
_15 = 4107381227_u32 as f64;
_20.3 = 99_u8 as i16;
_17 = 144_u8 as i8;
_20.2 = _15 as usize;
_12 = (_8.0,);
_10 = [(-2004776280334329048027707166741884081_i128),(-75027486607406113813890523292122998435_i128),46803247591215010184201772678705100201_i128,18284527675042979163088810354280810758_i128,(-26970133765143483163069797724966846826_i128),81210921547653927900980197015542021837_i128,98481390448811312030299347662299703046_i128,(-133425255012154860466602258689847418428_i128)];
_25 = -RET;
_24.2 = _7;
match RET {
0 => bb8,
1 => bb2,
2 => bb4,
15480 => bb12,
_ => bb11
}
}
bb11 = {
_1 = [RET,RET,RET,RET,RET,RET];
_11 = core::ptr::addr_of!(_9);
_2 = _1;
_4 = _1;
_7 = '\u{d872a}';
_9 = !true;
_3 = (-5785981826791219056_i64) ^ (-4028318894770625412_i64);
_15 = _12.0 as f64;
_10 = [(-50481674625291170682518092242527249023_i128),(-6545491057396692076749673529314725522_i128),(-118701445424512569231314680717860377447_i128),(-73819300635456382482425686883126965658_i128),(-113641663928926872179708734364766523693_i128),25335646057205117149360463660145366804_i128,63992915585591474330295709863416170311_i128,(-94690384475062943141237805799425152381_i128)];
_15 = _6;
_4 = _1;
_1 = [RET,RET,RET,RET,RET,RET];
_4 = [RET,RET,RET,RET,RET,RET];
Goto(bb6)
}
bb12 = {
_17 = (-41_i8);
_8 = _12;
_22 = _13;
_20.2 = 6_usize;
_2 = _1;
_24.2 = _7;
_4 = [_25,_25,_20.3,_20.3,RET,_20.3];
_12.0 = _8.0 ^ _8.0;
_24.0 = (-1619489228_i32) & 727920835_i32;
_8 = (_12.0,);
_30.fld5 = 59934_u16;
_24.2 = _7;
_20.2 = !16154903066101131908_usize;
_13 = _20.2 as isize;
_9 = !true;
match _30.fld5 {
59934 => bb13,
_ => bb10
}
}
bb13 = {
_2 = _4;
_24 = (719803200_i32, _3, _7);
_13 = _22;
_2 = [_25,_25,RET,_25,_20.3,_20.3];
_20 = (788378083_u32, _13, 10395473227700080187_usize, _25);
_30.fld4 = [_22,_22,_22,_13];
RET = _25;
_30.fld2 = [_7];
_29 = _30.fld5 as f32;
_26.0 = _24.0;
_26 = _24;
_10 = [81048744878301421281093442159292336933_i128,(-93843044498851850027160720627465588781_i128),(-101189155654382084016135802881067217625_i128),(-77583444692174851969379151230194875962_i128),103360853892696591371068439743492256531_i128,(-142065379729925594472974393690223171422_i128),(-35272998180072394600863214454766525724_i128),(-157763884958582881664113369930530340743_i128)];
_10 = [29288869196056178267165252673826291997_i128,43645390387968234364994638907965667829_i128,(-6120649418999429926459995172816794705_i128),56213308468973170714589843092320015220_i128,(-90272401139509915007307254947701934772_i128),167861030680628095946633791056427955324_i128,91586634592957444079338145586773539680_i128,(-153957058607264052388465879172998876167_i128)];
_13 = _20.1;
_26 = _24;
_1 = _2;
_30.fld1 = _24.2;
_8.0 = _12.0 ^ _12.0;
_12 = _8;
RET = _9 as i16;
Goto(bb14)
}
bb14 = {
_34 = _25 >> _20.0;
_26.0 = _24.0;
_23 = _26.2;
_15 = _6 + _6;
_20.3 = _34 ^ _34;
_24.1 = _3 + _26.1;
_20.1 = _13 >> _24.0;
_30.fld2 = [_24.2];
_9 = false;
_30.fld3 = _12.0 as u8;
_33 = _26.2 as i16;
_16 = [_20.0];
_18 = core::ptr::addr_of_mut!(_30.fld5);
_3 = -_26.1;
_29 = _20.2 as f32;
_12 = (_8.0,);
_30.fld2 = [_7];
_3 = _24.1;
Goto(bb15)
}
bb15 = {
Call(_40 = dump_var(13_usize, 33_usize, Move(_33), 2_usize, Move(_2), 10_usize, Move(_10), 17_usize, Move(_17)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_40 = dump_var(13_usize, 16_usize, Move(_16), 34_usize, Move(_34), 20_usize, Move(_20), 13_usize, Move(_13)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_40 = dump_var(13_usize, 24_usize, Move(_24), 25_usize, Move(_25), 41_usize, _41, 41_usize, _41), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn14(mut _1: u16,mut _2: Adt55,mut _3: char,mut _4: (u64,),mut _5: u64) -> isize {
mir! {
type RET = isize;
let _6: (f64, u128);
let _7: u16;
let _8: f64;
let _9: isize;
let _10: f64;
let _11: [u32; 7];
let _12: [bool; 2];
let _13: f32;
let _14: *const [i16; 5];
let _15: bool;
let _16: [bool; 2];
let _17: isize;
let _18: char;
let _19: [bool; 8];
let _20: isize;
let _21: bool;
let _22: Adt59;
let _23: char;
let _24: isize;
let _25: [char; 1];
let _26: isize;
let _27: (f64, u128);
let _28: ();
let _29: ();
{
RET = 9223372036854775807_isize ^ 9223372036854775807_isize;
_1 = 5940_i16 as u16;
_4.0 = _5 >> _1;
_1 = Field::<u16>(Variant(_2, 1), 0) ^ Field::<u16>(Variant(_2, 1), 0);
place!(Field::<u16>(Variant(_2, 1), 0)) = _1;
_7 = 97_i8 as u16;
_4.0 = !_5;
_7 = 4283320009_u32 as u16;
_7 = _5 as u16;
_3 = '\u{e3b6e}';
RET = -(-9223372036854775808_isize);
Goto(bb1)
}
bb1 = {
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld0 = [_3];
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld0 = !false;
_6.0 = RET as f64;
place!(Field::<[i128; 8]>(Variant(_2, 2), 6)) = [(-88003602608502390584209227753743463121_i128),47633848009364166892615239280959962709_i128,(-93853010046778187434992809110382242896_i128),(-104081548199801962706466912136051580453_i128),20852221207556322626914068227737350781_i128,(-60816532554836604667636163848339255083_i128),(-95115153015066882253973880247303213574_i128),159576470409639516039182028334840560952_i128];
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld4 = 2890428798642325171_i64 as usize;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld4 = 329089395893515730181086648380067398244_u128 as usize;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld5 = _3 as i32;
_5 = _4.0;
place!(Field::<*const bool>(Variant(_2, 2), 3)) = core::ptr::addr_of!(place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld0);
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld3.0.0 = 2271876524_u32;
place!(Field::<[u32; 1]>(Variant(_2, 2), 4)) = [Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.0];
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld3.0.2 = Field::<Adt45>(Variant(_2, 2), 5).fld4.fld4 * Field::<Adt45>(Variant(_2, 2), 5).fld4.fld4;
_8 = _6.0;
place!(Field::<*const bool>(Variant(_2, 2), 3)) = core::ptr::addr_of!(place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld0);
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld3.0.3 = _8 as i16;
_9 = RET ^ RET;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld0 = [Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3];
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld3 = 111_u8 >> Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.0;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld3.0.2 = Field::<Adt45>(Variant(_2, 2), 5).fld4.fld4 & Field::<Adt45>(Variant(_2, 2), 5).fld4.fld4;
_7 = Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.0 as u16;
Call(place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld3.1 = core::intrinsics::transmute(RET), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld3.0.2 = !Field::<Adt45>(Variant(_2, 2), 5).fld4.fld4;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld3.3 = [Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3];
place!(Field::<[i128; 8]>(Variant(_2, 2), 6)) = [(-21788154496686675943512040246708942359_i128),(-97204625996404447114864839964344121742_i128),142630328627443501862439541064523292739_i128,(-150952636758819009030815535640349151625_i128),(-70177238718879225400500581031784956958_i128),(-168082952977686408177985490069492011928_i128),(-16145270517599646145045396557020744953_i128),(-112289925262716234467035572257037994773_i128)];
_5 = _4.0 * _4.0;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld1 = _3;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld2 = _9;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld3.2.2 = _3;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld2 = !RET;
Call(place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld3 = fn15(Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.2, Field::<[i128; 8]>(Variant(_2, 2), 6), _9, _3, Field::<[i128; 8]>(Variant(_2, 2), 6)), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld1 = Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.3;
_10 = Field::<Adt45>(Variant(_2, 2), 5).fld4.fld2 as f64;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld3.0.0 = Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.1 as u32;
Goto(bb4)
}
bb4 = {
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld3.0.0 = !3373936155_u32;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld3.0.2 = 236532878297284147862777869857070941801_u128 as usize;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld2 = [Field::<Adt45>(Variant(_2, 2), 5).fld3.fld1];
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld3.2.1 = -Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.1;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld3.2 = (Field::<Adt45>(Variant(_2, 2), 5).fld4.fld5, Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.1, _3);
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld5 = Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.2.2 as u16;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld4 = Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.2;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld4 = [_9,_9,_9,RET];
place!(Field::<[i128; 8]>(Variant(_2, 2), 6)) = [(-169749889611372243518367857832435851547_i128),(-156232798293008254078561586478698622025_i128),92359820641645027590027006437275794397_i128,(-78641299825049211157328168455318861542_i128),(-154283778641477268174914587326456902610_i128),6584033642063251950749558734782942038_i128,(-88261294220504172653266495340475726628_i128),43768895998327378859368736473260482760_i128];
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld4 = [Field::<Adt45>(Variant(_2, 2), 5).fld4.fld2,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld2,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld2,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld2];
_6.1 = 9614229404328396156053339523339462641_u128 * 248056489968786873092356937002355843637_u128;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld3.3 = Field::<Adt45>(Variant(_2, 2), 5).fld1;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld3.2 = (Field::<Adt45>(Variant(_2, 2), 5).fld4.fld5, Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.1, Field::<Adt45>(Variant(_2, 2), 5).fld3.fld1);
place!(Field::<[bool; 2]>(Variant(_2, 2), 0)) = [Field::<Adt45>(Variant(_2, 2), 5).fld4.fld0,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld0];
RET = Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.0 as isize;
Goto(bb5)
}
bb5 = {
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld3.3 = [Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3];
place!(Field::<*const bool>(Variant(_2, 2), 3)) = core::ptr::addr_of!(place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld0);
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld3 = 214_u8;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld3.2 = (Field::<Adt45>(Variant(_2, 2), 5).fld4.fld5, Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.1, _3);
place!(Field::<f32>(Variant(_2, 2), 1)) = (-49767441088464083938893321616594584213_i128) as f32;
_10 = _7 as f64;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld5 = !Field::<Adt45>(Variant(_2, 2), 5).fld4.fld5;
_10 = _8 * _8;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld5 = _1 - _1;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld1 = Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.2.2;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld2 = _6.1 as f64;
RET = Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3 as isize;
_4.0 = _5 << _9;
_6.0 = Field::<Adt45>(Variant(_2, 2), 5).fld2;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld3.0 = (169493336_u32, Field::<Adt45>(Variant(_2, 2), 5).fld4.fld2, Field::<Adt45>(Variant(_2, 2), 5).fld4.fld4, 15225_i16);
_12 = Field::<[bool; 2]>(Variant(_2, 2), 0);
place!(Field::<*const bool>(Variant(_2, 2), 3)) = core::ptr::addr_of!(place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld0);
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld0 = [Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3];
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld1 = _3;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld1 = _3;
_13 = Field::<Adt45>(Variant(_2, 2), 5).fld3.fld5 as f32;
_8 = _6.0;
_12 = [Field::<Adt45>(Variant(_2, 2), 5).fld4.fld0,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld0];
_1 = !_7;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld0 = [Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.2.2];
Goto(bb6)
}
bb6 = {
place!(Field::<[u32; 1]>(Variant(_2, 2), 4)) = [Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.0];
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld1 = core::ptr::addr_of!(_21);
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld2 = _6.0;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld1 = _3;
_2 = Adt55::Variant1 { fld0: _7 };
_20 = _9;
_4 = (_5,);
_21 = !false;
_13 = _8 as f32;
_22.fld3 = core::ptr::addr_of!(_4.0);
_16 = [_21,_21];
RET = _9 + _9;
_19 = [_21,_21,_21,_21,_21,_21,_21,_21];
_21 = !true;
_22.fld2 = _4.0;
_22.fld1.fld0 = [1719609832_u32,1359507796_u32,1032577860_u32,1112688411_u32,2658386574_u32,492215663_u32,1073161134_u32];
_5 = _22.fld2 << _20;
_6.1 = !152516946093890635546538712632711239030_u128;
_20 = _9;
_19 = [_21,_21,_21,_21,_21,_21,_21,_21];
_19 = [_21,_21,_21,_21,_21,_21,_21,_21];
_13 = 1355864300_u32 as f32;
_5 = _22.fld2;
_22.fld1.fld2 = RET;
Goto(bb7)
}
bb7 = {
_5 = _22.fld2 ^ _4.0;
_19 = [_21,_21,_21,_21,_21,_21,_21,_21];
RET = -_22.fld1.fld2;
_17 = -RET;
_6.0 = _8 - _10;
_6 = (_8, 267113765358412009741590663812336037350_u128);
_4 = (_22.fld2,);
_9 = !RET;
_11 = [2345527667_u32,3891619700_u32,2992104944_u32,857357449_u32,1984570985_u32,2630464248_u32,3474094798_u32];
_22.fld1.fld3 = core::ptr::addr_of!(_13);
match _6.1 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb5,
5 => bb6,
6 => bb8,
267113765358412009741590663812336037350 => bb10,
_ => bb9
}
}
bb8 = {
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld1 = Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.3;
_10 = Field::<Adt45>(Variant(_2, 2), 5).fld4.fld2 as f64;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld3.0.0 = Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.1 as u32;
Goto(bb4)
}
bb9 = {
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld3.3 = [Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3];
place!(Field::<*const bool>(Variant(_2, 2), 3)) = core::ptr::addr_of!(place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld0);
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld3 = 214_u8;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld3.2 = (Field::<Adt45>(Variant(_2, 2), 5).fld4.fld5, Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.1, _3);
place!(Field::<f32>(Variant(_2, 2), 1)) = (-49767441088464083938893321616594584213_i128) as f32;
_10 = _7 as f64;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld5 = !Field::<Adt45>(Variant(_2, 2), 5).fld4.fld5;
_10 = _8 * _8;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld5 = _1 - _1;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld1 = Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.2.2;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld2 = _6.1 as f64;
RET = Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3 as isize;
_4.0 = _5 << _9;
_6.0 = Field::<Adt45>(Variant(_2, 2), 5).fld2;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld3.0 = (169493336_u32, Field::<Adt45>(Variant(_2, 2), 5).fld4.fld2, Field::<Adt45>(Variant(_2, 2), 5).fld4.fld4, 15225_i16);
_12 = Field::<[bool; 2]>(Variant(_2, 2), 0);
place!(Field::<*const bool>(Variant(_2, 2), 3)) = core::ptr::addr_of!(place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld0);
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld0 = [Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3];
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld1 = _3;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld1 = _3;
_13 = Field::<Adt45>(Variant(_2, 2), 5).fld3.fld5 as f32;
_8 = _6.0;
_12 = [Field::<Adt45>(Variant(_2, 2), 5).fld4.fld0,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld0];
_1 = !_7;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld0 = [Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.2.2];
Goto(bb6)
}
bb10 = {
_13 = _10 as f32;
_18 = _3;
_22.fld3 = core::ptr::addr_of!(_5);
_22.fld0 = Adt58::Variant0 { fld0: _22.fld1.fld3,fld1: _19 };
_1 = Field::<u16>(Variant(_2, 1), 0) ^ Field::<u16>(Variant(_2, 1), 0);
_5 = _3 as u64;
_4.0 = !_22.fld2;
_23 = _3;
_22.fld3 = core::ptr::addr_of!(_22.fld2);
match _6.1 {
0 => bb4,
1 => bb6,
2 => bb11,
3 => bb12,
4 => bb13,
267113765358412009741590663812336037350 => bb15,
_ => bb14
}
}
bb11 = {
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld3.3 = [Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3];
place!(Field::<*const bool>(Variant(_2, 2), 3)) = core::ptr::addr_of!(place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld0);
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld3 = 214_u8;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld3.2 = (Field::<Adt45>(Variant(_2, 2), 5).fld4.fld5, Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.1, _3);
place!(Field::<f32>(Variant(_2, 2), 1)) = (-49767441088464083938893321616594584213_i128) as f32;
_10 = _7 as f64;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld5 = !Field::<Adt45>(Variant(_2, 2), 5).fld4.fld5;
_10 = _8 * _8;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld5 = _1 - _1;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld1 = Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.2.2;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld2 = _6.1 as f64;
RET = Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3 as isize;
_4.0 = _5 << _9;
_6.0 = Field::<Adt45>(Variant(_2, 2), 5).fld2;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld3.0 = (169493336_u32, Field::<Adt45>(Variant(_2, 2), 5).fld4.fld2, Field::<Adt45>(Variant(_2, 2), 5).fld4.fld4, 15225_i16);
_12 = Field::<[bool; 2]>(Variant(_2, 2), 0);
place!(Field::<*const bool>(Variant(_2, 2), 3)) = core::ptr::addr_of!(place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld0);
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld0 = [Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3];
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld1 = _3;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld1 = _3;
_13 = Field::<Adt45>(Variant(_2, 2), 5).fld3.fld5 as f32;
_8 = _6.0;
_12 = [Field::<Adt45>(Variant(_2, 2), 5).fld4.fld0,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld0];
_1 = !_7;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld0 = [Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.2.2];
Goto(bb6)
}
bb12 = {
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld1 = Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.3;
_10 = Field::<Adt45>(Variant(_2, 2), 5).fld4.fld2 as f64;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld3.0.0 = Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.1 as u32;
Goto(bb4)
}
bb13 = {
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld3.0.2 = !Field::<Adt45>(Variant(_2, 2), 5).fld4.fld4;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld3.3 = [Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3];
place!(Field::<[i128; 8]>(Variant(_2, 2), 6)) = [(-21788154496686675943512040246708942359_i128),(-97204625996404447114864839964344121742_i128),142630328627443501862439541064523292739_i128,(-150952636758819009030815535640349151625_i128),(-70177238718879225400500581031784956958_i128),(-168082952977686408177985490069492011928_i128),(-16145270517599646145045396557020744953_i128),(-112289925262716234467035572257037994773_i128)];
_5 = _4.0 * _4.0;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld1 = _3;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld2 = _9;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld3.2.2 = _3;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld2 = !RET;
Call(place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld3 = fn15(Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.2, Field::<[i128; 8]>(Variant(_2, 2), 6), _9, _3, Field::<[i128; 8]>(Variant(_2, 2), 6)), ReturnTo(bb3), UnwindUnreachable())
}
bb14 = {
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld3.3 = [Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3];
place!(Field::<*const bool>(Variant(_2, 2), 3)) = core::ptr::addr_of!(place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld0);
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld3 = 214_u8;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld3.2 = (Field::<Adt45>(Variant(_2, 2), 5).fld4.fld5, Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.1, _3);
place!(Field::<f32>(Variant(_2, 2), 1)) = (-49767441088464083938893321616594584213_i128) as f32;
_10 = _7 as f64;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld5 = !Field::<Adt45>(Variant(_2, 2), 5).fld4.fld5;
_10 = _8 * _8;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld5 = _1 - _1;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld1 = Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.2.2;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld2 = _6.1 as f64;
RET = Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3 as isize;
_4.0 = _5 << _9;
_6.0 = Field::<Adt45>(Variant(_2, 2), 5).fld2;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld3.0 = (169493336_u32, Field::<Adt45>(Variant(_2, 2), 5).fld4.fld2, Field::<Adt45>(Variant(_2, 2), 5).fld4.fld4, 15225_i16);
_12 = Field::<[bool; 2]>(Variant(_2, 2), 0);
place!(Field::<*const bool>(Variant(_2, 2), 3)) = core::ptr::addr_of!(place!(Field::<Adt45>(Variant(_2, 2), 5)).fld4.fld0);
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld0 = [Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.0.3];
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld1 = _3;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld3.fld1 = _3;
_13 = Field::<Adt45>(Variant(_2, 2), 5).fld3.fld5 as f32;
_8 = _6.0;
_12 = [Field::<Adt45>(Variant(_2, 2), 5).fld4.fld0,Field::<Adt45>(Variant(_2, 2), 5).fld4.fld0];
_1 = !_7;
place!(Field::<Adt45>(Variant(_2, 2), 5)).fld0 = [Field::<Adt45>(Variant(_2, 2), 5).fld4.fld3.2.2];
Goto(bb6)
}
bb15 = {
_6 = (_8, 203989967649532473261395203054434158713_u128);
_15 = _21;
_25 = [_3];
Goto(bb16)
}
bb16 = {
Call(_28 = dump_var(14_usize, 7_usize, Move(_7), 12_usize, Move(_12), 5_usize, Move(_5), 23_usize, Move(_23)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_28 = dump_var(14_usize, 20_usize, Move(_20), 4_usize, Move(_4), 15_usize, Move(_15), 9_usize, Move(_9)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn15(mut _1: usize,mut _2: [i128; 8],mut _3: isize,mut _4: char,mut _5: [i128; 8]) -> u8 {
mir! {
type RET = u8;
let _6: f64;
let _7: [i16; 5];
let _8: [bool; 2];
let _9: Adt54;
let _10: u8;
let _11: f64;
let _12: isize;
let _13: i32;
let _14: f64;
let _15: f32;
let _16: char;
let _17: Adt58;
let _18: u8;
let _19: char;
let _20: (f64, u128);
let _21: [isize; 4];
let _22: f64;
let _23: (u32, isize, usize, i16);
let _24: *const [i16; 5];
let _25: char;
let _26: Adt57;
let _27: [isize; 4];
let _28: f64;
let _29: f64;
let _30: [i128; 8];
let _31: (*mut [i128; 8], *const [i16; 5]);
let _32: isize;
let _33: [isize; 4];
let _34: usize;
let _35: [i128; 8];
let _36: i128;
let _37: *mut [i128; 8];
let _38: Adt47;
let _39: ([i16; 6],);
let _40: (u32, isize, usize, i16);
let _41: [isize; 4];
let _42: bool;
let _43: ([i16; 6],);
let _44: [bool; 8];
let _45: [bool; 8];
let _46: Adt53;
let _47: char;
let _48: Adt59;
let _49: f64;
let _50: (i32, i64, char);
let _51: u64;
let _52: f32;
let _53: i32;
let _54: (u32, isize, usize, i16);
let _55: ();
let _56: ();
{
_2 = [136851904776594026470802507170291570737_i128,(-91755546787714667381722507320065514899_i128),(-54382185470143766754879115854805195728_i128),(-131415349481293714918141602811934475583_i128),(-9922079713611062095408492902584603167_i128),51866238866146327783613322172077838302_i128,(-104283853117463319321920686363954908825_i128),(-101664698688704229965224603297015319101_i128)];
RET = 118_u8;
RET = 201_u8;
RET = !169_u8;
_5 = _2;
_5 = [(-84631497362648290474791221338842521115_i128),(-113073479627810521345198928325849527407_i128),(-128321000294090121255350455623120181912_i128),(-142188309346948583432806911861962429933_i128),58077712712726659902855865108262764318_i128,68081771491586702826868494066801830591_i128,47832197757020603596154726183881682656_i128,(-113548915057629285667858795445315196686_i128)];
RET = 146_u8 | 131_u8;
_5 = _2;
RET = 62_u8;
_1 = 5_usize;
RET = 232_u8 & 229_u8;
_2 = _5;
RET = !69_u8;
_2 = [_5[_1],_5[_1],_5[_1],_5[_1],_5[_1],_5[_1],_5[_1],_5[_1]];
_5[_1] = 55_i8 as i128;
_2 = [_5[_1],_5[_1],_5[_1],_5[_1],_5[_1],_5[_1],_5[_1],_5[_1]];
_6 = _1 as f64;
_1 = 1_usize;
_5[_1] = _2[_1] | _2[_1];
RET = 2513835789470777846_u64 as u8;
_1 = !6432837101027343527_usize;
_4 = '\u{3cc29}';
Goto(bb1)
}
bb1 = {
_5 = _2;
_6 = 122_i8 as f64;
_2 = [156080401184255948847652753604100249582_i128,148688251325490818333743098242223290094_i128,(-38357316369779196708819089779894209555_i128),(-16809224182849204543627267022971850009_i128),82532388114622884468523520312393410912_i128,168076106053505614536229054307234421250_i128,41096586151569095863280793666361180476_i128,(-974194185824346443698155605951249931_i128)];
RET = !190_u8;
_4 = '\u{5c214}';
_8 = [false,true];
RET = 179141519678867710015195304459906035377_u128 as u8;
RET = 219_u8;
_4 = '\u{960a8}';
_10 = !RET;
_3 = 7530640750817125258_u64 as isize;
_2 = [(-49440513302294115193765142007715728552_i128),13624102628378231323065273729926278511_i128,(-21965647968564867183364791246415312691_i128),(-48435867174510275641339291779094664715_i128),(-52643746817774964315090975112037817899_i128),(-113230140319986851607549517152275950880_i128),150717699535080767277528158904384428755_i128,91159422766658980799797111910572953383_i128];
_12 = !_3;
_10 = !RET;
_11 = _6;
_5 = [168599323236004791243861634430850531604_i128,78230458382386202351364007328723053460_i128,7397436123336635649639927806956813637_i128,(-90139720349191733141579885342882860557_i128),(-82977083676611454333463166369516422046_i128),36642656106992271594206217619032156088_i128,3033816481907839345740698262454604841_i128,(-14435023563842741571114823035847511389_i128)];
_6 = (-1791945979_i32) as f64;
_6 = _11 - _11;
RET = _4 as u8;
_5 = _2;
_1 = 17334432318539976794_usize ^ 3_usize;
_1 = _4 as usize;
Call(_15 = fn16(_3, _11, _2, _6, _2, _5, _5, _1, _4), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_6 = _11 - _11;
_12 = (-6188887038554067805_i64) as isize;
_14 = 290982523764284111958120610960583969113_u128 as f64;
_3 = -_12;
_16 = _4;
_16 = _4;
_1 = !7_usize;
_6 = _11;
RET = _10;
_13 = !(-320707764_i32);
_5 = [39529219886850099563378157842986688664_i128,108834157803094111618976869068970676379_i128,108811218267490984152045432837116354383_i128,57185803705944220320860364311166403174_i128,86927446945210892016724160038311408104_i128,4319170660020689673648168354243946297_i128,(-54297452832972125364910860045397958503_i128),158411447951007731464680063691676260878_i128];
_7 = [(-26465_i16),4453_i16,(-23299_i16),(-8830_i16),10449_i16];
_13 = (-108_i8) as i32;
_20 = (_11, 222668298215801050629883222153322649030_u128);
_19 = _16;
_5 = [(-31108257574592865710533626543904029371_i128),3704891812588107527731685351919378490_i128,(-116849814436548538892412392953193268248_i128),(-64951333136727643901642158727709894952_i128),(-129356600811602414999498050131048027582_i128),(-156080277988326410632595200793370224579_i128),68108318423268559014314803040013254312_i128,(-63072598472549587128083786493334270097_i128)];
_1 = 2623390491068248725_usize;
_11 = _14;
_21 = [_12,_3,_12,_3];
_21 = [_12,_3,_12,_12];
Call(_3 = core::intrinsics::bswap(_12), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_15 = _14 as f32;
_18 = _10;
_4 = _19;
_13 = _1 as i32;
_24 = core::ptr::addr_of!(_7);
_23 = (2885898330_u32, _3, _1, 5822_i16);
_22 = _13 as f64;
_23.0 = _3 as u32;
_11 = 117858198715884407194672736614450681509_i128 as f64;
_23.3 = 27317_i16;
_25 = _19;
Call(_20.0 = core::intrinsics::fmaf64(_14, _6, _6), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_6 = -_11;
_22 = 91_i8 as f64;
_8 = [false,false];
_19 = _25;
_15 = 14110_u16 as f32;
_14 = -_20.0;
RET = _23.3 as u8;
Goto(bb5)
}
bb5 = {
_19 = _16;
RET = !_18;
_6 = _23.0 as f64;
_23 = (416139610_u32, _3, _1, (-4088_i16));
_23.3 = !1370_i16;
_27 = [_12,_3,_23.1,_23.1];
_29 = _14;
_14 = (-8399083834834379500_i64) as f64;
_20.0 = _29;
_11 = 7690377064779719264_u64 as f64;
_18 = _10 & _10;
_10 = RET - _18;
Goto(bb6)
}
bb6 = {
_20.1 = 2046324416943709682_i64 as u128;
_20.0 = _22 + _22;
Goto(bb7)
}
bb7 = {
_21 = _27;
_21 = _27;
_6 = _20.1 as f64;
RET = 10413043576247358974_u64 as u8;
_25 = _16;
_23 = (427119964_u32, _3, _1, (-16534_i16));
_8 = [true,true];
_23.2 = _1;
_32 = !_23.1;
_20.1 = 50826147834198249856006933655219960061_u128;
_21 = _27;
_13 = 652528033_i32 - 965757260_i32;
_28 = _6;
_23 = (3662008221_u32, _12, _1, (-7065_i16));
_31.0 = core::ptr::addr_of_mut!(_2);
_13 = (-1563074324_i32);
_22 = _32 as f64;
_6 = -_14;
_2 = [(-44129723027963033818402695315789752330_i128),(-30303645688707622120108927394206231126_i128),108330903553317417944931749809697269919_i128,58568668346870889668578897186320371136_i128,(-85936885714019858652141995934158340576_i128),(-39050433385228466840350702579870246392_i128),(-162142696080609055337037073495259780157_i128),(-83575083021944900082576453716227643025_i128)];
_20.0 = _29;
_16 = _19;
_23.1 = _12 & _12;
_12 = _3 << _20.1;
_22 = -_28;
_8 = [true,false];
_23.3 = _1 as i16;
_23.0 = _18 as u32;
_27 = _21;
Goto(bb8)
}
bb8 = {
_31.1 = _24;
_22 = _20.1 as f64;
_21 = [_3,_12,_12,_12];
RET = 8578832438791289802_u64 as u8;
_22 = -_6;
_7 = [_23.3,_23.3,_23.3,_23.3,_23.3];
_1 = _23.2 | _23.2;
_7 = [_23.3,_23.3,_23.3,_23.3,_23.3];
_4 = _16;
Call(_4 = fn17(_19, _5, _24, _25, _23.0, _23, _10, _31, _31), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
_21 = _27;
_23.3 = -4278_i16;
_30 = [(-128763278297467991123948080705201920204_i128),14753205597968914754490007505384534386_i128,(-119286247959189698346547827347050779119_i128),72788347770183113669849453598786412619_i128,59507852730949929908020185490682460100_i128,26872531154929045363919037682769368427_i128,(-115677358635501292297181503894509689303_i128),(-160335909323590793231863456406056904729_i128)];
_8 = [false,true];
_27 = [_12,_12,_3,_12];
_20.0 = _28 * _28;
_36 = -18429410444725962071786748514648198390_i128;
_30 = [_36,_36,_36,_36,_36,_36,_36,_36];
RET = _10 >> _1;
_32 = _13 as isize;
_5 = _2;
_8 = [true,false];
RET = !_10;
_8 = [true,true];
_25 = _16;
_34 = _1 % _23.2;
_16 = _19;
match _23.2 {
0 => bb1,
2623390491068248725 => bb10,
_ => bb6
}
}
bb10 = {
_27 = _21;
_31.0 = core::ptr::addr_of_mut!(_2);
_2 = [_36,_36,_36,_36,_36,_36,_36,_36];
_23 = (2813843965_u32, _12, _1, 13158_i16);
_2 = _5;
_21 = [_32,_32,_23.1,_32];
_23.0 = !3285170767_u32;
_24 = core::ptr::addr_of!((*_24));
_15 = _12 as f32;
_35 = [_36,_36,_36,_36,_36,_36,_36,_36];
_7 = [_23.3,_23.3,_23.3,_23.3,_23.3];
_2 = _35;
_28 = _14;
_24 = _31.1;
_32 = _34 as isize;
_16 = _25;
_23.1 = true as isize;
_33 = [_3,_12,_32,_12];
_39.0 = [_23.3,_23.3,_23.3,_23.3,_23.3,_23.3];
_20.0 = (-1483499042575521562_i64) as f64;
_22 = _14 + _14;
RET = _18 << _23.1;
_28 = -_22;
_20.0 = _32 as f64;
_37 = core::ptr::addr_of_mut!(_5);
_36 = 85194972943676577082692931772379139747_i128 * 6580985694529531341519656807859852407_i128;
_40 = (_23.0, _12, _34, _23.3);
_8 = [true,false];
Call(_20.0 = core::intrinsics::fmaf64(_22, _22, _28), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_40.0 = (-8064234232613452078_i64) as u32;
_7 = [_23.3,_40.3,_40.3,_23.3,_23.3];
_40 = _23;
_38 = Adt47::Variant3 { fld0: _23.3,fld1: _8,fld2: _28 };
_18 = _10;
place!(Field::<Adt45>(Variant(_38, 0), 3)).fld3.fld4 = [_23.1,_23.1,_32,_32];
place!(Field::<Adt45>(Variant(_38, 0), 3)).fld1 = _39.0;
place!(Field::<Adt45>(Variant(_38, 0), 3)).fld3.fld0 = Field::<Adt45>(Variant(_38, 0), 3).fld1;
place!(Field::<Adt45>(Variant(_38, 0), 3)).fld6 = core::ptr::addr_of!(_7);
_40.2 = _34;
place!(Field::<Adt45>(Variant(_38, 0), 3)).fld4.fld3.2.2 = _4;
place!(Field::<Adt45>(Variant(_38, 0), 3)).fld0 = [_4];
place!(Field::<Adt45>(Variant(_38, 0), 3)).fld4.fld5 = _13;
_23.2 = _20.1 as usize;
place!(Field::<Adt45>(Variant(_38, 0), 3)).fld5 = 53_i8 as i32;
place!(Field::<Adt45>(Variant(_38, 0), 3)).fld3.fld2 = Field::<Adt45>(Variant(_38, 0), 3).fld0;
_6 = -_22;
_40.0 = !_23.0;
place!(Field::<Adt45>(Variant(_38, 0), 3)).fld4.fld0 = false;
place!(Field::<Adt45>(Variant(_38, 0), 3)).fld3 = Adt43 { fld0: _39.0,fld1: _16,fld2: Field::<Adt45>(Variant(_38, 0), 3).fld0,fld3: RET,fld4: _33,fld5: 59848_u16 };
_16 = _4;
_45 = [Field::<Adt45>(Variant(_38, 0), 3).fld4.fld0,Field::<Adt45>(Variant(_38, 0), 3).fld4.fld0,Field::<Adt45>(Variant(_38, 0), 3).fld4.fld0,Field::<Adt45>(Variant(_38, 0), 3).fld4.fld0,Field::<Adt45>(Variant(_38, 0), 3).fld4.fld0,Field::<Adt45>(Variant(_38, 0), 3).fld4.fld0,Field::<Adt45>(Variant(_38, 0), 3).fld4.fld0,Field::<Adt45>(Variant(_38, 0), 3).fld4.fld0];
_3 = _40.1 - _32;
match Field::<Adt45>(Variant(_38, 0), 3).fld3.fld5 {
59848 => bb13,
_ => bb12
}
}
bb12 = {
_21 = _27;
_21 = _27;
_6 = _20.1 as f64;
RET = 10413043576247358974_u64 as u8;
_25 = _16;
_23 = (427119964_u32, _3, _1, (-16534_i16));
_8 = [true,true];
_23.2 = _1;
_32 = !_23.1;
_20.1 = 50826147834198249856006933655219960061_u128;
_21 = _27;
_13 = 652528033_i32 - 965757260_i32;
_28 = _6;
_23 = (3662008221_u32, _12, _1, (-7065_i16));
_31.0 = core::ptr::addr_of_mut!(_2);
_13 = (-1563074324_i32);
_22 = _32 as f64;
_6 = -_14;
_2 = [(-44129723027963033818402695315789752330_i128),(-30303645688707622120108927394206231126_i128),108330903553317417944931749809697269919_i128,58568668346870889668578897186320371136_i128,(-85936885714019858652141995934158340576_i128),(-39050433385228466840350702579870246392_i128),(-162142696080609055337037073495259780157_i128),(-83575083021944900082576453716227643025_i128)];
_20.0 = _29;
_16 = _19;
_23.1 = _12 & _12;
_12 = _3 << _20.1;
_22 = -_28;
_8 = [true,false];
_23.3 = _1 as i16;
_23.0 = _18 as u32;
_27 = _21;
Goto(bb8)
}
bb13 = {
place!(Field::<Adt45>(Variant(_38, 0), 3)).fld4.fld5 = _10 as i32;
_41 = [_32,_12,_3,_3];
place!(Field::<Adt45>(Variant(_38, 0), 3)).fld4.fld3.0.0 = _40.0 & _23.0;
place!(Field::<Adt45>(Variant(_38, 0), 3)).fld2 = _20.0;
place!(Field::<Adt45>(Variant(_38, 0), 3)).fld4.fld3.3 = Field::<Adt45>(Variant(_38, 0), 3).fld1;
place!(Field::<Adt45>(Variant(_38, 0), 3)).fld4.fld2 = _32;
place!(Field::<f32>(Variant(_38, 0), 2)) = -_15;
place!(Field::<Adt45>(Variant(_38, 0), 3)).fld0 = [_4];
_27 = Field::<Adt45>(Variant(_38, 0), 3).fld3.fld4;
_42 = Field::<Adt45>(Variant(_38, 0), 3).fld4.fld0;
_38 = Adt47::Variant3 { fld0: _23.3,fld1: _8,fld2: _20.0 };
_19 = _16;
place!(Field::<i16>(Variant(_38, 3), 0)) = !_40.3;
_18 = _10;
_37 = core::ptr::addr_of_mut!((*_37));
_40.1 = _32 + _3;
_25 = _4;
_18 = (-37_i8) as u8;
_36 = -31251709741963154693693482548222679923_i128;
_42 = true;
_13 = _40.3 as i32;
_30 = (*_37);
_23.1 = _12 >> _40.3;
Goto(bb14)
}
bb14 = {
_45 = [_42,_42,_42,_42,_42,_42,_42,_42];
_21 = [_40.1,_23.1,_32,_40.1];
_8 = [_42,_42];
_44 = [_42,_42,_42,_42,_42,_42,_42,_42];
_12 = 16289280392715970622_u64 as isize;
_14 = _6 * Field::<f64>(Variant(_38, 3), 2);
_23.2 = _40.2 * _40.2;
place!(Field::<[bool; 2]>(Variant(_38, 3), 1)) = [_42,_42];
_45 = _44;
_23.1 = _32;
_20.1 = !207568907919230174870427688164576057205_u128;
_29 = _11 * _22;
_31 = (_37, _24);
_20 = (Field::<f64>(Variant(_38, 3), 2), 293408621618443287960141726154991430045_u128);
_15 = _20.1 as f32;
_39.0 = [_40.3,_40.3,Field::<i16>(Variant(_38, 3), 0),Field::<i16>(Variant(_38, 3), 0),_23.3,_40.3];
_14 = _20.0;
_26 = Adt57::Variant0 { fld0: _1 };
_28 = _22;
_50.1 = 4550468593674138719_i64;
_13 = 1972158015_i32;
_50.0 = _23.3 as i32;
SetDiscriminant(_26, 0);
Goto(bb15)
}
bb15 = {
Call(_55 = dump_var(15_usize, 32_usize, Move(_32), 33_usize, Move(_33), 21_usize, Move(_21), 25_usize, Move(_25)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_55 = dump_var(15_usize, 45_usize, Move(_45), 2_usize, Move(_2), 4_usize, Move(_4), 16_usize, Move(_16)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_55 = dump_var(15_usize, 30_usize, Move(_30), 13_usize, Move(_13), 41_usize, Move(_41), 27_usize, Move(_27)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_55 = dump_var(15_usize, 7_usize, Move(_7), 3_usize, Move(_3), 56_usize, _56, 56_usize, _56), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn16(mut _1: isize,mut _2: f64,mut _3: [i128; 8],mut _4: f64,mut _5: [i128; 8],mut _6: [i128; 8],mut _7: [i128; 8],mut _8: usize,mut _9: char) -> f32 {
mir! {
type RET = f32;
let _10: [i16; 6];
let _11: Adt57;
let _12: i32;
let _13: [bool; 8];
let _14: [char; 1];
let _15: (i32, i64, char);
let _16: ([i16; 6],);
let _17: ((u32, isize, usize, i16), i64, (i32, i64, char), [i16; 6]);
let _18: i16;
let _19: Adt44;
let _20: [bool; 8];
let _21: (i32, i64, char);
let _22: (u32, isize, usize, i16);
let _23: isize;
let _24: (i32, i64, char);
let _25: i16;
let _26: [char; 1];
let _27: Adt45;
let _28: Adt56;
let _29: char;
let _30: f64;
let _31: u32;
let _32: [u8; 4];
let _33: bool;
let _34: bool;
let _35: i8;
let _36: (u32, isize, usize, i16);
let _37: u8;
let _38: ();
let _39: ();
{
_9 = '\u{68ffa}';
_9 = '\u{ff197}';
_8 = 147_u8 as usize;
_7 = _3;
RET = 1126302215558824644_i64 as f32;
_6 = [105109089924181590459604168391448446770_i128,(-88425455005646721768218463633515269737_i128),35593959014806295914346562444611446195_i128,57840866015354730830184224290550515335_i128,(-47210182993076052197062785812151885933_i128),(-35149417947009533075281172507507346913_i128),(-81273579941371921296961120743851784488_i128),129889360696014105286984516810837319496_i128];
_6 = _3;
_8 = RET as usize;
RET = _8 as f32;
_1 = 9223372036854775807_isize;
_3 = [(-21318689878513885540338468525854544853_i128),113193930119726862015203843994620496337_i128,133544028404715189877564721146258512074_i128,49106803531992017098100079221350259306_i128,56730634258820117653099020077579102740_i128,74264213639594274871989590354920118562_i128,(-73217885244990903406682131206890664124_i128),112978001394733694389957905657207632528_i128];
_10 = [(-6107_i16),19020_i16,(-24070_i16),(-113_i16),(-9495_i16),5294_i16];
RET = _8 as f32;
_10 = [9458_i16,5382_i16,4188_i16,(-17039_i16),(-1218_i16),17144_i16];
_4 = -_2;
_7 = [111923175169045232556793758646300452267_i128,130274600450899850918193073401256000811_i128,(-146953828117452551075559815221994168497_i128),63938196153632499538575115885934488749_i128,110088781174587618780486880475997837922_i128,(-21127271555913665271749071431192291092_i128),156599536192176917870203211165772684624_i128,102500098440921411576387576315212525727_i128];
_5 = _6;
RET = _8 as f32;
RET = 3446096367_u32 as f32;
_14 = [_9];
_8 = (-78_i8) as usize;
_1 = (-61_isize) | (-58_isize);
_2 = -_4;
_2 = (-56_i8) as f64;
_15.2 = _9;
Goto(bb1)
}
bb1 = {
_5 = [103276882646187144749542129869601396977_i128,38967564466518202532043262849621758958_i128,(-78706231068214451825269040393611729081_i128),(-58002681052274645285131620374095389934_i128),87486890364152279810696310006301279471_i128,(-94683434926314206184537105367348798997_i128),(-19102025631889169710585688184768379602_i128),(-112764905190203601821643111803387499924_i128)];
_17.2 = ((-375626153_i32), 5922633276853765846_i64, _9);
_17.0.0 = 2603209009_u32;
_19.fld0 = !true;
_17.0 = (822166214_u32, _1, _8, (-26574_i16));
_17.2.1 = 4394805172849200522_i64 >> _17.2.0;
_19.fld3.0.0 = !_17.0.0;
Goto(bb2)
}
bb2 = {
_17.0.0 = _19.fld3.0.0 * _19.fld3.0.0;
_7 = [(-165012111292431090679592829286470245138_i128),(-144676893120904156244166930379929879273_i128),101859956498701499801150513600396462599_i128,(-65274286617014459047704759425123274141_i128),127214213910342010212720000150125278211_i128,(-134461546834631139598722774334986376512_i128),(-139568797170451693580661938734312106165_i128),48038322681392330748920063894117657120_i128];
_16.0 = _10;
_19.fld3 = (_17.0, _17.2.1, _17.2, _16.0);
_27.fld5 = -_19.fld3.2.0;
_23 = _17.0.1 >> _19.fld3.0.3;
_19.fld4 = !_8;
_24.1 = _15.2 as i64;
_27.fld4.fld0 = !_19.fld0;
_17.2 = (_27.fld5, _19.fld3.1, _19.fld3.2.2);
_19.fld3.2.2 = _17.2.2;
_27.fld4.fld3.2.0 = !_19.fld3.2.0;
_15.1 = _17.2.1 << _27.fld4.fld3.2.0;
_19.fld2 = !_23;
_28.fld0 = [_17.0.0,_19.fld3.0.0,_17.0.0,_19.fld3.0.0,_19.fld3.0.0,_17.0.0,_19.fld3.0.0];
_22.3 = _17.0.3 ^ _17.0.3;
_19.fld3.0 = (_17.0.0, _23, _17.0.2, _22.3);
_22 = _17.0;
_27.fld3.fld1 = _17.2.2;
_21.2 = _17.2.2;
_8 = _17.0.2 + _19.fld4;
match _17.0.3 {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
4 => bb7,
5 => bb8,
6 => bb9,
340282366920938463463374607431768184882 => bb11,
_ => bb10
}
}
bb3 = {
_5 = [103276882646187144749542129869601396977_i128,38967564466518202532043262849621758958_i128,(-78706231068214451825269040393611729081_i128),(-58002681052274645285131620374095389934_i128),87486890364152279810696310006301279471_i128,(-94683434926314206184537105367348798997_i128),(-19102025631889169710585688184768379602_i128),(-112764905190203601821643111803387499924_i128)];
_17.2 = ((-375626153_i32), 5922633276853765846_i64, _9);
_17.0.0 = 2603209009_u32;
_19.fld0 = !true;
_17.0 = (822166214_u32, _1, _8, (-26574_i16));
_17.2.1 = 4394805172849200522_i64 >> _17.2.0;
_19.fld3.0.0 = !_17.0.0;
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
_2 = _4;
_25 = _22.3 | _17.0.3;
Goto(bb12)
}
bb12 = {
_27.fld4.fld3.0 = (_19.fld3.0.0, _23, _19.fld3.0.2, _17.0.3);
_27.fld4.fld3.3 = _16.0;
_21.1 = _17.0.2 as i64;
_1 = _23;
_17.0.2 = _27.fld4.fld3.0.2 & _27.fld4.fld3.0.2;
_19.fld2 = _27.fld4.fld3.0.1 ^ _23;
_20 = [_19.fld0,_19.fld0,_19.fld0,_19.fld0,_19.fld0,_19.fld0,_27.fld4.fld0,_19.fld0];
_17.2.1 = _2 as i64;
_21.1 = _15.1;
_19.fld1 = core::ptr::addr_of!(_34);
_27.fld1 = [_22.3,_17.0.3,_25,_19.fld3.0.3,_17.0.3,_22.3];
_19.fld3.2.0 = _27.fld4.fld0 as i32;
_19.fld3.0.3 = _22.3;
_12 = -_27.fld5;
_17.2 = _19.fld3.2;
_19.fld5 = _27.fld4.fld3.0.1 as i32;
_27.fld3.fld5 = 60314_u16 & 34860_u16;
_19.fld3.2.0 = _19.fld5 ^ _27.fld4.fld3.2.0;
_27.fld3.fld0 = [_27.fld4.fld3.0.3,_19.fld3.0.3,_25,_25,_22.3,_17.0.3];
_27.fld4.fld3.1 = _27.fld3.fld5 as i64;
match _19.fld3.0.3 {
0 => bb1,
1 => bb9,
2 => bb6,
340282366920938463463374607431768184882 => bb14,
_ => bb13
}
}
bb13 = {
_5 = [103276882646187144749542129869601396977_i128,38967564466518202532043262849621758958_i128,(-78706231068214451825269040393611729081_i128),(-58002681052274645285131620374095389934_i128),87486890364152279810696310006301279471_i128,(-94683434926314206184537105367348798997_i128),(-19102025631889169710585688184768379602_i128),(-112764905190203601821643111803387499924_i128)];
_17.2 = ((-375626153_i32), 5922633276853765846_i64, _9);
_17.0.0 = 2603209009_u32;
_19.fld0 = !true;
_17.0 = (822166214_u32, _1, _8, (-26574_i16));
_17.2.1 = 4394805172849200522_i64 >> _17.2.0;
_19.fld3.0.0 = !_17.0.0;
Goto(bb2)
}
bb14 = {
_27.fld1 = [_17.0.3,_25,_25,_22.3,_22.3,_22.3];
_19.fld2 = !_17.0.1;
_22 = (_27.fld4.fld3.0.0, _17.0.1, _27.fld4.fld3.0.2, _25);
_24.1 = _17.2.1;
_24.0 = _19.fld3.2.0 ^ _19.fld5;
_27.fld4.fld4 = _8 ^ _22.2;
Goto(bb15)
}
bb15 = {
Call(_38 = dump_var(16_usize, 25_usize, Move(_25), 5_usize, Move(_5), 1_usize, Move(_1), 3_usize, Move(_3)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_38 = dump_var(16_usize, 14_usize, Move(_14), 12_usize, Move(_12), 20_usize, Move(_20), 39_usize, _39), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn17(mut _1: char,mut _2: [i128; 8],mut _3: *const [i16; 5],mut _4: char,mut _5: u32,mut _6: (u32, isize, usize, i16),mut _7: u8,mut _8: (*mut [i128; 8], *const [i16; 5]),mut _9: (*mut [i128; 8], *const [i16; 5])) -> char {
mir! {
type RET = char;
let _10: Adt55;
let _11: isize;
let _12: [i16; 5];
let _13: Adt43;
let _14: f32;
let _15: f64;
let _16: bool;
let _17: Adt54;
let _18: bool;
let _19: [i16; 5];
let _20: f32;
let _21: f64;
let _22: ((u32, isize, usize, i16), i64, (i32, i64, char), [i16; 6]);
let _23: char;
let _24: (u64,);
let _25: *const [i16; 5];
let _26: i8;
let _27: [u32; 1];
let _28: u64;
let _29: u128;
let _30: Adt59;
let _31: [u32; 7];
let _32: bool;
let _33: (i32, i64, char);
let _34: i128;
let _35: i32;
let _36: ();
let _37: ();
{
_6.3 = (-11585_i16);
_5 = _6.0;
_4 = _1;
_3 = _9.1;
_5 = _6.0;
_6.2 = _6.1 as usize;
_6 = (_5, 9223372036854775807_isize, 11318427229646105521_usize, (-1590_i16));
_10 = Adt55::Variant1 { fld0: 35706_u16 };
Goto(bb1)
}
bb1 = {
_2 = [1557729410097143459178343113771255063_i128,(-139495159223349062923450724404577128637_i128),(-26371512910385854449821354672531833438_i128),164227222875922689176276388823380262832_i128,19852811974175118645035872359163695793_i128,7966498243037342443461264475321221716_i128,76236531616967138890661434629025883133_i128,(-105034219474863342445735766952916343492_i128)];
_9 = (_8.0, _3);
_8.1 = _9.1;
RET = _1;
_9 = _8;
Goto(bb2)
}
bb2 = {
_1 = _4;
_6 = (_5, (-9223372036854775808_isize), 2939894597619896517_usize, 15100_i16);
_5 = !_6.0;
_11 = _6.1;
_13.fld1 = RET;
_11 = _6.1 << _6.3;
_6.3 = -(-11728_i16);
_8.0 = core::ptr::addr_of_mut!(_2);
Call(place!(Field::<u16>(Variant(_10, 1), 0)) = fn18(_11, _8.0), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_13.fld0 = [_6.3,_6.3,_6.3,_6.3,_6.3,_6.3];
_9 = _8;
_13.fld2 = [RET];
_6.3 = 22931_i16;
_8.1 = _3;
_6 = (_5, _11, 5_usize, 16804_i16);
_7 = 33_u8 << _6.0;
_13.fld4 = [_11,_6.1,_11,_6.1];
_8.1 = core::ptr::addr_of!(_12);
place!(Field::<u16>(Variant(_10, 1), 0)) = 3864_u16 ^ 3133_u16;
RET = _13.fld1;
_9 = (_8.0, _3);
_6.3 = _7 as i16;
_9.0 = core::ptr::addr_of_mut!(_2);
_13.fld4 = [_6.1,_6.1,_11,_11];
_12 = [_6.3,_6.3,_6.3,_6.3,_6.3];
_16 = true;
_7 = RET as u8;
_9 = (_8.0, _8.1);
_8.0 = _9.0;
_6.3 = (-19369_i16);
_16 = true;
SetDiscriminant(_10, 3);
RET = _4;
Call(_11 = core::intrinsics::transmute(_6.2), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_12 = [_6.3,_6.3,_6.3,_6.3,_6.3];
RET = _1;
_6.0 = 16117726447758847560_u64 as u32;
_8 = (_9.0, _9.1);
_14 = _6.3 as f32;
_13.fld1 = _1;
_8 = (_9.0, _9.1);
_5 = _6.0;
_19 = [_6.3,_6.3,_6.3,_6.3,_6.3];
_6.3 = !2334_i16;
_8.0 = _9.0;
_5 = _6.0;
_8.1 = _3;
_18 = _16;
_13.fld5 = 12377_u16 | 61098_u16;
_13.fld0 = [_6.3,_6.3,_6.3,_6.3,_6.3,_6.3];
_13.fld3 = _7;
_13.fld2 = [_1];
Goto(bb5)
}
bb5 = {
_10 = Adt55::Variant1 { fld0: _13.fld5 };
_16 = _18 & _18;
_6.1 = -_11;
_6.1 = -_11;
RET = _1;
_10 = Adt55::Variant1 { fld0: _13.fld5 };
_14 = _6.0 as f32;
_9.0 = _8.0;
_2 = [35006185136804066932201874969846579094_i128,159557472146050554479690241243482814001_i128,(-15112538111265706740908547280307715263_i128),(-73575802002441855082385636625994029698_i128),137799175990888633500201769722083055928_i128,98040619559051246411439200177726884505_i128,(-49329236994853298591290675833688323205_i128),75674571007348000061000832180043672246_i128];
_22.0.0 = _6.0 << _6.2;
_22.2 = (931288993_i32, (-2276720908313164474_i64), _4);
_13.fld1 = _1;
RET = _4;
_12 = _19;
place!(Field::<Adt45>(Variant(_10, 2), 5)).fld3.fld2 = [_4];
place!(Field::<Adt45>(Variant(_10, 2), 5)).fld4.fld3.0 = _6;
_9 = _8;
_13.fld0 = [Field::<Adt45>(Variant(_10, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_10, 2), 5).fld4.fld3.0.3,Field::<Adt45>(Variant(_10, 2), 5).fld4.fld3.0.3,_6.3,_6.3,_6.3];
place!(Field::<Adt45>(Variant(_10, 2), 5)).fld0 = [_1];
place!(Field::<Adt45>(Variant(_10, 2), 5)).fld4.fld3.2.0 = _22.2.0 ^ _22.2.0;
match Field::<Adt45>(Variant(_10, 2), 5).fld4.fld3.0.2 {
0 => bb4,
1 => bb2,
2 => bb3,
3 => bb6,
4 => bb7,
5 => bb9,
_ => bb8
}
}
bb6 = {
_12 = [_6.3,_6.3,_6.3,_6.3,_6.3];
RET = _1;
_6.0 = 16117726447758847560_u64 as u32;
_8 = (_9.0, _9.1);
_14 = _6.3 as f32;
_13.fld1 = _1;
_8 = (_9.0, _9.1);
_5 = _6.0;
_19 = [_6.3,_6.3,_6.3,_6.3,_6.3];
_6.3 = !2334_i16;
_8.0 = _9.0;
_5 = _6.0;
_8.1 = _3;
_18 = _16;
_13.fld5 = 12377_u16 | 61098_u16;
_13.fld0 = [_6.3,_6.3,_6.3,_6.3,_6.3,_6.3];
_13.fld3 = _7;
_13.fld2 = [_1];
Goto(bb5)
}
bb7 = {
_13.fld0 = [_6.3,_6.3,_6.3,_6.3,_6.3,_6.3];
_9 = _8;
_13.fld2 = [RET];
_6.3 = 22931_i16;
_8.1 = _3;
_6 = (_5, _11, 5_usize, 16804_i16);
_7 = 33_u8 << _6.0;
_13.fld4 = [_11,_6.1,_11,_6.1];
_8.1 = core::ptr::addr_of!(_12);
place!(Field::<u16>(Variant(_10, 1), 0)) = 3864_u16 ^ 3133_u16;
RET = _13.fld1;
_9 = (_8.0, _3);
_6.3 = _7 as i16;
_9.0 = core::ptr::addr_of_mut!(_2);
_13.fld4 = [_6.1,_6.1,_11,_11];
_12 = [_6.3,_6.3,_6.3,_6.3,_6.3];
_16 = true;
_7 = RET as u8;
_9 = (_8.0, _8.1);
_8.0 = _9.0;
_6.3 = (-19369_i16);
_16 = true;
SetDiscriminant(_10, 3);
RET = _4;
Call(_11 = core::intrinsics::transmute(_6.2), ReturnTo(bb4), UnwindUnreachable())
}
bb8 = {
_2 = [1557729410097143459178343113771255063_i128,(-139495159223349062923450724404577128637_i128),(-26371512910385854449821354672531833438_i128),164227222875922689176276388823380262832_i128,19852811974175118645035872359163695793_i128,7966498243037342443461264475321221716_i128,76236531616967138890661434629025883133_i128,(-105034219474863342445735766952916343492_i128)];
_9 = (_8.0, _3);
_8.1 = _9.1;
RET = _1;
_9 = _8;
Goto(bb2)
}
bb9 = {
place!(Field::<*const bool>(Variant(_10, 2), 3)) = core::ptr::addr_of!(_16);
place!(Field::<*const bool>(Variant(_10, 2), 3)) = core::ptr::addr_of!(_18);
Goto(bb10)
}
bb10 = {
_22.0.3 = _6.3;
place!(Field::<Adt45>(Variant(_10, 2), 5)).fld5 = 271380887025274284219064933766689019464_u128 as i32;
_15 = 107717718874980092789427218790099366184_u128 as f64;
_22.0.0 = _6.0;
place!(Field::<Adt45>(Variant(_10, 2), 5)).fld4.fld3.0.0 = !_22.0.0;
_6.1 = !_11;
_8 = (_9.0, _3);
_23 = _4;
_6.3 = Field::<Adt45>(Variant(_10, 2), 5).fld4.fld3.0.3 >> _7;
_2 = [(-21039733031222389278489584820691066378_i128),74448822582439493927919305166463827560_i128,12137086505256921467426371094051035618_i128,(-17887409568352349294885366237463315545_i128),(-126368664373458009923665365894731338192_i128),(-63796753042397660742923461290494225058_i128),(-22138242318569185821522796171973313910_i128),104938049666457589534741843461533784593_i128];
place!(Field::<Adt45>(Variant(_10, 2), 5)).fld3.fld1 = _4;
_1 = _4;
place!(Field::<Adt45>(Variant(_10, 2), 5)).fld4.fld5 = Field::<Adt45>(Variant(_10, 2), 5).fld4.fld3.2.0 | Field::<Adt45>(Variant(_10, 2), 5).fld4.fld3.2.0;
place!(Field::<Adt45>(Variant(_10, 2), 5)).fld3.fld4 = _13.fld4;
Goto(bb11)
}
bb11 = {
_22.0.1 = _11;
place!(Field::<Adt45>(Variant(_10, 2), 5)).fld3.fld4 = [_6.1,_6.1,_22.0.1,_11];
_2 = [(-39661316484696861282790677723458312993_i128),(-73109411474893431304479956293943346697_i128),112946130272084886054459867132348142625_i128,(-76763880849777435501068633023808155324_i128),(-140154969424686524561874737799852122305_i128),(-137516165670743092037008760340872756459_i128),43606970306044625692885939401965954833_i128,(-19186816643756579255469363506351183777_i128)];
_22.2.1 = -(-6713169635109114845_i64);
place!(Field::<Adt45>(Variant(_10, 2), 5)).fld3.fld4 = _13.fld4;
_6 = (_22.0.0, _22.0.1, Field::<Adt45>(Variant(_10, 2), 5).fld4.fld3.0.2, _22.0.3);
RET = _13.fld1;
place!(Field::<[bool; 2]>(Variant(_10, 2), 0)) = [_16,_18];
place!(Field::<Adt45>(Variant(_10, 2), 5)).fld2 = _15;
place!(Field::<Adt45>(Variant(_10, 2), 5)).fld3 = Adt43 { fld0: _13.fld0,fld1: _23,fld2: Field::<Adt45>(Variant(_10, 2), 5).fld0,fld3: _7,fld4: _13.fld4,fld5: _13.fld5 };
place!(Field::<Adt45>(Variant(_10, 2), 5)).fld3.fld5 = _13.fld5 << Field::<Adt45>(Variant(_10, 2), 5).fld4.fld3.2.0;
Goto(bb12)
}
bb12 = {
_6.3 = Field::<Adt45>(Variant(_10, 2), 5).fld4.fld3.0.3 | _22.0.3;
_24.0 = 5581571116106682165_u64 + 8259898412714003981_u64;
_30.fld1.fld2 = Field::<Adt45>(Variant(_10, 2), 5).fld4.fld3.0.1;
_7 = _22.2.1 as u8;
place!(Field::<Adt45>(Variant(_10, 2), 5)).fld4.fld3.2.1 = _22.2.1;
_22.0 = (_5, _30.fld1.fld2, _6.2, _6.3);
place!(Field::<Adt45>(Variant(_10, 2), 5)).fld3.fld0 = [_22.0.3,_22.0.3,_22.0.3,_22.0.3,Field::<Adt45>(Variant(_10, 2), 5).fld4.fld3.0.3,_22.0.3];
place!(Field::<Adt45>(Variant(_10, 2), 5)).fld5 = Field::<Adt45>(Variant(_10, 2), 5).fld4.fld5 & Field::<Adt45>(Variant(_10, 2), 5).fld4.fld3.2.0;
place!(Field::<Adt45>(Variant(_10, 2), 5)).fld4.fld3.2 = _22.2;
Goto(bb13)
}
bb13 = {
RET = _4;
place!(Field::<Adt45>(Variant(_10, 2), 5)).fld1 = [_22.0.3,_22.0.3,_22.0.3,_6.3,_22.0.3,_22.0.3];
place!(Field::<Adt45>(Variant(_10, 2), 5)).fld3.fld3 = _7;
_21 = Field::<Adt45>(Variant(_10, 2), 5).fld2;
_25 = core::ptr::addr_of!(_19);
place!(Field::<Adt45>(Variant(_10, 2), 5)).fld4.fld0 = _13.fld5 != _13.fld5;
place!(Field::<Adt45>(Variant(_10, 2), 5)).fld3 = _13;
_33.1 = !_22.2.1;
_5 = _6.0;
_23 = _4;
_13.fld3 = _7 | Field::<Adt45>(Variant(_10, 2), 5).fld3.fld3;
place!(Field::<Adt45>(Variant(_10, 2), 5)).fld4.fld1 = core::ptr::addr_of!(_18);
place!(Field::<Adt45>(Variant(_10, 2), 5)).fld4.fld3.3 = [_22.0.3,Field::<Adt45>(Variant(_10, 2), 5).fld4.fld3.0.3,_6.3,_6.3,_22.0.3,_22.0.3];
place!(Field::<Adt45>(Variant(_10, 2), 5)).fld4.fld3.0.2 = !_6.2;
Goto(bb14)
}
bb14 = {
_34 = !(-136217163603454835971042800561438227712_i128);
_13.fld1 = Field::<Adt45>(Variant(_10, 2), 5).fld4.fld3.2.2;
_25 = core::ptr::addr_of!(_19);
place!(Field::<[bool; 2]>(Variant(_10, 2), 0)) = [Field::<Adt45>(Variant(_10, 2), 5).fld4.fld0,Field::<Adt45>(Variant(_10, 2), 5).fld4.fld0];
Goto(bb15)
}
bb15 = {
Call(_36 = dump_var(17_usize, 18_usize, Move(_18), 4_usize, Move(_4), 5_usize, Move(_5), 1_usize, Move(_1)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_36 = dump_var(17_usize, 2_usize, Move(_2), 23_usize, Move(_23), 24_usize, Move(_24), 37_usize, _37), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn18(mut _1: isize,mut _2: *mut [i128; 8]) -> u16 {
mir! {
type RET = u16;
let _3: (u32, isize, usize, i16);
let _4: (u64,);
let _5: bool;
let _6: (u64,);
let _7: i8;
let _8: Adt43;
let _9: u16;
let _10: f64;
let _11: Adt52;
let _12: bool;
let _13: [bool; 2];
let _14: i128;
let _15: f32;
let _16: isize;
let _17: u8;
let _18: bool;
let _19: u32;
let _20: *mut u16;
let _21: [i16; 6];
let _22: isize;
let _23: i32;
let _24: [i128; 8];
let _25: ();
let _26: ();
{
_3.1 = _1;
_3.3 = 4561_i16 - 9662_i16;
_1 = false as isize;
_3.0 = 22067_u16 as u32;
_3.0 = !3688944065_u32;
RET = 44105_u16 - 39376_u16;
RET = 2128274128245824562_u64 as u16;
_3 = (4238548717_u32, _1, 11827427022093184585_usize, 8897_i16);
RET = !20833_u16;
RET = 21065_u16 ^ 58703_u16;
_4 = (1692687304274062817_u64,);
RET = 47333_u16 << _3.1;
_4 = (3169971226015039362_u64,);
_3.1 = _3.2 as isize;
_3.0 = 660049896_u32;
_4 = (9231091092299493633_u64,);
RET = 52449_u16 >> _3.2;
_1 = _3.1;
RET = 18198_u16;
RET = !10998_u16;
_3.0 = RET as u32;
_4.0 = 10584885313979320174_u64 ^ 2390552352477472606_u64;
_3.2 = 169_u8 as usize;
_3 = (1193090908_u32, _1, 6114987254467863466_usize, 12223_i16);
_3.2 = !4_usize;
_3 = (892907384_u32, _1, 3_usize, (-32736_i16));
Goto(bb1)
}
bb1 = {
_3.2 = !13710719692164582756_usize;
_3.0 = !1994785987_u32;
_4 = (15161267329935834736_u64,);
_3.0 = 138265083_u32;
RET = !36053_u16;
RET = 51284_u16 << _3.3;
match _3.3 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
340282366920938463463374607431768178720 => bb9,
_ => bb8
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
_3 = (743222833_u32, _1, 14998469920656788650_usize, 5930_i16);
_3.3 = 32203_i16 ^ (-239_i16);
RET = !15948_u16;
_5 = false ^ false;
RET = 3572_u16 & 42079_u16;
RET = 20648_u16;
_4.0 = 11432072037117571786_u64;
_3.1 = _1 ^ _1;
_1 = _3.1 ^ _3.1;
_4.0 = 15612413395357128739_u64 * 147650309181498393_u64;
_3 = (1670163087_u32, _1, 9605912936001207773_usize, (-28115_i16));
_4.0 = 13666619728822343145_u64;
_7 = RET as i8;
_6.0 = _4.0;
_4.0 = (-1455099992446313611_i64) as u64;
_4.0 = !_6.0;
_9 = RET + RET;
_8.fld2 = ['\u{94f63}'];
_8.fld4 = [_3.1,_3.1,_1,_3.1];
_8.fld5 = !_9;
_8.fld4 = [_1,_3.1,_3.1,_3.1];
_12 = _5;
Goto(bb10)
}
bb10 = {
_3.3 = -808_i16;
_8.fld1 = '\u{28af0}';
_3.0 = 699982632_u32;
_14 = _3.1 as i128;
_8.fld3 = !254_u8;
_14 = _7 as i128;
_4.0 = _6.0 + _6.0;
_13 = [_5,_12];
_1 = _7 as isize;
_7 = !38_i8;
_6.0 = _4.0 * _4.0;
_15 = 1494985161_i32 as f32;
_3.2 = _3.0 as usize;
_14 = (-151567311914272224946279623401679350160_i128);
_3.2 = 6_usize;
_3.1 = _8.fld1 as isize;
_8.fld1 = '\u{eb77c}';
_3.0 = 4290461481_u32 + 1240301752_u32;
_14 = 11118910386088918979036146068724651485_i128 * 77011798164674730871012732563062549706_i128;
Goto(bb11)
}
bb11 = {
_8.fld0 = [_3.3,_3.3,_3.3,_3.3,_3.3,_3.3];
_3.2 = (-1142781451_i32) as usize;
_16 = _3.1 ^ _1;
_12 = _3.2 > _3.2;
Call(_3.0 = core::intrinsics::bswap(2267268199_u32), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
RET = _9 >> _3.1;
_4 = _6;
_10 = _7 as f64;
_8.fld1 = '\u{fb9a6}';
RET = _16 as u16;
_6.0 = _4.0;
_8.fld0 = [_3.3,_3.3,_3.3,_3.3,_3.3,_3.3];
_15 = 1690270757_i32 as f32;
_10 = _8.fld3 as f64;
RET = _9 + _9;
_1 = _15 as isize;
_8.fld5 = _9 ^ RET;
_18 = RET >= _9;
_3 = (66026625_u32, _16, 6_usize, (-8214_i16));
_13 = [_5,_18];
RET = _9 ^ _9;
Goto(bb13)
}
bb13 = {
_6.0 = _4.0 & _4.0;
_8.fld4 = [_16,_16,_16,_16];
_8.fld4 = [_16,_3.1,_3.1,_16];
_4 = _6;
RET = !_9;
_4.0 = _6.0 + _6.0;
_19 = _3.0;
_18 = _12;
_5 = _3.1 != _3.1;
_1 = -_16;
_17 = !_8.fld3;
_3.2 = _7 as usize;
_6 = (_4.0,);
_19 = _3.0;
_8.fld1 = '\u{3d9da}';
_9 = _8.fld5 << _3.0;
_12 = !_5;
_8.fld1 = '\u{8fa3f}';
_6 = (_4.0,);
_6 = (_4.0,);
_18 = !_5;
_8.fld0 = [_3.3,_3.3,_3.3,_3.3,_3.3,_3.3];
_12 = !_5;
_5 = !_18;
match _3.3 {
0 => bb1,
1 => bb6,
2 => bb14,
3 => bb15,
4 => bb16,
5 => bb17,
340282366920938463463374607431768203242 => bb19,
_ => bb18
}
}
bb14 = {
Return()
}
bb15 = {
Return()
}
bb16 = {
Return()
}
bb17 = {
Return()
}
bb18 = {
Return()
}
bb19 = {
_21 = _8.fld0;
_8.fld3 = _3.2 as u8;
_7 = -65_i8;
_20 = core::ptr::addr_of_mut!(RET);
_19 = _3.0;
_6.0 = _4.0 << _8.fld3;
_4 = (_6.0,);
_3.2 = !13142119916123974906_usize;
_22 = _10 as isize;
_3 = (_19, _22, 12981725888633357629_usize, 12318_i16);
_3.3 = 1805_i16;
_3.2 = !14991162262849417101_usize;
_3.3 = (-17926_i16);
_4.0 = _6.0 & _6.0;
_7 = (-125_i8) | (-73_i8);
_8.fld5 = !(*_20);
_23 = _3.2 as i32;
Goto(bb20)
}
bb20 = {
Call(_25 = dump_var(18_usize, 22_usize, Move(_22), 5_usize, Move(_5), 14_usize, Move(_14), 17_usize, Move(_17)), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
Call(_25 = dump_var(18_usize, 16_usize, Move(_16), 1_usize, Move(_1), 21_usize, Move(_21), 23_usize, Move(_23)), ReturnTo(bb22), UnwindUnreachable())
}
bb22 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn19(mut _1: [i16; 6],mut _2: u32,mut _3: [i16; 6],mut _4: (([i16; 6],), u8, ([i16; 6],), *const bool),mut _5: isize,mut _6: [i16; 6]) -> isize {
mir! {
type RET = isize;
let _7: i16;
let _8: isize;
let _9: i128;
let _10: i16;
let _11: [i128; 8];
let _12: (*mut [i128; 8], *const [i16; 5]);
let _13: i32;
let _14: Adt55;
let _15: char;
let _16: f32;
let _17: [bool; 8];
let _18: ((u32, isize, usize, i16), i64, (i32, i64, char), [i16; 6]);
let _19: [u8; 1];
let _20: ();
let _21: ();
{
RET = (-108018487896216683283918551768329958265_i128) as isize;
_2 = 58646_u16 as u32;
_4.0.0 = [(-14089_i16),(-24075_i16),1253_i16,(-24889_i16),(-27209_i16),(-19622_i16)];
_4.2 = _4.0;
_1 = [5575_i16,(-18935_i16),22312_i16,15472_i16,20827_i16,(-32099_i16)];
_1 = [(-10584_i16),(-28638_i16),(-19531_i16),19386_i16,(-12042_i16),(-14891_i16)];
_4.1 = (-1677114776_i32) as u8;
_4.2.0 = [620_i16,17438_i16,5230_i16,12719_i16,(-13697_i16),(-19200_i16)];
_1 = [14911_i16,(-18687_i16),(-16380_i16),13202_i16,18341_i16,(-14222_i16)];
_8 = false as isize;
_1 = [(-32159_i16),(-8005_i16),(-7292_i16),(-20450_i16),15087_i16,(-23645_i16)];
RET = 212167756746901543648357304524165733992_u128 as isize;
_7 = -(-15614_i16);
_9 = (-107887870406507223553366684494667442525_i128);
RET = _5;
Goto(bb1)
}
bb1 = {
_5 = 11411652777073516682_u64 as isize;
_9 = 163532951000816245840372825527459372822_i128;
_4.2.0 = _6;
_9 = !(-119815038766078213555091973350709068918_i128);
_3 = [_7,_7,_7,_7,_7,_7];
_4.0 = _4.2;
_4.2.0 = [_7,_7,_7,_7,_7,_7];
_3 = [_7,_7,_7,_7,_7,_7];
_4.2.0 = _6;
_9 = 54_i8 as i128;
_3 = [_7,_7,_7,_7,_7,_7];
_6 = [_7,_7,_7,_7,_7,_7];
_10 = _8 as i16;
_4.2 = _4.0;
_6 = [_10,_7,_10,_7,_10,_10];
_11 = [_9,_9,_9,_9,_9,_9,_9,_9];
_8 = !_5;
_1 = [_10,_7,_10,_7,_7,_7];
_3 = [_10,_7,_7,_10,_7,_10];
_12.0 = core::ptr::addr_of_mut!(_11);
_6 = [_10,_10,_7,_10,_10,_10];
_4.2 = _4.0;
_11 = [_9,_9,_9,_9,_9,_9,_9,_9];
_4.1 = !76_u8;
_7 = -_10;
_3 = _4.2.0;
_8 = RET * RET;
Goto(bb2)
}
bb2 = {
_4.0 = (_3,);
Goto(bb3)
}
bb3 = {
_3 = [_7,_7,_7,_10,_7,_7];
_14 = Adt55::Variant1 { fld0: 15207_u16 };
RET = _8 + _8;
RET = _8 | _8;
_1 = _4.2.0;
_4.2 = (_4.0.0,);
_4.2 = _4.0;
_1 = [_10,_7,_7,_10,_7,_10];
_10 = _4.1 as i16;
_14 = Adt55::Variant1 { fld0: 26960_u16 };
_13 = _4.1 as i32;
RET = !_8;
_2 = 2144366066_u32;
_8 = _5 * _5;
_2 = !300723835_u32;
_7 = _10;
_5 = RET | _8;
_18.0 = (_2, RET, 2_usize, _7);
_18.3 = [_7,_7,_18.0.3,_7,_18.0.3,_10];
_18.2.0 = 3367154421444194004_i64 as i32;
_16 = 3925439647450962979_i64 as f32;
RET = _18.0.1 >> _5;
_15 = '\u{715a5}';
_15 = '\u{c3a81}';
_12.0 = core::ptr::addr_of_mut!(_11);
_18.0.1 = -_5;
Goto(bb4)
}
bb4 = {
Call(_20 = dump_var(19_usize, 6_usize, Move(_6), 2_usize, Move(_2), 11_usize, Move(_11), 1_usize, Move(_1)), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
Call(_20 = dump_var(19_usize, 15_usize, Move(_15), 13_usize, Move(_13), 21_usize, _21, 21_usize, _21), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
Return()
}

}
}
pub fn main() {
                fn0(std::hint::black_box(false), std::hint::black_box(7346386742950397273_u64), std::hint::black_box((-9223372036854775808_isize)), std::hint::black_box(56230_u16), std::hint::black_box(6056_i16), std::hint::black_box(470738182_i32), std::hint::black_box(422959476_u32), std::hint::black_box(325599152632482342268446026291290393480_u128), std::hint::black_box(5362484585699673131_usize), std::hint::black_box(25_u8));
                
            }
#[derive(Debug,Copy,Clone)]
pub struct Adt43 {
fld0: [i16; 6],
fld1: char,
fld2: [char; 1],
fld3: u8,
fld4: [isize; 4],
fld5: u16,
}
#[derive(Debug,Copy,Clone)]
pub struct Adt44 {
fld0: bool,
fld1: *const bool,
fld2: isize,
fld3: ((u32, isize, usize, i16), i64, (i32, i64, char), [i16; 6]),
fld4: usize,
fld5: i32,
}
#[derive(Debug,Copy,Clone)]
pub struct Adt45 {
fld0: [char; 1],
fld1: [i16; 6],
fld2: f64,
fld3: Adt43,
fld4: Adt44,
fld5: i32,
fld6: *const [i16; 5],
}
#[derive(Debug,Copy,Clone)]
pub enum Adt46 {
Variant0{
fld0: ((u32, isize, usize, i16), i64, (i32, i64, char), [i16; 6]),

},
Variant1{
fld0: i128,
fld1: *mut [i128; 8],
fld2: [bool; 2],
fld3: ([i16; 6],),
fld4: *const f32,
fld5: u16,

}}
#[derive(Debug)]
pub enum Adt47 {
Variant0{
fld0: Adt46,
fld1: [u32; 1],
fld2: f32,
fld3: Adt45,
fld4: *mut u16,

},
Variant1{
fld0: *const [i16; 5],
fld1: [bool; 8],
fld2: [u8; 4],

},
Variant2{
fld0: ((u32, isize, usize, i16), i64, (i32, i64, char), [i16; 6]),
fld1: (([i16; 6],), u8, ([i16; 6],), *const bool),
fld2: *const f32,

},
Variant3{
fld0: i16,
fld1: [bool; 2],
fld2: f64,

}}
#[derive(Debug)]
pub enum Adt48 {
Variant0{
fld0: (*mut [i128; 8], *const [i16; 5]),
fld1: *const bool,
fld2: [char; 1],
fld3: Adt46,
fld4: [isize; 4],
fld5: [bool; 8],
fld6: i64,
fld7: [u32; 1],

},
Variant1{
fld0: *const [i16; 5],
fld1: u128,
fld2: *mut u16,
fld3: ((u32, isize, usize, i16), i64, (i32, i64, char), [i16; 6]),
fld4: i16,
fld5: Adt44,

},
Variant2{
fld0: u8,
fld1: usize,
fld2: isize,
fld3: ([i16; 6],),
fld4: Adt47,
fld5: Adt45,
fld6: [bool; 8],

},
Variant3{
fld0: bool,
fld1: [i16; 5],
fld2: i32,
fld3: u8,

}}
#[derive(Debug,Copy,Clone)]
pub struct Adt49 {
fld0: bool,
fld1: *mut [i128; 8],
fld2: [bool; 8],
fld3: usize,
fld4: [i16; 5],
fld5: *const u64,
fld6: *const f32,
fld7: [u8; 4],
}
#[derive(Debug)]
pub enum Adt50 {
Variant0{
fld0: u128,
fld1: Adt48,

},
Variant1{
fld0: [i16; 6],
fld1: *const f32,

},
Variant2{
fld0: Adt45,
fld1: (i32, i64, char),
fld2: [bool; 8],
fld3: i8,

}}
#[derive(Debug)]
pub enum Adt51 {
Variant0{
fld0: [bool; 8],
fld1: Adt49,
fld2: u16,

},
Variant1{
fld0: ((u32, isize, usize, i16), i64, (i32, i64, char), [i16; 6]),
fld1: [bool; 8],
fld2: Adt43,

},
Variant2{
fld0: Adt47,

}}
#[derive(Debug)]
pub enum Adt52 {
Variant0{
fld0: [i16; 6],
fld1: Adt43,
fld2: isize,
fld3: u128,
fld4: (([i16; 6],), u8, ([i16; 6],), *const bool),
fld5: *const f32,
fld6: Adt45,
fld7: i128,

},
Variant1{
fld0: Adt44,
fld1: *const f32,
fld2: [bool; 8],

}}
#[derive(Debug)]
pub enum Adt53 {
Variant0{
fld0: Adt46,
fld1: (f64, u128),
fld2: isize,
fld3: Adt48,
fld4: [isize; 4],
fld5: [u8; 1],
fld6: Adt44,

},
Variant1{
fld0: usize,
fld1: [u8; 1],
fld2: *mut u16,
fld3: i8,
fld4: (u32, isize, usize, i16),
fld5: *const f32,
fld6: [char; 1],

},
Variant2{
fld0: u128,
fld1: i128,
fld2: [char; 1],
fld3: *const f32,
fld4: Adt46,
fld5: Adt52,

},
Variant3{
fld0: ((u32, isize, usize, i16), i64, (i32, i64, char), [i16; 6]),
fld1: *mut u16,

}}
#[derive(Debug)]
pub enum Adt54 {
Variant0{
fld0: Adt52,
fld1: char,
fld2: Adt45,
fld3: [isize; 4],
fld4: ([i16; 6],),

},
Variant1{
fld0: *const bool,

},
Variant2{
fld0: u8,
fld1: u128,
fld2: (i32, i64, char),

}}
#[derive(Debug)]
pub enum Adt55 {
Variant0{
fld0: bool,
fld1: (f64, u128),

},
Variant1{
fld0: u16,

},
Variant2{
fld0: [bool; 2],
fld1: f32,
fld2: Adt48,
fld3: *const bool,
fld4: [u32; 1],
fld5: Adt45,
fld6: [i128; 8],
fld7: *const [i16; 5],

},
Variant3{
fld0: Adt47,
fld1: i16,

}}
#[derive(Debug)]
pub struct Adt56 {
fld0: [u32; 7],
fld1: Adt53,
fld2: isize,
fld3: *const f32,
fld4: Adt52,
}
#[derive(Debug)]
pub enum Adt57 {
Variant0{
fld0: usize,

},
Variant1{
fld0: Adt52,

}}
#[derive(Debug,Copy,Clone)]
pub enum Adt58 {
Variant0{
fld0: *const f32,
fld1: [bool; 8],

},
Variant1{
fld0: [u32; 7],
fld1: [i16; 5],
fld2: *const bool,
fld3: Adt49,
fld4: i128,
fld5: ((u32, isize, usize, i16), i64, (i32, i64, char), [i16; 6]),

}}
#[derive(Debug)]
pub struct Adt59 {
fld0: Adt58,
fld1: Adt56,
fld2: u64,
fld3: *const u64,
}

