#![recursion_limit = "1024"]
    #![feature(custom_mir, core_intrinsics, const_hash)]
    #![allow(unused_parens, unused_assignments, overflowing_literals)]
    extern crate core;
    use core::intrinsics::mir::*;

    use std::fmt::Debug;

    #[inline(never)]
    fn dump_var(
        f: usize,
        var0: usize, val0: impl Debug,
        var1: usize, val1: impl Debug,
        var2: usize, val2: impl Debug,
        var3: usize, val3: impl Debug,
    ) {
        println!("fn{f}:_{var0} = {val0:?}\n_{var1} = {val1:?}\n_{var2} = {val2:?}\n_{var3} = {val3:?}");
    }
    #[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn0(mut _1: bool,mut _2: char,mut _3: isize,mut _4: i8,mut _5: i16,mut _6: i32,mut _7: i64,mut _8: i128,mut _9: u64,mut _10: u8,mut _11: u16,mut _12: u128) -> bool {
mir! {
type RET = bool;
let _13: Adt54;
let _14: bool;
let _15: [i128; 1];
let _16: f32;
let _17: bool;
let _18: i64;
let _19: u64;
let _20: isize;
let _21: ([isize; 6],);
let _22: [i128; 7];
let _23: [isize; 6];
let _24: (i8, i64, u8, f32, u8, u32);
let _25: [bool; 3];
let _26: (f32, [bool; 3], char, f32, i8);
let _27: [u16; 8];
let _28: Adt44;
let _29: i32;
let _30: bool;
let _31: *mut u32;
let _32: ();
let _33: ();
{
_3 = -(-9223372036854775808_isize);
_12 = !3014300060946041001187316253861414653_u128;
_8 = -71134771613418181524814429986117646185_i128;
_9 = 879788454176131189_u64;
_12 = _3 as u128;
_4 = !(-66_i8);
_10 = _9 as u8;
_11 = 18915_u16;
RET = false & false;
_1 = RET;
_8 = _1 as i128;
_7 = 3719355199833996983_i64;
_5 = 15470_i16 ^ 2125_i16;
_12 = _9 as u128;
_10 = _9 as u8;
_6 = 359804277_i32 & (-1545379268_i32);
_3 = (-9223372036854775808_isize);
_11 = !10756_u16;
_1 = !RET;
_8 = 3818229468_u32 as i128;
_3 = (-48_isize) & (-2_isize);
_3 = -(-9223372036854775808_isize);
_1 = !RET;
_11 = !12147_u16;
_11 = !39440_u16;
RET = _1 | _1;
Call(_16 = core::intrinsics::transmute(_6), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_16 = _12 as f32;
_14 = !_1;
_3 = RET as isize;
_1 = RET | RET;
_2 = '\u{4daea}';
_5 = 3073_i16 * 2870_i16;
_17 = RET;
_18 = -_7;
_1 = !RET;
Goto(bb2)
}
bb2 = {
_5 = !(-11705_i16);
_8 = (-30027384207466165691926474522129940105_i128);
_15 = [_8];
_18 = -_7;
_6 = -935718258_i32;
_15 = [_8];
_11 = _16 as u16;
_2 = '\u{aa211}';
_21.0 = [_3,_3,_3,_3,_3,_3];
_10 = 106_u8;
_9 = 15417151865817139630_u64;
Goto(bb3)
}
bb3 = {
_17 = _4 != _4;
_2 = '\u{571e6}';
_9 = 1177470003345259027_u64 * 4674806562747671802_u64;
_22 = [_8,_8,_8,_8,_8,_8,_8];
_20 = _3 & _3;
_26.3 = -_16;
_23 = [_20,_3,_20,_20,_3,_3];
match _7 {
0 => bb1,
1 => bb4,
2 => bb5,
3 => bb6,
4 => bb7,
5 => bb8,
3719355199833996983 => bb10,
_ => bb9
}
}
bb4 = {
_5 = !(-11705_i16);
_8 = (-30027384207466165691926474522129940105_i128);
_15 = [_8];
_18 = -_7;
_6 = -935718258_i32;
_15 = [_8];
_11 = _16 as u16;
_2 = '\u{aa211}';
_21.0 = [_3,_3,_3,_3,_3,_3];
_10 = 106_u8;
_9 = 15417151865817139630_u64;
Goto(bb3)
}
bb5 = {
_16 = _12 as f32;
_14 = !_1;
_3 = RET as isize;
_1 = RET | RET;
_2 = '\u{4daea}';
_5 = 3073_i16 * 2870_i16;
_17 = RET;
_18 = -_7;
_1 = !RET;
Goto(bb2)
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_26.0 = 2226510713_u32 as f32;
_10 = !236_u8;
_24.3 = -_16;
_26.2 = _2;
_24.0 = _4 >> _20;
_23 = _21.0;
_24.5 = _2 as u32;
_25 = [RET,RET,_1];
_14 = RET;
Goto(bb11)
}
bb11 = {
_24 = (_4, _18, _10, _26.0, _10, 308106369_u32);
_15 = [_8];
_17 = _1;
RET = _17;
_26 = (_24.3, _25, _2, _24.3, _24.0);
RET = !_14;
_5 = -28304_i16;
_26.3 = _16;
_9 = !11816496354117068295_u64;
_26 = (_24.3, _25, _2, _16, _24.0);
_26.4 = _24.0 & _4;
_19 = _11 as u64;
_24.5 = 1444763127_u32 ^ 138953616_u32;
_9 = !_19;
_26.0 = _26.3 * _16;
_14 = !_1;
_9 = _19 & _19;
_1 = RET;
_24.2 = _10 & _10;
_26.2 = _2;
_26.2 = _2;
Call(_2 = fn1(RET, _24.3, _10, _15, _20, _3, _24.3, _3, _24.1, _1, _25, _23, _24.2, _25), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
_11 = !35587_u16;
_12 = !329212438297159917941324641753136173113_u128;
_27 = [_11,_11,_11,_11,_11,_11,_11,_11];
_26.2 = _2;
_12 = 121565078035959892594164914127359904200_u128 ^ 35595303171255985854856591293025829076_u128;
_21 = (_23,);
_26.4 = _24.0 | _24.0;
_25 = _26.1;
_24 = (_26.4, _18, _10, _26.3, _10, 3207925645_u32);
RET = _24.5 > _24.5;
_24.2 = _26.2 as u8;
_24.4 = _10;
_24.3 = _16;
_20 = _6 as isize;
_14 = !RET;
_27 = [_11,_11,_11,_11,_11,_11,_11,_11];
_24.2 = _10;
Goto(bb13)
}
bb13 = {
Call(_32 = dump_var(0_usize, 5_usize, Move(_5), 11_usize, Move(_11), 22_usize, Move(_22), 10_usize, Move(_10)), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
Call(_32 = dump_var(0_usize, 14_usize, Move(_14), 27_usize, Move(_27), 1_usize, Move(_1), 18_usize, Move(_18)), ReturnTo(bb15), UnwindUnreachable())
}
bb15 = {
Call(_32 = dump_var(0_usize, 12_usize, Move(_12), 4_usize, Move(_4), 15_usize, Move(_15), 33_usize, _33), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn1(mut _1: bool,mut _2: f32,mut _3: u8,mut _4: [i128; 1],mut _5: isize,mut _6: isize,mut _7: f32,mut _8: isize,mut _9: i64,mut _10: bool,mut _11: [bool; 3],mut _12: [isize; 6],mut _13: u8,mut _14: [bool; 3]) -> char {
mir! {
type RET = char;
let _15: Adt43;
let _16: Adt50;
let _17: u64;
let _18: [isize; 6];
let _19: u128;
let _20: *mut u8;
let _21: Adt42;
let _22: u64;
let _23: [i128; 1];
let _24: [i128; 2];
let _25: bool;
let _26: i8;
let _27: f64;
let _28: bool;
let _29: [i128; 7];
let _30: ();
let _31: ();
{
_3 = _13;
_9 = 5931567672621732512_i64 * 8336366039942800135_i64;
RET = '\u{3f071}';
_5 = -_8;
_10 = !_1;
_1 = !_10;
_15.fld0 = (-1015978595_i32) as u64;
_9 = 7146336196855043489_i64 ^ 8854233552376044467_i64;
_8 = _6;
Call(_15.fld1 = fn2(_6, _12, _8, _10, _11, _5, _7, _5, _1, _10), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_14 = _11;
_5 = (-1303507133_i32) as isize;
_9 = -(-4908793636109978609_i64);
RET = '\u{28cde}';
_6 = _5;
_11 = _14;
_12 = [_5,_8,_5,_8,_8,_8];
_6 = !_8;
_13 = _3 & _3;
_4 = [(-70071408460537774614958868949747211572_i128)];
_13 = !_3;
_15.fld1 = !7081_u16;
_11 = [_10,_1,_1];
_8 = -_6;
_19 = 11164439754284306046687895839671024663_u128 ^ 340097326668537234115552679017336414773_u128;
_9 = 2722661972246211143_i64 >> _6;
_7 = -_2;
_8 = 61_i8 as isize;
_17 = _15.fld0;
RET = '\u{61eff}';
Call(_20 = fn6(_1, _19, _14, _2, _6), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_15 = Adt43 { fld0: _17,fld1: 14490_u16 };
_17 = !_15.fld0;
_4 = [(-124401164816318859941140090255831313293_i128)];
_14 = [_10,_1,_1];
_2 = _7 - _7;
_9 = !(-7813526909632801685_i64);
_12 = [_6,_6,_6,_6,_8,_8];
_12 = [_6,_5,_6,_6,_5,_8];
_13 = _3;
_15.fld1 = (-17872_i16) as u16;
RET = '\u{33974}';
RET = '\u{b57ae}';
_9 = (-3937985190444835365_i64) << _17;
_15 = Adt43 { fld0: _17,fld1: 60633_u16 };
_10 = !_1;
_6 = !_5;
_20 = core::ptr::addr_of_mut!(_3);
_20 = core::ptr::addr_of_mut!(_13);
_18 = [_5,_5,_8,_6,_6,_8];
_5 = _19 as isize;
_15.fld1 = 21957_u16;
_7 = _2;
_15.fld1 = 771110976_u32 as u16;
_8 = _15.fld1 as isize;
_11 = [_1,_10,_1];
_18 = [_8,_5,_5,_6,_5,_5];
_11 = [_1,_10,_1];
_22 = !_15.fld0;
_17 = !_15.fld0;
Goto(bb3)
}
bb3 = {
RET = '\u{36481}';
_9 = !(-1300338550352870887_i64);
_6 = _8 << _3;
_10 = _1;
_24 = [102343571001683779086375957547171548363_i128,168650574075183330832055142987473906747_i128];
Goto(bb4)
}
bb4 = {
_20 = core::ptr::addr_of_mut!((*_20));
RET = '\u{42d86}';
_17 = _22 | _15.fld0;
RET = '\u{26e0a}';
_4 = [62293302955254730413252506955570166769_i128];
_6 = _8;
_6 = _2 as isize;
_15 = Adt43 { fld0: _22,fld1: 32812_u16 };
_15.fld1 = 1236229792_i32 as u16;
_15.fld1 = !61664_u16;
RET = '\u{e592f}';
_6 = -_5;
_15 = Adt43 { fld0: _17,fld1: 25972_u16 };
_7 = _2 + _2;
RET = '\u{c54be}';
_25 = _10 | _10;
_25 = _19 >= _19;
Goto(bb5)
}
bb5 = {
_18 = [_5,_8,_5,_6,_8,_5];
Call(_19 = core::intrinsics::bswap(186822881204412012808651639257515264898_u128), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
_3 = (*_20);
_15 = Adt43 { fld0: _22,fld1: 52080_u16 };
_4 = [(-142177549590882127524792854122029282768_i128)];
_15.fld1 = 41801_u16;
_22 = _17;
_27 = (-11718142966460741976592362657825904770_i128) as f64;
_19 = !293473479925346810258699547513453392671_u128;
RET = '\u{b1837}';
_23 = [47248657010679807857894186461071116792_i128];
_6 = _5 >> _5;
Goto(bb7)
}
bb7 = {
_13 = _3;
_20 = core::ptr::addr_of_mut!(_13);
RET = '\u{89793}';
_17 = _15.fld0;
_27 = _17 as f64;
_20 = core::ptr::addr_of_mut!(_3);
_28 = !_25;
match _15.fld1 {
0 => bb6,
1 => bb2,
2 => bb5,
3 => bb4,
4 => bb8,
5 => bb9,
6 => bb10,
41801 => bb12,
_ => bb11
}
}
bb8 = {
_15 = Adt43 { fld0: _17,fld1: 14490_u16 };
_17 = !_15.fld0;
_4 = [(-124401164816318859941140090255831313293_i128)];
_14 = [_10,_1,_1];
_2 = _7 - _7;
_9 = !(-7813526909632801685_i64);
_12 = [_6,_6,_6,_6,_8,_8];
_12 = [_6,_5,_6,_6,_5,_8];
_13 = _3;
_15.fld1 = (-17872_i16) as u16;
RET = '\u{33974}';
RET = '\u{b57ae}';
_9 = (-3937985190444835365_i64) << _17;
_15 = Adt43 { fld0: _17,fld1: 60633_u16 };
_10 = !_1;
_6 = !_5;
_20 = core::ptr::addr_of_mut!(_3);
_20 = core::ptr::addr_of_mut!(_13);
_18 = [_5,_5,_8,_6,_6,_8];
_5 = _19 as isize;
_15.fld1 = 21957_u16;
_7 = _2;
_15.fld1 = 771110976_u32 as u16;
_8 = _15.fld1 as isize;
_11 = [_1,_10,_1];
_18 = [_8,_5,_5,_6,_5,_5];
_11 = [_1,_10,_1];
_22 = !_15.fld0;
_17 = !_15.fld0;
Goto(bb3)
}
bb9 = {
_14 = _11;
_5 = (-1303507133_i32) as isize;
_9 = -(-4908793636109978609_i64);
RET = '\u{28cde}';
_6 = _5;
_11 = _14;
_12 = [_5,_8,_5,_8,_8,_8];
_6 = !_8;
_13 = _3 & _3;
_4 = [(-70071408460537774614958868949747211572_i128)];
_13 = !_3;
_15.fld1 = !7081_u16;
_11 = [_10,_1,_1];
_8 = -_6;
_19 = 11164439754284306046687895839671024663_u128 ^ 340097326668537234115552679017336414773_u128;
_9 = 2722661972246211143_i64 >> _6;
_7 = -_2;
_8 = 61_i8 as isize;
_17 = _15.fld0;
RET = '\u{61eff}';
Call(_20 = fn6(_1, _19, _14, _2, _6), ReturnTo(bb2), UnwindUnreachable())
}
bb10 = {
_20 = core::ptr::addr_of_mut!((*_20));
RET = '\u{42d86}';
_17 = _22 | _15.fld0;
RET = '\u{26e0a}';
_4 = [62293302955254730413252506955570166769_i128];
_6 = _8;
_6 = _2 as isize;
_15 = Adt43 { fld0: _22,fld1: 32812_u16 };
_15.fld1 = 1236229792_i32 as u16;
_15.fld1 = !61664_u16;
RET = '\u{e592f}';
_6 = -_5;
_15 = Adt43 { fld0: _17,fld1: 25972_u16 };
_7 = _2 + _2;
RET = '\u{c54be}';
_25 = _10 | _10;
_25 = _19 >= _19;
Goto(bb5)
}
bb11 = {
RET = '\u{36481}';
_9 = !(-1300338550352870887_i64);
_6 = _8 << _3;
_10 = _1;
_24 = [102343571001683779086375957547171548363_i128,168650574075183330832055142987473906747_i128];
Goto(bb4)
}
bb12 = {
_3 = 90_i8 as u8;
_25 = _6 < _5;
_7 = 1676366782_u32 as f32;
Goto(bb13)
}
bb13 = {
_29 = [(-79849749031151799426636875623105241524_i128),119577905029702460264217413463205940349_i128,146789634636682546285672121555951071941_i128,57522949925685555915108449514550301302_i128,(-64506705327587778691965791854918612327_i128),144527907112482749842805272743690597926_i128,(-103610215889755231205506211106836483881_i128)];
_9 = (-7701237841341889446_i64);
_13 = _3;
_25 = _1 == _10;
Goto(bb14)
}
bb14 = {
_20 = core::ptr::addr_of_mut!((*_20));
_27 = _9 as f64;
_6 = _5 | _5;
_27 = _6 as f64;
RET = '\u{f3a01}';
_23 = [(-117527713620517910816352857437197100786_i128)];
RET = '\u{5c8a}';
_11 = _14;
_15 = Adt43 { fld0: _22,fld1: 48455_u16 };
_15 = Adt43 { fld0: _22,fld1: 61370_u16 };
_15.fld1 = 6189_u16 ^ 30052_u16;
_23 = [(-31797004001528011029994677224058572682_i128)];
_14 = _11;
Goto(bb15)
}
bb15 = {
Call(_30 = dump_var(1_usize, 13_usize, Move(_13), 28_usize, Move(_28), 3_usize, Move(_3), 9_usize, Move(_9)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_30 = dump_var(1_usize, 17_usize, Move(_17), 25_usize, Move(_25), 22_usize, Move(_22), 6_usize, Move(_6)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_30 = dump_var(1_usize, 29_usize, Move(_29), 8_usize, Move(_8), 31_usize, _31, 31_usize, _31), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn2(mut _1: isize,mut _2: [isize; 6],mut _3: isize,mut _4: bool,mut _5: [bool; 3],mut _6: isize,mut _7: f32,mut _8: isize,mut _9: bool,mut _10: bool) -> u16 {
mir! {
type RET = u16;
let _11: Adt55;
let _12: u32;
let _13: i16;
let _14: Adt45;
let _15: [u16; 8];
let _16: char;
let _17: Adt45;
let _18: *mut [bool; 3];
let _19: Adt43;
let _20: char;
let _21: u16;
let _22: (i8, i64, u8, f32, u8, u32);
let _23: Adt43;
let _24: ([isize; 6],);
let _25: isize;
let _26: f32;
let _27: ([isize; 6],);
let _28: [bool; 4];
let _29: [i128; 2];
let _30: (f32, [bool; 3], char, f32, i8);
let _31: Adt53;
let _32: ([isize; 6],);
let _33: bool;
let _34: (u32,);
let _35: bool;
let _36: bool;
let _37: f32;
let _38: u16;
let _39: Adt43;
let _40: Adt43;
let _41: [i128; 7];
let _42: (u32, (i128, *mut u32, i16), f64);
let _43: (u32,);
let _44: isize;
let _45: ([isize; 6],);
let _46: f64;
let _47: usize;
let _48: [i128; 7];
let _49: [i128; 2];
let _50: [i128; 7];
let _51: [isize; 6];
let _52: isize;
let _53: Adt43;
let _54: f64;
let _55: f64;
let _56: isize;
let _57: f32;
let _58: isize;
let _59: ();
let _60: ();
{
_2 = [_3,_6,_1,_3,_3,_8];
_5 = [_10,_10,_9];
_10 = !_9;
_9 = _10 == _10;
RET = !59265_u16;
_5 = [_9,_4,_4];
RET = 5654_u16 >> _8;
_8 = _3;
_6 = _1 >> RET;
_7 = (-333621832320997824_i64) as f32;
_3 = -_1;
_9 = !_4;
_12 = !157939421_u32;
_1 = _6;
RET = 61305_u16 << _8;
_8 = -_1;
RET = 34652_u16 * 4669_u16;
_11 = Adt55::Variant1 { fld0: _12 };
_13 = Field::<u32>(Variant(_11, 1), 0) as i16;
_7 = _8 as f32;
_6 = _8;
_3 = _6;
place!(Field::<u32>(Variant(_11, 1), 0)) = (-36909338137104657264450992463408981908_i128) as u32;
_13 = 14706_i16 * (-2880_i16);
RET = 16014_u16 - 27693_u16;
place!(Field::<u32>(Variant(_11, 1), 0)) = !_12;
Goto(bb1)
}
bb1 = {
_9 = _10;
_10 = !_4;
_14.fld3 = (-131578567849120439854916020841305350992_i128);
_11 = Adt55::Variant1 { fld0: _12 };
_9 = _14.fld3 < _14.fld3;
_7 = RET as f32;
_14.fld3 = -95404527407657802367767725122478273256_i128;
_14.fld3 = _4 as i128;
Call(_1 = core::intrinsics::bswap(_6), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_14.fld2 = _4 as u16;
_15 = [_14.fld2,_14.fld2,_14.fld2,_14.fld2,_14.fld2,RET,_14.fld2,RET];
_2 = [_6,_8,_8,_6,_8,_3];
_2 = [_6,_1,_8,_3,_6,_3];
_14.fld1 = [_10,_4,_10,_10];
_13 = !23763_i16;
RET = _14.fld2 * _14.fld2;
_12 = Field::<u32>(Variant(_11, 1), 0);
_2 = [_1,_1,_6,_8,_1,_6];
_17.fld1 = [_10,_4,_4,_4];
place!(Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2)).1 = [_10,_9,_9];
_14.fld1 = [_4,_10,_4,_10];
_2 = [_1,_3,_6,_1,_3,_6];
_17.fld2 = !_14.fld2;
place!(Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2)).1 = [_10,_4,_4];
Goto(bb3)
}
bb3 = {
_3 = _13 as isize;
_14.fld3 = _10 as i128;
_13 = (-25152_i16);
place!(Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2)) = (_7, _5, '\u{8185b}', _7, (-63_i8));
_9 = !_4;
place!(Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2)) = (_7, _5, '\u{dc167}', _7, (-89_i8));
_18 = core::ptr::addr_of_mut!(place!(Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2)).1);
_3 = _1;
_12 = !192170797_u32;
_16 = Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2).2;
_18 = core::ptr::addr_of_mut!(_5);
RET = _14.fld2;
_1 = _10 as isize;
_5 = Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2).1;
_18 = core::ptr::addr_of_mut!(_5);
_19.fld1 = RET ^ RET;
place!(Field::<[i128; 2]>(Variant(_11, 0), 0)) = [_14.fld3,_14.fld3];
_19.fld0 = 12757656541190138172_u64;
_14.fld3 = -(-3269607876670624277510983435673232121_i128);
_6 = _8 | _3;
_18 = core::ptr::addr_of_mut!((*_18));
_13 = 3472_i16 + (-2034_i16);
_14.fld1 = [_10,_10,_10,_10];
_12 = _16 as u32;
Goto(bb4)
}
bb4 = {
_18 = core::ptr::addr_of_mut!(_5);
_5 = [_4,_4,_4];
_14.fld3 = 87338702120483308919778305236662777682_i128;
_22.4 = _9 as u8;
_21 = !RET;
place!(Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2)).2 = _16;
_19.fld1 = RET >> _6;
place!(Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2)).1 = [_9,_10,_9];
_14.fld1 = [_10,_10,_4,_10];
_10 = _4;
_17.fld3 = _14.fld3 ^ _14.fld3;
_24.0 = _2;
_30.4 = Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2).0 as i8;
_22 = (Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2).4, (-2707697542784830674_i64), 40_u8, _7, 159_u8, _12);
_30 = Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2);
_29 = [_14.fld3,_17.fld3];
place!(Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2)) = _30;
_30.4 = Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2).4 ^ _22.0;
place!(Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2)).1 = [_10,_4,_9];
Call(_2 = fn3(_8, _30, _9, _16, _22, _22.1), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
_20 = _16;
_13 = !(-220_i16);
_28 = _17.fld1;
_25 = 46578922138090198151112411811546219165_u128 as isize;
_10 = !_9;
_13 = (-25435_i16);
_26 = _22.3 + Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2).0;
_19 = Adt43 { fld0: 1078907362704241786_u64,fld1: _14.fld2 };
_23.fld1 = _21 | _19.fld1;
_8 = !_3;
_30 = (Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2).3, Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2).1, _16, _22.3, _22.0);
_30 = Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2);
RET = 939820499_i32 as u16;
_15 = [_23.fld1,_17.fld2,_14.fld2,_21,_17.fld2,_14.fld2,_23.fld1,_23.fld1];
_2 = [_6,_3,_8,_6,_8,_6];
_19.fld1 = _21;
_27.0 = [_6,_6,_3,_1,_6,_25];
_15 = [_23.fld1,_23.fld1,_14.fld2,_23.fld1,_14.fld2,_14.fld2,_14.fld2,_23.fld1];
_22.3 = _26;
_5 = Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2).1;
_22.5 = !_12;
_5 = [_4,_4,_4];
_20 = _16;
_22.5 = _10 as u32;
place!(Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2)).1 = [_4,_4,_10];
Goto(bb6)
}
bb6 = {
_29 = [_14.fld3,_14.fld3];
place!(Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2)).1 = (*_18);
_34 = (_22.5,);
match _22.4 {
0 => bb1,
159 => bb8,
_ => bb7
}
}
bb7 = {
_9 = _10;
_10 = !_4;
_14.fld3 = (-131578567849120439854916020841305350992_i128);
_11 = Adt55::Variant1 { fld0: _12 };
_9 = _14.fld3 < _14.fld3;
_7 = RET as f32;
_14.fld3 = -95404527407657802367767725122478273256_i128;
_14.fld3 = _4 as i128;
Call(_1 = core::intrinsics::bswap(_6), ReturnTo(bb2), UnwindUnreachable())
}
bb8 = {
_35 = _10;
_23 = Adt43 { fld0: _19.fld0,fld1: _17.fld2 };
_14.fld3 = _22.2 as i128;
place!(Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2)) = (_26, (*_18), _20, _30.0, _22.0);
_17.fld3 = _14.fld3;
place!(Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2)).4 = _30.4 << _22.2;
RET = _19.fld1 + _21;
_33 = _4;
_17.fld3 = _14.fld3 - _14.fld3;
_40 = Adt43 { fld0: _19.fld0,fld1: _17.fld2 };
_13 = _17.fld3 as i16;
_40 = Adt43 { fld0: _23.fld0,fld1: _14.fld2 };
_26 = Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2).3;
_26 = -_30.0;
_40.fld0 = 18247781572150823329_usize as u64;
_2 = [_8,_6,_8,_8,_6,_6];
_42.1.0 = _17.fld3;
_16 = _20;
_19 = Adt43 { fld0: _40.fld0,fld1: _21 };
_41 = [_42.1.0,_14.fld3,_42.1.0,_17.fld3,_42.1.0,_42.1.0,_17.fld3];
Call(_19.fld0 = core::intrinsics::transmute(_6), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
_15 = [RET,RET,_17.fld2,_21,_17.fld2,_23.fld1,_23.fld1,_14.fld2];
_18 = core::ptr::addr_of_mut!(place!(Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2)).1);
_43 = (_22.5,);
Call(place!(Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2)) = fn4(_17.fld2, _42.1.0, _22.0, _22.3, _3, _23.fld0, _22.2, _22.2, _19.fld0, _6, _23.fld0), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_13 = 9902267308173356644803743378903473829_u128 as i16;
_7 = -_22.3;
_30 = (_22.3, _5, _16, _26, _22.0);
_22.4 = _22.2;
_27 = _24;
_22.0 = Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2).4;
_30 = (Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2).0, _5, _16, Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2).0, Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2).4);
_36 = _4;
_32 = (_2,);
RET = _8 as u16;
_22.2 = _22.4;
_6 = _8 << _40.fld1;
_14.fld3 = -_17.fld3;
_17.fld2 = RET;
_27 = (_24.0,);
_12 = 17678458431889671115_usize as u32;
_42.0 = _43.0 - _34.0;
place!(Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2)).3 = Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2).0;
_13 = 689_i16;
_32 = _27;
_41 = [_42.1.0,_14.fld3,_42.1.0,_42.1.0,_14.fld3,_14.fld3,_14.fld3];
_14.fld2 = RET + _19.fld1;
_42.0 = _43.0 << _14.fld2;
_39.fld0 = _19.fld0;
_17.fld2 = _23.fld1 - _21;
_29 = [_42.1.0,_14.fld3];
_1 = _17.fld3 as isize;
place!(Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2)) = (_30.3, _5, _20, _30.3, _22.0);
Call(_42.1.0 = fn5(_14.fld3, _34.0, _22.4, Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2), _41, _16, _14.fld2, _41, _27.0, _14.fld3, _14.fld3, _34, _29, _1, _1), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_39.fld1 = RET;
_24.0 = _32.0;
_27 = (_2,);
_41 = [_14.fld3,_14.fld3,_14.fld3,_17.fld3,_17.fld3,_14.fld3,_42.1.0];
_22.5 = !_42.0;
_42.2 = _19.fld0 as f64;
_40 = Adt43 { fld0: _39.fld0,fld1: _14.fld2 };
_20 = _30.2;
_30 = (_22.3, Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2).1, _20, Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2).3, _22.0);
Goto(bb12)
}
bb12 = {
_44 = Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2).4 as isize;
_16 = _20;
place!(Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2)).1 = [_33,_33,_10];
_45 = (_27.0,);
_51 = [_1,_1,_1,_6,_1,_1];
Call(_14.fld3 = core::intrinsics::bswap(_17.fld3), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
place!(Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2)) = (_7, _30.1, _16, _30.0, _30.4);
_33 = !_4;
_14.fld3 = -_42.1.0;
_47 = 15984450581719202425_usize;
_22.1 = -7338174831228524914_i64;
_14.fld1 = _28;
_27.0 = [_1,_1,_1,_6,_1,_1];
_47 = 13678160674947576239_usize + 18250388271276607924_usize;
Goto(bb14)
}
bb14 = {
_25 = _22.2 as isize;
place!(Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2)).2 = _30.2;
_42.1.2 = _22.2 as i16;
_30.1 = [_35,_9,_36];
place!(Field::<[i128; 2]>(Variant(_11, 0), 0)) = _29;
place!(Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2)).0 = _26 - _22.3;
_40 = Adt43 { fld0: _19.fld0,fld1: _19.fld1 };
_56 = _44 ^ _1;
_22.5 = _43.0;
_46 = -_42.2;
_45.0 = [_44,_8,_25,_56,_25,_56];
_53.fld0 = !_40.fld0;
_47 = _22.0 as usize;
place!(Field::<[i128; 2]>(Variant(_11, 0), 0)) = _29;
_55 = -_46;
_18 = core::ptr::addr_of_mut!((*_18));
_38 = RET + RET;
_43.0 = _34.0 << _17.fld2;
_41 = [_14.fld3,_14.fld3,_14.fld3,_17.fld3,_17.fld3,_17.fld3,_42.1.0];
_51 = [_1,_8,_1,_1,_44,_56];
_15 = [_14.fld2,_19.fld1,_38,_14.fld2,_14.fld2,RET,_14.fld2,_17.fld2];
_34.0 = _25 as u32;
_33 = _22.4 != _22.4;
_37 = Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_11, 0), 2).3;
Goto(bb15)
}
bb15 = {
Call(_59 = dump_var(2_usize, 20_usize, Move(_20), 34_usize, Move(_34), 13_usize, Move(_13), 43_usize, Move(_43)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_59 = dump_var(2_usize, 21_usize, Move(_21), 8_usize, Move(_8), 38_usize, Move(_38), 44_usize, Move(_44)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_59 = dump_var(2_usize, 56_usize, Move(_56), 25_usize, Move(_25), 47_usize, Move(_47), 5_usize, Move(_5)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_59 = dump_var(2_usize, 35_usize, Move(_35), 29_usize, Move(_29), 51_usize, Move(_51), 32_usize, Move(_32)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn3(mut _1: isize,mut _2: (f32, [bool; 3], char, f32, i8),mut _3: bool,mut _4: char,mut _5: (i8, i64, u8, f32, u8, u32),mut _6: i64) -> [isize; 6] {
mir! {
type RET = [isize; 6];
let _7: ([isize; 6],);
let _8: [bool; 3];
let _9: i32;
let _10: [bool; 3];
let _11: char;
let _12: isize;
let _13: i128;
let _14: i32;
let _15: Adt43;
let _16: Adt50;
let _17: ();
let _18: ();
{
_4 = _2.2;
_2.1 = [_3,_3,_3];
_7.0 = [_1,_1,_1,_1,_1,_1];
_3 = _2.2 == _4;
_2.1 = [_3,_3,_3];
_6 = _5.1 * _5.1;
_2.1 = [_3,_3,_3];
_5.2 = 158712743534387555891896852413390305764_i128 as u8;
_5.0 = _2.4 - _2.4;
_5 = (_2.4, _6, 204_u8, _2.3, 46_u8, 1817586707_u32);
_3 = _5.4 == _5.4;
_9 = (-1060201058_i32) * 1460107570_i32;
_5.2 = _5.4 * _5.4;
RET = _7.0;
_7.0 = [_1,_1,_1,_1,_1,_1];
_5.1 = 9655696819938968931_usize as i64;
_5.3 = _5.5 as f32;
_7.0 = [_1,_1,_1,_1,_1,_1];
_9 = 2062533904_i32;
_8 = [_3,_3,_3];
_5 = (_2.4, _6, 217_u8, _2.3, 121_u8, 1770903109_u32);
_5.2 = !_5.4;
_2.1 = [_3,_3,_3];
_5.0 = _2.4;
_5.2 = _5.4 | _5.4;
match _5.5 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
1770903109 => bb6,
_ => bb5
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
_10 = [_3,_3,_3];
_5.5 = _2.4 as u32;
RET = [_1,_1,_1,_1,_1,_1];
_11 = _4;
RET = [_1,_1,_1,_1,_1,_1];
_5.3 = _2.3 * _2.3;
_5.3 = _2.3;
RET = [_1,_1,_1,_1,_1,_1];
_9 = 1313468233_i32 & 1701318768_i32;
match _5.4 {
0 => bb4,
1 => bb7,
2 => bb8,
121 => bb10,
_ => bb9
}
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_3 = false;
_11 = _2.2;
_7 = (RET,);
_2.4 = !_5.0;
_6 = (-132532550014091702214833713700883077466_i128) as i64;
_5.1 = _6;
RET = _7.0;
_7 = (RET,);
_2 = (_5.3, _8, _11, _5.3, _5.0);
_2.1 = _8;
_2.4 = _4 as i8;
RET = [_1,_1,_1,_1,_1,_1];
_14 = 328575431766626268380191160501204493980_u128 as i32;
_2.4 = _5.0 + _5.0;
match _5.4 {
121 => bb11,
_ => bb7
}
}
bb11 = {
_2.3 = _2.0 - _5.3;
_4 = _2.2;
_7.0 = [_1,_1,_1,_1,_1,_1];
_15 = Adt43 { fld0: 1353985979551118149_u64,fld1: 29853_u16 };
_12 = _2.4 as isize;
_9 = _14;
_9 = -_14;
_5.5 = (-147089785614007135092639906268161097931_i128) as u32;
_15.fld1 = !579_u16;
_5.0 = !_2.4;
_5.0 = _2.4;
RET = [_12,_12,_12,_1,_1,_12];
_9 = _15.fld0 as i32;
_2.4 = _15.fld0 as i8;
_13 = (-62140614829208998123127466408030230453_i128) >> _9;
_5.0 = _2.4 | _2.4;
_15.fld0 = !2545169774175940492_u64;
_7.0 = [_12,_12,_12,_12,_12,_12];
_10 = [_3,_3,_3];
_5.0 = _2.4;
_5.0 = _2.4 ^ _2.4;
_14 = !_9;
_12 = _1 * _1;
_5.0 = !_2.4;
_8 = [_3,_3,_3];
_5.1 = _6 >> _5.4;
_6 = !_5.1;
Goto(bb12)
}
bb12 = {
Call(_17 = dump_var(3_usize, 6_usize, Move(_6), 13_usize, Move(_13), 4_usize, Move(_4), 11_usize, Move(_11)), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
Call(_17 = dump_var(3_usize, 7_usize, Move(_7), 14_usize, Move(_14), 18_usize, _18, 18_usize, _18), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn4(mut _1: u16,mut _2: i128,mut _3: i8,mut _4: f32,mut _5: isize,mut _6: u64,mut _7: u8,mut _8: u8,mut _9: u64,mut _10: isize,mut _11: u64) -> (f32, [bool; 3], char, f32, i8) {
mir! {
type RET = (f32, [bool; 3], char, f32, i8);
let _12: [bool; 4];
let _13: u64;
let _14: ();
let _15: ();
{
RET.0 = -_4;
_5 = !_10;
RET.3 = -_4;
_4 = (-972451924_i32) as f32;
Call(_3 = core::intrinsics::bswap((-67_i8)), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
RET.1 = [true,true,false];
RET.3 = -RET.0;
RET.2 = '\u{b4151}';
RET.4 = -_3;
RET.0 = _4;
RET.0 = _4 - RET.3;
_3 = -RET.4;
RET.2 = '\u{dec4a}';
RET.3 = -_4;
RET.4 = _3;
RET.1 = [true,true,false];
_12 = [false,false,false,true];
_1 = 28973_u16 << _3;
Goto(bb2)
}
bb2 = {
Call(_14 = dump_var(4_usize, 12_usize, Move(_12), 8_usize, Move(_8), 9_usize, Move(_9), 6_usize, Move(_6)), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Call(_14 = dump_var(4_usize, 11_usize, Move(_11), 15_usize, _15, 15_usize, _15, 15_usize, _15), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn5(mut _1: i128,mut _2: u32,mut _3: u8,mut _4: (f32, [bool; 3], char, f32, i8),mut _5: [i128; 7],mut _6: char,mut _7: u16,mut _8: [i128; 7],mut _9: [isize; 6],mut _10: i128,mut _11: i128,mut _12: (u32,),mut _13: [i128; 2],mut _14: isize,mut _15: isize) -> i128 {
mir! {
type RET = i128;
let _16: [isize; 6];
let _17: i16;
let _18: Adt52;
let _19: isize;
let _20: ();
let _21: ();
{
_4.2 = _6;
RET = !_11;
_17 = 3513_i16 - (-25226_i16);
_12.0 = !_2;
_14 = _15 ^ _15;
_14 = _15 * _15;
_5 = _8;
RET = _4.3 as i128;
_5 = [_1,_11,_10,_1,_11,_10,_10];
_12.0 = !_2;
_12.0 = _2 * _2;
_9 = [_14,_14,_14,_14,_15,_15];
_3 = _7 as u8;
_16 = [_15,_15,_14,_15,_14,_14];
RET = -_10;
_4.2 = _6;
_1 = !RET;
_8 = _5;
Goto(bb1)
}
bb1 = {
Call(_20 = dump_var(5_usize, 15_usize, Move(_15), 13_usize, Move(_13), 1_usize, Move(_1), 6_usize, Move(_6)), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Call(_20 = dump_var(5_usize, 3_usize, Move(_3), 9_usize, Move(_9), 14_usize, Move(_14), 8_usize, Move(_8)), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn6(mut _1: bool,mut _2: u128,mut _3: [bool; 3],mut _4: f32,mut _5: isize) -> *mut u8 {
mir! {
type RET = *mut u8;
let _6: isize;
let _7: (i8, i64, u8, f32, u8, u32);
let _8: Adt42;
let _9: u128;
let _10: [i128; 7];
let _11: *mut [bool; 3];
let _12: bool;
let _13: f64;
let _14: ();
let _15: ();
{
_2 = 148915385448703357633126835147527102687_u128 << _5;
_4 = 4182102363_u32 as f32;
_3 = [_1,_1,_1];
_1 = true;
_4 = 3013219711584075648_u64 as f32;
_6 = _5;
_7.2 = 131_u8;
_6 = _5;
_7.1 = (-4175667747429651441_i64);
_1 = !true;
_7.5 = 890981024_u32;
_7 = ((-54_i8), (-7563774596745205172_i64), 49_u8, _4, 141_u8, 1982530678_u32);
Call(_4 = fn7(_5, _7.5, _7.2, _6, _7.2, _7.4), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_1 = false;
_7 = (32_i8, (-8726028188165041133_i64), 243_u8, _4, 130_u8, 1596261633_u32);
_9 = _7.0 as u128;
_2 = _9;
_6 = _5;
_7.1 = 4041728944179959296_i64 << _7.2;
_11 = core::ptr::addr_of_mut!(_3);
_10 = [(-56193299059794736085957383698891389727_i128),4986969920754229007069376926476761705_i128,144649060538517829722358374097409512386_i128,57326686529220600132396074660355354199_i128,(-159913678498177213958358220245487413994_i128),33038467314302556691573100225244006394_i128,52969038431635305594866075321290052133_i128];
_7.2 = _7.4;
_7.0 = (-18_i8) | 43_i8;
_10 = [89381205925493989479095225105542395433_i128,(-5055283149110771308245743140891015045_i128),5265066641023446980800862843622492743_i128,95631194979820425407685476033253540307_i128,34981622027482942216074643459852327370_i128,130272211002999371790292738804375112727_i128,(-109891868816556517479477755881076504178_i128)];
_6 = _5;
_7.2 = _7.4 + _7.4;
_7.4 = _7.2;
_7.1 = 4468845052406626503_i64;
_7.5 = 425263170_u32;
_3 = [_1,_1,_1];
_2 = 13520_i16 as u128;
_4 = -_7.3;
match _7.5 {
0 => bb2,
1 => bb3,
425263170 => bb5,
_ => bb4
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
RET = core::ptr::addr_of_mut!(_7.4);
_10 = [(-89686250034849125208182108513355410648_i128),54412703958838794578398131499741337853_i128,(-113155807334782305879630029598164961100_i128),12248755238883402592362578289221325424_i128,131126976280383721959842510287466913280_i128,(-34470747339321455509366666496320345672_i128),85427845129534805462749026422391093609_i128];
_1 = _9 <= _9;
RET = core::ptr::addr_of_mut!(_7.2);
_12 = _7.0 != _7.0;
_7.0 = (-58_i8) >> _7.2;
_7.5 = 3103615649_u32 - 1379824073_u32;
_13 = _9 as f64;
_7.5 = 3_usize as u32;
_7.5 = '\u{6515f}' as u32;
_7.5 = 10310893768070235383_usize as u32;
_12 = _2 >= _9;
_5 = -_6;
RET = core::ptr::addr_of_mut!((*RET));
_4 = _7.3;
_7.4 = _7.2;
Goto(bb6)
}
bb6 = {
Call(_14 = dump_var(6_usize, 12_usize, Move(_12), 3_usize, Move(_3), 5_usize, Move(_5), 2_usize, Move(_2)), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn7(mut _1: isize,mut _2: u32,mut _3: u8,mut _4: isize,mut _5: u8,mut _6: u8) -> f32 {
mir! {
type RET = f32;
let _7: bool;
let _8: u32;
let _9: i8;
let _10: [bool; 3];
let _11: [i128; 1];
let _12: bool;
let _13: Adt45;
let _14: f64;
let _15: isize;
let _16: [isize; 6];
let _17: (i8, i64, u8, f32, u8, u32);
let _18: [i128; 7];
let _19: (u32,);
let _20: bool;
let _21: u128;
let _22: u64;
let _23: Adt52;
let _24: f64;
let _25: char;
let _26: (i8, i64, u8, f32, u8, u32);
let _27: ();
let _28: ();
{
RET = (-5269_i16) as f32;
_2 = !2094775825_u32;
RET = 4784_u16 as f32;
_6 = _3;
_4 = _1;
_1 = (-32240_i16) as isize;
_2 = (-104_i8) as u32;
match _3 {
0 => bb1,
1 => bb2,
49 => bb4,
_ => bb3
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
RET = 246266029003187430824751113919464025675_u128 as f32;
_4 = !_1;
_6 = '\u{f7584}' as u8;
_4 = -_1;
_2 = 4143326570_u32 >> _5;
_4 = _1;
_7 = !false;
RET = _5 as f32;
_7 = true;
_1 = -_4;
_6 = _5;
_3 = _5;
_4 = -_1;
_2 = !2026587624_u32;
_8 = _2;
_2 = !_8;
_1 = -_4;
RET = 72_i8 as f32;
_4 = !_1;
_9 = _3 as i8;
_3 = 1996989809_i32 as u8;
_1 = -_4;
_4 = _1;
_5 = _3 ^ _6;
_4 = _1 << _6;
_10 = [_7,_7,_7];
_4 = 13928233512280842459867377052638769279_u128 as isize;
match _6 {
0 => bb5,
1 => bb6,
2 => bb7,
49 => bb9,
_ => bb8
}
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
_5 = _6 << _6;
_10 = [_7,_7,_7];
_13.fld1 = [_7,_7,_7,_7];
_1 = !_4;
_12 = !_7;
_3 = _5 + _6;
_11 = [52291777645629641564230733750096730355_i128];
RET = 19531_u16 as f32;
_9 = '\u{11be8}' as i8;
Call(_13.fld1 = fn8(_6, _3, _6, _4, _3, _3, _6, _10, _6, _6, _6, _9, _2, _5, _5), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_3 = 12522215262389410424_u64 as u8;
_1 = _8 as isize;
_14 = 306050475924383379703852345920874100761_u128 as f64;
_14 = 6630921_i32 as f64;
_1 = _4 << _6;
_13.fld2 = 32931_u16 << _1;
_14 = _13.fld2 as f64;
_5 = !_6;
_11 = [(-82407813839492560968644362211218554660_i128)];
_13.fld2 = 27003_u16;
_13.fld1 = [_12,_7,_7,_7];
RET = 7_usize as f32;
_10 = [_12,_12,_12];
RET = 1_usize as f32;
_12 = _7;
_14 = 267543161_i32 as f64;
_6 = _5;
RET = 7_usize as f32;
_11 = [(-48073681163267522439236801672164443894_i128)];
_12 = !_7;
RET = 26138_i16 as f32;
_6 = _5 ^ _5;
_6 = _5;
_15 = _1;
Goto(bb11)
}
bb11 = {
_2 = 14412_i16 as u32;
_2 = !_8;
_11 = [116464992110422242210688201870664741260_i128];
_1 = _15;
_13.fld2 = 2164_u16 + 855_u16;
_6 = _5;
_16 = [_1,_1,_1,_4,_1,_1];
_11 = [13280079538121259080521976352589381184_i128];
_17.1 = 664443608874543992_i64;
_18 = [(-134729605522111732004238608455330732294_i128),(-78990640499618094419458189093998065775_i128),(-90319076901655039480028235917823860167_i128),(-59872411820214043204563783791281885354_i128),(-16148427909236806333500553676558550097_i128),126933591529236247993408971240399222530_i128,(-130391715559299897952306445693431661884_i128)];
_3 = _5 * _5;
_19.0 = !_2;
_15 = _1 - _1;
_17.5 = 509635229_i32 as u32;
Call(_20 = fn12(_1, _13.fld1, _16, _1, _3, _6), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
_13.fld3 = _20 as i128;
match _17.1 {
0 => bb9,
1 => bb10,
2 => bb5,
3 => bb13,
4 => bb14,
664443608874543992 => bb16,
_ => bb15
}
}
bb13 = {
_2 = 14412_i16 as u32;
_2 = !_8;
_11 = [116464992110422242210688201870664741260_i128];
_1 = _15;
_13.fld2 = 2164_u16 + 855_u16;
_6 = _5;
_16 = [_1,_1,_1,_4,_1,_1];
_11 = [13280079538121259080521976352589381184_i128];
_17.1 = 664443608874543992_i64;
_18 = [(-134729605522111732004238608455330732294_i128),(-78990640499618094419458189093998065775_i128),(-90319076901655039480028235917823860167_i128),(-59872411820214043204563783791281885354_i128),(-16148427909236806333500553676558550097_i128),126933591529236247993408971240399222530_i128,(-130391715559299897952306445693431661884_i128)];
_3 = _5 * _5;
_19.0 = !_2;
_15 = _1 - _1;
_17.5 = 509635229_i32 as u32;
Call(_20 = fn12(_1, _13.fld1, _16, _1, _3, _6), ReturnTo(bb12), UnwindUnreachable())
}
bb14 = {
RET = 246266029003187430824751113919464025675_u128 as f32;
_4 = !_1;
_6 = '\u{f7584}' as u8;
_4 = -_1;
_2 = 4143326570_u32 >> _5;
_4 = _1;
_7 = !false;
RET = _5 as f32;
_7 = true;
_1 = -_4;
_6 = _5;
_3 = _5;
_4 = -_1;
_2 = !2026587624_u32;
_8 = _2;
_2 = !_8;
_1 = -_4;
RET = 72_i8 as f32;
_4 = !_1;
_9 = _3 as i8;
_3 = 1996989809_i32 as u8;
_1 = -_4;
_4 = _1;
_5 = _3 ^ _6;
_4 = _1 << _6;
_10 = [_7,_7,_7];
_4 = 13928233512280842459867377052638769279_u128 as isize;
match _6 {
0 => bb5,
1 => bb6,
2 => bb7,
49 => bb9,
_ => bb8
}
}
bb15 = {
Return()
}
bb16 = {
_17.1 = _8 as i64;
_18 = [_13.fld3,_13.fld3,_13.fld3,_13.fld3,_13.fld3,_13.fld3,_13.fld3];
_24 = _14;
_24 = _14;
_7 = _20;
Goto(bb17)
}
bb17 = {
Call(_27 = dump_var(7_usize, 10_usize, Move(_10), 7_usize, Move(_7), 5_usize, Move(_5), 18_usize, Move(_18)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_27 = dump_var(7_usize, 8_usize, Move(_8), 19_usize, Move(_19), 9_usize, Move(_9), 3_usize, Move(_3)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn8(mut _1: u8,mut _2: u8,mut _3: u8,mut _4: isize,mut _5: u8,mut _6: u8,mut _7: u8,mut _8: [bool; 3],mut _9: u8,mut _10: u8,mut _11: u8,mut _12: i8,mut _13: u32,mut _14: u8,mut _15: u8) -> [bool; 4] {
mir! {
type RET = [bool; 4];
let _16: (u32, (i128, *mut u32, i16), f64);
let _17: [i128; 1];
let _18: u8;
let _19: [u16; 8];
let _20: (u32,);
let _21: u64;
let _22: *mut u8;
let _23: u8;
let _24: i128;
let _25: Adt54;
let _26: u16;
let _27: f32;
let _28: isize;
let _29: u128;
let _30: u8;
let _31: (i8, i64, u8, f32, u8, u32);
let _32: [u16; 8];
let _33: Adt48;
let _34: [i128; 2];
let _35: f32;
let _36: f32;
let _37: [i128; 7];
let _38: [i128; 2];
let _39: u16;
let _40: isize;
let _41: Adt43;
let _42: f32;
let _43: f32;
let _44: char;
let _45: i8;
let _46: [bool; 3];
let _47: [bool; 3];
let _48: f32;
let _49: [i128; 1];
let _50: *mut u8;
let _51: bool;
let _52: isize;
let _53: Adt47;
let _54: ();
let _55: ();
{
_10 = !_2;
_14 = 180504684049367334938214092193795024299_u128 as u8;
_2 = _5 | _11;
_16.2 = 221671634893910604678821691572672256200_u128 as f64;
_16.1.1 = core::ptr::addr_of_mut!(_13);
_16.1.0 = (-109655963310172570675267225041524985985_i128);
RET = [true,true,false,true];
_1 = !_2;
_13 = _16.2 as u32;
_17 = [_16.1.0];
_15 = _6 / _11;
RET = [true,false,false,false];
_6 = _1 - _2;
RET = [false,true,true,false];
_9 = '\u{bcce}' as u8;
_13 = 1032591411_u32;
_12 = 120_i8;
_16.1.1 = core::ptr::addr_of_mut!(_13);
_16.2 = 10970844911549122471_u64 as f64;
_9 = _10;
_16.1.1 = core::ptr::addr_of_mut!(_16.0);
_6 = _10 * _15;
_16.1.1 = core::ptr::addr_of_mut!(_16.0);
_4 = 489681689076510877_usize as isize;
_1 = _16.1.0 as u8;
_2 = _6 - _6;
_16.1.0 = (-19490573910985999408920308210132059515_i128) ^ 9715004516296249180798993087458233873_i128;
match _7 {
49 => bb2,
_ => bb1
}
}
bb1 = {
Return()
}
bb2 = {
_16.1.1 = core::ptr::addr_of_mut!(_16.0);
_11 = !_2;
_2 = !_6;
_6 = _11 - _11;
_18 = _6 & _9;
_8 = [false,true,false];
_19 = [45937_u16,52145_u16,61430_u16,5144_u16,15041_u16,63716_u16,14062_u16,40699_u16];
_16.1.2 = -2024_i16;
_20 = (_13,);
RET = [false,true,true,false];
_3 = 184577484340657133683120977296160857203_u128 as u8;
_16.0 = _20.0;
_15 = !_6;
_5 = 413942406309247051_u64 as u8;
_16.1.0 = 5769069397784251050_usize as i128;
_4 = (-9223372036854775808_isize);
_2 = _15;
_17 = [_16.1.0];
_16.1.1 = core::ptr::addr_of_mut!(_20.0);
_20 = (_16.0,);
RET = [false,true,true,true];
RET = [false,true,true,true];
_16.1.2 = 2461_i16;
_2 = _15 & _18;
_5 = true as u8;
Goto(bb3)
}
bb3 = {
_21 = 8282412575046548991_u64 * 4521200253867549026_u64;
_16.1.0 = _4 as i128;
_16.1.0 = !(-108639469813121860243498346884083950410_i128);
_16.1.1 = core::ptr::addr_of_mut!(_20.0);
_20 = (_13,);
_21 = (-1815822238_i32) as u64;
_21 = 18407347968980573677_u64 ^ 17401226854179636665_u64;
_3 = !_18;
_2 = _6 * _9;
_19 = [50447_u16,1327_u16,25595_u16,47448_u16,11945_u16,25963_u16,52852_u16,1302_u16];
_23 = _3 % _7;
_11 = _15 / _7;
_21 = !6049132891740869729_u64;
_21 = false as u64;
match _20.0 {
0 => bb1,
1 => bb4,
1032591411 => bb6,
_ => bb5
}
}
bb4 = {
_16.1.1 = core::ptr::addr_of_mut!(_16.0);
_11 = !_2;
_2 = !_6;
_6 = _11 - _11;
_18 = _6 & _9;
_8 = [false,true,false];
_19 = [45937_u16,52145_u16,61430_u16,5144_u16,15041_u16,63716_u16,14062_u16,40699_u16];
_16.1.2 = -2024_i16;
_20 = (_13,);
RET = [false,true,true,false];
_3 = 184577484340657133683120977296160857203_u128 as u8;
_16.0 = _20.0;
_15 = !_6;
_5 = 413942406309247051_u64 as u8;
_16.1.0 = 5769069397784251050_usize as i128;
_4 = (-9223372036854775808_isize);
_2 = _15;
_17 = [_16.1.0];
_16.1.1 = core::ptr::addr_of_mut!(_20.0);
_20 = (_16.0,);
RET = [false,true,true,true];
RET = [false,true,true,true];
_16.1.2 = 2461_i16;
_2 = _15 & _18;
_5 = true as u8;
Goto(bb3)
}
bb5 = {
Return()
}
bb6 = {
_3 = _6;
_22 = core::ptr::addr_of_mut!(_2);
_2 = _15 ^ _6;
_26 = 60316_u16 | 12320_u16;
_8 = [false,true,true];
_8 = [false,true,true];
_16.1.2 = (-14476_i16) >> (*_22);
_21 = _26 as u64;
_27 = _12 as f32;
_16.0 = _20.0;
_16.0 = _13 + _13;
Call(_16.1.0 = core::intrinsics::transmute(_19), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
_7 = !_1;
_23 = _18 * _2;
_15 = _9 | (*_22);
_24 = -_16.1.0;
_16.1.1 = core::ptr::addr_of_mut!(_13);
_9 = !_23;
_4 = !(-9223372036854775808_isize);
_26 = 24811_u16 << _2;
_18 = !_15;
_4 = (-15_isize) >> _18;
_29 = 57668245561243356768984444995067663752_u128 >> _4;
_8 = [false,true,true];
_2 = !_11;
_20 = (_16.0,);
_20 = (_16.0,);
_9 = (*_22);
_4 = 74_isize ^ (-9223372036854775808_isize);
_23 = _18;
_8 = [true,false,false];
_21 = 4843687322072390336_i64 as u64;
Goto(bb8)
}
bb8 = {
_2 = _6 ^ _3;
_23 = _16.1.0 as u8;
_16.1.1 = core::ptr::addr_of_mut!(_13);
_16.1.1 = core::ptr::addr_of_mut!(_13);
_12 = _4 as i8;
_14 = _15;
_24 = !_16.1.0;
_14 = !_2;
_5 = (*_22) | _14;
_31.1 = (-3409834972164972337_i64) & (-340838694030967112_i64);
_30 = _11;
_16.2 = _29 as f64;
_31.0 = !_12;
_7 = _2;
_31.3 = (-273046119_i32) as f32;
_11 = _16.1.0 as u8;
_4 = _16.1.2 as isize;
_31.3 = _27 + _27;
_16.1.2 = -(-15027_i16);
_4 = 9223372036854775807_isize & 94_isize;
_28 = _16.1.2 as isize;
_20.0 = _31.3 as u32;
_17 = [_16.1.0];
_27 = _31.3 + _31.3;
_12 = _28 as i8;
_17 = [_24];
_31 = (_12, 6882002954318352385_i64, (*_22), _27, _18, _13);
_26 = 22042_u16 | 12607_u16;
Goto(bb9)
}
bb9 = {
_20.0 = _31.5 | _31.5;
_32 = [_26,_26,_26,_26,_26,_26,_26,_26];
_28 = 7_usize as isize;
_1 = _7;
_28 = _4;
_32 = [_26,_26,_26,_26,_26,_26,_26,_26];
_17 = [_24];
_21 = _4 as u64;
RET = [true,true,true,true];
_30 = !_7;
_2 = _7 * _7;
_16.1.2 = !8385_i16;
_12 = -_31.0;
_16.0 = '\u{b637}' as u32;
_30 = !_5;
_24 = -_16.1.0;
_35 = -_31.3;
_18 = !_5;
_9 = !_31.2;
_11 = _27 as u8;
_32 = _19;
_6 = _31.4 ^ _7;
_3 = !_1;
_33 = Adt48::Variant2 { fld0: _31.1,fld1: _21,fld2: _31 };
place!(Field::<u64>(Variant(_33, 2), 1)) = _16.1.0 as u64;
_26 = 34924_u16 + 60100_u16;
_8 = [false,false,true];
_31.3 = -_35;
Call(_19 = fn9(_22, Field::<(i8, i64, u8, f32, u8, u32)>(Variant(_33, 2), 2).4, Field::<(i8, i64, u8, f32, u8, u32)>(Variant(_33, 2), 2), _30, Field::<i64>(Variant(_33, 2), 0), Field::<(i8, i64, u8, f32, u8, u32)>(Variant(_33, 2), 2).2), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_21 = _27 as u64;
_25 = Adt54::Variant1 { fld0: _33 };
place!(Field::<(i8, i64, u8, f32, u8, u32)>(Variant(place!(Field::<Adt48>(Variant(_25, 1), 0)), 2), 2)).2 = !Field::<(i8, i64, u8, f32, u8, u32)>(Variant(Field::<Adt48>(Variant(_25, 1), 0), 2), 2).4;
_9 = !Field::<(i8, i64, u8, f32, u8, u32)>(Variant(_33, 2), 2).4;
_26 = !32504_u16;
_19 = _32;
_26 = 52056_u16;
_24 = _16.1.0 << _31.1;
_38 = [_24,_24];
SetDiscriminant(_25, 0);
_2 = _18;
_41 = Adt43 { fld0: _21,fld1: _26 };
_41.fld1 = _26;
place!(Field::<Adt43>(Variant(_25, 0), 4)).fld0 = _16.1.2 as u64;
place!(Field::<(i8, i64, u8, f32, u8, u32)>(Variant(_33, 2), 2)).4 = _21 as u8;
_31.4 = (*_22) * _3;
_24 = _16.1.0;
match _31.1 {
0 => bb9,
1 => bb6,
6882002954318352385 => bb12,
_ => bb11
}
}
bb11 = {
_16.1.1 = core::ptr::addr_of_mut!(_16.0);
_11 = !_2;
_2 = !_6;
_6 = _11 - _11;
_18 = _6 & _9;
_8 = [false,true,false];
_19 = [45937_u16,52145_u16,61430_u16,5144_u16,15041_u16,63716_u16,14062_u16,40699_u16];
_16.1.2 = -2024_i16;
_20 = (_13,);
RET = [false,true,true,false];
_3 = 184577484340657133683120977296160857203_u128 as u8;
_16.0 = _20.0;
_15 = !_6;
_5 = 413942406309247051_u64 as u8;
_16.1.0 = 5769069397784251050_usize as i128;
_4 = (-9223372036854775808_isize);
_2 = _15;
_17 = [_16.1.0];
_16.1.1 = core::ptr::addr_of_mut!(_20.0);
_20 = (_16.0,);
RET = [false,true,true,true];
RET = [false,true,true,true];
_16.1.2 = 2461_i16;
_2 = _15 & _18;
_5 = true as u8;
Goto(bb3)
}
bb12 = {
place!(Field::<i64>(Variant(_33, 2), 0)) = !Field::<(i8, i64, u8, f32, u8, u32)>(Variant(_33, 2), 2).1;
_28 = _41.fld0 as isize;
_44 = '\u{a52}';
SetDiscriminant(_33, 2);
_31 = (_12, 5945164387436785895_i64, _30, _27, _23, _16.0);
_11 = _18;
Goto(bb13)
}
bb13 = {
place!(Field::<Adt43>(Variant(_25, 0), 4)).fld1 = _41.fld1 % _41.fld1;
match _31.1 {
0 => bb1,
1 => bb8,
2 => bb6,
5945164387436785895 => bb15,
_ => bb14
}
}
bb14 = {
_16.1.1 = core::ptr::addr_of_mut!(_16.0);
_11 = !_2;
_2 = !_6;
_6 = _11 - _11;
_18 = _6 & _9;
_8 = [false,true,false];
_19 = [45937_u16,52145_u16,61430_u16,5144_u16,15041_u16,63716_u16,14062_u16,40699_u16];
_16.1.2 = -2024_i16;
_20 = (_13,);
RET = [false,true,true,false];
_3 = 184577484340657133683120977296160857203_u128 as u8;
_16.0 = _20.0;
_15 = !_6;
_5 = 413942406309247051_u64 as u8;
_16.1.0 = 5769069397784251050_usize as i128;
_4 = (-9223372036854775808_isize);
_2 = _15;
_17 = [_16.1.0];
_16.1.1 = core::ptr::addr_of_mut!(_20.0);
_20 = (_16.0,);
RET = [false,true,true,true];
RET = [false,true,true,true];
_16.1.2 = 2461_i16;
_2 = _15 & _18;
_5 = true as u8;
Goto(bb3)
}
bb15 = {
place!(Field::<Adt43>(Variant(_25, 0), 4)) = Adt43 { fld0: _41.fld0,fld1: _26 };
_2 = _11 * _3;
_36 = -_35;
place!(Field::<u64>(Variant(_33, 2), 1)) = _21;
_12 = !_31.0;
place!(Field::<(i8, i64, u8, f32, u8, u32)>(Variant(_33, 2), 2)).1 = !_31.1;
place!(Field::<isize>(Variant(_25, 0), 2)) = _28;
_44 = '\u{7ac88}';
place!(Field::<(i8, i64, u8, f32, u8, u32)>(Variant(_33, 2), 2)).0 = _12 << _2;
_27 = -_35;
_47 = [true,false,true];
_45 = Field::<(i8, i64, u8, f32, u8, u32)>(Variant(_33, 2), 2).0;
_16.1.0 = -_24;
place!(Field::<Adt43>(Variant(_25, 0), 4)) = Move(_41);
_39 = !Field::<Adt43>(Variant(_25, 0), 4).fld1;
place!(Field::<u16>(Variant(_25, 0), 3)) = _39;
_44 = '\u{9dcde}';
_49 = [_24];
_36 = -_35;
_48 = _36 - _27;
Goto(bb16)
}
bb16 = {
Call(_54 = dump_var(8_usize, 38_usize, Move(_38), 8_usize, Move(_8), 44_usize, Move(_44), 30_usize, Move(_30)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_54 = dump_var(8_usize, 49_usize, Move(_49), 45_usize, Move(_45), 29_usize, Move(_29), 5_usize, Move(_5)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_54 = dump_var(8_usize, 7_usize, Move(_7), 20_usize, Move(_20), 12_usize, Move(_12), 18_usize, Move(_18)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_54 = dump_var(8_usize, 19_usize, Move(_19), 23_usize, Move(_23), 3_usize, Move(_3), 13_usize, Move(_13)), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn9(mut _1: *mut u8,mut _2: u8,mut _3: (i8, i64, u8, f32, u8, u32),mut _4: u8,mut _5: i64,mut _6: u8) -> [u16; 8] {
mir! {
type RET = [u16; 8];
let _7: *mut [bool; 3];
let _8: u64;
let _9: usize;
let _10: Adt43;
let _11: [bool; 4];
let _12: ([isize; 6],);
let _13: u128;
let _14: *mut u32;
let _15: (f32, [bool; 3], char, f32, i8);
let _16: *mut usize;
let _17: (i128, *mut u32, i16);
let _18: [bool; 4];
let _19: f32;
let _20: [isize; 6];
let _21: Adt42;
let _22: Adt43;
let _23: [i128; 1];
let _24: ([isize; 6],);
let _25: isize;
let _26: [i128; 1];
let _27: (f32, [bool; 3], char, f32, i8);
let _28: Adt50;
let _29: Adt43;
let _30: [u16; 8];
let _31: ();
let _32: ();
{
_3.2 = _3.4 - _6;
_1 = core::ptr::addr_of_mut!(_6);
Goto(bb1)
}
bb1 = {
RET = [45984_u16,31516_u16,2638_u16,6449_u16,39198_u16,37832_u16,49582_u16,9335_u16];
_3.0 = -88_i8;
_3.3 = _3.2 as f32;
_3.3 = 10143_u16 as f32;
Goto(bb2)
}
bb2 = {
_3.3 = 4942648496432422067_u64 as f32;
Goto(bb3)
}
bb3 = {
_3.3 = _3.0 as f32;
_6 = _3.2 & _3.4;
_3.3 = _3.0 as f32;
_1 = core::ptr::addr_of_mut!(_6);
_3.5 = 1862716339_u32 * 1842075895_u32;
_3.0 = 62_i8 >> _6;
_6 = _3.3 as u8;
_1 = core::ptr::addr_of_mut!(_3.2);
_6 = 0_usize as u8;
RET = [13273_u16,12963_u16,7004_u16,51797_u16,5798_u16,59534_u16,37526_u16,40892_u16];
_6 = !_3.4;
_3.3 = 11475_i16 as f32;
_3.0 = (-935510207_i32) as i8;
_3.1 = -_5;
_3.3 = 12103000566485310198_usize as f32;
_4 = _6;
_4 = !_3.4;
RET = [40515_u16,50037_u16,6335_u16,12218_u16,42307_u16,9105_u16,37583_u16,59360_u16];
_3.2 = !_3.4;
RET = [65389_u16,57370_u16,23671_u16,7917_u16,22348_u16,15602_u16,47875_u16,49668_u16];
_8 = !1052357782221467036_u64;
_10 = Adt43 { fld0: _8,fld1: 55503_u16 };
_10 = Adt43 { fld0: _8,fld1: 31498_u16 };
_1 = core::ptr::addr_of_mut!((*_1));
match _5 {
0 => bb1,
6882002954318352385 => bb4,
_ => bb2
}
}
bb4 = {
_9 = !5388326413814288403_usize;
_6 = _8 as u8;
RET = [_10.fld1,_10.fld1,_10.fld1,_10.fld1,_10.fld1,_10.fld1,_10.fld1,_10.fld1];
_1 = core::ptr::addr_of_mut!(_4);
_10.fld0 = _8;
_8 = _10.fld0 ^ _10.fld0;
_11 = [false,false,false,true];
_10.fld1 = 17296_u16 * 51974_u16;
_10 = Adt43 { fld0: _8,fld1: 30913_u16 };
_12.0 = [73_isize,(-29_isize),(-9223372036854775808_isize),(-9223372036854775808_isize),60_isize,(-62_isize)];
match _5 {
0 => bb5,
1 => bb6,
6882002954318352385 => bb8,
_ => bb7
}
}
bb5 = {
_3.3 = _3.0 as f32;
_6 = _3.2 & _3.4;
_3.3 = _3.0 as f32;
_1 = core::ptr::addr_of_mut!(_6);
_3.5 = 1862716339_u32 * 1842075895_u32;
_3.0 = 62_i8 >> _6;
_6 = _3.3 as u8;
_1 = core::ptr::addr_of_mut!(_3.2);
_6 = 0_usize as u8;
RET = [13273_u16,12963_u16,7004_u16,51797_u16,5798_u16,59534_u16,37526_u16,40892_u16];
_6 = !_3.4;
_3.3 = 11475_i16 as f32;
_3.0 = (-935510207_i32) as i8;
_3.1 = -_5;
_3.3 = 12103000566485310198_usize as f32;
_4 = _6;
_4 = !_3.4;
RET = [40515_u16,50037_u16,6335_u16,12218_u16,42307_u16,9105_u16,37583_u16,59360_u16];
_3.2 = !_3.4;
RET = [65389_u16,57370_u16,23671_u16,7917_u16,22348_u16,15602_u16,47875_u16,49668_u16];
_8 = !1052357782221467036_u64;
_10 = Adt43 { fld0: _8,fld1: 55503_u16 };
_10 = Adt43 { fld0: _8,fld1: 31498_u16 };
_1 = core::ptr::addr_of_mut!((*_1));
match _5 {
0 => bb1,
6882002954318352385 => bb4,
_ => bb2
}
}
bb6 = {
_3.3 = 4942648496432422067_u64 as f32;
Goto(bb3)
}
bb7 = {
RET = [45984_u16,31516_u16,2638_u16,6449_u16,39198_u16,37832_u16,49582_u16,9335_u16];
_3.0 = -88_i8;
_3.3 = _3.2 as f32;
_3.3 = 10143_u16 as f32;
Goto(bb2)
}
bb8 = {
_10 = Adt43 { fld0: _8,fld1: 55585_u16 };
_1 = core::ptr::addr_of_mut!((*_1));
_12.0 = [11_isize,9223372036854775807_isize,9223372036854775807_isize,(-9223372036854775808_isize),(-9223372036854775808_isize),(-24_isize)];
_3.3 = (-11701_i16) as f32;
_3.2 = !_2;
_13 = !329762329738865034199096431826006657262_u128;
_5 = _9 as i64;
_3.4 = (*_1);
_11 = [true,false,true,false];
_2 = !_3.2;
_3.5 = _3.0 as u32;
_3.4 = !_3.2;
_15.3 = _3.3 + _3.3;
_1 = core::ptr::addr_of_mut!(_4);
_15.1 = [true,false,true];
_5 = _3.5 as i64;
_4 = _2;
_19 = _15.3 * _15.3;
_3.4 = (*_1) << _3.2;
_9 = !11065082568538895817_usize;
_15.2 = '\u{7244f}';
_15.2 = '\u{681d}';
_3.1 = true as i64;
_17.0 = -167539038975190643835957689533138309978_i128;
Goto(bb9)
}
bb9 = {
_3.2 = !(*_1);
RET = [_10.fld1,_10.fld1,_10.fld1,_10.fld1,_10.fld1,_10.fld1,_10.fld1,_10.fld1];
RET = [_10.fld1,_10.fld1,_10.fld1,_10.fld1,_10.fld1,_10.fld1,_10.fld1,_10.fld1];
_10.fld0 = _9 as u64;
_18 = _11;
RET = [_10.fld1,_10.fld1,_10.fld1,_10.fld1,_10.fld1,_10.fld1,_10.fld1,_10.fld1];
_3.3 = -_19;
_8 = _10.fld0;
_15.3 = -_3.3;
_13 = !60071787105718077570789573367659020320_u128;
_10.fld1 = !22442_u16;
_2 = _3.4 >> (*_1);
_17.0 = _3.2 as i128;
_17.1 = core::ptr::addr_of_mut!(_3.5);
_10.fld1 = 54827_u16 + 36986_u16;
_16 = core::ptr::addr_of_mut!(_9);
_14 = core::ptr::addr_of_mut!(_3.5);
Call(_11 = fn10(_3.2, _17.0, _1, Move(_10), _3.2, (*_1), _3, _1, RET, _2, (*_1), _3.2, _3.2, _4, (*_1)), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_3 = (93_i8, _5, (*_1), _15.3, _2, 2674566235_u32);
_17.2 = 18955_i16;
_16 = core::ptr::addr_of_mut!(_9);
_15.0 = _3.3 * _19;
_3.3 = _15.0 * _15.3;
_11 = [true,false,false,false];
_3.0 = (-74_i8) + 64_i8;
_18 = _11;
_13 = 289085281586469540315140146529486812115_u128 | 305341695348070673443823064876837718892_u128;
_3.4 = _4;
_4 = _17.0 as u8;
_2 = !_3.2;
_3 = (8_i8, _5, _4, _15.0, (*_1), 4287218323_u32);
_10.fld1 = 37234_u16;
_10.fld0 = !_8;
Goto(bb11)
}
bb11 = {
_22 = Adt43 { fld0: _10.fld0,fld1: _10.fld1 };
_3.1 = !_5;
_3 = (64_i8, _5, (*_1), _15.0, (*_1), 1927039063_u32);
_10 = Adt43 { fld0: _22.fld0,fld1: _22.fld1 };
_17.2 = !6147_i16;
match (*_14) {
0 => bb1,
1 => bb8,
2 => bb3,
3 => bb4,
4 => bb9,
5 => bb12,
1927039063 => bb14,
_ => bb13
}
}
bb12 = {
_3 = (93_i8, _5, (*_1), _15.3, _2, 2674566235_u32);
_17.2 = 18955_i16;
_16 = core::ptr::addr_of_mut!(_9);
_15.0 = _3.3 * _19;
_3.3 = _15.0 * _15.3;
_11 = [true,false,false,false];
_3.0 = (-74_i8) + 64_i8;
_18 = _11;
_13 = 289085281586469540315140146529486812115_u128 | 305341695348070673443823064876837718892_u128;
_3.4 = _4;
_4 = _17.0 as u8;
_2 = !_3.2;
_3 = (8_i8, _5, _4, _15.0, (*_1), 4287218323_u32);
_10.fld1 = 37234_u16;
_10.fld0 = !_8;
Goto(bb11)
}
bb13 = {
_10 = Adt43 { fld0: _8,fld1: 55585_u16 };
_1 = core::ptr::addr_of_mut!((*_1));
_12.0 = [11_isize,9223372036854775807_isize,9223372036854775807_isize,(-9223372036854775808_isize),(-9223372036854775808_isize),(-24_isize)];
_3.3 = (-11701_i16) as f32;
_3.2 = !_2;
_13 = !329762329738865034199096431826006657262_u128;
_5 = _9 as i64;
_3.4 = (*_1);
_11 = [true,false,true,false];
_2 = !_3.2;
_3.5 = _3.0 as u32;
_3.4 = !_3.2;
_15.3 = _3.3 + _3.3;
_1 = core::ptr::addr_of_mut!(_4);
_15.1 = [true,false,true];
_5 = _3.5 as i64;
_4 = _2;
_19 = _15.3 * _15.3;
_3.4 = (*_1) << _3.2;
_9 = !11065082568538895817_usize;
_15.2 = '\u{7244f}';
_15.2 = '\u{681d}';
_3.1 = true as i64;
_17.0 = -167539038975190643835957689533138309978_i128;
Goto(bb9)
}
bb14 = {
_22 = Move(_10);
_27.1 = [true,true,true];
_27 = (_15.0, _15.1, _15.2, _15.3, _3.0);
_5 = _3.1;
_26 = [_17.0];
Goto(bb15)
}
bb15 = {
Call(_31 = dump_var(9_usize, 18_usize, Move(_18), 4_usize, Move(_4), 9_usize, Move(_9), 2_usize, Move(_2)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_31 = dump_var(9_usize, 5_usize, Move(_5), 32_usize, _32, 32_usize, _32, 32_usize, _32), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn10(mut _1: u8,mut _2: i128,mut _3: *mut u8,mut _4: Adt43,mut _5: u8,mut _6: u8,mut _7: (i8, i64, u8, f32, u8, u32),mut _8: *mut u8,mut _9: [u16; 8],mut _10: u8,mut _11: u8,mut _12: u8,mut _13: u8,mut _14: u8,mut _15: u8) -> [bool; 4] {
mir! {
type RET = [bool; 4];
let _16: Adt54;
let _17: Adt43;
let _18: isize;
let _19: Adt51;
let _20: bool;
let _21: [isize; 6];
let _22: bool;
let _23: [bool; 4];
let _24: [bool; 4];
let _25: (f32, [bool; 3], char, f32, i8);
let _26: [i128; 7];
let _27: ();
let _28: ();
{
_7.0 = (-59_i8) * (-106_i8);
_7.3 = 1566881957_i32 as f32;
_5 = _15;
_11 = _6;
_10 = _11;
_7.3 = _12 as f32;
_17 = Adt43 { fld0: _4.fld0,fld1: _4.fld1 };
_4 = Move(_17);
RET = [false,false,true,false];
_3 = _8;
RET = [true,true,false,true];
_17.fld0 = (-11735_i16) as u64;
_1 = !_15;
_7.0 = (-52_i8) | 13_i8;
Call(_17.fld0 = core::intrinsics::bswap(_4.fld0), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_17.fld0 = _4.fld0 & _4.fld0;
_17.fld0 = !_4.fld0;
_18 = (-9223372036854775808_isize);
_7.1 = 785504503156016649_i64 + 2315065733651578513_i64;
_4.fld0 = '\u{15240}' as u64;
_9 = [_4.fld1,_4.fld1,_4.fld1,_4.fld1,_4.fld1,_4.fld1,_4.fld1,_4.fld1];
_10 = 6738008898930377392134858734931697729_u128 as u8;
_7.3 = _4.fld0 as f32;
_2 = !(-146183837870194707970425753425479745830_i128);
_7.1 = 6268923249641284874_i64;
_1 = _15;
_21 = [_18,_18,_18,_18,_18,_18];
_7.3 = _4.fld1 as f32;
_3 = core::ptr::addr_of_mut!(_12);
_12 = '\u{30918}' as u8;
Call(_15 = fn11(_5, _7.4, _8, _14), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_14 = !_13;
_11 = _7.3 as u8;
_15 = 16942442933129027818_usize as u8;
_17 = Adt43 { fld0: _4.fld0,fld1: _4.fld1 };
_6 = _13 << _7.4;
_15 = _17.fld1 as u8;
_12 = _7.3 as u8;
_20 = false;
RET = [_20,_20,_20,_20];
_7.0 = -47_i8;
_7.5 = !811024947_u32;
_10 = 15973263505308900793_usize as u8;
_5 = !_7.4;
_4.fld1 = _17.fld1 | _17.fld1;
_7.1 = (-6766950244677243823_i64) << _7.4;
_22 = _6 > _14;
_1 = _2 as u8;
_25.3 = _7.3;
_7.5 = _18 as u32;
_13 = !_7.4;
_6 = _7.5 as u8;
RET = [_22,_22,_22,_22];
_17.fld0 = _4.fld0 >> _7.2;
_10 = '\u{1004f3}' as u8;
Goto(bb3)
}
bb3 = {
Call(_27 = dump_var(10_usize, 21_usize, Move(_21), 20_usize, Move(_20), 18_usize, Move(_18), 14_usize, Move(_14)), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
Call(_27 = dump_var(10_usize, 22_usize, Move(_22), 15_usize, Move(_15), 1_usize, Move(_1), 28_usize, _28), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn11(mut _1: u8,mut _2: u8,mut _3: *mut u8,mut _4: u8) -> u8 {
mir! {
type RET = u8;
let _5: f32;
let _6: Adt43;
let _7: [i128; 1];
let _8: ();
let _9: ();
{
RET = _4 ^ _1;
_1 = _2;
_4 = _2;
_1 = _4;
_4 = _1;
_3 = core::ptr::addr_of_mut!(_4);
_4 = _1 << _2;
_4 = _1;
_1 = 57852_u16 as u8;
_3 = core::ptr::addr_of_mut!((*_3));
_3 = core::ptr::addr_of_mut!(_1);
_5 = 56884_u16 as f32;
_4 = RET;
_6.fld1 = (-2806712999258203119162826880765731242_i128) as u16;
Goto(bb1)
}
bb1 = {
Call(_8 = dump_var(11_usize, 2_usize, Move(_2), 9_usize, _9, 9_usize, _9, 9_usize, _9), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn12(mut _1: isize,mut _2: [bool; 4],mut _3: [isize; 6],mut _4: isize,mut _5: u8,mut _6: u8) -> bool {
mir! {
type RET = bool;
let _7: f32;
let _8: Adt55;
let _9: char;
let _10: (i8, i64, u8, f32, u8, u32);
let _11: ([isize; 6],);
let _12: ();
let _13: ();
{
RET = true;
_5 = _6;
_3 = [_4,_4,_1,_1,_1,_1];
_5 = !_6;
_5 = _6;
_2 = [RET,RET,RET,RET];
_4 = !_1;
_1 = 101_i8 as isize;
_2 = [RET,RET,RET,RET];
_3 = [_4,_4,_1,_4,_4,_4];
_6 = (-5646465336430895863_i64) as u8;
_4 = !_1;
_9 = '\u{b1e80}';
_6 = !_5;
RET = false;
Goto(bb1)
}
bb1 = {
_6 = !_5;
RET = _5 > _6;
_3 = [_1,_1,_4,_4,_1,_1];
_8 = Adt55::Variant1 { fld0: 323361867_u32 };
place!(Field::<u32>(Variant(_8, 1), 0)) = 1921783387_u32 << _4;
_4 = 15285_u16 as isize;
_9 = '\u{96197}';
place!(Field::<u32>(Variant(_8, 1), 0)) = 56434976_u32 | 356266258_u32;
_5 = RET as u8;
_1 = _4 >> _5;
_6 = _5;
_2 = [RET,RET,RET,RET];
_10.1 = _6 as i64;
_10.4 = 178337029419692487332705812566175156627_u128 as u8;
_2 = [RET,RET,RET,RET];
_3 = [_4,_1,_1,_1,_1,_4];
place!(Field::<(f32, [bool; 3], char, f32, i8)>(Variant(_8, 0), 2)).2 = _9;
Goto(bb2)
}
bb2 = {
Call(_12 = dump_var(12_usize, 3_usize, Move(_3), 4_usize, Move(_4), 1_usize, Move(_1), 13_usize, _13), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Return()
}

}
}
pub fn main() {
                fn0(std::hint::black_box(false), std::hint::black_box('\u{106e29}'), std::hint::black_box(9223372036854775807_isize), std::hint::black_box((-115_i8)), std::hint::black_box(11714_i16), std::hint::black_box(578432449_i32), std::hint::black_box((-3382445913551305964_i64)), std::hint::black_box(62342814804069591268168975994320892135_i128), std::hint::black_box(9287137724304396899_u64), std::hint::black_box(105_u8), std::hint::black_box(37037_u16), std::hint::black_box(167686965328118102491719395728551338187_u128));
                
            }
#[derive(Debug,Copy,Clone)]
pub enum Adt41 {
Variant0{
fld0: [bool; 4],
fld1: u64,
fld2: [i128; 1],
fld3: *mut usize,
fld4: f32,

},
Variant1{
fld0: bool,
fld1: i32,
fld2: f64,
fld3: *mut [bool; 3],

},
Variant2{
fld0: u8,
fld1: i64,
fld2: (u32, (i128, *mut u32, i16), f64),
fld3: ([isize; 6],),

}}
#[derive(Debug,Copy,Clone)]
pub enum Adt42 {
Variant0{
fld0: [i128; 7],
fld1: *const i64,
fld2: u32,
fld3: *mut usize,
fld4: i16,

},
Variant1{
fld0: usize,
fld1: u16,
fld2: [isize; 6],
fld3: ([isize; 6],),
fld4: *const (f32, [bool; 3], char, f32, i8),

},
Variant2{
fld0: *mut usize,
fld1: i128,
fld2: *mut [u16; 8],
fld3: [u16; 8],
fld4: i16,
fld5: (i128, *mut u32, i16),

},
Variant3{
fld0: [u16; 8],
fld1: [isize; 6],
fld2: isize,

}}
#[derive(Debug)]
pub struct Adt43 {
fld0: u64,
fld1: u16,
}
#[derive(Debug)]
pub enum Adt44 {
Variant0{
fld0: [bool; 4],
fld1: char,
fld2: u64,
fld3: *mut [bool; 3],
fld4: i16,
fld5: *mut i32,
fld6: u8,

},
Variant1{
fld0: u128,
fld1: char,
fld2: *mut u32,
fld3: (i128, *mut u32, i16),
fld4: f32,
fld5: [bool; 3],
fld6: i64,
fld7: *const (f32, [bool; 3], char, f32, i8),

}}
#[derive(Debug)]
pub struct Adt45 {
fld0: Adt44,
fld1: [bool; 4],
fld2: u16,
fld3: i128,
}
#[derive(Debug,Copy,Clone)]
pub struct Adt46 {
fld0: f32,
fld1: Adt42,
}
#[derive(Debug)]
pub struct Adt47 {
fld0: bool,
fld1: Adt45,
fld2: u16,
fld3: [isize; 6],
fld4: i16,
fld5: (i64, *mut i32),
fld6: *mut [u16; 8],
}
#[derive(Debug,Copy,Clone)]
pub enum Adt48 {
Variant0{
fld0: u32,
fld1: char,
fld2: isize,
fld3: [bool; 4],
fld4: u16,
fld5: *mut u32,
fld6: (f32, [bool; 3], char, f32, i8),

},
Variant1{
fld0: [bool; 4],
fld1: char,
fld2: f32,
fld3: [isize; 6],
fld4: *mut [u16; 8],
fld5: i32,
fld6: u32,
fld7: Adt42,

},
Variant2{
fld0: i64,
fld1: u64,
fld2: (i8, i64, u8, f32, u8, u32),

}}
#[derive(Debug)]
pub enum Adt49 {
Variant0{
fld0: Adt45,
fld1: u64,
fld2: *const i64,
fld3: i8,
fld4: *mut u8,

},
Variant1{
fld0: *const i64,
fld1: [isize; 6],
fld2: [bool; 4],
fld3: Adt48,
fld4: i16,
fld5: [i128; 7],

}}
#[derive(Debug)]
pub enum Adt50 {
Variant0{
fld0: Adt41,
fld1: (u32, (i128, *mut u32, i16), f64),
fld2: [i128; 1],

},
Variant1{
fld0: u64,
fld1: Adt42,
fld2: [bool; 3],

}}
#[derive(Debug)]
pub enum Adt51 {
Variant0{
fld0: [u16; 8],
fld1: f64,
fld2: isize,
fld3: i8,
fld4: (i8, i64, u8, f32, u8, u32),
fld5: [i128; 1],
fld6: Adt45,

},
Variant1{
fld0: bool,
fld1: *const i64,
fld2: u8,
fld3: (i128, *mut u32, i16),
fld4: (i64, *mut i32),
fld5: (i8, i64, u8, f32, u8, u32),
fld6: Adt49,
fld7: (f32, [bool; 3], char, f32, i8),

},
Variant2{
fld0: *mut [bool; 3],

},
Variant3{
fld0: *const i64,
fld1: u8,
fld2: *mut i32,
fld3: Adt50,
fld4: f32,
fld5: *mut [u16; 8],

}}
#[derive(Debug)]
pub enum Adt52 {
Variant0{
fld0: i128,
fld1: char,
fld2: [isize; 6],
fld3: *mut [bool; 3],
fld4: u16,

},
Variant1{
fld0: u128,
fld1: *mut usize,
fld2: (i8, i64, u8, f32, u8, u32),
fld3: Adt46,
fld4: f32,

},
Variant2{
fld0: [bool; 3],
fld1: f32,

},
Variant3{
fld0: f32,
fld1: [i128; 2],
fld2: Adt46,
fld3: *mut i32,

}}
#[derive(Debug)]
pub enum Adt53 {
Variant0{
fld0: Adt45,
fld1: *mut [bool; 3],
fld2: Adt46,
fld3: i32,
fld4: i16,

},
Variant1{
fld0: i64,
fld1: *mut u8,
fld2: *mut [u16; 8],
fld3: f32,

}}
#[derive(Debug)]
pub enum Adt54 {
Variant0{
fld0: [i128; 2],
fld1: char,
fld2: isize,
fld3: u16,
fld4: Adt43,

},
Variant1{
fld0: Adt48,

},
Variant2{
fld0: u32,
fld1: Adt42,
fld2: Adt48,
fld3: i8,
fld4: (f32, [bool; 3], char, f32, i8),
fld5: ([isize; 6],),
fld6: i64,
fld7: (u32,),

}}
#[derive(Debug)]
pub enum Adt55 {
Variant0{
fld0: [i128; 2],
fld1: Adt49,
fld2: (f32, [bool; 3], char, f32, i8),
fld3: *mut usize,

},
Variant1{
fld0: u32,

},
Variant2{
fld0: u128,
fld1: f64,

},
Variant3{
fld0: bool,
fld1: [i128; 1],
fld2: *const i64,
fld3: *mut u32,
fld4: Adt42,
fld5: (f32, [bool; 3], char, f32, i8),

}}
#[derive(Debug)]
pub enum Adt56 {
Variant0{
fld0: *const (f32, [bool; 3], char, f32, i8),
fld1: Adt49,
fld2: isize,
fld3: Adt44,
fld4: i16,
fld5: *const i64,
fld6: [i128; 7],

},
Variant1{
fld0: Adt54,

}}
#[derive(Debug)]
pub enum Adt57 {
Variant0{
fld0: isize,
fld1: *mut [u16; 8],

},
Variant1{
fld0: (i128, *mut u32, i16),

}}

