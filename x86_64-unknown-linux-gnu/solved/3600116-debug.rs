#![recursion_limit = "1024"]
    #![feature(custom_mir, core_intrinsics, const_hash)]
    #![allow(unused_parens, unused_assignments, overflowing_literals)]
    extern crate core;
    use core::intrinsics::mir::*;

    use std::fmt::Debug;

    #[inline(never)]
    fn dump_var(
        f: usize,
        var0: usize, val0: impl Debug,
        var1: usize, val1: impl Debug,
        var2: usize, val2: impl Debug,
        var3: usize, val3: impl Debug,
    ) {
        println!("fn{f}:_{var0} = {val0:?}\n_{var1} = {val1:?}\n_{var2} = {val2:?}\n_{var3} = {val3:?}");
    }
    #[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn0(mut _1: bool,mut _2: char,mut _3: isize,mut _4: i8,mut _5: i16,mut _6: i32,mut _7: i64,mut _8: i128,mut _9: u64,mut _10: u8,mut _11: u16,mut _12: u32) -> ([i8; 2], *const char, f64) {
mir! {
type RET = ([i8; 2], *const char, f64);
let _13: *mut u16;
let _14: u32;
let _15: Adt53;
let _16: Adt48;
let _17: (i16, u32);
let _18: bool;
let _19: char;
let _20: u32;
let _21: [u8; 7];
let _22: f32;
let _23: *const ((u64, isize, f32), *mut u128);
let _24: f32;
let _25: *const [u8; 1];
let _26: f32;
let _27: [i128; 8];
let _28: isize;
let _29: [u64; 2];
let _30: f32;
let _31: *const (i16, u32);
let _32: f64;
let _33: ();
let _34: ();
{
RET.1 = core::ptr::addr_of!(_2);
_5 = 10981_i16;
RET.0 = [(-88_i8),(-48_i8)];
_11 = 3071_u16;
RET.2 = 3189936255410696111_u64 as f64;
_1 = !false;
_10 = 191_u8;
RET.2 = 7955750950575338011_i64 as f64;
_8 = !(-47509883639522359203672360751662354382_i128);
_11 = 3104463130_u32 as u16;
_14 = 1650734810_u32 + 24855263_u32;
RET.1 = core::ptr::addr_of!(_2);
_3 = -(-9223372036854775808_isize);
Call(RET.0 = fn1(RET.1, _14, RET.1, _1, _3, _5, _3, RET.1, RET.1), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
RET.1 = core::ptr::addr_of!(_2);
_7 = 6861072726937584953_i64;
_14 = 1822377084_u32;
RET.1 = core::ptr::addr_of!(_2);
_17.1 = _14;
_9 = 13617213302537436858_u64 ^ 1539936781337178688_u64;
_3 = 9223372036854775807_isize * 9223372036854775807_isize;
RET.2 = _5 as f64;
_5 = 26940_i16 - (-2725_i16);
_17 = (_5, _14);
_11 = 57583_u16;
_1 = !true;
_2 = '\u{a663f}';
RET.0 = [47_i8,(-107_i8)];
_2 = '\u{67f91}';
_4 = _7 as i8;
_8 = _2 as i128;
_7 = (-6956050079051276922_i64);
RET.0 = [_4,_4];
_13 = core::ptr::addr_of_mut!(_11);
match _11 {
57583 => bb3,
_ => bb2
}
}
bb2 = {
Return()
}
bb3 = {
RET.2 = _8 as f64;
_3 = 9223372036854775807_isize;
_20 = !_14;
_17 = (_5, _20);
RET.2 = _9 as f64;
_19 = _2;
_6 = 31746707_i32 ^ (-939246799_i32);
_13 = core::ptr::addr_of_mut!(_11);
(*_13) = 24982_u16;
_14 = !_17.1;
_1 = !true;
RET.0 = [_4,_4];
_10 = _19 as u8;
RET.2 = _8 as f64;
_12 = _17.1;
_2 = _19;
_11 = 32922_u16;
_5 = _7 as i16;
_2 = _19;
_18 = _1;
match _3 {
0 => bb1,
1 => bb4,
2 => bb5,
3 => bb6,
4 => bb7,
9223372036854775807 => bb9,
_ => bb8
}
}
bb4 = {
Return()
}
bb5 = {
RET.1 = core::ptr::addr_of!(_2);
_7 = 6861072726937584953_i64;
_14 = 1822377084_u32;
RET.1 = core::ptr::addr_of!(_2);
_17.1 = _14;
_9 = 13617213302537436858_u64 ^ 1539936781337178688_u64;
_3 = 9223372036854775807_isize * 9223372036854775807_isize;
RET.2 = _5 as f64;
_5 = 26940_i16 - (-2725_i16);
_17 = (_5, _14);
_11 = 57583_u16;
_1 = !true;
_2 = '\u{a663f}';
RET.0 = [47_i8,(-107_i8)];
_2 = '\u{67f91}';
_4 = _7 as i8;
_8 = _2 as i128;
_7 = (-6956050079051276922_i64);
RET.0 = [_4,_4];
_13 = core::ptr::addr_of_mut!(_11);
match _11 {
57583 => bb3,
_ => bb2
}
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
_12 = _3 as u32;
_14 = !_12;
_21 = [_10,_10,_10,_10,_10,_10,_10];
_1 = _18;
RET.2 = _8 as f64;
_21 = [_10,_10,_10,_10,_10,_10,_10];
(*_13) = _5 as u16;
_17 = (_5, _14);
_17.0 = _5 & _5;
_13 = core::ptr::addr_of_mut!((*_13));
_22 = _4 as f32;
_22 = RET.2 as f32;
_21 = [_10,_10,_10,_10,_10,_10,_10];
_7 = !8296407982264448529_i64;
_21 = [_10,_10,_10,_10,_10,_10,_10];
Call(_18 = fn2(_9, _17, _7, _2, _3, _8, _19, _17.0, _22, _2, _17, _17, _3, _1), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_13 = core::ptr::addr_of_mut!(_11);
_21 = [_10,_10,_10,_10,_10,_10,_10];
RET.1 = core::ptr::addr_of!(_19);
_8 = -(-26088502646650163409467573927241134309_i128);
_17.0 = !_5;
_12 = _17.1;
_2 = _19;
match _3 {
0 => bb1,
1 => bb11,
2 => bb12,
3 => bb13,
9223372036854775807 => bb15,
_ => bb14
}
}
bb11 = {
_12 = _3 as u32;
_14 = !_12;
_21 = [_10,_10,_10,_10,_10,_10,_10];
_1 = _18;
RET.2 = _8 as f64;
_21 = [_10,_10,_10,_10,_10,_10,_10];
(*_13) = _5 as u16;
_17 = (_5, _14);
_17.0 = _5 & _5;
_13 = core::ptr::addr_of_mut!((*_13));
_22 = _4 as f32;
_22 = RET.2 as f32;
_21 = [_10,_10,_10,_10,_10,_10,_10];
_7 = !8296407982264448529_i64;
_21 = [_10,_10,_10,_10,_10,_10,_10];
Call(_18 = fn2(_9, _17, _7, _2, _3, _8, _19, _17.0, _22, _2, _17, _17, _3, _1), ReturnTo(bb10), UnwindUnreachable())
}
bb12 = {
Return()
}
bb13 = {
Return()
}
bb14 = {
RET.2 = _8 as f64;
_3 = 9223372036854775807_isize;
_20 = !_14;
_17 = (_5, _20);
RET.2 = _9 as f64;
_19 = _2;
_6 = 31746707_i32 ^ (-939246799_i32);
_13 = core::ptr::addr_of_mut!(_11);
(*_13) = 24982_u16;
_14 = !_17.1;
_1 = !true;
RET.0 = [_4,_4];
_10 = _19 as u8;
RET.2 = _8 as f64;
_12 = _17.1;
_2 = _19;
_11 = 32922_u16;
_5 = _7 as i16;
_2 = _19;
_18 = _1;
match _3 {
0 => bb1,
1 => bb4,
2 => bb5,
3 => bb6,
4 => bb7,
9223372036854775807 => bb9,
_ => bb8
}
}
bb15 = {
_17 = (_5, _20);
RET.2 = 4_usize as f64;
_29 = [_9,_9];
RET.1 = core::ptr::addr_of!(_19);
_8 = 83447163993728548992884700620116939881_i128 | (-8703642248412164187851673768266136456_i128);
_2 = _19;
Goto(bb16)
}
bb16 = {
Call(_33 = dump_var(0_usize, 20_usize, Move(_20), 29_usize, Move(_29), 5_usize, Move(_5), 9_usize, Move(_9)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_33 = dump_var(0_usize, 1_usize, Move(_1), 7_usize, Move(_7), 14_usize, Move(_14), 11_usize, Move(_11)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_33 = dump_var(0_usize, 12_usize, Move(_12), 34_usize, _34, 34_usize, _34, 34_usize, _34), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn1(mut _1: *const char,mut _2: u32,mut _3: *const char,mut _4: bool,mut _5: isize,mut _6: i16,mut _7: isize,mut _8: *const char,mut _9: *const char) -> [i8; 2] {
mir! {
type RET = [i8; 2];
let _10: *const char;
let _11: [u32; 7];
let _12: u16;
let _13: u8;
let _14: i64;
let _15: [u8; 7];
let _16: Adt55;
let _17: char;
let _18: i128;
let _19: [bool; 1];
let _20: u64;
let _21: [u64; 2];
let _22: u8;
let _23: isize;
let _24: u32;
let _25: i64;
let _26: (isize, (i16, u32), *mut u128);
let _27: [u64; 2];
let _28: bool;
let _29: u16;
let _30: Adt56;
let _31: (bool, char, bool);
let _32: f64;
let _33: i32;
let _34: f64;
let _35: i32;
let _36: ([u32; 7], *mut ([i8; 2], *const char, f64));
let _37: [u32; 7];
let _38: [u32; 7];
let _39: Adt55;
let _40: isize;
let _41: ([u32; 7], *mut ([i8; 2], *const char, f64));
let _42: isize;
let _43: ();
let _44: ();
{
(*_1) = '\u{67edc}';
_1 = core::ptr::addr_of!((*_8));
_5 = _7 | _7;
RET = [104_i8,82_i8];
(*_9) = '\u{393b5}';
_7 = _5;
(*_8) = '\u{4620}';
_7 = _5 >> _2;
(*_1) = '\u{9b5c7}';
_9 = core::ptr::addr_of!((*_9));
_4 = !true;
_3 = _1;
(*_1) = '\u{7a889}';
RET = [(-101_i8),12_i8];
(*_1) = '\u{10c937}';
(*_8) = '\u{b1175}';
(*_3) = '\u{4a949}';
_3 = core::ptr::addr_of!((*_1));
(*_8) = '\u{44d62}';
(*_8) = '\u{1e973}';
_11 = [_2,_2,_2,_2,_2,_2,_2];
Goto(bb1)
}
bb1 = {
(*_1) = '\u{7f7b1}';
(*_9) = '\u{a1728}';
_2 = 9250335117581349424_u64 as u32;
(*_9) = '\u{109b57}';
_12 = !29178_u16;
RET = [127_i8,(-55_i8)];
_16.fld0 = (_6, _2);
_16.fld2 = core::ptr::addr_of!((*_3));
_10 = core::ptr::addr_of!((*_1));
_16.fld0.0 = !_6;
_16.fld3.2 = 106342026194491014322380099987745282210_u128 as i64;
(*_1) = '\u{4389c}';
RET = [6_i8,23_i8];
_16.fld3.3 = 246_u8 as f32;
_7 = _5;
_16.fld1 = !90_u8;
_16.fld0.1 = _2 | _2;
_2 = _16.fld0.1 >> _16.fld0.1;
(*_9) = '\u{e0d61}';
_16.fld3.0 = core::ptr::addr_of!(_2);
_9 = _8;
_15 = [_16.fld1,_16.fld1,_16.fld1,_16.fld1,_16.fld1,_16.fld1,_16.fld1];
match _6 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
10981 => bb7,
_ => bb6
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
(*_1) = '\u{b1d9e}';
_16.fld3.1 = core::ptr::addr_of!(_16.fld0);
_18 = 46984091444631394724393230901894447770_i128 * (-9195317294627990152692846626437304812_i128);
(*_3) = '\u{eb86c}';
_16.fld3.0 = core::ptr::addr_of!(_16.fld0.1);
_6 = _16.fld0.0 ^ _16.fld0.0;
(*_9) = '\u{78fe5}';
_16.fld3.1 = core::ptr::addr_of!(_16.fld0);
_14 = !_16.fld3.2;
(*_8) = '\u{e5c08}';
_5 = !_7;
(*_1) = '\u{add54}';
_19 = [_4];
Goto(bb8)
}
bb8 = {
_6 = 2103632013_i32 as i16;
(*_1) = '\u{435e1}';
_5 = _7;
_16.fld3.3 = _7 as f32;
_4 = !true;
_24 = _14 as u32;
(*_9) = '\u{2fc4f}';
_13 = _16.fld3.3 as u8;
_26.1 = (_6, _2);
_17 = (*_1);
_22 = _16.fld1 ^ _13;
(*_9) = _17;
Goto(bb9)
}
bb9 = {
_26.0 = 9975455253778123023_usize as isize;
_26.1 = (_16.fld0.0, _2);
RET = [(-103_i8),(-25_i8)];
(*_3) = _17;
_27 = [5050344056137138000_u64,11019558578664116590_u64];
_25 = _14 ^ _14;
_31.2 = !_4;
_5 = _26.0 * _7;
_4 = _31.2;
RET = [51_i8,68_i8];
(*_9) = _17;
_2 = !_26.1.1;
_23 = _5;
RET = [53_i8,(-41_i8)];
(*_9) = _17;
_13 = !_16.fld1;
RET = [84_i8,(-95_i8)];
(*_9) = _17;
(*_1) = _17;
_11 = [_2,_26.1.1,_24,_2,_2,_2,_26.1.1];
_32 = (-128_i8) as f64;
_26.1 = (_6, _2);
_26.0 = _5 & _7;
_31.2 = (*_3) != (*_1);
_5 = -_26.0;
Goto(bb10)
}
bb10 = {
_16.fld0.1 = !_24;
_31.1 = (*_8);
_26.0 = _5;
RET = [(-85_i8),(-9_i8)];
_10 = core::ptr::addr_of!((*_1));
_34 = _25 as f64;
_13 = _2 as u8;
_31.1 = (*_1);
_18 = (-50295802187059974675209280096665460924_i128);
_2 = _24 >> _25;
_26.1.0 = -_16.fld0.0;
_1 = core::ptr::addr_of!((*_8));
Goto(bb11)
}
bb11 = {
_16.fld0 = (_26.1.0, _2);
_28 = !_4;
(*_10) = _31.1;
(*_3) = _31.1;
_7 = _5;
match _18 {
289986564733878488788165327335102750532 => bb12,
_ => bb5
}
}
bb12 = {
(*_3) = _17;
_19 = [_31.2];
_20 = !10830227672019319180_u64;
_23 = (-125_i8) as isize;
_37 = [_2,_2,_24,_2,_16.fld0.1,_16.fld0.1,_2];
_16.fld3.1 = core::ptr::addr_of!(_16.fld0);
_40 = _5;
_39.fld0.0 = _6;
_39.fld3.2 = _17 as i64;
_39.fld3.0 = core::ptr::addr_of!(_2);
_39.fld0.1 = _26.1.1 << _39.fld0.0;
_21 = [_20,_20];
Goto(bb13)
}
bb13 = {
_15 = [_22,_13,_22,_22,_16.fld1,_13,_22];
_33 = 2058441517_i32 >> _13;
_4 = !_31.2;
_21 = _27;
_34 = _32;
_39.fld0 = _26.1;
Goto(bb14)
}
bb14 = {
_10 = _1;
_27 = [_20,_20];
RET = [(-68_i8),(-74_i8)];
_39.fld1 = 10998607791312287209_usize as u8;
_31.0 = _4 & _4;
Goto(bb15)
}
bb15 = {
Call(_43 = dump_var(1_usize, 40_usize, Move(_40), 27_usize, Move(_27), 5_usize, Move(_5), 28_usize, Move(_28)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_43 = dump_var(1_usize, 37_usize, Move(_37), 22_usize, Move(_22), 25_usize, Move(_25), 7_usize, Move(_7)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_43 = dump_var(1_usize, 31_usize, Move(_31), 24_usize, Move(_24), 33_usize, Move(_33), 20_usize, Move(_20)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn2(mut _1: u64,mut _2: (i16, u32),mut _3: i64,mut _4: char,mut _5: isize,mut _6: i128,mut _7: char,mut _8: i16,mut _9: f32,mut _10: char,mut _11: (i16, u32),mut _12: (i16, u32),mut _13: isize,mut _14: bool) -> bool {
mir! {
type RET = bool;
let _15: i128;
let _16: *const u8;
let _17: u128;
let _18: isize;
let _19: isize;
let _20: f64;
let _21: char;
let _22: i32;
let _23: [i8; 2];
let _24: u128;
let _25: (bool, char, bool);
let _26: isize;
let _27: Adt59;
let _28: i64;
let _29: u32;
let _30: (isize,);
let _31: u128;
let _32: usize;
let _33: *mut u128;
let _34: u8;
let _35: isize;
let _36: u32;
let _37: (bool, char, bool);
let _38: ();
let _39: ();
{
_2.1 = !_11.1;
RET = _1 <= _1;
_12 = _2;
_13 = _5 << _1;
Call(_16 = fn3(_11, _13, _1, _3, _4, _12.0, _13, _7, _12.1, _2.1), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_2.0 = _11.0 ^ _12.0;
_7 = _10;
RET = !_14;
_9 = 243_u8 as f32;
_14 = RET;
_10 = _7;
_17 = 164211860256295308625040344807478281013_u128 * 43290650882636506256162471328146275722_u128;
_7 = _10;
_3 = (-6857308426547511967_i64);
_6 = (-147113636104726019499305231977234144172_i128);
_4 = _10;
_12 = _2;
_13 = -_5;
_12 = (_2.0, _2.1);
_15 = _2.0 as i128;
RET = !_14;
_2 = _12;
_2.1 = 99_i8 as u32;
_9 = 12252272343092855337_usize as f32;
_12 = _11;
Goto(bb2)
}
bb2 = {
_19 = _5;
_10 = _7;
_2.1 = 71_u8 as u32;
_12.0 = _2.1 as i16;
_2 = (_8, _12.1);
_17 = 178217336715025877603574461883510839928_u128 ^ 24737516790535408838083469211581897233_u128;
_14 = RET;
_7 = _10;
_18 = _13;
_2.0 = 7_usize as i16;
_15 = !_6;
RET = !_14;
_9 = _3 as f32;
_20 = _19 as f64;
_2 = (_8, _12.1);
_21 = _7;
_11.0 = _17 as i16;
_12.0 = _2.0;
_7 = _10;
_12.1 = _11.1 | _11.1;
_11.0 = _8;
_11 = (_12.0, _12.1);
_11.0 = 42425_u16 as i16;
_23 = [56_i8,(-1_i8)];
_6 = _1 as i128;
_13 = _19 | _5;
RET = _14;
Call(_3 = core::intrinsics::bswap((-3422637067802985273_i64)), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_1 = _6 as u64;
_24 = _17 - _17;
_11 = _2;
_7 = _10;
_9 = _18 as f32;
_24 = (-414901654_i32) as u128;
_25.1 = _21;
_11 = (_12.0, _12.1);
_15 = !_6;
Goto(bb4)
}
bb4 = {
_9 = _13 as f32;
_2.1 = !_11.1;
_11.0 = _8 - _12.0;
_1 = _3 as u64;
_21 = _25.1;
Goto(bb5)
}
bb5 = {
_21 = _25.1;
_21 = _4;
_14 = RET;
_25.2 = _7 != _7;
_20 = _15 as f64;
_20 = 18148560050980197604_usize as f64;
_15 = _6;
_7 = _10;
RET = _14;
_25.0 = _25.2;
_20 = _11.0 as f64;
_2 = (_8, _11.1);
RET = _25.0 <= _14;
_22 = 1583925454_i32;
_29 = _3 as u32;
_2 = (_8, _29);
_28 = -_3;
_3 = _28;
_25.0 = _25.2 | RET;
match _19 {
0 => bb1,
1 => bb4,
2 => bb3,
3 => bb6,
4 => bb7,
5 => bb8,
9223372036854775807 => bb10,
_ => bb9
}
}
bb6 = {
_9 = _13 as f32;
_2.1 = !_11.1;
_11.0 = _8 - _12.0;
_1 = _3 as u64;
_21 = _25.1;
Goto(bb5)
}
bb7 = {
_1 = _6 as u64;
_24 = _17 - _17;
_11 = _2;
_7 = _10;
_9 = _18 as f32;
_24 = (-414901654_i32) as u128;
_25.1 = _21;
_11 = (_12.0, _12.1);
_15 = !_6;
Goto(bb4)
}
bb8 = {
_19 = _5;
_10 = _7;
_2.1 = 71_u8 as u32;
_12.0 = _2.1 as i16;
_2 = (_8, _12.1);
_17 = 178217336715025877603574461883510839928_u128 ^ 24737516790535408838083469211581897233_u128;
_14 = RET;
_7 = _10;
_18 = _13;
_2.0 = 7_usize as i16;
_15 = !_6;
RET = !_14;
_9 = _3 as f32;
_20 = _19 as f64;
_2 = (_8, _12.1);
_21 = _7;
_11.0 = _17 as i16;
_12.0 = _2.0;
_7 = _10;
_12.1 = _11.1 | _11.1;
_11.0 = _8;
_11 = (_12.0, _12.1);
_11.0 = 42425_u16 as i16;
_23 = [56_i8,(-1_i8)];
_6 = _1 as i128;
_13 = _19 | _5;
RET = _14;
Call(_3 = core::intrinsics::bswap((-3422637067802985273_i64)), ReturnTo(bb3), UnwindUnreachable())
}
bb9 = {
_2.0 = _11.0 ^ _12.0;
_7 = _10;
RET = !_14;
_9 = 243_u8 as f32;
_14 = RET;
_10 = _7;
_17 = 164211860256295308625040344807478281013_u128 * 43290650882636506256162471328146275722_u128;
_7 = _10;
_3 = (-6857308426547511967_i64);
_6 = (-147113636104726019499305231977234144172_i128);
_4 = _10;
_12 = _2;
_13 = -_5;
_12 = (_2.0, _2.1);
_15 = _2.0 as i128;
RET = !_14;
_2 = _12;
_2.1 = 99_i8 as u32;
_9 = 12252272343092855337_usize as f32;
_12 = _11;
Goto(bb2)
}
bb10 = {
_12 = (_8, _11.1);
_26 = _5 & _5;
_25.0 = !RET;
_15 = -_6;
_25.2 = _6 <= _6;
_12.1 = !_11.1;
_11.1 = _29;
_29 = _20 as u32;
_25.1 = _4;
_2 = _11;
_21 = _10;
_2.1 = _29;
_20 = _15 as f64;
_12 = _2;
_11 = _12;
_2.1 = _12.1 ^ _12.1;
_30 = (_26,);
_25.0 = RET | _25.2;
_1 = !2475059611115502120_u64;
Call(_3 = core::intrinsics::transmute(_18), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_12.0 = _2.0 ^ _2.0;
_12.0 = _11.0;
_12.0 = _2.0 + _8;
_32 = _2.0 as usize;
_12.0 = _12.1 as i16;
_25.2 = !_25.0;
match _5 {
0 => bb8,
1 => bb12,
9223372036854775807 => bb14,
_ => bb13
}
}
bb12 = {
_19 = _5;
_10 = _7;
_2.1 = 71_u8 as u32;
_12.0 = _2.1 as i16;
_2 = (_8, _12.1);
_17 = 178217336715025877603574461883510839928_u128 ^ 24737516790535408838083469211581897233_u128;
_14 = RET;
_7 = _10;
_18 = _13;
_2.0 = 7_usize as i16;
_15 = !_6;
RET = !_14;
_9 = _3 as f32;
_20 = _19 as f64;
_2 = (_8, _12.1);
_21 = _7;
_11.0 = _17 as i16;
_12.0 = _2.0;
_7 = _10;
_12.1 = _11.1 | _11.1;
_11.0 = _8;
_11 = (_12.0, _12.1);
_11.0 = 42425_u16 as i16;
_23 = [56_i8,(-1_i8)];
_6 = _1 as i128;
_13 = _19 | _5;
RET = _14;
Call(_3 = core::intrinsics::bswap((-3422637067802985273_i64)), ReturnTo(bb3), UnwindUnreachable())
}
bb13 = {
_1 = _6 as u64;
_24 = _17 - _17;
_11 = _2;
_7 = _10;
_9 = _18 as f32;
_24 = (-414901654_i32) as u128;
_25.1 = _21;
_11 = (_12.0, _12.1);
_15 = !_6;
Goto(bb4)
}
bb14 = {
_16 = core::ptr::addr_of!(_34);
_11.0 = _8 ^ _12.0;
_35 = -_26;
_11.0 = -_8;
(*_16) = 133_u8 << _2.0;
_9 = _3 as f32;
_3 = _28;
_19 = _13 >> _15;
_2.0 = !_12.0;
_9 = _1 as f32;
_23 = [(-76_i8),127_i8];
_8 = !_12.0;
_22 = _29 as i32;
_16 = core::ptr::addr_of!((*_16));
_25.1 = _10;
_13 = _3 as isize;
_25.2 = !RET;
_11.0 = _2.0;
_35 = _19 << _32;
_9 = _17 as f32;
_12 = (_8, _2.1);
_9 = 91_i8 as f32;
_19 = -_26;
_5 = _26;
Goto(bb15)
}
bb15 = {
Call(_38 = dump_var(2_usize, 21_usize, Move(_21), 14_usize, Move(_14), 10_usize, Move(_10), 29_usize, Move(_29)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_38 = dump_var(2_usize, 26_usize, Move(_26), 15_usize, Move(_15), 34_usize, Move(_34), 23_usize, Move(_23)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_38 = dump_var(2_usize, 12_usize, Move(_12), 19_usize, Move(_19), 28_usize, Move(_28), 24_usize, Move(_24)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_38 = dump_var(2_usize, 30_usize, Move(_30), 3_usize, Move(_3), 39_usize, _39, 39_usize, _39), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn3(mut _1: (i16, u32),mut _2: isize,mut _3: u64,mut _4: i64,mut _5: char,mut _6: i16,mut _7: isize,mut _8: char,mut _9: u32,mut _10: u32) -> *const u8 {
mir! {
type RET = *const u8;
let _11: isize;
let _12: (i16, u32);
let _13: u8;
let _14: [i8; 2];
let _15: f64;
let _16: [u32; 7];
let _17: isize;
let _18: (u64, isize, f32);
let _19: f64;
let _20: [bool; 1];
let _21: Adt48;
let _22: (i16, u32);
let _23: (i16, u32);
let _24: [i128; 8];
let _25: [u32; 7];
let _26: Adt53;
let _27: i64;
let _28: [u64; 2];
let _29: (i16, u32);
let _30: u16;
let _31: *const ((u64, isize, f32), *mut u128);
let _32: i128;
let _33: Adt55;
let _34: [u8; 1];
let _35: (u64, isize, f32);
let _36: [bool; 1];
let _37: i8;
let _38: ();
let _39: ();
{
_3 = 10811201558400786724_usize as u64;
_5 = _8;
_6 = _1.0 ^ _1.0;
_10 = !_9;
_3 = _6 as u64;
_5 = _8;
_5 = _8;
_10 = _1.1;
_1 = (_6, _10);
_1.1 = _4 as u32;
_7 = 188_u8 as isize;
_11 = !_2;
_3 = 1437195254_i32 as u64;
Goto(bb1)
}
bb1 = {
_12 = (_1.0, _9);
_13 = 13222503872073837576_usize as u8;
_8 = _5;
_7 = _11 ^ _2;
_12 = (_6, _10);
_14 = [(-111_i8),121_i8];
_1.1 = _5 as u32;
RET = core::ptr::addr_of!(_13);
(*RET) = !148_u8;
_7 = _2;
_1 = (_6, _9);
_12.0 = _1.0;
RET = core::ptr::addr_of!((*RET));
_15 = _12.0 as f64;
_10 = !_1.1;
_12.0 = _9 as i16;
_1.0 = _12.0 - _6;
_17 = (-39671120_i32) as isize;
RET = core::ptr::addr_of!(_13);
_4 = !(-1693999729058860741_i64);
Call(RET = fn4(_5, _17, _4, _8), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_8 = _5;
_18.2 = _6 as f32;
_7 = _13 as isize;
RET = core::ptr::addr_of!(_13);
RET = core::ptr::addr_of!((*RET));
_1.1 = 149039179142620158496587385772874958973_i128 as u32;
(*RET) = _12.0 as u8;
_12.0 = true as i16;
_12.1 = _10;
_18.2 = _12.1 as f32;
_1.0 = _6 - _6;
_20 = [false];
_18.1 = _11;
_19 = _15;
_9 = _12.1;
_12 = (_6, _9);
_12.1 = _9 - _10;
_12.1 = _1.1 + _9;
_12.1 = _9;
_12.1 = (*RET) as u32;
_18.0 = _3 & _3;
Goto(bb3)
}
bb3 = {
_5 = _8;
_14 = [43_i8,88_i8];
_9 = _19 as u32;
_13 = 68_u8;
_18.1 = !_11;
_22.0 = _1.0 - _1.0;
_13 = _9 as u8;
_23.0 = !_22.0;
_12.1 = _9 & _10;
_22.1 = _22.0 as u32;
_23 = _22;
Goto(bb4)
}
bb4 = {
RET = core::ptr::addr_of!((*RET));
_24 = [88605795319135432225934986835131213012_i128,150412888506310597207841541602958662527_i128,(-168185056531642967694178566781447320491_i128),23783587720942845263474198226136251105_i128,39146048715416357580184157516213045708_i128,(-128019952733779287579984786644083696409_i128),(-50827849534031067244719083066156202207_i128),(-73028341003880862850140412941419259015_i128)];
_9 = !_12.1;
_7 = _4 as isize;
_8 = _5;
_25 = [_22.1,_23.1,_9,_9,_22.1,_1.1,_22.1];
_19 = _15 * _15;
_2 = _11 << _23.1;
_12 = (_22.0, _22.1);
(*RET) = _2 as u8;
Call((*RET) = core::intrinsics::transmute(_20), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
_12 = _22;
_5 = _8;
_12.0 = 17603890490729902557_usize as i16;
_19 = _15;
_5 = _8;
_8 = _5;
_22 = (_23.0, _9);
_23.1 = (-17_i8) as u32;
_3 = !_18.0;
_14 = [(-113_i8),(-32_i8)];
_25 = [_12.1,_1.1,_12.1,_9,_12.1,_9,_12.1];
_18.1 = _13 as isize;
RET = core::ptr::addr_of!((*RET));
_24 = [51713406827199262032492327183571997677_i128,(-86753416508229403226278047584402085423_i128),47583917277920270500028564998068474941_i128,123102862166172847248110184652878428539_i128,(-38392944000759893882623698470165182882_i128),(-22848316977735289336863015392757134873_i128),13886797879943641781282349153202730533_i128,149622720147105984606078219978165334110_i128];
RET = core::ptr::addr_of!((*RET));
_13 = 174_u8 * 68_u8;
_29.0 = 162539421053336476487538861288524361443_i128 as i16;
_10 = _3 as u32;
_13 = 50_u8;
_3 = _8 as u64;
_12 = (_1.0, _22.1);
RET = core::ptr::addr_of!(_13);
Call(_3 = core::intrinsics::bswap(_18.0), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
_10 = _12.1 | _9;
_11 = _18.2 as isize;
_1 = (_23.0, _10);
_28 = [_3,_18.0];
_1.0 = !_22.0;
_22.1 = !_9;
match (*RET) {
0 => bb4,
1 => bb7,
2 => bb8,
3 => bb9,
4 => bb10,
5 => bb11,
6 => bb12,
50 => bb14,
_ => bb13
}
}
bb7 = {
_12 = _22;
_5 = _8;
_12.0 = 17603890490729902557_usize as i16;
_19 = _15;
_5 = _8;
_8 = _5;
_22 = (_23.0, _9);
_23.1 = (-17_i8) as u32;
_3 = !_18.0;
_14 = [(-113_i8),(-32_i8)];
_25 = [_12.1,_1.1,_12.1,_9,_12.1,_9,_12.1];
_18.1 = _13 as isize;
RET = core::ptr::addr_of!((*RET));
_24 = [51713406827199262032492327183571997677_i128,(-86753416508229403226278047584402085423_i128),47583917277920270500028564998068474941_i128,123102862166172847248110184652878428539_i128,(-38392944000759893882623698470165182882_i128),(-22848316977735289336863015392757134873_i128),13886797879943641781282349153202730533_i128,149622720147105984606078219978165334110_i128];
RET = core::ptr::addr_of!((*RET));
_13 = 174_u8 * 68_u8;
_29.0 = 162539421053336476487538861288524361443_i128 as i16;
_10 = _3 as u32;
_13 = 50_u8;
_3 = _8 as u64;
_12 = (_1.0, _22.1);
RET = core::ptr::addr_of!(_13);
Call(_3 = core::intrinsics::bswap(_18.0), ReturnTo(bb6), UnwindUnreachable())
}
bb8 = {
RET = core::ptr::addr_of!((*RET));
_24 = [88605795319135432225934986835131213012_i128,150412888506310597207841541602958662527_i128,(-168185056531642967694178566781447320491_i128),23783587720942845263474198226136251105_i128,39146048715416357580184157516213045708_i128,(-128019952733779287579984786644083696409_i128),(-50827849534031067244719083066156202207_i128),(-73028341003880862850140412941419259015_i128)];
_9 = !_12.1;
_7 = _4 as isize;
_8 = _5;
_25 = [_22.1,_23.1,_9,_9,_22.1,_1.1,_22.1];
_19 = _15 * _15;
_2 = _11 << _23.1;
_12 = (_22.0, _22.1);
(*RET) = _2 as u8;
Call((*RET) = core::intrinsics::transmute(_20), ReturnTo(bb5), UnwindUnreachable())
}
bb9 = {
_5 = _8;
_14 = [43_i8,88_i8];
_9 = _19 as u32;
_13 = 68_u8;
_18.1 = !_11;
_22.0 = _1.0 - _1.0;
_13 = _9 as u8;
_23.0 = !_22.0;
_12.1 = _9 & _10;
_22.1 = _22.0 as u32;
_23 = _22;
Goto(bb4)
}
bb10 = {
_8 = _5;
_18.2 = _6 as f32;
_7 = _13 as isize;
RET = core::ptr::addr_of!(_13);
RET = core::ptr::addr_of!((*RET));
_1.1 = 149039179142620158496587385772874958973_i128 as u32;
(*RET) = _12.0 as u8;
_12.0 = true as i16;
_12.1 = _10;
_18.2 = _12.1 as f32;
_1.0 = _6 - _6;
_20 = [false];
_18.1 = _11;
_19 = _15;
_9 = _12.1;
_12 = (_6, _9);
_12.1 = _9 - _10;
_12.1 = _1.1 + _9;
_12.1 = _9;
_12.1 = (*RET) as u32;
_18.0 = _3 & _3;
Goto(bb3)
}
bb11 = {
_12 = (_1.0, _9);
_13 = 13222503872073837576_usize as u8;
_8 = _5;
_7 = _11 ^ _2;
_12 = (_6, _10);
_14 = [(-111_i8),121_i8];
_1.1 = _5 as u32;
RET = core::ptr::addr_of!(_13);
(*RET) = !148_u8;
_7 = _2;
_1 = (_6, _9);
_12.0 = _1.0;
RET = core::ptr::addr_of!((*RET));
_15 = _12.0 as f64;
_10 = !_1.1;
_12.0 = _9 as i16;
_1.0 = _12.0 - _6;
_17 = (-39671120_i32) as isize;
RET = core::ptr::addr_of!(_13);
_4 = !(-1693999729058860741_i64);
Call(RET = fn4(_5, _17, _4, _8), ReturnTo(bb2), UnwindUnreachable())
}
bb12 = {
Return()
}
bb13 = {
Return()
}
bb14 = {
_4 = 4901959345878050098_i64 + 6140219522445833813_i64;
_29 = (_22.0, _1.1);
_18.1 = !_2;
_33.fld0.0 = _17 as i16;
_32 = _10 as i128;
_33.fld3.2 = -_4;
_33.fld2 = core::ptr::addr_of!(_5);
_9 = _29.1 * _29.1;
_22.0 = 13620_u16 as i16;
_33.fld1 = _18.2 as u8;
_32 = _8 as i128;
_33.fld3.1 = core::ptr::addr_of!(_23);
_22.0 = !_1.0;
_5 = _8;
_27 = _4;
_8 = _5;
_18.0 = _32 as u64;
_5 = _8;
_5 = _8;
_32 = !90507783840594353631121959964165759114_i128;
_22 = (_12.0, _10);
_33.fld3.2 = _8 as i64;
_35.1 = _2;
_18.2 = _4 as f32;
_1.1 = _12.1;
_35.0 = !_3;
Goto(bb15)
}
bb15 = {
Call(_38 = dump_var(3_usize, 24_usize, Move(_24), 6_usize, Move(_6), 13_usize, Move(_13), 22_usize, Move(_22)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_38 = dump_var(3_usize, 10_usize, Move(_10), 14_usize, Move(_14), 27_usize, Move(_27), 2_usize, Move(_2)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_38 = dump_var(3_usize, 20_usize, Move(_20), 11_usize, Move(_11), 17_usize, Move(_17), 32_usize, Move(_32)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn4(mut _1: char,mut _2: isize,mut _3: i64,mut _4: char) -> *const u8 {
mir! {
type RET = *const u8;
let _5: [u8; 7];
let _6: f32;
let _7: [u8; 1];
let _8: char;
let _9: char;
let _10: Adt60;
let _11: [bool; 1];
let _12: ((u64, isize, f32), *mut u128);
let _13: [i8; 2];
let _14: (*const u32, *const (i16, u32), i64, f32);
let _15: ([u32; 7], *mut ([i8; 2], *const char, f64));
let _16: isize;
let _17: (bool, char, bool);
let _18: [u64; 2];
let _19: *const (isize, (i16, u32), *mut u128);
let _20: (isize,);
let _21: (bool, char, bool);
let _22: bool;
let _23: u32;
let _24: isize;
let _25: isize;
let _26: u128;
let _27: Adt48;
let _28: (i16, u32);
let _29: [u8; 1];
let _30: [u32; 7];
let _31: [bool; 1];
let _32: u32;
let _33: (isize,);
let _34: [i128; 8];
let _35: (u64, isize, f32);
let _36: i32;
let _37: (bool, char, bool);
let _38: ((u64, isize, f32), *mut u128);
let _39: (i16, u32);
let _40: isize;
let _41: (isize, (i16, u32), *mut u128);
let _42: char;
let _43: f64;
let _44: (i16, u32);
let _45: [u8; 1];
let _46: *mut ([i8; 2], *const char, f64);
let _47: (i16, u32);
let _48: *const (isize, (i16, u32), *mut u128);
let _49: char;
let _50: bool;
let _51: [i128; 8];
let _52: isize;
let _53: (bool, char, bool);
let _54: isize;
let _55: char;
let _56: [u32; 7];
let _57: isize;
let _58: usize;
let _59: Adt54;
let _60: (isize,);
let _61: i8;
let _62: f32;
let _63: Adt56;
let _64: isize;
let _65: i32;
let _66: (i16, u32);
let _67: [u64; 2];
let _68: Adt51;
let _69: (*const u32, *const (i16, u32), i64, f32);
let _70: (bool, char, bool);
let _71: (i16, u32);
let _72: char;
let _73: usize;
let _74: Adt59;
let _75: f64;
let _76: Adt64;
let _77: (i16, u32);
let _78: f32;
let _79: isize;
let _80: u128;
let _81: [bool; 1];
let _82: [i128; 8];
let _83: u128;
let _84: Adt62;
let _85: i32;
let _86: char;
let _87: (u64, isize, f32);
let _88: u8;
let _89: [u64; 2];
let _90: u64;
let _91: [u32; 7];
let _92: bool;
let _93: Adt59;
let _94: ([i8; 2], *const char, f64);
let _95: Adt61;
let _96: (u64, isize, f32);
let _97: f64;
let _98: Adt48;
let _99: Adt64;
let _100: Adt48;
let _101: (bool, char, bool);
let _102: Adt64;
let _103: (bool, char, bool);
let _104: [i8; 2];
let _105: u64;
let _106: (bool, char, bool);
let _107: (u64, isize, f32);
let _108: Adt63;
let _109: isize;
let _110: i64;
let _111: f64;
let _112: Adt50;
let _113: ();
let _114: ();
{
_3 = -(-7216219860229976199_i64);
_4 = _1;
_2 = (-9223372036854775808_isize) >> _3;
_1 = _4;
_4 = _1;
_4 = _1;
_1 = _4;
_2 = !118_isize;
_1 = _4;
_5 = [139_u8,230_u8,84_u8,92_u8,211_u8,206_u8,11_u8];
_4 = _1;
_3 = (-1878805923815968721_i64) - (-9000087062683583676_i64);
_1 = _4;
_2 = -50_isize;
_4 = _1;
_1 = _4;
_6 = 105537829597342485972025552603040441288_i128 as f32;
_4 = _1;
_5 = [141_u8,50_u8,32_u8,171_u8,98_u8,197_u8,148_u8];
_6 = 44009_u16 as f32;
_6 = _3 as f32;
_2 = (-9223372036854775808_isize) - (-9223372036854775808_isize);
_8 = _4;
_6 = (-124_i8) as f32;
Call(_5 = fn5(_1, _3, _2, _3, _3, _4, _8, _2), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_2 = 9223372036854775807_isize;
_10.fld6.0 = (18388663045065288447_u64, _2, _6);
_10.fld6.0.2 = (-78_i8) as f32;
_10.fld6.0.0 = 1591476341482113532_u64;
_10.fld2 = _10.fld6.0.0 as isize;
_2 = 750044995_i32 as isize;
_6 = _10.fld6.0.2 + _10.fld6.0.2;
_9 = _1;
_2 = _10.fld6.0.1 | _10.fld2;
_11 = [false];
_2 = !_10.fld2;
_3 = 3078_i16 as i64;
_8 = _1;
_13 = [94_i8,(-46_i8)];
_7 = [63_u8];
_10.fld1.2 = !_3;
_10.fld4 = core::ptr::addr_of_mut!(_3);
_12.0.2 = -_6;
_2 = _10.fld6.0.1 + _10.fld2;
_4 = _8;
Call(_13 = fn9(_10.fld2, _10.fld2, _1, _1, _10.fld4, _10.fld6.0.0, _5, _10.fld6.0, _3, _5, _2, _10.fld2, _6, _2), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_8 = _4;
_2 = !_10.fld6.0.1;
_14.2 = _3 | _10.fld1.2;
_3 = _10.fld1.2 << _10.fld2;
_10.fld6.1 = core::ptr::addr_of_mut!(_10.fld0);
_12 = _10.fld6;
_9 = _4;
_12.0.0 = !_10.fld6.0.0;
_4 = _9;
_9 = _8;
_13 = [(-42_i8),(-105_i8)];
_10.fld0 = _12.0.0 as u128;
_5 = [246_u8,176_u8,74_u8,0_u8,170_u8,122_u8,64_u8];
_12.0.0 = !_10.fld6.0.0;
_15.0 = [634063945_u32,2270364188_u32,4117316522_u32,4260793999_u32,1775573656_u32,2563137001_u32,966685332_u32];
_7 = [143_u8];
Goto(bb3)
}
bb3 = {
_12.1 = core::ptr::addr_of_mut!(_10.fld0);
_10.fld6.0 = (_12.0.0, _2, _6);
_11 = [true];
_10.fld6.0.2 = _6 - _6;
_9 = _8;
_3 = _9 as i64;
_10.fld1.2 = _14.2 ^ _14.2;
_2 = !_12.0.1;
_4 = _8;
_10.fld6.0.2 = _6 * _6;
Call(_10.fld1.3 = core::intrinsics::transmute(_9), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_9 = _4;
_10.fld6.0.0 = _12.0.0 - _12.0.0;
_2 = _10.fld2 - _10.fld6.0.1;
_4 = _8;
_1 = _4;
_12.0.2 = -_6;
_10.fld6.0.0 = (-10359_i16) as u64;
_16 = _10.fld6.0.1;
_14.3 = _10.fld6.0.2 * _10.fld6.0.2;
_10.fld6.0.1 = !_2;
_9 = _8;
Goto(bb5)
}
bb5 = {
_10.fld6.0 = (_12.0.0, _16, _14.3);
_10.fld6.0.2 = _14.3 + _14.3;
_5 = [193_u8,137_u8,17_u8,229_u8,111_u8,247_u8,133_u8];
_12.0 = (_10.fld6.0.0, _10.fld6.0.1, _10.fld6.0.2);
_17.1 = _4;
_8 = _4;
_10.fld0 = 43057477633242938600349331644385009649_u128;
_5 = [21_u8,37_u8,120_u8,161_u8,209_u8,27_u8,58_u8];
_1 = _8;
_16 = _2 + _10.fld2;
_4 = _8;
_12.0.0 = !_10.fld6.0.0;
_10.fld0 = 88207508909667032018971058081614851420_u128;
_18 = [_12.0.0,_12.0.0];
_1 = _9;
_16 = (-553836424_i32) as isize;
_4 = _9;
_2 = -_12.0.1;
_17 = (false, _1, false);
match _10.fld0 {
88207508909667032018971058081614851420 => bb7,
_ => bb6
}
}
bb6 = {
_12.1 = core::ptr::addr_of_mut!(_10.fld0);
_10.fld6.0 = (_12.0.0, _2, _6);
_11 = [true];
_10.fld6.0.2 = _6 - _6;
_9 = _8;
_3 = _9 as i64;
_10.fld1.2 = _14.2 ^ _14.2;
_2 = !_12.0.1;
_4 = _8;
_10.fld6.0.2 = _6 * _6;
Call(_10.fld1.3 = core::intrinsics::transmute(_9), ReturnTo(bb4), UnwindUnreachable())
}
bb7 = {
_17.1 = _1;
_17.2 = !_17.0;
_17.2 = _12.0.2 > _12.0.2;
_12.1 = core::ptr::addr_of_mut!(_10.fld0);
_6 = -_10.fld6.0.2;
_12.0.2 = 2919005345_u32 as f32;
Goto(bb8)
}
bb8 = {
_14.3 = -_6;
_16 = _12.0.1;
_3 = -_10.fld1.2;
_15.0 = [3408903751_u32,3879501733_u32,778891761_u32,3537236299_u32,1995804169_u32,2344377530_u32,3705908861_u32];
_10.fld6 = (_12.0, _12.1);
_10.fld6.0.2 = -_14.3;
_7 = [191_u8];
_14.3 = -_6;
_12.0.0 = _10.fld6.0.0;
_15.0 = [92847157_u32,3642851567_u32,2138044925_u32,704313367_u32,3782081048_u32,2077721982_u32,3448870168_u32];
_17.1 = _1;
_10.fld1.3 = _6 + _14.3;
Goto(bb9)
}
bb9 = {
_20 = (_12.0.1,);
_17 = (true, _4, false);
_12.0 = (_10.fld6.0.0, _2, _10.fld6.0.2);
_10.fld1.3 = -_6;
_4 = _1;
_21 = (_17.0, _1, _17.2);
_12.1 = core::ptr::addr_of_mut!(_10.fld0);
_4 = _8;
_10.fld6.0.0 = !_12.0.0;
_1 = _17.1;
_12.0.0 = _10.fld6.0.0;
_10.fld6.0.0 = !_12.0.0;
_10.fld0 = 4329_u16 as u128;
_3 = !_10.fld1.2;
_2 = !_10.fld2;
_8 = _17.1;
_18 = [_12.0.0,_12.0.0];
_17.2 = _21.2;
_10.fld3 = core::ptr::addr_of!(_23);
_14.3 = 2983492693_u32 as f32;
_17.1 = _8;
_14.0 = core::ptr::addr_of!(_23);
_12.1 = core::ptr::addr_of_mut!(_10.fld0);
_10.fld6.0.2 = _10.fld1.3;
_10.fld6.1 = core::ptr::addr_of_mut!(_10.fld0);
Goto(bb10)
}
bb10 = {
_5 = [175_u8,100_u8,114_u8,113_u8,66_u8,137_u8,154_u8];
_15.0 = [2795398244_u32,2627602161_u32,2887798051_u32,902129481_u32,891347554_u32,3816222082_u32,3256195453_u32];
_12.1 = core::ptr::addr_of_mut!(_10.fld0);
_24 = !_2;
_21 = (_17.2, _9, _17.2);
_5 = [164_u8,230_u8,117_u8,13_u8,164_u8,113_u8,136_u8];
_15.0 = [3935376793_u32,1370577601_u32,3153896199_u32,2818317124_u32,3121362114_u32,54019313_u32,3595983090_u32];
_8 = _1;
_14.2 = 148687263780404286279785100051189642451_i128 as i64;
_9 = _8;
_20.0 = _10.fld2;
_14.3 = -_10.fld6.0.2;
_21 = (_17.0, _1, _17.2);
_10.fld1.0 = core::ptr::addr_of!(_23);
_8 = _21.1;
Goto(bb11)
}
bb11 = {
_17 = (_21.0, _9, _21.2);
_10.fld0 = 3748786669_u32 as u128;
_17.2 = _17.0 ^ _17.0;
_8 = _4;
_21 = _17;
_29 = [166_u8];
_26 = _10.fld0 + _10.fld0;
_14.2 = 5_usize as i64;
Goto(bb12)
}
bb12 = {
_12.0.2 = _10.fld1.3 - _6;
_20 = (_10.fld6.0.1,);
_3 = _14.2;
_12 = _10.fld6;
_25 = _20.0;
_17 = (_21.0, _4, _21.2);
_10.fld6.1 = core::ptr::addr_of_mut!(_26);
_28 = ((-5518_i16), 1764717841_u32);
_14.1 = core::ptr::addr_of!(_28);
_17 = (_21.0, _1, _21.0);
_2 = -_12.0.1;
_17.0 = _21.1 != _17.1;
_14.1 = core::ptr::addr_of!(_28);
_14.0 = core::ptr::addr_of!(_23);
_10.fld1 = _14;
_12.0 = (_10.fld6.0.0, _16, _6);
_14.2 = _10.fld1.2 + _3;
_27 = Adt48::Variant0 { fld0: _10.fld1 };
_14.2 = -_10.fld1.2;
_7 = [102_u8];
place!(Field::<(*const u32, *const (i16, u32), i64, f32)>(Variant(_27, 0), 0)).0 = core::ptr::addr_of!(_28.1);
_5 = [176_u8,191_u8,253_u8,2_u8,85_u8,48_u8,48_u8];
SetDiscriminant(_27, 0);
_20 = (_24,);
Goto(bb13)
}
bb13 = {
_14.2 = _26 as i64;
_14.0 = core::ptr::addr_of!(_23);
_1 = _9;
place!(Field::<(*const u32, *const (i16, u32), i64, f32)>(Variant(_27, 0), 0)).1 = core::ptr::addr_of!(_28);
Call(_23 = core::intrinsics::bswap(_28.1), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
_31 = [_21.2];
_33 = _20;
_30 = [_28.1,_28.1,_28.1,_28.1,_28.1,_28.1,_28.1];
_12 = (_10.fld6.0, _10.fld6.1);
_5 = [163_u8,203_u8,11_u8,212_u8,151_u8,6_u8,96_u8];
_12.0.2 = -_10.fld1.3;
_18 = [_10.fld6.0.0,_10.fld6.0.0];
place!(Field::<(*const u32, *const (i16, u32), i64, f32)>(Variant(_27, 0), 0)) = _14;
match _28.1 {
1764717841 => bb16,
_ => bb15
}
}
bb15 = {
_2 = 9223372036854775807_isize;
_10.fld6.0 = (18388663045065288447_u64, _2, _6);
_10.fld6.0.2 = (-78_i8) as f32;
_10.fld6.0.0 = 1591476341482113532_u64;
_10.fld2 = _10.fld6.0.0 as isize;
_2 = 750044995_i32 as isize;
_6 = _10.fld6.0.2 + _10.fld6.0.2;
_9 = _1;
_2 = _10.fld6.0.1 | _10.fld2;
_11 = [false];
_2 = !_10.fld2;
_3 = 3078_i16 as i64;
_8 = _1;
_13 = [94_i8,(-46_i8)];
_7 = [63_u8];
_10.fld1.2 = !_3;
_10.fld4 = core::ptr::addr_of_mut!(_3);
_12.0.2 = -_6;
_2 = _10.fld6.0.1 + _10.fld2;
_4 = _8;
Call(_13 = fn9(_10.fld2, _10.fld2, _1, _1, _10.fld4, _10.fld6.0.0, _5, _10.fld6.0, _3, _5, _2, _10.fld2, _6, _2), ReturnTo(bb2), UnwindUnreachable())
}
bb16 = {
_12.0.1 = _25;
_10.fld6.0.2 = _10.fld6.0.0 as f32;
_31 = _11;
_14 = _10.fld1;
_12 = (_10.fld6.0, _10.fld6.1);
_29 = [73_u8];
_10.fld0 = _26;
_23 = _28.1;
_13 = [42_i8,14_i8];
SetDiscriminant(_27, 0);
_10.fld1.1 = _14.1;
_10.fld2 = 1388506126_i32 as isize;
match _23 {
0 => bb17,
1 => bb18,
2 => bb19,
1764717841 => bb21,
_ => bb20
}
}
bb17 = {
_17 = (_21.0, _9, _21.2);
_10.fld0 = 3748786669_u32 as u128;
_17.2 = _17.0 ^ _17.0;
_8 = _4;
_21 = _17;
_29 = [166_u8];
_26 = _10.fld0 + _10.fld0;
_14.2 = 5_usize as i64;
Goto(bb12)
}
bb18 = {
_12.1 = core::ptr::addr_of_mut!(_10.fld0);
_10.fld6.0 = (_12.0.0, _2, _6);
_11 = [true];
_10.fld6.0.2 = _6 - _6;
_9 = _8;
_3 = _9 as i64;
_10.fld1.2 = _14.2 ^ _14.2;
_2 = !_12.0.1;
_4 = _8;
_10.fld6.0.2 = _6 * _6;
Call(_10.fld1.3 = core::intrinsics::transmute(_9), ReturnTo(bb4), UnwindUnreachable())
}
bb19 = {
_12.1 = core::ptr::addr_of_mut!(_10.fld0);
_10.fld6.0 = (_12.0.0, _2, _6);
_11 = [true];
_10.fld6.0.2 = _6 - _6;
_9 = _8;
_3 = _9 as i64;
_10.fld1.2 = _14.2 ^ _14.2;
_2 = !_12.0.1;
_4 = _8;
_10.fld6.0.2 = _6 * _6;
Call(_10.fld1.3 = core::intrinsics::transmute(_9), ReturnTo(bb4), UnwindUnreachable())
}
bb20 = {
_9 = _4;
_10.fld6.0.0 = _12.0.0 - _12.0.0;
_2 = _10.fld2 - _10.fld6.0.1;
_4 = _8;
_1 = _4;
_12.0.2 = -_6;
_10.fld6.0.0 = (-10359_i16) as u64;
_16 = _10.fld6.0.1;
_14.3 = _10.fld6.0.2 * _10.fld6.0.2;
_10.fld6.0.1 = !_2;
_9 = _8;
Goto(bb5)
}
bb21 = {
_10.fld1.0 = _14.0;
Goto(bb22)
}
bb22 = {
_37.1 = _17.1;
_12.0.1 = -_10.fld2;
_17.2 = !_17.0;
match _28.1 {
0 => bb7,
1 => bb23,
2 => bb24,
3 => bb25,
1764717841 => bb27,
_ => bb26
}
}
bb23 = {
_10.fld1.0 = _14.0;
Goto(bb22)
}
bb24 = {
_9 = _4;
_10.fld6.0.0 = _12.0.0 - _12.0.0;
_2 = _10.fld2 - _10.fld6.0.1;
_4 = _8;
_1 = _4;
_12.0.2 = -_6;
_10.fld6.0.0 = (-10359_i16) as u64;
_16 = _10.fld6.0.1;
_14.3 = _10.fld6.0.2 * _10.fld6.0.2;
_10.fld6.0.1 = !_2;
_9 = _8;
Goto(bb5)
}
bb25 = {
_31 = [_21.2];
_33 = _20;
_30 = [_28.1,_28.1,_28.1,_28.1,_28.1,_28.1,_28.1];
_12 = (_10.fld6.0, _10.fld6.1);
_5 = [163_u8,203_u8,11_u8,212_u8,151_u8,6_u8,96_u8];
_12.0.2 = -_10.fld1.3;
_18 = [_10.fld6.0.0,_10.fld6.0.0];
place!(Field::<(*const u32, *const (i16, u32), i64, f32)>(Variant(_27, 0), 0)) = _14;
match _28.1 {
1764717841 => bb16,
_ => bb15
}
}
bb26 = {
_12.1 = core::ptr::addr_of_mut!(_10.fld0);
_10.fld6.0 = (_12.0.0, _2, _6);
_11 = [true];
_10.fld6.0.2 = _6 - _6;
_9 = _8;
_3 = _9 as i64;
_10.fld1.2 = _14.2 ^ _14.2;
_2 = !_12.0.1;
_4 = _8;
_10.fld6.0.2 = _6 * _6;
Call(_10.fld1.3 = core::intrinsics::transmute(_9), ReturnTo(bb4), UnwindUnreachable())
}
bb27 = {
_37.2 = _21.2;
_10.fld6.1 = core::ptr::addr_of_mut!(_10.fld0);
_4 = _21.1;
_21.0 = _10.fld1.3 < _6;
_40 = 3302370496446066960_usize as isize;
_10.fld1.1 = _14.1;
_41.1.0 = _28.0 - _28.0;
_8 = _4;
_35 = (_12.0.0, _33.0, _14.3);
_38.0 = (_10.fld6.0.0, _10.fld2, _14.3);
_37 = _21;
_12.0.0 = !_10.fld6.0.0;
_10.fld3 = core::ptr::addr_of!(_23);
_9 = _8;
place!(Field::<(*const u32, *const (i16, u32), i64, f32)>(Variant(_27, 0), 0)).0 = _14.0;
_3 = !_14.2;
_12.1 = _10.fld6.1;
Call(_14 = fn16(_10.fld6.0, _10.fld1, _38.0), ReturnTo(bb28), UnwindUnreachable())
}
bb28 = {
_19 = core::ptr::addr_of!(_41);
_10.fld6.0.2 = -_6;
_36 = _14.2 as i32;
_10.fld6.0.0 = _12.0.0;
_44.0 = _36 as i16;
_38.0.1 = _33.0;
_12.0.2 = _6;
_35.1 = -_24;
_29 = [159_u8];
_4 = _1;
match _28.1 {
0 => bb13,
1 => bb27,
2 => bb29,
3 => bb30,
1764717841 => bb32,
_ => bb31
}
}
bb29 = {
_14.3 = -_6;
_16 = _12.0.1;
_3 = -_10.fld1.2;
_15.0 = [3408903751_u32,3879501733_u32,778891761_u32,3537236299_u32,1995804169_u32,2344377530_u32,3705908861_u32];
_10.fld6 = (_12.0, _12.1);
_10.fld6.0.2 = -_14.3;
_7 = [191_u8];
_14.3 = -_6;
_12.0.0 = _10.fld6.0.0;
_15.0 = [92847157_u32,3642851567_u32,2138044925_u32,704313367_u32,3782081048_u32,2077721982_u32,3448870168_u32];
_17.1 = _1;
_10.fld1.3 = _6 + _14.3;
Goto(bb9)
}
bb30 = {
_20 = (_12.0.1,);
_17 = (true, _4, false);
_12.0 = (_10.fld6.0.0, _2, _10.fld6.0.2);
_10.fld1.3 = -_6;
_4 = _1;
_21 = (_17.0, _1, _17.2);
_12.1 = core::ptr::addr_of_mut!(_10.fld0);
_4 = _8;
_10.fld6.0.0 = !_12.0.0;
_1 = _17.1;
_12.0.0 = _10.fld6.0.0;
_10.fld6.0.0 = !_12.0.0;
_10.fld0 = 4329_u16 as u128;
_3 = !_10.fld1.2;
_2 = !_10.fld2;
_8 = _17.1;
_18 = [_12.0.0,_12.0.0];
_17.2 = _21.2;
_10.fld3 = core::ptr::addr_of!(_23);
_14.3 = 2983492693_u32 as f32;
_17.1 = _8;
_14.0 = core::ptr::addr_of!(_23);
_12.1 = core::ptr::addr_of_mut!(_10.fld0);
_10.fld6.0.2 = _10.fld1.3;
_10.fld6.1 = core::ptr::addr_of_mut!(_10.fld0);
Goto(bb10)
}
bb31 = {
_12.0.1 = _25;
_10.fld6.0.2 = _10.fld6.0.0 as f32;
_31 = _11;
_14 = _10.fld1;
_12 = (_10.fld6.0, _10.fld6.1);
_29 = [73_u8];
_10.fld0 = _26;
_23 = _28.1;
_13 = [42_i8,14_i8];
SetDiscriminant(_27, 0);
_10.fld1.1 = _14.1;
_10.fld2 = 1388506126_i32 as isize;
match _23 {
0 => bb17,
1 => bb18,
2 => bb19,
1764717841 => bb21,
_ => bb20
}
}
bb32 = {
_12.0 = (_38.0.0, _20.0, _35.2);
Goto(bb33)
}
bb33 = {
_37.2 = _37.0;
place!(Field::<(*const u32, *const (i16, u32), i64, f32)>(Variant(_27, 0), 0)) = (_10.fld1.0, _14.1, _10.fld1.2, _10.fld1.3);
_41.0 = 90_u8 as isize;
_23 = _41.1.0 as u32;
place!(Field::<(*const u32, *const (i16, u32), i64, f32)>(Variant(_27, 0), 0)) = _10.fld1;
SetDiscriminant(_27, 1);
_19 = core::ptr::addr_of!((*_19));
(*_19).1.1 = _23 | _23;
_44 = ((*_19).1.0, (*_19).1.1);
_12 = _10.fld6;
_38.0.1 = _10.fld6.0.1 | _41.0;
_37.2 = !_37.0;
place!(Field::<i8>(Variant(_27, 1), 3)) = (-58_i8);
_6 = _12.0.2;
_38.0.2 = -_10.fld6.0.2;
_3 = 48379_u16 as i64;
_10.fld0 = _36 as u128;
match _28.0 {
0 => bb7,
340282366920938463463374607431768205938 => bb35,
_ => bb34
}
}
bb34 = {
_12.0.2 = _10.fld1.3 - _6;
_20 = (_10.fld6.0.1,);
_3 = _14.2;
_12 = _10.fld6;
_25 = _20.0;
_17 = (_21.0, _4, _21.2);
_10.fld6.1 = core::ptr::addr_of_mut!(_26);
_28 = ((-5518_i16), 1764717841_u32);
_14.1 = core::ptr::addr_of!(_28);
_17 = (_21.0, _1, _21.0);
_2 = -_12.0.1;
_17.0 = _21.1 != _17.1;
_14.1 = core::ptr::addr_of!(_28);
_14.0 = core::ptr::addr_of!(_23);
_10.fld1 = _14;
_12.0 = (_10.fld6.0.0, _16, _6);
_14.2 = _10.fld1.2 + _3;
_27 = Adt48::Variant0 { fld0: _10.fld1 };
_14.2 = -_10.fld1.2;
_7 = [102_u8];
place!(Field::<(*const u32, *const (i16, u32), i64, f32)>(Variant(_27, 0), 0)).0 = core::ptr::addr_of!(_28.1);
_5 = [176_u8,191_u8,253_u8,2_u8,85_u8,48_u8,48_u8];
SetDiscriminant(_27, 0);
_20 = (_24,);
Goto(bb13)
}
bb35 = {
_37 = (_21.0, _1, _21.0);
_25 = -_10.fld2;
_5 = [96_u8,234_u8,75_u8,96_u8,79_u8,168_u8,118_u8];
_27 = Adt48::Variant1 { fld0: _11,fld1: 5_usize,fld2: _10.fld6.0.1,fld3: (-26_i8),fld4: _15.0 };
_17.1 = _4;
_14 = (_10.fld3, _10.fld1.1, _10.fld1.2, _6);
_16 = _24;
(*_19).0 = _12.0.2 as isize;
_6 = (*_19).1.0 as f32;
_7 = _29;
_47.1 = _28.1;
_10.fld6.0.2 = _38.0.2;
_42 = _17.1;
_7 = _29;
place!(Field::<usize>(Variant(_27, 1), 1)) = !1759865697271667500_usize;
_47 = ((*_19).1.0, _41.1.1);
_4 = _9;
_10.fld6.0 = (_12.0.0, (*_19).0, _12.0.2);
_13 = [(-35_i8),(-62_i8)];
_10.fld6 = _12;
place!(Field::<usize>(Variant(_27, 1), 1)) = _10.fld6.0.0 as usize;
_19 = core::ptr::addr_of!((*_19));
_39.0 = _47.0;
_45 = [165_u8];
match _28.0 {
0 => bb36,
1 => bb37,
340282366920938463463374607431768205938 => bb39,
_ => bb38
}
}
bb36 = {
_12.0.2 = _10.fld1.3 - _6;
_20 = (_10.fld6.0.1,);
_3 = _14.2;
_12 = _10.fld6;
_25 = _20.0;
_17 = (_21.0, _4, _21.2);
_10.fld6.1 = core::ptr::addr_of_mut!(_26);
_28 = ((-5518_i16), 1764717841_u32);
_14.1 = core::ptr::addr_of!(_28);
_17 = (_21.0, _1, _21.0);
_2 = -_12.0.1;
_17.0 = _21.1 != _17.1;
_14.1 = core::ptr::addr_of!(_28);
_14.0 = core::ptr::addr_of!(_23);
_10.fld1 = _14;
_12.0 = (_10.fld6.0.0, _16, _6);
_14.2 = _10.fld1.2 + _3;
_27 = Adt48::Variant0 { fld0: _10.fld1 };
_14.2 = -_10.fld1.2;
_7 = [102_u8];
place!(Field::<(*const u32, *const (i16, u32), i64, f32)>(Variant(_27, 0), 0)).0 = core::ptr::addr_of!(_28.1);
_5 = [176_u8,191_u8,253_u8,2_u8,85_u8,48_u8,48_u8];
SetDiscriminant(_27, 0);
_20 = (_24,);
Goto(bb13)
}
bb37 = {
_37.2 = _37.0;
place!(Field::<(*const u32, *const (i16, u32), i64, f32)>(Variant(_27, 0), 0)) = (_10.fld1.0, _14.1, _10.fld1.2, _10.fld1.3);
_41.0 = 90_u8 as isize;
_23 = _41.1.0 as u32;
place!(Field::<(*const u32, *const (i16, u32), i64, f32)>(Variant(_27, 0), 0)) = _10.fld1;
SetDiscriminant(_27, 1);
_19 = core::ptr::addr_of!((*_19));
(*_19).1.1 = _23 | _23;
_44 = ((*_19).1.0, (*_19).1.1);
_12 = _10.fld6;
_38.0.1 = _10.fld6.0.1 | _41.0;
_37.2 = !_37.0;
place!(Field::<i8>(Variant(_27, 1), 3)) = (-58_i8);
_6 = _12.0.2;
_38.0.2 = -_10.fld6.0.2;
_3 = 48379_u16 as i64;
_10.fld0 = _36 as u128;
match _28.0 {
0 => bb7,
340282366920938463463374607431768205938 => bb35,
_ => bb34
}
}
bb38 = {
_12.1 = core::ptr::addr_of_mut!(_10.fld0);
_10.fld6.0 = (_12.0.0, _2, _6);
_11 = [true];
_10.fld6.0.2 = _6 - _6;
_9 = _8;
_3 = _9 as i64;
_10.fld1.2 = _14.2 ^ _14.2;
_2 = !_12.0.1;
_4 = _8;
_10.fld6.0.2 = _6 * _6;
Call(_10.fld1.3 = core::intrinsics::transmute(_9), ReturnTo(bb4), UnwindUnreachable())
}
bb39 = {
_10.fld6.0.0 = !_35.0;
_38 = (_12.0, _12.1);
_24 = (*_19).0;
_17.1 = _37.1;
_10.fld2 = _24;
(*_19).2 = _12.1;
_38.1 = (*_19).2;
_43 = 112_u8 as f64;
_37.1 = _9;
_49 = _4;
(*_19).1.0 = Field::<usize>(Variant(_27, 1), 1) as i16;
place!(Field::<isize>(Variant(_27, 1), 2)) = (*_19).0 * (*_19).0;
_20.0 = Field::<isize>(Variant(_27, 1), 2) * Field::<isize>(Variant(_27, 1), 2);
_38.0.0 = _12.0.0 - _10.fld6.0.0;
_51 = [73074321165309670720287933355797649817_i128,(-139416939304731906761087289646612706726_i128),164650032485843965323130888689925554323_i128,7136272280948473766872527979284807575_i128,(-74458461979651508887510344051421174128_i128),130611254696170661980381235139676665250_i128,(-106345232302522615020013636205296260243_i128),(-154018929708936615122488791651515162526_i128)];
_14.0 = core::ptr::addr_of!(_47.1);
_51 = [(-157816704489714108107916274985588022095_i128),(-92637350699575691584543917165610116064_i128),(-12099794169745226837621576520734081374_i128),29805576219308085312956671480342915941_i128,169165037370444133456676523114490946445_i128,17310664006067354341886537315672017689_i128,(-26750111095111997925396116167298342158_i128),115236812941542187224954914380740068018_i128];
_2 = _44.0 as isize;
_50 = !_21.0;
_12.1 = core::ptr::addr_of_mut!(_26);
_37.0 = !_37.2;
Goto(bb40)
}
bb40 = {
_48 = core::ptr::addr_of!((*_19));
_18 = [_38.0.0,_38.0.0];
_28.1 = _35.0 as u32;
_47.1 = (*_19).1.1 * _41.1.1;
_17.2 = !_37.2;
_33.0 = _36 as isize;
_10.fld6 = _38;
_10.fld5 = core::ptr::addr_of!(_41);
_35.1 = (*_48).0;
(*_19).1.1 = _43 as u32;
_24 = _10.fld2 >> _20.0;
(*_48).1 = _44;
_40 = (*_48).0 >> (*_48).1.0;
_55 = _4;
_7 = _29;
_42 = _1;
_10.fld4 = core::ptr::addr_of_mut!(_10.fld1.2);
_2 = (*_48).0 + _24;
_2 = _24 & Field::<isize>(Variant(_27, 1), 2);
_29 = _45;
_32 = (-123_i8) as u32;
match _28.0 {
0 => bb11,
1 => bb7,
340282366920938463463374607431768205938 => bb41,
_ => bb23
}
}
bb41 = {
_7 = [179_u8];
(*_19) = (_10.fld2, _44, _12.1);
_31 = Field::<[bool; 1]>(Variant(_27, 1), 0);
(*_19).1.1 = _44.1 << (*_19).1.0;
_5 = [187_u8,59_u8,165_u8,132_u8,93_u8,65_u8,77_u8];
_37 = _17;
_53.0 = !_50;
_8 = _42;
_32 = _44.1;
_10.fld6 = (_12.0, _41.2);
_26 = _38.0.0 as u128;
_3 = _36 as i64;
_14.2 = _10.fld1.2;
_53.1 = _42;
_23 = _47.1 + (*_19).1.1;
_10.fld0 = !_26;
Goto(bb42)
}
bb42 = {
_12.0.2 = _10.fld6.0.2;
_39 = (_41.1.0, _28.1);
_47 = (_39.0, (*_48).1.1);
_11 = [_17.2];
_10.fld1.3 = _10.fld6.0.2 + _38.0.2;
(*_19).2 = core::ptr::addr_of_mut!(_10.fld0);
_52 = -_2;
_51 = [155698997901089322731618542967623595686_i128,100991179493566219271265571825375678104_i128,141426095860491339799914827581656314761_i128,(-121723330389165207694286917014153193423_i128),(-9088762175328889459871935361395723837_i128),(-93662374307202589528257522025650939193_i128),73341213230180381076722270004494610624_i128,65168539621994042263108937303131376471_i128];
_21 = (_17.2, _53.1, _53.0);
(*_19).0 = _24 * _24;
(*_48).0 = _52;
place!(Field::<i8>(Variant(_27, 1), 3)) = _10.fld0 as i8;
SetDiscriminant(_27, 2);
_41.1.0 = _36 as i16;
_10.fld6.0.1 = 55018_u16 as isize;
Goto(bb43)
}
bb43 = {
_8 = _53.1;
_61 = 117_i8 << (*_19).0;
place!(Field::<bool>(Variant(_27, 2), 0)) = !_17.2;
_17 = (_21.0, _53.1, _53.0);
_64 = !_52;
_10.fld6.0 = (_38.0.0, (*_48).0, _10.fld1.3);
_8 = _1;
_66 = (_47.0, _47.1);
Goto(bb44)
}
bb44 = {
_65 = _10.fld1.3 as i32;
_37.2 = !_21.0;
_10.fld0 = _26;
_5 = [112_u8,148_u8,40_u8,151_u8,7_u8,121_u8,146_u8];
_50 = !_21.2;
_61 = (-14_i8);
(*_19) = (_52, _47, _12.1);
_36 = !_65;
_20 = _33;
_12.0 = _10.fld6.0;
_68 = Adt51::Variant1 { fld0: _37,fld1: _10.fld1.3,fld2: (*_48).0,fld3: _18,fld4: (*_48).2 };
_69.1 = core::ptr::addr_of!((*_48).1);
_10.fld0 = _26;
SetDiscriminant(_68, 1);
_33.0 = (*_19).0 + _2;
_70 = _21;
_37.1 = _8;
_56 = [_39.1,(*_19).1.1,_23,(*_19).1.1,_32,_23,_23];
(*_48) = (_33.0, _44, _38.1);
_71 = (_39.0, _66.1);
_14.3 = _12.0.2;
_41.1 = (_39.0, _47.1);
_3 = 7559950273154878197_usize as i64;
place!(Field::<[u64; 2]>(Variant(_68, 1), 3)) = [_10.fld6.0.0,_35.0];
_1 = _55;
_40 = _33.0;
_19 = _10.fld5;
_21 = (_17.2, _70.1, _50);
match _61 {
340282366920938463463374607431768211442 => bb46,
_ => bb45
}
}
bb45 = {
_48 = core::ptr::addr_of!((*_19));
_18 = [_38.0.0,_38.0.0];
_28.1 = _35.0 as u32;
_47.1 = (*_19).1.1 * _41.1.1;
_17.2 = !_37.2;
_33.0 = _36 as isize;
_10.fld6 = _38;
_10.fld5 = core::ptr::addr_of!(_41);
_35.1 = (*_48).0;
(*_19).1.1 = _43 as u32;
_24 = _10.fld2 >> _20.0;
(*_48).1 = _44;
_40 = (*_48).0 >> (*_48).1.0;
_55 = _4;
_7 = _29;
_42 = _1;
_10.fld4 = core::ptr::addr_of_mut!(_10.fld1.2);
_2 = (*_48).0 + _24;
_2 = _24 & Field::<isize>(Variant(_27, 1), 2);
_29 = _45;
_32 = (-123_i8) as u32;
match _28.0 {
0 => bb11,
1 => bb7,
340282366920938463463374607431768205938 => bb41,
_ => bb23
}
}
bb46 = {
place!(Field::<f32>(Variant(_68, 1), 1)) = _61 as f32;
_41.1.1 = _32 + _23;
_10.fld1.1 = _69.1;
_10.fld3 = core::ptr::addr_of!(_66.1);
_70.1 = _53.1;
_57 = (*_48).0 | (*_48).0;
match _28.0 {
0 => bb47,
340282366920938463463374607431768205938 => bb49,
_ => bb48
}
}
bb47 = {
_7 = [179_u8];
(*_19) = (_10.fld2, _44, _12.1);
_31 = Field::<[bool; 1]>(Variant(_27, 1), 0);
(*_19).1.1 = _44.1 << (*_19).1.0;
_5 = [187_u8,59_u8,165_u8,132_u8,93_u8,65_u8,77_u8];
_37 = _17;
_53.0 = !_50;
_8 = _42;
_32 = _44.1;
_10.fld6 = (_12.0, _41.2);
_26 = _38.0.0 as u128;
_3 = _36 as i64;
_14.2 = _10.fld1.2;
_53.1 = _42;
_23 = _47.1 + (*_19).1.1;
_10.fld0 = !_26;
Goto(bb42)
}
bb48 = {
_2 = 9223372036854775807_isize;
_10.fld6.0 = (18388663045065288447_u64, _2, _6);
_10.fld6.0.2 = (-78_i8) as f32;
_10.fld6.0.0 = 1591476341482113532_u64;
_10.fld2 = _10.fld6.0.0 as isize;
_2 = 750044995_i32 as isize;
_6 = _10.fld6.0.2 + _10.fld6.0.2;
_9 = _1;
_2 = _10.fld6.0.1 | _10.fld2;
_11 = [false];
_2 = !_10.fld2;
_3 = 3078_i16 as i64;
_8 = _1;
_13 = [94_i8,(-46_i8)];
_7 = [63_u8];
_10.fld1.2 = !_3;
_10.fld4 = core::ptr::addr_of_mut!(_3);
_12.0.2 = -_6;
_2 = _10.fld6.0.1 + _10.fld2;
_4 = _8;
Call(_13 = fn9(_10.fld2, _10.fld2, _1, _1, _10.fld4, _10.fld6.0.0, _5, _10.fld6.0, _3, _5, _2, _10.fld2, _6, _2), ReturnTo(bb2), UnwindUnreachable())
}
bb49 = {
_54 = !_2;
(*_48).1.0 = _39.0 - _28.0;
(*_19) = (_40, _71, _38.1);
_21 = (_70.2, _37.1, _70.0);
_17.2 = !_21.0;
(*_19).0 = _43 as isize;
_38.1 = (*_48).2;
_47.0 = 17322900477647482450_usize as i16;
(*_19).1.1 = _43 as u32;
_35.1 = _52 ^ _33.0;
(*_48).1.1 = _32;
(*_48).0 = 3723347398364258558_usize as isize;
_11 = [_21.0];
place!(Field::<(bool, char, bool)>(Variant(_68, 1), 0)) = (_37.2, _55, _17.2);
_39.0 = (*_19).1.0;
Goto(bb50)
}
bb50 = {
_12.0.0 = _52 as u64;
Goto(bb51)
}
bb51 = {
(*_19).1.0 = _39.0;
_69.2 = _10.fld1.2;
place!(Field::<f32>(Variant(_68, 1), 1)) = _38.0.2 - _12.0.2;
_1 = _70.1;
Call(_28.0 = core::intrinsics::transmute((*_48).1.0), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
_12 = (_35, (*_19).2);
place!(Field::<isize>(Variant(_68, 1), 2)) = _64;
_26 = !_10.fld0;
(*_19).1 = _28;
_18 = [_35.0,_38.0.0];
_10.fld5 = core::ptr::addr_of!(_41);
_72 = _1;
_7 = [204_u8];
_14.1 = core::ptr::addr_of!(_71);
_23 = _47.1 | _32;
_53.2 = _70.0;
_38.0.2 = _23 as f32;
_22 = _64 == _2;
Goto(bb53)
}
bb53 = {
_21 = Field::<(bool, char, bool)>(Variant(_68, 1), 0);
Goto(bb54)
}
bb54 = {
(*_19) = (_40, _44, _10.fld6.1);
(*_19).0 = -_12.0.1;
_22 = !_53.2;
place!(Field::<(bool, char, bool)>(Variant(_68, 1), 0)).0 = Field::<(bool, char, bool)>(Variant(_68, 1), 0).2 & _53.0;
_41.1.0 = _39.0 | _28.0;
_61 = 17301671407109468403_usize as i8;
_7 = _45;
_10.fld6.0.2 = Field::<f32>(Variant(_68, 1), 1);
(*_19).2 = core::ptr::addr_of_mut!(_10.fld0);
_9 = _70.1;
Goto(bb55)
}
bb55 = {
_72 = _1;
_63 = Adt56::Variant0 { fld0: _66 };
_12.0.1 = (*_19).0 << _36;
(*_48).0 = _35.1 | _40;
_72 = _9;
(*_48).1.0 = _10.fld1.2 as i16;
_41.0 = !_40;
_39.0 = _38.0.2 as i16;
SetDiscriminant(_63, 0);
_55 = _9;
_14.2 = _61 as i64;
_39 = (*_48).1;
_20.0 = _10.fld6.0.1;
_36 = _65 ^ _65;
_10.fld5 = core::ptr::addr_of!(_41);
_28.0 = _44.0;
_41.1.0 = -_44.0;
(*_19) = (Field::<isize>(Variant(_68, 1), 2), _71, _10.fld6.1);
_39.0 = _33.0 as i16;
_38 = (_35, (*_19).2);
_21.2 = !_17.2;
Goto(bb56)
}
bb56 = {
(*_48).1.1 = _44.1;
_21.0 = _37.2;
_28.0 = _39.0 << (*_48).1.1;
place!(Field::<f32>(Variant(_68, 1), 1)) = -_10.fld6.0.2;
place!(Field::<f32>(Variant(_68, 1), 1)) = _10.fld6.0.2 - _14.3;
_38.0 = _12.0;
_41.1.1 = _47.1 | _44.1;
_87.0 = _10.fld6.0.0;
Call((*_19).1.0 = fn17(_21, _52), ReturnTo(bb57), UnwindUnreachable())
}
bb57 = {
_39.0 = -_71.0;
place!(Field::<(i16, u32)>(Variant(_63, 0), 0)).0 = !_28.0;
_40 = _21.2 as isize;
_38.1 = _41.2;
place!(Field::<*mut u128>(Variant(_68, 1), 4)) = core::ptr::addr_of_mut!(_83);
(*_19).1.0 = (*_19).1.1 as i16;
(*_19).1 = _28;
_12.0.2 = -Field::<f32>(Variant(_68, 1), 1);
(*_19).0 = -_40;
_39 = ((*_48).1.0, _32);
SetDiscriminant(_68, 2);
Goto(bb58)
}
bb58 = {
(*_19).1.0 = _28.0;
_82 = _51;
_78 = _12.0.2;
place!(Field::<(*const (i16, u32), u64)>(Variant(_68, 2), 3)).1 = _35.0;
_77.0 = _28.0;
_57 = !_20.0;
_70.1 = _8;
_12.0.2 = -_10.fld6.0.2;
place!(Field::<f64>(Variant(_68, 2), 1)) = 1162_u16 as f64;
_12.0.0 = _87.0;
(*_19) = (_35.1, _39, _10.fld6.1);
place!(Field::<[u64; 2]>(Variant(_68, 2), 5)) = [_12.0.0,_38.0.0];
_6 = _78 - _12.0.2;
Goto(bb59)
}
bb59 = {
_12 = _10.fld6;
_62 = _6 + _6;
_47.0 = !_39.0;
_38.0 = _35;
place!(Field::<bool>(Variant(_68, 2), 0)) = _77.0 != (*_48).1.0;
_69.1 = core::ptr::addr_of!(_28);
_36 = _65;
place!(Field::<bool>(Variant(_27, 2), 0)) = Field::<bool>(Variant(_68, 2), 0);
(*_48).2 = core::ptr::addr_of_mut!(_80);
_94.2 = _43;
_96.2 = 9375_u16 as f32;
(*_48).1 = _47;
_49 = _21.1;
_22 = !Field::<bool>(Variant(_68, 2), 0);
_47.1 = _41.1.1 * _44.1;
_101.2 = !Field::<bool>(Variant(_68, 2), 0);
_37.2 = !Field::<bool>(Variant(_68, 2), 0);
(*_48) = (_57, _47, _10.fld6.1);
_10.fld6.0.2 = -_12.0.2;
_47 = (*_19).1;
_39.1 = (*_48).1.1;
(*_19).2 = core::ptr::addr_of_mut!(_26);
Call(_61 = core::intrinsics::transmute(Field::<bool>(Variant(_68, 2), 0)), ReturnTo(bb60), UnwindUnreachable())
}
bb60 = {
_78 = _10.fld1.3;
(*_19) = (_10.fld6.0.1, _28, _38.1);
(*_19).0 = -_24;
_10.fld6.0.0 = !_12.0.0;
_41.1.1 = !_71.1;
_91 = [_47.1,_71.1,_47.1,_41.1.1,_39.1,_47.1,(*_48).1.1];
(*_48).1 = _39;
_82 = _51;
place!(Field::<*const [u8; 1]>(Variant(_68, 2), 6)) = core::ptr::addr_of!(_45);
(*_19).2 = _12.1;
_21.2 = !_50;
(*_19).0 = _57 * _20.0;
_10.fld3 = _14.0;
(*_48).1.0 = _71.0;
_77.0 = !_47.0;
_75 = 22631_u16 as f64;
Goto(bb61)
}
bb61 = {
_103 = (_22, _8, _22);
_21.2 = !_70.2;
_96.1 = !_12.0.1;
_14.0 = core::ptr::addr_of!(_28.1);
_105 = Field::<(*const (i16, u32), u64)>(Variant(_68, 2), 3).1 * Field::<(*const (i16, u32), u64)>(Variant(_68, 2), 3).1;
_86 = _4;
_106.0 = _70.1 <= _53.1;
_10.fld1.0 = _10.fld3;
place!(Field::<(i16, u32)>(Variant(_63, 0), 0)) = (*_48).1;
_8 = _37.1;
_38.1 = core::ptr::addr_of_mut!(_10.fld0);
_107 = (_38.0.0, _54, _96.2);
_96 = _38.0;
_57 = !_10.fld6.0.1;
_101.1 = _86;
place!(Field::<(*const (i16, u32), u64)>(Variant(_68, 2), 3)).1 = _35.0;
_63 = Adt56::Variant0 { fld0: _28 };
_36 = _65;
_89 = Field::<[u64; 2]>(Variant(_68, 2), 5);
Goto(bb62)
}
bb62 = {
_10.fld0 = !_26;
_87.2 = -_62;
_33.0 = Field::<(i16, u32)>(Variant(_63, 0), 0).0 as isize;
_44 = (Field::<(i16, u32)>(Variant(_63, 0), 0).0, _32);
_12.0 = (Field::<(*const (i16, u32), u64)>(Variant(_68, 2), 3).1, _20.0, _62);
_33 = (_64,);
_8 = _9;
_94.1 = core::ptr::addr_of!(_37.1);
(*_19) = (_107.1, _28, _38.1);
place!(Field::<(i16, u32)>(Variant(_63, 0), 0)).1 = _55 as u32;
_97 = _75 * _75;
_85 = !_65;
_106 = _37;
_9 = _101.1;
_47.0 = _61 as i16;
_67 = _89;
_96 = (_35.0, _40, _12.0.2);
_92 = _70.2;
_88 = _14.3 as u8;
(*_19).1.1 = _40 as u32;
_22 = !_50;
_53.0 = _101.2;
_81 = [_92];
_14 = (_10.fld3, _10.fld1.1, _10.fld1.2, _62);
Goto(bb63)
}
bb63 = {
RET = core::ptr::addr_of!(_88);
_15.1 = core::ptr::addr_of_mut!(_94);
_38.1 = core::ptr::addr_of_mut!(_80);
_104 = [_61,_61];
_21.0 = !_103.0;
_94.1 = core::ptr::addr_of!(_17.1);
_51 = [6201473798061255102945549544284263298_i128,(-88901029023524007797600157013310582013_i128),66813020703884602561514329636809511128_i128,154698181001392143083004032896538984454_i128,52001206387706264279977415348559465099_i128,142836185509379086453513698585237149807_i128,(-161423315289683724772381942184007258735_i128),(-144301313645460718147920318728597384335_i128)];
(*_48).2 = core::ptr::addr_of_mut!(_10.fld0);
_10.fld6.0.2 = -_62;
_37.0 = (*_19).1.0 != _28.0;
Goto(bb64)
}
bb64 = {
Call(_113 = dump_var(4_usize, 4_usize, Move(_4), 20_usize, Move(_20), 13_usize, Move(_13), 17_usize, Move(_17)), ReturnTo(bb65), UnwindUnreachable())
}
bb65 = {
Call(_113 = dump_var(4_usize, 9_usize, Move(_9), 53_usize, Move(_53), 37_usize, Move(_37), 85_usize, Move(_85)), ReturnTo(bb66), UnwindUnreachable())
}
bb66 = {
Call(_113 = dump_var(4_usize, 106_usize, Move(_106), 104_usize, Move(_104), 16_usize, Move(_16), 30_usize, Move(_30)), ReturnTo(bb67), UnwindUnreachable())
}
bb67 = {
Call(_113 = dump_var(4_usize, 31_usize, Move(_31), 21_usize, Move(_21), 61_usize, Move(_61), 105_usize, Move(_105)), ReturnTo(bb68), UnwindUnreachable())
}
bb68 = {
Call(_113 = dump_var(4_usize, 52_usize, Move(_52), 2_usize, Move(_2), 70_usize, Move(_70), 65_usize, Move(_65)), ReturnTo(bb69), UnwindUnreachable())
}
bb69 = {
Call(_113 = dump_var(4_usize, 86_usize, Move(_86), 39_usize, Move(_39), 45_usize, Move(_45), 44_usize, Move(_44)), ReturnTo(bb70), UnwindUnreachable())
}
bb70 = {
Call(_113 = dump_var(4_usize, 50_usize, Move(_50), 47_usize, Move(_47), 1_usize, Move(_1), 29_usize, Move(_29)), ReturnTo(bb71), UnwindUnreachable())
}
bb71 = {
Call(_113 = dump_var(4_usize, 18_usize, Move(_18), 64_usize, Move(_64), 26_usize, Move(_26), 114_usize, _114), ReturnTo(bb72), UnwindUnreachable())
}
bb72 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn5(mut _1: char,mut _2: i64,mut _3: isize,mut _4: i64,mut _5: i64,mut _6: char,mut _7: char,mut _8: isize) -> [u8; 7] {
mir! {
type RET = [u8; 7];
let _9: isize;
let _10: (isize,);
let _11: bool;
let _12: f32;
let _13: [u32; 7];
let _14: u16;
let _15: bool;
let _16: f32;
let _17: *const char;
let _18: i128;
let _19: [u8; 7];
let _20: f32;
let _21: [u8; 1];
let _22: isize;
let _23: f32;
let _24: bool;
let _25: usize;
let _26: i16;
let _27: [i8; 2];
let _28: f32;
let _29: f32;
let _30: (bool, char, bool);
let _31: f64;
let _32: (bool, char, bool);
let _33: (isize,);
let _34: ();
let _35: ();
{
_2 = _4 & _4;
RET = [207_u8,173_u8,103_u8,133_u8,117_u8,163_u8,136_u8];
RET = [39_u8,175_u8,97_u8,56_u8,145_u8,48_u8,143_u8];
RET = [135_u8,25_u8,161_u8,135_u8,228_u8,204_u8,38_u8];
_9 = !_8;
_12 = (-14638_i16) as f32;
_9 = 191_u8 as isize;
_10.0 = _8 * _3;
_11 = true;
Call(_12 = fn6(_10, _10.0, RET, RET, _8, RET, _1, _8, _6, _10.0, _11, _10.0), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_5 = -_2;
_13 = [2755974947_u32,396977352_u32,1612326795_u32,2039707423_u32,2007629777_u32,732807802_u32,4024281786_u32];
_5 = _4;
_1 = _7;
_12 = 47753_u16 as f32;
_1 = _6;
_11 = false ^ false;
_2 = -_4;
Goto(bb2)
}
bb2 = {
_2 = (-1060208693_i32) as i64;
_7 = _1;
_7 = _6;
_9 = _8 ^ _10.0;
_1 = _6;
_1 = _7;
_14 = 21622_u16 - 64164_u16;
_9 = -_3;
Goto(bb3)
}
bb3 = {
_7 = _6;
_14 = 55307_u16;
RET = [79_u8,219_u8,101_u8,210_u8,110_u8,253_u8,125_u8];
RET = [37_u8,5_u8,105_u8,135_u8,67_u8,135_u8,197_u8];
match _14 {
0 => bb4,
1 => bb5,
2 => bb6,
3 => bb7,
4 => bb8,
55307 => bb10,
_ => bb9
}
}
bb4 = {
_2 = (-1060208693_i32) as i64;
_7 = _1;
_7 = _6;
_9 = _8 ^ _10.0;
_1 = _6;
_1 = _7;
_14 = 21622_u16 - 64164_u16;
_9 = -_3;
Goto(bb3)
}
bb5 = {
_5 = -_2;
_13 = [2755974947_u32,396977352_u32,1612326795_u32,2039707423_u32,2007629777_u32,732807802_u32,4024281786_u32];
_5 = _4;
_1 = _7;
_12 = 47753_u16 as f32;
_1 = _6;
_11 = false ^ false;
_2 = -_4;
Goto(bb2)
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_5 = -_4;
_17 = core::ptr::addr_of!(_6);
_10 = (_9,);
_15 = _11 ^ _11;
_18 = 24287537653110774866708528902435546031_i128;
_19 = [251_u8,144_u8,176_u8,164_u8,202_u8,69_u8,65_u8];
RET = [168_u8,64_u8,223_u8,203_u8,101_u8,95_u8,163_u8];
_11 = !_15;
_16 = 55_i8 as f32;
RET = _19;
_15 = !_11;
_11 = _15;
_5 = 27461_i16 as i64;
_9 = _3 & _3;
(*_17) = _1;
(*_17) = _1;
_20 = _14 as f32;
_1 = (*_17);
_23 = _16;
RET = _19;
(*_17) = _7;
_15 = _11 ^ _11;
_13 = [690903419_u32,2213163268_u32,3356810273_u32,1085073712_u32,4193330175_u32,2773685158_u32,1167813771_u32];
_8 = _10.0 ^ _3;
Goto(bb11)
}
bb11 = {
_22 = _3;
_20 = -_16;
_13 = [3533473521_u32,1029455623_u32,2188538353_u32,901557415_u32,611103977_u32,3409469295_u32,689382750_u32];
_18 = _10.0 as i128;
_15 = _11;
_6 = _7;
_22 = (-63708686_i32) as isize;
_20 = _23 - _12;
_1 = _7;
Call(_26 = core::intrinsics::bswap((-26351_i16)), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
_17 = core::ptr::addr_of!(_1);
RET = _19;
_22 = _8 + _8;
_22 = !_9;
RET = [230_u8,137_u8,132_u8,159_u8,115_u8,72_u8,214_u8];
_22 = _10.0 & _9;
_9 = _22 << _22;
_27 = [0_i8,120_i8];
_1 = _7;
(*_17) = _7;
_20 = -_12;
_14 = !41924_u16;
_14 = 76_u8 as u16;
_15 = _11 | _11;
_11 = _18 > _18;
_9 = _3 + _10.0;
_26 = -368_i16;
_22 = 231437418417483056153736577609166237371_u128 as isize;
_30.1 = (*_17);
_4 = _18 as i64;
_2 = 9589532989306417383_u64 as i64;
Goto(bb13)
}
bb13 = {
(*_17) = _6;
_30 = (_15, (*_17), _15);
_10.0 = _8 << _9;
_21 = [209_u8];
_10 = (_3,);
_5 = _4 >> _14;
_30.2 = _8 < _9;
_1 = _7;
_31 = _2 as f64;
_31 = _14 as f64;
_30.0 = _11;
_25 = 3_usize;
_20 = _12 * _23;
_1 = _30.1;
_28 = -_20;
_32 = _30;
_4 = _13[_25] as i64;
_20 = _28 - _23;
_22 = !_9;
(*_17) = _32.1;
_30.2 = !_15;
_18 = 10865756414550673136_u64 as i128;
_32 = (_11, (*_17), _30.0);
_16 = _20;
match _13[_25] {
0 => bb10,
1 => bb9,
2 => bb3,
3 => bb4,
4 => bb12,
5 => bb6,
6 => bb14,
901557415 => bb16,
_ => bb15
}
}
bb14 = {
_7 = _6;
_14 = 55307_u16;
RET = [79_u8,219_u8,101_u8,210_u8,110_u8,253_u8,125_u8];
RET = [37_u8,5_u8,105_u8,135_u8,67_u8,135_u8,197_u8];
match _14 {
0 => bb4,
1 => bb5,
2 => bb6,
3 => bb7,
4 => bb8,
55307 => bb10,
_ => bb9
}
}
bb15 = {
Return()
}
bb16 = {
(*_17) = _6;
Goto(bb17)
}
bb17 = {
Call(_34 = dump_var(5_usize, 11_usize, Move(_11), 10_usize, Move(_10), 25_usize, Move(_25), 13_usize, Move(_13)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_34 = dump_var(5_usize, 3_usize, Move(_3), 26_usize, Move(_26), 1_usize, Move(_1), 27_usize, Move(_27)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_34 = dump_var(5_usize, 19_usize, Move(_19), 2_usize, Move(_2), 30_usize, Move(_30), 35_usize, _35), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn6(mut _1: (isize,),mut _2: isize,mut _3: [u8; 7],mut _4: [u8; 7],mut _5: isize,mut _6: [u8; 7],mut _7: char,mut _8: isize,mut _9: char,mut _10: isize,mut _11: bool,mut _12: isize) -> f32 {
mir! {
type RET = f32;
let _13: i128;
let _14: ([u32; 7], *mut ([i8; 2], *const char, f64));
let _15: *const [u8; 1];
let _16: i128;
let _17: bool;
let _18: char;
let _19: u32;
let _20: (bool, char, bool);
let _21: i64;
let _22: i8;
let _23: f32;
let _24: isize;
let _25: *const u32;
let _26: f32;
let _27: [bool; 1];
let _28: u128;
let _29: isize;
let _30: u16;
let _31: usize;
let _32: isize;
let _33: i16;
let _34: *mut u16;
let _35: f32;
let _36: [u32; 7];
let _37: isize;
let _38: ();
let _39: ();
{
_8 = _2;
RET = 10327444605648393281_usize as f32;
_6 = [9_u8,126_u8,110_u8,174_u8,243_u8,48_u8,248_u8];
_11 = false;
_1.0 = _10 >> _2;
_9 = _7;
_4 = _6;
_7 = _9;
_1 = (_2,);
RET = (-51_i8) as f32;
_4 = [223_u8,186_u8,229_u8,231_u8,79_u8,128_u8,128_u8];
_3 = [211_u8,99_u8,53_u8,50_u8,20_u8,214_u8,5_u8];
_1 = (_5,);
_13 = -(-79148035084015810942028364866613475448_i128);
_2 = -_1.0;
_11 = !true;
_2 = -_8;
_13 = _12 as i128;
_14.0 = [1405059595_u32,755014227_u32,1879636239_u32,2222273275_u32,3909886144_u32,1233105547_u32,491910766_u32];
_5 = 129_u8 as isize;
RET = 83_i8 as f32;
_7 = _9;
_16 = _13;
_10 = _8;
_12 = 7090061189222233863_i64 as isize;
Goto(bb1)
}
bb1 = {
_11 = !true;
Call(_16 = fn7(_14.0, _8, _12, _5, _1.0, _8, _14.0, _9, _5, _3, _1, _6, _6, _1.0), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_10 = _2 >> _1.0;
_7 = _9;
_7 = _9;
_10 = _8;
_17 = !_11;
_9 = _7;
RET = 15538_u16 as f32;
_3 = [196_u8,123_u8,64_u8,215_u8,156_u8,248_u8,205_u8];
_11 = !_17;
_17 = !_11;
_9 = _7;
_8 = _5 ^ _10;
Goto(bb3)
}
bb3 = {
_8 = !_5;
_8 = !_1.0;
_3 = _6;
_1 = (_8,);
_20 = (_17, _9, _17);
_8 = _12 | _12;
RET = 5540595986970616355_usize as f32;
RET = 225_u8 as f32;
_20.2 = !_17;
_5 = 3713350219_u32 as isize;
_19 = (-18934_i16) as u32;
_12 = _1.0 | _1.0;
_14.0 = [_19,_19,_19,_19,_19,_19,_19];
_3 = [168_u8,131_u8,45_u8,104_u8,127_u8,127_u8,183_u8];
_3 = [84_u8,252_u8,177_u8,27_u8,180_u8,19_u8,45_u8];
_4 = [203_u8,208_u8,91_u8,52_u8,59_u8,137_u8,115_u8];
_18 = _20.1;
_19 = 1735730943_u32;
_20.0 = _11;
_18 = _7;
_22 = 3810330928303579587_usize as i8;
match _19 {
0 => bb2,
1 => bb4,
1735730943 => bb6,
_ => bb5
}
}
bb4 = {
_10 = _2 >> _1.0;
_7 = _9;
_7 = _9;
_10 = _8;
_17 = !_11;
_9 = _7;
RET = 15538_u16 as f32;
_3 = [196_u8,123_u8,64_u8,215_u8,156_u8,248_u8,205_u8];
_11 = !_17;
_17 = !_11;
_9 = _7;
_8 = _5 ^ _10;
Goto(bb3)
}
bb5 = {
_11 = !true;
Call(_16 = fn7(_14.0, _8, _12, _5, _1.0, _8, _14.0, _9, _5, _3, _1, _6, _6, _1.0), ReturnTo(bb2), UnwindUnreachable())
}
bb6 = {
_17 = _20.2;
_9 = _20.1;
_14.0 = [_19,_19,_19,_19,_19,_19,_19];
_20.2 = _20.0;
_6 = _3;
_6 = [80_u8,231_u8,40_u8,71_u8,56_u8,239_u8,219_u8];
_17 = _13 == _13;
_17 = !_20.2;
Goto(bb7)
}
bb7 = {
_11 = _17;
_12 = _10 - _10;
_7 = _18;
_22 = (-117_i8);
_11 = _2 >= _1.0;
_17 = !_20.2;
_8 = -_2;
_23 = -RET;
_23 = (-1333887178_i32) as f32;
_11 = _12 > _8;
_21 = 985643954093130232_u64 as i64;
_21 = !(-4784028056094310242_i64);
_5 = _2 * _1.0;
_1.0 = -_8;
_13 = !_16;
_13 = _16 ^ _16;
_10 = -_12;
_26 = _2 as f32;
_6 = [61_u8,135_u8,75_u8,220_u8,25_u8,13_u8,125_u8];
RET = (-1716338753_i32) as f32;
_27 = [_11];
_20.0 = _5 == _1.0;
match _19 {
0 => bb5,
1 => bb2,
2 => bb6,
3 => bb4,
1735730943 => bb9,
_ => bb8
}
}
bb8 = {
_17 = _20.2;
_9 = _20.1;
_14.0 = [_19,_19,_19,_19,_19,_19,_19];
_20.2 = _20.0;
_6 = _3;
_6 = [80_u8,231_u8,40_u8,71_u8,56_u8,239_u8,219_u8];
_17 = _13 == _13;
_17 = !_20.2;
Goto(bb7)
}
bb9 = {
_20.2 = !_20.0;
_30 = 34470_u16;
_24 = !_8;
_3 = _6;
_9 = _7;
_10 = -_12;
_26 = RET;
_3 = [33_u8,225_u8,82_u8,247_u8,152_u8,186_u8,22_u8];
_11 = _9 >= _7;
_16 = -_13;
_13 = _16;
_11 = _20.0 & _20.2;
RET = _26;
_3 = _6;
_14.0 = [_19,_19,_19,_19,_19,_19,_19];
Goto(bb10)
}
bb10 = {
_12 = _26 as isize;
_1.0 = (-14213_i16) as isize;
_16 = 223357260450341846394427112707017066470_u128 as i128;
_21 = (-5819177437181219935_i64) >> _10;
_4 = _3;
_20.2 = !_11;
_8 = 8952730446974441311_u64 as isize;
_6 = [239_u8,6_u8,76_u8,17_u8,34_u8,224_u8,168_u8];
_25 = core::ptr::addr_of!(_19);
match (*_25) {
0 => bb2,
1735730943 => bb12,
_ => bb11
}
}
bb11 = {
_20.2 = !_20.0;
_30 = 34470_u16;
_24 = !_8;
_3 = _6;
_9 = _7;
_10 = -_12;
_26 = RET;
_3 = [33_u8,225_u8,82_u8,247_u8,152_u8,186_u8,22_u8];
_11 = _9 >= _7;
_16 = -_13;
_13 = _16;
_11 = _20.0 & _20.2;
RET = _26;
_3 = _6;
_14.0 = [_19,_19,_19,_19,_19,_19,_19];
Goto(bb10)
}
bb12 = {
(*_25) = 3319265341_u32;
_5 = -_10;
_22 = (-114_i8);
_23 = _26;
_1.0 = _10 << _22;
_4 = [183_u8,134_u8,156_u8,24_u8,97_u8,183_u8,73_u8];
(*_25) = 1222674785_u32;
_20.0 = _20.2;
_1 = (_10,);
_34 = core::ptr::addr_of_mut!(_30);
_20 = (_11, _7, _11);
_1.0 = _30 as isize;
_20 = (_11, _9, _11);
_2 = _10 << _13;
_6 = _3;
RET = -_23;
_33 = (-30897_i16) | 23987_i16;
_17 = !_11;
_17 = _20.0 ^ _20.0;
_29 = _18 as isize;
_21 = _33 as i64;
RET = -_23;
_22 = !(-93_i8);
_31 = 1_usize;
_31 = 3794928831289935744_usize >> _3[_31];
match _30 {
0 => bb10,
1 => bb13,
34470 => bb15,
_ => bb14
}
}
bb13 = {
_17 = _20.2;
_9 = _20.1;
_14.0 = [_19,_19,_19,_19,_19,_19,_19];
_20.2 = _20.0;
_6 = _3;
_6 = [80_u8,231_u8,40_u8,71_u8,56_u8,239_u8,219_u8];
_17 = _13 == _13;
_17 = !_20.2;
Goto(bb7)
}
bb14 = {
_11 = !true;
Call(_16 = fn7(_14.0, _8, _12, _5, _1.0, _8, _14.0, _9, _5, _3, _1, _6, _6, _1.0), ReturnTo(bb2), UnwindUnreachable())
}
bb15 = {
(*_34) = 5623_u16;
Goto(bb16)
}
bb16 = {
Call(_38 = dump_var(6_usize, 27_usize, Move(_27), 21_usize, Move(_21), 24_usize, Move(_24), 12_usize, Move(_12)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_38 = dump_var(6_usize, 8_usize, Move(_8), 7_usize, Move(_7), 16_usize, Move(_16), 18_usize, Move(_18)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_38 = dump_var(6_usize, 22_usize, Move(_22), 33_usize, Move(_33), 29_usize, Move(_29), 19_usize, Move(_19)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_38 = dump_var(6_usize, 13_usize, Move(_13), 39_usize, _39, 39_usize, _39, 39_usize, _39), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn7(mut _1: [u32; 7],mut _2: isize,mut _3: isize,mut _4: isize,mut _5: isize,mut _6: isize,mut _7: [u32; 7],mut _8: char,mut _9: isize,mut _10: [u8; 7],mut _11: (isize,),mut _12: [u8; 7],mut _13: [u8; 7],mut _14: isize) -> i128 {
mir! {
type RET = i128;
let _15: ([u32; 7], *mut ([i8; 2], *const char, f64));
let _16: bool;
let _17: [bool; 1];
let _18: i128;
let _19: *const (isize, (i16, u32), *mut u128);
let _20: i32;
let _21: Adt64;
let _22: (i16, u32);
let _23: [i128; 8];
let _24: u32;
let _25: u32;
let _26: f32;
let _27: u128;
let _28: isize;
let _29: i64;
let _30: u8;
let _31: [u32; 7];
let _32: f32;
let _33: (isize,);
let _34: isize;
let _35: (isize,);
let _36: [u32; 7];
let _37: (i16, u32);
let _38: [u64; 2];
let _39: u128;
let _40: bool;
let _41: (isize,);
let _42: u128;
let _43: (i16, u32);
let _44: [u64; 2];
let _45: i8;
let _46: *mut ([i8; 2], *const char, f64);
let _47: ();
let _48: ();
{
_8 = '\u{c2d45}';
_8 = '\u{bb1d2}';
_13 = _10;
RET = 8519267401773376218_i64 as i128;
RET = (-125570740305737970239659896087608651154_i128);
_2 = _11.0;
_7 = _1;
_3 = _6 + _2;
_13 = [183_u8,131_u8,162_u8,197_u8,80_u8,99_u8,142_u8];
_11.0 = _14;
_15.0 = [2443428859_u32,3576967648_u32,2167584781_u32,2264257262_u32,2165841592_u32,1609776289_u32,4082626006_u32];
Call(_3 = fn8(_11, _8, _5, RET, _12, _11.0, _11, _11.0), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_6 = !_2;
_11.0 = !_14;
_12 = _13;
match RET {
0 => bb2,
1 => bb3,
214711626615200493223714711344159560302 => bb5,
_ => bb4
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
_11 = (_5,);
_8 = '\u{f5556}';
_17 = [true];
_9 = 410594213_u32 as isize;
_11 = (_6,);
_7 = [1949206453_u32,1429645260_u32,2763586991_u32,2382369563_u32,793802120_u32,3929164109_u32,1393209895_u32];
_6 = _8 as isize;
_14 = _3 * _6;
_9 = _2;
_12 = [151_u8,191_u8,180_u8,132_u8,11_u8,178_u8,14_u8];
_13 = [44_u8,231_u8,24_u8,15_u8,4_u8,40_u8,193_u8];
_3 = _6;
_11.0 = _14 ^ _14;
_22.1 = _8 as u32;
_17 = [true];
_20 = !(-865399364_i32);
_22 = ((-9248_i16), 2958188471_u32);
_20 = 150976658410940405162420150269659994297_u128 as i32;
_6 = _9 << _2;
_18 = -RET;
_11 = (_14,);
_9 = true as isize;
_1 = [_22.1,_22.1,_22.1,_22.1,_22.1,_22.1,_22.1];
_17 = [true];
_9 = _14;
match _22.0 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb6,
340282366920938463463374607431768202208 => bb8,
_ => bb7
}
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_16 = _2 != _6;
_7 = _15.0;
Goto(bb9)
}
bb9 = {
_4 = !_5;
_9 = _11.0 ^ _11.0;
_9 = _11.0;
_7 = [_22.1,_22.1,_22.1,_22.1,_22.1,_22.1,_22.1];
_16 = !true;
_17 = [_16];
_22.0 = (-32527_i16);
_10 = [63_u8,54_u8,225_u8,11_u8,230_u8,43_u8,112_u8];
_11.0 = -_4;
_25 = _22.1 - _22.1;
_12 = _10;
_25 = _22.1;
RET = -_18;
_22.0 = -(-31810_i16);
_16 = !false;
_6 = _14;
RET = 3_usize as i128;
_1 = [_25,_25,_22.1,_25,_25,_25,_22.1];
_12 = [3_u8,236_u8,184_u8,218_u8,218_u8,156_u8,31_u8];
_22.1 = !_25;
_7 = [_22.1,_25,_25,_25,_25,_22.1,_25];
_11.0 = _22.0 as isize;
_24 = (-7_i8) as u32;
Goto(bb10)
}
bb10 = {
_10 = [24_u8,211_u8,167_u8,64_u8,24_u8,169_u8,125_u8];
_11 = (_6,);
_27 = _22.0 as u128;
_25 = _24;
_18 = RET - RET;
_16 = _4 > _11.0;
_27 = 157416392254340877494429410971716164178_u128;
_12 = _13;
_4 = _6;
RET = _18;
_8 = '\u{e7ec9}';
_3 = _6 ^ _14;
_7 = [_22.1,_22.1,_25,_22.1,_22.1,_22.1,_25];
_22.0 = 5644910241446197253_i64 as i16;
_11.0 = -_4;
_18 = !RET;
_26 = 21_u8 as f32;
_15.0 = _1;
_16 = true;
Call(_3 = core::intrinsics::transmute(_2), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_32 = _26;
_27 = 63678552183276260865529459599469607_u128 - 276492864834444037691711049462788596947_u128;
_9 = _4;
_35.0 = 36035_u16 as isize;
_24 = _22.1;
_28 = _9;
_25 = !_22.1;
_2 = _11.0 - _28;
_22.0 = (-21247_i16);
_5 = _6;
_29 = (-91543322730723003_i64);
_18 = RET + RET;
_33 = (_2,);
_13 = _12;
_22.1 = _25;
_32 = (-2_i8) as f32;
_29 = 4_usize as i64;
_13 = [94_u8,200_u8,119_u8,168_u8,245_u8,16_u8,37_u8];
Goto(bb12)
}
bb12 = {
_26 = _32;
_11 = _33;
_23 = [_18,_18,_18,RET,_18,_18,RET,_18];
Goto(bb13)
}
bb13 = {
_37.0 = _6 as i16;
_34 = _6 * _4;
_12 = [24_u8,92_u8,37_u8,50_u8,165_u8,8_u8,80_u8];
_25 = _16 as u32;
_14 = _18 as isize;
_22 = (_37.0, _25);
_5 = _34 << _11.0;
_16 = true & true;
_30 = 22_u8 | 65_u8;
_37.1 = 2103956186080045800_u64 as u32;
_33 = (_2,);
_35 = (_11.0,);
_41 = (_33.0,);
_36 = _7;
_41 = (_14,);
_34 = !_9;
_22.0 = _30 as i16;
_11 = _33;
_38 = [7190526893329633274_u64,12255016273276502111_u64];
_18 = _29 as i128;
_34 = !_4;
_18 = 61998_u16 as i128;
Goto(bb14)
}
bb14 = {
_25 = _24 - _37.1;
_13 = [_30,_30,_30,_30,_30,_30,_30];
_37.1 = _30 as u32;
_3 = _5 * _33.0;
_22 = _37;
_24 = _37.1;
_10 = [_30,_30,_30,_30,_30,_30,_30];
_41 = (_4,);
_35.0 = -_28;
_22 = (_37.0, _25);
_12 = [_30,_30,_30,_30,_30,_30,_30];
_12 = [_30,_30,_30,_30,_30,_30,_30];
_12 = [_30,_30,_30,_30,_30,_30,_30];
_16 = _25 <= _22.1;
_13 = [_30,_30,_30,_30,_30,_30,_30];
_29 = _27 as i64;
_12 = [_30,_30,_30,_30,_30,_30,_30];
_20 = -(-910137237_i32);
_39 = !_27;
_14 = _30 as isize;
_25 = _22.1;
_20 = 0_usize as i32;
_10 = [_30,_30,_30,_30,_30,_30,_30];
_26 = _32 - _32;
Goto(bb15)
}
bb15 = {
Call(_47 = dump_var(7_usize, 2_usize, Move(_2), 3_usize, Move(_3), 7_usize, Move(_7), 34_usize, Move(_34)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_47 = dump_var(7_usize, 23_usize, Move(_23), 27_usize, Move(_27), 11_usize, Move(_11), 29_usize, Move(_29)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_47 = dump_var(7_usize, 17_usize, Move(_17), 41_usize, Move(_41), 38_usize, Move(_38), 6_usize, Move(_6)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_47 = dump_var(7_usize, 16_usize, Move(_16), 5_usize, Move(_5), 33_usize, Move(_33), 8_usize, Move(_8)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_47 = dump_var(7_usize, 22_usize, Move(_22), 48_usize, _48, 48_usize, _48, 48_usize, _48), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn8(mut _1: (isize,),mut _2: char,mut _3: isize,mut _4: i128,mut _5: [u8; 7],mut _6: isize,mut _7: (isize,),mut _8: isize) -> isize {
mir! {
type RET = isize;
let _9: bool;
let _10: (u64, isize, f32);
let _11: f32;
let _12: i16;
let _13: u64;
let _14: [i128; 8];
let _15: ();
let _16: ();
{
RET = 14416593731449129565_usize as isize;
_2 = '\u{9ec0d}';
Goto(bb1)
}
bb1 = {
_2 = '\u{3eb90}';
_9 = !false;
_9 = true | true;
_7.0 = _6;
RET = 940407881_u32 as isize;
RET = !_7.0;
_7.0 = _1.0 << _6;
_10.2 = 0_usize as f32;
_2 = '\u{de6b6}';
_1.0 = _6;
_7 = (_8,);
_7 = (RET,);
_6 = _8;
RET = -_1.0;
_1 = (_3,);
_11 = -_10.2;
_7.0 = !_8;
_12 = _11 as i16;
_10 = (2985710309160797858_u64, _8, _11);
_10.0 = 3910062516326748425_u64;
_6 = (-97_i8) as isize;
match _4 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
214711626615200493223714711344159560302 => bb8,
_ => bb7
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_10.1 = -_8;
_5 = [7_u8,94_u8,119_u8,3_u8,252_u8,14_u8,56_u8];
_10 = (10068663035841103329_u64, _3, _11);
RET = _9 as isize;
_10.0 = 5053974041999148055_u64 << _3;
_11 = -_10.2;
_1 = (_7.0,);
_7.0 = 3981592794_u32 as isize;
_10.1 = _1.0;
_7 = (_10.1,);
_10.0 = 13600669155758698777_u64;
_1.0 = _8 * _10.1;
match _4 {
0 => bb4,
1 => bb9,
2 => bb10,
3 => bb11,
4 => bb12,
214711626615200493223714711344159560302 => bb14,
_ => bb13
}
}
bb9 = {
Return()
}
bb10 = {
_2 = '\u{3eb90}';
_9 = !false;
_9 = true | true;
_7.0 = _6;
RET = 940407881_u32 as isize;
RET = !_7.0;
_7.0 = _1.0 << _6;
_10.2 = 0_usize as f32;
_2 = '\u{de6b6}';
_1.0 = _6;
_7 = (_8,);
_7 = (RET,);
_6 = _8;
RET = -_1.0;
_1 = (_3,);
_11 = -_10.2;
_7.0 = !_8;
_12 = _11 as i16;
_10 = (2985710309160797858_u64, _8, _11);
_10.0 = 3910062516326748425_u64;
_6 = (-97_i8) as isize;
match _4 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
214711626615200493223714711344159560302 => bb8,
_ => bb7
}
}
bb11 = {
Return()
}
bb12 = {
Return()
}
bb13 = {
Return()
}
bb14 = {
_8 = 105060172229641067555580912029722531587_u128 as isize;
_6 = _3;
_13 = _10.0;
_9 = !false;
_14 = [_4,_4,_4,_4,_4,_4,_4,_4];
RET = !_6;
_14 = [_4,_4,_4,_4,_4,_4,_4,_4];
_10.0 = _13;
_6 = (-7271581322912426370_i64) as isize;
RET = -_7.0;
_4 = 26745028208389395575676853516099031354_i128;
_7.0 = RET;
Goto(bb15)
}
bb15 = {
Call(_15 = dump_var(8_usize, 9_usize, Move(_9), 6_usize, Move(_6), 13_usize, Move(_13), 12_usize, Move(_12)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_15 = dump_var(8_usize, 1_usize, Move(_1), 14_usize, Move(_14), 16_usize, _16, 16_usize, _16), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn9(mut _1: isize,mut _2: isize,mut _3: char,mut _4: char,mut _5: *mut i64,mut _6: u64,mut _7: [u8; 7],mut _8: (u64, isize, f32),mut _9: i64,mut _10: [u8; 7],mut _11: isize,mut _12: isize,mut _13: f32,mut _14: isize) -> [i8; 2] {
mir! {
type RET = [i8; 2];
let _15: (bool, char, bool);
let _16: bool;
let _17: f32;
let _18: [u8; 7];
let _19: [i128; 8];
let _20: bool;
let _21: [bool; 1];
let _22: bool;
let _23: f64;
let _24: f32;
let _25: (*const (i16, u32), u64);
let _26: [i128; 8];
let _27: i8;
let _28: char;
let _29: f64;
let _30: (u64, isize, f32);
let _31: ((u64, isize, f32), *mut u128);
let _32: isize;
let _33: isize;
let _34: ((u64, isize, f32), *mut u128);
let _35: char;
let _36: Adt54;
let _37: [u32; 7];
let _38: u16;
let _39: [bool; 1];
let _40: (bool, char, bool);
let _41: Adt50;
let _42: i8;
let _43: i8;
let _44: ();
let _45: ();
{
_4 = _3;
_10 = _7;
_7 = _10;
_2 = 267000862010930174285479959917706479266_u128 as isize;
_15.2 = !false;
(*_5) = _9 << _11;
RET = [35_i8,89_i8];
_14 = !_11;
(*_5) = !_9;
(*_5) = _9;
_13 = _8.2;
_6 = _8.0 ^ _8.0;
_15.1 = _4;
_5 = core::ptr::addr_of_mut!((*_5));
_15 = (false, _4, false);
_14 = !_2;
_12 = !_8.1;
_6 = !_8.0;
_6 = (-1780247302_i32) as u64;
RET = [(-83_i8),114_i8];
_11 = -_2;
_9 = 2505081269_u32 as i64;
match _8.0 {
1591476341482113532 => bb2,
_ => bb1
}
}
bb1 = {
Return()
}
bb2 = {
_15.2 = _15.0;
_8.0 = !_6;
_6 = (-65_i8) as u64;
_6 = !_8.0;
_4 = _15.1;
_10 = _7;
RET = [55_i8,(-83_i8)];
(*_5) = 190_u8 as i64;
_16 = _15.0;
_1 = -_14;
_9 = -(*_5);
(*_5) = _9;
_8 = (_6, _14, _13);
(*_5) = _16 as i64;
_12 = (*_5) as isize;
_8.2 = (-125319878384225033503337690712529452160_i128) as f32;
_20 = !_15.2;
(*_5) = _9 + _9;
_7 = _10;
Call((*_5) = fn10(_7, _9, _20), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_8 = (_6, _11, _13);
_1 = !_14;
_20 = !_16;
_15.1 = _4;
Goto(bb4)
}
bb4 = {
_19 = [(-163117581499314884504821639524644889883_i128),(-140717302026209747119335979158172722339_i128),(-27109789709761825349840120993766941535_i128),86865301782621748262008110296218443968_i128,144739779187751724430460320583623443853_i128,52812199137850741963942451571719250714_i128,(-40808275861002563711542586199210410947_i128),(-42468433178120573515906689640618314677_i128)];
_21 = [_15.2];
_4 = _3;
_1 = _12 * _12;
_22 = !_15.0;
_15.0 = _20;
_12 = _1;
_15 = (_20, _4, _20);
_15.2 = !_20;
Call(_6 = core::intrinsics::bswap(_8.0), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
_12 = -_14;
(*_5) = _9;
_15.0 = _15.2 > _22;
_8.2 = _13;
_8.2 = _13;
_6 = _8.0 & _8.0;
_18 = [50_u8,174_u8,88_u8,53_u8,207_u8,8_u8,182_u8];
RET = [(-40_i8),120_i8];
_23 = 30406_u16 as f64;
_17 = _8.2;
_8.2 = (-94277217185116011484558933741966311792_i128) as f32;
(*_5) = _12 as i64;
_13 = _8.2;
_19 = [(-50167812330863302687019714121176135121_i128),(-26345499887993622967736900168901041196_i128),(-117598659291961963430459569591837161554_i128),(-56087795610843554379757866498824649927_i128),148454150420092123180041048959158180874_i128,109237340770448302066039074523396625034_i128,(-119576833891226525877942078224846069922_i128),58848106204394460749287136192742117201_i128];
_9 = (*_5);
_8.2 = _17 - _13;
_3 = _4;
Goto(bb6)
}
bb6 = {
_15.2 = !_15.0;
_24 = _13;
_8.0 = _6 ^ _6;
_22 = _20;
_25.1 = 270671306713930260980520951231217584339_u128 as u64;
_8.2 = _13;
_24 = _17 - _8.2;
_17 = _24 - _8.2;
_3 = _15.1;
_8.2 = _24 * _13;
_19 = [(-54004465375184455904250289249565235249_i128),(-137199096054256956681976375915158847717_i128),21477145931992288230394398097416284506_i128,102175910703705669946857319116738403735_i128,(-85805760580929436518792113413351586930_i128),(-160680516577312802175536839966887732647_i128),40551742384475059642732259771354532658_i128,69863655524798266097690911010695257512_i128];
_20 = !_15.2;
_10 = [246_u8,182_u8,17_u8,200_u8,136_u8,165_u8,69_u8];
_20 = !_15.0;
_20 = !_16;
_18 = _7;
_1 = !_2;
_13 = 1063533906_u32 as f32;
_17 = 65318_u16 as f32;
_3 = _4;
_22 = _20;
Goto(bb7)
}
bb7 = {
_21 = [_16];
_14 = 2682164477_u32 as isize;
(*_5) = _9;
_21 = [_15.0];
_22 = _20 ^ _15.0;
_17 = -_8.2;
_12 = -_2;
_2 = !_14;
_9 = (*_5);
_25.1 = _6 | _8.0;
Goto(bb8)
}
bb8 = {
_2 = _12;
(*_5) = 185463279774251132896979179550598086143_u128 as i64;
_22 = _15.0;
Goto(bb9)
}
bb9 = {
_14 = 1371600762_i32 as isize;
_8 = (_25.1, _2, _17);
_8.1 = (-742334698_i32) as isize;
RET = [(-106_i8),(-26_i8)];
_8 = (_25.1, _14, _17);
_26 = [91116667952827076764143168646452972799_i128,117261705685747016832971333432480665309_i128,(-109065514440485529912890872519684733735_i128),103151757921725074579888313012812029125_i128,137228859956266532815332442297333161596_i128,26464174449962130426047167039407272381_i128,(-32412226802808351470012224673142638854_i128),149266361857554568522723441208484038919_i128];
_11 = 3755279755_u32 as isize;
_9 = 4203_i16 as i64;
_6 = !_8.0;
RET = [40_i8,(-79_i8)];
(*_5) = -_9;
_19 = [(-120299890394504631948899429341925638877_i128),(-114625909023694733741403933624618295984_i128),(-21222541192824691721208485481880321738_i128),(-4884951515877996020487244868844099666_i128),(-11679737333839520110701332621545388526_i128),86217918041731091951877143752724336439_i128,(-59368447957954624063478452332586931656_i128),(-94023336293993943136572406346654462032_i128)];
_11 = 53_u8 as isize;
Goto(bb10)
}
bb10 = {
_3 = _4;
(*_5) = !_9;
_3 = _15.1;
_8.1 = _15.1 as isize;
_26 = [10207194469664779198562547837833526749_i128,166650764337661821317791891485225080080_i128,33440316183237998098417838789661469772_i128,(-115141582050368433507496548217521510217_i128),82573710871863284863861988293847931260_i128,(-131156793380618852436503100165160452457_i128),167851335129282401319270446167208052057_i128,(-141954221559842914500794521965413158181_i128)];
_23 = 291374740771478562888091708929181769235_u128 as f64;
_26 = [103699148672807632413775247337376435559_i128,(-73939571497105255230107441798815035370_i128),47219146609155962185980549463695365935_i128,(-98195117613336486472194668666295091118_i128),47482165046851315291036368210291999473_i128,43433542737871473664214434146443073852_i128,158291409700835743419663844379883774943_i128,(-141892472512792858941313609244352744532_i128)];
_17 = _13 - _13;
_14 = (-78_i8) as isize;
_28 = _15.1;
_29 = _23;
Goto(bb11)
}
bb11 = {
_1 = _2;
_8.1 = _17 as isize;
_10 = [221_u8,55_u8,113_u8,156_u8,213_u8,173_u8,65_u8];
_1 = -_2;
_30 = (_8.0, _1, _17);
Goto(bb12)
}
bb12 = {
RET = [84_i8,(-47_i8)];
_30 = _8;
_15.1 = _28;
_4 = _3;
_31.0 = (_8.0, _8.1, _30.2);
_31.0.1 = _14;
_5 = core::ptr::addr_of_mut!((*_5));
_27 = 51587_u16 as i8;
_21 = [_22];
_31.0.0 = _8.0;
_8.1 = _1 << _25.1;
RET = [_27,_27];
_5 = core::ptr::addr_of_mut!((*_5));
_6 = !_25.1;
_6 = _31.0.0 - _31.0.0;
_19 = [(-11649473137654003543210688045497650323_i128),88769638208842941024833640750484300189_i128,(-39564912255093531088380343397592099251_i128),151889950570636903644945223900387357603_i128,(-118045973319424996840310473770930898681_i128),(-129838627816403203526424365380022958193_i128),48599903747841791056274461958078869977_i128,(-42579025353583742077872375506222337322_i128)];
_23 = _29 - _29;
_31.0.1 = 98_u8 as isize;
_22 = _30.0 <= _6;
_8.2 = 1196206995_i32 as f32;
_31.0.0 = _30.0 >> _25.1;
_31.0 = (_25.1, _8.1, _30.2);
_10 = [157_u8,196_u8,203_u8,170_u8,114_u8,72_u8,15_u8];
_34.0.1 = _8.1 | _31.0.1;
_30 = _8;
_34.0 = (_6, _2, _31.0.2);
Call(_27 = core::intrinsics::bswap(119_i8), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
_9 = (*_5) ^ (*_5);
_31.0.1 = !_11;
_10 = _7;
_13 = -_31.0.2;
_30.2 = 49554_u16 as f32;
_3 = _4;
_23 = -_29;
_7 = _18;
_31.0.1 = _6 as isize;
(*_5) = -_9;
_31.0 = _8;
_15.1 = _4;
_30.2 = _13;
_7 = _10;
_8.1 = _11 ^ _30.1;
_20 = !_22;
_34.0.1 = -_1;
RET = [_27,_27];
_24 = _34.0.2 + _30.2;
_11 = _8.1;
_33 = _11;
_32 = _30.1;
_38 = 38033_u16 - 2884_u16;
RET = [_27,_27];
_15.1 = _28;
_15 = (_20, _3, _22);
Goto(bb14)
}
bb14 = {
_8.2 = _13;
_34.0 = (_30.0, _31.0.1, _24);
_16 = _2 <= _14;
_37 = [311145315_u32,2216414758_u32,3239136838_u32,938954703_u32,4031165890_u32,1893647099_u32,3353150575_u32];
_30.1 = 0_usize as isize;
_15.1 = _4;
_40 = _15;
_20 = !_16;
_8.0 = _23 as u64;
_3 = _4;
_28 = _3;
_20 = _8.0 == _34.0.0;
_22 = !_40.2;
_10 = [224_u8,20_u8,193_u8,36_u8,106_u8,134_u8,2_u8];
(*_5) = -_9;
_27 = 95_i8;
_9 = !(*_5);
_30.0 = (-83687867241565225119493055196078338689_i128) as u64;
_34.0.2 = _13 + _24;
_31.0.2 = 225_u8 as f32;
_32 = _31.0.1;
_34.0.0 = _6;
_8.0 = _30.0 ^ _6;
Goto(bb15)
}
bb15 = {
Call(_44 = dump_var(9_usize, 40_usize, Move(_40), 7_usize, Move(_7), 19_usize, Move(_19), 21_usize, Move(_21)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_44 = dump_var(9_usize, 9_usize, Move(_9), 28_usize, Move(_28), 10_usize, Move(_10), 20_usize, Move(_20)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_44 = dump_var(9_usize, 37_usize, Move(_37), 1_usize, Move(_1), 18_usize, Move(_18), 27_usize, Move(_27)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_44 = dump_var(9_usize, 14_usize, Move(_14), 45_usize, _45, 45_usize, _45, 45_usize, _45), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn10(mut _1: [u8; 7],mut _2: i64,mut _3: bool) -> i64 {
mir! {
type RET = i64;
let _4: i8;
let _5: bool;
let _6: [bool; 1];
let _7: [u32; 7];
let _8: u16;
let _9: bool;
let _10: u64;
let _11: isize;
let _12: u16;
let _13: *mut ([i8; 2], *const char, f64);
let _14: isize;
let _15: [u64; 2];
let _16: i128;
let _17: [i8; 2];
let _18: (isize,);
let _19: f32;
let _20: Adt64;
let _21: isize;
let _22: char;
let _23: f64;
let _24: [i128; 8];
let _25: [u32; 7];
let _26: (bool, char, bool);
let _27: i128;
let _28: isize;
let _29: i16;
let _30: (i16, u32);
let _31: [i128; 8];
let _32: (isize,);
let _33: char;
let _34: (i16, u32);
let _35: Adt54;
let _36: (bool, char, bool);
let _37: f64;
let _38: f64;
let _39: u64;
let _40: i32;
let _41: Adt60;
let _42: Adt61;
let _43: isize;
let _44: (isize,);
let _45: [u32; 7];
let _46: *const *const (isize, (i16, u32), *mut u128);
let _47: u128;
let _48: ();
let _49: ();
{
RET = _2;
_4 = 3_usize as i8;
_3 = false;
_1 = [55_u8,175_u8,70_u8,12_u8,215_u8,210_u8,180_u8];
_5 = !_3;
_2 = (-23107_i16) as i64;
_1 = [67_u8,233_u8,61_u8,188_u8,39_u8,192_u8,201_u8];
_6 = [_3];
RET = _2;
_3 = _5;
_1 = [137_u8,99_u8,99_u8,254_u8,240_u8,32_u8,97_u8];
_5 = _4 > _4;
_3 = _5;
_8 = 33381_u16 - 34544_u16;
RET = _2;
_7 = [1704188_u32,510292243_u32,2803013383_u32,1008856921_u32,4249075929_u32,1185959041_u32,15809314_u32];
_7 = [1286685243_u32,2548427028_u32,4236909715_u32,3742534319_u32,2139106153_u32,1578281910_u32,3431393136_u32];
_3 = _5;
Goto(bb1)
}
bb1 = {
_6 = [_3];
_5 = _3;
_1 = [18_u8,53_u8,187_u8,17_u8,106_u8,236_u8,25_u8];
_1 = [144_u8,229_u8,94_u8,64_u8,249_u8,226_u8,149_u8];
Goto(bb2)
}
bb2 = {
RET = !_2;
_7 = [3692409659_u32,3400434948_u32,68178540_u32,602367379_u32,3025261798_u32,4104106502_u32,804378531_u32];
RET = _2 & _2;
_3 = _5;
RET = _2 & _2;
RET = _2;
_9 = _5;
_7 = [1602704472_u32,2054517510_u32,3826267119_u32,428700743_u32,816463413_u32,3306169954_u32,3639537221_u32];
RET = !_2;
_14 = (-121_isize);
_14 = -9223372036854775807_isize;
_2 = _4 as i64;
_11 = _5 as isize;
_9 = _5;
_10 = !1119589434220799851_u64;
_4 = !55_i8;
_1 = [51_u8,61_u8,52_u8,9_u8,209_u8,125_u8,101_u8];
_7 = [2471701911_u32,2066179595_u32,2614622020_u32,797497671_u32,3831492345_u32,2293583970_u32,4062406605_u32];
_1 = [107_u8,232_u8,147_u8,158_u8,134_u8,117_u8,194_u8];
_10 = _11 as u64;
_2 = 17876696602911343854246062731595860635_i128 as i64;
_2 = -RET;
_10 = _4 as u64;
RET = _2 + _2;
Goto(bb3)
}
bb3 = {
_12 = _8;
_12 = _8 & _8;
_1 = [92_u8,154_u8,121_u8,253_u8,213_u8,155_u8,43_u8];
_10 = !8421948949505400755_u64;
_18 = (_11,);
_15 = [_10,_10];
_18.0 = -_11;
_17 = [_4,_4];
_15 = [_10,_10];
RET = _18.0 as i64;
_11 = _18.0;
_10 = 5048096721209101498_u64 << _18.0;
_8 = _12 & _12;
_9 = _5;
_16 = 36428259797078496594132017209546702259_i128 - 45527931821091840272061165155188858332_i128;
_12 = _8 | _8;
_19 = _16 as f32;
_7 = [1750031277_u32,4048212698_u32,3937388316_u32,3717938889_u32,3440532970_u32,1144863079_u32,1248362570_u32];
_6 = [_3];
RET = _2 << _8;
_7 = [2659810823_u32,226157605_u32,812836985_u32,2743658772_u32,2464207809_u32,449589967_u32,1358872644_u32];
_14 = _11;
_2 = -RET;
_18 = (_11,);
_21 = !_14;
_9 = _2 <= _2;
Call(_2 = fn11(_5, _21, _11, _14, _19, _8, _9, RET), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_15 = [_10,_10];
_2 = 2_u8 as i64;
_16 = !(-104802750432650592053266283034829644405_i128);
_9 = _10 == _10;
_7 = [2442008478_u32,358063651_u32,2073549710_u32,2676966474_u32,1041860144_u32,827626987_u32,3060571425_u32];
_10 = 10089459638367851168_u64 >> _12;
_5 = _12 == _12;
_16 = _19 as i128;
_19 = _10 as f32;
_15 = [_10,_10];
Goto(bb5)
}
bb5 = {
_15 = [_10,_10];
_22 = '\u{c70f9}';
_19 = 9892387135148824979_usize as f32;
_14 = _10 as isize;
_17 = [_4,_4];
RET = _2;
_18 = (_14,);
_22 = '\u{5c2f4}';
Call(RET = core::intrinsics::bswap(_2), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
_5 = _9 | _9;
_18 = (_14,);
_5 = _9;
_12 = 4549_i16 as u16;
_12 = _8;
_9 = _10 >= _10;
_9 = _8 < _8;
_18.0 = _14 + _14;
_14 = !_18.0;
_17 = [_4,_4];
_22 = '\u{9365b}';
_3 = !_5;
_18 = (_14,);
_6 = [_9];
_14 = 210_u8 as isize;
_10 = 7017700321158742154_u64 >> _18.0;
Goto(bb7)
}
bb7 = {
_23 = _10 as f64;
Goto(bb8)
}
bb8 = {
_4 = 48_i8 * 21_i8;
_24 = [_16,_16,_16,_16,_16,_16,_16,_16];
_23 = (-16173_i16) as f64;
_3 = _8 <= _8;
_19 = 2023793718_i32 as f32;
_14 = 456369745_i32 as isize;
_26 = (_3, _22, _5);
_22 = _26.1;
_26.0 = _9;
_14 = _12 as isize;
_9 = _5;
_28 = _18.0 - _18.0;
_3 = _26.0 ^ _26.0;
_27 = _16;
Goto(bb9)
}
bb9 = {
_30 = ((-6917_i16), 1236975383_u32);
_14 = _2 as isize;
RET = 3_usize as i64;
_5 = _26.0;
RET = _2 | _2;
_24 = [_27,_27,_16,_16,_27,_16,_16,_16];
_26 = (_5, _22, _9);
_33 = _26.1;
_25 = [_30.1,_30.1,_30.1,_30.1,_30.1,_30.1,_30.1];
_32 = (_28,);
_26.1 = _22;
_10 = 394036386750682472_u64;
_28 = _32.0;
_18 = _32;
_31 = [_16,_27,_16,_16,_27,_16,_16,_27];
_22 = _33;
_30.0 = (-10039_i16);
_3 = !_5;
RET = -_2;
Call(_5 = fn12(_18.0, _18), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_32 = _18;
_9 = _5;
_1 = [192_u8,92_u8,45_u8,140_u8,133_u8,255_u8,213_u8];
_25 = [_30.1,_30.1,_30.1,_30.1,_30.1,_30.1,_30.1];
_5 = !_9;
_36.0 = !_9;
_27 = 843036315_i32 as i128;
_19 = 281383301387394613175469618827891791936_u128 as f32;
_38 = -_23;
_33 = _26.1;
_34.0 = _30.0 | _30.0;
_12 = _8 & _8;
_23 = -_38;
_27 = 164924515251912578423335602930426138435_u128 as i128;
_30.1 = 2800210459_u32;
_10 = _8 as u64;
_36.2 = _9 & _5;
_34 = (_30.0, _30.1);
_19 = _30.1 as f32;
_39 = 331836916375181212570032785985570107818_u128 as u64;
RET = _23 as i64;
_9 = _26.0 & _36.0;
Call(_16 = fn14(_5, _12, _32, _5, _36.2, _32.0, _9, _5, _36.2), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_26.1 = _33;
_8 = _19 as u16;
_18 = (_32.0,);
_16 = _27;
_30.1 = !_34.1;
_36 = _26;
_26 = _36;
_36.1 = _26.1;
_41.fld3 = core::ptr::addr_of!(_30.1);
_37 = _23;
_34 = _30;
Goto(bb12)
}
bb12 = {
_33 = _36.1;
_41.fld1.3 = _19 - _19;
_4 = -(-119_i8);
_43 = _30.0 as isize;
_36.1 = _26.1;
_37 = -_23;
_36.0 = _5 ^ _9;
Goto(bb13)
}
bb13 = {
_29 = _34.0 | _30.0;
_41.fld2 = _28 & _18.0;
_31 = [_16,_27,_16,_27,_16,_16,_27,_16];
_7 = [_30.1,_34.1,_34.1,_30.1,_30.1,_34.1,_30.1];
Call(_40 = fn15(_5, _9, _32.0), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
_41.fld0 = 227910904981876726128411092044021703189_u128;
_5 = _41.fld2 >= _41.fld2;
_14 = _41.fld2;
_24 = [_16,_16,_27,_27,_27,_16,_27,_27];
_41.fld1.3 = _19 * _19;
Goto(bb15)
}
bb15 = {
Call(_48 = dump_var(10_usize, 8_usize, Move(_8), 40_usize, Move(_40), 18_usize, Move(_18), 1_usize, Move(_1)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_48 = dump_var(10_usize, 21_usize, Move(_21), 3_usize, Move(_3), 36_usize, Move(_36), 27_usize, Move(_27)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_48 = dump_var(10_usize, 33_usize, Move(_33), 2_usize, Move(_2), 34_usize, Move(_34), 31_usize, Move(_31)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_48 = dump_var(10_usize, 25_usize, Move(_25), 15_usize, Move(_15), 24_usize, Move(_24), 17_usize, Move(_17)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_48 = dump_var(10_usize, 29_usize, Move(_29), 49_usize, _49, 49_usize, _49, 49_usize, _49), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn11(mut _1: bool,mut _2: isize,mut _3: isize,mut _4: isize,mut _5: f32,mut _6: u16,mut _7: bool,mut _8: i64) -> i64 {
mir! {
type RET = i64;
let _9: Adt51;
let _10: f32;
let _11: [u8; 1];
let _12: [i128; 8];
let _13: f32;
let _14: ();
let _15: ();
{
RET = -_8;
_7 = _1;
RET = _8;
_1 = !_7;
_6 = 60221_u16;
Goto(bb1)
}
bb1 = {
RET = _8;
_8 = RET ^ RET;
RET = _5 as i64;
_4 = _2 << _8;
_3 = _4 + _4;
Goto(bb2)
}
bb2 = {
_7 = !_1;
_3 = _4;
_2 = _4;
_6 = 46642_u16;
_8 = RET + RET;
_2 = _3;
_2 = _4 + _4;
_1 = !_7;
_4 = _3 + _2;
_5 = _8 as f32;
_5 = 11063143750519550168_u64 as f32;
_10 = -_5;
_11 = [60_u8];
_10 = 195230371998954292305121070485573855155_u128 as f32;
_7 = _4 <= _4;
_7 = _1;
_11 = [202_u8];
_1 = _2 > _2;
Call(_3 = core::intrinsics::bswap(_2), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_11 = [234_u8];
_4 = _2 - _3;
_8 = RET;
_7 = _2 < _3;
_1 = _7;
_3 = !_4;
_6 = 57798_u16 >> _3;
_11 = [117_u8];
_12 = [(-22496060229876752253648907236912866346_i128),29428952360764168530932461166475800581_i128,95335701289105445925242171315878655532_i128,44099775001127178180059712984623506011_i128,69929641619768411849912896121483464278_i128,166233702897941812153110485173303198795_i128,49733051205131074303571056089732582223_i128,5314611499335999630403677266781648643_i128];
_4 = _3 << _2;
_4 = _3;
RET = !_8;
_5 = _10 - _10;
_2 = !_3;
_3 = _4;
_11 = [75_u8];
_3 = _4;
_5 = 1341504311350699686_usize as f32;
_2 = _3 - _3;
_3 = !_2;
_13 = -_10;
RET = _8;
_4 = _3 >> _6;
_13 = _10;
RET = 11_u8 as i64;
RET = _6 as i64;
_13 = -_10;
_2 = 11497281610227167251_usize as isize;
_3 = -_4;
_5 = -_10;
Goto(bb4)
}
bb4 = {
Call(_14 = dump_var(11_usize, 3_usize, Move(_3), 11_usize, Move(_11), 6_usize, Move(_6), 2_usize, Move(_2)), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn12(mut _1: isize,mut _2: (isize,)) -> bool {
mir! {
type RET = bool;
let _3: (u64, isize, f32);
let _4: (isize,);
let _5: Adt53;
let _6: [i8; 2];
let _7: Adt48;
let _8: u64;
let _9: *const (isize, (i16, u32), *mut u128);
let _10: i128;
let _11: ();
let _12: ();
{
_1 = _2.0 & _2.0;
_3.1 = !_1;
_3.1 = _1 + _1;
RET = false | true;
_4.0 = (-11414_i16) as isize;
_3.2 = 20292127139875279554297257926216936461_i128 as f32;
_3.0 = 6586981910814313249_u64 | 12170133133795826040_u64;
_2.0 = (-6368_i16) as isize;
_1 = 35887_u16 as isize;
Call(_4 = fn13(_3, _3, _3.1, _3.1, _3, _3, _3, _3, _3, _3, _3, _3.1, _3), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_4.0 = -_3.1;
RET = _4.0 == _3.1;
_3.0 = 23_u8 as u64;
_3.0 = 11086948778486961668_u64 << _3.1;
RET = false;
_2 = (_3.1,);
RET = _3.1 < _2.0;
_4 = (_2.0,);
_6 = [(-5_i8),(-77_i8)];
_3.2 = _3.0 as f32;
_2 = (_4.0,);
_10 = -96840374536437890822648723203669579041_i128;
_3.2 = 26315_u16 as f32;
_8 = (-30049_i16) as u64;
_3.0 = _8 * _8;
Goto(bb2)
}
bb2 = {
Call(_11 = dump_var(12_usize, 4_usize, Move(_4), 2_usize, Move(_2), 10_usize, Move(_10), 12_usize, _12), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn13(mut _1: (u64, isize, f32),mut _2: (u64, isize, f32),mut _3: isize,mut _4: isize,mut _5: (u64, isize, f32),mut _6: (u64, isize, f32),mut _7: (u64, isize, f32),mut _8: (u64, isize, f32),mut _9: (u64, isize, f32),mut _10: (u64, isize, f32),mut _11: (u64, isize, f32),mut _12: isize,mut _13: (u64, isize, f32)) -> (isize,) {
mir! {
type RET = (isize,);
let _14: u16;
let _15: ();
let _16: ();
{
_7.2 = -_8.2;
_13.1 = 786170203131122535_i64 as isize;
RET.0 = !_1.1;
Goto(bb1)
}
bb1 = {
Call(_15 = dump_var(13_usize, 12_usize, Move(_12), 16_usize, _16, 16_usize, _16, 16_usize, _16), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn14(mut _1: bool,mut _2: u16,mut _3: (isize,),mut _4: bool,mut _5: bool,mut _6: isize,mut _7: bool,mut _8: bool,mut _9: bool) -> i128 {
mir! {
type RET = i128;
let _10: isize;
let _11: i16;
let _12: (i16, u32);
let _13: f32;
let _14: f64;
let _15: isize;
let _16: (u64, isize, f32);
let _17: isize;
let _18: u8;
let _19: (i16, u32);
let _20: char;
let _21: Adt55;
let _22: *const u32;
let _23: Adt51;
let _24: (u64, isize, f32);
let _25: ();
let _26: ();
{
_3.0 = _6 * _6;
RET = -146571310191552304613972348903228998078_i128;
Goto(bb1)
}
bb1 = {
_8 = !_9;
RET = -(-134293420303416449812585880107347330497_i128);
_7 = _1;
_7 = _1 & _4;
_8 = _1 ^ _4;
_3.0 = RET as isize;
_1 = !_5;
_1 = !_7;
_8 = !_4;
_1 = _7 & _5;
_10 = 2223736643_u32 as isize;
RET = 82820414141554321376428782076828471251_u128 as i128;
_4 = _7 ^ _1;
_2 = 57081_u16;
_9 = _6 > _6;
_1 = _8 >= _5;
_6 = _10 ^ _3.0;
_1 = !_8;
RET = (-6008370831846143981_i64) as i128;
_3.0 = !_10;
_10 = 4434_i16 as isize;
_1 = !_9;
_7 = !_4;
RET = _10 as i128;
_5 = _7;
_3 = (_6,);
_12.1 = 0_usize as u32;
match _2 {
0 => bb2,
1 => bb3,
2 => bb4,
57081 => bb6,
_ => bb5
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
RET = 160096365564933406516351541242359032880_i128 - 8118560047607717912014829737757722582_i128;
_9 = _7;
_1 = _5 <= _8;
_10 = _12.1 as isize;
_12.1 = 2076315285_u32 | 1911641648_u32;
RET = !165138280560602721358458235108893489194_i128;
_12.0 = (-25204_i16);
_8 = !_9;
_13 = RET as f32;
_1 = _5 | _8;
_2 = !31239_u16;
_1 = _7;
Goto(bb7)
}
bb7 = {
_4 = _8 <= _7;
match _12.0 {
340282366920938463463374607431768186252 => bb9,
_ => bb8
}
}
bb8 = {
Return()
}
bb9 = {
_11 = _12.0 * _12.0;
_3 = (_10,);
_9 = _8 == _7;
_13 = RET as f32;
_3.0 = -_6;
_3.0 = _6;
_1 = !_8;
_5 = !_8;
RET = (-52_i8) as i128;
_5 = _4 != _1;
_14 = _2 as f64;
_12.0 = -_11;
_8 = !_7;
_9 = _1;
_11 = _12.0 | _12.0;
_12 = (_11, 3616258348_u32);
Goto(bb10)
}
bb10 = {
_9 = !_8;
_16.0 = 294500914329060247258510745697371058791_u128 as u64;
_6 = 151597909289924018387572177754681005978_u128 as isize;
_4 = _9;
_3.0 = _10;
_16 = (6018489995524692257_u64, _6, _13);
_16.1 = _12.1 as isize;
_18 = 62_u8;
_13 = 4047432698256710357_usize as f32;
_16.1 = _3.0;
_1 = _9 >= _7;
_8 = _1;
_18 = !74_u8;
_19.1 = _12.1 / _12.1;
_3.0 = _10;
_7 = _4;
_2 = 28371_u16;
Goto(bb11)
}
bb11 = {
_19 = _12;
_11 = _19.0 + _19.0;
_21.fld3.3 = (-149045099_i32) as f32;
_12.0 = !_11;
_21.fld0 = (_11, _19.1);
_8 = _7 < _5;
_3 = (_16.1,);
_13 = _16.2;
_9 = !_7;
_11 = _21.fld0.0 - _21.fld0.0;
_2 = 63998_u16;
_19.1 = _21.fld0.1;
_19.0 = _11 << _21.fld0.0;
_22 = core::ptr::addr_of!(_21.fld0.1);
RET = !163760103851361965124216085857894981409_i128;
_21.fld3.1 = core::ptr::addr_of!(_12);
_17 = -_10;
_21.fld3.2 = !7040084936941462387_i64;
match (*_22) {
0 => bb8,
1 => bb12,
2 => bb13,
3 => bb14,
3616258348 => bb16,
_ => bb15
}
}
bb12 = {
RET = 160096365564933406516351541242359032880_i128 - 8118560047607717912014829737757722582_i128;
_9 = _7;
_1 = _5 <= _8;
_10 = _12.1 as isize;
_12.1 = 2076315285_u32 | 1911641648_u32;
RET = !165138280560602721358458235108893489194_i128;
_12.0 = (-25204_i16);
_8 = !_9;
_13 = RET as f32;
_1 = _5 | _8;
_2 = !31239_u16;
_1 = _7;
Goto(bb7)
}
bb13 = {
_11 = _12.0 * _12.0;
_3 = (_10,);
_9 = _8 == _7;
_13 = RET as f32;
_3.0 = -_6;
_3.0 = _6;
_1 = !_8;
_5 = !_8;
RET = (-52_i8) as i128;
_5 = _4 != _1;
_14 = _2 as f64;
_12.0 = -_11;
_8 = !_7;
_9 = _1;
_11 = _12.0 | _12.0;
_12 = (_11, 3616258348_u32);
Goto(bb10)
}
bb14 = {
Return()
}
bb15 = {
Return()
}
bb16 = {
_21.fld3.0 = core::ptr::addr_of!(_19.1);
_3 = (_16.1,);
_4 = !_5;
_16 = (2527283865323488191_u64, _10, _13);
_21.fld2 = core::ptr::addr_of!(_20);
_20 = '\u{f7dc8}';
_2 = 2940_u16;
RET = !(-108440605583794827336669240141082261389_i128);
_18 = !182_u8;
_15 = _21.fld3.2 as isize;
_22 = core::ptr::addr_of!(_21.fld0.1);
_21.fld1 = _18 ^ _18;
RET = _21.fld1 as i128;
_2 = !4682_u16;
Goto(bb17)
}
bb17 = {
Call(_25 = dump_var(14_usize, 2_usize, Move(_2), 12_usize, Move(_12), 17_usize, Move(_17), 9_usize, Move(_9)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_25 = dump_var(14_usize, 10_usize, Move(_10), 4_usize, Move(_4), 11_usize, Move(_11), 19_usize, Move(_19)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn15(mut _1: bool,mut _2: bool,mut _3: isize) -> i32 {
mir! {
type RET = i32;
let _4: isize;
let _5: f64;
let _6: ((*const u32, *const (i16, u32), i64, f32), u128);
let _7: i8;
let _8: ([u32; 7], *mut ([i8; 2], *const char, f64));
let _9: ([i8; 2], *const char, f64);
let _10: f32;
let _11: usize;
let _12: (i16, (u64, isize, f32), *const (i16, u32), u32);
let _13: isize;
let _14: *const [u8; 1];
let _15: (u64, isize, f32);
let _16: f32;
let _17: (isize,);
let _18: ([u32; 7], *mut ([i8; 2], *const char, f64));
let _19: u32;
let _20: (i16, u32);
let _21: isize;
let _22: char;
let _23: u16;
let _24: ();
let _25: ();
{
RET = (-1253882513_i32);
RET = 1862149328_i32;
_4 = 17604_i16 as isize;
RET = '\u{10d7f0}' as i32;
_3 = _4;
_6.1 = (-6855813444553277499_i64) as u128;
_7 = (-14_i8) << _4;
_1 = _2;
_1 = _2;
_6.0.3 = (-38848609111931825326079630702261352074_i128) as f32;
_1 = _2;
RET = _3 as i32;
RET = 978913515_i32;
RET = 1984430342_i32 - 242523354_i32;
_6.1 = 235142795529290160941073762197736356785_u128 | 54242816707371270926740171938227035559_u128;
_6.0.2 = -(-538819084395876481_i64);
_6.0.2 = 120647429963697260700172143772085075984_i128 as i64;
_7 = 74_i8;
_6.0.3 = _3 as f32;
_5 = _7 as f64;
match _7 {
0 => bb1,
1 => bb2,
74 => bb4,
_ => bb3
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
RET = -(-650768754_i32);
_5 = RET as f64;
_6.1 = 150_u8 as u128;
_3 = -_4;
_6.1 = 6132764453355504996260295980624181992_u128 + 203569313107454411904921144073427153579_u128;
_6.0.2 = 4547175343898463335_i64 + (-2717955285891075269_i64);
_6.0.3 = 55272_u16 as f32;
_8.0 = [3362191157_u32,3604178013_u32,2679294979_u32,1390685051_u32,4135067593_u32,3408981659_u32,556003547_u32];
_5 = RET as f64;
_5 = (-115397756382984813349062039326414571491_i128) as f64;
RET = (-1681128501_i32) & (-1003616688_i32);
_9.0 = [_7,_7];
_10 = _6.0.3 * _6.0.3;
_7 = 53_i8 >> RET;
RET = 438461457_i32;
_8.1 = core::ptr::addr_of_mut!(_9);
RET = 365700837_i32;
_3 = _4 * _4;
_9.2 = 14759416850122342217_usize as f64;
_10 = _6.1 as f32;
match RET {
0 => bb3,
1 => bb5,
2 => bb6,
3 => bb7,
4 => bb8,
5 => bb9,
365700837 => bb11,
_ => bb10
}
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
_6.0.0 = core::ptr::addr_of!(_12.3);
_12.3 = !2624283604_u32;
_12.0 = _5 as i16;
_7 = _6.1 as i8;
_11 = _3 as usize;
_6.0.0 = core::ptr::addr_of!(_12.3);
_12.0 = (-20576_i16) * (-31380_i16);
_6.0.2 = (-8223568058805018487_i64);
_8.0 = [_12.3,_12.3,_12.3,_12.3,_12.3,_12.3,_12.3];
_7 = (-73_i8) | 17_i8;
_12.1.2 = -_6.0.3;
_12.1 = (9889559533474224401_u64, _3, _10);
_1 = _2;
RET = _12.1.0 as i32;
_13 = _4;
_9.2 = -_5;
_1 = _2 >= _2;
_16 = -_10;
match _6.0.2 {
0 => bb1,
1 => bb8,
2 => bb9,
3 => bb4,
340282366920938463455151039372963192969 => bb12,
_ => bb5
}
}
bb12 = {
_15.0 = !_12.1.0;
_15.1 = 8_u8 as isize;
_15 = _12.1;
_17.0 = _4 ^ _13;
_18.0 = [_12.3,_12.3,_12.3,_12.3,_12.3,_12.3,_12.3];
_8.0 = _18.0;
_9.2 = _5;
_7 = 66_i8 >> _6.0.2;
_13 = _3;
_12.1.2 = _10 - _10;
_1 = !_2;
_7 = _15.0 as i8;
_8.1 = core::ptr::addr_of_mut!(_9);
RET = 2066746835_i32 * (-1980518220_i32);
match _15.0 {
0 => bb4,
1 => bb13,
2 => bb14,
9889559533474224401 => bb16,
_ => bb15
}
}
bb13 = {
_6.0.0 = core::ptr::addr_of!(_12.3);
_12.3 = !2624283604_u32;
_12.0 = _5 as i16;
_7 = _6.1 as i8;
_11 = _3 as usize;
_6.0.0 = core::ptr::addr_of!(_12.3);
_12.0 = (-20576_i16) * (-31380_i16);
_6.0.2 = (-8223568058805018487_i64);
_8.0 = [_12.3,_12.3,_12.3,_12.3,_12.3,_12.3,_12.3];
_7 = (-73_i8) | 17_i8;
_12.1.2 = -_6.0.3;
_12.1 = (9889559533474224401_u64, _3, _10);
_1 = _2;
RET = _12.1.0 as i32;
_13 = _4;
_9.2 = -_5;
_1 = _2 >= _2;
_16 = -_10;
match _6.0.2 {
0 => bb1,
1 => bb8,
2 => bb9,
3 => bb4,
340282366920938463455151039372963192969 => bb12,
_ => bb5
}
}
bb14 = {
Return()
}
bb15 = {
Return()
}
bb16 = {
_6.0.0 = core::ptr::addr_of!(_12.3);
_12.1.2 = -_16;
_9.2 = -_5;
_6.0.0 = core::ptr::addr_of!(_12.3);
_9.0 = [_7,_7];
_18 = (_8.0, _8.1);
_6.0.2 = RET as i64;
_20 = (_12.0, _12.3);
_12.1.2 = _16 * _15.2;
_15.0 = _12.1.0 & _12.1.0;
_3 = _13 << _6.0.2;
Goto(bb17)
}
bb17 = {
Call(_24 = dump_var(15_usize, 20_usize, Move(_20), 1_usize, Move(_1), 7_usize, Move(_7), 3_usize, Move(_3)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn16(mut _1: (u64, isize, f32),mut _2: (*const u32, *const (i16, u32), i64, f32),mut _3: (u64, isize, f32)) -> (*const u32, *const (i16, u32), i64, f32) {
mir! {
type RET = (*const u32, *const (i16, u32), i64, f32);
let _4: f32;
let _5: (bool, char, bool);
let _6: (*const (i16, u32), u64);
let _7: ();
let _8: ();
{
RET.0 = _2.0;
_1.2 = _2.3;
_2.0 = RET.0;
RET.3 = 184424378664148440685130364489101844673_u128 as f32;
_2.0 = RET.0;
_1.2 = _3.2 * _2.3;
_3.1 = !_1.1;
RET = (_2.0, _2.1, _2.2, _1.2);
RET = (_2.0, _2.1, _2.2, _2.3);
RET = (_2.0, _2.1, _2.2, _1.2);
_2.2 = RET.2;
RET.1 = _2.1;
_2.2 = (-61_i8) as i64;
RET.1 = _2.1;
RET.2 = _2.2 * _2.2;
_1.0 = !_3.0;
_2.0 = RET.0;
RET.3 = _2.3;
RET = _2;
Goto(bb1)
}
bb1 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn17(mut _1: (bool, char, bool),mut _2: isize) -> i16 {
mir! {
type RET = i16;
let _3: (u64, isize, f32);
let _4: char;
let _5: [i8; 2];
let _6: ((u64, isize, f32), *mut u128);
let _7: bool;
let _8: isize;
let _9: isize;
let _10: Adt64;
let _11: bool;
let _12: [u64; 2];
let _13: f32;
let _14: i16;
let _15: [u32; 7];
let _16: [u8; 7];
let _17: u128;
let _18: Adt59;
let _19: [i128; 8];
let _20: [u64; 2];
let _21: (i16, (u64, isize, f32), *const (i16, u32), u32);
let _22: (u64, isize, f32);
let _23: Adt54;
let _24: [i128; 8];
let _25: Adt60;
let _26: isize;
let _27: Adt58;
let _28: u16;
let _29: *const char;
let _30: u16;
let _31: u8;
let _32: char;
let _33: [u8; 1];
let _34: [bool; 1];
let _35: [bool; 1];
let _36: f32;
let _37: ();
let _38: ();
{
_2 = 39710574667976490339036694197548518991_u128 as isize;
RET = 20143_i16;
RET = 11270_i16;
_3.1 = _2;
_1 = (false, '\u{116d2}', true);
_3.0 = 3544553924478953359_u64 & 4573446954446763212_u64;
_1.1 = '\u{45331}';
_3.0 = 1071160600375631090_u64 * 11549747130099740810_u64;
RET = !(-22887_i16);
_5 = [(-102_i8),105_i8];
Goto(bb1)
}
bb1 = {
_1 = (false, '\u{da282}', true);
_4 = _1.1;
_4 = _1.1;
_3.1 = _2;
RET = !(-9660_i16);
_4 = _1.1;
_3.0 = 2208125375983417007_u64;
_1.2 = _1.0;
_2 = !_3.1;
_1 = (true, _4, false);
_1.1 = _4;
_3.2 = RET as f32;
_3.1 = -_2;
_6.0 = (_3.0, _3.1, _3.2);
_2 = _3.1 | _3.1;
Goto(bb2)
}
bb2 = {
_6.0 = (_3.0, _3.1, _3.2);
_3.0 = !_6.0.0;
_3.1 = (-31_i8) as isize;
_7 = _1.2;
_3.1 = _1.0 as isize;
_8 = -_3.1;
_3 = (_6.0.0, _8, _6.0.2);
RET = (-17852_i16);
_6.0.2 = _3.2 + _3.2;
_1.0 = _1.2;
_5 = [(-11_i8),(-74_i8)];
_2 = _8;
_4 = _1.1;
RET = !5180_i16;
_6.0 = _3;
_6.0.1 = _3.1 + _8;
Goto(bb3)
}
bb3 = {
_1.0 = !_7;
Goto(bb4)
}
bb4 = {
RET = 49564_u16 as i16;
_3.1 = _2 * _2;
_1 = (_7, _4, _7);
_3 = _6.0;
Call(_6.0.1 = core::intrinsics::transmute(_2), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
_6.0.0 = _3.0 * _3.0;
RET = (-4388_i16);
_3.0 = 5_usize as u64;
_9 = _3.1 << _6.0.0;
_3.2 = _6.0.2 + _6.0.2;
_6.0 = _3;
_1.2 = !_7;
_3.1 = _6.0.1 ^ _6.0.1;
RET = -(-13106_i16);
_1 = (_7, _4, _7);
_1.1 = _4;
_3.2 = 6_usize as f32;
_4 = _1.1;
_12 = [_6.0.0,_6.0.0];
_6.0 = (_3.0, _3.1, _3.2);
_4 = _1.1;
RET = !(-8234_i16);
_1.0 = _1.2;
RET = (-32476_i16);
RET = 108784394096390544313757268408171591842_i128 as i16;
_8 = -_3.1;
_1.2 = _7;
_14 = RET & RET;
RET = _14;
_14 = RET << _3.1;
_2 = _8;
_13 = -_3.2;
Goto(bb6)
}
bb6 = {
_15 = [300322815_u32,3791569910_u32,1477266217_u32,3526824225_u32,812891623_u32,3988074663_u32,2096153765_u32];
_6.1 = core::ptr::addr_of_mut!(_17);
_6.0.2 = _13 * _13;
_17 = 287951678947963467990168244633081112046_u128 ^ 305852969364185332803855818707580322166_u128;
Goto(bb7)
}
bb7 = {
_8 = _2 | _3.1;
_1 = (_7, _4, _7);
_1.1 = _4;
_6.0.1 = -_9;
_11 = _1.0;
_6.0 = _3;
_16 = [226_u8,253_u8,192_u8,74_u8,68_u8,31_u8,171_u8];
Goto(bb8)
}
bb8 = {
_5 = [(-116_i8),124_i8];
Goto(bb9)
}
bb9 = {
_4 = _1.1;
_6.1 = core::ptr::addr_of_mut!(_17);
_13 = -_6.0.2;
_21.1.2 = _17 as f32;
_21.3 = 337608055_u32;
_21.1.0 = !_6.0.0;
_19 = [109694054050398968363962568489906431650_i128,(-123164234974935231402913770075218051613_i128),52919782960761213271152719930918149014_i128,104408187500273774146100620934308284210_i128,83831364407617796836506590870426725234_i128,164070356971740739673093622924075104468_i128,76666398027084813055608923409910899890_i128,(-124272471283125643985571947885223910166_i128)];
match _21.3 {
0 => bb6,
1 => bb2,
2 => bb3,
337608055 => bb10,
_ => bb5
}
}
bb10 = {
Call(_8 = fn18(_19, _6, _2, _6, _3, _6, _6, _3, _6.0, _5, _16, _6.0), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_14 = RET;
_25.fld2 = _3.2 as isize;
_21.3 = 2365392873_u32 + 3568250535_u32;
_21.1.0 = !_3.0;
_25.fld6.0.0 = _21.1.0 & _3.0;
_25.fld6.0 = (_3.0, _25.fld2, _13);
_12 = [_21.1.0,_21.1.0];
_25.fld6.0 = (_3.0, _8, _21.1.2);
_16 = [191_u8,115_u8,59_u8,37_u8,72_u8,100_u8,155_u8];
_22.2 = -_21.1.2;
_6.1 = core::ptr::addr_of_mut!(_25.fld0);
_21.3 = _25.fld6.0.2 as u32;
_25.fld6.0.2 = 2823931106518185578_i64 as f32;
_25.fld1.0 = core::ptr::addr_of!(_21.3);
_16 = [188_u8,144_u8,183_u8,135_u8,154_u8,202_u8,6_u8];
_22 = (_21.1.0, _3.1, _3.2);
_24 = [(-130337726556753605862664194510858124305_i128),113652477190123213071825904467785865844_i128,149780836040212239936821877098116424811_i128,(-74374973554530765193067407731174773054_i128),(-51358419239209072696144671789830927082_i128),126569232097632723699418901554069795472_i128,(-25628245802275292629708254726625604436_i128),(-69011326119903706625435058094771797063_i128)];
_25.fld1.3 = _21.1.0 as f32;
_21.1.1 = -_8;
_28 = (-125069244286404533062480719002200912359_i128) as u16;
_15 = [_21.3,_21.3,_21.3,_21.3,_21.3,_21.3,_21.3];
_29 = core::ptr::addr_of!(_1.1);
_25.fld1.0 = core::ptr::addr_of!(_21.3);
Call(_22.1 = core::intrinsics::transmute(_3.1), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
_8 = -_2;
_22.0 = _21.1.0;
_16 = [134_u8,91_u8,114_u8,239_u8,26_u8,50_u8,30_u8];
_25.fld4 = core::ptr::addr_of_mut!(_25.fld1.2);
_23 = Adt54::Variant2 { fld0: _16 };
_21.0 = _14 * _14;
_22.0 = _6.0.0 | _21.1.0;
_21.1.1 = _9 ^ _25.fld6.0.1;
_15 = [_21.3,_21.3,_21.3,_21.3,_21.3,_21.3,_21.3];
_30 = _28 >> _21.1.1;
_3.2 = _22.2;
_25.fld6.1 = core::ptr::addr_of_mut!(_17);
_24 = [(-128035769099440471637191845150355515079_i128),(-86660384440117961339344707778208949571_i128),(-112801937642909443827395330649271382784_i128),(-101120032753219470716181427307333711507_i128),6794233723468035605012893599728052968_i128,(-150228595295334608420115752086036045023_i128),(-136124725380860031279288753558119448375_i128),(-143811451060701352863007644332065886074_i128)];
_13 = -_25.fld6.0.2;
Call(_25.fld2 = core::intrinsics::bswap(_21.1.1), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
_13 = _25.fld1.3;
_25.fld3 = core::ptr::addr_of!(_21.3);
_22.2 = _25.fld1.3;
_25.fld1.0 = core::ptr::addr_of!(_21.3);
_33 = [47_u8];
_25.fld2 = _22.2 as isize;
_1 = (_7, _4, _11);
_6.0 = (_21.1.0, _2, _3.2);
_25.fld6.1 = core::ptr::addr_of_mut!(_25.fld0);
SetDiscriminant(_23, 0);
place!(Field::<[u64; 2]>(Variant(_23, 0), 0)) = [_25.fld6.0.0,_22.0];
place!(Field::<[u64; 2]>(Variant(_23, 0), 0)) = [_25.fld6.0.0,_25.fld6.0.0];
_1 = (_11, _4, _11);
_25.fld3 = core::ptr::addr_of!(_21.3);
_28 = !_30;
_25.fld1.2 = _14 as i64;
_11 = _7;
_8 = _22.2 as isize;
_2 = (-24206985158001719938764754739150069688_i128) as isize;
_15 = [_21.3,_21.3,_21.3,_21.3,_21.3,_21.3,_21.3];
RET = _14 ^ _14;
_21.1 = _22;
_8 = _3.1;
_6.1 = core::ptr::addr_of_mut!(_25.fld0);
Call(_25 = fn19(_19, _22, _28, _8, _19, _30, _22, _3.1, _8, _9, _21.1.1, _6.0, _6, _28), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
_21 = (_14, _6.0, _25.fld1.1, 3531051318_u32);
_25.fld6.0.0 = !_3.0;
_34 = [_11];
_25.fld4 = core::ptr::addr_of_mut!(_25.fld1.2);
_29 = core::ptr::addr_of!(_32);
_25.fld0 = _17;
Goto(bb15)
}
bb15 = {
Call(_37 = dump_var(17_usize, 34_usize, Move(_34), 8_usize, Move(_8), 17_usize, Move(_17), 33_usize, Move(_33)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_37 = dump_var(17_usize, 9_usize, Move(_9), 30_usize, Move(_30), 2_usize, Move(_2), 28_usize, Move(_28)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_37 = dump_var(17_usize, 4_usize, Move(_4), 38_usize, _38, 38_usize, _38, 38_usize, _38), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn18(mut _1: [i128; 8],mut _2: ((u64, isize, f32), *mut u128),mut _3: isize,mut _4: ((u64, isize, f32), *mut u128),mut _5: (u64, isize, f32),mut _6: ((u64, isize, f32), *mut u128),mut _7: ((u64, isize, f32), *mut u128),mut _8: (u64, isize, f32),mut _9: (u64, isize, f32),mut _10: [i8; 2],mut _11: [u8; 7],mut _12: (u64, isize, f32)) -> isize {
mir! {
type RET = isize;
let _13: i16;
let _14: isize;
let _15: (bool, char, bool);
let _16: (*const u32, *const (i16, u32), i64, f32);
let _17: f64;
let _18: *const [u8; 1];
let _19: u32;
let _20: f64;
let _21: f32;
let _22: i16;
let _23: [u32; 7];
let _24: ();
let _25: ();
{
_6.0.2 = _7.0.2 * _4.0.2;
_2.0.0 = _7.0.0 >> _8.1;
Goto(bb1)
}
bb1 = {
RET = 74_i8 as isize;
_5.1 = (-113_i8) as isize;
_12.1 = false as isize;
_3 = true as isize;
_5.2 = _7.0.2 + _6.0.2;
_6.0.1 = _7.0.1 ^ _2.0.1;
_6.0.2 = _7.0.2;
_16.2 = 305686626462187024095483886546176814250_u128 as i64;
_7 = (_6.0, _2.1);
_4.1 = _7.1;
_12.2 = -_6.0.2;
RET = _7.0.1 >> _2.0.1;
_5 = _6.0;
_7.1 = _4.1;
_9.2 = _16.2 as f32;
_17 = 6148_u16 as f64;
_16.0 = core::ptr::addr_of!(_19);
_13 = _5.2 as i16;
Goto(bb2)
}
bb2 = {
Call(_24 = dump_var(18_usize, 3_usize, Move(_3), 1_usize, Move(_1), 25_usize, _25, 25_usize, _25), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn19(mut _1: [i128; 8],mut _2: (u64, isize, f32),mut _3: u16,mut _4: isize,mut _5: [i128; 8],mut _6: u16,mut _7: (u64, isize, f32),mut _8: isize,mut _9: isize,mut _10: isize,mut _11: isize,mut _12: (u64, isize, f32),mut _13: ((u64, isize, f32), *mut u128),mut _14: u16) -> Adt60 {
mir! {
type RET = Adt60;
let _15: f64;
let _16: bool;
let _17: [i128; 8];
let _18: Adt56;
let _19: [i128; 8];
let _20: isize;
let _21: *mut u16;
let _22: f32;
let _23: isize;
let _24: *const [u8; 1];
let _25: f64;
let _26: i128;
let _27: [bool; 1];
let _28: f32;
let _29: char;
let _30: [u8; 1];
let _31: [u8; 1];
let _32: i32;
let _33: [bool; 1];
let _34: f64;
let _35: f64;
let _36: isize;
let _37: usize;
let _38: [u64; 2];
let _39: isize;
let _40: f64;
let _41: [u8; 7];
let _42: u64;
let _43: [bool; 1];
let _44: bool;
let _45: [u64; 2];
let _46: *const [u8; 1];
let _47: isize;
let _48: i128;
let _49: u16;
let _50: [i8; 2];
let _51: isize;
let _52: ([u32; 7], *mut ([i8; 2], *const char, f64));
let _53: (isize,);
let _54: Adt61;
let _55: [u64; 2];
let _56: i128;
let _57: bool;
let _58: i32;
let _59: char;
let _60: isize;
let _61: *const [u8; 1];
let _62: *mut u128;
let _63: [u8; 1];
let _64: f32;
let _65: *mut u128;
let _66: (i16, (u64, isize, f32), *const (i16, u32), u32);
let _67: Adt56;
let _68: [u32; 7];
let _69: (i16, u32);
let _70: [u8; 7];
let _71: [i128; 8];
let _72: isize;
let _73: (u64, isize, f32);
let _74: isize;
let _75: (*const u32, *const (i16, u32), i64, f32);
let _76: i16;
let _77: ((*const u32, *const (i16, u32), i64, f32), u128);
let _78: Adt53;
let _79: (i16, u32);
let _80: [u32; 7];
let _81: ([i8; 2], *const char, f64);
let _82: Adt57;
let _83: [i128; 8];
let _84: i128;
let _85: u8;
let _86: [u8; 1];
let _87: Adt53;
let _88: isize;
let _89: (i16, u32);
let _90: (i16, u32);
let _91: i128;
let _92: ([u32; 7], *mut ([i8; 2], *const char, f64));
let _93: isize;
let _94: isize;
let _95: char;
let _96: f64;
let _97: *const u8;
let _98: *mut u16;
let _99: u64;
let _100: ([u32; 7], *mut ([i8; 2], *const char, f64));
let _101: *const char;
let _102: f64;
let _103: u64;
let _104: (isize,);
let _105: Adt63;
let _106: (u64, isize, f32);
let _107: [bool; 1];
let _108: usize;
let _109: u32;
let _110: (i16, u32);
let _111: [i8; 2];
let _112: (isize,);
let _113: (i16, u32);
let _114: (bool, char, bool);
let _115: [u64; 2];
let _116: (isize, (i16, u32), *mut u128);
let _117: isize;
let _118: char;
let _119: *mut u16;
let _120: bool;
let _121: [i128; 8];
let _122: isize;
let _123: ((u64, isize, f32), *mut u128);
let _124: ();
let _125: ();
{
_13.0.2 = -_7.2;
RET.fld1.3 = 60683184884415415475674744245922457751_u128 as f32;
RET.fld6.0 = (_7.0, _4, _7.2);
_7 = (_12.0, _8, RET.fld1.3);
_12.2 = RET.fld1.3;
RET.fld6.1 = core::ptr::addr_of_mut!(RET.fld0);
_2 = _13.0;
RET.fld1.2 = (-3376109178215395008_i64) + (-6946392081634908500_i64);
_9 = 5_i8 as isize;
RET.fld6.0 = _13.0;
RET.fld6.0.1 = 101759407297326315677430788336032608047_i128 as isize;
RET.fld2 = _13.0.1;
RET.fld6.0.2 = (-144694222175799115257822762133009459903_i128) as f32;
RET.fld6.0 = (_7.0, _2.1, _7.2);
_13.1 = core::ptr::addr_of_mut!(RET.fld0);
RET.fld6.0.1 = -_12.1;
RET.fld1.2 = 2873075344164111662_i64;
_13.1 = core::ptr::addr_of_mut!(RET.fld0);
RET.fld0 = !340093501667802650093629698863394905039_u128;
RET.fld6.0.2 = -_2.2;
_15 = _12.0 as f64;
_2.1 = -_12.1;
RET.fld6.0.0 = RET.fld0 as u64;
RET.fld1.3 = _13.0.2;
_3 = _6;
RET.fld6.0.1 = 553388731197653499_usize as isize;
Goto(bb1)
}
bb1 = {
_7.1 = -RET.fld2;
_14 = !_6;
_7.2 = _13.0.2;
_12.2 = _13.0.2;
RET.fld2 = -_4;
_13.1 = core::ptr::addr_of_mut!(RET.fld0);
RET.fld4 = core::ptr::addr_of_mut!(RET.fld1.2);
_8 = _12.1 ^ _13.0.1;
RET.fld0 = '\u{46bc5}' as u128;
_7.0 = _13.0.0;
RET.fld1.2 = (-970899029100946996_i64);
_12.2 = _7.2;
RET.fld4 = core::ptr::addr_of_mut!(RET.fld1.2);
_17 = [(-15311786638052864532196082894928270055_i128),122654324032009810693620195125393671752_i128,(-43755613071263431478047312525889499080_i128),147861362297756734872877054778402945371_i128,(-29388703212494402055021458965717885496_i128),(-35060191772140058050368511670215813902_i128),84521897237300182240807901461153072420_i128,(-3996166799808045454755667902222832961_i128)];
RET.fld6.1 = core::ptr::addr_of_mut!(RET.fld0);
RET.fld2 = _2.2 as isize;
RET.fld6.0 = _13.0;
RET.fld6.0.0 = !_7.0;
_13.0 = (_7.0, _12.1, RET.fld1.3);
Goto(bb2)
}
bb2 = {
RET.fld6.0.0 = _13.0.0 >> RET.fld2;
_13.0.2 = 16215378618746230243_usize as f32;
RET.fld6.1 = core::ptr::addr_of_mut!(RET.fld0);
_16 = _6 > _3;
RET.fld6 = (_12, _13.1);
_12 = (_7.0, _13.0.1, RET.fld1.3);
_12.0 = RET.fld6.0.2 as u64;
_13.0.2 = RET.fld6.0.1 as f32;
RET.fld6.0 = _13.0;
_15 = (-80_i8) as f64;
RET.fld1.2 = 6064835846223560639_i64;
_2.0 = RET.fld6.0.0 << _3;
RET.fld6.0.2 = _12.1 as f32;
_14 = _3;
RET.fld0 = 6_usize as u128;
_5 = _17;
_13.1 = RET.fld6.1;
RET.fld4 = core::ptr::addr_of_mut!(RET.fld1.2);
RET.fld6.0.0 = 6_usize as u64;
_2.0 = _7.0;
_13.0.1 = (-1669186378_i32) as isize;
RET.fld6.1 = core::ptr::addr_of_mut!(RET.fld0);
_21 = core::ptr::addr_of_mut!(_3);
_10 = 3_usize as isize;
RET.fld2 = -_12.1;
RET.fld6.0.1 = RET.fld2;
match RET.fld1.2 {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
4 => bb7,
5 => bb8,
6064835846223560639 => bb10,
_ => bb9
}
}
bb3 = {
_7.1 = -RET.fld2;
_14 = !_6;
_7.2 = _13.0.2;
_12.2 = _13.0.2;
RET.fld2 = -_4;
_13.1 = core::ptr::addr_of_mut!(RET.fld0);
RET.fld4 = core::ptr::addr_of_mut!(RET.fld1.2);
_8 = _12.1 ^ _13.0.1;
RET.fld0 = '\u{46bc5}' as u128;
_7.0 = _13.0.0;
RET.fld1.2 = (-970899029100946996_i64);
_12.2 = _7.2;
RET.fld4 = core::ptr::addr_of_mut!(RET.fld1.2);
_17 = [(-15311786638052864532196082894928270055_i128),122654324032009810693620195125393671752_i128,(-43755613071263431478047312525889499080_i128),147861362297756734872877054778402945371_i128,(-29388703212494402055021458965717885496_i128),(-35060191772140058050368511670215813902_i128),84521897237300182240807901461153072420_i128,(-3996166799808045454755667902222832961_i128)];
RET.fld6.1 = core::ptr::addr_of_mut!(RET.fld0);
RET.fld2 = _2.2 as isize;
RET.fld6.0 = _13.0;
RET.fld6.0.0 = !_7.0;
_13.0 = (_7.0, _12.1, RET.fld1.3);
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_15 = RET.fld0 as f64;
_13.0.2 = (-102216943601721956073021188757972302552_i128) as f32;
_13.0.1 = -_11;
RET.fld1.2 = (*_21) as i64;
Goto(bb11)
}
bb11 = {
_13.0.0 = RET.fld0 as u64;
_7.1 = -RET.fld6.0.1;
_12 = (_13.0.0, _13.0.1, RET.fld6.0.2);
_4 = !_8;
RET.fld0 = 289612272532403975417111039299712776525_u128 ^ 329583159651324784501262231354507560283_u128;
_22 = _12.2 - _12.2;
_13 = (_2, RET.fld6.1);
_20 = -_2.1;
RET.fld2 = _8;
_9 = (-46_i8) as isize;
RET.fld1.2 = 3038468295817452031_i64;
_2 = (_12.0, _4, RET.fld6.0.2);
RET.fld2 = !RET.fld6.0.1;
_20 = _4 * RET.fld2;
_17 = _1;
_19 = [162219808452379911099110792392945967202_i128,(-90690401489536140056710065980237646042_i128),140515417532254700972550193853989754780_i128,120457338241329667578227421962265793639_i128,(-34853002359655562523313479874441323236_i128),(-93952007552149670573841419346468721616_i128),(-88842836205562965424475197806752728683_i128),(-47919743242025350659758597882774637017_i128)];
Call(_14 = core::intrinsics::transmute((*_21)), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
_9 = -_20;
_14 = _12.1 as u16;
_23 = _8 ^ _11;
RET.fld1.2 = 3184724580079766685_i64;
RET.fld2 = !_8;
_4 = _23;
_17 = [(-74067378744465016777441302030631504013_i128),43046192261816869350340416275111679980_i128,107116474992341395398660126428391584699_i128,152635137298446813009634814761885795010_i128,(-3966385615384475184725634909390607113_i128),(-93840714477095341676050762874714331850_i128),120447615196054192699479245006416149872_i128,(-13731923105999654411792315253126430922_i128)];
RET.fld6.0.2 = 1560087194_u32 as f32;
_26 = -(-123104598417028594968865918594057531136_i128);
RET.fld4 = core::ptr::addr_of_mut!(RET.fld1.2);
_17 = _5;
_15 = _22 as f64;
RET.fld0 = !213943000914596456829287951270617512982_u128;
_20 = _4 << _6;
_3 = !_14;
_27 = [_16];
_33 = [_16];
_13.0.0 = !_12.0;
RET.fld2 = _13.0.1 ^ _20;
match RET.fld1.2 {
0 => bb7,
1 => bb2,
2 => bb11,
3 => bb13,
4 => bb14,
5 => bb15,
6 => bb16,
3184724580079766685 => bb18,
_ => bb17
}
}
bb13 = {
_13.0.0 = RET.fld0 as u64;
_7.1 = -RET.fld6.0.1;
_12 = (_13.0.0, _13.0.1, RET.fld6.0.2);
_4 = !_8;
RET.fld0 = 289612272532403975417111039299712776525_u128 ^ 329583159651324784501262231354507560283_u128;
_22 = _12.2 - _12.2;
_13 = (_2, RET.fld6.1);
_20 = -_2.1;
RET.fld2 = _8;
_9 = (-46_i8) as isize;
RET.fld1.2 = 3038468295817452031_i64;
_2 = (_12.0, _4, RET.fld6.0.2);
RET.fld2 = !RET.fld6.0.1;
_20 = _4 * RET.fld2;
_17 = _1;
_19 = [162219808452379911099110792392945967202_i128,(-90690401489536140056710065980237646042_i128),140515417532254700972550193853989754780_i128,120457338241329667578227421962265793639_i128,(-34853002359655562523313479874441323236_i128),(-93952007552149670573841419346468721616_i128),(-88842836205562965424475197806752728683_i128),(-47919743242025350659758597882774637017_i128)];
Call(_14 = core::intrinsics::transmute((*_21)), ReturnTo(bb12), UnwindUnreachable())
}
bb14 = {
_15 = RET.fld0 as f64;
_13.0.2 = (-102216943601721956073021188757972302552_i128) as f32;
_13.0.1 = -_11;
RET.fld1.2 = (*_21) as i64;
Goto(bb11)
}
bb15 = {
Return()
}
bb16 = {
RET.fld6.0.0 = _13.0.0 >> RET.fld2;
_13.0.2 = 16215378618746230243_usize as f32;
RET.fld6.1 = core::ptr::addr_of_mut!(RET.fld0);
_16 = _6 > _3;
RET.fld6 = (_12, _13.1);
_12 = (_7.0, _13.0.1, RET.fld1.3);
_12.0 = RET.fld6.0.2 as u64;
_13.0.2 = RET.fld6.0.1 as f32;
RET.fld6.0 = _13.0;
_15 = (-80_i8) as f64;
RET.fld1.2 = 6064835846223560639_i64;
_2.0 = RET.fld6.0.0 << _3;
RET.fld6.0.2 = _12.1 as f32;
_14 = _3;
RET.fld0 = 6_usize as u128;
_5 = _17;
_13.1 = RET.fld6.1;
RET.fld4 = core::ptr::addr_of_mut!(RET.fld1.2);
RET.fld6.0.0 = 6_usize as u64;
_2.0 = _7.0;
_13.0.1 = (-1669186378_i32) as isize;
RET.fld6.1 = core::ptr::addr_of_mut!(RET.fld0);
_21 = core::ptr::addr_of_mut!(_3);
_10 = 3_usize as isize;
RET.fld2 = -_12.1;
RET.fld6.0.1 = RET.fld2;
match RET.fld1.2 {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
4 => bb7,
5 => bb8,
6064835846223560639 => bb10,
_ => bb9
}
}
bb17 = {
Return()
}
bb18 = {
RET.fld1.2 = 4906778401375380706_i64;
RET.fld6.0.0 = _13.0.0;
RET.fld4 = core::ptr::addr_of_mut!(RET.fld1.2);
_28 = _22;
_19 = [_26,_26,_26,_26,_26,_26,_26,_26];
RET.fld6.0.0 = !_12.0;
RET.fld1.3 = _2.2;
_27 = [_16];
_25 = _15 * _15;
_7.2 = _11 as f32;
_24 = core::ptr::addr_of!(_30);
(*_21) = !_6;
_12.0 = RET.fld6.0.0 - _7.0;
_11 = !_23;
_35 = _15;
_35 = _25;
(*_21) = RET.fld0 as u16;
match RET.fld1.2 {
0 => bb11,
1 => bb13,
2 => bb12,
4906778401375380706 => bb20,
_ => bb19
}
}
bb19 = {
Return()
}
bb20 = {
_32 = _13.0.0 as i32;
_13 = (_7, RET.fld6.1);
RET.fld6 = _13;
RET.fld6.0 = (_7.0, _7.1, _28);
_17 = [_26,_26,_26,_26,_26,_26,_26,_26];
_38 = [_13.0.0,_2.0];
_2.2 = 1613615839_u32 as f32;
Goto(bb21)
}
bb21 = {
(*_21) = 11908_i16 as u16;
_26 = 26_u8 as i128;
_12.1 = _4 << _2.1;
_28 = _22 * RET.fld6.0.2;
_30 = [35_u8];
_12.2 = -_22;
_37 = !6_usize;
_27 = [_16];
_24 = core::ptr::addr_of!((*_24));
RET.fld0 = _7.0 as u128;
RET.fld6.0.2 = _28;
RET.fld6 = _13;
_34 = -_35;
RET.fld1.2 = !(-8236234438836261980_i64);
RET.fld2 = _4;
_13.1 = core::ptr::addr_of_mut!(RET.fld0);
_41 = [22_u8,108_u8,148_u8,241_u8,146_u8,209_u8,58_u8];
RET.fld6 = (_12, _13.1);
_11 = !RET.fld2;
_9 = _4 << _20;
_21 = core::ptr::addr_of_mut!(_3);
RET.fld0 = 99759734864616695228969407621104617660_u128;
RET.fld6 = _13;
_1 = _5;
match RET.fld0 {
0 => bb18,
1 => bb19,
2 => bb7,
3 => bb22,
4 => bb23,
99759734864616695228969407621104617660 => bb25,
_ => bb24
}
}
bb22 = {
Return()
}
bb23 = {
Return()
}
bb24 = {
Return()
}
bb25 = {
_7.1 = !_23;
_32 = !(-1679099980_i32);
_12.1 = _34 as isize;
Goto(bb26)
}
bb26 = {
RET.fld6.0.1 = _4;
_2.2 = _28;
RET.fld6.1 = _13.1;
(*_24) = [13_u8];
_43 = [_16];
_16 = true & true;
_6 = !(*_21);
_32 = _12.0 as i32;
_5 = [_26,_26,_26,_26,_26,_26,_26,_26];
_34 = 12811_i16 as f64;
_12.0 = 18664_i16 as u64;
_35 = _25;
_10 = RET.fld6.0.1;
_29 = '\u{109092}';
_46 = _24;
_21 = core::ptr::addr_of_mut!(_3);
_2.1 = _9;
_2.2 = _37 as f32;
Goto(bb27)
}
bb27 = {
RET.fld6 = (_2, _13.1);
_47 = _20;
_40 = -_35;
RET.fld2 = RET.fld6.0.1;
Goto(bb28)
}
bb28 = {
RET.fld6.0.1 = _6 as isize;
RET.fld6.1 = core::ptr::addr_of_mut!(RET.fld0);
(*_46) = [171_u8];
RET.fld1.2 = (-7149513576209844959_i64) * (-4422246199976680197_i64);
_44 = !_16;
_13.0.1 = !_23;
(*_21) = !_14;
_49 = _29 as u16;
_7 = (_12.0, _20, _22);
_13 = (_2, RET.fld6.1);
RET.fld6.0 = (_13.0.0, _2.1, _7.2);
(*_46) = [78_u8];
_12.2 = RET.fld6.0.2;
(*_21) = _44 as u16;
_13.1 = core::ptr::addr_of_mut!(RET.fld0);
_48 = -_26;
_17 = [_26,_48,_48,_26,_26,_26,_48,_48];
match RET.fld0 {
0 => bb29,
99759734864616695228969407621104617660 => bb31,
_ => bb30
}
}
bb29 = {
_7.1 = !_23;
_32 = !(-1679099980_i32);
_12.1 = _34 as isize;
Goto(bb26)
}
bb30 = {
Return()
}
bb31 = {
_6 = _14;
_36 = _26 as isize;
_12 = _13.0;
_25 = _40;
_28 = RET.fld1.3 + RET.fld1.3;
_42 = 157_u8 as u64;
_11 = _9 + _47;
RET.fld6.1 = _13.1;
(*_24) = [27_u8];
_49 = _14;
RET.fld6.0 = (_7.0, _12.1, _22);
RET.fld6.0 = (_42, _12.1, _22);
_36 = _13.0.1 << RET.fld2;
_33 = [_16];
_42 = !_13.0.0;
_43 = [_44];
_51 = _7.0 as isize;
_13.0.1 = _11;
_9 = _4 ^ RET.fld6.0.1;
RET.fld6.0 = (_13.0.0, _36, _22);
_17 = _19;
_42 = _13.0.0 & _7.0;
_7.0 = 96_u8 as u64;
_8 = _48 as isize;
_20 = _26 as isize;
RET.fld0 = !141981397703087491952883938104712720330_u128;
_29 = '\u{7dc18}';
_38 = [_42,_7.0];
Goto(bb32)
}
bb32 = {
RET.fld6.1 = core::ptr::addr_of_mut!(RET.fld0);
_47 = !_36;
_12.2 = _28;
_3 = !_49;
_31 = [65_u8];
_51 = _9;
_13.0.0 = _12.0;
_13.0.0 = _29 as u64;
RET.fld6.0.1 = _29 as isize;
_13.0 = (_42, _51, _28);
_20 = 22599_i16 as isize;
RET.fld6.0.0 = !_13.0.0;
_43 = _27;
_12.1 = _29 as isize;
_12.0 = (-31375_i16) as u64;
Goto(bb33)
}
bb33 = {
_46 = core::ptr::addr_of!((*_24));
_38 = [RET.fld6.0.0,_12.0];
_13.0.1 = _23 + _10;
RET.fld6.0.1 = RET.fld2 + _47;
_46 = core::ptr::addr_of!((*_24));
_12.2 = -_22;
_49 = _3;
_7.2 = _28;
_52.0 = [126252754_u32,1443241036_u32,1806094151_u32,3045410836_u32,504685583_u32,3817977470_u32,480202814_u32];
_14 = (*_21);
_46 = core::ptr::addr_of!(_30);
_57 = _16;
_9 = -RET.fld6.0.1;
Goto(bb34)
}
bb34 = {
_61 = core::ptr::addr_of!((*_46));
_9 = _2.1 & _47;
_12.2 = RET.fld1.2 as f32;
_16 = _57 | _57;
_37 = 17020939423462175235_usize * 3_usize;
_7 = _13.0;
_39 = !RET.fld2;
RET.fld6.0.1 = _2.1;
Goto(bb35)
}
bb35 = {
_59 = _29;
Goto(bb36)
}
bb36 = {
_64 = _26 as f32;
_57 = !_44;
_53.0 = -_4;
_8 = !_11;
_2.0 = _42 - _42;
RET.fld3 = core::ptr::addr_of!(_66.3);
_10 = -_11;
_53 = (RET.fld6.0.1,);
_29 = _59;
RET.fld0 = 205685144477015351190513875137264148967_u128;
_56 = !_26;
_32 = (-1305299030_i32);
RET.fld2 = (-19956_i16) as isize;
Goto(bb37)
}
bb37 = {
_10 = -_51;
RET.fld6.0.0 = _42;
_39 = _13.0.0 as isize;
RET.fld6.1 = core::ptr::addr_of_mut!(RET.fld0);
_64 = 61_i8 as f32;
_60 = _4;
_8 = _11;
RET.fld6.1 = _13.1;
_66.0 = _56 as i16;
_2 = (_13.0.0, _8, _22);
_66.3 = 2998970132_u32;
RET.fld6.0.2 = _66.0 as f32;
_68 = [_66.3,_66.3,_66.3,_66.3,_66.3,_66.3,_66.3];
_66.0 = (-17402_i16);
_14 = (*_21) & _49;
RET.fld4 = core::ptr::addr_of_mut!(RET.fld1.2);
(*_21) = _6 >> _4;
RET.fld6.0.2 = _7.2 - _2.2;
RET.fld6.0 = (_13.0.0, _10, _13.0.2);
_13.0.1 = _23 ^ _10;
_70 = [43_u8,63_u8,234_u8,229_u8,32_u8,146_u8,141_u8];
_56 = _2.0 as i128;
_9 = _2.1 - _47;
_71 = [_48,_26,_26,_56,_26,_56,_56,_56];
_32 = (-1161849751_i32) ^ 83055476_i32;
_49 = (*_21) << _11;
match _66.3 {
0 => bb8,
1 => bb6,
2 => bb38,
3 => bb39,
2998970132 => bb41,
_ => bb40
}
}
bb38 = {
_15 = RET.fld0 as f64;
_13.0.2 = (-102216943601721956073021188757972302552_i128) as f32;
_13.0.1 = -_11;
RET.fld1.2 = (*_21) as i64;
Goto(bb11)
}
bb39 = {
(*_21) = 11908_i16 as u16;
_26 = 26_u8 as i128;
_12.1 = _4 << _2.1;
_28 = _22 * RET.fld6.0.2;
_30 = [35_u8];
_12.2 = -_22;
_37 = !6_usize;
_27 = [_16];
_24 = core::ptr::addr_of!((*_24));
RET.fld0 = _7.0 as u128;
RET.fld6.0.2 = _28;
RET.fld6 = _13;
_34 = -_35;
RET.fld1.2 = !(-8236234438836261980_i64);
RET.fld2 = _4;
_13.1 = core::ptr::addr_of_mut!(RET.fld0);
_41 = [22_u8,108_u8,148_u8,241_u8,146_u8,209_u8,58_u8];
RET.fld6 = (_12, _13.1);
_11 = !RET.fld2;
_9 = _4 << _20;
_21 = core::ptr::addr_of_mut!(_3);
RET.fld0 = 99759734864616695228969407621104617660_u128;
RET.fld6 = _13;
_1 = _5;
match RET.fld0 {
0 => bb18,
1 => bb19,
2 => bb7,
3 => bb22,
4 => bb23,
99759734864616695228969407621104617660 => bb25,
_ => bb24
}
}
bb40 = {
_61 = core::ptr::addr_of!((*_46));
_9 = _2.1 & _47;
_12.2 = RET.fld1.2 as f32;
_16 = _57 | _57;
_37 = 17020939423462175235_usize * 3_usize;
_7 = _13.0;
_39 = !RET.fld2;
RET.fld6.0.1 = _2.1;
Goto(bb35)
}
bb41 = {
_17 = [_48,_26,_26,_56,_48,_48,_48,_48];
_8 = _51 - _51;
_40 = _35;
_33 = [_44];
RET.fld1.1 = core::ptr::addr_of!(_69);
_45 = _38;
_73.1 = _11;
_38 = _45;
_24 = core::ptr::addr_of!(_63);
match _66.3 {
0 => bb40,
1 => bb23,
2 => bb21,
3 => bb42,
2998970132 => bb44,
_ => bb43
}
}
bb42 = {
_59 = _29;
Goto(bb36)
}
bb43 = {
_7.1 = -RET.fld2;
_14 = !_6;
_7.2 = _13.0.2;
_12.2 = _13.0.2;
RET.fld2 = -_4;
_13.1 = core::ptr::addr_of_mut!(RET.fld0);
RET.fld4 = core::ptr::addr_of_mut!(RET.fld1.2);
_8 = _12.1 ^ _13.0.1;
RET.fld0 = '\u{46bc5}' as u128;
_7.0 = _13.0.0;
RET.fld1.2 = (-970899029100946996_i64);
_12.2 = _7.2;
RET.fld4 = core::ptr::addr_of_mut!(RET.fld1.2);
_17 = [(-15311786638052864532196082894928270055_i128),122654324032009810693620195125393671752_i128,(-43755613071263431478047312525889499080_i128),147861362297756734872877054778402945371_i128,(-29388703212494402055021458965717885496_i128),(-35060191772140058050368511670215813902_i128),84521897237300182240807901461153072420_i128,(-3996166799808045454755667902222832961_i128)];
RET.fld6.1 = core::ptr::addr_of_mut!(RET.fld0);
RET.fld2 = _2.2 as isize;
RET.fld6.0 = _13.0;
RET.fld6.0.0 = !_7.0;
_13.0 = (_7.0, _12.1, RET.fld1.3);
Goto(bb2)
}
bb44 = {
(*_21) = _14;
(*_21) = _49;
RET.fld3 = core::ptr::addr_of!(_79.1);
RET.fld1.0 = core::ptr::addr_of!(_66.3);
_71 = [_48,_48,_56,_56,_56,_56,_56,_56];
_75 = RET.fld1;
RET.fld1.2 = _75.2 * _75.2;
_7 = (_2.0, _11, _12.2);
_20 = -_10;
(*_21) = _6;
RET.fld4 = core::ptr::addr_of_mut!(_75.2);
_55 = [_2.0,_12.0];
_79 = (_66.0, _66.3);
Goto(bb45)
}
bb45 = {
RET.fld0 = !172049382050693303274752148261172673308_u128;
match _79.1 {
0 => bb22,
1 => bb2,
2 => bb9,
3 => bb27,
4 => bb32,
5 => bb42,
6 => bb13,
2998970132 => bb46,
_ => bb44
}
}
bb46 = {
RET.fld1.3 = 201_u8 as f32;
_49 = (*_21) - (*_21);
_31 = (*_61);
_2 = _7;
_43 = _27;
_29 = _59;
RET.fld1 = _75;
_44 = _57 & _16;
_75.2 = RET.fld1.2;
RET.fld6 = _13;
match _66.0 {
0 => bb47,
1 => bb48,
2 => bb49,
340282366920938463463374607431768194054 => bb51,
_ => bb50
}
}
bb47 = {
Return()
}
bb48 = {
_15 = RET.fld0 as f64;
_13.0.2 = (-102216943601721956073021188757972302552_i128) as f32;
_13.0.1 = -_11;
RET.fld1.2 = (*_21) as i64;
Goto(bb11)
}
bb49 = {
_13.0.0 = RET.fld0 as u64;
_7.1 = -RET.fld6.0.1;
_12 = (_13.0.0, _13.0.1, RET.fld6.0.2);
_4 = !_8;
RET.fld0 = 289612272532403975417111039299712776525_u128 ^ 329583159651324784501262231354507560283_u128;
_22 = _12.2 - _12.2;
_13 = (_2, RET.fld6.1);
_20 = -_2.1;
RET.fld2 = _8;
_9 = (-46_i8) as isize;
RET.fld1.2 = 3038468295817452031_i64;
_2 = (_12.0, _4, RET.fld6.0.2);
RET.fld2 = !RET.fld6.0.1;
_20 = _4 * RET.fld2;
_17 = _1;
_19 = [162219808452379911099110792392945967202_i128,(-90690401489536140056710065980237646042_i128),140515417532254700972550193853989754780_i128,120457338241329667578227421962265793639_i128,(-34853002359655562523313479874441323236_i128),(-93952007552149670573841419346468721616_i128),(-88842836205562965424475197806752728683_i128),(-47919743242025350659758597882774637017_i128)];
Call(_14 = core::intrinsics::transmute((*_21)), ReturnTo(bb12), UnwindUnreachable())
}
bb50 = {
_59 = _29;
Goto(bb36)
}
bb51 = {
_13.1 = RET.fld6.1;
RET.fld0 = 332917527324381996442953979989809161083_u128 - 66665417648782556357508882281118489065_u128;
_13.0.0 = !RET.fld6.0.0;
_52.0 = [_66.3,_79.1,_66.3,_79.1,_79.1,_66.3,_79.1];
_85 = _59 as u8;
RET.fld6.0 = (_7.0, _9, _28);
_5 = [_48,_56,_26,_48,_48,_26,_26,_56];
RET.fld6.1 = core::ptr::addr_of_mut!(_77.1);
_66.1.1 = _59 as isize;
(*_61) = [_85];
_84 = -_48;
(*_21) = _6;
_66.1.2 = _51 as f32;
RET.fld1.3 = _13.0.2 * _13.0.2;
_14 = !_49;
_80 = _68;
_77.1 = RET.fld0 << _13.0.1;
_12 = (_2.0, _73.1, _75.3);
_10 = !_9;
_38 = _55;
RET.fld1.1 = core::ptr::addr_of!(_69);
match _66.0 {
0 => bb30,
1 => bb20,
2 => bb52,
3 => bb53,
340282366920938463463374607431768194054 => bb55,
_ => bb54
}
}
bb52 = {
_7.1 = -RET.fld2;
_14 = !_6;
_7.2 = _13.0.2;
_12.2 = _13.0.2;
RET.fld2 = -_4;
_13.1 = core::ptr::addr_of_mut!(RET.fld0);
RET.fld4 = core::ptr::addr_of_mut!(RET.fld1.2);
_8 = _12.1 ^ _13.0.1;
RET.fld0 = '\u{46bc5}' as u128;
_7.0 = _13.0.0;
RET.fld1.2 = (-970899029100946996_i64);
_12.2 = _7.2;
RET.fld4 = core::ptr::addr_of_mut!(RET.fld1.2);
_17 = [(-15311786638052864532196082894928270055_i128),122654324032009810693620195125393671752_i128,(-43755613071263431478047312525889499080_i128),147861362297756734872877054778402945371_i128,(-29388703212494402055021458965717885496_i128),(-35060191772140058050368511670215813902_i128),84521897237300182240807901461153072420_i128,(-3996166799808045454755667902222832961_i128)];
RET.fld6.1 = core::ptr::addr_of_mut!(RET.fld0);
RET.fld2 = _2.2 as isize;
RET.fld6.0 = _13.0;
RET.fld6.0.0 = !_7.0;
_13.0 = (_7.0, _12.1, RET.fld1.3);
Goto(bb2)
}
bb53 = {
Return()
}
bb54 = {
Return()
}
bb55 = {
_89.0 = _13.0.2 as i16;
_77.0.0 = core::ptr::addr_of!(_89.1);
_52.0 = [_79.1,_79.1,_66.3,_66.3,_66.3,_66.3,_66.3];
RET.fld1.3 = _66.1.2;
_18 = Adt56::Variant0 { fld0: _79 };
_80 = _52.0;
_9 = _12.1 + _47;
_75.2 = _37 as i64;
_90.1 = _79.1 * _66.3;
place!(Field::<*const *const (isize, (i16, u32), *mut u128)>(Variant(_18, 1), 6)) = core::ptr::addr_of!(RET.fld5);
_77.0.2 = _75.2 << _10;
RET.fld3 = core::ptr::addr_of!(_79.1);
RET.fld1 = _75;
RET.fld6.1 = core::ptr::addr_of_mut!(RET.fld0);
RET.fld1 = _75;
_75.1 = core::ptr::addr_of!(_69);
_33 = _27;
Goto(bb56)
}
bb56 = {
_57 = _51 <= _60;
_57 = _16;
_52.1 = core::ptr::addr_of_mut!(place!(Field::<Adt49>(Variant(_18, 1), 1)).fld4);
_71 = _1;
_37 = _25 as usize;
_92 = _52;
RET.fld6.0.2 = _32 as f32;
_59 = _29;
_57 = _44;
match _79.1 {
0 => bb14,
1 => bb57,
2 => bb58,
3 => bb59,
4 => bb60,
5 => bb61,
6 => bb62,
2998970132 => bb64,
_ => bb63
}
}
bb57 = {
RET.fld6.1 = core::ptr::addr_of_mut!(RET.fld0);
_47 = !_36;
_12.2 = _28;
_3 = !_49;
_31 = [65_u8];
_51 = _9;
_13.0.0 = _12.0;
_13.0.0 = _29 as u64;
RET.fld6.0.1 = _29 as isize;
_13.0 = (_42, _51, _28);
_20 = 22599_i16 as isize;
RET.fld6.0.0 = !_13.0.0;
_43 = _27;
_12.1 = _29 as isize;
_12.0 = (-31375_i16) as u64;
Goto(bb33)
}
bb58 = {
RET.fld1.2 = 4906778401375380706_i64;
RET.fld6.0.0 = _13.0.0;
RET.fld4 = core::ptr::addr_of_mut!(RET.fld1.2);
_28 = _22;
_19 = [_26,_26,_26,_26,_26,_26,_26,_26];
RET.fld6.0.0 = !_12.0;
RET.fld1.3 = _2.2;
_27 = [_16];
_25 = _15 * _15;
_7.2 = _11 as f32;
_24 = core::ptr::addr_of!(_30);
(*_21) = !_6;
_12.0 = RET.fld6.0.0 - _7.0;
_11 = !_23;
_35 = _15;
_35 = _25;
(*_21) = RET.fld0 as u16;
match RET.fld1.2 {
0 => bb11,
1 => bb13,
2 => bb12,
4906778401375380706 => bb20,
_ => bb19
}
}
bb59 = {
Return()
}
bb60 = {
_7.1 = -RET.fld2;
_14 = !_6;
_7.2 = _13.0.2;
_12.2 = _13.0.2;
RET.fld2 = -_4;
_13.1 = core::ptr::addr_of_mut!(RET.fld0);
RET.fld4 = core::ptr::addr_of_mut!(RET.fld1.2);
_8 = _12.1 ^ _13.0.1;
RET.fld0 = '\u{46bc5}' as u128;
_7.0 = _13.0.0;
RET.fld1.2 = (-970899029100946996_i64);
_12.2 = _7.2;
RET.fld4 = core::ptr::addr_of_mut!(RET.fld1.2);
_17 = [(-15311786638052864532196082894928270055_i128),122654324032009810693620195125393671752_i128,(-43755613071263431478047312525889499080_i128),147861362297756734872877054778402945371_i128,(-29388703212494402055021458965717885496_i128),(-35060191772140058050368511670215813902_i128),84521897237300182240807901461153072420_i128,(-3996166799808045454755667902222832961_i128)];
RET.fld6.1 = core::ptr::addr_of_mut!(RET.fld0);
RET.fld2 = _2.2 as isize;
RET.fld6.0 = _13.0;
RET.fld6.0.0 = !_7.0;
_13.0 = (_7.0, _12.1, RET.fld1.3);
Goto(bb2)
}
bb61 = {
_13.1 = RET.fld6.1;
RET.fld0 = 332917527324381996442953979989809161083_u128 - 66665417648782556357508882281118489065_u128;
_13.0.0 = !RET.fld6.0.0;
_52.0 = [_66.3,_79.1,_66.3,_79.1,_79.1,_66.3,_79.1];
_85 = _59 as u8;
RET.fld6.0 = (_7.0, _9, _28);
_5 = [_48,_56,_26,_48,_48,_26,_26,_56];
RET.fld6.1 = core::ptr::addr_of_mut!(_77.1);
_66.1.1 = _59 as isize;
(*_61) = [_85];
_84 = -_48;
(*_21) = _6;
_66.1.2 = _51 as f32;
RET.fld1.3 = _13.0.2 * _13.0.2;
_14 = !_49;
_80 = _68;
_77.1 = RET.fld0 << _13.0.1;
_12 = (_2.0, _73.1, _75.3);
_10 = !_9;
_38 = _55;
RET.fld1.1 = core::ptr::addr_of!(_69);
match _66.0 {
0 => bb30,
1 => bb20,
2 => bb52,
3 => bb53,
340282366920938463463374607431768194054 => bb55,
_ => bb54
}
}
bb62 = {
(*_21) = 11908_i16 as u16;
_26 = 26_u8 as i128;
_12.1 = _4 << _2.1;
_28 = _22 * RET.fld6.0.2;
_30 = [35_u8];
_12.2 = -_22;
_37 = !6_usize;
_27 = [_16];
_24 = core::ptr::addr_of!((*_24));
RET.fld0 = _7.0 as u128;
RET.fld6.0.2 = _28;
RET.fld6 = _13;
_34 = -_35;
RET.fld1.2 = !(-8236234438836261980_i64);
RET.fld2 = _4;
_13.1 = core::ptr::addr_of_mut!(RET.fld0);
_41 = [22_u8,108_u8,148_u8,241_u8,146_u8,209_u8,58_u8];
RET.fld6 = (_12, _13.1);
_11 = !RET.fld2;
_9 = _4 << _20;
_21 = core::ptr::addr_of_mut!(_3);
RET.fld0 = 99759734864616695228969407621104617660_u128;
RET.fld6 = _13;
_1 = _5;
match RET.fld0 {
0 => bb18,
1 => bb19,
2 => bb7,
3 => bb22,
4 => bb23,
99759734864616695228969407621104617660 => bb25,
_ => bb24
}
}
bb63 = {
_13.0.0 = RET.fld0 as u64;
_7.1 = -RET.fld6.0.1;
_12 = (_13.0.0, _13.0.1, RET.fld6.0.2);
_4 = !_8;
RET.fld0 = 289612272532403975417111039299712776525_u128 ^ 329583159651324784501262231354507560283_u128;
_22 = _12.2 - _12.2;
_13 = (_2, RET.fld6.1);
_20 = -_2.1;
RET.fld2 = _8;
_9 = (-46_i8) as isize;
RET.fld1.2 = 3038468295817452031_i64;
_2 = (_12.0, _4, RET.fld6.0.2);
RET.fld2 = !RET.fld6.0.1;
_20 = _4 * RET.fld2;
_17 = _1;
_19 = [162219808452379911099110792392945967202_i128,(-90690401489536140056710065980237646042_i128),140515417532254700972550193853989754780_i128,120457338241329667578227421962265793639_i128,(-34853002359655562523313479874441323236_i128),(-93952007552149670573841419346468721616_i128),(-88842836205562965424475197806752728683_i128),(-47919743242025350659758597882774637017_i128)];
Call(_14 = core::intrinsics::transmute((*_21)), ReturnTo(bb12), UnwindUnreachable())
}
bb64 = {
(*_21) = !_14;
RET.fld6.0 = (_42, _53.0, _12.2);
place!(Field::<(u64, isize, f32)>(Variant(_18, 1), 0)) = (_2.0, _51, RET.fld1.3);
_81.1 = core::ptr::addr_of!(_59);
RET.fld4 = core::ptr::addr_of_mut!(RET.fld1.2);
_7.2 = -_66.1.2;
_2.1 = Field::<(u64, isize, f32)>(Variant(_18, 1), 0).1;
place!(Field::<Adt49>(Variant(_18, 1), 1)).fld1 = _29;
_80 = [_90.1,_79.1,_79.1,_90.1,_66.3,_90.1,_79.1];
_32 = !(-1827498609_i32);
_35 = _15 - _25;
place!(Field::<(u64, isize, f32)>(Variant(_18, 1), 0)).0 = _42 | _7.0;
Goto(bb65)
}
bb65 = {
RET.fld1.2 = _75.2;
_48 = !_84;
_49 = !(*_21);
_9 = _4 << _6;
_91 = _56;
place!(Field::<Adt49>(Variant(_18, 1), 1)).fld0.1 = _13.1;
_75 = RET.fld1;
_27 = [_16];
_73.0 = _13.0.0 - _12.0;
RET.fld1.3 = _85 as f32;
_25 = _35;
place!(Field::<Adt49>(Variant(_18, 1), 1)).fld4.0 = [12_i8,(-52_i8)];
_7.1 = -_23;
_63 = [_85];
(*_21) = _89.0 as u16;
_81.2 = -_25;
place!(Field::<(u64, isize, f32)>(Variant(_18, 1), 0)) = RET.fld6.0;
_95 = _59;
match _79.1 {
0 => bb27,
1 => bb66,
2998970132 => bb68,
_ => bb67
}
}
bb66 = {
RET.fld0 = !172049382050693303274752148261172673308_u128;
match _79.1 {
0 => bb22,
1 => bb2,
2 => bb9,
3 => bb27,
4 => bb32,
5 => bb42,
6 => bb13,
2998970132 => bb46,
_ => bb44
}
}
bb67 = {
_7.1 = -RET.fld2;
_14 = !_6;
_7.2 = _13.0.2;
_12.2 = _13.0.2;
RET.fld2 = -_4;
_13.1 = core::ptr::addr_of_mut!(RET.fld0);
RET.fld4 = core::ptr::addr_of_mut!(RET.fld1.2);
_8 = _12.1 ^ _13.0.1;
RET.fld0 = '\u{46bc5}' as u128;
_7.0 = _13.0.0;
RET.fld1.2 = (-970899029100946996_i64);
_12.2 = _7.2;
RET.fld4 = core::ptr::addr_of_mut!(RET.fld1.2);
_17 = [(-15311786638052864532196082894928270055_i128),122654324032009810693620195125393671752_i128,(-43755613071263431478047312525889499080_i128),147861362297756734872877054778402945371_i128,(-29388703212494402055021458965717885496_i128),(-35060191772140058050368511670215813902_i128),84521897237300182240807901461153072420_i128,(-3996166799808045454755667902222832961_i128)];
RET.fld6.1 = core::ptr::addr_of_mut!(RET.fld0);
RET.fld2 = _2.2 as isize;
RET.fld6.0 = _13.0;
RET.fld6.0.0 = !_7.0;
_13.0 = (_7.0, _12.1, RET.fld1.3);
Goto(bb2)
}
bb68 = {
_27 = [_16];
_106.2 = _7.2;
_7.0 = _13.0.0;
_106.0 = _85 as u64;
_84 = _48;
_99 = !_7.0;
_62 = Field::<Adt49>(Variant(_18, 1), 1).fld0.1;
_89.1 = _79.1 - _66.3;
_106.2 = -_28;
_102 = _35 * _25;
_73 = (_2.0, _9, _66.1.2);
RET.fld6.0.1 = _51;
_106.1 = _36;
_77.0 = RET.fld1;
_69.1 = _66.3 & _90.1;
_65 = RET.fld6.1;
_78 = Adt53::Variant3 { fld0: _75,fld1: _41,fld2: _75.2 };
_44 = _57;
place!(Field::<Adt49>(Variant(_18, 1), 1)).fld0.0 = (_99, RET.fld6.0.1, RET.fld6.0.2);
RET.fld6.0.0 = _7.0 & _2.0;
place!(Field::<Adt49>(Variant(_18, 1), 1)).fld4.1 = core::ptr::addr_of!(_29);
_13.0.0 = _42;
_52.1 = _92.1;
_31 = [_85];
_105 = Adt63::Variant0 { fld0: _92,fld1: _106 };
_110.0 = _89.0;
Goto(bb69)
}
bb69 = {
place!(Field::<([u32; 7], *mut ([i8; 2], *const char, f64))>(Variant(_105, 0), 0)) = (_92.0, _52.1);
_110 = (_89.0, _69.1);
_79 = (_110.0, _110.1);
_90.0 = _110.0 * _79.0;
RET.fld1.2 = _29 as i64;
_76 = !_110.0;
_104 = (_12.1,);
SetDiscriminant(_78, 3);
_73.0 = !RET.fld6.0.0;
_111 = [78_i8,110_i8];
_19 = [_56,_26,_26,_56,_84,_26,_56,_48];
Goto(bb70)
}
bb70 = {
RET.fld0 = _13.0.1 as u128;
place!(Field::<Adt49>(Variant(_18, 1), 1)).fld4 = (_111, _81.1, _35);
_53 = _104;
_77.1 = (*_62);
RET.fld6.0.0 = _77.1 as u64;
_12.1 = _85 as isize;
_30 = [_85];
RET.fld4 = core::ptr::addr_of_mut!(RET.fld1.2);
_49 = _6 >> _14;
_107 = [_44];
_56 = -_91;
RET.fld3 = core::ptr::addr_of!(_116.1.1);
(*_65) = !_77.1;
_7.1 = _79.1 as isize;
_117 = RET.fld6.0.1;
place!(Field::<(*const u32, *const (i16, u32), i64, f32)>(Variant(_78, 3), 0)) = (_75.0, _75.1, _77.0.2, _73.2);
_81.2 = _102;
match _66.3 {
0 => bb29,
1 => bb8,
2 => bb7,
3 => bb37,
2998970132 => bb71,
_ => bb24
}
}
bb71 = {
place!(Field::<(u64, isize, f32)>(Variant(_18, 1), 0)) = (RET.fld6.0.0, _20, _106.2);
_63 = [_85];
(*_61) = [_85];
RET.fld3 = core::ptr::addr_of!(_89.1);
SetDiscriminant(_105, 1);
RET.fld1.0 = core::ptr::addr_of!(_116.1.1);
place!(Field::<Adt49>(Variant(_18, 1), 1)).fld6 = _37 as f32;
Goto(bb72)
}
bb72 = {
place!(Field::<(*const u32, *const (i16, u32), i64, f32)>(Variant(_78, 3), 0)).3 = -_66.1.2;
_94 = _104.0;
_116.1.1 = _89.1;
_72 = _60;
_84 = _26 ^ _91;
(*_61) = (*_24);
RET.fld6.0.2 = Field::<Adt49>(Variant(_18, 1), 1).fld6;
_89.0 = _79.0 - _110.0;
_120 = _16;
_116 = (RET.fld6.0.1, _90, _62);
_19 = [_84,_91,_91,_84,_26,_84,_56,_56];
_96 = _32 as f64;
place!(Field::<(u64, isize, f32)>(Variant(_18, 1), 0)).0 = RET.fld6.0.0 << (*_65);
_22 = Field::<Adt49>(Variant(_18, 1), 1).fld6 + _66.1.2;
_66.1.0 = _42;
_96 = -_81.2;
_45 = _38;
place!(Field::<Adt49>(Variant(_18, 1), 1)).fld0.0.2 = _48 as f32;
(*_46) = _31;
_108 = _37 & _37;
_70 = _41;
Goto(bb73)
}
bb73 = {
RET.fld6.0.2 = _37 as f32;
place!(Field::<Adt49>(Variant(_18, 1), 1)).fld0.1 = _65;
place!(Field::<u128>(Variant(_105, 1), 5)) = _95 as u128;
_114.2 = _120;
_79 = _90;
_110.1 = !_79.1;
_73.2 = _106.2 * _22;
place!(Field::<Adt49>(Variant(_18, 1), 1)).fld0.0.1 = !_53.0;
_9 = RET.fld6.0.1 * _104.0;
place!(Field::<Adt49>(Variant(_18, 1), 1)).fld2 = core::ptr::addr_of!(RET.fld5);
(*_65) = _32 as u128;
_66.3 = _110.1;
_8 = _116.0 - _94;
(*_61) = [_85];
RET.fld5 = core::ptr::addr_of!(_116);
_69 = (_116.1.0, _116.1.1);
_19 = [_91,_56,_56,_56,_26,_84,_84,_26];
_25 = _75.2 as f64;
Goto(bb74)
}
bb74 = {
Call(_124 = dump_var(19_usize, 43_usize, Move(_43), 33_usize, Move(_33), 47_usize, Move(_47), 30_usize, Move(_30)), ReturnTo(bb75), UnwindUnreachable())
}
bb75 = {
Call(_124 = dump_var(19_usize, 68_usize, Move(_68), 48_usize, Move(_48), 42_usize, Move(_42), 14_usize, Move(_14)), ReturnTo(bb76), UnwindUnreachable())
}
bb76 = {
Call(_124 = dump_var(19_usize, 80_usize, Move(_80), 36_usize, Move(_36), 44_usize, Move(_44), 37_usize, Move(_37)), ReturnTo(bb77), UnwindUnreachable())
}
bb77 = {
Call(_124 = dump_var(19_usize, 71_usize, Move(_71), 108_usize, Move(_108), 8_usize, Move(_8), 107_usize, Move(_107)), ReturnTo(bb78), UnwindUnreachable())
}
bb78 = {
Call(_124 = dump_var(19_usize, 56_usize, Move(_56), 94_usize, Move(_94), 29_usize, Move(_29), 16_usize, Move(_16)), ReturnTo(bb79), UnwindUnreachable())
}
bb79 = {
Call(_124 = dump_var(19_usize, 1_usize, Move(_1), 23_usize, Move(_23), 59_usize, Move(_59), 104_usize, Move(_104)), ReturnTo(bb80), UnwindUnreachable())
}
bb80 = {
Call(_124 = dump_var(19_usize, 79_usize, Move(_79), 90_usize, Move(_90), 89_usize, Move(_89), 27_usize, Move(_27)), ReturnTo(bb81), UnwindUnreachable())
}
bb81 = {
Call(_124 = dump_var(19_usize, 69_usize, Move(_69), 63_usize, Move(_63), 60_usize, Move(_60), 26_usize, Move(_26)), ReturnTo(bb82), UnwindUnreachable())
}
bb82 = {
Return()
}

}
}
pub fn main() {
                fn0(std::hint::black_box(false), std::hint::black_box('\u{10752d}'), std::hint::black_box((-9223372036854775808_isize)), std::hint::black_box(102_i8), std::hint::black_box(14539_i16), std::hint::black_box((-458145594_i32)), std::hint::black_box(1136133763041003944_i64), std::hint::black_box((-45243145789926270285034343026558883030_i128)), std::hint::black_box(15610856750586334188_u64), std::hint::black_box(115_u8), std::hint::black_box(41956_u16), std::hint::black_box(2871048325_u32));
                
            }
#[derive(Debug)]
pub enum Adt48 {
Variant0{
fld0: (*const u32, *const (i16, u32), i64, f32),

},
Variant1{
fld0: [bool; 1],
fld1: usize,
fld2: isize,
fld3: i8,
fld4: [u32; 7],

},
Variant2{
fld0: bool,
fld1: *mut ([i8; 2], *const char, f64),

},
Variant3{
fld0: i128,
fld1: *const [u8; 1],
fld2: [u64; 2],
fld3: [i8; 2],
fld4: (isize,),

}}
#[derive(Debug)]
pub struct Adt49 {
fld0: ((u64, isize, f32), *mut u128),
fld1: char,
fld2: *const *const (isize, (i16, u32), *mut u128),
fld3: i8,
fld4: ([i8; 2], *const char, f64),
fld5: [i128; 8],
fld6: f32,
}
#[derive(Debug,Copy,Clone)]
pub enum Adt50 {
Variant0{
fld0: *const ((u64, isize, f32), *mut u128),

},
Variant1{
fld0: *mut ([i8; 2], *const char, f64),
fld1: [u8; 1],
fld2: u16,
fld3: usize,
fld4: *mut u128,
fld5: i32,
fld6: u64,
fld7: ((*const u32, *const (i16, u32), i64, f32), u128),

},
Variant2{
fld0: *const char,
fld1: *const ((u64, isize, f32), *mut u128),
fld2: (*const u32, *const (i16, u32), i64, f32),
fld3: *mut ([i8; 2], *const char, f64),
fld4: u16,
fld5: usize,
fld6: u32,
fld7: (*const (i16, u32), u64),

}}
#[derive(Debug,Copy,Clone)]
pub enum Adt51 {
Variant0{
fld0: *const ((u64, isize, f32), *mut u128),
fld1: *const (isize, (i16, u32), *mut u128),
fld2: f32,
fld3: i64,
fld4: [i128; 8],
fld5: *mut ([i8; 2], *const char, f64),

},
Variant1{
fld0: (bool, char, bool),
fld1: f32,
fld2: isize,
fld3: [u64; 2],
fld4: *mut u128,

},
Variant2{
fld0: bool,
fld1: f64,
fld2: u16,
fld3: (*const (i16, u32), u64),
fld4: *const u8,
fld5: [u64; 2],
fld6: *const [u8; 1],
fld7: i128,

}}
#[derive(Debug)]
pub enum Adt52 {
Variant0{
fld0: f64,
fld1: u8,
fld2: Adt51,
fld3: [i128; 8],
fld4: usize,
fld5: *const *const (isize, (i16, u32), *mut u128),
fld6: i128,

},
Variant1{
fld0: [u8; 1],
fld1: [i128; 8],
fld2: *const (isize, (i16, u32), *mut u128),
fld3: i8,

},
Variant2{
fld0: Adt49,
fld1: u8,
fld2: i128,
fld3: *const u32,
fld4: u64,
fld5: i32,

},
Variant3{
fld0: *const u32,

}}
#[derive(Debug)]
pub enum Adt53 {
Variant0{
fld0: i64,
fld1: Adt52,
fld2: u32,
fld3: (i16, (u64, isize, f32), *const (i16, u32), u32),
fld4: f64,

},
Variant1{
fld0: Adt48,

},
Variant2{
fld0: [u8; 7],
fld1: [i8; 2],
fld2: [i128; 8],
fld3: i8,
fld4: i16,
fld5: *const [u8; 1],

},
Variant3{
fld0: (*const u32, *const (i16, u32), i64, f32),
fld1: [u8; 7],
fld2: i64,

}}
#[derive(Debug,Copy,Clone)]
pub enum Adt54 {
Variant0{
fld0: [u64; 2],
fld1: Adt51,
fld2: *const u32,

},
Variant1{
fld0: [u8; 7],

},
Variant2{
fld0: [u8; 7],

}}
#[derive(Debug,Copy,Clone)]
pub struct Adt55 {
fld0: (i16, u32),
fld1: u8,
fld2: *const char,
fld3: (*const u32, *const (i16, u32), i64, f32),
fld4: *mut ([i8; 2], *const char, f64),
}
#[derive(Debug)]
pub enum Adt56 {
Variant0{
fld0: (i16, u32),

},
Variant1{
fld0: (u64, isize, f32),
fld1: Adt49,
fld2: *mut u128,
fld3: i8,
fld4: u8,
fld5: i32,
fld6: *const *const (isize, (i16, u32), *mut u128),

}}
#[derive(Debug)]
pub enum Adt57 {
Variant0{
fld0: Adt51,
fld1: *const *const (isize, (i16, u32), *mut u128),
fld2: i128,
fld3: *mut u128,

},
Variant1{
fld0: *const [u8; 1],
fld1: char,
fld2: Adt53,
fld3: Adt52,
fld4: (*const u32, *const (i16, u32), i64, f32),
fld5: *const ((u64, isize, f32), *mut u128),
fld6: u32,

},
Variant2{
fld0: bool,
fld1: Adt51,
fld2: u64,
fld3: (*const (i16, u32), u64),
fld4: (*const u32, *const (i16, u32), i64, f32),

},
Variant3{
fld0: f32,
fld1: *const ((u64, isize, f32), *mut u128),
fld2: *const (i16, u32),

}}
#[derive(Debug)]
pub enum Adt58 {
Variant0{
fld0: Adt55,
fld1: *const (isize, (i16, u32), *mut u128),
fld2: *const (i16, u32),
fld3: (isize, (i16, u32), *mut u128),
fld4: [u8; 7],
fld5: Adt54,
fld6: *mut u16,

},
Variant1{
fld0: (*const (i16, u32), u64),
fld1: ([u32; 7], *mut ([i8; 2], *const char, f64)),
fld2: Adt54,
fld3: Adt57,
fld4: usize,
fld5: i32,
fld6: (bool, char, bool),

},
Variant2{
fld0: (*const u32, *const (i16, u32), i64, f32),
fld1: (bool, char, bool),
fld2: [u8; 1],

},
Variant3{
fld0: Adt49,
fld1: Adt51,

}}
#[derive(Debug)]
pub enum Adt59 {
Variant0{
fld0: *mut u16,
fld1: char,
fld2: *mut i64,
fld3: i8,
fld4: Adt55,
fld5: *const *const (isize, (i16, u32), *mut u128),

},
Variant1{
fld0: Adt48,
fld1: *const (i16, u32),
fld2: [bool; 1],

}}
#[derive(Debug,Copy,Clone)]
pub struct Adt60 {
fld0: u128,
fld1: (*const u32, *const (i16, u32), i64, f32),
fld2: isize,
fld3: *const u32,
fld4: *mut i64,
fld5: *const (isize, (i16, u32), *mut u128),
fld6: ((u64, isize, f32), *mut u128),
}
#[derive(Debug)]
pub enum Adt61 {
Variant0{
fld0: ([i8; 2], *const char, f64),
fld1: Adt48,
fld2: Adt55,
fld3: [u32; 7],
fld4: f64,

},
Variant1{
fld0: Adt51,

},
Variant2{
fld0: ([i8; 2], *const char, f64),
fld1: ((u64, isize, f32), *mut u128),
fld2: *const u8,

},
Variant3{
fld0: (*const u32, *const (i16, u32), i64, f32),
fld1: ((*const u32, *const (i16, u32), i64, f32), u128),
fld2: Adt58,
fld3: [u8; 7],

}}
#[derive(Debug)]
pub enum Adt62 {
Variant0{
fld0: *const *const (isize, (i16, u32), *mut u128),
fld1: Adt55,

},
Variant1{
fld0: u16,
fld1: (u64, isize, f32),
fld2: *mut i64,
fld3: i8,
fld4: f64,
fld5: Adt48,

},
Variant2{
fld0: [u8; 1],
fld1: char,
fld2: u64,
fld3: i8,
fld4: *mut u128,

},
Variant3{
fld0: [i8; 2],
fld1: char,
fld2: Adt53,
fld3: [u32; 7],
fld4: [u8; 7],
fld5: ([i8; 2], *const char, f64),

}}
#[derive(Debug)]
pub enum Adt63 {
Variant0{
fld0: ([u32; 7], *mut ([i8; 2], *const char, f64)),
fld1: (u64, isize, f32),

},
Variant1{
fld0: *const char,
fld1: Adt53,
fld2: *const (i16, u32),
fld3: f64,
fld4: *const (isize, (i16, u32), *mut u128),
fld5: u128,
fld6: i64,

},
Variant2{
fld0: Adt62,
fld1: Adt50,

},
Variant3{
fld0: [i128; 8],
fld1: *mut u128,
fld2: ([u32; 7], *mut ([i8; 2], *const char, f64)),
fld3: i8,
fld4: [u32; 7],
fld5: Adt49,
fld6: (i16, (u64, isize, f32), *const (i16, u32), u32),
fld7: *const u32,

}}
#[derive(Debug)]
pub enum Adt64 {
Variant0{
fld0: Adt54,
fld1: u32,
fld2: Adt59,
fld3: i8,

},
Variant1{
fld0: (u64, isize, f32),
fld1: [bool; 1],
fld2: Adt57,
fld3: u64,
fld4: Adt59,
fld5: i32,
fld6: Adt49,

},
Variant2{
fld0: Adt52,
fld1: Adt62,
fld2: f64,
fld3: (*const u32, *const (i16, u32), i64, f32),
fld4: u32,
fld5: Adt61,
fld6: Adt63,
fld7: (i16, u32),

}}

