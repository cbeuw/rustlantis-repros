#![recursion_limit = "256"]
    #![feature(custom_mir, core_intrinsics, const_hash)]
    #![allow(unused_parens, unused_assignments, overflowing_literals)]
    extern crate core;
    use core::intrinsics::mir::*;

    use std::fmt::Debug;

    #[inline(never)]
    pub fn dump_var<T: Debug, U: Debug, V: Debug, W: Debug>(f: usize,
        var0: usize, val0: T,
        var1: usize, val1: U,
        var2: usize, val2: V,
        var3: usize, val3: W,
    ) {
        println!("fn{f}:_{var0} = {val0:?}\n_{var1} = {val1:?}\n_{var2} = {val2:?}\n_{var3} = {val3:?}");
    }
    #[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn0(mut _1: bool,mut _2: char,mut _3: isize,mut _4: i8,mut _5: u64,mut _6: u128,mut _7: i64,mut _8: i128,mut _9: usize,mut _10: u8,mut _11: u16,mut _12: u32) -> bool {
mir! {
type RET = bool;
let _13: f64;
let _14: Adt58;
let _15: [i128; 3];
let _16: f32;
let _17: f32;
let _18: *mut i16;
let _19: i8;
let _20: *mut f32;
let _21: u8;
let _22: [i8; 7];
let _23: char;
let _24: f64;
let _25: [i32; 7];
let _26: *mut i32;
let _27: *mut *mut f32;
let _28: char;
let _29: ([i64; 6], *mut i16);
let _30: i128;
let _31: (isize,);
let _32: isize;
let _33: (i64, f64, i8, char);
let _34: usize;
let _35: (isize, i16, char, (i64, f64, i8, char), (i16, u16, bool, f64), (isize,));
let _36: ();
let _37: ();
{
RET = true;
_10 = 53_u8;
_12 = !552873367_u32;
_5 = _10 as u64;
RET = !true;
_1 = !true;
_13 = 2_usize as f64;
_3 = (-113_isize) ^ 51_isize;
_5 = (-2115_i16) as u64;
_14.fld3.fld2 = [(-2074455556_i32),(-1846403528_i32),(-838139600_i32),(-763479795_i32),1306209114_i32,1772885070_i32,(-1044428273_i32)];
_9 = (-21356_i16) as usize;
_6 = !197653003278661487196690594719525067676_u128;
_14.fld3.fld4.2 = 45127_u16 >> _6;
_14.fld2 = core::ptr::addr_of_mut!(_8);
_5 = 7072721468256551417_u64 % 11807034280335703300_u64;
_10 = !188_u8;
_4 = 47_i8 | (-126_i8);
_14.fld3.fld3 = [_4,_4,_4,_4,_4,_4,_4];
_14.fld0 = (_3,);
_14.fld3.fld4.0 = core::ptr::addr_of_mut!(_8);
_14.fld2 = core::ptr::addr_of_mut!(_8);
_17 = _14.fld3.fld4.2 as f32;
_1 = false;
_2 = '\u{28e91}';
_1 = false;
RET = !_1;
_4 = !(-61_i8);
Call(_14.fld3.fld4 = fn1(_14.fld2, _13, _1, _3, _4), bb1, UnwindUnreachable())
}
bb1 = {
_16 = 9705_i16 as f32;
_4 = 1436086700_i32 as i8;
_14.fld3.fld3 = [_4,_4,_4,_4,_4,_4,_4];
_3 = _9 as isize;
_7 = 2970304535666169193_i64;
_6 = 40935806725245901215605981391848137361_u128 << _14.fld0.0;
_9 = !4412562636776230104_usize;
_11 = 6732_i16 as u16;
_13 = _14.fld3.fld4.1 - _14.fld3.fld4.1;
_4 = 6_i8;
_2 = '\u{2b94c}';
_11 = _14.fld3.fld4.2;
_6 = !60525972512435662072667112326191578151_u128;
_14.fld3.fld1 = core::ptr::addr_of_mut!(_20);
_14.fld3.fld6 = core::ptr::addr_of!(_18);
_8 = _9 as i128;
match _7 {
2970304535666169193 => bb3,
_ => bb2
}
}
bb2 = {
Return()
}
bb3 = {
_21 = !_10;
_10 = _6 as u8;
_3 = _14.fld0.0 >> _5;
_14.fld3.fld3 = [_4,_4,_4,_4,_4,_4,_4];
_14.fld3.fld5 = core::ptr::addr_of_mut!(_14.fld3.fld2);
_4 = _3 as i8;
_12 = 1451217508_u32;
_14.fld3.fld0 = _1;
_5 = _8 as u64;
_14.fld2 = core::ptr::addr_of_mut!(_8);
_2 = '\u{c0819}';
_9 = !1_usize;
match _7 {
0 => bb1,
1 => bb2,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
6 => bb8,
2970304535666169193 => bb10,
_ => bb9
}
}
bb4 = {
Return()
}
bb5 = {
_16 = 9705_i16 as f32;
_4 = 1436086700_i32 as i8;
_14.fld3.fld3 = [_4,_4,_4,_4,_4,_4,_4];
_3 = _9 as isize;
_7 = 2970304535666169193_i64;
_6 = 40935806725245901215605981391848137361_u128 << _14.fld0.0;
_9 = !4412562636776230104_usize;
_11 = 6732_i16 as u16;
_13 = _14.fld3.fld4.1 - _14.fld3.fld4.1;
_4 = 6_i8;
_2 = '\u{2b94c}';
_11 = _14.fld3.fld4.2;
_6 = !60525972512435662072667112326191578151_u128;
_14.fld3.fld1 = core::ptr::addr_of_mut!(_20);
_14.fld3.fld6 = core::ptr::addr_of!(_18);
_8 = _9 as i128;
match _7 {
2970304535666169193 => bb3,
_ => bb2
}
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_14.fld2 = _14.fld3.fld4.0;
_23 = _2;
_14.fld3.fld4.1 = _13 + _13;
_15 = [_8,_8,_8];
_14.fld3.fld2 = [(-1200505430_i32),1086592919_i32,(-75946760_i32),137486377_i32,1047181540_i32,126601115_i32,(-487102557_i32)];
_25 = [1097430522_i32,1514829269_i32,(-1482471033_i32),1120526220_i32,(-1335558358_i32),208229764_i32,(-1603942878_i32)];
_14.fld0.0 = _3;
_10 = _17 as u8;
_4 = _23 as i8;
_5 = (-1826493903_i32) as u64;
_14.fld3.fld4.0 = core::ptr::addr_of_mut!(_8);
_19 = _4 << _12;
_15 = [_8,_8,_8];
_14.fld3.fld5 = core::ptr::addr_of_mut!(_25);
_3 = _14.fld0.0 - _14.fld0.0;
_6 = _14.fld3.fld4.1 as u128;
_11 = _21 as u16;
_24 = _21 as f64;
_17 = _16 / f32::INFINITY;
_14.fld2 = core::ptr::addr_of_mut!(_8);
_14.fld3.fld2 = _25;
_14.fld3.fld4.2 = _11 ^ _11;
_27 = core::ptr::addr_of_mut!(_20);
_13 = -_14.fld3.fld4.1;
_14.fld3.fld2 = [114945580_i32,(-596128435_i32),1070861568_i32,2026700861_i32,(-600176135_i32),(-1670710281_i32),655732840_i32];
_14.fld3.fld1 = core::ptr::addr_of_mut!(_20);
_14.fld2 = core::ptr::addr_of_mut!(_8);
Call(_11 = fn17(_8, _2, _14.fld3.fld0, _14.fld3.fld5, _8, _23, _14.fld3.fld4.0, _14.fld3.fld1), bb11, UnwindUnreachable())
}
bb11 = {
_19 = _4 << _5;
_22 = [_4,_4,_19,_19,_19,_4,_19];
_3 = !_14.fld0.0;
_2 = _23;
_28 = _2;
_16 = 1144338555_i32 as f32;
_14.fld0.0 = -_3;
_5 = 5683205152916282614_u64 | 14642695146375218869_u64;
match _12 {
0 => bb8,
1 => bb2,
2 => bb10,
3 => bb4,
4 => bb5,
1451217508 => bb13,
_ => bb12
}
}
bb12 = {
Return()
}
bb13 = {
_28 = _23;
_27 = core::ptr::addr_of_mut!((*_27));
_16 = _17 + _17;
_13 = _14.fld3.fld4.1;
(*_27) = core::ptr::addr_of_mut!(_17);
_12 = _7 as u32;
_15 = [_8,_8,_8];
_14.fld0.0 = _3;
_19 = _4 << _8;
_21 = _10 + _10;
_9 = 4_usize | 0_usize;
_27 = core::ptr::addr_of_mut!((*_27));
_1 = _14.fld3.fld0;
_31.0 = _3 - _14.fld0.0;
_2 = _28;
_10 = _21;
_32 = _31.0 >> _31.0;
_10 = _21;
_13 = _19 as f64;
(*_27) = core::ptr::addr_of_mut!((*_20));
RET = !_1;
Goto(bb14)
}
bb14 = {
_7 = (-6351822283968918057_i64) + 5230972203592821800_i64;
_33.3 = _23;
_14.fld3.fld4.2 = _11 % 52315_u16;
_24 = _32 as f64;
_25 = [(-1798445109_i32),1926683192_i32,(-1307580580_i32),755948944_i32,(-895791561_i32),1299439563_i32,(-2144928241_i32)];
_29.0 = [_7,_7,_7,_7,_7,_7];
_7 = 626362714279165015_i64 | (-2694214504043649590_i64);
_17 = _16;
_31 = (_32,);
_14.fld1 = core::ptr::addr_of_mut!(_35.1);
_14.fld3.fld1 = _27;
_31.0 = _14.fld0.0 - _3;
_35.4.0 = 10369_i16 - 11822_i16;
_33.2 = _4 * _4;
_35.2 = _2;
_14.fld3.fld6 = core::ptr::addr_of!(_29.1);
_16 = _6 as f32;
_35.3.0 = _9 as i64;
_35.0 = _33.2 as isize;
_35.5.0 = -_3;
RET = !_14.fld3.fld0;
_29.1 = core::ptr::addr_of_mut!(_35.1);
_33.2 = _19;
Goto(bb15)
}
bb15 = {
Call(_36 = dump_var(0_usize, 21_usize, Move(_21), 8_usize, Move(_8), 19_usize, Move(_19), 25_usize, Move(_25)), bb16, UnwindUnreachable())
}
bb16 = {
Call(_36 = dump_var(0_usize, 3_usize, Move(_3), 4_usize, Move(_4), 31_usize, Move(_31), 2_usize, Move(_2)), bb17, UnwindUnreachable())
}
bb17 = {
Call(_36 = dump_var(0_usize, 7_usize, Move(_7), 6_usize, Move(_6), 37_usize, _37, 37_usize, _37), bb18, UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn1(mut _1: *mut i128,mut _2: f64,mut _3: bool,mut _4: isize,mut _5: i8) -> (*mut i128, f64, u16) {
mir! {
type RET = (*mut i128, f64, u16);
let _6: (i64, f64, i8, char);
let _7: char;
let _8: [i128; 2];
let _9: Adt50;
let _10: *mut *mut f32;
let _11: (i8, u64);
let _12: [u32; 7];
let _13: bool;
let _14: [i128; 2];
let _15: bool;
let _16: Adt64;
let _17: *const isize;
let _18: i16;
let _19: ();
let _20: ();
{
_5 = 66_i8 - (-62_i8);
RET.2 = '\u{7de6}' as u16;
RET.1 = 13065_i16 as f64;
_6 = ((-3805255166844133807_i64), _2, _5, '\u{a989b}');
_6.1 = 238_u8 as f64;
_6.0 = !3812172624414247712_i64;
_7 = _6.3;
_1 = core::ptr::addr_of_mut!((*_1));
_3 = false;
(*_1) = (-129605011395590924631169465922993313567_i128);
_8 = [(*_1),(*_1)];
RET.0 = _1;
RET.0 = core::ptr::addr_of_mut!((*_1));
_2 = -_6.1;
_3 = !false;
_9.fld2 = (_5, 2744639637910582069_u64);
_9.fld0 = _3;
RET.0 = core::ptr::addr_of_mut!((*_1));
RET.1 = -_2;
_1 = core::ptr::addr_of_mut!((*_1));
_9.fld2.1 = 3822404820353473031_u64 << (*_1);
Goto(bb1)
}
bb1 = {
_2 = _6.1 - _6.1;
_6.3 = _7;
_6.1 = -_2;
_6.3 = _7;
_5 = _9.fld2.0;
_6 = (8489065126337103483_i64, _2, _9.fld2.0, _7);
_6.1 = -_2;
_9.fld1.1 = _7;
RET.1 = _5 as f64;
_6.1 = _2;
(*_1) = !(-141814151594050710591662467047145333978_i128);
(*_1) = -(-155032735051413240030884755875364203041_i128);
_9.fld0 = _3;
_9.fld4 = [_6.0,_6.0,_6.0,_6.0,_6.0,_6.0];
_9.fld1.0 = [_9.fld2.0,_5,_9.fld2.0,_9.fld2.0,_6.2,_9.fld2.0,_6.2];
RET.0 = _1;
_9.fld2 = (_5, 1500280263774797980_u64);
_1 = core::ptr::addr_of_mut!((*_1));
_11.1 = _9.fld2.0 as u64;
RET.0 = core::ptr::addr_of_mut!((*_1));
RET.0 = _1;
RET.1 = (*_1) as f64;
_5 = !_6.2;
Call(_3 = fn2(_9.fld2.1, _9.fld2, (*_1), _11.1, _1, (*_1), _9.fld2.1, _6.2, _6.1, _6.0), bb2, UnwindUnreachable())
}
bb2 = {
_1 = core::ptr::addr_of_mut!((*_1));
_11 = (_6.2, _9.fld2.1);
_9.fld0 = _3;
_9.fld1.0 = [_5,_5,_6.2,_5,_9.fld2.0,_5,_5];
_5 = _6.2;
_9.fld4 = [_6.0,_6.0,_6.0,_6.0,_6.0,_6.0];
_11.0 = _6.2 | _9.fld2.0;
_11.1 = _6.0 as u64;
RET.0 = core::ptr::addr_of_mut!((*_1));
_11.0 = _9.fld2.0;
_9.fld1.0 = [_11.0,_9.fld2.0,_11.0,_11.0,_5,_5,_9.fld2.0];
_9.fld5.fld0 = !_3;
_5 = _9.fld2.0;
_11 = (_6.2, _9.fld2.1);
_11.1 = _9.fld2.1 | _9.fld2.1;
_9.fld2.1 = _11.1;
RET.1 = -_6.1;
_1 = core::ptr::addr_of_mut!((*_1));
_9.fld5.fld0 = _3;
(*_1) = _2 as i128;
_6.1 = _2;
_16.fld4 = (_6.2, _11.1);
_12 = [3209865365_u32,4200008897_u32,3633317204_u32,282842704_u32,3291929485_u32,2111945699_u32,1118584084_u32];
_11.1 = _16.fld4.1 ^ _16.fld4.1;
_16.fld3.0 = _9.fld1.0;
Goto(bb3)
}
bb3 = {
Call(_19 = dump_var(1_usize, 11_usize, Move(_11), 3_usize, Move(_3), 5_usize, Move(_5), 20_usize, _20), bb4, UnwindUnreachable())
}
bb4 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn2(mut _1: u64,mut _2: (i8, u64),mut _3: i128,mut _4: u64,mut _5: *mut i128,mut _6: i128,mut _7: u64,mut _8: i8,mut _9: f64,mut _10: i64) -> bool {
mir! {
type RET = bool;
let _11: [u32; 7];
let _12: [isize; 6];
let _13: [i32; 7];
let _14: (*mut i128, f64, u16);
let _15: u64;
let _16: f32;
let _17: (isize,);
let _18: Adt58;
let _19: [i8; 7];
let _20: isize;
let _21: (i8, u64);
let _22: char;
let _23: ();
let _24: ();
{
RET = true;
_7 = _1;
_5 = core::ptr::addr_of_mut!((*_5));
_2 = (_8, _1);
RET = !true;
_6 = -(*_5);
RET = false;
_2.0 = -_8;
_4 = !_2.1;
_2 = (_8, _4);
_6 = -(*_5);
_1 = _4 + _7;
_1 = _2.1;
_8 = -_2.0;
_9 = 93_isize as f64;
_8 = _2.0 << _10;
match _10 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb5,
5 => bb6,
6 => bb7,
8489065126337103483 => bb9,
_ => bb8
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
(*_5) = _3;
(*_5) = _3 >> _2.1;
_6 = (*_5) | (*_5);
_4 = !_2.1;
_3 = -_6;
_3 = -(*_5);
_12 = [(-93_isize),(-10_isize),9223372036854775807_isize,(-9223372036854775808_isize),(-61_isize),114_isize];
_5 = core::ptr::addr_of_mut!((*_5));
RET = true ^ true;
_2.1 = 64583_u16 as u64;
_13 = [(-1177527737_i32),(-43582662_i32),(-1218264711_i32),383836146_i32,304800949_i32,1658986105_i32,1759224033_i32];
_11 = [2305996998_u32,2020321810_u32,2724536252_u32,2933204386_u32,1493199837_u32,1927574525_u32,4294299180_u32];
_2.0 = _8;
_9 = 4984709690374791005_usize as f64;
(*_5) = _6 >> _2.0;
_14.0 = _5;
RET = !false;
_14.2 = (-9223372036854775808_isize) as u16;
_10 = -(-3263221006117976086_i64);
_2 = (_8, _1);
Call(_9 = fn3(_4, _14.2, _14.2, _10, _14.0, _2, _7, _13), bb10, UnwindUnreachable())
}
bb10 = {
_2.1 = 17157_i16 as u64;
_11 = [246924500_u32,4044174437_u32,1260719613_u32,688425329_u32,3408361414_u32,2575277490_u32,2685122297_u32];
_14.1 = _9;
RET = true;
(*_5) = _3;
_15 = _7 | _4;
Goto(bb11)
}
bb11 = {
_7 = !_1;
_11 = [1926993031_u32,3613055419_u32,3276672138_u32,1281469087_u32,671068040_u32,3379899857_u32,4257240262_u32];
_13 = [(-2103627246_i32),1631715246_i32,(-824095780_i32),(-1990184066_i32),(-1668879471_i32),(-889876952_i32),(-1588620919_i32)];
_9 = -_14.1;
_9 = 3886170145_u32 as f64;
RET = !false;
_5 = core::ptr::addr_of_mut!((*_5));
_4 = _1;
RET = true & false;
_14.1 = _9;
(*_5) = -_3;
Goto(bb12)
}
bb12 = {
_7 = _4;
_15 = !_4;
_8 = (-1290561028_i32) as i8;
(*_5) = _6 >> _15;
_12 = [(-9223372036854775808_isize),(-9223372036854775808_isize),9223372036854775807_isize,94_isize,(-9223372036854775808_isize),107_isize];
_5 = _14.0;
(*_5) = _6 - _6;
_3 = true as i128;
(*_5) = _6 - _6;
_14.2 = !9986_u16;
_16 = 1069087243_u32 as f32;
_9 = 157_u8 as f64;
RET = true;
_5 = core::ptr::addr_of_mut!(_6);
Call(_2 = fn4(_7, _12, _15, _3, _1, _11, _6), bb13, UnwindUnreachable())
}
bb13 = {
_7 = !_4;
_10 = !6015702551950108837_i64;
_2 = (_8, _15);
_16 = _14.2 as f32;
_17 = ((-9223372036854775808_isize),);
_15 = _10 as u64;
_14.0 = _5;
_14.0 = core::ptr::addr_of_mut!(_3);
_6 = _8 as i128;
(*_5) = _2.0 as i128;
_18.fld3.fld4.2 = _14.2 >> _6;
RET = true;
_3 = 119252654636672593847948009948182332498_u128 as i128;
RET = !true;
_6 = -_3;
(*_5) = -_3;
Goto(bb14)
}
bb14 = {
_11 = [2060521603_u32,677587139_u32,889551741_u32,1771684900_u32,4136200208_u32,997088018_u32,3533767479_u32];
_13 = [(-266002172_i32),(-1537667632_i32),(-1106862822_i32),(-1918087338_i32),283296824_i32,1505325694_i32,(-1562797373_i32)];
_18.fld3.fld3 = [_2.0,_2.0,_2.0,_8,_8,_8,_2.0];
RET = true;
_11 = [2852449085_u32,1043588861_u32,2025681332_u32,1375489333_u32,25485305_u32,216874549_u32,2106519018_u32];
_14 = (_5, _9, _18.fld3.fld4.2);
_15 = _7 & _7;
_18.fld0 = (_17.0,);
_19 = _18.fld3.fld3;
_18.fld3.fld5 = core::ptr::addr_of_mut!(_13);
Goto(bb15)
}
bb15 = {
Call(_23 = dump_var(2_usize, 12_usize, Move(_12), 3_usize, Move(_3), 11_usize, Move(_11), 8_usize, Move(_8)), bb16, UnwindUnreachable())
}
bb16 = {
Call(_23 = dump_var(2_usize, 1_usize, Move(_1), 15_usize, Move(_15), 10_usize, Move(_10), 24_usize, _24), bb17, UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn3(mut _1: u64,mut _2: u16,mut _3: u16,mut _4: i64,mut _5: *mut i128,mut _6: (i8, u64),mut _7: u64,mut _8: [i32; 7]) -> f64 {
mir! {
type RET = f64;
let _9: *const i8;
let _10: (i8, u64);
let _11: ();
let _12: ();
{
_6.0 = (-11_i8) * 36_i8;
_8 = [(-280842197_i32),(-134534746_i32),583209518_i32,(-2140593436_i32),1209299415_i32,(-48615943_i32),(-1029255823_i32)];
_6.1 = _1;
_4 = (-8172591665993561928_i64) | (-2352722439702106095_i64);
_6.0 = 6_usize as i8;
_8 = [2064618106_i32,(-2048103103_i32),(-162074717_i32),1927832399_i32,(-151158873_i32),(-899682270_i32),2017900989_i32];
_6.0 = -(-89_i8);
RET = (*_5) as f64;
_8 = [(-264462502_i32),(-334638129_i32),1745270325_i32,(-622056890_i32),1306574519_i32,1379516150_i32,1868592120_i32];
_9 = core::ptr::addr_of!(_10.0);
Goto(bb1)
}
bb1 = {
Call(_11 = dump_var(3_usize, 1_usize, Move(_1), 7_usize, Move(_7), 2_usize, Move(_2), 12_usize, _12), bb2, UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn4(mut _1: u64,mut _2: [isize; 6],mut _3: u64,mut _4: i128,mut _5: u64,mut _6: [u32; 7],mut _7: i128) -> (i8, u64) {
mir! {
type RET = (i8, u64);
let _8: isize;
let _9: [i32; 7];
let _10: i64;
let _11: char;
let _12: bool;
let _13: i16;
let _14: [isize; 6];
let _15: ();
let _16: ();
{
_7 = -_4;
RET = (124_i8, _5);
_1 = !_5;
_1 = (-7379731450836642970_i64) as u64;
_9 = [(-2080622074_i32),2087438669_i32,1212938284_i32,(-453235771_i32),(-519592985_i32),(-871780347_i32),(-2085127430_i32)];
_8 = !24_isize;
_4 = !_7;
RET = ((-72_i8), _5);
_7 = (-112_i8) as i128;
_10 = (-5897577260419177274_i64);
_4 = _7 - _7;
_10 = 1024873885125212881_i64 << _5;
RET.1 = !_3;
_5 = _3 & _3;
_10 = -(-8539125061762653554_i64);
_12 = false ^ false;
Call(_7 = fn5(_2, _1, _3, _1, _4, _2, _10, _8, _4, _4, _8, _12, _6, _8, _4), bb1, UnwindUnreachable())
}
bb1 = {
RET.1 = _1 - _5;
_8 = 123464450526913407311731804970771419220_u128 as isize;
_10 = (-8236033830639708856_i64) + 173471261352975181_i64;
_6 = [40324490_u32,531224886_u32,3305810372_u32,506908126_u32,3382874716_u32,951763069_u32,4233065047_u32];
_13 = -7732_i16;
RET.1 = !_3;
RET = ((-61_i8), _5);
_12 = true | true;
_7 = !_4;
_12 = !true;
_6 = [852760872_u32,3750105823_u32,3059197794_u32,1157673777_u32,1474225911_u32,4004783105_u32,1878096401_u32];
_2 = [_8,_8,_8,_8,_8,_8];
_11 = '\u{2354e}';
_9 = [1644824085_i32,11099644_i32,(-462228565_i32),400245076_i32,468705922_i32,555834252_i32,(-1639255587_i32)];
_6 = [2159305160_u32,1777676611_u32,2143813228_u32,3253632833_u32,3184864900_u32,1124435659_u32,3059181350_u32];
RET = ((-116_i8), _5);
_7 = _12 as i128;
RET = (73_i8, _5);
RET.0 = !(-77_i8);
_3 = _5 * _5;
Goto(bb2)
}
bb2 = {
_4 = _7;
_8 = 9223372036854775807_isize;
RET.1 = _3 * _3;
RET.0 = _8 as i8;
_8 = -(-122_isize);
_2 = [_8,_8,_8,_8,_8,_8];
_1 = _3 >> _3;
_10 = 7863418407572167829_i64 + 3413181894978206288_i64;
_10 = !(-3081788590299834597_i64);
_7 = _4 << _3;
_1 = !_5;
Goto(bb3)
}
bb3 = {
Call(_15 = dump_var(4_usize, 12_usize, Move(_12), 10_usize, Move(_10), 7_usize, Move(_7), 13_usize, Move(_13)), bb4, UnwindUnreachable())
}
bb4 = {
Call(_15 = dump_var(4_usize, 8_usize, Move(_8), 3_usize, Move(_3), 16_usize, _16, 16_usize, _16), bb5, UnwindUnreachable())
}
bb5 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn5(mut _1: [isize; 6],mut _2: u64,mut _3: u64,mut _4: u64,mut _5: i128,mut _6: [isize; 6],mut _7: i64,mut _8: isize,mut _9: i128,mut _10: i128,mut _11: isize,mut _12: bool,mut _13: [u32; 7],mut _14: isize,mut _15: i128) -> i128 {
mir! {
type RET = i128;
let _16: f64;
let _17: Adt50;
let _18: (i64, f64, i8, char);
let _19: [char; 8];
let _20: f32;
let _21: (isize,);
let _22: *mut [i32; 7];
let _23: *mut i32;
let _24: [char; 8];
let _25: i32;
let _26: char;
let _27: u8;
let _28: char;
let _29: [i128; 2];
let _30: Adt64;
let _31: char;
let _32: f32;
let _33: isize;
let _34: char;
let _35: u32;
let _36: [i32; 7];
let _37: i16;
let _38: isize;
let _39: (isize,);
let _40: (isize, i16, char, (i64, f64, i8, char), (i16, u16, bool, f64), (isize,));
let _41: (isize, i16, char, (i64, f64, i8, char), (i16, u16, bool, f64), (isize,));
let _42: isize;
let _43: [u32; 7];
let _44: f64;
let _45: [char; 8];
let _46: [char; 8];
let _47: f32;
let _48: [i32; 7];
let _49: bool;
let _50: Adt64;
let _51: bool;
let _52: i8;
let _53: isize;
let _54: [isize; 6];
let _55: *mut i32;
let _56: (i64, f64, i8, char);
let _57: Adt56;
let _58: f64;
let _59: char;
let _60: ();
let _61: ();
{
_14 = !_8;
_13 = [965119988_u32,2221879146_u32,2908627383_u32,1726547573_u32,3059536549_u32,450704651_u32,440691130_u32];
_2 = _3 << _5;
_2 = _3 % 18259588449024098963_u64;
_4 = _3;
RET = 165_u8 as i128;
_3 = _2 & _2;
_1 = _6;
_7 = _5 as i64;
_14 = _11;
_11 = _14;
_4 = !_3;
RET = _10 * _5;
_17.fld1.0 = [98_i8,10_i8,106_i8,99_i8,75_i8,33_i8,(-26_i8)];
_17.fld2.1 = _12 as u64;
_16 = (-19069_i16) as f64;
_18.0 = 142947516056790358710582263871319935016_u128 as i64;
_17.fld1.1 = '\u{fb4b2}';
_17.fld0 = _12;
_17.fld4 = [_18.0,_18.0,_7,_7,_7,_7];
_17.fld0 = _12;
_17.fld1.0 = [(-54_i8),87_i8,(-63_i8),90_i8,9_i8,95_i8,106_i8];
_18.1 = _16;
RET = 315516575_u32 as i128;
_18.2 = (-22_i8) ^ (-111_i8);
_18 = (_7, _16, 7_i8, _17.fld1.1);
Call(_10 = fn6(_11, _1, _17.fld0, _8, _13, _13, _8, _17.fld4, _14), bb1, UnwindUnreachable())
}
bb1 = {
_17.fld0 = !_12;
_17.fld1.1 = _18.3;
_1 = _6;
_17.fld5.fld0 = _3 > _3;
Call(_17.fld5 = fn14(_18, _18), bb2, UnwindUnreachable())
}
bb2 = {
_17.fld5.fld1 = _18.2 & _18.2;
_9 = _5 + _15;
_18.0 = _17.fld2.1 as i64;
RET = _15;
_7 = !_18.0;
_18.2 = _17.fld5.fld1;
_21.0 = 1879_i16 as isize;
_13 = [2693060047_u32,2638978100_u32,4082983959_u32,411922503_u32,3249966099_u32,3610479365_u32,4014592380_u32];
_18.2 = _17.fld5.fld1;
_21.0 = _14;
_10 = !_5;
_20 = 3943729342485711391_usize as f32;
_1 = _6;
_17.fld1.1 = _18.3;
_5 = _18.0 as i128;
_16 = _18.1;
_6 = [_21.0,_8,_21.0,_11,_11,_11];
_17.fld1.0 = [_17.fld5.fld1,_17.fld5.fld1,_17.fld5.fld1,_18.2,_17.fld5.fld1,_18.2,_17.fld5.fld1];
_2 = _3 << _3;
_17.fld2.1 = _2;
_18.1 = _16;
_18 = (_7, _16, _17.fld5.fld1, _17.fld1.1);
Goto(bb3)
}
bb3 = {
_28 = _18.3;
_25 = !(-2009551215_i32);
_6 = _1;
_3 = _4 << _17.fld2.1;
_2 = _17.fld2.1 >> _17.fld5.fld1;
_23 = core::ptr::addr_of_mut!(_25);
_24 = [_17.fld1.1,_18.3,_28,_17.fld1.1,_28,_28,_18.3,_28];
_4 = _3;
_30.fld3.1 = _17.fld1.1;
_30.fld0.fld2 = [_9,_15,_5];
_30.fld0.fld3 = core::ptr::addr_of_mut!(_21);
_25 = (-2043493534_i32);
_30.fld2 = _20 * _20;
_26 = _28;
_19 = _24;
_29 = [_10,_10];
_30.fld4.0 = _17.fld5.fld1 - _18.2;
(*_23) = !(-502820667_i32);
_26 = _17.fld1.1;
_30.fld4.0 = -_17.fld5.fld1;
Goto(bb4)
}
bb4 = {
_17.fld2.0 = -_30.fld4.0;
_30.fld0.fld0.1 = _16 + _16;
_26 = _17.fld1.1;
_26 = _17.fld1.1;
_13 = [176880360_u32,3741681247_u32,1316821262_u32,1004893727_u32,787210529_u32,3476116195_u32,3254983302_u32];
(*_23) = -(-919565631_i32);
_17.fld2.1 = _4;
_30.fld3.1 = _17.fld1.1;
(*_23) = (-1369686170_i32) << _17.fld5.fld1;
_28 = _30.fld3.1;
Goto(bb5)
}
bb5 = {
_26 = _18.3;
_30.fld4 = (_17.fld2.0, _17.fld2.1);
_19 = [_30.fld3.1,_26,_28,_30.fld3.1,_18.3,_26,_18.3,_28];
_32 = _30.fld2;
_30.fld3 = (_17.fld1.0, _28);
_18 = (_7, _16, _17.fld5.fld1, _30.fld3.1);
_30.fld0.fld0.0 = core::ptr::addr_of_mut!(_10);
_30.fld1 = [1757044067_u32,629696120_u32,2025628398_u32,308329770_u32,3866511254_u32,598122371_u32,3347595906_u32];
_7 = _18.0 >> _17.fld2.1;
_18.3 = _28;
_28 = _26;
_4 = _30.fld4.1 * _3;
_13 = _30.fld1;
_30.fld4.1 = _2;
_17.fld5.fld0 = !_12;
_14 = _17.fld2.0 as isize;
_31 = _17.fld1.1;
_33 = -_21.0;
_30.fld0.fld0.1 = _16 + _18.1;
_17.fld2.0 = !_30.fld4.0;
_24 = [_26,_28,_31,_17.fld1.1,_18.3,_18.3,_26,_30.fld3.1];
_30.fld3 = (_17.fld1.0, _28);
_17.fld4 = [_7,_7,_7,_7,_7,_7];
_17.fld2.0 = !_18.2;
_34 = _30.fld3.1;
Goto(bb6)
}
bb6 = {
_30.fld2 = -_20;
_17.fld0 = _17.fld5.fld0 | _12;
_11 = _17.fld0 as isize;
Call(_17.fld2.1 = core::intrinsics::bswap(_3), bb7, UnwindUnreachable())
}
bb7 = {
_17.fld1.1 = _28;
_18.3 = _30.fld3.1;
_30.fld0.fld1 = 53_u8;
RET = !_9;
_12 = !_17.fld0;
_17.fld5.fld0 = _17.fld2.0 > _17.fld2.0;
_30.fld3.1 = _28;
_17.fld2.1 = 46462521390156269057568881849153366170_u128 as u64;
_30.fld3.0 = [_30.fld4.0,_17.fld2.0,_30.fld4.0,_17.fld5.fld1,_18.2,_30.fld4.0,_18.2];
_24 = _19;
_30.fld0.fld0.2 = _17.fld5.fld0 as u16;
_10 = 4693859498914140591_usize as i128;
_30.fld0.fld1 = 227_u8 - 18_u8;
_30.fld0.fld1 = !193_u8;
_22 = core::ptr::addr_of_mut!(_36);
_24 = _19;
_30.fld0.fld1 = !240_u8;
_8 = -_14;
_6 = [_14,_8,_11,_8,_8,_14];
_17.fld2.0 = !_17.fld5.fld1;
_11 = _7 as isize;
_16 = _30.fld0.fld0.1 - _18.1;
_17.fld5.fld0 = _17.fld0;
Goto(bb8)
}
bb8 = {
_5 = !_9;
_14 = -_8;
_30.fld0.fld1 = !175_u8;
RET = _15 * _9;
_28 = _26;
_23 = core::ptr::addr_of_mut!((*_23));
_17.fld1.0 = [_30.fld4.0,_17.fld2.0,_17.fld5.fld1,_30.fld4.0,_17.fld5.fld1,_17.fld5.fld1,_17.fld2.0];
(*_22) = [(*_23),(*_23),_25,(*_23),_25,(*_23),(*_23)];
_37 = -19688_i16;
_39 = _21;
_27 = _30.fld0.fld1 / 13_u8;
_17.fld1.1 = _28;
_7 = _18.0 << _4;
_12 = !_17.fld0;
_40.1 = _37 << _2;
(*_23) = 3094799904_u32 as i32;
_40.4 = (_40.1, _30.fld0.fld0.2, _17.fld0, _16);
Call(_40.5.0 = fn15(_30.fld0.fld0.1, _17.fld5.fld2, _39, _17.fld1.1, _27, _17.fld2.0, _39.0, _30.fld3.0), bb9, UnwindUnreachable())
}
bb9 = {
_27 = !_30.fld0.fld1;
_40.3.2 = 136266463180021315565942180753345259605_u128 as i8;
_14 = (*_23) as isize;
_5 = 2629194400_u32 as i128;
_40.4.2 = _12;
_41.5.0 = _11;
_18.0 = _30.fld0.fld1 as i64;
_30.fld3 = (_17.fld1.0, _31);
_22 = core::ptr::addr_of_mut!((*_22));
_29 = [_15,_15];
_41.0 = 697840458_u32 as isize;
_31 = _17.fld1.1;
_30.fld2 = _32 + _20;
_40.3.3 = _26;
Goto(bb10)
}
bb10 = {
_33 = _40.5.0 * _11;
_25 = (-1165722592_i32) | (-828072536_i32);
_30.fld0.fld2 = [_9,_10,_9];
_40.0 = !_11;
_36 = [_25,_25,(*_23),(*_23),(*_23),(*_23),_25];
_32 = _30.fld2 - _30.fld2;
_41.4.2 = !_17.fld0;
_21 = (_11,);
_41.4 = _40.4;
_42 = _8;
_38 = _33;
_40.4.0 = _28 as i16;
_35 = !2676983143_u32;
_40.4.2 = _40.0 == _41.5.0;
_17.fld5.fld1 = -_17.fld2.0;
_41.3.1 = _30.fld0.fld0.1;
_18.1 = _40.4.3 * _40.4.3;
_27 = _30.fld0.fld1 << _41.5.0;
_30.fld0.fld0.2 = 286439179702597940429978044891920576147_u128 as u16;
_20 = _7 as f32;
Call(_47 = core::intrinsics::transmute(_18.3), bb11, UnwindUnreachable())
}
bb11 = {
_39.0 = !_40.0;
_40.3.0 = !_7;
_41.4.2 = _40.4.2;
_40.3.3 = _17.fld1.1;
_40.3.1 = _16 + _41.4.3;
_7 = _40.3.0 * _40.3.0;
_14 = -_33;
_30.fld1 = [_35,_35,_35,_35,_35,_35,_35];
_49 = _41.4.2;
_12 = _40.4.2;
_40.0 = _38 ^ _14;
_46 = _24;
_49 = _12;
_30.fld3 = _17.fld1;
_8 = _11;
Goto(bb12)
}
bb12 = {
_1 = _6;
_3 = _4;
_50.fld4.0 = !_17.fld2.0;
_41 = (_40.5.0, _40.1, _26, _40.3, _40.4, _39);
_26 = _28;
_18.1 = _40.3.1 - _41.4.3;
_21 = _41.5;
_41.5 = _39;
_30.fld4 = (_17.fld2.0, _3);
_30.fld3 = _17.fld1;
_51 = !_49;
_41.3.3 = _40.3.3;
_40.4.2 = _40.0 < _8;
_50.fld0.fld2 = _30.fld0.fld2;
_50.fld3.0 = _30.fld3.0;
_41.4.1 = !_40.4.1;
_50.fld0.fld1 = !_27;
Goto(bb13)
}
bb13 = {
_16 = _18.2 as f64;
_30.fld0.fld0.0 = core::ptr::addr_of_mut!(_9);
_18.2 = -_17.fld5.fld1;
Goto(bb14)
}
bb14 = {
_17.fld3 = core::ptr::addr_of_mut!(_48);
_48 = [(*_23),(*_23),_25,(*_23),(*_23),_25,_25];
_6 = [_33,_39.0,_33,_40.0,_39.0,_8];
_50.fld0.fld0.2 = !_40.4.1;
_40.5.0 = -_40.0;
_17.fld2.1 = _30.fld0.fld1 as u64;
_40.5 = _39;
_41.4.0 = _41.1;
_25 = !728965795_i32;
_50.fld0.fld1 = _27;
_50.fld1 = [_35,_35,_35,_35,_35,_35,_35];
_17.fld3 = core::ptr::addr_of_mut!(_36);
_18.0 = _7;
_50.fld1 = [_35,_35,_35,_35,_35,_35,_35];
_17.fld5.fld0 = _40.4.2 ^ _40.4.2;
(*_23) = 762390451_i32 ^ (-2039305099_i32);
_39 = (_11,);
_41.4.3 = (*_23) as f64;
_50 = Adt64 { fld0: _30.fld0,fld1: _30.fld1,fld2: _20,fld3: _30.fld3,fld4: _17.fld2 };
_56.1 = _35 as f64;
_30.fld0.fld0.1 = _18.1;
_50.fld0.fld0.2 = !_41.4.1;
_18 = _40.3;
_27 = _30.fld0.fld1;
_22 = core::ptr::addr_of_mut!((*_22));
Goto(bb15)
}
bb15 = {
Call(_60 = dump_var(5_usize, 7_usize, Move(_7), 5_usize, Move(_5), 10_usize, Move(_10), 12_usize, Move(_12)), bb16, UnwindUnreachable())
}
bb16 = {
Call(_60 = dump_var(5_usize, 35_usize, Move(_35), 39_usize, Move(_39), 19_usize, Move(_19), 29_usize, Move(_29)), bb17, UnwindUnreachable())
}
bb17 = {
Call(_60 = dump_var(5_usize, 3_usize, Move(_3), 46_usize, Move(_46), 34_usize, Move(_34), 33_usize, Move(_33)), bb18, UnwindUnreachable())
}
bb18 = {
Call(_60 = dump_var(5_usize, 26_usize, Move(_26), 25_usize, Move(_25), 13_usize, Move(_13), 27_usize, Move(_27)), bb19, UnwindUnreachable())
}
bb19 = {
Call(_60 = dump_var(5_usize, 31_usize, Move(_31), 1_usize, Move(_1), 61_usize, _61, 61_usize, _61), bb20, UnwindUnreachable())
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn6(mut _1: isize,mut _2: [isize; 6],mut _3: bool,mut _4: isize,mut _5: [u32; 7],mut _6: [u32; 7],mut _7: isize,mut _8: [i64; 6],mut _9: isize) -> i128 {
mir! {
type RET = i128;
let _10: (i64, f64, i8, char);
let _11: *mut i32;
let _12: i8;
let _13: *const u16;
let _14: i8;
let _15: [u32; 7];
let _16: [i128; 2];
let _17: isize;
let _18: f64;
let _19: u32;
let _20: char;
let _21: char;
let _22: f64;
let _23: Adt63;
let _24: i128;
let _25: f64;
let _26: Adt63;
let _27: ([i8; 7], char);
let _28: Adt56;
let _29: isize;
let _30: i128;
let _31: ();
let _32: ();
{
RET = 34258326670542303754661350455047857830_i128 & 89028582855346737373979531220757612267_i128;
_1 = _9 * _9;
RET = (-24557484808432139335943447893605705065_i128) >> _1;
_4 = -_1;
RET = (-145709245417679845143468673393296844497_i128);
_5 = _6;
RET = (-135542631815111408587244447470139951700_i128) * (-109152555637786214554489147445789862393_i128);
_2 = [_1,_4,_7,_4,_7,_9];
_6 = [3059630484_u32,4280538147_u32,2791394042_u32,3460809710_u32,2117075331_u32,2188363492_u32,1478053712_u32];
_1 = _4;
_1 = -_9;
Goto(bb1)
}
bb1 = {
_9 = !_7;
_10.0 = 3778654273254840569_i64;
_10.1 = 952652330_i32 as f64;
_8 = [_10.0,_10.0,_10.0,_10.0,_10.0,_10.0];
RET = (-115831133439655265644475425354876588465_i128);
RET = (-28387876329699629842192465286810025494_i128);
_10.0 = (-3385981593651235953_i64);
_10.3 = '\u{fa8fb}';
_10.2 = -121_i8;
RET = 32164198970101500491162095356704731933_i128 & (-46924675571381654358213082591076835342_i128);
_4 = !_1;
_4 = 1086656433_i32 as isize;
_4 = !_1;
_9 = _4 << _1;
_2 = [_9,_9,_9,_4,_7,_9];
_5 = _6;
_6 = _5;
match _10.0 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
340282366920938463459988625838116975503 => bb8,
_ => bb7
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
RET = !144403940552271659371082056689395548640_i128;
_9 = _1 + _7;
_4 = _9 ^ _1;
_1 = _9;
_8 = [_10.0,_10.0,_10.0,_10.0,_10.0,_10.0];
_10.1 = 26083_u16 as f64;
_10.3 = '\u{640ad}';
_7 = 7_usize as isize;
_5 = [3092578520_u32,3052201283_u32,1088456367_u32,1418313292_u32,1321067624_u32,3778081434_u32,1790516665_u32];
RET = !(-49756748042584707955816707805783565867_i128);
_6 = _5;
_2 = [_7,_1,_9,_4,_9,_9];
_10.2 = 247487907174595276178273899429980813178_u128 as i8;
_1 = _7 | _9;
_12 = _10.2 & _10.2;
_4 = _1;
_5 = [2929325580_u32,1610750465_u32,2222290452_u32,166413623_u32,3243221907_u32,3151559075_u32,135918252_u32];
match _10.0 {
340282366920938463459988625838116975503 => bb10,
_ => bb9
}
}
bb9 = {
Return()
}
bb10 = {
_10.3 = '\u{74e60}';
_10.3 = '\u{c8b29}';
_14 = _12;
_12 = 3_usize as i8;
_6 = _5;
_16 = [(-9207001584471242038470767361677600913_i128),32142080950160904826602349384695734772_i128];
_7 = 87_u8 as isize;
RET = 160960782407424245643788550268958291244_i128;
_15 = _5;
_6 = [1401095588_u32,577007728_u32,3727842955_u32,702704424_u32,945340026_u32,3676447238_u32,3698488080_u32];
_4 = -_1;
_17 = _9;
_14 = _10.2;
_14 = _10.2 - _10.2;
_18 = _10.1 / 1_f64;
_4 = _1 | _1;
_9 = _4 + _1;
_8 = [_10.0,_10.0,_10.0,_10.0,_10.0,_10.0];
_12 = _18 as i8;
_2 = [_9,_1,_4,_4,_4,_4];
RET = 164107388226879327786620655573902515057_i128 << _4;
_16 = [(-133929099772099697314473124798699928529_i128),(-131937597849883898674147647204671005163_i128)];
_16 = [(-160869749090633523325637754874199173512_i128),(-86263263059901055387423608586606585780_i128)];
_14 = _12 << _4;
Call(_9 = fn7(_4, _3, _2, _2), bb11, UnwindUnreachable())
}
bb11 = {
_19 = _10.0 as u32;
_19 = 251_u8 as u32;
_3 = !true;
_12 = _14 << _4;
RET = (-56498289859383826069016255324892344094_i128);
_8 = [_10.0,_10.0,_10.0,_10.0,_10.0,_10.0];
_12 = _10.2;
_10.3 = '\u{1096c9}';
_1 = _9 ^ _4;
_17 = _9 | _1;
_18 = _10.1 * _10.1;
_20 = _10.3;
Goto(bb12)
}
bb12 = {
_10.1 = _18;
_14 = _12 - _12;
_17 = (-111930485997383980297652498762004135861_i128) as isize;
_17 = _3 as isize;
RET = (-20397093908347266882279400240028659462_i128);
_18 = -_10.1;
_23.fld1.1 = -_10.1;
_23.fld4 = 21669_i16 as u128;
_23.fld1.2 = 57616_u16;
_22 = _23.fld1.1;
_15 = _6;
_3 = false & false;
_18 = _22;
Goto(bb13)
}
bb13 = {
_23.fld1.0 = core::ptr::addr_of_mut!(_24);
_1 = !_9;
_25 = _22;
_23.fld2 = [_14,_14,_14,_12,_14,_10.2,_14];
_23.fld2 = [_12,_10.2,_14,_10.2,_10.2,_12,_12];
_23.fld1.2 = _20 as u16;
_13 = core::ptr::addr_of!(_23.fld1.2);
_26.fld4 = !_23.fld4;
_23.fld3.0 = [_10.0,_10.0,_10.0,_10.0,_10.0,_10.0];
_21 = _20;
_26.fld1.2 = (*_13);
(*_13) = _3 as u16;
_23.fld1.0 = core::ptr::addr_of_mut!(_24);
_3 = true;
_17 = 1339078096_i32 as isize;
_4 = _26.fld4 as isize;
_12 = -_10.2;
_10.2 = -_12;
_6 = _15;
_16 = [855247190796616654357720086155429702_i128,(-5233135107054237498542032024462955992_i128)];
_24 = 4_usize as i128;
_23.fld1.1 = -_25;
_23.fld1.1 = _9 as f64;
_26.fld4 = _23.fld4 / 138762133259753303942447072902894473924_u128;
match _10.0 {
340282366920938463459988625838116975503 => bb14,
_ => bb7
}
}
bb14 = {
_26.fld1.1 = (-1689740754_i32) as f64;
_26.fld1.1 = _23.fld1.2 as f64;
_26.fld1 = (_23.fld1.0, _25, (*_13));
_27 = (_23.fld2, _21);
_17 = _4;
_23.fld1 = _26.fld1;
_26.fld1 = _23.fld1;
_16 = [_24,_24];
_10.0 = _26.fld4 as i64;
_26.fld3.0 = [_10.0,_10.0,_10.0,_10.0,_10.0,_10.0];
_23.fld1.1 = _18;
_8 = [_10.0,_10.0,_10.0,_10.0,_10.0,_10.0];
_30 = -_24;
_26.fld1 = (_23.fld1.0, _23.fld1.1, (*_13));
_23.fld1.0 = _26.fld1.0;
Goto(bb15)
}
bb15 = {
Call(_31 = dump_var(6_usize, 2_usize, Move(_2), 24_usize, Move(_24), 4_usize, Move(_4), 15_usize, Move(_15)), bb16, UnwindUnreachable())
}
bb16 = {
Call(_31 = dump_var(6_usize, 6_usize, Move(_6), 1_usize, Move(_1), 7_usize, Move(_7), 9_usize, Move(_9)), bb17, UnwindUnreachable())
}
bb17 = {
Call(_31 = dump_var(6_usize, 16_usize, Move(_16), 14_usize, Move(_14), 32_usize, _32, 32_usize, _32), bb18, UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn7(mut _1: isize,mut _2: bool,mut _3: [isize; 6],mut _4: [isize; 6]) -> isize {
mir! {
type RET = isize;
let _5: f64;
let _6: [i8; 7];
let _7: char;
let _8: f64;
let _9: [u32; 7];
let _10: f64;
let _11: f32;
let _12: i16;
let _13: Adt63;
let _14: u128;
let _15: u128;
let _16: Adt62;
let _17: f32;
let _18: (i16, u16, bool, f64);
let _19: Adt52;
let _20: [char; 8];
let _21: u64;
let _22: [i128; 3];
let _23: (isize, i16, char, (i64, f64, i8, char), (i16, u16, bool, f64), (isize,));
let _24: (isize, i16, char, (i64, f64, i8, char), (i16, u16, bool, f64), (isize,));
let _25: [isize; 6];
let _26: i64;
let _27: (i16, u16, bool, f64);
let _28: i16;
let _29: [i32; 7];
let _30: *mut i16;
let _31: i8;
let _32: [i32; 7];
let _33: [u32; 7];
let _34: (i8, u64);
let _35: u8;
let _36: isize;
let _37: ([i8; 7], char);
let _38: [u32; 7];
let _39: bool;
let _40: [i64; 6];
let _41: *mut u8;
let _42: *const i64;
let _43: char;
let _44: Adt57;
let _45: [i8; 7];
let _46: *mut u8;
let _47: *const isize;
let _48: u32;
let _49: ();
let _50: ();
{
RET = !_1;
_2 = !false;
_1 = !(-9223372036854775808_isize);
_3 = [_1,_1,_1,_1,_1,_1];
_4 = _3;
RET = -_1;
_4 = _3;
RET = _1;
Goto(bb1)
}
bb1 = {
_1 = (-9223372036854775808_isize) + 9223372036854775807_isize;
RET = _1 << _1;
RET = 209_u8 as isize;
_2 = !true;
_5 = 14385376877491703294_u64 as f64;
_2 = true;
_6 = [(-62_i8),4_i8,108_i8,20_i8,39_i8,34_i8,102_i8];
_5 = _1 as f64;
_1 = (-9223372036854775808_isize) | (-9223372036854775808_isize);
_1 = (-3676527916761638640_i64) as isize;
_6 = [(-69_i8),95_i8,65_i8,19_i8,(-128_i8),(-115_i8),120_i8];
_6 = [(-13_i8),110_i8,83_i8,(-66_i8),(-19_i8),(-117_i8),16_i8];
_9 = [3411984335_u32,564370887_u32,3359001853_u32,3880424840_u32,3869743539_u32,1401299962_u32,1907322831_u32];
_2 = !true;
_9 = [1303515425_u32,629484775_u32,2410077494_u32,833147730_u32,1785549392_u32,187340370_u32,2743110864_u32];
_6 = [(-45_i8),(-21_i8),(-81_i8),55_i8,(-69_i8),(-27_i8),48_i8];
_9 = [4131654249_u32,1773873845_u32,1378158556_u32,730398087_u32,776222012_u32,1100800306_u32,2235211595_u32];
_7 = '\u{367b2}';
RET = _1;
_7 = '\u{f8349}';
Goto(bb2)
}
bb2 = {
_10 = -_5;
_2 = false;
_7 = '\u{d83ec}';
Call(RET = fn8(_6, _2, _10, _4, _9, _4, _6, _2, _10, _10), bb3, UnwindUnreachable())
}
bb3 = {
_7 = '\u{dc841}';
_13.fld2 = _6;
_13.fld3.0 = [177016016292750891_i64,(-1689239146642847196_i64),(-1392310980584882585_i64),5307374011581739196_i64,(-2512887283657153138_i64),5309571490104013897_i64];
RET = 827499770234607166_i64 as isize;
_2 = !true;
_12 = 4526_i16 + (-7808_i16);
_1 = !70_isize;
RET = -_1;
_4 = _3;
_16.fld4.fld2.0 = -_12;
_1 = 26907812290856981868898687448241685968_i128 as isize;
_16.fld4.fld4.fld0 = core::ptr::addr_of_mut!(_16.fld4.fld2.0);
_13.fld2 = [(-120_i8),119_i8,(-34_i8),41_i8,(-98_i8),(-42_i8),94_i8];
_16.fld4.fld2.2 = _2;
_16.fld4.fld2 = (_12, 18487_u16, _2, _10);
_13.fld1.1 = _10;
_16.fld4.fld3.2 = _16.fld4.fld2.1;
Goto(bb4)
}
bb4 = {
_16.fld2 = (-211626619_i32) as f32;
_16.fld4.fld5 = _4;
_16.fld4.fld4.fld3 = (-1407439297_i32);
_16.fld4.fld0 = [111_i8,71_i8,63_i8,12_i8,(-1_i8),(-41_i8),87_i8];
_13.fld1.1 = -_16.fld4.fld2.3;
_1 = !4_isize;
_13.fld1.1 = _16.fld2 as f64;
_16.fld4.fld2.0 = _12 + _12;
_16.fld2 = 95_u8 as f32;
_16.fld4.fld5 = [_1,_1,_1,_1,_1,_1];
_16.fld3 = [2315948143_u32,1898039996_u32,1084452766_u32,3192755741_u32,2446432104_u32,2306113579_u32,1972564158_u32];
Goto(bb5)
}
bb5 = {
_17 = 13849402355222616288369634722631351585_i128 as f32;
_16.fld4.fld2.1 = _16.fld4.fld3.2 & _16.fld4.fld3.2;
_16.fld5.fld0 = _16.fld4.fld4.fld0;
_11 = _17 + _16.fld2;
_17 = _1 as f32;
_19.fld6.4.0 = _1 as i16;
_13.fld1.2 = _2 as u16;
_16.fld4.fld2 = (_12, _13.fld1.2, _2, _13.fld1.1);
_19.fld6.4 = (_16.fld4.fld2.0, _16.fld4.fld3.2, _16.fld4.fld2.2, _13.fld1.1);
_16.fld5.fld2 = core::ptr::addr_of!(_19.fld6.5.0);
_15 = 23643399468496418746006116322136651998_u128;
_13.fld2 = [28_i8,35_i8,13_i8,(-91_i8),(-97_i8),121_i8,52_i8];
Goto(bb6)
}
bb6 = {
_13.fld2 = _6;
_17 = -_16.fld2;
_13.fld3.1 = core::ptr::addr_of_mut!(_19.fld6.4.0);
_19.fld6.4.3 = -_13.fld1.1;
_18 = (_12, _13.fld1.2, _19.fld6.4.2, _5);
_19.fld6.3.1 = -_10;
_16.fld4.fld4.fld2 = core::ptr::addr_of!(_19.fld2);
_16.fld4.fld4.fld0 = core::ptr::addr_of_mut!(_23.4.0);
_10 = _18.3 / f64::NAN;
_18.3 = _16.fld4.fld2.1 as f64;
_23.4 = (_18.0, _16.fld4.fld3.2, _18.2, _19.fld6.3.1);
_13.fld3.1 = core::ptr::addr_of_mut!(_16.fld4.fld2.0);
_23.2 = _7;
_16.fld1 = core::ptr::addr_of!(_19.fld5);
_24.4.0 = _19.fld6.4.0;
_6 = [(-67_i8),(-80_i8),(-1_i8),52_i8,(-19_i8),(-6_i8),61_i8];
Goto(bb7)
}
bb7 = {
_16.fld4.fld0 = [98_i8,(-27_i8),41_i8,52_i8,(-52_i8),114_i8,22_i8];
RET = !_1;
_24.4.3 = -_19.fld6.4.3;
_16.fld4.fld0 = [(-101_i8),(-43_i8),19_i8,(-77_i8),(-58_i8),(-119_i8),104_i8];
_24.5 = (_1,);
_23.3.2 = !100_i8;
_19.fld6.5.0 = !_1;
_19.fld6.4.3 = _23.4.3 - _5;
_3 = [_19.fld6.5.0,_19.fld6.5.0,_24.5.0,_1,_1,_19.fld6.5.0];
_23.4 = (_19.fld6.4.0, _16.fld4.fld3.2, _19.fld6.4.2, _19.fld6.4.3);
_23.5.0 = _19.fld6.5.0 * _24.5.0;
_24.4.1 = _1 as u16;
_16.fld5.fld3 = _16.fld4.fld4.fld3 >> _18.1;
_23.4.2 = !_18.2;
_16.fld4.fld2 = (_23.4.0, _16.fld4.fld3.2, _18.2, _10);
_19.fld1 = _23.2;
Call(_23.4.0 = core::intrinsics::bswap(_16.fld4.fld2.0), bb8, UnwindUnreachable())
}
bb8 = {
_19.fld0 = _23.4.1 == _18.1;
_16.fld4.fld3.0 = core::ptr::addr_of_mut!(_19.fld7);
_24.4.3 = -_5;
_23.1 = -_16.fld4.fld2.0;
_13.fld1.2 = _23.4.1;
_19.fld6.3.3 = _19.fld1;
Goto(bb9)
}
bb9 = {
_19.fld6.1 = _24.4.0 << _23.4.0;
_23.0 = -_19.fld6.5.0;
_27 = _16.fld4.fld2;
_14 = _23.4.1 as u128;
_26 = (-223352688038454103_i64);
_24.3.0 = -_26;
_23.3.1 = -_27.3;
_23.3.1 = _23.4.3;
_16.fld4.fld3.2 = 10728165506909225712_u64 as u16;
_19.fld6.3.0 = -_26;
_23.3.2 = 8_i8;
_17 = _19.fld6.3.0 as f32;
_11 = _16.fld2 - _17;
_18.2 = !_2;
_9 = [2271449875_u32,919465562_u32,2147788111_u32,1762540868_u32,159826359_u32,1038789685_u32,3156356928_u32];
_18 = (_27.0, _19.fld6.4.1, _16.fld4.fld2.2, _5);
_29 = [_16.fld5.fld3,_16.fld5.fld3,_16.fld5.fld3,_16.fld4.fld4.fld3,_16.fld5.fld3,_16.fld5.fld3,_16.fld5.fld3];
_16.fld5.fld0 = core::ptr::addr_of_mut!(_28);
_19.fld6.5 = (_1,);
_19.fld6.5.0 = _1;
_5 = 166_u8 as f64;
_26 = _24.3.0 ^ _19.fld6.3.0;
_30 = core::ptr::addr_of_mut!(_24.1);
_23.3.1 = _27.3;
_33 = _9;
Goto(bb10)
}
bb10 = {
_16.fld4.fld2.2 = _7 > _7;
_16.fld5.fld0 = core::ptr::addr_of_mut!(_27.0);
_19.fld3 = core::ptr::addr_of_mut!(_16.fld2);
_24.3 = (_19.fld6.3.0, _19.fld6.4.3, _23.3.2, _19.fld1);
_13.fld1.0 = core::ptr::addr_of_mut!(_19.fld7);
_24.3.0 = _19.fld6.3.0;
_23 = (_24.5.0, _19.fld6.1, _19.fld1, _24.3, _27, _19.fld6.5);
_16.fld0 = core::ptr::addr_of_mut!(_19.fld7);
_19.fld1 = _23.2;
_19.fld7 = -88389068073763077491326802605724918665_i128;
_12 = !_27.0;
Goto(bb11)
}
bb11 = {
_20 = [_19.fld6.3.3,_23.3.3,_19.fld1,_7,_24.3.3,_7,_24.3.3,_19.fld6.3.3];
_16.fld4.fld0 = [_23.3.2,_23.3.2,_23.3.2,_23.3.2,_23.3.2,_24.3.2,_24.3.2];
_24.0 = 1351011028_u32 as isize;
_2 = _19.fld6.4.2;
_23.3 = (_19.fld6.3.0, _10, _24.3.2, _23.2);
_19.fld6.0 = _19.fld6.1 as isize;
_16.fld4.fld2.2 = _19.fld6.4.1 > _13.fld1.2;
_3 = [_19.fld6.5.0,_24.5.0,_19.fld6.0,_19.fld6.0,_19.fld6.0,_23.0];
_34.1 = 8797251928553160469_u64 + 444983149198117900_u64;
_21 = _19.fld6.3.1 as u64;
_13.fld0 = core::ptr::addr_of_mut!(_35);
_24 = (_19.fld6.5.0, _23.1, _23.3.3, _23.3, _18, _19.fld6.5);
_16.fld4.fld1 = _16.fld0;
_16.fld4.fld2 = (_24.4.0, _24.4.1, _24.4.2, _19.fld6.4.3);
RET = _19.fld6.0 + _19.fld6.0;
_16.fld2 = 6_usize as f32;
_1 = _19.fld6.0 << _24.4.1;
_19.fld6.4.0 = -_19.fld6.1;
_16.fld4.fld3 = (_13.fld1.0, _19.fld6.4.3, _16.fld4.fld2.1);
_23.1 = _24.3.0 as i16;
_27.1 = _16.fld4.fld3.2;
_23.2 = _24.2;
_33 = _9;
_20 = [_19.fld1,_7,_23.3.3,_23.2,_19.fld1,_19.fld6.3.3,_7,_24.3.3];
_13.fld1.1 = _23.3.1;
_24.4.3 = -_27.3;
Call(_24.4.2 = fn11(_23.3.2, _16.fld5.fld0, _18.2, _16.fld5.fld2, _12, _24.4.0, _19.fld6.5.0, _4, _24.3.2, _19.fld1, _19.fld6.4.1, _24.2, _27.3, _19.fld6.4.3, _9, _18.0), bb12, UnwindUnreachable())
}
bb12 = {
_6 = [_23.3.2,_23.3.2,_24.3.2,_23.3.2,_23.3.2,_23.3.2,_23.3.2];
_36 = _19.fld6.5.0;
_24 = _23;
_33 = _9;
_37.0 = [_24.3.2,_24.3.2,_23.3.2,_23.3.2,_24.3.2,_24.3.2,_23.3.2];
_40 = _13.fld3.0;
_13.fld1.2 = !_16.fld4.fld2.1;
_19.fld1 = _23.3.3;
_19.fld5 = 4054531094_u32 << _23.1;
_19.fld6.3 = _23.3;
_10 = _24.3.1;
_16.fld5.fld0 = _13.fld3.1;
_24.5 = (_36,);
_24.3.3 = _24.2;
_27 = (_16.fld4.fld2.0, _16.fld4.fld3.2, _19.fld0, _19.fld6.3.1);
_24.2 = _23.2;
_23.5.0 = _36 | _1;
_31 = _23.3.2 * _23.3.2;
_19.fld6.0 = _16.fld2 as isize;
_16.fld5.fld1 = core::ptr::addr_of_mut!(_19.fld6.5);
_19.fld6.4.1 = _13.fld1.2;
_19.fld2 = _19.fld7 as isize;
_31 = _23.3.2 | _19.fld6.3.2;
match _24.4.1 {
0 => bb13,
1 => bb14,
2 => bb15,
3 => bb16,
18487 => bb18,
_ => bb17
}
}
bb13 = {
_20 = [_19.fld6.3.3,_23.3.3,_19.fld1,_7,_24.3.3,_7,_24.3.3,_19.fld6.3.3];
_16.fld4.fld0 = [_23.3.2,_23.3.2,_23.3.2,_23.3.2,_23.3.2,_24.3.2,_24.3.2];
_24.0 = 1351011028_u32 as isize;
_2 = _19.fld6.4.2;
_23.3 = (_19.fld6.3.0, _10, _24.3.2, _23.2);
_19.fld6.0 = _19.fld6.1 as isize;
_16.fld4.fld2.2 = _19.fld6.4.1 > _13.fld1.2;
_3 = [_19.fld6.5.0,_24.5.0,_19.fld6.0,_19.fld6.0,_19.fld6.0,_23.0];
_34.1 = 8797251928553160469_u64 + 444983149198117900_u64;
_21 = _19.fld6.3.1 as u64;
_13.fld0 = core::ptr::addr_of_mut!(_35);
_24 = (_19.fld6.5.0, _23.1, _23.3.3, _23.3, _18, _19.fld6.5);
_16.fld4.fld1 = _16.fld0;
_16.fld4.fld2 = (_24.4.0, _24.4.1, _24.4.2, _19.fld6.4.3);
RET = _19.fld6.0 + _19.fld6.0;
_16.fld2 = 6_usize as f32;
_1 = _19.fld6.0 << _24.4.1;
_19.fld6.4.0 = -_19.fld6.1;
_16.fld4.fld3 = (_13.fld1.0, _19.fld6.4.3, _16.fld4.fld2.1);
_23.1 = _24.3.0 as i16;
_27.1 = _16.fld4.fld3.2;
_23.2 = _24.2;
_33 = _9;
_20 = [_19.fld1,_7,_23.3.3,_23.2,_19.fld1,_19.fld6.3.3,_7,_24.3.3];
_13.fld1.1 = _23.3.1;
_24.4.3 = -_27.3;
Call(_24.4.2 = fn11(_23.3.2, _16.fld5.fld0, _18.2, _16.fld5.fld2, _12, _24.4.0, _19.fld6.5.0, _4, _24.3.2, _19.fld1, _19.fld6.4.1, _24.2, _27.3, _19.fld6.4.3, _9, _18.0), bb12, UnwindUnreachable())
}
bb14 = {
_16.fld4.fld2.2 = _7 > _7;
_16.fld5.fld0 = core::ptr::addr_of_mut!(_27.0);
_19.fld3 = core::ptr::addr_of_mut!(_16.fld2);
_24.3 = (_19.fld6.3.0, _19.fld6.4.3, _23.3.2, _19.fld1);
_13.fld1.0 = core::ptr::addr_of_mut!(_19.fld7);
_24.3.0 = _19.fld6.3.0;
_23 = (_24.5.0, _19.fld6.1, _19.fld1, _24.3, _27, _19.fld6.5);
_16.fld0 = core::ptr::addr_of_mut!(_19.fld7);
_19.fld1 = _23.2;
_19.fld7 = -88389068073763077491326802605724918665_i128;
_12 = !_27.0;
Goto(bb11)
}
bb15 = {
_1 = (-9223372036854775808_isize) + 9223372036854775807_isize;
RET = _1 << _1;
RET = 209_u8 as isize;
_2 = !true;
_5 = 14385376877491703294_u64 as f64;
_2 = true;
_6 = [(-62_i8),4_i8,108_i8,20_i8,39_i8,34_i8,102_i8];
_5 = _1 as f64;
_1 = (-9223372036854775808_isize) | (-9223372036854775808_isize);
_1 = (-3676527916761638640_i64) as isize;
_6 = [(-69_i8),95_i8,65_i8,19_i8,(-128_i8),(-115_i8),120_i8];
_6 = [(-13_i8),110_i8,83_i8,(-66_i8),(-19_i8),(-117_i8),16_i8];
_9 = [3411984335_u32,564370887_u32,3359001853_u32,3880424840_u32,3869743539_u32,1401299962_u32,1907322831_u32];
_2 = !true;
_9 = [1303515425_u32,629484775_u32,2410077494_u32,833147730_u32,1785549392_u32,187340370_u32,2743110864_u32];
_6 = [(-45_i8),(-21_i8),(-81_i8),55_i8,(-69_i8),(-27_i8),48_i8];
_9 = [4131654249_u32,1773873845_u32,1378158556_u32,730398087_u32,776222012_u32,1100800306_u32,2235211595_u32];
_7 = '\u{367b2}';
RET = _1;
_7 = '\u{f8349}';
Goto(bb2)
}
bb16 = {
_17 = 13849402355222616288369634722631351585_i128 as f32;
_16.fld4.fld2.1 = _16.fld4.fld3.2 & _16.fld4.fld3.2;
_16.fld5.fld0 = _16.fld4.fld4.fld0;
_11 = _17 + _16.fld2;
_17 = _1 as f32;
_19.fld6.4.0 = _1 as i16;
_13.fld1.2 = _2 as u16;
_16.fld4.fld2 = (_12, _13.fld1.2, _2, _13.fld1.1);
_19.fld6.4 = (_16.fld4.fld2.0, _16.fld4.fld3.2, _16.fld4.fld2.2, _13.fld1.1);
_16.fld5.fld2 = core::ptr::addr_of!(_19.fld6.5.0);
_15 = 23643399468496418746006116322136651998_u128;
_13.fld2 = [28_i8,35_i8,13_i8,(-91_i8),(-97_i8),121_i8,52_i8];
Goto(bb6)
}
bb17 = {
_16.fld4.fld0 = [98_i8,(-27_i8),41_i8,52_i8,(-52_i8),114_i8,22_i8];
RET = !_1;
_24.4.3 = -_19.fld6.4.3;
_16.fld4.fld0 = [(-101_i8),(-43_i8),19_i8,(-77_i8),(-58_i8),(-119_i8),104_i8];
_24.5 = (_1,);
_23.3.2 = !100_i8;
_19.fld6.5.0 = !_1;
_19.fld6.4.3 = _23.4.3 - _5;
_3 = [_19.fld6.5.0,_19.fld6.5.0,_24.5.0,_1,_1,_19.fld6.5.0];
_23.4 = (_19.fld6.4.0, _16.fld4.fld3.2, _19.fld6.4.2, _19.fld6.4.3);
_23.5.0 = _19.fld6.5.0 * _24.5.0;
_24.4.1 = _1 as u16;
_16.fld5.fld3 = _16.fld4.fld4.fld3 >> _18.1;
_23.4.2 = !_18.2;
_16.fld4.fld2 = (_23.4.0, _16.fld4.fld3.2, _18.2, _10);
_19.fld1 = _23.2;
Call(_23.4.0 = core::intrinsics::bswap(_16.fld4.fld2.0), bb8, UnwindUnreachable())
}
bb18 = {
_34 = (_23.3.2, _21);
_24.1 = _27.0 | _18.0;
_19.fld6.5 = (_1,);
_19.fld4 = !(*_30);
_24.4.2 = _19.fld4 == _12;
_8 = _11 as f64;
_13.fld3.1 = core::ptr::addr_of_mut!(_28);
(*_30) = 8147480447204460608_usize as i16;
_19.fld1 = _23.2;
_13.fld3.0 = _40;
_16.fld4.fld2.1 = _26 as u16;
_23.2 = _24.3.3;
_43 = _23.3.3;
_19.fld6.2 = _7;
_23.3 = (_24.3.0, _16.fld4.fld3.1, _31, _43);
_33 = [_19.fld5,_19.fld5,_19.fld5,_19.fld5,_19.fld5,_19.fld5,_19.fld5];
_13.fld1.1 = -_16.fld4.fld2.3;
_19.fld6.5 = (_23.5.0,);
_19.fld6.3.3 = _24.3.3;
_19.fld6 = _23;
_24.1 = _19.fld6.4.0 << _23.0;
Goto(bb19)
}
bb19 = {
Call(_49 = dump_var(7_usize, 33_usize, Move(_33), 9_usize, Move(_9), 40_usize, Move(_40), 4_usize, Move(_4)), bb20, UnwindUnreachable())
}
bb20 = {
Call(_49 = dump_var(7_usize, 29_usize, Move(_29), 1_usize, Move(_1), 6_usize, Move(_6), 2_usize, Move(_2)), bb21, UnwindUnreachable())
}
bb21 = {
Call(_49 = dump_var(7_usize, 15_usize, Move(_15), 7_usize, Move(_7), 50_usize, _50, 50_usize, _50), bb22, UnwindUnreachable())
}
bb22 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn8(mut _1: [i8; 7],mut _2: bool,mut _3: f64,mut _4: [isize; 6],mut _5: [u32; 7],mut _6: [isize; 6],mut _7: [i8; 7],mut _8: bool,mut _9: f64,mut _10: f64) -> isize {
mir! {
type RET = isize;
let _11: char;
let _12: i32;
let _13: ([i8; 7], char);
let _14: [i8; 7];
let _15: bool;
let _16: Adt55;
let _17: Adt48;
let _18: Adt51;
let _19: f32;
let _20: (i8, u64);
let _21: isize;
let _22: Adt52;
let _23: isize;
let _24: f32;
let _25: (isize,);
let _26: i32;
let _27: *mut u8;
let _28: [i8; 7];
let _29: usize;
let _30: (i16, u16, bool, f64);
let _31: [u32; 7];
let _32: Adt51;
let _33: isize;
let _34: ([i8; 7], char);
let _35: Adt61;
let _36: f64;
let _37: (i8, u64);
let _38: *const i64;
let _39: u16;
let _40: bool;
let _41: [i128; 3];
let _42: u32;
let _43: Adt55;
let _44: ();
let _45: ();
{
_2 = _8 <= _8;
_7 = [(-24_i8),(-5_i8),87_i8,117_i8,87_i8,(-15_i8),(-97_i8)];
_5 = [421911228_u32,3355828035_u32,3612049496_u32,4113060822_u32,2281470243_u32,924649679_u32,1159004010_u32];
_8 = !_2;
_7 = [(-14_i8),6_i8,(-99_i8),121_i8,79_i8,(-67_i8),(-17_i8)];
RET = (-3208833171827329593835611897829628266_i128) as isize;
_4 = [(-9223372036854775808_isize),9223372036854775807_isize,9223372036854775807_isize,119_isize,(-9223372036854775808_isize),52_isize];
_9 = _3 * _3;
_11 = '\u{7800}';
_10 = 17527540576114277925800543283580488396_i128 as f64;
RET = 9176_u16 as isize;
_7 = _1;
_9 = -_10;
_3 = _10;
_8 = _2 != _2;
RET = (-9223372036854775808_isize);
_2 = !_8;
_11 = '\u{434c7}';
_13 = (_7, _11);
_13.0 = [(-92_i8),95_i8,(-98_i8),82_i8,34_i8,40_i8,(-61_i8)];
_13.0 = [(-119_i8),106_i8,(-24_i8),(-13_i8),41_i8,118_i8,98_i8];
_13 = (_7, _11);
_2 = _8 >= _8;
_7 = [98_i8,(-54_i8),(-112_i8),(-67_i8),(-115_i8),(-21_i8),45_i8];
_13.0 = [(-119_i8),34_i8,1_i8,(-58_i8),10_i8,77_i8,(-86_i8)];
_9 = -_10;
_8 = _2 <= _2;
Goto(bb1)
}
bb1 = {
_3 = -_10;
_2 = _13.1 > _13.1;
_2 = !_8;
_10 = _3 - _9;
_15 = _2 <= _8;
RET = (-9223372036854775808_isize) - (-2_isize);
_2 = _15 < _15;
_10 = -_9;
_2 = _8 != _15;
_14 = [59_i8,(-9_i8),37_i8,77_i8,37_i8,(-19_i8),(-33_i8)];
_3 = 62386037545002012103649598888565535440_i128 as f64;
_17.fld0 = _2;
Call(_17 = fn9(_13.1, _9), bb2, UnwindUnreachable())
}
bb2 = {
_14 = [_17.fld1,_17.fld1,_17.fld1,_17.fld1,_17.fld1,_17.fld1,_17.fld1];
_8 = _2;
_9 = 83062891316215400648589977958587372738_u128 as f64;
_1 = _7;
_12 = (-339963015_i32);
_1 = [_17.fld1,_17.fld1,_17.fld1,_17.fld1,_17.fld1,_17.fld1,_17.fld1];
RET = 65855732570412681647800653599587266862_u128 as isize;
_6 = _4;
_10 = _3;
_6 = _4;
RET = !9223372036854775807_isize;
_13.1 = _11;
_18.fld2 = [13199516546306841332552676096283937848_i128,90369850703523949475474454789249555889_i128,149049198812630039134448548760725576857_i128];
_18.fld1 = 208_u8 - 253_u8;
_5 = [3668464862_u32,2317839450_u32,692105226_u32,389995941_u32,2741562186_u32,3274445592_u32,654709185_u32];
_16.fld3 = _12 >> _17.fld1;
_4 = _6;
_17.fld1 = 56_i8;
_17.fld1 = 25175_i16 as i8;
_12 = _16.fld3;
Goto(bb3)
}
bb3 = {
_20.1 = 7279790840830118124_u64;
_18.fld0.1 = 16849609895846018358407163613637992590_u128 as f64;
RET = -9223372036854775807_isize;
_20 = (_17.fld1, 4716586402454333269_u64);
_20.0 = -_17.fld1;
_2 = _8 | _8;
_8 = !_15;
RET = (-9223372036854775808_isize) >> _20.0;
_16.fld3 = -_12;
_7 = [_20.0,_20.0,_20.0,_20.0,_20.0,_17.fld1,_20.0];
_14 = _13.0;
_22.fld6.3.2 = _17.fld1 + _20.0;
_10 = _18.fld0.1;
_22.fld1 = _13.1;
_19 = _18.fld1 as f32;
_23 = 9223372036854775807_isize;
_22.fld6.5 = (_23,);
RET = _23;
_13 = (_14, _11);
Goto(bb4)
}
bb4 = {
_22.fld6.2 = _11;
_3 = 24921_i16 as f64;
_22.fld6.2 = _22.fld1;
_22.fld6.1 = 1215019552894293422_usize as i16;
_22.fld6.5.0 = -_23;
_22.fld6.5 = (_23,);
_24 = -_19;
_22.fld6.5 = (_23,);
_13.0 = _14;
_15 = _2 <= _2;
_18.fld0.0 = core::ptr::addr_of_mut!(_22.fld7);
_17.fld1 = _22.fld6.3.2;
_22.fld6.4.3 = _18.fld0.1 - _10;
_22.fld6.4.1 = !56135_u16;
_22.fld6.4.0 = !_22.fld6.1;
_8 = _19 < _19;
_20 = (_17.fld1, 14718209201479837337_u64);
_22.fld6.3.0 = -2919523989816118256_i64;
_22.fld6.5.0 = _23;
_1 = [_17.fld1,_20.0,_17.fld1,_22.fld6.3.2,_17.fld1,_22.fld6.3.2,_22.fld6.3.2];
_22.fld6.4 = (_22.fld6.1, 22372_u16, _15, _10);
_25.0 = _22.fld6.5.0;
Goto(bb5)
}
bb5 = {
_16.fld3 = _17.fld1 as i32;
_12 = _16.fld3 ^ _16.fld3;
_30.3 = (-32940496009183318413025854808620663237_i128) as f64;
_27 = core::ptr::addr_of_mut!(_18.fld1);
_22.fld2 = -_23;
_22.fld6.4.0 = !_22.fld6.1;
_26 = _16.fld3 << _22.fld6.4.1;
match _22.fld6.4.1 {
22372 => bb7,
_ => bb6
}
}
bb6 = {
_20.1 = 7279790840830118124_u64;
_18.fld0.1 = 16849609895846018358407163613637992590_u128 as f64;
RET = -9223372036854775807_isize;
_20 = (_17.fld1, 4716586402454333269_u64);
_20.0 = -_17.fld1;
_2 = _8 | _8;
_8 = !_15;
RET = (-9223372036854775808_isize) >> _20.0;
_16.fld3 = -_12;
_7 = [_20.0,_20.0,_20.0,_20.0,_20.0,_17.fld1,_20.0];
_14 = _13.0;
_22.fld6.3.2 = _17.fld1 + _20.0;
_10 = _18.fld0.1;
_22.fld1 = _13.1;
_19 = _18.fld1 as f32;
_23 = 9223372036854775807_isize;
_22.fld6.5 = (_23,);
RET = _23;
_13 = (_14, _11);
Goto(bb4)
}
bb7 = {
_14 = _13.0;
_30.2 = _2;
_30.0 = -_22.fld6.1;
_18.fld3 = core::ptr::addr_of_mut!(_22.fld6.5);
_22.fld3 = core::ptr::addr_of_mut!(_24);
_30 = (_22.fld6.1, _22.fld6.4.1, _15, _9);
RET = _25.0 << _26;
_12 = _26;
_22.fld7 = (-90963398794033618358350640221588027662_i128) & (-15240223568570342240626143577577438505_i128);
_22.fld6.0 = _22.fld2;
_13.1 = _22.fld1;
_22.fld4 = 245644692015055299586522113118097445236_u128 as i16;
RET = _22.fld6.5.0;
_22.fld2 = _25.0;
_16.fld2 = core::ptr::addr_of!(_22.fld6.5.0);
_30 = (_22.fld6.1, _22.fld6.4.1, _15, _3);
_17.fld1 = _20.0;
_29 = _22.fld7 as usize;
_22.fld6.4.2 = _30.2;
Goto(bb8)
}
bb8 = {
_20.1 = 15470331958628520526_u64 / 3307785722363206862_u64;
_29 = 3_usize;
_22.fld5 = _5[_29] * _5[_29];
_22.fld6.4 = _30;
_31[_29] = _22.fld5;
_22.fld6.2 = _13.1;
_5 = [_22.fld5,_31[_29],_31[_29],_31[_29],_31[_29],_22.fld5,_22.fld5];
_32.fld3 = core::ptr::addr_of_mut!(_22.fld6.5);
_10 = _22.fld7 as f64;
_32.fld0.1 = _18.fld0.1 - _3;
_32.fld3 = core::ptr::addr_of_mut!(_22.fld6.5);
_22.fld6.5 = _25;
_22.fld6.3.1 = _22.fld6.4.3 / f64::NAN;
_19 = _20.1 as f32;
_32.fld2 = _18.fld2;
_17.fld0 = _30.2 <= _2;
_22.fld6.5.0 = !_4[_29];
_17.fld0 = _15;
_6[_29] = _22.fld6.3.0 as isize;
_22.fld6.3.2 = -_14[_29];
_13.1 = _22.fld6.2;
_35.fld1 = _18.fld0.0;
Goto(bb9)
}
bb9 = {
_17.fld1 = _13.0[_29];
_31[_29] = _22.fld5 + _22.fld5;
_35.fld5[_29] = !_22.fld6.5.0;
_35.fld0[_29] = _13.0[_29] & _17.fld1;
_1[_29] = _22.fld6.2 as i8;
_16.fld1 = core::ptr::addr_of_mut!(_25);
_17.fld2 = core::ptr::addr_of!(_16.fld0);
match _13.0[_29] {
0 => bb5,
1 => bb2,
2 => bb8,
3 => bb10,
4 => bb11,
5 => bb12,
340282366920938463463374607431768211398 => bb14,
_ => bb13
}
}
bb10 = {
_20.1 = 7279790840830118124_u64;
_18.fld0.1 = 16849609895846018358407163613637992590_u128 as f64;
RET = -9223372036854775807_isize;
_20 = (_17.fld1, 4716586402454333269_u64);
_20.0 = -_17.fld1;
_2 = _8 | _8;
_8 = !_15;
RET = (-9223372036854775808_isize) >> _20.0;
_16.fld3 = -_12;
_7 = [_20.0,_20.0,_20.0,_20.0,_20.0,_17.fld1,_20.0];
_14 = _13.0;
_22.fld6.3.2 = _17.fld1 + _20.0;
_10 = _18.fld0.1;
_22.fld1 = _13.1;
_19 = _18.fld1 as f32;
_23 = 9223372036854775807_isize;
_22.fld6.5 = (_23,);
RET = _23;
_13 = (_14, _11);
Goto(bb4)
}
bb11 = {
_22.fld6.2 = _11;
_3 = 24921_i16 as f64;
_22.fld6.2 = _22.fld1;
_22.fld6.1 = 1215019552894293422_usize as i16;
_22.fld6.5.0 = -_23;
_22.fld6.5 = (_23,);
_24 = -_19;
_22.fld6.5 = (_23,);
_13.0 = _14;
_15 = _2 <= _2;
_18.fld0.0 = core::ptr::addr_of_mut!(_22.fld7);
_17.fld1 = _22.fld6.3.2;
_22.fld6.4.3 = _18.fld0.1 - _10;
_22.fld6.4.1 = !56135_u16;
_22.fld6.4.0 = !_22.fld6.1;
_8 = _19 < _19;
_20 = (_17.fld1, 14718209201479837337_u64);
_22.fld6.3.0 = -2919523989816118256_i64;
_22.fld6.5.0 = _23;
_1 = [_17.fld1,_20.0,_17.fld1,_22.fld6.3.2,_17.fld1,_22.fld6.3.2,_22.fld6.3.2];
_22.fld6.4 = (_22.fld6.1, 22372_u16, _15, _10);
_25.0 = _22.fld6.5.0;
Goto(bb5)
}
bb12 = {
_3 = -_10;
_2 = _13.1 > _13.1;
_2 = !_8;
_10 = _3 - _9;
_15 = _2 <= _8;
RET = (-9223372036854775808_isize) - (-2_isize);
_2 = _15 < _15;
_10 = -_9;
_2 = _8 != _15;
_14 = [59_i8,(-9_i8),37_i8,77_i8,37_i8,(-19_i8),(-33_i8)];
_3 = 62386037545002012103649598888565535440_i128 as f64;
_17.fld0 = _2;
Call(_17 = fn9(_13.1, _9), bb2, UnwindUnreachable())
}
bb13 = {
_16.fld3 = _17.fld1 as i32;
_12 = _16.fld3 ^ _16.fld3;
_30.3 = (-32940496009183318413025854808620663237_i128) as f64;
_27 = core::ptr::addr_of_mut!(_18.fld1);
_22.fld2 = -_23;
_22.fld6.4.0 = !_22.fld6.1;
_26 = _16.fld3 << _22.fld6.4.1;
match _22.fld6.4.1 {
22372 => bb7,
_ => bb6
}
}
bb14 = {
_13.0 = [_22.fld6.3.2,_35.fld0[_29],_1[_29],_1[_29],_14[_29],_22.fld6.3.2,_22.fld6.3.2];
_5[_29] = _31[_29] - _31[_29];
_34.0[_29] = _22.fld7 as i8;
_36 = _22.fld7 as f64;
_16.fld0 = core::ptr::addr_of_mut!(_22.fld6.1);
_13.0 = [_20.0,_22.fld6.3.2,_35.fld0[_29],_22.fld6.3.2,_20.0,_22.fld6.3.2,_14[_29]];
_16.fld1 = core::ptr::addr_of_mut!(_22.fld6.5);
_35.fld2.3 = -_3;
_16.fld2 = core::ptr::addr_of!(_22.fld2);
_1[_29] = _35.fld0[_29] ^ _13.0[_29];
_22.fld0 = _2 > _30.2;
(*_27) = 26_u8;
_16.fld1 = core::ptr::addr_of_mut!(_22.fld6.5);
_20 = (_1[_29], 2735896491881930635_u64);
_42 = _31[_29];
_43.fld2 = core::ptr::addr_of!(_22.fld2);
_37.1 = _20.1 * _20.1;
_35.fld4.fld0 = core::ptr::addr_of_mut!(_35.fld2.0);
_22.fld4 = _22.fld6.1 >> _5[_29];
_35.fld3 = (_18.fld0.0, _32.fld0.1, _22.fld6.4.1);
_22.fld6.5 = (_4[_29],);
Goto(bb15)
}
bb15 = {
Call(_44 = dump_var(8_usize, 8_usize, Move(_8), 20_usize, Move(_20), 1_usize, Move(_1), 12_usize, Move(_12)), bb16, UnwindUnreachable())
}
bb16 = {
Call(_44 = dump_var(8_usize, 2_usize, Move(_2), 7_usize, Move(_7), 23_usize, Move(_23), 15_usize, Move(_15)), bb17, UnwindUnreachable())
}
bb17 = {
Call(_44 = dump_var(8_usize, 4_usize, Move(_4), 45_usize, _45, 45_usize, _45, 45_usize, _45), bb18, UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn9(mut _1: char,mut _2: f64) -> Adt48 {
mir! {
type RET = Adt48;
let _3: Adt52;
let _4: *mut i128;
let _5: u32;
let _6: f64;
let _7: ([i64; 6], *mut i16);
let _8: [i128; 3];
let _9: i32;
let _10: u32;
let _11: isize;
let _12: isize;
let _13: f64;
let _14: ();
let _15: ();
{
RET.fld0 = _1 < _1;
RET.fld1 = 121_i8;
_2 = (-97793368479661028807091287026622050876_i128) as f64;
RET.fld0 = _2 <= _2;
RET.fld0 = !true;
_3.fld6.4.1 = !21766_u16;
_3.fld6.3.2 = -(-2_i8);
_2 = 9730164117244391542_usize as f64;
RET.fld0 = true;
_3.fld0 = !false;
_3.fld4 = (-5463_i16) | (-29626_i16);
_3.fld7 = !(-83440831251310268149383460932705149639_i128);
_3.fld6.3.3 = _1;
_3.fld6.3.0 = 110919900102147890828049890855549682773_u128 as i64;
_3.fld6.4 = (_3.fld4, 25607_u16, _3.fld0, _2);
Goto(bb1)
}
bb1 = {
_3.fld6.3 = (6386872434901965542_i64, _2, (-96_i8), _1);
_3.fld6.1 = _3.fld6.4.1 as i16;
RET.fld1 = _3.fld4 as i8;
_3.fld6.3.2 = (-84_i8);
_3.fld5 = 171362845061493349101096380170515666537_u128 as u32;
_3.fld6.3 = (8608630266335810915_i64, _3.fld6.4.3, 61_i8, _1);
_1 = _3.fld6.3.3;
_3.fld6.4.0 = _3.fld6.1 << _3.fld6.4.1;
_3.fld6.4.1 = 13383_u16;
_3.fld6.3.2 = (-6_i8);
_3.fld6.3.2 = -5_i8;
RET.fld0 = _3.fld4 != _3.fld6.4.0;
_3.fld6.3.3 = _1;
_3.fld6.0 = 9223372036854775807_isize | 113_isize;
_1 = _3.fld6.3.3;
_3.fld6.2 = _1;
_2 = _3.fld6.4.0 as f64;
_3.fld6.5.0 = _3.fld6.0;
_3.fld1 = _3.fld6.3.3;
match _3.fld6.3.0 {
0 => bb2,
8608630266335810915 => bb4,
_ => bb3
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
RET.fld0 = _3.fld6.1 < _3.fld6.1;
_3.fld6.3.0 = (-5383954022905497355_i64);
_3.fld6.4.3 = 5758605117815880403_usize as f64;
_3.fld6.3.2 = 66_i8 << _3.fld6.3.0;
_3.fld6.3.2 = !(-54_i8);
_3.fld1 = _1;
_3.fld6.3 = (6009803205995174701_i64, _2, (-63_i8), _1);
_3.fld4 = _3.fld6.3.0 as i16;
_5 = _3.fld5 & _3.fld5;
_1 = _3.fld1;
_1 = _3.fld6.3.3;
_3.fld6.2 = _3.fld1;
_3.fld6.4.0 = _3.fld6.4.1 as i16;
RET.fld1 = _3.fld1 as i8;
_3.fld0 = _3.fld6.4.2;
_6 = _3.fld6.3.1;
_3.fld6.5.0 = -_3.fld6.0;
_3.fld6.2 = _1;
_3.fld6.4.0 = _3.fld6.1 << _3.fld6.3.0;
_3.fld6.3.2 = 167459685721233300322661517015769839419_u128 as i8;
_3.fld6.5.0 = _3.fld6.0 | _3.fld6.0;
_7.0 = [_3.fld6.3.0,_3.fld6.3.0,_3.fld6.3.0,_3.fld6.3.0,_3.fld6.3.0,_3.fld6.3.0];
_4 = core::ptr::addr_of_mut!(_3.fld7);
(*_4) = 142286698354913320024520254882794413916_i128;
_3.fld6.4.3 = 1601003178_i32 as f64;
RET.fld2 = core::ptr::addr_of!(_7.1);
(*_4) = (-110450515600596251005055861982902141912_i128);
_3.fld6.5.0 = _3.fld6.0;
Goto(bb5)
}
bb5 = {
(*_4) = 6768437571906483437868632994236046481_i128;
_4 = core::ptr::addr_of_mut!((*_4));
(*_4) = (-120036017439245090026814917625345904676_i128) ^ (-8050006250329643878421267711106592997_i128);
Goto(bb6)
}
bb6 = {
RET.fld0 = _3.fld0;
_3.fld0 = _3.fld6.4.2;
_7.1 = core::ptr::addr_of_mut!(_3.fld4);
_3.fld6.3.0 = _2 as i64;
_3.fld6.4.2 = _3.fld0;
_3.fld0 = !_3.fld6.4.2;
_3.fld6.3.2 = (-18_i8) >> _3.fld6.4.0;
_3.fld0 = _3.fld6.4.2;
_9 = -152784528_i32;
_8 = [(*_4),(*_4),(*_4)];
_3.fld4 = _3.fld6.4.0;
Call(_3.fld6.5 = fn10(_7, _5, _3.fld6.1, _7.1, _3.fld1, _3.fld6.4.2, _7.1, _6), bb7, UnwindUnreachable())
}
bb7 = {
_6 = _2 - _3.fld6.3.1;
_11 = _3.fld6.5.0;
_3.fld6.3.3 = _1;
_5 = _3.fld5;
_3.fld6.3.2 = !(-128_i8);
_3.fld4 = _3.fld6.2 as i16;
_3.fld6.4.0 = -_3.fld6.1;
_7.0 = [_3.fld6.3.0,_3.fld6.3.0,_3.fld6.3.0,_3.fld6.3.0,_3.fld6.3.0,_3.fld6.3.0];
RET.fld0 = _3.fld0;
_9 = (-254091118_i32);
RET.fld2 = core::ptr::addr_of!(_7.1);
_3.fld4 = _3.fld6.4.0 - _3.fld6.1;
_3.fld6.3.1 = _6;
_3.fld1 = _3.fld6.3.3;
_7.0 = [_3.fld6.3.0,_3.fld6.3.0,_3.fld6.3.0,_3.fld6.3.0,_3.fld6.3.0,_3.fld6.3.0];
_3.fld1 = _1;
Goto(bb8)
}
bb8 = {
Call(_14 = dump_var(9_usize, 11_usize, Move(_11), 5_usize, Move(_5), 15_usize, _15, 15_usize, _15), bb9, UnwindUnreachable())
}
bb9 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn10(mut _1: ([i64; 6], *mut i16),mut _2: u32,mut _3: i16,mut _4: *mut i16,mut _5: char,mut _6: bool,mut _7: *mut i16,mut _8: f64) -> (isize,) {
mir! {
type RET = (isize,);
let _9: i128;
let _10: isize;
let _11: char;
let _12: isize;
let _13: bool;
let _14: bool;
let _15: Adt61;
let _16: *const *mut i16;
let _17: [i128; 3];
let _18: [char; 8];
let _19: u16;
let _20: Adt62;
let _21: u8;
let _22: (i16, u16, bool, f64);
let _23: *const u32;
let _24: i32;
let _25: (i16, u16, bool, f64);
let _26: *mut u8;
let _27: f32;
let _28: Adt51;
let _29: *const i8;
let _30: [i128; 2];
let _31: f64;
let _32: *const i8;
let _33: u128;
let _34: ();
let _35: ();
{
_3 = (*_4);
(*_4) = -_3;
(*_4) = _6 as i16;
Goto(bb1)
}
bb1 = {
RET.0 = (-52_isize);
RET = (9223372036854775807_isize,);
_8 = 58075511387106471652707831661004437218_i128 as f64;
_1.1 = core::ptr::addr_of_mut!((*_7));
RET = ((-9223372036854775808_isize),);
RET.0 = 59_isize * (-9223372036854775808_isize);
_5 = '\u{10491}';
(*_4) = -_3;
_4 = core::ptr::addr_of_mut!((*_7));
_2 = !2782079635_u32;
_6 = (*_4) >= (*_7);
RET.0 = 20735_u16 as isize;
RET.0 = 78_isize;
_1.0 = [1675139322346202016_i64,(-5168865245333656024_i64),2701410634967173046_i64,5844048258658289738_i64,(-2256841239449487345_i64),1517105059174771938_i64];
_10 = -9223372036854775807_isize;
RET.0 = -_10;
_2 = 1329297022_u32;
RET.0 = _10 ^ _10;
RET.0 = !_10;
_1.0 = [3877934417296244055_i64,9172569365157430493_i64,6905328871916876484_i64,(-718491334442020023_i64),7122089116981629470_i64,656765835803132825_i64];
RET.0 = !_10;
(*_4) = 170_u8 as i16;
_1.0 = [(-8659868541016339097_i64),(-6181898770422933319_i64),912440558888428092_i64,(-9055135881549320029_i64),(-2380741305352609799_i64),(-5316603556949606955_i64)];
_11 = _5;
match _2 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
1329297022 => bb9,
_ => bb8
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
_15.fld2.3 = -_8;
RET = (_10,);
RET.0 = _10;
_7 = _4;
_15.fld2.1 = !55322_u16;
RET.0 = _10;
_14 = _6 <= _6;
_10 = (-9223372036854775808_isize) | (-120_isize);
_15.fld5 = [_10,_10,_10,_10,_10,_10];
_8 = 1_usize as f64;
_15.fld2.2 = _14;
(*_4) = 153_u8 as i16;
_15.fld3.1 = _8 + _8;
_20.fld2 = _15.fld2.1 as f32;
_20.fld4.fld4.fld2 = core::ptr::addr_of!(_10);
match _2 {
0 => bb4,
1 => bb6,
2 => bb5,
3 => bb10,
1329297022 => bb12,
_ => bb11
}
}
bb10 = {
Return()
}
bb11 = {
Return()
}
bb12 = {
_9 = (-15613252616602814848441213539438834141_i128) - (-138682833769753810423267237800307553354_i128);
_20.fld4.fld4.fld2 = core::ptr::addr_of!(_12);
_15.fld5 = [_10,_10,_10,_10,_10,_10];
_8 = _15.fld2.3 * _15.fld3.1;
_20.fld4.fld2.1 = _15.fld2.1 ^ _15.fld2.1;
_20.fld3 = [_2,_2,_2,_2,_2,_2,_2];
_15.fld1 = core::ptr::addr_of_mut!(_9);
_25 = (_3, _20.fld4.fld2.1, _6, _8);
_20.fld4.fld3.2 = !_25.1;
_25 = (_3, _15.fld2.1, _15.fld2.2, _15.fld2.3);
_20.fld4.fld4.fld3 = _8 as i32;
_20.fld4.fld2.2 = !_25.2;
_15.fld2.3 = -_8;
_15.fld3.1 = -_8;
_15.fld2 = _25;
_15.fld0 = [(-1_i8),9_i8,(-36_i8),55_i8,10_i8,86_i8,57_i8];
_22.1 = _9 as u16;
_12 = _10;
Goto(bb13)
}
bb13 = {
_5 = _11;
_15.fld3.2 = !_20.fld4.fld2.1;
_9 = (-58863436960898982692262927281185632440_i128) | 137483609706493786291879500401002679660_i128;
_20.fld5.fld3 = _20.fld4.fld4.fld3 - _20.fld4.fld4.fld3;
_20.fld0 = core::ptr::addr_of_mut!(_9);
_1.1 = core::ptr::addr_of_mut!(_22.0);
_2 = 3611596986_u32 * 559667626_u32;
_15.fld2.2 = _6;
RET = (_10,);
RET = (_10,);
_27 = _20.fld2;
_8 = _15.fld2.3 + _15.fld3.1;
Goto(bb14)
}
bb14 = {
_20.fld4.fld1 = core::ptr::addr_of_mut!(_9);
_19 = _20.fld4.fld2.1;
_8 = -_15.fld2.3;
_15.fld2 = _25;
_20.fld4.fld4.fld0 = core::ptr::addr_of_mut!(_25.0);
_15.fld4.fld0 = core::ptr::addr_of_mut!((*_7));
_13 = _20.fld4.fld2.2 > _25.2;
_28.fld0.2 = _19 ^ _20.fld4.fld3.2;
_22.1 = _13 as u16;
_28.fld0 = (_20.fld4.fld1, _8, _22.1);
_15.fld2.0 = (*_7);
_5 = _11;
_22.0 = _25.0;
_20.fld4.fld2.1 = _28.fld0.2;
_24 = _20.fld4.fld4.fld3;
_22 = _25;
_20.fld2 = _27 / (-0.0000000000000000000000000000000000000025202703205497916_f32);
_20.fld4.fld0 = _15.fld0;
_20.fld4.fld2 = (_22.0, _28.fld0.2, _14, _15.fld2.3);
_12 = _10;
Goto(bb15)
}
bb15 = {
Call(_34 = dump_var(10_usize, 24_usize, Move(_24), 11_usize, Move(_11), 6_usize, Move(_6), 10_usize, Move(_10)), bb16, UnwindUnreachable())
}
bb16 = {
Call(_34 = dump_var(10_usize, 12_usize, Move(_12), 14_usize, Move(_14), 35_usize, _35, 35_usize, _35), bb17, UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn11(mut _1: i8,mut _2: *mut i16,mut _3: bool,mut _4: *const isize,mut _5: i16,mut _6: i16,mut _7: isize,mut _8: [isize; 6],mut _9: i8,mut _10: char,mut _11: u16,mut _12: char,mut _13: f64,mut _14: f64,mut _15: [u32; 7],mut _16: i16) -> bool {
mir! {
type RET = bool;
let _17: *const *const *mut i16;
let _18: i8;
let _19: ([i64; 6], *mut i16);
let _20: [u32; 7];
let _21: [u32; 7];
let _22: i128;
let _23: [i128; 3];
let _24: isize;
let _25: (i8, u64);
let _26: Adt50;
let _27: f32;
let _28: bool;
let _29: [i64; 6];
let _30: ();
let _31: ();
{
RET = _3 | _3;
_1 = _9 >> _6;
_13 = _14 - _14;
_3 = (*_2) == _16;
_13 = _14 / f64::NAN;
_5 = _16;
(*_2) = 112465055574042931665471763965152032522_u128 as i16;
_2 = core::ptr::addr_of_mut!(_6);
_9 = !_1;
_13 = _14;
_14 = -_13;
_12 = _10;
_5 = _14 as i16;
_18 = _9;
_7 = (*_4) ^ (*_4);
_19.1 = core::ptr::addr_of_mut!((*_2));
_16 = (*_2) << _18;
_11 = 57331_u16 ^ 1908_u16;
(*_2) = !_16;
_16 = (*_2);
_19.1 = _2;
_12 = _10;
(*_2) = _16 | _5;
Call(_19.0 = fn12(_7, _11, _8, _4, _16, _19.1, _15, _18, _7, _19.1, _4, _10, (*_4), _4, (*_4), _10), bb1, UnwindUnreachable())
}
bb1 = {
_16 = -(*_2);
_9 = 203_u8 as i8;
_22 = -(-138155874485888988209925524757974749982_i128);
_22 = (-125833398636940837561772769814062999227_i128) & 83648890231175872296964681391252945453_i128;
_9 = _1 * _18;
_20 = [3565360284_u32,940433898_u32,2812797697_u32,2761999543_u32,2300195915_u32,1998212567_u32,745583573_u32];
(*_2) = _3 as i16;
_20 = _15;
_19.1 = core::ptr::addr_of_mut!(_5);
_21 = _20;
_12 = _10;
_11 = !45135_u16;
_9 = _18 ^ _1;
(*_4) = _7 | _7;
_16 = -(*_2);
Goto(bb2)
}
bb2 = {
_7 = (*_4) >> _9;
RET = !_3;
(*_4) = _7 | _7;
_1 = _9;
_7 = (*_4) - (*_4);
_18 = _9 * _1;
_25.0 = !_9;
_25.0 = !_9;
(*_4) = _7 >> _25.0;
_12 = _10;
_25.1 = 10542444612702296664_u64 / 1915393231131839368_u64;
_24 = _7;
_23 = [_22,_22,_22];
_10 = _12;
_22 = (-18086475892760572421002146273479395316_i128) + 14968254130866188668111344947508372940_i128;
_7 = _3 as isize;
_23 = [_22,_22,_22];
_21 = [112298610_u32,151602554_u32,3699780998_u32,3060598042_u32,258995637_u32,1081026070_u32,2819141481_u32];
_7 = (*_4) << _24;
_19.1 = _2;
_25 = (_18, 10011890916220829501_u64);
RET = !_3;
_23 = [_22,_22,_22];
_14 = _13 + _13;
_7 = _11 as isize;
match _25.1 {
10011890916220829501 => bb4,
_ => bb3
}
}
bb3 = {
_16 = -(*_2);
_9 = 203_u8 as i8;
_22 = -(-138155874485888988209925524757974749982_i128);
_22 = (-125833398636940837561772769814062999227_i128) & 83648890231175872296964681391252945453_i128;
_9 = _1 * _18;
_20 = [3565360284_u32,940433898_u32,2812797697_u32,2761999543_u32,2300195915_u32,1998212567_u32,745583573_u32];
(*_2) = _3 as i16;
_20 = _15;
_19.1 = core::ptr::addr_of_mut!(_5);
_21 = _20;
_12 = _10;
_11 = !45135_u16;
_9 = _18 ^ _1;
(*_4) = _7 | _7;
_16 = -(*_2);
Goto(bb2)
}
bb4 = {
_19.1 = core::ptr::addr_of_mut!((*_2));
_26.fld5.fld1 = _25.0 * _9;
_26.fld2 = (_26.fld5.fld1, _25.1);
_26.fld5.fld1 = _26.fld2.0;
_26.fld1.1 = _10;
_9 = _26.fld5.fld1;
_26.fld1.1 = _10;
_7 = !(*_4);
(*_2) = _5 * _16;
(*_2) = _3 as i16;
_12 = _10;
_4 = core::ptr::addr_of!(_24);
_19.0 = [(-7090623487567853997_i64),4623233984380140814_i64,8791636240970143228_i64,8592552836899951480_i64,5543889712064473152_i64,2382558906400826523_i64];
_17 = core::ptr::addr_of!(_26.fld5.fld2);
(*_4) = _7 | _7;
_26.fld1.0 = [_25.0,_9,_26.fld5.fld1,_9,_26.fld5.fld1,_9,_26.fld2.0];
_21 = _20;
_19.1 = core::ptr::addr_of_mut!(_16);
_12 = _10;
_19.0 = [(-3105573776368106567_i64),8177851558975219322_i64,5224609327489392745_i64,(-8140284753283736970_i64),(-1833638185958494799_i64),6548633840606727789_i64];
_20 = _21;
(*_4) = -_7;
match _26.fld2.1 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb5,
10011890916220829501 => bb7,
_ => bb6
}
}
bb5 = {
_16 = -(*_2);
_9 = 203_u8 as i8;
_22 = -(-138155874485888988209925524757974749982_i128);
_22 = (-125833398636940837561772769814062999227_i128) & 83648890231175872296964681391252945453_i128;
_9 = _1 * _18;
_20 = [3565360284_u32,940433898_u32,2812797697_u32,2761999543_u32,2300195915_u32,1998212567_u32,745583573_u32];
(*_2) = _3 as i16;
_20 = _15;
_19.1 = core::ptr::addr_of_mut!(_5);
_21 = _20;
_12 = _10;
_11 = !45135_u16;
_9 = _18 ^ _1;
(*_4) = _7 | _7;
_16 = -(*_2);
Goto(bb2)
}
bb6 = {
_7 = (*_4) >> _9;
RET = !_3;
(*_4) = _7 | _7;
_1 = _9;
_7 = (*_4) - (*_4);
_18 = _9 * _1;
_25.0 = !_9;
_25.0 = !_9;
(*_4) = _7 >> _25.0;
_12 = _10;
_25.1 = 10542444612702296664_u64 / 1915393231131839368_u64;
_24 = _7;
_23 = [_22,_22,_22];
_10 = _12;
_22 = (-18086475892760572421002146273479395316_i128) + 14968254130866188668111344947508372940_i128;
_7 = _3 as isize;
_23 = [_22,_22,_22];
_21 = [112298610_u32,151602554_u32,3699780998_u32,3060598042_u32,258995637_u32,1081026070_u32,2819141481_u32];
_7 = (*_4) << _24;
_19.1 = _2;
_25 = (_18, 10011890916220829501_u64);
RET = !_3;
_23 = [_22,_22,_22];
_14 = _13 + _13;
_7 = _11 as isize;
match _25.1 {
10011890916220829501 => bb4,
_ => bb3
}
}
bb7 = {
_15 = _20;
_11 = _16 as u16;
_11 = _22 as u16;
_21 = _15;
(*_17) = core::ptr::addr_of!(_19.1);
_16 = _13 as i16;
_18 = -_26.fld5.fld1;
_24 = !_7;
RET = !_3;
RET = _24 == _24;
_26.fld5.fld0 = _24 <= (*_4);
_26.fld2 = (_25.0, _25.1);
_22 = (*_2) as i128;
_8 = [_24,_24,(*_4),_24,_24,(*_4)];
_22 = 1749456681222346634463664868148131037_i128 | (-86159066848247461571020074118117147323_i128);
(*_2) = _11 as i16;
_6 = _16;
(*_4) = -_7;
_24 = !_7;
(*_4) = _7;
_19.0 = [6427455376606973620_i64,5635006432256496871_i64,7783086737728283915_i64,8322786085096961468_i64,6687356663897148809_i64,(-2179723003921611329_i64)];
_24 = -_7;
_26.fld2.0 = _9;
_28 = _3 & _26.fld5.fld0;
Goto(bb8)
}
bb8 = {
Call(_30 = dump_var(11_usize, 23_usize, Move(_23), 1_usize, Move(_1), 16_usize, Move(_16), 8_usize, Move(_8)), bb9, UnwindUnreachable())
}
bb9 = {
Call(_30 = dump_var(11_usize, 21_usize, Move(_21), 18_usize, Move(_18), 28_usize, Move(_28), 5_usize, Move(_5)), bb10, UnwindUnreachable())
}
bb10 = {
Call(_30 = dump_var(11_usize, 25_usize, Move(_25), 10_usize, Move(_10), 31_usize, _31, 31_usize, _31), bb11, UnwindUnreachable())
}
bb11 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn12(mut _1: isize,mut _2: u16,mut _3: [isize; 6],mut _4: *const isize,mut _5: i16,mut _6: *mut i16,mut _7: [u32; 7],mut _8: i8,mut _9: isize,mut _10: *mut i16,mut _11: *const isize,mut _12: char,mut _13: isize,mut _14: *const isize,mut _15: isize,mut _16: char) -> [i64; 6] {
mir! {
type RET = [i64; 6];
let _17: f64;
let _18: char;
let _19: [i8; 7];
let _20: (isize, i16, char, (i64, f64, i8, char), (i16, u16, bool, f64), (isize,));
let _21: Adt57;
let _22: i64;
let _23: (i64, f64, i8, char);
let _24: Adt53;
let _25: i64;
let _26: ();
let _27: ();
{
(*_14) = _1 >> (*_10);
_2 = 60917_u16;
(*_10) = (-61595390536779358318673418860906465694_i128) as i16;
_1 = (*_11) >> (*_14);
_4 = _11;
RET = [7778417535683444208_i64,(-3370708956925052237_i64),(-236871662998995251_i64),(-6908456385703711324_i64),452563190124399259_i64,(-2307143163366142711_i64)];
_4 = core::ptr::addr_of!((*_11));
_15 = -_1;
(*_14) = 0_usize as isize;
_3 = [_9,_15,_15,_1,_15,_1];
_14 = core::ptr::addr_of!((*_4));
_6 = core::ptr::addr_of_mut!((*_6));
(*_11) = _15;
(*_14) = !_1;
(*_14) = _15;
(*_11) = _15;
RET = [(-7774136095599920540_i64),987026320301364758_i64,2146573117251105701_i64,6513959574532977180_i64,(-3686931497378168574_i64),(-6856333894903869046_i64)];
(*_4) = _1;
_15 = _1;
_20.3.3 = _12;
(*_10) = !_5;
_10 = core::ptr::addr_of_mut!((*_6));
_1 = !(*_11);
Call(_10 = fn13(_2, (*_10), (*_4), _16, (*_14), _3, _14, _4, _5, _14, _11), bb1, UnwindUnreachable())
}
bb1 = {
(*_6) = !_5;
_20.5.0 = (*_4) * (*_14);
_20.4.0 = (*_6) | (*_6);
(*_6) = _5 + _5;
_12 = _20.3.3;
_20.4.3 = (*_14) as f64;
_5 = 13887596508297983307_u64 as i16;
_11 = _14;
_20.4.1 = !_2;
_2 = _20.4.1;
_20.3.0 = (-8159543860112131985_i64) ^ 1861200834553952726_i64;
_20.1 = _16 as i16;
_20.2 = _12;
RET = [_20.3.0,_20.3.0,_20.3.0,_20.3.0,_20.3.0,_20.3.0];
_20.2 = _16;
_14 = _11;
_6 = core::ptr::addr_of_mut!(_20.1);
_20.3 = (2411755592322297109_i64, _20.4.3, _8, _20.2);
_9 = !(*_14);
_11 = _4;
_18 = _16;
_20.3.2 = 2223888654_u32 as i8;
match _20.3.0 {
0 => bb2,
1 => bb3,
2 => bb4,
2411755592322297109 => bb6,
_ => bb5
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
RET = [_20.3.0,_20.3.0,_20.3.0,_20.3.0,_20.3.0,_20.3.0];
_20.4.2 = true;
_21.fld2 = core::ptr::addr_of_mut!(_20.5);
(*_6) = 55_u8 as i16;
_20.3.3 = _18;
(*_6) = 139761504191265441491565166476257906022_u128 as i16;
_21.fld2 = core::ptr::addr_of_mut!(_20.5);
(*_14) = !_9;
_20.3.2 = !_8;
_6 = core::ptr::addr_of_mut!((*_6));
_24.fld0 = (*_11) <= (*_4);
_24.fld4.fld4 = [_20.3.0,_20.3.0,_20.3.0,_20.3.0,_20.3.0,_20.3.0];
_19 = [_20.3.2,_8,_8,_20.3.2,_8,_20.3.2,_20.3.2];
_20.5 = ((*_11),);
_24.fld4.fld1 = (_19, _18);
Goto(bb7)
}
bb7 = {
Call(_26 = dump_var(12_usize, 15_usize, Move(_15), 3_usize, Move(_3), 12_usize, Move(_12), 13_usize, Move(_13)), bb8, UnwindUnreachable())
}
bb8 = {
Call(_26 = dump_var(12_usize, 2_usize, Move(_2), 19_usize, Move(_19), 27_usize, _27, 27_usize, _27), bb9, UnwindUnreachable())
}
bb9 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn13(mut _1: u16,mut _2: i16,mut _3: isize,mut _4: char,mut _5: isize,mut _6: [isize; 6],mut _7: *const isize,mut _8: *const isize,mut _9: i16,mut _10: *const isize,mut _11: *const isize) -> *mut i16 {
mir! {
type RET = *mut i16;
let _12: f32;
let _13: (i64, f64, i8, char);
let _14: [char; 8];
let _15: isize;
let _16: i8;
let _17: ([i8; 7], char);
let _18: isize;
let _19: (isize,);
let _20: *mut i32;
let _21: u32;
let _22: [i64; 6];
let _23: bool;
let _24: *mut [i32; 7];
let _25: [char; 8];
let _26: bool;
let _27: char;
let _28: u32;
let _29: bool;
let _30: [i64; 6];
let _31: Adt64;
let _32: char;
let _33: *mut i32;
let _34: [u32; 7];
let _35: (*mut i128, f64, u16);
let _36: [char; 8];
let _37: u16;
let _38: i16;
let _39: [i8; 7];
let _40: *mut [i32; 7];
let _41: *const *const *mut i16;
let _42: (i8, u64);
let _43: Adt63;
let _44: isize;
let _45: *const i64;
let _46: u128;
let _47: (isize,);
let _48: (i64, f64, i8, char);
let _49: ();
let _50: ();
{
_9 = _2;
_6 = [_3,_5,(*_11),(*_11),(*_7),(*_7)];
_2 = _9;
_2 = _9;
(*_8) = _3;
_6 = [(*_8),(*_10),_5,_5,(*_7),(*_7)];
RET = core::ptr::addr_of_mut!(_2);
match _1 {
60917 => bb2,
_ => bb1
}
}
bb1 = {
Return()
}
bb2 = {
(*RET) = _9;
_1 = 34586_u16;
(*_10) = _5;
_13.0 = (-5369077782741586734_i64) - 5337322756948684234_i64;
_6 = [(*_10),(*_7),(*_8),_3,_3,(*_10)];
_1 = 70_u8 as u16;
(*RET) = !_9;
_10 = core::ptr::addr_of!((*_11));
_8 = core::ptr::addr_of!((*_7));
(*RET) = !_9;
_5 = !(*_7);
_11 = _10;
_12 = 2629336844_u32 as f32;
(*RET) = _9;
Goto(bb3)
}
bb3 = {
(*RET) = _13.0 as i16;
(*_11) = _5 * _5;
_15 = (*_7) + (*_11);
(*RET) = 230_u8 as i16;
(*_11) = _3 - _3;
(*RET) = _9 ^ _9;
(*_8) = 174693774952443975673829706275993296806_u128 as isize;
Goto(bb4)
}
bb4 = {
_17.1 = _4;
_10 = core::ptr::addr_of!((*_11));
_17.0 = [(-31_i8),80_i8,(-77_i8),(-128_i8),98_i8,90_i8,(-63_i8)];
_19 = (_15,);
_13.2 = (-124_i8) | (-120_i8);
_18 = _19.0;
(*_7) = !_19.0;
Goto(bb5)
}
bb5 = {
_16 = 12512425484883907385_u64 as i8;
Goto(bb6)
}
bb6 = {
_9 = -_2;
_9 = (*RET);
_17.1 = _4;
_9 = _2;
(*_7) = _17.1 as isize;
(*RET) = 26535875703419994455446874232605122676_i128 as i16;
RET = core::ptr::addr_of_mut!(_2);
_9 = (*RET) + _2;
_17.1 = _4;
_11 = _10;
_3 = 5_usize as isize;
_13.1 = _12 as f64;
_1 = 30033_u16;
(*_7) = _19.0 & _18;
_8 = _10;
_12 = 115206331064017607538266137560003408876_i128 as f32;
_8 = _11;
RET = core::ptr::addr_of_mut!(_2);
_1 = 55759_u16;
_22 = [_13.0,_13.0,_13.0,_13.0,_13.0,_13.0];
Goto(bb7)
}
bb7 = {
_25 = [_17.1,_17.1,_4,_17.1,_17.1,_4,_17.1,_4];
_16 = 1090746344340515585_u64 as i8;
(*_7) = -_19.0;
_11 = core::ptr::addr_of!((*_11));
(*_7) = !_15;
_1 = 24678_u16 * 15669_u16;
(*_7) = _18;
_28 = !1468236597_u32;
RET = core::ptr::addr_of_mut!((*RET));
Goto(bb8)
}
bb8 = {
_17.1 = _4;
_17.0 = [_13.2,_16,_13.2,_16,_16,_13.2,_16];
_31.fld0.fld3 = core::ptr::addr_of_mut!(_19);
_31.fld4 = (_13.2, 11645200430515414332_u64);
Goto(bb9)
}
bb9 = {
(*RET) = _9;
_31.fld0.fld0.1 = 92119987297175365123493932066288394397_i128 as f64;
(*RET) = -_9;
_31.fld3.1 = _17.1;
_26 = !true;
_4 = _17.1;
_8 = core::ptr::addr_of!(_3);
_29 = _26 ^ _26;
_30 = [_13.0,_13.0,_13.0,_13.0,_13.0,_13.0];
_18 = (*_10) | (*_10);
RET = core::ptr::addr_of_mut!(_9);
_31.fld1 = [_28,_28,_28,_28,_28,_28,_28];
_13.3 = _4;
_13.2 = 69_u8 as i8;
_17.1 = _4;
_27 = _17.1;
_12 = _13.0 as f32;
_23 = _29;
(*_8) = _13.3 as isize;
_4 = _27;
_31.fld2 = _13.2 as f32;
match _31.fld4.1 {
0 => bb10,
11645200430515414332 => bb12,
_ => bb11
}
}
bb10 = {
_9 = -_2;
_9 = (*RET);
_17.1 = _4;
_9 = _2;
(*_7) = _17.1 as isize;
(*RET) = 26535875703419994455446874232605122676_i128 as i16;
RET = core::ptr::addr_of_mut!(_2);
_9 = (*RET) + _2;
_17.1 = _4;
_11 = _10;
_3 = 5_usize as isize;
_13.1 = _12 as f64;
_1 = 30033_u16;
(*_7) = _19.0 & _18;
_8 = _10;
_12 = 115206331064017607538266137560003408876_i128 as f32;
_8 = _11;
RET = core::ptr::addr_of_mut!(_2);
_1 = 55759_u16;
_22 = [_13.0,_13.0,_13.0,_13.0,_13.0,_13.0];
Goto(bb7)
}
bb11 = {
_25 = [_17.1,_17.1,_4,_17.1,_17.1,_4,_17.1,_4];
_16 = 1090746344340515585_u64 as i8;
(*_7) = -_19.0;
_11 = core::ptr::addr_of!((*_11));
(*_7) = !_15;
_1 = 24678_u16 * 15669_u16;
(*_7) = _18;
_28 = !1468236597_u32;
RET = core::ptr::addr_of_mut!((*RET));
Goto(bb8)
}
bb12 = {
_31.fld0.fld0.2 = !_1;
_14 = _25;
_13 = ((-2948550515662315757_i64), _31.fld0.fld0.1, _31.fld4.0, _31.fld3.1);
_31.fld4.1 = 2080754430399071041_u64;
_31.fld3.1 = _4;
_31.fld3.1 = _13.3;
_37 = _1;
_31.fld0.fld1 = _31.fld3.1 as u8;
(*RET) = _2 >> _19.0;
_37 = _1;
_38 = (*RET) << _18;
(*_8) = _18;
_31.fld3.0 = [_13.2,_16,_13.2,_13.2,_31.fld4.0,_31.fld4.0,_31.fld4.0];
match _31.fld4.1 {
0 => bb4,
1 => bb13,
2 => bb14,
2080754430399071041 => bb16,
_ => bb15
}
}
bb13 = {
(*RET) = _9;
_1 = 34586_u16;
(*_10) = _5;
_13.0 = (-5369077782741586734_i64) - 5337322756948684234_i64;
_6 = [(*_10),(*_7),(*_8),_3,_3,(*_10)];
_1 = 70_u8 as u16;
(*RET) = !_9;
_10 = core::ptr::addr_of!((*_11));
_8 = core::ptr::addr_of!((*_7));
(*RET) = !_9;
_5 = !(*_7);
_11 = _10;
_12 = 2629336844_u32 as f32;
(*RET) = _9;
Goto(bb3)
}
bb14 = {
Return()
}
bb15 = {
(*RET) = _13.0 as i16;
(*_11) = _5 * _5;
_15 = (*_7) + (*_11);
(*RET) = 230_u8 as i16;
(*_11) = _3 - _3;
(*RET) = _9 ^ _9;
(*_8) = 174693774952443975673829706275993296806_u128 as isize;
Goto(bb4)
}
bb16 = {
_31.fld0.fld1 = 153_u8 | 233_u8;
(*RET) = _38;
_28 = 59032756_u32 * 3279032417_u32;
RET = core::ptr::addr_of_mut!(_9);
_7 = _11;
_31.fld0.fld2 = [5254470806387380810283990235815360730_i128,26704152622507880075066306233928989819_i128,(-110572761950161824881973317954080399421_i128)];
_15 = -(*_11);
RET = core::ptr::addr_of_mut!((*RET));
_42.1 = _31.fld4.0 as u64;
(*RET) = _38 + _38;
(*_7) = _18 ^ (*_8);
_43.fld0 = core::ptr::addr_of_mut!(_31.fld0.fld1);
(*_7) = !(*_8);
_43.fld3.0 = [_13.0,_13.0,_13.0,_13.0,_13.0,_13.0];
_31.fld2 = _12;
_43.fld3.1 = core::ptr::addr_of_mut!(_2);
_31.fld0.fld0.1 = -_13.1;
_37 = !_31.fld0.fld0.2;
_31.fld3 = _17;
(*RET) = _38;
_42.1 = !_31.fld4.1;
_31.fld2 = (-1982165182_i32) as f32;
_31.fld3.1 = _27;
_4 = _31.fld3.1;
_15 = -(*_11);
_47.0 = _19.0;
Goto(bb17)
}
bb17 = {
Call(_49 = dump_var(13_usize, 1_usize, Move(_1), 18_usize, Move(_18), 23_usize, Move(_23), 37_usize, Move(_37)), bb18, UnwindUnreachable())
}
bb18 = {
Call(_49 = dump_var(13_usize, 4_usize, Move(_4), 27_usize, Move(_27), 5_usize, Move(_5), 38_usize, Move(_38)), bb19, UnwindUnreachable())
}
bb19 = {
Call(_49 = dump_var(13_usize, 3_usize, Move(_3), 26_usize, Move(_26), 2_usize, Move(_2), 15_usize, Move(_15)), bb20, UnwindUnreachable())
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn14(mut _1: (i64, f64, i8, char),mut _2: (i64, f64, i8, char)) -> Adt48 {
mir! {
type RET = Adt48;
let _3: (i8, u64);
let _4: i16;
let _5: isize;
let _6: i16;
let _7: Adt57;
let _8: bool;
let _9: [char; 8];
let _10: i32;
let _11: isize;
let _12: *mut i128;
let _13: (i64, f64, i8, char);
let _14: [char; 8];
let _15: f64;
let _16: u32;
let _17: *const i8;
let _18: ([i8; 7], char);
let _19: [i128; 3];
let _20: Adt59;
let _21: Adt55;
let _22: usize;
let _23: ([i8; 7], char);
let _24: i32;
let _25: isize;
let _26: (i8, u64);
let _27: u32;
let _28: ();
let _29: ();
{
RET.fld1 = 136_u8 as i8;
_2.3 = _1.3;
RET.fld0 = false;
_1.3 = _2.3;
_1 = (_2.0, _2.1, _2.2, _2.3);
_1 = (_2.0, _2.1, _2.2, _2.3);
RET.fld1 = _2.2 & _1.2;
_2 = (_1.0, _1.1, _1.2, _1.3);
_1.1 = -_2.1;
_2.3 = _1.3;
_2 = _1;
_2.0 = _1.0 | _1.0;
_1.1 = -_2.1;
Goto(bb1)
}
bb1 = {
_1.0 = !_2.0;
_2 = _1;
_1.0 = _2.0;
_5 = (-9223372036854775808_isize);
_1.1 = _2.1 * _2.1;
_2.3 = _1.3;
RET.fld0 = true;
_3.0 = -_1.2;
_1.2 = !_2.2;
_1 = _2;
RET.fld1 = 318866628921023900257123028139277270005_u128 as i8;
_2.3 = _1.3;
RET.fld0 = _2.2 != _3.0;
_2.0 = _1.0;
_3.1 = 15865562861309754715_u64 + 17682665252787258436_u64;
_2.2 = !_3.0;
_1.0 = 29664_i16 as i64;
_2.3 = _1.3;
Goto(bb2)
}
bb2 = {
_8 = true | false;
RET.fld1 = _1.2 | _3.0;
_1 = (_2.0, _2.1, _3.0, _2.3);
_8 = false ^ false;
_2.3 = _1.3;
_13.2 = _1.2 & _2.2;
_10 = (-1029664382_i32);
_2 = (_1.0, _1.1, _13.2, _1.3);
_11 = _5;
Goto(bb3)
}
bb3 = {
_4 = _10 as i16;
_5 = _2.1 as isize;
_13.3 = _1.3;
_1.2 = _8 as i8;
RET.fld0 = !_8;
_13.0 = 41075695852780917418805288721007017738_u128 as i64;
_9 = [_2.3,_2.3,_1.3,_1.3,_1.3,_1.3,_1.3,_2.3];
_8 = _1.2 != _2.2;
_7.fld1 = 2710640618_u32 as i8;
_3 = (_13.2, 11464652356567038168_u64);
_4 = 1587_i16 - (-17282_i16);
RET.fld0 = !_8;
_1.2 = _13.2;
_16 = 3313318936_u32 ^ 1937835673_u32;
_3.1 = !1914755730637611821_u64;
_8 = !true;
Goto(bb4)
}
bb4 = {
_17 = core::ptr::addr_of!(_1.2);
_2.3 = _1.3;
_13.1 = -_1.1;
RET.fld0 = !_8;
_14 = [_2.3,_1.3,_13.3,_1.3,_1.3,_13.3,_13.3,_2.3];
_2.3 = _1.3;
_14 = [_1.3,_1.3,_2.3,_13.3,_1.3,_1.3,_2.3,_2.3];
_1 = (_2.0, _13.1, _3.0, _2.3);
_2.0 = _1.0 - _1.0;
_15 = _13.1;
RET.fld0 = !_8;
_3 = (_13.2, 13877872630339118430_u64);
_13.2 = !(*_17);
_3 = (_13.2, 12174752173589260157_u64);
_20.fld0.fld3.fld6 = core::ptr::addr_of!(_21.fld0);
_21.fld3 = !_10;
_20.fld0.fld3.fld4.2 = !38599_u16;
Call(_11 = core::intrinsics::transmute(_3.1), bb5, UnwindUnreachable())
}
bb5 = {
_18.1 = _1.3;
_3.0 = _2.0 as i8;
_20.fld0.fld3.fld2 = [_21.fld3,_10,_21.fld3,_21.fld3,_21.fld3,_21.fld3,_21.fld3];
_20.fld0.fld3.fld4.1 = _13.1;
_20.fld0.fld3.fld5 = core::ptr::addr_of_mut!(_20.fld0.fld3.fld2);
_20.fld1.1 = core::ptr::addr_of_mut!(_4);
_9 = [_2.3,_18.1,_18.1,_13.3,_18.1,_18.1,_2.3,_18.1];
_9 = [_18.1,_13.3,_18.1,_2.3,_1.3,_2.3,_18.1,_13.3];
_17 = core::ptr::addr_of!(_1.2);
_1 = (_2.0, _2.1, _2.2, _13.3);
_5 = _4 as isize;
_2.3 = _1.3;
_2.3 = _1.3;
_9 = [_13.3,_2.3,_18.1,_1.3,_1.3,_18.1,_2.3,_2.3];
_21.fld2 = core::ptr::addr_of!(_5);
Call(RET.fld1 = core::intrinsics::transmute(_13.2), bb6, UnwindUnreachable())
}
bb6 = {
_13.1 = _15;
_17 = core::ptr::addr_of!(_3.0);
_1.2 = _3.0;
_4 = 1059_i16;
_10 = -_21.fld3;
_7.fld0 = core::ptr::addr_of!(_20.fld0.fld3.fld6);
RET.fld1 = _21.fld3 as i8;
_20.fld3 = [_16,_16,_16,_16,_16,_16,_16];
_20.fld0.fld3.fld2 = [_21.fld3,_21.fld3,_21.fld3,_21.fld3,_10,_21.fld3,_21.fld3];
_7.fld2 = core::ptr::addr_of_mut!(_20.fld0.fld0);
_23.0 = [_2.2,(*_17),_3.0,(*_17),_13.2,_1.2,_13.2];
_1.2 = _13.2;
_22 = !2332899440966926416_usize;
_20.fld0.fld0 = (_11,);
(*_17) = _13.2 * _1.2;
RET.fld0 = _1.2 < (*_17);
match _4 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb5,
1059 => bb8,
_ => bb7
}
}
bb7 = {
_4 = _10 as i16;
_5 = _2.1 as isize;
_13.3 = _1.3;
_1.2 = _8 as i8;
RET.fld0 = !_8;
_13.0 = 41075695852780917418805288721007017738_u128 as i64;
_9 = [_2.3,_2.3,_1.3,_1.3,_1.3,_1.3,_1.3,_2.3];
_8 = _1.2 != _2.2;
_7.fld1 = 2710640618_u32 as i8;
_3 = (_13.2, 11464652356567038168_u64);
_4 = 1587_i16 - (-17282_i16);
RET.fld0 = !_8;
_1.2 = _13.2;
_16 = 3313318936_u32 ^ 1937835673_u32;
_3.1 = !1914755730637611821_u64;
_8 = !true;
Goto(bb4)
}
bb8 = {
_25 = _22 as isize;
_20.fld0.fld3.fld5 = core::ptr::addr_of_mut!(_20.fld0.fld3.fld2);
_8 = _20.fld0.fld0.0 != _20.fld0.fld0.0;
_5 = _20.fld0.fld0.0 * _11;
_19 = [(-163254793153560688922797163076220431297_i128),(-19970930955636483080125651697349918791_i128),(-48368721807497899243308508988613434610_i128)];
_20.fld1.0 = [_13.0,_2.0,_1.0,_1.0,_1.0,_1.0];
_20.fld0.fld0.0 = _11;
_13.2 = -(*_17);
_20.fld0.fld3.fld0 = !_8;
_1.3 = _18.1;
_20.fld3 = [_16,_16,_16,_16,_16,_16,_16];
_20.fld0.fld0.0 = !_11;
_1 = _13;
RET.fld1 = !_2.2;
_21.fld1 = core::ptr::addr_of_mut!(_20.fld0.fld0);
_13 = _1;
(*_17) = _20.fld0.fld3.fld4.2 as i8;
_10 = _21.fld3 - _21.fld3;
_8 = _13.2 == _13.2;
_16 = !2660005268_u32;
_6 = _4 - _4;
match _3.1 {
0 => bb1,
12174752173589260157 => bb9,
_ => bb6
}
}
bb9 = {
_13.0 = _2.0;
_5 = _20.fld0.fld0.0;
_17 = core::ptr::addr_of!(_13.2);
RET.fld2 = core::ptr::addr_of!(_20.fld0.fld1);
_24 = _10;
_17 = core::ptr::addr_of!(_3.0);
_2.0 = _4 as i64;
_23.0 = [_2.2,_2.2,_1.2,_13.2,_1.2,_2.2,_13.2];
_7.fld1 = -_13.2;
_24 = _10;
_4 = !_6;
_13.1 = -_15;
_18.0 = _23.0;
_18.0 = [_7.fld1,_2.2,_13.2,_13.2,_13.2,_1.2,(*_17)];
_27 = !_16;
_3.1 = _13.0 as u64;
_16 = !_27;
_20.fld0.fld0 = (_5,);
Goto(bb10)
}
bb10 = {
Call(_28 = dump_var(14_usize, 6_usize, Move(_6), 14_usize, Move(_14), 16_usize, Move(_16), 27_usize, Move(_27)), bb11, UnwindUnreachable())
}
bb11 = {
Call(_28 = dump_var(14_usize, 22_usize, Move(_22), 5_usize, Move(_5), 11_usize, Move(_11), 25_usize, Move(_25)), bb12, UnwindUnreachable())
}
bb12 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn15(mut _1: f64,mut _2: *const *mut i16,mut _3: (isize,),mut _4: char,mut _5: u8,mut _6: i8,mut _7: isize,mut _8: [i8; 7]) -> isize {
mir! {
type RET = isize;
let _9: (i64, f64, i8, char);
let _10: f64;
let _11: [i128; 3];
let _12: u16;
let _13: char;
let _14: *const i64;
let _15: [i128; 2];
let _16: isize;
let _17: [i64; 6];
let _18: isize;
let _19: [i64; 6];
let _20: Adt48;
let _21: Adt59;
let _22: (i8, u64);
let _23: i8;
let _24: (i16, u16, bool, f64);
let _25: ();
let _26: ();
{
_4 = '\u{a574c}';
RET = _3.0 >> _6;
RET = _3.0 - _7;
_8 = [_6,_6,_6,_6,_6,_6,_6];
_8 = [_6,_6,_6,_6,_6,_6,_6];
RET = _7;
_5 = 143_u8;
RET = 3394_i16 as isize;
_7 = !_3.0;
_5 = 2_u8;
_9.1 = _1;
_9 = ((-3572747833695375026_i64), _1, _6, _4);
_8 = [_6,_9.2,_6,_6,_9.2,_6,_9.2];
_9.3 = _4;
_6 = _9.2;
_9.1 = _1 / f64::INFINITY;
_9.1 = _5 as f64;
_3 = (_7,);
_1 = _9.1;
_7 = !_3.0;
_9.2 = 11184550378045548118_usize as i8;
_3 = (_7,);
_6 = _9.2;
_8 = [_6,_6,_6,_6,_9.2,_6,_9.2];
_9.2 = _6 ^ _6;
_9.1 = _1 * _1;
match _9.0 {
0 => bb1,
1 => bb2,
340282366920938463459801859598072836430 => bb4,
_ => bb3
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
_6 = _9.2 ^ _9.2;
_7 = 338327356704797559360503069301004226785_u128 as isize;
_6 = _7 as i8;
_5 = (-1478913173_i32) as u8;
_9.1 = _7 as f64;
_5 = 71_u8;
_1 = _9.1 / 1_f64;
RET = _3.0;
_9.2 = _6 | _6;
RET = _3.0;
_8 = [_9.2,_6,_9.2,_9.2,_6,_9.2,_6];
_7 = _3.0;
_9.2 = !_6;
RET = !_7;
_6 = _9.2;
RET = _3.0 ^ _7;
_3 = (_7,);
_3.0 = -_7;
_1 = _9.1 + _9.1;
_7 = _3.0;
_9.0 = (-5008448794316591679_i64);
_7 = !_3.0;
_9.0 = 6271424979021037568_i64;
match _9.0 {
0 => bb1,
1 => bb5,
2 => bb6,
3 => bb7,
4 => bb8,
6271424979021037568 => bb10,
_ => bb9
}
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_12 = !57130_u16;
RET = _7 >> _9.2;
_12 = !29817_u16;
RET = _9.0 as isize;
_4 = _9.3;
_1 = -_9.1;
_6 = -_9.2;
_11 = [(-17785720826601662058872984111488929433_i128),(-23615553881815372023632253888123382478_i128),(-22573713305122463244861538529341657911_i128)];
_9.0 = (-3310017161123457365_i64) * (-2384955500151335557_i64);
_1 = 3291_i16 as f64;
_9.1 = 239198387998498604115847180907758309223_u128 as f64;
_4 = _9.3;
_9.2 = 3349851985127363066_usize as i8;
_9.2 = _6;
_11 = [(-151425237423642253599669500668298237591_i128),(-102856852219796099117426945622571230573_i128),48336016465670455298718696192790055802_i128];
_14 = core::ptr::addr_of!(_9.0);
(*_14) = (-167691810796547260345482269893970129606_i128) as i64;
(*_14) = 8822622752799232430_i64 | (-4436621063654266195_i64);
_3.0 = -_7;
_6 = -_9.2;
_9.0 = 6977520723733783785_i64 + (-1586360342460183256_i64);
RET = _7;
RET = _7;
_6 = 17583080848066201287_u64 as i8;
_5 = 43_u8 % 168_u8;
Goto(bb11)
}
bb11 = {
(*_14) = 8774556188144036706_i64;
_12 = 28059_u16 & 42143_u16;
_13 = _4;
RET = _3.0;
_9.0 = 322376275012297255021997347563393290760_u128 as i64;
_14 = core::ptr::addr_of!(_9.0);
_10 = _1 / (-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000362630256552804_f64);
_9.3 = _13;
_15 = [72340093929511073570063654233815638216_i128,4866673633898702947593254404297509419_i128];
(*_14) = false as i64;
_4 = _9.3;
Goto(bb12)
}
bb12 = {
_17 = [(*_14),_9.0,(*_14),(*_14),(*_14),(*_14)];
_9.2 = _3.0 as i8;
(*_14) = 1328174662161515274_i64;
_5 = true as u8;
_3.0 = -_7;
_12 = 25464_u16;
_15 = [142727857955578850911100931438223371551_i128,(-97465435143366974626921506314671164881_i128)];
_8 = [_9.2,_6,_9.2,_6,_6,_6,_9.2];
_9.3 = _4;
_8 = [_9.2,_6,_9.2,_6,_6,_6,_6];
_17 = [_9.0,_9.0,_9.0,_9.0,_9.0,(*_14)];
_14 = core::ptr::addr_of!(_9.0);
RET = (-18994_i16) as isize;
_11 = [86299572750809973831476116917699381168_i128,163717682849005604701701243738534385755_i128,53716738456332859728606126819024322457_i128];
_11 = [(-113505591241023635928736456728159998231_i128),(-41811239594122347368463723611845659663_i128),142687934523920000945231710925679894463_i128];
_12 = !62611_u16;
_9.2 = _6;
_16 = _9.2 as isize;
_9.3 = _4;
_16 = _3.0 ^ _7;
_10 = _9.1;
_7 = (*_14) as isize;
_12 = !35608_u16;
_9.2 = _6 ^ _6;
_9.3 = _13;
_15 = [(-126989002548799122753428311809747226073_i128),(-97837028428133324718254864239415580337_i128)];
_14 = core::ptr::addr_of!((*_14));
_10 = _7 as f64;
RET = -_3.0;
Call(_9.2 = fn16(_4, _10, _9.0, _10, _6, _1, _2, _3.0, _8, _15, _6, _6, _9.0, _3, _17, _3.0), bb13, UnwindUnreachable())
}
bb13 = {
_20.fld0 = !true;
_3 = (_16,);
_19 = [(*_14),_9.0,(*_14),_9.0,(*_14),(*_14)];
_16 = _3.0;
_9.1 = -_10;
_7 = _3.0 >> _9.2;
_9.2 = (-1574150976_i32) as i8;
_9.2 = _6 >> _3.0;
_14 = core::ptr::addr_of!((*_14));
_8 = [_9.2,_9.2,_6,_9.2,_9.2,_9.2,_9.2];
RET = -_16;
_19 = _17;
RET = _7;
_15 = [161448961703112939804125483865729823002_i128,(-136799918657190321094268284782556761930_i128)];
_1 = (*_14) as f64;
match _9.0 {
0 => bb1,
1 => bb2,
2 => bb11,
3 => bb4,
4 => bb5,
5 => bb10,
6 => bb12,
1328174662161515274 => bb15,
_ => bb14
}
}
bb14 = {
Return()
}
bb15 = {
_20.fld1 = _12 as i8;
_6 = (*_14) as i8;
_9.0 = 7799795549615116185_i64;
_21.fld0.fld3.fld4.1 = -_1;
_21.fld0.fld3.fld5 = core::ptr::addr_of_mut!(_21.fld0.fld3.fld2);
_18 = (-911851480_i32) as isize;
_21.fld0.fld0 = (_16,);
_8 = [_6,_9.2,_9.2,_9.2,_9.2,_9.2,_9.2];
_21.fld0.fld3.fld4.2 = _12;
_11 = [124281799144795954128673805623038864954_i128,169580580191606795676517049225606226074_i128,(-57253829415642528941650122041314123929_i128)];
_14 = core::ptr::addr_of!((*_14));
_21.fld0.fld0.0 = -_3.0;
_10 = -_21.fld0.fld3.fld4.1;
_21.fld0.fld3.fld5 = core::ptr::addr_of_mut!(_21.fld0.fld3.fld2);
_21.fld0.fld3.fld0 = !_20.fld0;
_23 = _6;
_20.fld0 = _21.fld0.fld3.fld0;
_21.fld3 = [1091235367_u32,485048574_u32,3811526605_u32,3887082819_u32,1666844701_u32,1221078564_u32,388573877_u32];
_8 = [_23,_20.fld1,_9.2,_23,_9.2,_20.fld1,_9.2];
_16 = !_3.0;
_9.3 = _4;
_21.fld0.fld3.fld4.2 = 855998212_i32 as u16;
_22 = (_9.2, 10361458293205543298_u64);
_9 = (2782357371817003569_i64, _10, _6, _13);
Goto(bb16)
}
bb16 = {
Call(_25 = dump_var(15_usize, 19_usize, Move(_19), 11_usize, Move(_11), 16_usize, Move(_16), 6_usize, Move(_6)), bb17, UnwindUnreachable())
}
bb17 = {
Call(_25 = dump_var(15_usize, 4_usize, Move(_4), 13_usize, Move(_13), 22_usize, Move(_22), 8_usize, Move(_8)), bb18, UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn16(mut _1: char,mut _2: f64,mut _3: i64,mut _4: f64,mut _5: i8,mut _6: f64,mut _7: *const *mut i16,mut _8: isize,mut _9: [i8; 7],mut _10: [i128; 2],mut _11: i8,mut _12: i8,mut _13: i64,mut _14: (isize,),mut _15: [i64; 6],mut _16: isize) -> i8 {
mir! {
type RET = i8;
let _17: isize;
let _18: i32;
let _19: bool;
let _20: [i64; 6];
let _21: Adt54;
let _22: Adt51;
let _23: *mut f32;
let _24: [i32; 7];
let _25: f64;
let _26: isize;
let _27: ([i64; 6], *mut i16);
let _28: ();
let _29: ();
{
_11 = _12;
_14 = (_16,);
_15 = [_3,_13,_13,_13,_13,_3];
_1 = '\u{ee8b}';
_9 = [_5,_5,_11,_12,_5,_12,_11];
_17 = 135145507224990781650301014788269106954_i128 as isize;
_14 = (_8,);
_16 = -_8;
_14 = (_8,);
_5 = !_11;
_16 = 6107040391415998109174064096279141570_i128 as isize;
_2 = (-6890_i16) as f64;
_6 = _2;
match _13 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb5,
5 => bb6,
6 => bb7,
1328174662161515274 => bb9,
_ => bb8
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
_6 = _2;
_9 = [_12,_12,_5,_11,_5,_11,_5];
_21.fld5 = core::ptr::addr_of_mut!(_21.fld2);
_21.fld0 = _8 != _16;
RET = _11 << _12;
_21.fld0 = !false;
_21.fld3 = [_11,_5,_12,_12,_12,_12,_11];
_21.fld4.2 = !25005_u16;
_21.fld5 = core::ptr::addr_of_mut!(_21.fld2);
_21.fld2 = [995969879_i32,(-2087499688_i32),(-1120412067_i32),1984000952_i32,786995924_i32,(-1272698107_i32),(-492860843_i32)];
_20 = _15;
_6 = _2;
_10 = [(-79353803578671249905252775187912421506_i128),79097812435049881454703455050995853541_i128];
_21.fld4.1 = 42_u8 as f64;
_5 = _21.fld4.2 as i8;
_20 = [_13,_13,_13,_3,_3,_13];
_19 = _21.fld0;
_1 = '\u{a45a1}';
_18 = -783438694_i32;
_8 = _14.0;
_5 = _12;
match _13 {
0 => bb1,
1 => bb5,
2 => bb10,
3 => bb11,
1328174662161515274 => bb13,
_ => bb12
}
}
bb10 = {
Return()
}
bb11 = {
Return()
}
bb12 = {
Return()
}
bb13 = {
_22.fld3 = core::ptr::addr_of_mut!(_14);
_20 = _15;
_13 = _3;
_22.fld1 = _21.fld4.2 as u8;
match _3 {
0 => bb14,
1 => bb15,
2 => bb16,
1328174662161515274 => bb18,
_ => bb17
}
}
bb14 = {
Return()
}
bb15 = {
Return()
}
bb16 = {
Return()
}
bb17 = {
Return()
}
bb18 = {
Goto(bb19)
}
bb19 = {
Call(_28 = dump_var(16_usize, 15_usize, Move(_15), 11_usize, Move(_11), 12_usize, Move(_12), 5_usize, Move(_5)), bb20, UnwindUnreachable())
}
bb20 = {
Call(_28 = dump_var(16_usize, 19_usize, Move(_19), 16_usize, Move(_16), 18_usize, Move(_18), 1_usize, Move(_1)), bb21, UnwindUnreachable())
}
bb21 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn17(mut _1: i128,mut _2: char,mut _3: bool,mut _4: *mut [i32; 7],mut _5: i128,mut _6: char,mut _7: *mut i128,mut _8: *mut *mut f32) -> u16 {
mir! {
type RET = u16;
let _9: [i128; 2];
let _10: (isize, i16, char, (i64, f64, i8, char), (i16, u16, bool, f64), (isize,));
let _11: [char; 8];
let _12: [i128; 3];
let _13: isize;
let _14: isize;
let _15: f32;
let _16: (i64, f64, i8, char);
let _17: Adt56;
let _18: u64;
let _19: Adt53;
let _20: u16;
let _21: [i8; 7];
let _22: *mut i128;
let _23: [i64; 6];
let _24: ();
let _25: ();
{
_7 = core::ptr::addr_of_mut!(_1);
RET = 12293939556250477896_u64 as u16;
(*_7) = _5 + _5;
RET = 786410257_i32 as u16;
RET = _3 as u16;
(*_4) = [1494718279_i32,(-907127122_i32),(-60208356_i32),417362453_i32,(-494243441_i32),504534033_i32,(-301123413_i32)];
_8 = core::ptr::addr_of_mut!((*_8));
_1 = _5 - _5;
(*_4) = [(-1041237351_i32),(-237484302_i32),(-1970758685_i32),1449382854_i32,274876545_i32,(-218884077_i32),1066691954_i32];
_2 = _6;
RET = 54433_u16 & 43183_u16;
_1 = 9223372036854775807_isize as i128;
_6 = _2;
_4 = core::ptr::addr_of_mut!((*_4));
_4 = core::ptr::addr_of_mut!((*_4));
(*_7) = _5 & _5;
_2 = _6;
_5 = (*_7);
_10.5.0 = 9223372036854775807_isize - 9223372036854775807_isize;
_10.2 = _6;
_10.4.3 = 7_usize as f64;
_10.3.2 = 78_i8;
_10.0 = -_10.5.0;
_10.4.0 = _2 as i16;
match _10.3.2 {
78 => bb2,
_ => bb1
}
}
bb1 = {
Return()
}
bb2 = {
(*_4) = [(-1011143835_i32),(-1080154909_i32),(-1636627193_i32),1602528241_i32,(-416908724_i32),347164531_i32,42406569_i32];
_10.0 = !_10.5.0;
RET = 27522_u16 / 49682_u16;
RET = !56648_u16;
_6 = _10.2;
(*_4) = [(-1844239779_i32),1969648401_i32,1731080466_i32,1836676339_i32,141231602_i32,(-792698874_i32),(-1526836290_i32)];
RET = 9980_u16;
_10.2 = _6;
_9 = [_1,(*_7)];
match _10.3.2 {
0 => bb1,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
6 => bb8,
78 => bb10,
_ => bb9
}
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_1 = _5;
_10.5 = (_10.0,);
RET = !6832_u16;
RET = (-231889261_i32) as u16;
_7 = core::ptr::addr_of_mut!(_5);
_10.4.1 = _10.0 as u16;
_11 = [_10.2,_6,_6,_10.2,_6,_10.2,_10.2,_6];
_10.3.0 = _10.0 as i64;
_4 = core::ptr::addr_of_mut!((*_4));
_10.3.1 = _10.4.3 / 1_f64;
_10.3 = (6698890525391726715_i64, _10.4.3, 13_i8, _2);
_2 = _6;
_10.0 = !_10.5.0;
_6 = _10.3.3;
_10.2 = _10.3.3;
_9 = [_5,_5];
_10.4.1 = 1058_u16 & 7692_u16;
_10.1 = 157031263_i32 as i16;
_9 = [_5,_5];
_8 = core::ptr::addr_of_mut!((*_8));
_13 = _10.3.0 as isize;
Goto(bb11)
}
bb11 = {
_10.2 = _10.3.3;
_14 = _10.5.0 ^ _13;
_10.3.1 = -_10.4.3;
_10.4.1 = _3 as u16;
(*_8) = core::ptr::addr_of_mut!(_15);
_4 = core::ptr::addr_of_mut!((*_4));
_10.3.0 = !(-4129578091596039358_i64);
_12 = [(*_7),(*_7),(*_7)];
_16.1 = _10.4.1 as f64;
_17.fld0 = core::ptr::addr_of_mut!((*_8));
_10.5.0 = _16.1 as isize;
_10.5.0 = _3 as isize;
(*_7) = _1;
_10.1 = _10.4.0;
_3 = true;
_11 = [_10.2,_10.2,_2,_6,_10.2,_2,_10.2,_10.3.3];
(*_7) = -_1;
_5 = _1 ^ _1;
_10.3.3 = _2;
_16.0 = _10.3.0;
_16 = _10.3;
(*_7) = _1 << _13;
_10.4.2 = _3;
_1 = (*_7);
_19.fld0 = _16.2 < _10.3.2;
match _10.3.2 {
13 => bb13,
_ => bb12
}
}
bb12 = {
Return()
}
bb13 = {
_19.fld3.0 = _10.1 ^ _10.1;
_19.fld4.fld5.fld0 = _1 == (*_7);
_19.fld4.fld1.1 = _2;
_18 = _16.2 as u64;
_19.fld3.1 = _19.fld4.fld5.fld0 as u16;
_19.fld3.3 = _10.3.1 * _10.4.3;
match _16.2 {
0 => bb10,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb9,
13 => bb14,
_ => bb7
}
}
bb14 = {
(*_8) = core::ptr::addr_of_mut!(_15);
_16.1 = 4_usize as f64;
_21 = [_16.2,_10.3.2,_16.2,_16.2,_10.3.2,_16.2,_10.3.2];
_19.fld1 = [3358560198_u32,3130495737_u32,2839073088_u32,1100163088_u32,3424357974_u32,2597501069_u32,2016885565_u32];
_19.fld4.fld4 = [_10.3.0,_16.0,_10.3.0,_16.0,_16.0,_10.3.0];
_19.fld4.fld3 = core::ptr::addr_of_mut!((*_4));
(*_8) = core::ptr::addr_of_mut!(_15);
_10.0 = -_13;
_10.4.1 = !_19.fld3.1;
_19.fld3.2 = _10.3.2 >= _10.3.2;
_19.fld4.fld0 = !_19.fld4.fld5.fld0;
_16.0 = _10.3.0;
_19.fld4.fld1.0 = [_10.3.2,_16.2,_10.3.2,_10.3.2,_10.3.2,_10.3.2,_16.2];
Goto(bb15)
}
bb15 = {
Call(_24 = dump_var(17_usize, 5_usize, Move(_5), 18_usize, Move(_18), 2_usize, Move(_2), 6_usize, Move(_6)), bb16, UnwindUnreachable())
}
bb16 = {
Call(_24 = dump_var(17_usize, 11_usize, Move(_11), 3_usize, Move(_3), 25_usize, _25, 25_usize, _25), bb17, UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
pub fn main() {
                println!("{:?}", fn0(std::hint::black_box(false), std::hint::black_box('\u{ce0fe}'), std::hint::black_box(9223372036854775807_isize), std::hint::black_box((-8_i8)), std::hint::black_box(7353229852343587892_u64), std::hint::black_box(150473437257891309027308180158250753074_u128), std::hint::black_box((-5226017276441268513_i64)), std::hint::black_box((-12968612807743744344845291838721064530_i128)), std::hint::black_box(9142597818167313964_usize), std::hint::black_box(9_u8), std::hint::black_box(6168_u16), std::hint::black_box(4018320395_u32)));
                
            }
#[derive(Debug,Copy,Clone)]
pub struct Adt48 {
fld0: bool,
fld1: i8,
fld2: *const *mut i16,
}
#[derive(Debug)]
pub struct Adt49 {
fld0: *mut *mut f32,
fld1: *const i8,
fld2: Adt48,
}
#[derive(Debug,Copy,Clone)]
pub struct Adt50 {
fld0: bool,
fld1: ([i8; 7], char),
fld2: (i8, u64),
fld3: *mut [i32; 7],
fld4: [i64; 6],
fld5: Adt48,
}
#[derive(Debug,Copy,Clone)]
pub struct Adt51 {
fld0: (*mut i128, f64, u16),
fld1: u8,
fld2: [i128; 3],
fld3: *mut (isize,),
}
#[derive(Debug,Copy,Clone)]
pub struct Adt52 {
fld0: bool,
fld1: char,
fld2: isize,
fld3: *mut f32,
fld4: i16,
fld5: u32,
fld6: (isize, i16, char, (i64, f64, i8, char), (i16, u16, bool, f64), (isize,)),
fld7: i128,
}
#[derive(Debug,Copy,Clone)]
pub struct Adt53 {
fld0: bool,
fld1: [u32; 7],
fld2: [isize; 6],
fld3: (i16, u16, bool, f64),
fld4: Adt50,
}
#[derive(Debug)]
pub struct Adt54 {
fld0: bool,
fld1: *mut *mut f32,
fld2: [i32; 7],
fld3: [i8; 7],
fld4: (*mut i128, f64, u16),
fld5: *mut [i32; 7],
fld6: *const *mut i16,
}
#[derive(Debug)]
pub struct Adt55 {
fld0: *mut i16,
fld1: *mut (isize,),
fld2: *const isize,
fld3: i32,
}
#[derive(Debug)]
pub struct Adt56 {
fld0: *mut *mut f32,
}
#[derive(Debug,Copy,Clone)]
pub struct Adt57 {
fld0: *const *const *mut i16,
fld1: i8,
fld2: *mut (isize,),
}
#[derive(Debug)]
pub struct Adt58 {
fld0: (isize,),
fld1: *mut i16,
fld2: *mut i128,
fld3: Adt54,
}
#[derive(Debug)]
pub struct Adt59 {
fld0: Adt58,
fld1: ([i64; 6], *mut i16),
fld2: *mut u8,
fld3: [u32; 7],
}
#[derive(Debug)]
pub struct Adt60 {
fld0: Adt54,
}
#[derive(Debug)]
pub struct Adt61 {
fld0: [i8; 7],
fld1: *mut i128,
fld2: (i16, u16, bool, f64),
fld3: (*mut i128, f64, u16),
fld4: Adt55,
fld5: [isize; 6],
}
#[derive(Debug)]
pub struct Adt62 {
fld0: *mut i128,
fld1: *const u32,
fld2: f32,
fld3: [u32; 7],
fld4: Adt61,
fld5: Adt55,
}
#[derive(Debug,Copy,Clone)]
pub struct Adt63 {
fld0: *mut u8,
fld1: (*mut i128, f64, u16),
fld2: [i8; 7],
fld3: ([i64; 6], *mut i16),
fld4: u128,
}
#[derive(Debug)]
pub struct Adt64 {
fld0: Adt51,
fld1: [u32; 7],
fld2: f32,
fld3: ([i8; 7], char),
fld4: (i8, u64),
}

