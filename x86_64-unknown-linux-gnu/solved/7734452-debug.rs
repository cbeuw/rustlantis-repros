#![recursion_limit = "256"]
    #![feature(custom_mir, core_intrinsics, const_hash)]
    #![allow(unused_parens, unused_assignments, overflowing_literals)]
    extern crate core;
    use core::intrinsics::mir::*;

    use std::fmt::Debug;

    #[inline(never)]
    fn dump_var(
        f: usize,
        var0: usize, val0: impl Debug,
        var1: usize, val1: impl Debug,
        var2: usize, val2: impl Debug,
        var3: usize, val3: impl Debug,
    ) {
        println!("fn{f}:_{var0} = {val0:?}\n_{var1} = {val1:?}\n_{var2} = {val2:?}\n_{var3} = {val3:?}");
    }
    #[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn0(mut _1: u64,mut _2: i16) -> (i16, [i32; 6]) {
mir! {
type RET = (i16, [i32; 6]);
let _3: Adt66;
let _4: f64;
let _5: u8;
let _6: Adt58;
let _7: u16;
let _8: u128;
let _9: Adt52;
let _10: Adt59;
let _11: f32;
let _12: isize;
let _13: isize;
let _14: [u16; 8];
let _15: [bool; 4];
let _16: ((i128, isize, *mut u64, u16, u128, i8, i16, u32, u128), i8, char);
let _17: u32;
let _18: [u64; 2];
let _19: Adt51;
let _20: u64;
let _21: [u16; 8];
let _22: (u64,);
let _23: [u32; 8];
let _24: u128;
let _25: (isize, i64, (i8,), (u64,), *const f64, i128);
let _26: u32;
let _27: [u32; 8];
let _28: bool;
let _29: isize;
let _30: (*mut char,);
let _31: (i8,);
let _32: isize;
let _33: f64;
let _34: Adt51;
let _35: isize;
let _36: (i64, *mut u64, u128, [i32; 6], *const *const f64, (i8,));
let _37: u128;
let _38: Adt58;
let _39: i128;
let _40: [u32; 8];
let _41: [bool; 1];
let _42: char;
let _43: isize;
let _44: Adt65;
let _45: (i8,);
let _46: [i32; 6];
let _47: *const *const f64;
let _48: Adt56;
let _49: [u32; 8];
let _50: [u32; 8];
let _51: i64;
let _52: [u32; 8];
let _53: u32;
let _54: Adt61;
let _55: [u32; 8];
let _56: ();
let _57: ();
{
RET.0 = !22243_i16;
_3.fld1.0.0.5 = !14_i8;
_3.fld1.0.0.8 = 209371347228253210046635169481877571375_u128 >> _3.fld1.0.0.5;
_1 = 88251573668324722_u64;
_3.fld1.0.0.7 = (-1888757282_i32) as u32;
_3.fld1.0.0.4 = 8231414050682876746_i64 as u128;
_3.fld1.0.0.6 = 14377_i16;
_6.fld1.fld1 = [11449_u16,43542_u16,53502_u16,2811_u16,55327_u16,47500_u16,48558_u16,32748_u16];
_2 = _3.fld1.0.0.6;
_3.fld1.0.2 = '\u{cddb6}';
_3.fld0.fld1.0 = core::ptr::addr_of_mut!(_3.fld1.0.2);
Goto(bb1)
}
bb1 = {
_3.fld1.1 = 3910919099985758492_usize << _3.fld1.0.0.6;
_10.fld1 = Adt56 { fld0: 62118574218703566684205711397362826716_i128,fld1: _3.fld1.0.0.6 };
_9.fld0.0 = _3.fld1.0.0.6 & _3.fld1.0.0.6;
_3.fld1.1 = _3.fld1.0.0.7 as usize;
_6.fld1.fld2 = core::ptr::addr_of!(_10.fld6.0);
_3.fld1.0.0.1 = true as isize;
_10.fld5 = !_3.fld1.0.0.8;
_10.fld3.fld5.1 = [554312234_i32,(-1571005388_i32),(-899986061_i32),1078029806_i32,741365592_i32,1201958153_i32];
_7 = (-847379431_i32) as u16;
_10.fld0.1.0 = _10.fld5 as i128;
_10.fld3.fld1 = (1248623761_i32, _10.fld0.1.0);
_10.fld0.1.2 = core::ptr::addr_of_mut!(_10.fld6.0);
_5 = 1_u8 >> _3.fld1.1;
_8 = _3.fld1.0.0.8 * _3.fld1.0.0.8;
_6.fld1.fld4.0 = core::ptr::addr_of!(_1);
_10.fld3.fld5.1 = [_10.fld3.fld1.0,_10.fld3.fld1.0,_10.fld3.fld1.0,_10.fld3.fld1.0,_10.fld3.fld1.0,_10.fld3.fld1.0];
_16.0.3 = _7;
_3.fld1.0.0.7 = 3018690224_u32;
_16.0.1 = _2 as isize;
RET.0 = _9.fld0.0 - _2;
_16.0.0 = _10.fld3.fld1.1 | _10.fld3.fld1.1;
Call(_9.fld1.0 = fn1(_3.fld1.0.2, _10.fld3.fld1.0, _10.fld3.fld5.1, _2, _1, _3.fld1.0.0.4, _3.fld1.1, _10.fld0.1.0), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_10.fld2 = false as isize;
_10.fld0.1.1 = _3.fld1.0.0.1 ^ _10.fld2;
_10.fld6.0 = !_1;
_6.fld1.fld1 = [_16.0.3,_7,_7,_7,_7,_7,_16.0.3,_16.0.3];
_10.fld4 = core::ptr::addr_of!(_3.fld0.fld0.1);
_3.fld1.0.0 = (_10.fld3.fld1.1, _10.fld0.1.1, _10.fld0.1.2, _7, _8, 33_i8, _10.fld1.fld1, 2467136527_u32, _8);
_19.fld1 = [_3.fld1.0.0.7,_3.fld1.0.0.7,_3.fld1.0.0.7,_3.fld1.0.0.7,_3.fld1.0.0.7,_3.fld1.0.0.7,_3.fld1.0.0.7,_3.fld1.0.0.7];
_15 = [false,false,false,true];
RET.1 = _10.fld3.fld5.1;
_13 = _10.fld0.1.1 & _3.fld1.0.0.1;
_6.fld1.fld3 = core::ptr::addr_of!(_3.fld0.fld0.1);
_6.fld1.fld2 = _6.fld1.fld4.0;
_10.fld1.fld1 = _9.fld0.0 >> _3.fld1.0.0.7;
_3.fld1.0.0.2 = _10.fld0.1.2;
_6.fld1.fld1 = [_16.0.3,_7,_16.0.3,_3.fld1.0.0.3,_3.fld1.0.0.3,_7,_7,_16.0.3];
_14 = [_7,_7,_3.fld1.0.0.3,_16.0.3,_7,_3.fld1.0.0.3,_7,_16.0.3];
_3.fld1.1 = !2032132144440742338_usize;
_16.0.7 = false as u32;
RET.1 = [_10.fld3.fld1.0,_10.fld3.fld1.0,_10.fld3.fld1.0,_10.fld3.fld1.0,_10.fld3.fld1.0,_10.fld3.fld1.0];
_3.fld0.fld0.0 = _10.fld3.fld1.0 as i16;
_9.fld1.0 = core::ptr::addr_of_mut!(_16.2);
_8 = _3.fld1.0.0.8;
Call(_19.fld2 = fn18(_3.fld1.0.0.8, _3.fld1.0.2, _10.fld0.1.2), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_12 = _16.0.1 - _13;
_10.fld0.1.8 = !_3.fld1.0.0.8;
_16.0.4 = !_8;
_19.fld2 = _12;
_10.fld3.fld5.0 = (-8831821602217970193_i64) as i16;
_10.fld0.1.5 = _10.fld3.fld1.0 as i8;
_22 = (_1,);
_16.0.4 = !_10.fld5;
_16.0.6 = _3.fld1.0.0.6 ^ _10.fld1.fld1;
_11 = _10.fld3.fld1.0 as f32;
match _10.fld3.fld1.0 {
1248623761 => bb4,
_ => bb1
}
}
bb4 = {
_9.fld1.0 = _3.fld0.fld1.0;
_21 = [_7,_7,_3.fld1.0.0.3,_7,_3.fld1.0.0.3,_16.0.3,_7,_3.fld1.0.0.3];
_3.fld1.0.0.8 = _8 % 119359925866572690754063116978171467979_u128;
_16.0.8 = !_3.fld1.0.0.8;
_10.fld0.1.3 = _3.fld1.0.0.3;
_10.fld0.3 = _6.fld1.fld2;
_7 = !_10.fld0.1.3;
_10.fld3.fld0 = _10.fld1.fld1 != _16.0.6;
_19.fld2 = _3.fld1.1 as isize;
_14 = [_16.0.3,_16.0.3,_3.fld1.0.0.3,_16.0.3,_7,_10.fld0.1.3,_7,_16.0.3];
_18 = [_10.fld6.0,_10.fld6.0];
_3.fld1.0.0.8 = _10.fld3.fld0 as u128;
_23 = [_3.fld1.0.0.7,_3.fld1.0.0.7,_3.fld1.0.0.7,_16.0.7,_3.fld1.0.0.7,_3.fld1.0.0.7,_3.fld1.0.0.7,_3.fld1.0.0.7];
_22.0 = _10.fld0.1.5 as u64;
_10.fld0.2.0 = core::ptr::addr_of_mut!(_3.fld1.0.2);
_7 = _3.fld1.0.0.3 * _3.fld1.0.0.3;
_6.fld1.fld3 = core::ptr::addr_of!(_9.fld0.1);
_10.fld3.fld3 = _10.fld3.fld1.0 as i8;
_6.fld1.fld4.0 = _6.fld1.fld2;
_30 = (_3.fld0.fld1.0,);
_3.fld1.0.0.0 = !_16.0.0;
match _1 {
0 => bb1,
1 => bb3,
88251573668324722 => bb6,
_ => bb5
}
}
bb5 = {
_3.fld1.1 = 3910919099985758492_usize << _3.fld1.0.0.6;
_10.fld1 = Adt56 { fld0: 62118574218703566684205711397362826716_i128,fld1: _3.fld1.0.0.6 };
_9.fld0.0 = _3.fld1.0.0.6 & _3.fld1.0.0.6;
_3.fld1.1 = _3.fld1.0.0.7 as usize;
_6.fld1.fld2 = core::ptr::addr_of!(_10.fld6.0);
_3.fld1.0.0.1 = true as isize;
_10.fld5 = !_3.fld1.0.0.8;
_10.fld3.fld5.1 = [554312234_i32,(-1571005388_i32),(-899986061_i32),1078029806_i32,741365592_i32,1201958153_i32];
_7 = (-847379431_i32) as u16;
_10.fld0.1.0 = _10.fld5 as i128;
_10.fld3.fld1 = (1248623761_i32, _10.fld0.1.0);
_10.fld0.1.2 = core::ptr::addr_of_mut!(_10.fld6.0);
_5 = 1_u8 >> _3.fld1.1;
_8 = _3.fld1.0.0.8 * _3.fld1.0.0.8;
_6.fld1.fld4.0 = core::ptr::addr_of!(_1);
_10.fld3.fld5.1 = [_10.fld3.fld1.0,_10.fld3.fld1.0,_10.fld3.fld1.0,_10.fld3.fld1.0,_10.fld3.fld1.0,_10.fld3.fld1.0];
_16.0.3 = _7;
_3.fld1.0.0.7 = 3018690224_u32;
_16.0.1 = _2 as isize;
RET.0 = _9.fld0.0 - _2;
_16.0.0 = _10.fld3.fld1.1 | _10.fld3.fld1.1;
Call(_9.fld1.0 = fn1(_3.fld1.0.2, _10.fld3.fld1.0, _10.fld3.fld5.1, _2, _1, _3.fld1.0.0.4, _3.fld1.1, _10.fld0.1.0), ReturnTo(bb2), UnwindUnreachable())
}
bb6 = {
_19.fld2 = _12;
_10.fld3.fld5.1 = [_10.fld3.fld1.0,_10.fld3.fld1.0,_10.fld3.fld1.0,_10.fld3.fld1.0,_10.fld3.fld1.0,_10.fld3.fld1.0];
_10.fld3.fld3 = _3.fld1.0.0.8 as i8;
_10.fld0.1.7 = _11 as u32;
_28 = _10.fld3.fld0;
_3.fld0.fld0.1 = core::ptr::addr_of!(_6.fld1.fld4.1);
_10.fld3.fld3 = _3.fld1.0.0.5 ^ _10.fld0.1.5;
_3.fld1.0.1 = !_10.fld3.fld3;
RET = _10.fld3.fld5;
_16.0.7 = _22.0 as u32;
_6.fld0 = core::ptr::addr_of!(_3.fld0.fld0.1);
_25.2.0 = _10.fld3.fld3 << _10.fld1.fld1;
_16.0.8 = _3.fld1.0.2 as u128;
_10.fld3.fld1.0 = _7 as i32;
_10.fld0.1.0 = _10.fld3.fld1.1;
_3.fld1.0.0.4 = _3.fld1.0.2 as u128;
_10.fld3.fld2 = core::ptr::addr_of!(_36);
_31.0 = -_10.fld3.fld3;
_10.fld0.1.4 = !_3.fld1.0.0.8;
_16.2 = _3.fld1.0.2;
_16.1 = _3.fld1.0.0.5 + _3.fld1.0.0.5;
RET = (_10.fld3.fld5.0, _10.fld3.fld5.1);
_16.0.6 = !_10.fld1.fld1;
_9.fld1 = (_3.fld0.fld1.0,);
Goto(bb7)
}
bb7 = {
_36.1 = core::ptr::addr_of_mut!(_10.fld6.0);
_10.fld0.1.7 = _3.fld1.0.0.7 + _16.0.7;
_10.fld3.fld5.1 = [_10.fld3.fld1.0,_10.fld3.fld1.0,_10.fld3.fld1.0,_10.fld3.fld1.0,_10.fld3.fld1.0,_10.fld3.fld1.0];
_10.fld6.0 = _10.fld3.fld1.0 as u64;
_40 = _23;
_24 = !_10.fld0.1.4;
_10.fld0.1 = _3.fld1.0.0;
_34.fld0 = _1 as f64;
_25.4 = core::ptr::addr_of!(_6.fld1.fld4.1);
_10.fld1.fld1 = _16.0.6;
_11 = _22.0 as f32;
_3.fld1.0.2 = _16.2;
_10.fld6 = (_22.0, _8);
_10.fld4 = core::ptr::addr_of!(_3.fld0.fld0.1);
_16.1 = _31.0 << _3.fld1.0.0.7;
_19.fld0 = 5475135696007157598_i64 as f64;
_3.fld1.0.0.8 = _24 * _24;
_10.fld4 = core::ptr::addr_of!(_9.fld0.1);
_37 = _3.fld1.0.0.8;
_16.0.2 = core::ptr::addr_of_mut!(_20);
Goto(bb8)
}
bb8 = {
_6.fld1.fld0 = core::ptr::addr_of!(_36);
_39 = -_3.fld1.0.0.0;
_12 = _3.fld1.0.0.1 >> _16.0.6;
_16.0.5 = _9.fld0.0 as i8;
_17 = !_3.fld1.0.0.7;
_16.0.4 = _3.fld1.0.0.8;
_25.3.0 = _10.fld0.1.0 as u64;
_39 = _19.fld2 as i128;
_10.fld6.1 = !_3.fld1.0.0.8;
Call(_44.fld5 = core::intrinsics::bswap(_17), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
_44.fld3 = _10.fld3.fld5;
_38.fld1.fld3 = core::ptr::addr_of!(_9.fld0.1);
_36.1 = core::ptr::addr_of_mut!(_20);
_45 = (_25.2.0,);
_20 = !_10.fld6.0;
_3.fld1.0.2 = _16.2;
_38.fld1.fld2 = core::ptr::addr_of!(_10.fld6.0);
_10.fld3.fld1 = (1045095384_i32, _39);
_3.fld1.0.0.8 = _10.fld6.1;
_16.0.3 = !_7;
_35 = !_13;
_17 = _10.fld3.fld1.0 as u32;
_20 = _3.fld1.1 as u64;
_46 = [_10.fld3.fld1.0,_10.fld3.fld1.0,_10.fld3.fld1.0,_10.fld3.fld1.0,_10.fld3.fld1.0,_10.fld3.fld1.0];
_10.fld6.1 = _16.0.4 | _37;
_48.fld0 = _10.fld3.fld1.1;
_16.1 = _3.fld1.0.2 as i8;
_6.fld1.fld4.1 = 3388917596911006639_i64 as f64;
Goto(bb10)
}
bb10 = {
_3.fld1.0.0.8 = !_24;
_6.fld1.fld3 = core::ptr::addr_of!(_3.fld0.fld0.1);
_37 = _16.0.4 & _10.fld6.1;
RET.0 = _10.fld1.fld1;
_10.fld3.fld2 = core::ptr::addr_of!(_36);
_48 = Adt56 { fld0: _10.fld0.1.0,fld1: _16.0.6 };
_44.fld2 = core::ptr::addr_of_mut!(_10.fld3.fld5.0);
_14 = _21;
_10.fld0.1.8 = _10.fld0.1.7 as u128;
_25.1 = -1993697012766465388_i64;
_28 = _10.fld3.fld0;
_41 = [_10.fld3.fld0];
_44.fld0.1 = _3.fld1.1 as f64;
_43 = !_12;
_27 = [_3.fld1.0.0.7,_3.fld1.0.0.7,_3.fld1.0.0.7,_3.fld1.0.0.7,_3.fld1.0.0.7,_3.fld1.0.0.7,_17,_16.0.7];
_9.fld0 = (_48.fld1, _3.fld0.fld0.1);
_1 = _25.3.0;
_10.fld0.1.4 = _24 ^ _10.fld6.1;
_25.0 = -_12;
_27 = _40;
_1 = _25.3.0;
_22 = _25.3;
_21 = _6.fld1.fld1;
_10.fld3.fld5.1 = [_10.fld3.fld1.0,_10.fld3.fld1.0,_10.fld3.fld1.0,_10.fld3.fld1.0,_10.fld3.fld1.0,_10.fld3.fld1.0];
_3.fld0.fld0 = (_48.fld1, _9.fld0.1);
_16.2 = _3.fld1.0.2;
Goto(bb11)
}
bb11 = {
Call(_56 = dump_var(0_usize, 39_usize, Move(_39), 27_usize, Move(_27), 31_usize, Move(_31), 7_usize, Move(_7)), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
Call(_56 = dump_var(0_usize, 1_usize, Move(_1), 12_usize, Move(_12), 40_usize, Move(_40), 18_usize, Move(_18)), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
Call(_56 = dump_var(0_usize, 28_usize, Move(_28), 14_usize, Move(_14), 22_usize, Move(_22), 13_usize, Move(_13)), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
Call(_56 = dump_var(0_usize, 21_usize, Move(_21), 57_usize, _57, 57_usize, _57, 57_usize, _57), ReturnTo(bb15), UnwindUnreachable())
}
bb15 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn1(mut _1: char,mut _2: i32,mut _3: [i32; 6],mut _4: i16,mut _5: u64,mut _6: u128,mut _7: usize,mut _8: i128) -> *mut char {
mir! {
type RET = *mut char;
let _9: char;
let _10: [u16; 8];
let _11: (i8,);
let _12: Adt54;
let _13: (u64, u128);
let _14: char;
let _15: isize;
let _16: [u64; 2];
let _17: Adt51;
let _18: [bool; 1];
let _19: isize;
let _20: Adt56;
let _21: [bool; 1];
let _22: [bool; 1];
let _23: Adt65;
let _24: [u32; 8];
let _25: bool;
let _26: (*const u64, f64);
let _27: *const *mut u64;
let _28: *mut i16;
let _29: i64;
let _30: (*mut char,);
let _31: f64;
let _32: [i32; 6];
let _33: ();
let _34: ();
{
_7 = !6_usize;
_2 = -(-299954599_i32);
RET = core::ptr::addr_of_mut!(_1);
(*RET) = '\u{f3162}';
Goto(bb1)
}
bb1 = {
_2 = -849462797_i32;
_2 = _8 as i32;
RET = core::ptr::addr_of_mut!((*RET));
_7 = !3305492787460559552_usize;
_7 = 4_usize >> _2;
RET = core::ptr::addr_of_mut!((*RET));
(*RET) = '\u{215aa}';
_5 = !15364655635604892858_u64;
_1 = '\u{8e202}';
(*RET) = '\u{897d5}';
(*RET) = '\u{50ed9}';
_7 = 5641953749240206277_usize & 3_usize;
RET = core::ptr::addr_of_mut!((*RET));
RET = core::ptr::addr_of_mut!((*RET));
_10 = [12464_u16,25770_u16,34306_u16,50155_u16,191_u16,1503_u16,60708_u16,48325_u16];
_6 = 279662280686433922431548167855473022930_u128;
RET = core::ptr::addr_of_mut!((*RET));
(*RET) = '\u{f8475}';
(*RET) = '\u{ac4d3}';
(*RET) = '\u{3548}';
_9 = _1;
_8 = !42860420450220459209365478692475349599_i128;
match _6 {
279662280686433922431548167855473022930 => bb3,
_ => bb2
}
}
bb2 = {
Return()
}
bb3 = {
_5 = 630731131024778681_u64;
_5 = 3803137989271765855_u64;
(*RET) = _9;
_9 = (*RET);
_10 = [33914_u16,38055_u16,22330_u16,2917_u16,45890_u16,21370_u16,13800_u16,41460_u16];
_6 = !272570051122487390729551042630047791280_u128;
_7 = (*RET) as usize;
_11.0 = (-27_i8);
_5 = !2328681462622829852_u64;
(*RET) = _9;
_12.fld4.0 = core::ptr::addr_of!(_5);
_10 = [36208_u16,54115_u16,14032_u16,23403_u16,52831_u16,16313_u16,23305_u16,31730_u16];
_5 = _8 as u64;
_11.0 = (-89_i8) * 76_i8;
_14 = _1;
_6 = !155672894075497138306686108793537234523_u128;
_13.1 = _6 / 331197410613551658806752022340354943105_u128;
_3 = [_2,_2,_2,_2,_2,_2];
(*RET) = _9;
_12.fld4.0 = core::ptr::addr_of!(_5);
_12.fld1 = [21081_u16,10493_u16,15263_u16,55236_u16,4949_u16,29545_u16,18888_u16,8494_u16];
Call(_12.fld2 = fn2(_4, _11.0), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_13.1 = _8 as u128;
(*RET) = _14;
_1 = _14;
_11.0 = 76_i8 | 70_i8;
RET = core::ptr::addr_of_mut!(_1);
_7 = (-445407867909758170_i64) as usize;
_12.fld2 = _12.fld4.0;
match _4 {
0 => bb1,
14377 => bb5,
_ => bb2
}
}
bb5 = {
_13.0 = _6 as u64;
_8 = !(-16470712389300086485318497126155111844_i128);
_7 = 0_usize;
_17.fld1[_7] = _8 as u32;
_2 = _3[_7] & _3[_7];
_9 = _1;
_16[_7] = _10[_7] as u64;
_6 = _11.0 as u128;
_12.fld4.0 = _12.fld2;
_13.1 = !_6;
_17.fld1[_7] = !15431813_u32;
_5 = !_16[_7];
(*RET) = _9;
_10[_7] = _5 as u16;
_20.fld1 = _4;
_16 = [_5,_5];
_12.fld4.1 = _2 as f64;
_17.fld2 = -(-9223372036854775808_isize);
RET = core::ptr::addr_of_mut!(_1);
_12.fld2 = _12.fld4.0;
_5 = _11.0 as u64;
_20.fld0 = _8;
_12.fld4.0 = core::ptr::addr_of!(_16[_7]);
_16[_7] = _5;
match _12.fld1[_7] {
0 => bb1,
1 => bb4,
2 => bb3,
3 => bb6,
4 => bb7,
21081 => bb9,
_ => bb8
}
}
bb6 = {
_13.1 = _8 as u128;
(*RET) = _14;
_1 = _14;
_11.0 = 76_i8 | 70_i8;
RET = core::ptr::addr_of_mut!(_1);
_7 = (-445407867909758170_i64) as usize;
_12.fld2 = _12.fld4.0;
match _4 {
0 => bb1,
14377 => bb5,
_ => bb2
}
}
bb7 = {
_5 = 630731131024778681_u64;
_5 = 3803137989271765855_u64;
(*RET) = _9;
_9 = (*RET);
_10 = [33914_u16,38055_u16,22330_u16,2917_u16,45890_u16,21370_u16,13800_u16,41460_u16];
_6 = !272570051122487390729551042630047791280_u128;
_7 = (*RET) as usize;
_11.0 = (-27_i8);
_5 = !2328681462622829852_u64;
(*RET) = _9;
_12.fld4.0 = core::ptr::addr_of!(_5);
_10 = [36208_u16,54115_u16,14032_u16,23403_u16,52831_u16,16313_u16,23305_u16,31730_u16];
_5 = _8 as u64;
_11.0 = (-89_i8) * 76_i8;
_14 = _1;
_6 = !155672894075497138306686108793537234523_u128;
_13.1 = _6 / 331197410613551658806752022340354943105_u128;
_3 = [_2,_2,_2,_2,_2,_2];
(*RET) = _9;
_12.fld4.0 = core::ptr::addr_of!(_5);
_12.fld1 = [21081_u16,10493_u16,15263_u16,55236_u16,4949_u16,29545_u16,18888_u16,8494_u16];
Call(_12.fld2 = fn2(_4, _11.0), ReturnTo(bb4), UnwindUnreachable())
}
bb8 = {
Return()
}
bb9 = {
_7 = 18353511980646003769_usize % 1_usize;
_6 = _13.1;
_23.fld6 = _6;
_12.fld2 = core::ptr::addr_of!(_5);
_20.fld0 = _8;
_13.0 = _17.fld2 as u64;
Goto(bb10)
}
bb10 = {
_1 = _14;
_12.fld4.1 = 5642865709856186331_i64 as f64;
_10 = [9213_u16,16619_u16,49274_u16,10619_u16,54955_u16,43556_u16,24625_u16,20558_u16];
_23.fld0.1 = _12.fld4.1 / f64::NAN;
_24 = [1908663559_u32,683874380_u32,1602728639_u32,3429287804_u32,2613442585_u32,3227421427_u32,759463811_u32,1807145535_u32];
Goto(bb11)
}
bb11 = {
_17.fld1 = [968367291_u32,743372417_u32,2436188189_u32,1481802310_u32,600035783_u32,2543599995_u32,376307482_u32,1780680249_u32];
_12.fld4.1 = -_23.fld0.1;
_26.1 = _8 as f64;
_23.fld0.0 = core::ptr::addr_of!(_5);
_7 = _20.fld1 as usize;
_23.fld4 = core::ptr::addr_of_mut!(_23.fld2);
_12.fld4.1 = -_23.fld0.1;
_18 = [false];
_25 = !true;
_5 = _13.0;
_22 = [_25];
_12.fld2 = core::ptr::addr_of!(_5);
_23.fld3.1 = [_2,_2,_2,_2,_2,_2];
_6 = 13515_u16 as u128;
match _20.fld1 {
0 => bb12,
1 => bb13,
14377 => bb15,
_ => bb14
}
}
bb12 = {
_13.0 = _6 as u64;
_8 = !(-16470712389300086485318497126155111844_i128);
_7 = 0_usize;
_17.fld1[_7] = _8 as u32;
_2 = _3[_7] & _3[_7];
_9 = _1;
_16[_7] = _10[_7] as u64;
_6 = _11.0 as u128;
_12.fld4.0 = _12.fld2;
_13.1 = !_6;
_17.fld1[_7] = !15431813_u32;
_5 = !_16[_7];
(*RET) = _9;
_10[_7] = _5 as u16;
_20.fld1 = _4;
_16 = [_5,_5];
_12.fld4.1 = _2 as f64;
_17.fld2 = -(-9223372036854775808_isize);
RET = core::ptr::addr_of_mut!(_1);
_12.fld2 = _12.fld4.0;
_5 = _11.0 as u64;
_20.fld0 = _8;
_12.fld4.0 = core::ptr::addr_of!(_16[_7]);
_16[_7] = _5;
match _12.fld1[_7] {
0 => bb1,
1 => bb4,
2 => bb3,
3 => bb6,
4 => bb7,
21081 => bb9,
_ => bb8
}
}
bb13 = {
_13.1 = _8 as u128;
(*RET) = _14;
_1 = _14;
_11.0 = 76_i8 | 70_i8;
RET = core::ptr::addr_of_mut!(_1);
_7 = (-445407867909758170_i64) as usize;
_12.fld2 = _12.fld4.0;
match _4 {
0 => bb1,
14377 => bb5,
_ => bb2
}
}
bb14 = {
Return()
}
bb15 = {
_17.fld1 = [3220797105_u32,1642853562_u32,4040627358_u32,1136109886_u32,1070839483_u32,2629237137_u32,42903804_u32,2409803204_u32];
_5 = !_13.0;
_23.fld2 = core::ptr::addr_of_mut!(_20.fld1);
_26.0 = core::ptr::addr_of!(_5);
_13 = (_5, _6);
_21 = _22;
_17 = Adt51 { fld0: _23.fld0.1,fld1: _24,fld2: (-9223372036854775808_isize) };
_2 = (-2095862090_i32) >> _11.0;
(*RET) = _14;
_5 = _13.0 | _13.0;
_25 = false;
_11 = (104_i8,);
_17.fld1 = [1988797287_u32,3110501852_u32,2757042140_u32,1060927817_u32,2865396633_u32,2902380821_u32,79705375_u32,1911232755_u32];
_19 = _17.fld2 + _17.fld2;
_3 = [_2,_2,_2,_2,_2,_2];
_7 = 1_usize;
RET = core::ptr::addr_of_mut!((*RET));
Goto(bb16)
}
bb16 = {
Call(_33 = dump_var(1_usize, 13_usize, Move(_13), 19_usize, Move(_19), 4_usize, Move(_4), 16_usize, Move(_16)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_33 = dump_var(1_usize, 11_usize, Move(_11), 1_usize, Move(_1), 10_usize, Move(_10), 6_usize, Move(_6)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_33 = dump_var(1_usize, 21_usize, Move(_21), 5_usize, Move(_5), 34_usize, _34, 34_usize, _34), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn2(mut _1: i16,mut _2: i8) -> *const u64 {
mir! {
type RET = *const u64;
let _3: bool;
let _4: *const u64;
let _5: Adt61;
let _6: Adt56;
let _7: Adt61;
let _8: [u32; 6];
let _9: usize;
let _10: char;
let _11: [bool; 4];
let _12: Adt51;
let _13: i128;
let _14: i16;
let _15: f64;
let _16: bool;
let _17: (i32, i128);
let _18: f64;
let _19: (u64, u128);
let _20: [u64; 2];
let _21: f32;
let _22: f64;
let _23: u64;
let _24: Adt53;
let _25: i8;
let _26: ();
let _27: ();
{
_1 = (-14885_i16);
_3 = _2 == _2;
_3 = !true;
_2 = 103_i8;
match _2 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb5,
103 => bb7,
_ => bb6
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
_1 = 2957516638739087175_u64 as i16;
_3 = false;
_3 = false;
_6 = Adt56 { fld0: (-159195283016034041190363163141542837318_i128),fld1: _1 };
_6 = Adt56 { fld0: 73883372994211196911740605929758160100_i128,fld1: _1 };
_5.fld0.1 = [(-2075672837_i32),(-688678807_i32),(-952107669_i32),(-1693485352_i32),(-162518234_i32),1873933803_i32];
_1 = -_6.fld1;
_2 = (-1321317798_i32) as i8;
_1 = _6.fld0 as i16;
_6.fld0 = !(-112723493123399847780059237051678498202_i128);
_7.fld0.1 = [850527078_i32,2078244966_i32,(-1288432759_i32),(-1908467738_i32),1440900989_i32,(-1282576681_i32)];
Goto(bb8)
}
bb8 = {
_7.fld0.1 = _5.fld0.1;
_7.fld0 = (_1, _5.fld0.1);
_2 = 93_i8;
_5.fld0 = _7.fld0;
_6 = Adt56 { fld0: 40208058685926209181355569350893554578_i128,fld1: _7.fld0.0 };
_5.fld0 = (_1, _7.fld0.1);
_5.fld0.1 = _7.fld0.1;
_5.fld0.1 = _7.fld0.1;
_7.fld0.0 = _1;
_1 = -_7.fld0.0;
_5.fld0.0 = _6.fld1;
_6.fld0 = -60115685954244206712696718516789818428_i128;
_7.fld0.0 = !_5.fld0.0;
_6.fld0 = !79705557030586909986654002451635120465_i128;
_5.fld0.1 = _7.fld0.1;
match _2 {
0 => bb4,
1 => bb5,
2 => bb3,
3 => bb9,
4 => bb10,
5 => bb11,
93 => bb13,
_ => bb12
}
}
bb9 = {
_1 = 2957516638739087175_u64 as i16;
_3 = false;
_3 = false;
_6 = Adt56 { fld0: (-159195283016034041190363163141542837318_i128),fld1: _1 };
_6 = Adt56 { fld0: 73883372994211196911740605929758160100_i128,fld1: _1 };
_5.fld0.1 = [(-2075672837_i32),(-688678807_i32),(-952107669_i32),(-1693485352_i32),(-162518234_i32),1873933803_i32];
_1 = -_6.fld1;
_2 = (-1321317798_i32) as i8;
_1 = _6.fld0 as i16;
_6.fld0 = !(-112723493123399847780059237051678498202_i128);
_7.fld0.1 = [850527078_i32,2078244966_i32,(-1288432759_i32),(-1908467738_i32),1440900989_i32,(-1282576681_i32)];
Goto(bb8)
}
bb10 = {
Return()
}
bb11 = {
Return()
}
bb12 = {
Return()
}
bb13 = {
_7.fld0 = (_5.fld0.0, _5.fld0.1);
_7.fld0.1 = _5.fld0.1;
_1 = _7.fld0.0 * _7.fld0.0;
_1 = _5.fld0.0 | _7.fld0.0;
_7.fld0.1 = _5.fld0.1;
_2 = 7245416291958622238_usize as i8;
_5.fld0 = _7.fld0;
_7.fld0.0 = _1 + _1;
_2 = (-90_i8);
_8 = [1973886074_u32,2519614478_u32,4089370475_u32,3627471631_u32,2983303226_u32,800665904_u32];
_8 = [1820489869_u32,2852644575_u32,1436877895_u32,2398150565_u32,2938172578_u32,3778420207_u32];
_5.fld0.1 = [(-189081408_i32),(-1092936553_i32),227704061_i32,1646306041_i32,827977115_i32,1858878004_i32];
_5.fld0.1 = [1424163172_i32,(-590773919_i32),72689673_i32,(-991733515_i32),(-312930683_i32),2010237359_i32];
_7.fld0 = _5.fld0;
Call(_6.fld1 = fn3(Move(_5), _3, _2, Move(_7), _3, _1, _2, _3, _2, _3, _8), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
_8 = [2605005863_u32,3084479710_u32,3524527153_u32,2446338379_u32,3055475049_u32,3951190292_u32];
_1 = _6.fld1;
_6.fld0 = !(-121091129356886695731584705709574421632_i128);
match _2 {
0 => bb13,
340282366920938463463374607431768211366 => bb15,
_ => bb2
}
}
bb15 = {
_6 = Adt56 { fld0: (-16728029996565492113938177343986951436_i128),fld1: _1 };
_6 = Adt56 { fld0: 150467568573932018347518534950980532480_i128,fld1: _1 };
_6.fld0 = 14178408781791898532_u64 as i128;
_9 = 232923127133489147790814978808721736233_u128 as usize;
_8 = [3252655592_u32,3061298462_u32,484667838_u32,4293550291_u32,2551558043_u32,1779700288_u32];
_6.fld1 = _1;
_1 = _6.fld0 as i16;
_9 = !6_usize;
_9 = 4_usize | 6224917344080432260_usize;
Goto(bb16)
}
bb16 = {
_1 = _6.fld1 ^ _6.fld1;
_1 = 13530602317688739832_u64 as i16;
_9 = _6.fld1 as usize;
_9 = (-56_isize) as usize;
Goto(bb17)
}
bb17 = {
_6.fld0 = !(-149804514829794155074526169373131319794_i128);
Goto(bb18)
}
bb18 = {
_1 = !_6.fld1;
_6.fld1 = _1 << _2;
_2 = (-85_i8);
_9 = 16508500223970350790_usize;
_2 = 55_i8;
_6.fld0 = 63036004481762843367800477965513329245_i128 * 47689968927299082098014359472061037_i128;
_6 = Adt56 { fld0: 156817023895748548191653752622020966814_i128,fld1: _1 };
_12.fld1 = [2942601992_u32,2116130300_u32,2874652819_u32,2793172146_u32,2595270851_u32,3393250970_u32,4247863169_u32,2921500546_u32];
Goto(bb19)
}
bb19 = {
_12.fld2 = 9223372036854775807_isize;
_12.fld0 = _6.fld0 as f64;
_13 = -_6.fld0;
_6.fld1 = 7_u8 as i16;
_3 = !false;
_10 = '\u{4d70c}';
_6.fld0 = -_13;
_11 = [_3,_3,_3,_3];
_13 = !_6.fld0;
_11 = [_3,_3,_3,_3];
_6 = Adt56 { fld0: _13,fld1: _1 };
_11 = [_3,_3,_3,_3];
_14 = _6.fld1 | _1;
_12.fld0 = _2 as f64;
_10 = '\u{48298}';
_1 = _12.fld0 as i16;
_11 = [_3,_3,_3,_3];
_17 = (994146531_i32, _13);
Call(_15 = fn17(_13, _17.0, _3), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
_12.fld0 = 1501518442_u32 as f64;
_11 = [_3,_3,_3,_3];
_19.0 = 1680543697937880102_u64;
_18 = _17.1 as f64;
_17 = ((-186355962_i32), _6.fld0);
_19 = (4683313965167739829_u64, 249413205327409676173902140604491212399_u128);
RET = core::ptr::addr_of!(_19.0);
(*RET) = 2414243034010410010_u64 ^ 15645270368790116299_u64;
_4 = core::ptr::addr_of!(_19.0);
_19 = (11847902040973260027_u64, 105414791389631186957255644542189829949_u128);
_17 = ((-1099470380_i32), _13);
_2 = !12_i8;
(*_4) = 2214273936304908397_u64;
_14 = (-1801342382150424220_i64) as i16;
_20 = [_19.0,(*_4)];
_6 = Adt56 { fld0: _13,fld1: _1 };
(*_4) = _10 as u64;
_17.0 = -1137408132_i32;
(*RET) = _3 as u64;
_19 = (2438767067392684400_u64, 50429774428500494353511287776420500819_u128);
_23 = (-2645155216823275779_i64) as u64;
_10 = '\u{eea1d}';
RET = _4;
Goto(bb21)
}
bb21 = {
Call(_26 = dump_var(2_usize, 23_usize, Move(_23), 10_usize, Move(_10), 2_usize, Move(_2), 14_usize, Move(_14)), ReturnTo(bb22), UnwindUnreachable())
}
bb22 = {
Call(_26 = dump_var(2_usize, 11_usize, Move(_11), 17_usize, Move(_17), 27_usize, _27, 27_usize, _27), ReturnTo(bb23), UnwindUnreachable())
}
bb23 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn3(mut _1: Adt61,mut _2: bool,mut _3: i8,mut _4: Adt61,mut _5: bool,mut _6: i16,mut _7: i8,mut _8: bool,mut _9: i8,mut _10: bool,mut _11: [u32; 6]) -> i16 {
mir! {
type RET = i16;
let _12: Adt55;
let _13: i8;
let _14: char;
let _15: Adt64;
let _16: bool;
let _17: (u64, u128);
let _18: usize;
let _19: *const *const u64;
let _20: bool;
let _21: f64;
let _22: bool;
let _23: f64;
let _24: Adt51;
let _25: [u32; 6];
let _26: [bool; 1];
let _27: (i64, *mut u64, u128, [i32; 6], *const *const f64, (i8,));
let _28: (i16, [i32; 6]);
let _29: (*const u64, (i128, isize, *mut u64, u16, u128, i8, i16, u32, u128), (*mut char,), *const u64);
let _30: i32;
let _31: bool;
let _32: i128;
let _33: (i16, [i32; 6]);
let _34: isize;
let _35: (u64, u128);
let _36: isize;
let _37: isize;
let _38: u32;
let _39: ();
let _40: ();
{
_1.fld0 = (_6, _4.fld0.1);
_12.fld0.0.0.8 = !284934454817818404142965409339073188137_u128;
_10 = _8;
_6 = -_1.fld0.0;
_1.fld0.0 = 10471706888415259677_u64 as i16;
_7 = _3;
_10 = _8;
_12.fld0.0.0.1 = (-79947432587790603033415669789314396442_i128) as isize;
_1.fld0 = (_6, _4.fld0.1);
_6 = _1.fld0.0;
RET = _6;
_9 = -_7;
_12.fld0.0.2 = '\u{e9492}';
_1 = Adt61 { fld0: _4.fld0 };
_6 = _4.fld0.0;
_12.fld0.1 = 1158414815332836235_usize | 8518576994705170030_usize;
_4.fld0 = _1.fld0;
RET = _6;
_12.fld0.0.1 = _3 * _3;
_1.fld0 = _4.fld0;
_12.fld0.0.0.3 = 21100_u16;
_4.fld0 = _1.fld0;
match _7 {
0 => bb1,
340282366920938463463374607431768211366 => bb3,
_ => bb2
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
_12.fld0.0.2 = '\u{b87db}';
_12.fld0.0.0.1 = _12.fld0.1 as isize;
_12.fld0.0.0.4 = !_12.fld0.0.0.8;
_4.fld0.1 = [(-280039405_i32),1187175737_i32,(-3690416_i32),(-804773301_i32),(-396263010_i32),(-2061704270_i32)];
_15.fld0.fld1.fld1 = [_12.fld0.0.0.3,_12.fld0.0.0.3,_12.fld0.0.0.3,_12.fld0.0.0.3,_12.fld0.0.0.3,_12.fld0.0.0.3,_12.fld0.0.0.3,_12.fld0.0.0.3];
_1.fld0.0 = !_6;
Goto(bb4)
}
bb4 = {
_12.fld0.0.0.7 = !3909897989_u32;
_8 = _5 ^ _10;
_12.fld0.0.0.8 = !_12.fld0.0.0.4;
_9 = _12.fld0.0.0.4 as i8;
_4.fld0 = (_6, _1.fld0.1);
_13 = _12.fld0.0.0.8 as i8;
_12.fld0.0.0.2 = core::ptr::addr_of_mut!(_17.0);
_6 = _4.fld0.0 | _1.fld0.0;
_15.fld0.fld1.fld2 = core::ptr::addr_of!(_17.0);
_15.fld0.fld1.fld4.0 = core::ptr::addr_of!(_17.0);
_4.fld0.1 = [(-1059448240_i32),149332242_i32,260511994_i32,(-2145989121_i32),(-824817529_i32),1440445137_i32];
_12.fld0.0.0.0 = (-40727645667296057815560851867402805435_i128) >> _6;
_8 = _6 <= _6;
_1 = Adt61 { fld0: _4.fld0 };
_4.fld0.0 = !_6;
_2 = !_8;
RET = _1.fld0.0;
_17.0 = 6234105287698344840_u64;
_12.fld0.0.0.5 = !_7;
_17.1 = _12.fld0.0.0.4;
_13 = _7 * _7;
Goto(bb5)
}
bb5 = {
_12.fld0.0.0.0 = !64864961345056793665428311070332961233_i128;
_12.fld0.0.0.4 = _17.1 - _12.fld0.0.0.8;
_20 = _2 >= _2;
_12.fld0.0.2 = '\u{e42d5}';
RET = _6;
_21 = _12.fld0.0.0.7 as f64;
_14 = _12.fld0.0.2;
_4 = Adt61 { fld0: _1.fld0 };
_16 = _20 ^ _20;
_16 = _4.fld0.0 >= _6;
_12.fld0.0.0.2 = core::ptr::addr_of_mut!(_17.0);
_12.fld0.1 = _12.fld0.0.0.1 as usize;
_16 = !_2;
_16 = _14 > _14;
RET = _4.fld0.0 ^ _4.fld0.0;
_19 = core::ptr::addr_of!(_15.fld0.fld1.fld2);
_12.fld0.0.0.6 = _4.fld0.0 | _4.fld0.0;
_11 = [_12.fld0.0.0.7,_12.fld0.0.0.7,_12.fld0.0.0.7,_12.fld0.0.0.7,_12.fld0.0.0.7,_12.fld0.0.0.7];
_12.fld0.1 = !13623979977216633062_usize;
Call(RET = fn4(_14, (*_19), _12.fld0, _12.fld0.0.1, _13, _12.fld0.0, _13, _12.fld0, _13, _12.fld0.0.1, _15.fld0.fld1.fld4.0, _12.fld0.0.0.3), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
_2 = _16 > _8;
_24.fld2 = _12.fld0.0.2 as isize;
(*_19) = _15.fld0.fld1.fld4.0;
_17.0 = 6102163225101543849_u64 - 4665904160572060909_u64;
_19 = core::ptr::addr_of!((*_19));
_22 = _16;
_10 = _20;
_15.fld0.fld1.fld4.0 = core::ptr::addr_of!(_17.0);
_12.fld0.0.0.6 = _4.fld0.0;
_2 = !_20;
_6 = _1.fld0.0 ^ _1.fld0.0;
_26 = [_10];
_12.fld0.0.2 = _14;
_24.fld1 = [_12.fld0.0.0.7,_12.fld0.0.0.7,_12.fld0.0.0.7,_12.fld0.0.0.7,_12.fld0.0.0.7,_12.fld0.0.0.7,_12.fld0.0.0.7,_12.fld0.0.0.7];
_23 = _21 / 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000878919975761527_f64;
_4.fld0.1 = [872190584_i32,1160672660_i32,368595406_i32,(-971321033_i32),969223948_i32,(-261377947_i32)];
_21 = _23;
match _12.fld0.0.0.3 {
0 => bb7,
21100 => bb9,
_ => bb8
}
}
bb7 = {
_12.fld0.0.0.0 = !64864961345056793665428311070332961233_i128;
_12.fld0.0.0.4 = _17.1 - _12.fld0.0.0.8;
_20 = _2 >= _2;
_12.fld0.0.2 = '\u{e42d5}';
RET = _6;
_21 = _12.fld0.0.0.7 as f64;
_14 = _12.fld0.0.2;
_4 = Adt61 { fld0: _1.fld0 };
_16 = _20 ^ _20;
_16 = _4.fld0.0 >= _6;
_12.fld0.0.0.2 = core::ptr::addr_of_mut!(_17.0);
_12.fld0.1 = _12.fld0.0.0.1 as usize;
_16 = !_2;
_16 = _14 > _14;
RET = _4.fld0.0 ^ _4.fld0.0;
_19 = core::ptr::addr_of!(_15.fld0.fld1.fld2);
_12.fld0.0.0.6 = _4.fld0.0 | _4.fld0.0;
_11 = [_12.fld0.0.0.7,_12.fld0.0.0.7,_12.fld0.0.0.7,_12.fld0.0.0.7,_12.fld0.0.0.7,_12.fld0.0.0.7];
_12.fld0.1 = !13623979977216633062_usize;
Call(RET = fn4(_14, (*_19), _12.fld0, _12.fld0.0.1, _13, _12.fld0.0, _13, _12.fld0, _13, _12.fld0.0.1, _15.fld0.fld1.fld4.0, _12.fld0.0.0.3), ReturnTo(bb6), UnwindUnreachable())
}
bb8 = {
Return()
}
bb9 = {
_8 = _10;
_21 = -_23;
_1.fld0.1 = [(-968874658_i32),934641953_i32,598666151_i32,315114544_i32,987858658_i32,(-1913869399_i32)];
_12.fld0.0.0.0 = -66971209594134735106838114388751866682_i128;
_12.fld0.0.0.8 = !_17.1;
_1.fld0.1 = [945703496_i32,(-1582437664_i32),187696430_i32,(-551023638_i32),38427623_i32,1294781935_i32];
_12.fld0.1 = _17.0 as usize;
_15.fld0.fld1.fld2 = core::ptr::addr_of!(_17.0);
Call(_28.0 = fn12((*_19), _24.fld2), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_15.fld0.fld1.fld0 = core::ptr::addr_of!(_27);
_12.fld0.0.0.7 = _13 as u32;
RET = !_4.fld0.0;
_12.fld0.0.0.2 = core::ptr::addr_of_mut!(_17.0);
_29.1.0 = _12.fld0.0.0.0;
_2 = _10;
_12.fld0.0.0.1 = _24.fld2 + _24.fld2;
_19 = core::ptr::addr_of!(_15.fld0.fld1.fld4.0);
RET = -_1.fld0.0;
_21 = -_23;
_21 = -_23;
_29.1.7 = _10 as u32;
Call(_12.fld0.0.0.7 = fn14(_15.fld0.fld1.fld4.0, _17, _17, _19, _17.0, _15.fld0.fld1.fld2, _15.fld0.fld1.fld0, _12.fld0.0.2, _12.fld0.0.2, _12.fld0.0.0.0, Move(_4)), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_28 = (_1.fld0.0, _1.fld0.1);
_15.fld0.fld1.fld2 = (*_19);
_29.0 = core::ptr::addr_of!(_17.0);
(*_19) = core::ptr::addr_of!(_17.0);
_29.1.1 = !_12.fld0.0.0.1;
_18 = _12.fld0.1;
_27.1 = core::ptr::addr_of_mut!(_17.0);
_29.1.4 = _17.1;
_29.2.0 = core::ptr::addr_of_mut!(_14);
_29.1.6 = -_12.fld0.0.0.6;
_26 = [_10];
_12.fld0.0.0.8 = _12.fld0.0.0.4;
_24.fld2 = _12.fld0.0.0.1 << _17.0;
_11 = [_29.1.7,_29.1.7,_29.1.7,_29.1.7,_12.fld0.0.0.7,_29.1.7];
(*_19) = core::ptr::addr_of!(_17.0);
_15.fld0.fld1.fld1 = [_12.fld0.0.0.3,_12.fld0.0.0.3,_12.fld0.0.0.3,_12.fld0.0.0.3,_12.fld0.0.0.3,_12.fld0.0.0.3,_12.fld0.0.0.3,_12.fld0.0.0.3];
_12.fld0.1 = _18 * _18;
_3 = _13;
_15.fld0.fld1.fld4.1 = -_23;
_35.1 = _27.2;
_13 = !_9;
_12.fld0.0.0.8 = !_27.2;
_3 = _15.fld0.fld1.fld4.1 as i8;
_31 = _10;
Goto(bb12)
}
bb12 = {
_34 = _24.fld2;
_29.1.5 = _13;
_35.1 = _12.fld0.0.0.8;
_9 = _12.fld0.0.0.4 as i8;
_29.0 = core::ptr::addr_of!(_35.0);
_24.fld1 = [_29.1.7,_29.1.7,_29.1.7,_29.1.7,_29.1.7,_29.1.7,_29.1.7,_29.1.7];
_24.fld0 = _21;
_29.1 = (_12.fld0.0.0.0, _34, _12.fld0.0.0.2, _12.fld0.0.0.3, _12.fld0.0.0.4, _3, _6, _12.fld0.0.0.7, _27.2);
_29.1.3 = _12.fld0.0.0.3 ^ _12.fld0.0.0.3;
_27.0 = 7210738879728854204_i64 >> _6;
Goto(bb13)
}
bb13 = {
_25 = [_12.fld0.0.0.7,_29.1.7,_29.1.7,_29.1.7,_29.1.7,_29.1.7];
_29.0 = (*_19);
_28.0 = 229_u8 as i16;
_7 = _29.1.3 as i8;
_29.1 = _12.fld0.0.0;
_35.1 = _29.1.8 & _29.1.8;
_19 = core::ptr::addr_of!((*_19));
_29.2.0 = core::ptr::addr_of_mut!(_14);
_17.1 = _35.1;
_31 = _17.1 != _35.1;
_15.fld0.fld1.fld4 = (_15.fld0.fld1.fld2, _24.fld0);
_12.fld0.0.0.6 = _6 >> _27.2;
_12.fld0.0.0.6 = !_6;
Call(_29.1.1 = fn15(_17.0, _16, _19), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
_24.fld2 = _17.0 as isize;
Goto(bb15)
}
bb15 = {
Call(_39 = dump_var(3_usize, 6_usize, Move(_6), 31_usize, Move(_31), 28_usize, Move(_28), 25_usize, Move(_25)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_39 = dump_var(3_usize, 8_usize, Move(_8), 18_usize, Move(_18), 11_usize, Move(_11), 13_usize, Move(_13)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_39 = dump_var(3_usize, 22_usize, Move(_22), 5_usize, Move(_5), 40_usize, _40, 40_usize, _40), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn4(mut _1: char,mut _2: *const u64,mut _3: (((i128, isize, *mut u64, u16, u128, i8, i16, u32, u128), i8, char), usize),mut _4: i8,mut _5: i8,mut _6: ((i128, isize, *mut u64, u16, u128, i8, i16, u32, u128), i8, char),mut _7: i8,mut _8: (((i128, isize, *mut u64, u16, u128, i8, i16, u32, u128), i8, char), usize),mut _9: i8,mut _10: i8,mut _11: *const u64,mut _12: u16) -> i16 {
mir! {
type RET = i16;
let _13: char;
let _14: (i32, i128);
let _15: char;
let _16: (i8,);
let _17: f64;
let _18: char;
let _19: u32;
let _20: i128;
let _21: [u32; 8];
let _22: char;
let _23: *mut *mut i16;
let _24: *mut i16;
let _25: Adt57;
let _26: *const *const f64;
let _27: Adt61;
let _28: f64;
let _29: (i32, i128);
let _30: Adt61;
let _31: [bool; 1];
let _32: [u32; 6];
let _33: u16;
let _34: i8;
let _35: bool;
let _36: f64;
let _37: (u64, u128);
let _38: f64;
let _39: Adt56;
let _40: char;
let _41: ();
let _42: ();
{
(*_2) = 11072509431811213558_u64;
_2 = core::ptr::addr_of!((*_2));
_3.0.0.2 = core::ptr::addr_of_mut!((*_2));
RET = _8.0.0.7 as i16;
_4 = -_9;
_3.0.0.0 = _6.0.6 as i128;
_6.0.6 = _6.0.1 as i16;
_6.0 = (_3.0.0.0, _8.0.0.1, _8.0.0.2, _12, _8.0.0.4, _6.1, _8.0.0.6, _8.0.0.7, _8.0.0.4);
(*_2) = _4 as u64;
_6.0.6 = _8.0.0.6;
_6.0.3 = _12 / 48081_u16;
_6.0.3 = _7 as u16;
_1 = _8.0.2;
_13 = _1;
_8.0.2 = _3.0.2;
_8.0.0.0 = _3.0.0.0;
(*_2) = true as u64;
_8.0.0 = (_3.0.0.0, _3.0.0.1, _6.0.2, _12, _3.0.0.4, _3.0.0.5, _6.0.6, _6.0.7, _3.0.0.4);
_11 = _2;
_6.0.0 = _8.0.0.0 + _3.0.0.0;
_12 = _6.0.3;
RET = _6.0.6 * _6.0.6;
_6 = (_8.0.0, _8.0.1, _3.0.2);
_10 = !_9;
_8.0.0.2 = _6.0.2;
_8.1 = _3.1 - _3.1;
_4 = _5 | _3.0.1;
_3.0.0.5 = _5;
_6.0.5 = -_4;
_11 = core::ptr::addr_of!((*_2));
Call(_12 = fn5(_8.0.0.0, _6.0, _8.0, _3.0.0.1, _4, _6.0.4, _6.0.5, _3.0), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_6.0.0 = 188_u8 as i128;
(*_2) = !3416333026972215225_u64;
_13 = _3.0.2;
_11 = _2;
_16 = (_8.0.1,);
_6.2 = _3.0.2;
_8.0.0.7 = !_3.0.0.7;
Goto(bb2)
}
bb2 = {
RET = _8.0.0.6 << _3.0.0.7;
_8 = (_3.0, _3.1);
_8.0.0.1 = _3.0.0.1;
_6.0.2 = core::ptr::addr_of_mut!((*_11));
_5 = false as i8;
_8.0 = (_3.0.0, _7, _1);
_3.0.2 = _8.0.2;
_6.1 = true as i8;
_8.0.1 = !_16.0;
_3.0.0.3 = 1133304409_i32 as u16;
_8.0.0.2 = _6.0.2;
_7 = _10 * _16.0;
_15 = _13;
_21 = [_3.0.0.7,_3.0.0.7,_3.0.0.7,_3.0.0.7,_6.0.7,_8.0.0.7,_6.0.7,_6.0.7];
_16.0 = _7;
_15 = _6.2;
match _6.0.3 {
0 => bb1,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
6 => bb8,
21100 => bb10,
_ => bb9
}
}
bb3 = {
_6.0.0 = 188_u8 as i128;
(*_2) = !3416333026972215225_u64;
_13 = _3.0.2;
_11 = _2;
_16 = (_8.0.1,);
_6.2 = _3.0.2;
_8.0.0.7 = !_3.0.0.7;
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_3.0.0.4 = 750121029431148786_i64 as u128;
_18 = _8.0.2;
_8.0.1 = (*_11) as i8;
_6.1 = _3.0.0.0 as i8;
_8.0.0.2 = _6.0.2;
(*_2) = 5050255862079486281_u64 | 10855559118760195772_u64;
_16.0 = _8.0.0.0 as i8;
(*_11) = 8977743884457467776_u64 + 8246418540733824390_u64;
_14 = (1980802666_i32, _8.0.0.0);
_16 = (_7,);
_2 = core::ptr::addr_of!((*_2));
_1 = _18;
_8 = _3;
_11 = core::ptr::addr_of!((*_2));
_2 = _11;
RET = _6.0.6;
_16.0 = _3.0.0.3 as i8;
_13 = _15;
_25.fld1.1 = _14.1;
_22 = _1;
_25.fld0 = !true;
_6 = (_8.0.0, _9, _15);
_23 = core::ptr::addr_of_mut!(_24);
_25.fld1.0 = -_14.0;
Goto(bb11)
}
bb11 = {
(*_23) = core::ptr::addr_of_mut!(_25.fld5.0);
_6.1 = _4;
(*_24) = _8.0.0.8 as i16;
_8.0.0.7 = !_3.0.0.7;
_25.fld3 = (-5674913779115393470_i64) as i8;
Goto(bb12)
}
bb12 = {
_8.0.0.7 = _8.1 as u32;
_3.0.0.8 = _8.0.0.4 / 98946366079989475666804748669552880596_u128;
_14.0 = _25.fld1.0 ^ _25.fld1.0;
_24 = core::ptr::addr_of_mut!(_6.0.6);
_3.0.0.3 = _6.0.7 as u16;
_18 = _3.0.2;
_6.0 = (_14.1, _3.0.0.1, _3.0.0.2, _12, _8.0.0.4, _7, _3.0.0.6, _8.0.0.7, _8.0.0.4);
RET = _6.0.8 as i16;
_16.0 = _6.1 | _8.0.1;
_6.2 = _1;
_16.0 = _7 + _9;
_11 = _2;
_3.1 = _8.1;
_6.0.8 = _8.0.0.3 as u128;
_8 = _3;
_14.0 = _25.fld1.0;
_17 = _3.0.0.3 as f64;
_25.fld4 = [_25.fld0,_25.fld0,_25.fld0,_25.fld0];
_3.0.0.1 = _6.0.1;
_27.fld0.1 = [_25.fld1.0,_25.fld1.0,_14.0,_14.0,_14.0,_14.0];
_19 = 32_u8 as u32;
_29.1 = -_6.0.0;
_3.0.0 = _8.0.0;
_8.0.0.4 = _8.0.0.8 + _3.0.0.8;
_21 = [_8.0.0.7,_19,_6.0.7,_3.0.0.7,_8.0.0.7,_6.0.7,_6.0.7,_8.0.0.7];
Goto(bb13)
}
bb13 = {
_16.0 = _7;
_30.fld0.1 = [_25.fld1.0,_14.0,_14.0,_25.fld1.0,_25.fld1.0,_14.0];
_29.1 = _8.1 as i128;
_8.0.1 = _4;
_25.fld1 = (_14.0, _6.0.0);
_29.0 = _14.0;
_8.0.0.8 = _3.0.0.8;
_8.0.0.7 = _6.0.7 | _19;
_3.0.0.8 = _8.0.0.8 << _8.0.0.0;
_14.1 = -_25.fld1.1;
_27.fld0 = (_6.0.6, _30.fld0.1);
_6 = (_8.0.0, _4, _22);
_25.fld5.1 = [_29.0,_14.0,_14.0,_29.0,_25.fld1.0,_14.0];
_30.fld0.0 = (-5563866749627898985_i64) as i16;
_5 = _25.fld0 as i8;
_7 = _4 << _4;
_30 = Adt61 { fld0: _27.fld0 };
_33 = !_6.0.3;
_8.0.2 = _3.0.2;
(*_23) = core::ptr::addr_of_mut!((*_24));
_28 = -_17;
_27 = Adt61 { fld0: _30.fld0 };
_30 = Adt61 { fld0: _27.fld0 };
_10 = _3.0.1;
Goto(bb14)
}
bb14 = {
_12 = !_3.0.0.3;
_6.0.2 = core::ptr::addr_of_mut!((*_2));
_25.fld5.0 = _25.fld0 as i16;
_25.fld3 = !_3.0.1;
_8.0.0.3 = !_3.0.0.3;
Goto(bb15)
}
bb15 = {
Call(_41 = dump_var(4_usize, 29_usize, Move(_29), 5_usize, Move(_5), 7_usize, Move(_7), 33_usize, Move(_33)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_41 = dump_var(4_usize, 21_usize, Move(_21), 12_usize, Move(_12), 18_usize, Move(_18), 4_usize, Move(_4)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn5(mut _1: i128,mut _2: (i128, isize, *mut u64, u16, u128, i8, i16, u32, u128),mut _3: ((i128, isize, *mut u64, u16, u128, i8, i16, u32, u128), i8, char),mut _4: isize,mut _5: i8,mut _6: u128,mut _7: i8,mut _8: ((i128, isize, *mut u64, u16, u128, i8, i16, u32, u128), i8, char)) -> u16 {
mir! {
type RET = u16;
let _9: f64;
let _10: [u16; 8];
let _11: [bool; 1];
let _12: *const *mut u64;
let _13: *mut char;
let _14: char;
let _15: Adt60;
let _16: f64;
let _17: isize;
let _18: f32;
let _19: (i32, i128);
let _20: [u16; 8];
let _21: ();
let _22: ();
{
_2.4 = !_6;
_2.8 = _3.0.8;
_3.0.7 = _8.0.7 >> _2.4;
match _8.0.3 {
0 => bb1,
21100 => bb3,
_ => bb2
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
_3.0.0 = _1;
RET = _8.2 as u16;
_3.0.7 = _8.0.7 >> _1;
match _2.3 {
0 => bb4,
1 => bb5,
2 => bb6,
3 => bb7,
4 => bb8,
21100 => bb10,
_ => bb9
}
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_3.0.1 = _8.0.1;
_9 = (-104862209_i32) as f64;
_3.0.3 = _2.3;
_3 = (_2, _7, _8.2);
_7 = -_3.1;
_2.3 = !_8.0.3;
_3.0.5 = _3.1 >> _3.0.6;
_3.0.5 = !_5;
_8.0.2 = _3.0.2;
_8 = (_3.0, _2.5, _3.2);
Call(_8.0.6 = fn6(_7, _8.0.0, _3.0, _2.1, _3.0.6, _8.2, _3.0.3, _3.0.5, _8.0.1, _8.0.2, _4), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
Goto(bb12)
}
bb12 = {
_3.0.8 = true as u128;
_2.3 = !_8.0.3;
_2.1 = _2.0 as isize;
_8.0.0 = _3.0.3 as i128;
_8.1 = _3.0.7 as i8;
_3.0.4 = _2.4;
_8.0.1 = _2.3 as isize;
_6 = _3.0.8 & _8.0.4;
_2.8 = !_3.0.8;
_6 = _8.0.4;
_8.1 = _8.2 as i8;
RET = _8.0.3;
_8.0.1 = _3.0.1;
_16 = _2.6 as f64;
_8.0.6 = _3.0.6;
_3.0.4 = _8.0.4 % 10459915202235654599655835739435792964_u128;
_7 = !_3.0.5;
_15.fld3 = [_8.0.3,_2.3,_3.0.3,_3.0.3,_3.0.3,_2.3,_8.0.3,_8.0.3];
Goto(bb13)
}
bb13 = {
_10 = [_3.0.3,_3.0.3,_8.0.3,_2.3,_8.0.3,_8.0.3,_3.0.3,_3.0.3];
_13 = core::ptr::addr_of_mut!(_14);
_3.0.3 = 4_usize as u16;
_3.0.0 = _2.0;
_2.4 = _3.0.4 + _8.0.4;
_15.fld1 = _1;
_3 = (_2, _5, _8.2);
_15.fld0 = [17072284018020490775_u64,18234181892105577248_u64];
_3.0.8 = _9 as u128;
_15.fld4 = _2.6;
_2.3 = !_3.0.3;
_3.0.5 = _8.1 ^ _5;
_15.fld0 = [5958842392684507907_u64,14461190708527717292_u64];
_15.fld2 = core::ptr::addr_of!(_3.0.3);
match _8.0.3 {
0 => bb9,
1 => bb2,
2 => bb10,
3 => bb4,
4 => bb11,
5 => bb6,
21100 => bb14,
_ => bb7
}
}
bb14 = {
_15.fld0 = [13965702877575338921_u64,14988182078785129548_u64];
_8.0.5 = _3.0.3 as i8;
_8.0.1 = _3.0.1 & _2.1;
_3.0.3 = _2.3;
_8.0 = (_3.0.0, _2.1, _3.0.2, _3.0.3, _2.4, _3.1, _15.fld4, _2.7, _2.4);
_14 = _8.2;
_3.0.1 = _2.1 * _8.0.1;
_2.0 = _1 & _3.0.0;
_3.0.0 = !_2.0;
_8.0.8 = true as u128;
Goto(bb15)
}
bb15 = {
Call(_21 = dump_var(5_usize, 4_usize, Move(_4), 10_usize, Move(_10), 6_usize, Move(_6), 22_usize, _22), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn6(mut _1: i8,mut _2: i128,mut _3: (i128, isize, *mut u64, u16, u128, i8, i16, u32, u128),mut _4: isize,mut _5: i16,mut _6: char,mut _7: u16,mut _8: i8,mut _9: isize,mut _10: *mut u64,mut _11: isize) -> i16 {
mir! {
type RET = i16;
let _12: (i16, [i32; 6]);
let _13: Adt54;
let _14: [u32; 6];
let _15: char;
let _16: i32;
let _17: [bool; 4];
let _18: i32;
let _19: Adt56;
let _20: [bool; 4];
let _21: bool;
let _22: [u32; 6];
let _23: char;
let _24: (i128, isize, *mut u64, u16, u128, i8, i16, u32, u128);
let _25: (i16, [i32; 6]);
let _26: Adt57;
let _27: f64;
let _28: (u64, u128);
let _29: bool;
let _30: *const *const u64;
let _31: [i32; 6];
let _32: isize;
let _33: Adt63;
let _34: [u16; 8];
let _35: Adt52;
let _36: i128;
let _37: [bool; 4];
let _38: [u32; 8];
let _39: ((i128, isize, *mut u64, u16, u128, i8, i16, u32, u128), i8, char);
let _40: ();
let _41: ();
{
RET = _3.6;
_3.4 = !_3.8;
_2 = _3.0;
(*_10) = _8 as u64;
_4 = (*_10) as isize;
_3.5 = false as i8;
_3.4 = _3.8 % 329920930408282622315356389391305000204_u128;
_7 = _3.3 % 34556_u16;
_13.fld4.1 = 1757568031_i32 as f64;
_3.3 = _7;
_10 = core::ptr::addr_of_mut!((*_10));
_4 = false as isize;
_3.2 = core::ptr::addr_of_mut!((*_10));
_12.0 = _5;
_7 = _3.3;
_10 = core::ptr::addr_of_mut!((*_10));
_8 = _1 >> _5;
RET = 303131090_i32 as i16;
_9 = 10009723089205311072_usize as isize;
_12.1 = [1134924516_i32,1929177028_i32,1685094767_i32,(-1493514051_i32),(-817923891_i32),101225339_i32];
_13.fld2 = core::ptr::addr_of!((*_10));
_2 = _3.4 as i128;
_9 = (*_10) as isize;
Call(_12.0 = fn7(_8, _8, _3.7), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_3 = (_2, _9, _10, _7, 242455022850120004245148092940262894625_u128, _8, _5, 2028837633_u32, 233851100017127598053591412029878028945_u128);
_3.4 = _3.8 + _3.8;
_13.fld2 = core::ptr::addr_of!((*_10));
_10 = _3.2;
_13.fld4.0 = _13.fld2;
_2 = !_3.0;
_9 = 238_u8 as isize;
RET = -_12.0;
_8 = true as i8;
_13.fld1 = [_7,_7,_7,_7,_7,_7,_3.3,_7];
_3.4 = _3.8;
_3 = (_2, _11, _10, _7, 326807264072993301794536786194425461147_u128, _1, _12.0, 3677206756_u32, 211739811947191510966483975689822220545_u128);
_11 = _3.8 as isize;
_3.7 = !426899029_u32;
_11 = _3.1 * _3.1;
_13.fld1 = [_7,_7,_7,_7,_3.3,_7,_3.3,_7];
_13.fld4.0 = core::ptr::addr_of!((*_10));
_15 = _6;
_14 = [_3.7,_3.7,_3.7,_3.7,_3.7,_3.7];
_3.0 = _2;
_11 = _4 - _3.1;
_3 = (_2, _11, _10, _7, 272777871046405635711413280857891784554_u128, _1, _5, 3593957428_u32, 80413051275807350498038699731526189050_u128);
_3.5 = _3.4 as i8;
_3.0 = 4_usize as i128;
_3.8 = 16_u8 as u128;
RET = -_5;
Call(_7 = core::intrinsics::bswap(_3.3), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_15 = _6;
_2 = _3.0;
_5 = !_3.6;
_17 = [true,false,true,false];
_13.fld4.1 = _3.3 as f64;
_3.4 = _3.8;
_14 = [_3.7,_3.7,_3.7,_3.7,_3.7,_3.7];
(*_10) = 4743150344368301263_u64 % 17670422287902838485_u64;
_15 = _6;
_3.4 = _3.8 + _3.8;
_3.5 = _3.7 as i8;
_8 = -_3.5;
_12.1 = [(-1225276241_i32),1477693944_i32,(-22806090_i32),1996142044_i32,(-1425372393_i32),389441252_i32];
_18 = 1136120713_i32 - 84602381_i32;
_4 = !_9;
_12.1 = [_18,_18,_18,_18,_18,_18];
_18 = (-2812615600186169811_i64) as i32;
_7 = _3.3;
_3.0 = _2 + _2;
_8 = _3.5 & _3.5;
_9 = _3.1 & _3.1;
_12.1 = [_18,_18,_18,_18,_18,_18];
_11 = _9;
_3.1 = _7 as isize;
_12.1 = [_18,_18,_18,_18,_18,_18];
_18 = !1221405507_i32;
Goto(bb3)
}
bb3 = {
_7 = !_3.3;
_13.fld4.0 = _13.fld2;
RET = _2 as i16;
_2 = _3.0 ^ _3.0;
_12.0 = !_5;
_19 = Adt56 { fld0: _3.0,fld1: _5 };
_5 = !_3.6;
_20 = [true,true,true,false];
_3.5 = _8;
_3.0 = _3.5 as i128;
_15 = _6;
match _3.7 {
0 => bb4,
1 => bb5,
3593957428 => bb7,
_ => bb6
}
}
bb4 = {
_15 = _6;
_2 = _3.0;
_5 = !_3.6;
_17 = [true,false,true,false];
_13.fld4.1 = _3.3 as f64;
_3.4 = _3.8;
_14 = [_3.7,_3.7,_3.7,_3.7,_3.7,_3.7];
(*_10) = 4743150344368301263_u64 % 17670422287902838485_u64;
_15 = _6;
_3.4 = _3.8 + _3.8;
_3.5 = _3.7 as i8;
_8 = -_3.5;
_12.1 = [(-1225276241_i32),1477693944_i32,(-22806090_i32),1996142044_i32,(-1425372393_i32),389441252_i32];
_18 = 1136120713_i32 - 84602381_i32;
_4 = !_9;
_12.1 = [_18,_18,_18,_18,_18,_18];
_18 = (-2812615600186169811_i64) as i32;
_7 = _3.3;
_3.0 = _2 + _2;
_8 = _3.5 & _3.5;
_9 = _3.1 & _3.1;
_12.1 = [_18,_18,_18,_18,_18,_18];
_11 = _9;
_3.1 = _7 as isize;
_12.1 = [_18,_18,_18,_18,_18,_18];
_18 = !1221405507_i32;
Goto(bb3)
}
bb5 = {
_3 = (_2, _9, _10, _7, 242455022850120004245148092940262894625_u128, _8, _5, 2028837633_u32, 233851100017127598053591412029878028945_u128);
_3.4 = _3.8 + _3.8;
_13.fld2 = core::ptr::addr_of!((*_10));
_10 = _3.2;
_13.fld4.0 = _13.fld2;
_2 = !_3.0;
_9 = 238_u8 as isize;
RET = -_12.0;
_8 = true as i8;
_13.fld1 = [_7,_7,_7,_7,_7,_7,_3.3,_7];
_3.4 = _3.8;
_3 = (_2, _11, _10, _7, 326807264072993301794536786194425461147_u128, _1, _12.0, 3677206756_u32, 211739811947191510966483975689822220545_u128);
_11 = _3.8 as isize;
_3.7 = !426899029_u32;
_11 = _3.1 * _3.1;
_13.fld1 = [_7,_7,_7,_7,_3.3,_7,_3.3,_7];
_13.fld4.0 = core::ptr::addr_of!((*_10));
_15 = _6;
_14 = [_3.7,_3.7,_3.7,_3.7,_3.7,_3.7];
_3.0 = _2;
_11 = _4 - _3.1;
_3 = (_2, _11, _10, _7, 272777871046405635711413280857891784554_u128, _1, _5, 3593957428_u32, 80413051275807350498038699731526189050_u128);
_3.5 = _3.4 as i8;
_3.0 = 4_usize as i128;
_3.8 = 16_u8 as u128;
RET = -_5;
Call(_7 = core::intrinsics::bswap(_3.3), ReturnTo(bb2), UnwindUnreachable())
}
bb6 = {
Return()
}
bb7 = {
_10 = core::ptr::addr_of_mut!((*_10));
_13.fld2 = core::ptr::addr_of!((*_10));
_13.fld2 = core::ptr::addr_of!((*_10));
_2 = _3.0 >> _8;
_18 = 890285903_i32 + (-1278829062_i32);
_3 = (_2, _9, _10, _7, 116690724533861214641708254384620881508_u128, _8, _19.fld1, 4120069490_u32, 294023912799885854435942855179286302128_u128);
_5 = (*_10) as i16;
_13.fld4.0 = core::ptr::addr_of!((*_10));
_23 = _15;
_6 = _23;
_24 = _3;
_3.3 = _8 as u16;
_12.1 = [_18,_18,_18,_18,_18,_18];
_21 = false;
_5 = _24.6 * _3.6;
_16 = _18 | _18;
_22 = [_24.7,_24.7,_24.7,_24.7,_24.7,_3.7];
(*_10) = 6456977815073260338_u64 << _24.8;
_16 = -_18;
_2 = _24.0;
_3.4 = _24.4;
_12.1 = [_18,_16,_16,_16,_18,_18];
_22 = [_24.7,_24.7,_3.7,_24.7,_3.7,_3.7];
_3.1 = _11;
_13.fld4.0 = _13.fld2;
_13.fld2 = core::ptr::addr_of!((*_10));
_3 = (_2, _24.1, _10, _7, _24.8, _24.5, _5, _24.7, _24.8);
match _3.4 {
0 => bb1,
1 => bb2,
294023912799885854435942855179286302128 => bb8,
_ => bb5
}
}
bb8 = {
_26.fld4 = [_21,_21,_21,_21];
_26.fld5.1 = _12.1;
_2 = _24.0 * _24.0;
_27 = _13.fld4.1 - _13.fld4.1;
RET = 77_u8 as i16;
_26.fld1.0 = -_18;
_3.4 = _24.4 * _24.4;
_12 = (_5, _26.fld5.1);
_24.1 = (*_10) as isize;
_28.0 = (*_10);
_24.3 = !_3.3;
_25 = (_5, _12.1);
Call(_24.3 = core::intrinsics::bswap(_3.3), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
_18 = _24.7 as i32;
_3.3 = !_7;
_3 = _24;
RET = -_5;
_26.fld4 = [_21,_21,_21,_21];
_26.fld5.0 = _12.0 * _25.0;
_29 = !_21;
_12.0 = _3.6 | _3.6;
_2 = _15 as i128;
_16 = _24.0 as i32;
_19.fld0 = -_24.0;
_13.fld2 = _13.fld4.0;
_7 = _24.3 | _24.3;
match _3.4 {
116690724533861214641708254384620881508 => bb11,
_ => bb10
}
}
bb10 = {
_15 = _6;
_2 = _3.0;
_5 = !_3.6;
_17 = [true,false,true,false];
_13.fld4.1 = _3.3 as f64;
_3.4 = _3.8;
_14 = [_3.7,_3.7,_3.7,_3.7,_3.7,_3.7];
(*_10) = 4743150344368301263_u64 % 17670422287902838485_u64;
_15 = _6;
_3.4 = _3.8 + _3.8;
_3.5 = _3.7 as i8;
_8 = -_3.5;
_12.1 = [(-1225276241_i32),1477693944_i32,(-22806090_i32),1996142044_i32,(-1425372393_i32),389441252_i32];
_18 = 1136120713_i32 - 84602381_i32;
_4 = !_9;
_12.1 = [_18,_18,_18,_18,_18,_18];
_18 = (-2812615600186169811_i64) as i32;
_7 = _3.3;
_3.0 = _2 + _2;
_8 = _3.5 & _3.5;
_9 = _3.1 & _3.1;
_12.1 = [_18,_18,_18,_18,_18,_18];
_11 = _9;
_3.1 = _7 as isize;
_12.1 = [_18,_18,_18,_18,_18,_18];
_18 = !1221405507_i32;
Goto(bb3)
}
bb11 = {
_3 = _24;
_13.fld4.0 = core::ptr::addr_of!((*_10));
_10 = core::ptr::addr_of_mut!((*_10));
_1 = _24.5 >> _24.8;
_15 = _6;
_3.2 = core::ptr::addr_of_mut!(_28.0);
_24.6 = _3.6 << _3.8;
_28.1 = !_24.4;
_33.fld4 = (_24, _24.5, _23);
_24.2 = core::ptr::addr_of_mut!(_28.0);
_33.fld5 = [_29];
_19.fld0 = _3.0 >> _3.1;
_33.fld2.fld6.0 = (*_10) % 8814759277211536086_u64;
_33.fld0.fld0 = (_33.fld4.0.6, _26.fld5.1);
_28.0 = !_33.fld2.fld6.0;
_10 = _24.2;
_33.fld2.fld0.1.8 = _33.fld4.0.8;
_33.fld2.fld0.0 = _13.fld2;
_15 = _33.fld4.2;
_24.2 = core::ptr::addr_of_mut!((*_10));
_30 = core::ptr::addr_of!(_33.fld2.fld0.0);
_26.fld0 = !_29;
_33.fld2.fld0.1 = _3;
match _33.fld2.fld0.1.4 {
116690724533861214641708254384620881508 => bb13,
_ => bb12
}
}
bb12 = {
_26.fld4 = [_21,_21,_21,_21];
_26.fld5.1 = _12.1;
_2 = _24.0 * _24.0;
_27 = _13.fld4.1 - _13.fld4.1;
RET = 77_u8 as i16;
_26.fld1.0 = -_18;
_3.4 = _24.4 * _24.4;
_12 = (_5, _26.fld5.1);
_24.1 = (*_10) as isize;
_28.0 = (*_10);
_24.3 = !_3.3;
_25 = (_5, _12.1);
Call(_24.3 = core::intrinsics::bswap(_3.3), ReturnTo(bb9), UnwindUnreachable())
}
bb13 = {
_26.fld1.1 = -_33.fld4.0.0;
match _24.4 {
116690724533861214641708254384620881508 => bb15,
_ => bb14
}
}
bb14 = {
Return()
}
bb15 = {
_3.6 = _29 as i16;
_35.fld1.0 = core::ptr::addr_of_mut!(_15);
_33.fld2.fld0.1.8 = _33.fld2.fld0.1.4;
_33.fld4.0.8 = _33.fld2.fld0.1.8 & _3.4;
_24.3 = _7 >> _3.1;
_37 = [_21,_21,_29,_26.fld0];
Goto(bb16)
}
bb16 = {
Call(_40 = dump_var(6_usize, 16_usize, Move(_16), 12_usize, Move(_12), 9_usize, Move(_9), 18_usize, Move(_18)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_40 = dump_var(6_usize, 15_usize, Move(_15), 8_usize, Move(_8), 5_usize, Move(_5), 7_usize, Move(_7)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_40 = dump_var(6_usize, 6_usize, Move(_6), 4_usize, Move(_4), 28_usize, Move(_28), 41_usize, _41), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn7(mut _1: i8,mut _2: i8,mut _3: u32) -> i16 {
mir! {
type RET = i16;
let _4: bool;
let _5: isize;
let _6: u8;
let _7: f64;
let _8: isize;
let _9: Adt61;
let _10: char;
let _11: i8;
let _12: isize;
let _13: (i16, [i32; 6]);
let _14: Adt62;
let _15: (i32, i128);
let _16: [bool; 1];
let _17: f32;
let _18: isize;
let _19: [u32; 6];
let _20: isize;
let _21: u8;
let _22: ();
let _23: ();
{
_3 = 5250120_u32 | 258077406_u32;
RET = 8829976162864251680_u64 as i16;
_4 = _1 <= _1;
RET = (-4511_i16);
_1 = _2;
RET = 1_usize as i16;
_2 = !_1;
_5 = (-9223372036854775808_isize);
_3 = !1079920432_u32;
_5 = !(-9223372036854775808_isize);
RET = (-2184_i16);
_3 = 279172718_u32;
_5 = 6_isize;
_4 = _2 < _2;
_3 = 2106118562_u32 | 4180268375_u32;
_5 = (-23127_i16) as isize;
_3 = _1 as u32;
_5 = 9223372036854775807_isize * (-51_isize);
_7 = 6857_u16 as f64;
_5 = 9223372036854775807_isize;
Goto(bb1)
}
bb1 = {
match _5 {
0 => bb2,
9223372036854775807 => bb4,
_ => bb3
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
_6 = 46_u8 / 234_u8;
_4 = !true;
_9.fld0.0 = !31515_i16;
RET = '\u{42024}' as i16;
_4 = false;
_4 = true;
_9.fld0.1 = [1015684265_i32,1251869945_i32,1103111000_i32,(-399255569_i32),1771960611_i32,(-925279680_i32)];
_11 = _2 - _2;
_8 = _5 ^ _5;
_10 = '\u{6defc}';
Call(_3 = core::intrinsics::transmute(_10), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
_12 = _5 * _8;
_9.fld0.0 = _6 as i16;
_10 = '\u{e52b5}';
_9.fld0.0 = -30617_i16;
_9.fld0.1 = [(-780539691_i32),1880627642_i32,1049942105_i32,(-1169330387_i32),(-1494398398_i32),(-1828851297_i32)];
_3 = _6 as u32;
_12 = _5 + _5;
_9.fld0.0 = 20910_i16;
_8 = _10 as isize;
_1 = _11;
_11 = _2 << _2;
_5 = _12 ^ _12;
_9.fld0.0 = (-20096_i16);
_10 = '\u{b273b}';
_11 = !_2;
_2 = _1;
_3 = !1262248182_u32;
_2 = !_11;
_13.0 = _9.fld0.0 << _1;
_14.fld0 = Adt61 { fld0: _9.fld0 };
_14.fld2.fld3.fld3 = _1;
_3 = 3211574846_u32;
_14.fld0.fld0.1 = [1638341148_i32,1011646473_i32,(-377796699_i32),207069070_i32,(-1645969844_i32),(-1955422588_i32)];
match _14.fld0.fld0.0 {
0 => bb1,
1 => bb2,
2 => bb6,
340282366920938463463374607431768191360 => bb8,
_ => bb7
}
}
bb6 = {
_6 = 46_u8 / 234_u8;
_4 = !true;
_9.fld0.0 = !31515_i16;
RET = '\u{42024}' as i16;
_4 = false;
_4 = true;
_9.fld0.1 = [1015684265_i32,1251869945_i32,1103111000_i32,(-399255569_i32),1771960611_i32,(-925279680_i32)];
_11 = _2 - _2;
_8 = _5 ^ _5;
_10 = '\u{6defc}';
Call(_3 = core::intrinsics::transmute(_10), ReturnTo(bb5), UnwindUnreachable())
}
bb7 = {
Return()
}
bb8 = {
_14.fld2.fld0.1.1 = -_12;
_14.fld2.fld3.fld1 = ((-1980747705_i32), (-158654763065802866860846104510235675675_i128));
Goto(bb9)
}
bb9 = {
_12 = -_5;
_14.fld0.fld0.1 = _9.fld0.1;
_5 = _12;
_14.fld2.fld0.1.4 = !198023703202349711732813590206534305788_u128;
_14.fld2.fld0.1.0 = _14.fld2.fld3.fld1.1;
_14.fld2.fld1.fld1 = 4_usize as i16;
_14.fld2.fld1.fld0 = _14.fld2.fld0.1.0 ^ _14.fld2.fld0.1.0;
_14.fld2.fld0.1.0 = _14.fld2.fld3.fld1.1 >> _2;
_1 = _14.fld2.fld3.fld3;
_4 = !false;
_14.fld2.fld0.1.4 = !259273388108004363531657890324635089086_u128;
_14.fld1.0 = _13.0;
_13 = _14.fld0.fld0;
_14.fld2.fld6.0 = _6 as u64;
_14.fld2.fld0.3 = core::ptr::addr_of!(_14.fld2.fld6.0);
_14.fld2.fld1 = Adt56 { fld0: _14.fld2.fld0.1.0,fld1: _14.fld1.0 };
_14.fld2.fld0.1.7 = !_3;
Call(_14.fld2.fld0.2.0 = fn8(_14.fld2.fld3.fld1.1, _9.fld0.0, _14.fld2.fld0.1.4, _14.fld2.fld1, _7, _3, _3, _14.fld2.fld1, _14.fld2.fld1.fld1, _14.fld2.fld6.0, _8, _9.fld0.1, _9.fld0.0, _14.fld2.fld3.fld1.1, _12, _13.1), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_2 = 6_usize as i8;
_14.fld2.fld0.0 = core::ptr::addr_of!(_14.fld2.fld6.0);
_14.fld0.fld0.0 = _14.fld2.fld1.fld1 | _14.fld2.fld1.fld1;
_14.fld2.fld3.fld4 = [_4,_4,_4,_4];
_4 = true;
match _14.fld2.fld3.fld1.1 {
0 => bb9,
1 => bb6,
2 => bb11,
3 => bb12,
181627603855135596602528502921532535781 => bb14,
_ => bb13
}
}
bb11 = {
_12 = -_5;
_14.fld0.fld0.1 = _9.fld0.1;
_5 = _12;
_14.fld2.fld0.1.4 = !198023703202349711732813590206534305788_u128;
_14.fld2.fld0.1.0 = _14.fld2.fld3.fld1.1;
_14.fld2.fld1.fld1 = 4_usize as i16;
_14.fld2.fld1.fld0 = _14.fld2.fld0.1.0 ^ _14.fld2.fld0.1.0;
_14.fld2.fld0.1.0 = _14.fld2.fld3.fld1.1 >> _2;
_1 = _14.fld2.fld3.fld3;
_4 = !false;
_14.fld2.fld0.1.4 = !259273388108004363531657890324635089086_u128;
_14.fld1.0 = _13.0;
_13 = _14.fld0.fld0;
_14.fld2.fld6.0 = _6 as u64;
_14.fld2.fld0.3 = core::ptr::addr_of!(_14.fld2.fld6.0);
_14.fld2.fld1 = Adt56 { fld0: _14.fld2.fld0.1.0,fld1: _14.fld1.0 };
_14.fld2.fld0.1.7 = !_3;
Call(_14.fld2.fld0.2.0 = fn8(_14.fld2.fld3.fld1.1, _9.fld0.0, _14.fld2.fld0.1.4, _14.fld2.fld1, _7, _3, _3, _14.fld2.fld1, _14.fld2.fld1.fld1, _14.fld2.fld6.0, _8, _9.fld0.1, _9.fld0.0, _14.fld2.fld3.fld1.1, _12, _13.1), ReturnTo(bb10), UnwindUnreachable())
}
bb12 = {
Return()
}
bb13 = {
_6 = 46_u8 / 234_u8;
_4 = !true;
_9.fld0.0 = !31515_i16;
RET = '\u{42024}' as i16;
_4 = false;
_4 = true;
_9.fld0.1 = [1015684265_i32,1251869945_i32,1103111000_i32,(-399255569_i32),1771960611_i32,(-925279680_i32)];
_11 = _2 - _2;
_8 = _5 ^ _5;
_10 = '\u{6defc}';
Call(_3 = core::intrinsics::transmute(_10), ReturnTo(bb5), UnwindUnreachable())
}
bb14 = {
_14.fld2.fld6.0 = 7892954000284233872_u64 | 143593358961216731_u64;
_14.fld2.fld0.1.3 = !59360_u16;
_14.fld0.fld0.0 = -_14.fld2.fld1.fld1;
_19 = [_3,_14.fld2.fld0.1.7,_14.fld2.fld0.1.7,_14.fld2.fld0.1.7,_14.fld2.fld0.1.7,_3];
_14.fld2.fld0.1.2 = core::ptr::addr_of_mut!(_14.fld2.fld6.0);
_13.0 = _14.fld1.0 ^ _9.fld0.0;
_14.fld2.fld0.1.5 = _11 * _1;
_17 = _11 as f32;
_14.fld2.fld1 = Adt56 { fld0: _14.fld2.fld0.1.0,fld1: _13.0 };
_14.fld2.fld0.1.1 = _6 as isize;
_9.fld0.0 = _14.fld2.fld1.fld1;
_20 = _12 << _14.fld1.0;
_20 = _12;
_17 = _14.fld2.fld6.0 as f32;
_14.fld2.fld0.1.8 = _14.fld2.fld0.1.4;
Goto(bb15)
}
bb15 = {
Call(_22 = dump_var(7_usize, 10_usize, Move(_10), 20_usize, Move(_20), 13_usize, Move(_13), 19_usize, Move(_19)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_22 = dump_var(7_usize, 11_usize, Move(_11), 1_usize, Move(_1), 23_usize, _23, 23_usize, _23), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn8(mut _1: i128,mut _2: i16,mut _3: u128,mut _4: Adt56,mut _5: f64,mut _6: u32,mut _7: u32,mut _8: Adt56,mut _9: i16,mut _10: u64,mut _11: isize,mut _12: [i32; 6],mut _13: i16,mut _14: i128,mut _15: isize,mut _16: [i32; 6]) -> *mut char {
mir! {
type RET = *mut char;
let _17: (u64, u128);
let _18: (u64, u128);
let _19: *const u64;
let _20: char;
let _21: [u64; 2];
let _22: f64;
let _23: i16;
let _24: f64;
let _25: Adt54;
let _26: i32;
let _27: [u16; 8];
let _28: *mut i16;
let _29: (i16, [i32; 6]);
let _30: isize;
let _31: *mut *mut i16;
let _32: [i32; 6];
let _33: u16;
let _34: *mut i16;
let _35: u64;
let _36: [i32; 6];
let _37: isize;
let _38: bool;
let _39: *const *mut u64;
let _40: Adt56;
let _41: (u64,);
let _42: [u16; 8];
let _43: i16;
let _44: i128;
let _45: ();
let _46: ();
{
_10 = !9023630137125230247_u64;
match _6 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb5,
5 => bb6,
3211574846 => bb8,
_ => bb7
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_11 = _15 - _15;
_18.0 = !_10;
_13 = 0_usize as i16;
_17 = (_10, _3);
_5 = _17.1 as f64;
_7 = _6 ^ _6;
_2 = true as i16;
_19 = core::ptr::addr_of!(_10);
RET = core::ptr::addr_of_mut!(_20);
_12 = [(-609646513_i32),(-166089509_i32),1268611499_i32,1380312163_i32,1354969895_i32,2030999816_i32];
_17.1 = _3;
_22 = _5;
_17.1 = !_3;
_15 = !_11;
_24 = _22;
RET = core::ptr::addr_of_mut!(_20);
_20 = '\u{7b528}';
_18 = ((*_19), _17.1);
_8.fld0 = _4.fld0;
_21 = [_10,_17.0];
Call((*_19) = fn9(_17.1, _12, _17.0), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
_22 = _5 * _24;
_14 = _1 & _4.fld0;
_8 = Adt56 { fld0: _14,fld1: _9 };
(*RET) = '\u{4113d}';
_4.fld1 = _8.fld1 & _8.fld1;
_4 = _8;
(*_19) = _17.0;
Goto(bb10)
}
bb10 = {
_25.fld4.0 = _19;
_25.fld4.1 = -_22;
(*_19) = _18.0 ^ _17.0;
_27 = [19255_u16,47887_u16,51027_u16,41431_u16,64647_u16,2848_u16,52936_u16,31099_u16];
_10 = _4.fld1 as u64;
_18.0 = _8.fld1 as u64;
_8.fld1 = _5 as i16;
_21 = [(*_19),(*_19)];
_25.fld4.0 = _19;
_5 = _22 * _25.fld4.1;
_4.fld0 = (*RET) as i128;
_23 = _4.fld1;
_8.fld1 = _6 as i16;
(*RET) = '\u{fbed0}';
_18 = _17;
_4 = Adt56 { fld0: _8.fld0,fld1: _23 };
_4.fld1 = -_23;
_20 = '\u{424ec}';
_1 = _18.1 as i128;
_17 = _18;
_8.fld1 = _4.fld1 - _9;
_18.1 = (*RET) as u128;
_26 = _5 as i32;
_28 = core::ptr::addr_of_mut!(_2);
_25.fld2 = core::ptr::addr_of!((*_19));
_17.1 = _25.fld4.1 as u128;
_9 = !_23;
(*RET) = '\u{96e4e}';
Call(_2 = fn11(_11, _23, _6, _19, _23, _23, _6, _4.fld0, _21, _18, (*RET), _5), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_8.fld1 = _2 | (*_28);
(*_28) = _8.fld1;
_8 = _4;
_18.0 = !(*_19);
_18.0 = _7 as u64;
_13 = (*_28) + (*_28);
_11 = (-65_i8) as isize;
_3 = _17.1;
_29 = (_13, _12);
_22 = _17.1 as f64;
_4.fld1 = _2;
_3 = _17.1;
_20 = '\u{18a20}';
_8.fld1 = !_4.fld1;
_25.fld1 = [10143_u16,61343_u16,32714_u16,9995_u16,28075_u16,30168_u16,35085_u16,62247_u16];
_10 = _18.0;
(*_19) = !_18.0;
_19 = core::ptr::addr_of!((*_19));
RET = core::ptr::addr_of_mut!((*RET));
_19 = _25.fld4.0;
Goto(bb12)
}
bb12 = {
_18 = _17;
_8.fld1 = _5 as i16;
_1 = _8.fld0 | _14;
_17.0 = !(*_19);
_8.fld1 = _23;
_33 = _15 as u16;
_12 = [_26,_26,_26,_26,_26,_26];
_12 = _16;
_2 = !_4.fld1;
_26 = (-17_i8) as i32;
_28 = core::ptr::addr_of_mut!(_2);
_8.fld0 = !_1;
_20 = '\u{11e23}';
_25.fld4.0 = core::ptr::addr_of!((*_19));
_29.0 = _4.fld1;
RET = core::ptr::addr_of_mut!((*RET));
_35 = !_10;
_36 = _12;
_10 = _17.0;
_30 = _33 as isize;
_17.1 = _3 + _18.1;
Goto(bb13)
}
bb13 = {
_36 = _29.1;
match _6 {
0 => bb10,
1 => bb2,
2 => bb3,
3 => bb12,
3211574846 => bb14,
_ => bb5
}
}
bb14 = {
_29 = (_23, _12);
RET = core::ptr::addr_of_mut!(_20);
(*RET) = '\u{c9ffb}';
(*RET) = '\u{ed33a}';
_3 = _18.1;
_25.fld4.0 = _19;
_11 = _30 | _30;
_4.fld1 = _33 as i16;
_37 = _15 >> _2;
_17 = ((*_19), _18.1);
(*RET) = '\u{b910e}';
_17.1 = _3 + _3;
_7 = _6 % 755452768_u32;
_35 = !_10;
_18 = (_10, _17.1);
_31 = core::ptr::addr_of_mut!(_34);
_2 = !_13;
_36 = [_26,_26,_26,_26,_26,_26];
_34 = core::ptr::addr_of_mut!(_29.0);
_32 = [_26,_26,_26,_26,_26,_26];
_36 = _16;
_41 = (_35,);
Goto(bb15)
}
bb15 = {
Call(_45 = dump_var(8_usize, 10_usize, Move(_10), 2_usize, Move(_2), 13_usize, Move(_13), 37_usize, Move(_37)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_45 = dump_var(8_usize, 27_usize, Move(_27), 7_usize, Move(_7), 9_usize, Move(_9), 14_usize, Move(_14)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_45 = dump_var(8_usize, 35_usize, Move(_35), 33_usize, Move(_33), 18_usize, Move(_18), 36_usize, Move(_36)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_45 = dump_var(8_usize, 30_usize, Move(_30), 11_usize, Move(_11), 46_usize, _46, 46_usize, _46), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn9(mut _1: u128,mut _2: [i32; 6],mut _3: u64) -> u64 {
mir! {
type RET = u64;
let _4: (i8,);
let _5: isize;
let _6: *const u64;
let _7: Adt61;
let _8: f32;
let _9: [u32; 8];
let _10: isize;
let _11: isize;
let _12: f64;
let _13: u32;
let _14: (*const u64, (i128, isize, *mut u64, u16, u128, i8, i16, u32, u128), (*mut char,), *const u64);
let _15: i64;
let _16: [bool; 4];
let _17: Adt51;
let _18: isize;
let _19: isize;
let _20: (u64,);
let _21: f32;
let _22: (u64, u128);
let _23: *mut *mut i16;
let _24: u16;
let _25: [bool; 1];
let _26: Adt56;
let _27: ();
let _28: ();
{
_3 = !12011301644029303137_u64;
RET = _3 & _3;
_2 = [472987126_i32,877506507_i32,(-1044130746_i32),1777560919_i32,(-1224155903_i32),630929495_i32];
_1 = 69155012728145907047442824434198277476_u128 / 166560998634321944792776734869281508001_u128;
_2 = [1401590364_i32,1253326757_i32,1509412750_i32,(-2089859875_i32),499342618_i32,(-310520529_i32)];
_1 = !338332047937204146162907541688553172819_u128;
RET = _3;
_2 = [(-1793563600_i32),2020579263_i32,(-530156527_i32),(-604642896_i32),(-1814437012_i32),(-1592354819_i32)];
_1 = 299930952760044426029646884342104157183_u128;
RET = 1624264294_u32 as u64;
_2 = [(-749529228_i32),(-1997373773_i32),(-1535098175_i32),478174050_i32,(-36613923_i32),(-512459893_i32)];
_1 = 78615863614675563447916986770038798095_u128 + 70954816941535495347296771853100051167_u128;
_6 = core::ptr::addr_of!(_3);
RET = _3 - (*_6);
RET = (*_6);
RET = _3;
_7.fld0 = ((-2489_i16), _2);
(*_6) = 3263663364517818501_u64 & 3225181374421839638_u64;
Call(_8 = fn10(_6, (*_6), _1, _6, _6, _7.fld0, _6, _6, _7.fld0.1, _3, _6), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_2 = _7.fld0.1;
_4 = ((-9_i8),);
_7.fld0.1 = _2;
_7.fld0 = (6012_i16, _2);
Goto(bb2)
}
bb2 = {
_9 = [1205429401_u32,2187334028_u32,2752809303_u32,3581503359_u32,3689546098_u32,2564586617_u32,2865218849_u32,3283292406_u32];
_1 = 144588439760936257807974264229417176094_u128;
_10 = -(-122_isize);
_7.fld0.1 = [(-683790870_i32),1971379801_i32,181212810_i32,(-371331142_i32),88734648_i32,1407485459_i32];
_4 = ((-115_i8),);
_3 = 33709_u16 as u64;
_4 = (54_i8,);
_7.fld0.1 = [(-1017994522_i32),1814102742_i32,(-1839240856_i32),215113488_i32,967994303_i32,1864132593_i32];
_7.fld0 = ((-980_i16), _2);
_4 = ((-115_i8),);
_4 = (91_i8,);
_8 = 20_u8 as f32;
_12 = 131211157808131133140852330439920221628_i128 as f64;
_3 = !5077250855135702440_u64;
RET = (*_6) * (*_6);
_10 = -9223372036854775807_isize;
_14.1.6 = -_7.fld0.0;
Call(_11 = core::intrinsics::transmute(_10), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
(*_6) = !1003734661731771534_u64;
_14.1.0 = !31002903185786462929041185726174422637_i128;
_14.1.3 = _10 as u16;
_2 = _7.fld0.1;
Goto(bb4)
}
bb4 = {
_2 = _7.fld0.1;
_13 = 201426976_u32;
_14.1.4 = !_1;
Goto(bb5)
}
bb5 = {
_5 = -_11;
_14.3 = _6;
_15 = !(-3922585136062926699_i64);
_17.fld2 = _14.1.3 as isize;
_4 = (66_i8,);
_11 = _17.fld2;
_10 = -_11;
(*_6) = 3422934080369980334_u64;
_17.fld1 = _9;
_8 = _17.fld2 as f32;
_7.fld0.0 = _14.1.6;
_17 = Adt51 { fld0: _12,fld1: _9,fld2: _10 };
RET = !(*_6);
_18 = _12 as isize;
_5 = !_18;
_7.fld0.0 = _14.1.6 * _14.1.6;
_17 = Adt51 { fld0: _12,fld1: _9,fld2: _11 };
_14.3 = core::ptr::addr_of!(_3);
_8 = _14.1.0 as f32;
_15 = (-5931262699433633406_i64) - (-6720108161891261718_i64);
Goto(bb6)
}
bb6 = {
_16 = [true,true,true,false];
_18 = !_10;
(*_6) = !5367777120912570443_u64;
_17.fld0 = _10 as f64;
_17.fld2 = -_11;
_15 = (-889132431_i32) as i64;
_8 = 14135008753022326120_usize as f32;
_14.1.8 = _14.1.4;
_20.0 = _17.fld0 as u64;
_14.3 = _6;
_14.1.7 = _13;
_14.1.0 = -163270247664051033464679587315961975052_i128;
_14.1.4 = _1;
_1 = !_14.1.8;
_14.1.1 = _18 | _5;
_14.3 = _6;
_14.1.4 = (*_6) as u128;
_7.fld0.1 = [(-1689592467_i32),(-1493660382_i32),831740716_i32,(-371691501_i32),(-468661993_i32),462309365_i32];
_14.1.2 = core::ptr::addr_of_mut!(_3);
Call(_14.1.6 = core::intrinsics::bswap(_7.fld0.0), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
_17.fld0 = -_12;
_14.1.3 = _13 as u16;
_19 = 1_usize as isize;
_20.0 = _3 << _7.fld0.0;
_4.0 = -(-90_i8);
_16 = [true,true,false,true];
_22.1 = _1;
_14.1.5 = _4.0 >> _7.fld0.0;
_22 = (_20.0, _14.1.4);
RET = !_22.0;
_17.fld2 = _14.1.1 * _18;
(*_6) = _20.0 | _22.0;
_1 = _14.1.8 & _14.1.4;
_6 = core::ptr::addr_of!(_3);
_21 = _8;
_21 = -_8;
_16 = [true,true,true,true];
_14.1.8 = _7.fld0.0 as u128;
_22.1 = _14.1.8 + _14.1.8;
_24 = _14.1.3;
_4 = (_14.1.5,);
_1 = _22.1 + _14.1.8;
_14.0 = core::ptr::addr_of!(_22.0);
_13 = !_14.1.7;
_26 = Adt56 { fld0: _14.1.0,fld1: _7.fld0.0 };
_11 = 84_u8 as isize;
_4.0 = 129_u8 as i8;
Goto(bb8)
}
bb8 = {
Call(_27 = dump_var(9_usize, 16_usize, Move(_16), 22_usize, Move(_22), 11_usize, Move(_11), 15_usize, Move(_15)), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
Call(_27 = dump_var(9_usize, 13_usize, Move(_13), 3_usize, Move(_3), 5_usize, Move(_5), 24_usize, Move(_24)), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn10(mut _1: *const u64,mut _2: u64,mut _3: u128,mut _4: *const u64,mut _5: *const u64,mut _6: (i16, [i32; 6]),mut _7: *const u64,mut _8: *const u64,mut _9: [i32; 6],mut _10: u64,mut _11: *const u64) -> f32 {
mir! {
type RET = f32;
let _12: i64;
let _13: f32;
let _14: *mut i16;
let _15: f64;
let _16: isize;
let _17: [bool; 1];
let _18: char;
let _19: (i8,);
let _20: u16;
let _21: (*mut char,);
let _22: isize;
let _23: (u64, u128);
let _24: [i32; 6];
let _25: char;
let _26: u128;
let _27: (*mut char,);
let _28: f32;
let _29: Adt51;
let _30: (i16, [i32; 6]);
let _31: (i128, isize, *mut u64, u16, u128, i8, i16, u32, u128);
let _32: *const *mut u64;
let _33: (i16, *const f64);
let _34: [bool; 4];
let _35: u32;
let _36: ((i128, isize, *mut u64, u16, u128, i8, i16, u32, u128), i8, char);
let _37: [u32; 8];
let _38: Adt56;
let _39: f32;
let _40: (u64, u128);
let _41: ();
let _42: ();
{
(*_5) = _6.0 as u64;
(*_7) = _10 * _2;
RET = (-5402156082245221394_i64) as f32;
_1 = core::ptr::addr_of!((*_1));
_10 = (*_7);
_1 = core::ptr::addr_of!((*_7));
_6.0 = !(-29417_i16);
_11 = _4;
_4 = core::ptr::addr_of!((*_4));
_2 = (-132423936084258524220141924244762741034_i128) as u64;
_13 = _3 as f32;
(*_7) = _10;
(*_7) = _10;
_2 = (*_11) + (*_1);
_4 = _11;
(*_1) = _10 % 14541416795785121584_u64;
_16 = (-9223372036854775808_isize) >> _6.0;
_6 = ((-15175_i16), _9);
Goto(bb1)
}
bb1 = {
_2 = !(*_1);
(*_4) = _13 as u64;
(*_5) = _2 & _2;
_12 = _6.0 as i64;
_19.0 = -(-47_i8);
_14 = core::ptr::addr_of_mut!(_6.0);
(*_5) = _10;
(*_4) = _2;
_6.1 = [1834687383_i32,(-1637886859_i32),1924957891_i32,160107273_i32,2062993387_i32,89820368_i32];
(*_11) = _2 % 3968973216081163906_u64;
_6 = (28182_i16, _9);
(*_7) = _2 - _10;
_4 = core::ptr::addr_of!((*_5));
_9 = [(-1840559220_i32),2089739445_i32,(-250660511_i32),(-2129939908_i32),528234617_i32,837412661_i32];
_16 = (-9223372036854775808_isize);
RET = 73139555_i32 as f32;
_5 = core::ptr::addr_of!((*_7));
_11 = core::ptr::addr_of!((*_5));
_20 = !33153_u16;
_2 = !(*_1);
(*_7) = _20 as u64;
match (*_14) {
0 => bb2,
1 => bb3,
2 => bb4,
28182 => bb6,
_ => bb5
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
(*_4) = _2;
_6 = (31646_i16, _9);
_18 = '\u{17f0a}';
_20 = 54472_u16;
RET = _13 / f32::NAN;
_18 = '\u{101835}';
_23.1 = !_3;
_17 = [false];
RET = _13 + _13;
(*_1) = !_10;
_23.0 = !(*_8);
_6 = ((-26703_i16), _9);
(*_11) = 5_usize as u64;
RET = _13;
(*_4) = _16 as u64;
_5 = core::ptr::addr_of!((*_5));
RET = -_13;
_12 = (-1864669521266934255_i64);
_10 = (*_5) % 6305134522367714483_u64;
_4 = _7;
(*_8) = _10 >> _2;
_7 = core::ptr::addr_of!((*_7));
_26 = _3 << _2;
(*_5) = _2 & _2;
(*_7) = _2;
match _20 {
0 => bb4,
1 => bb7,
2 => bb8,
3 => bb9,
4 => bb10,
54472 => bb12,
_ => bb11
}
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
_2 = !(*_1);
(*_4) = _13 as u64;
(*_5) = _2 & _2;
_12 = _6.0 as i64;
_19.0 = -(-47_i8);
_14 = core::ptr::addr_of_mut!(_6.0);
(*_5) = _10;
(*_4) = _2;
_6.1 = [1834687383_i32,(-1637886859_i32),1924957891_i32,160107273_i32,2062993387_i32,89820368_i32];
(*_11) = _2 % 3968973216081163906_u64;
_6 = (28182_i16, _9);
(*_7) = _2 - _10;
_4 = core::ptr::addr_of!((*_5));
_9 = [(-1840559220_i32),2089739445_i32,(-250660511_i32),(-2129939908_i32),528234617_i32,837412661_i32];
_16 = (-9223372036854775808_isize);
RET = 73139555_i32 as f32;
_5 = core::ptr::addr_of!((*_7));
_11 = core::ptr::addr_of!((*_5));
_20 = !33153_u16;
_2 = !(*_1);
(*_7) = _20 as u64;
match (*_14) {
0 => bb2,
1 => bb3,
2 => bb4,
28182 => bb6,
_ => bb5
}
}
bb12 = {
_3 = _26;
_18 = '\u{6d482}';
(*_8) = _23.1 as u64;
_15 = _20 as f64;
_27.0 = core::ptr::addr_of_mut!(_18);
_6 = (27233_i16, _9);
_26 = !_3;
_6.1 = [(-888317200_i32),(-264928556_i32),1898553672_i32,1540615927_i32,(-1167680120_i32),(-197861266_i32)];
match (*_14) {
0 => bb1,
1 => bb7,
27233 => bb13,
_ => bb11
}
}
bb13 = {
_26 = _23.1 >> (*_14);
_10 = _2 ^ (*_4);
_1 = core::ptr::addr_of!((*_1));
(*_14) = 4495_i16 >> (*_7);
_16 = (-2031789294_i32) as isize;
_9 = [930536726_i32,(-1549333730_i32),(-733409303_i32),(-916536716_i32),308521099_i32,366461698_i32];
_10 = (*_14) as u64;
_8 = core::ptr::addr_of!(_10);
(*_1) = !_2;
_17 = [true];
_29.fld2 = _16 & _16;
_16 = _29.fld2;
_14 = core::ptr::addr_of_mut!((*_14));
_31.1 = !_16;
(*_5) = (*_8) ^ (*_8);
_34 = [false,true,false,true];
_25 = _18;
(*_11) = _19.0 as u64;
_36.0.3 = _20 & _20;
_10 = (*_14) as u64;
Goto(bb14)
}
bb14 = {
_21 = (_27.0,);
_31.3 = 4293649466_u32 as u16;
_8 = _1;
_29.fld1 = [1206430556_u32,3708568486_u32,1040069045_u32,358784075_u32,3168695620_u32,724876482_u32,3254592360_u32,2484054404_u32];
_31.2 = core::ptr::addr_of_mut!((*_7));
_36.0.8 = _3 / 340098223278108772504309478252993913926_u128;
_36.0.1 = _12 as isize;
_33.0 = _29.fld2 as i16;
_36.0.4 = _31.3 as u128;
_40.1 = !_36.0.8;
_24 = [151787892_i32,(-580891508_i32),(-615073710_i32),(-904642109_i32),(-1264605307_i32),922253108_i32];
_36.0.6 = (*_14);
_7 = core::ptr::addr_of!((*_8));
(*_4) = !_2;
Goto(bb15)
}
bb15 = {
Call(_41 = dump_var(10_usize, 24_usize, Move(_24), 10_usize, Move(_10), 19_usize, Move(_19), 17_usize, Move(_17)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_41 = dump_var(10_usize, 12_usize, Move(_12), 20_usize, Move(_20), 6_usize, Move(_6), 3_usize, Move(_3)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn11(mut _1: isize,mut _2: i16,mut _3: u32,mut _4: *const u64,mut _5: i16,mut _6: i16,mut _7: u32,mut _8: i128,mut _9: [u64; 2],mut _10: (u64, u128),mut _11: char,mut _12: f64) -> i16 {
mir! {
type RET = i16;
let _13: Adt55;
let _14: bool;
let _15: ();
let _16: ();
{
_4 = core::ptr::addr_of!(_10.0);
_5 = !_2;
_5 = _2 ^ _2;
RET = _8 as i16;
_10.1 = 185060435401092085310213101264712935447_u128 * 36742368505682204151277827483895423675_u128;
_13.fld0.0.1 = (-34_i8) | (-118_i8);
_13.fld0.0.0.4 = (-731654392_i32) as u128;
_13.fld0.0.0.1 = false as isize;
_8 = 6951625011650244999568242868512690420_i128 + 73612119575280965365781449575624828258_i128;
_13.fld0.0.0.4 = !_10.1;
RET = _5 << _5;
_13.fld0.0.0.5 = _13.fld0.0.1;
_13.fld0.0.0.8 = !_13.fld0.0.0.4;
_13.fld0.0.0.2 = core::ptr::addr_of_mut!(_10.0);
_11 = '\u{101d80}';
_13.fld0.0.0.8 = true as u128;
_12 = _1 as f64;
_4 = core::ptr::addr_of!((*_4));
_6 = 33568_u16 as i16;
_13.fld0.0.2 = _11;
Goto(bb1)
}
bb1 = {
Call(_15 = dump_var(11_usize, 2_usize, Move(_2), 10_usize, Move(_10), 11_usize, Move(_11), 9_usize, Move(_9)), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Call(_15 = dump_var(11_usize, 5_usize, Move(_5), 16_usize, _16, 16_usize, _16, 16_usize, _16), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn12(mut _1: *const u64,mut _2: isize) -> i16 {
mir! {
type RET = i16;
let _3: [u16; 8];
let _4: [i32; 6];
let _5: f64;
let _6: (i32, i128);
let _7: Adt61;
let _8: i8;
let _9: (u64, u128);
let _10: *mut *mut i16;
let _11: u8;
let _12: f64;
let _13: f32;
let _14: bool;
let _15: (i32, i128);
let _16: ();
let _17: ();
{
RET = 12196_i16 + 23889_i16;
(*_1) = !534454141244277290_u64;
(*_1) = (-7166_i16) as u64;
_1 = core::ptr::addr_of!((*_1));
RET = 10072_i16 | (-12742_i16);
(*_1) = 2469670427612642794_u64 ^ 2069427455852903190_u64;
(*_1) = !8266045434396225368_u64;
_2 = 62_isize + (-9223372036854775808_isize);
_1 = core::ptr::addr_of!((*_1));
(*_1) = 7340926688337866092_u64;
_2 = !(-9223372036854775808_isize);
_2 = 9223372036854775807_isize - 9223372036854775807_isize;
RET = (-20190_i16) - 19689_i16;
(*_1) = 38925_u16 as u64;
_2 = -9223372036854775807_isize;
_2 = -(-9223372036854775808_isize);
(*_1) = 7881754800584459030_u64 % 16793234157665418374_u64;
(*_1) = 4104459544142844147_usize as u64;
(*_1) = 11421718443517762671_u64;
RET = (-32700_i16);
_1 = core::ptr::addr_of!((*_1));
RET = 23104_i16 * 27087_i16;
match (*_1) {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb5,
5 => bb6,
11421718443517762671 => bb8,
_ => bb7
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_1 = core::ptr::addr_of!((*_1));
(*_1) = 3114696158427343266_u64 | 8681622187935512522_u64;
RET = (-353_i16);
(*_1) = !3849145927034475719_u64;
_3 = [13495_u16,24545_u16,28638_u16,55176_u16,3221_u16,3790_u16,40395_u16,5966_u16];
RET = (-12330_i16) >> (*_1);
RET = !30808_i16;
(*_1) = '\u{d12a}' as u64;
RET = 14393_i16 - 1340_i16;
_4 = [485302778_i32,1284185190_i32,819816412_i32,(-1572447519_i32),(-7907709_i32),115141786_i32];
(*_1) = !3087477788178415108_u64;
_4 = [(-1906132711_i32),(-1654425537_i32),(-991720256_i32),1802093814_i32,76926321_i32,2122768081_i32];
(*_1) = !11205049990629282166_u64;
_5 = 313072026127507150317636906164414943899_u128 as f64;
(*_1) = !14547650132780056807_u64;
_2 = 127_isize;
_1 = core::ptr::addr_of!((*_1));
_2 = (-1246952614_i32) as isize;
_2 = (-9223372036854775808_isize);
_5 = 3_usize as f64;
_3 = [51495_u16,20390_u16,38097_u16,870_u16,13340_u16,17464_u16,42501_u16,58014_u16];
RET = (-8219_i16) >> _2;
(*_1) = !7729658456663541774_u64;
_6 = ((-1939451094_i32), 45667400664267724967270887780994531791_i128);
RET = (-6744_i16);
(*_1) = 206173453986809289_u64 >> _6.1;
Goto(bb9)
}
bb9 = {
_6 = (2079846381_i32, (-90292608857695719355852467390669554061_i128));
(*_1) = '\u{f755e}' as u64;
_7.fld0.1 = _4;
RET = 12535_i16 | 20631_i16;
(*_1) = !4763524660318796652_u64;
(*_1) = 243_u8 as u64;
_5 = 231595587771745278132679644133332705134_u128 as f64;
_9 = ((*_1), 6459214528140791937809437012715755669_u128);
_7.fld0.0 = !(-11988_i16);
_9 = ((*_1), 258093139587550513199443426750499007861_u128);
_7.fld0.1 = [_6.0,_6.0,_6.0,_6.0,_6.0,_6.0];
_5 = 10_u8 as f64;
Call(_3 = fn13(_6.1, _9.1, _6.1, _7.fld0, _1, (*_1), _1), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_6 = ((-692550898_i32), 81466258347943069231687125497511769194_i128);
_6 = ((-1850262961_i32), (-16462404992236049677356143076177951680_i128));
_9.0 = !(*_1);
_12 = -_5;
_13 = _6.0 as f32;
RET = _7.fld0.0;
_8 = _12 as i8;
_3 = [40042_u16,39310_u16,18624_u16,65142_u16,78_u16,44762_u16,2278_u16,57908_u16];
_11 = 190_u8 % 44_u8;
match _2 {
0 => bb5,
1 => bb9,
2 => bb11,
3 => bb12,
4 => bb13,
340282366920938463454151235394913435648 => bb15,
_ => bb14
}
}
bb11 = {
Return()
}
bb12 = {
_1 = core::ptr::addr_of!((*_1));
(*_1) = 3114696158427343266_u64 | 8681622187935512522_u64;
RET = (-353_i16);
(*_1) = !3849145927034475719_u64;
_3 = [13495_u16,24545_u16,28638_u16,55176_u16,3221_u16,3790_u16,40395_u16,5966_u16];
RET = (-12330_i16) >> (*_1);
RET = !30808_i16;
(*_1) = '\u{d12a}' as u64;
RET = 14393_i16 - 1340_i16;
_4 = [485302778_i32,1284185190_i32,819816412_i32,(-1572447519_i32),(-7907709_i32),115141786_i32];
(*_1) = !3087477788178415108_u64;
_4 = [(-1906132711_i32),(-1654425537_i32),(-991720256_i32),1802093814_i32,76926321_i32,2122768081_i32];
(*_1) = !11205049990629282166_u64;
_5 = 313072026127507150317636906164414943899_u128 as f64;
(*_1) = !14547650132780056807_u64;
_2 = 127_isize;
_1 = core::ptr::addr_of!((*_1));
_2 = (-1246952614_i32) as isize;
_2 = (-9223372036854775808_isize);
_5 = 3_usize as f64;
_3 = [51495_u16,20390_u16,38097_u16,870_u16,13340_u16,17464_u16,42501_u16,58014_u16];
RET = (-8219_i16) >> _2;
(*_1) = !7729658456663541774_u64;
_6 = ((-1939451094_i32), 45667400664267724967270887780994531791_i128);
RET = (-6744_i16);
(*_1) = 206173453986809289_u64 >> _6.1;
Goto(bb9)
}
bb13 = {
Return()
}
bb14 = {
Return()
}
bb15 = {
_6.1 = _11 as i128;
_1 = core::ptr::addr_of!((*_1));
_3 = [42696_u16,59750_u16,46637_u16,27120_u16,43155_u16,51696_u16,55514_u16,51223_u16];
_9.0 = (*_1);
_15 = _6;
_11 = '\u{7c3ac}' as u8;
_4 = _7.fld0.1;
_9.1 = !166801161033032466065881190635476107686_u128;
_1 = core::ptr::addr_of!((*_1));
_9.0 = !(*_1);
_9 = ((*_1), 271737231110202148008362121470043307835_u128);
_15.0 = _6.0 << (*_1);
_8 = 34_i8 << _15.0;
_6.1 = !_15.1;
Goto(bb16)
}
bb16 = {
Call(_16 = dump_var(12_usize, 15_usize, Move(_15), 3_usize, Move(_3), 4_usize, Move(_4), 11_usize, Move(_11)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn13(mut _1: i128,mut _2: u128,mut _3: i128,mut _4: (i16, [i32; 6]),mut _5: *const u64,mut _6: u64,mut _7: *const u64) -> [u16; 8] {
mir! {
type RET = [u16; 8];
let _8: i16;
let _9: (u64,);
let _10: isize;
let _11: usize;
let _12: f32;
let _13: f32;
let _14: bool;
let _15: [bool; 1];
let _16: bool;
let _17: Adt61;
let _18: [u32; 6];
let _19: isize;
let _20: isize;
let _21: bool;
let _22: u64;
let _23: i32;
let _24: (i16, [i32; 6]);
let _25: ();
let _26: ();
{
_5 = core::ptr::addr_of!(_6);
_3 = _1;
_8 = -_4.0;
_4.1 = [(-528233268_i32),(-2060155676_i32),147046537_i32,(-513004131_i32),1400276387_i32,(-1317452504_i32)];
_5 = _7;
_7 = core::ptr::addr_of!((*_5));
_1 = _3;
RET = [20316_u16,8556_u16,24796_u16,3459_u16,39211_u16,25407_u16,35122_u16,46019_u16];
_2 = 257016028764301834156345898604042447656_u128;
RET = [27824_u16,14738_u16,311_u16,61338_u16,27838_u16,12979_u16,10637_u16,36553_u16];
_9 = (_6,);
_9 = ((*_7),);
(*_7) = !_6;
_2 = !215787523138483619596468428042683712949_u128;
_4.0 = _8 - _8;
_4.0 = 30775_u16 as i16;
RET = [22915_u16,44921_u16,14818_u16,60581_u16,63256_u16,60095_u16,24002_u16,41534_u16];
Goto(bb1)
}
bb1 = {
(*_7) = _6 + _6;
Call(_8 = core::intrinsics::bswap(_4.0), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_9.0 = (*_5) - (*_5);
_1 = 19_i8 as i128;
(*_7) = !_9.0;
RET = [13846_u16,34325_u16,31944_u16,59571_u16,38475_u16,19465_u16,49224_u16,40747_u16];
_7 = core::ptr::addr_of!((*_7));
match _3 {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
249989758063242744107522140041098657395 => bb8,
_ => bb7
}
}
bb3 = {
(*_7) = _6 + _6;
Call(_8 = core::intrinsics::bswap(_4.0), ReturnTo(bb2), UnwindUnreachable())
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
RET = [58467_u16,3332_u16,59004_u16,26624_u16,65036_u16,54292_u16,56670_u16,59613_u16];
(*_5) = _9.0 - _9.0;
_11 = !0_usize;
_7 = core::ptr::addr_of!((*_7));
(*_5) = _9.0;
_11 = _1 as usize;
_11 = 5437655469192533435_usize - 6_usize;
_9.0 = !(*_7);
_12 = (*_5) as f32;
_4.0 = _8;
_11 = 12032638835431347067_usize % 2_usize;
_13 = _12 + _12;
(*_5) = _9.0 | _9.0;
_10 = 78_isize;
_11 = 15302680612489499058_usize;
_8 = 26801_u16 as i16;
_15 = [true];
_8 = _4.0 << (*_7);
_12 = _13 - _13;
RET = [65364_u16,21708_u16,62114_u16,32863_u16,7835_u16,36226_u16,64805_u16,52134_u16];
_9.0 = (*_7) / 9929484218253629897_u64;
match _3 {
0 => bb5,
1 => bb9,
249989758063242744107522140041098657395 => bb11,
_ => bb10
}
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
_13 = -_12;
_15 = [true];
_9 = ((*_5),);
_6 = !(*_5);
_16 = !true;
_4.1 = [1020470065_i32,893592025_i32,1513381577_i32,(-915880496_i32),2038822954_i32,882453714_i32];
_10 = -9223372036854775807_isize;
_4.1 = [1152662700_i32,(-1444677798_i32),1081474629_i32,(-944130560_i32),710794796_i32,962288782_i32];
RET = [45797_u16,21203_u16,45749_u16,64819_u16,46341_u16,5928_u16,48978_u16,16659_u16];
_17.fld0.1 = [(-1360444553_i32),99749332_i32,564948558_i32,(-2041686271_i32),(-489453529_i32),358569756_i32];
_17.fld0 = (_8, _4.1);
_20 = _10;
_7 = core::ptr::addr_of!((*_5));
_15 = [_16];
_18 = [3338359040_u32,560950919_u32,1116652148_u32,3170472520_u32,1080704773_u32,1177713838_u32];
_6 = 39_i8 as u64;
_5 = core::ptr::addr_of!((*_7));
_17.fld0 = _4;
_17.fld0 = _4;
_24.1 = _17.fld0.1;
_5 = core::ptr::addr_of!((*_7));
_16 = true;
match _11 {
0 => bb1,
1 => bb10,
2 => bb9,
3 => bb12,
4 => bb13,
5 => bb14,
6 => bb15,
15302680612489499058 => bb17,
_ => bb16
}
}
bb12 = {
(*_7) = _6 + _6;
Call(_8 = core::intrinsics::bswap(_4.0), ReturnTo(bb2), UnwindUnreachable())
}
bb13 = {
Return()
}
bb14 = {
Return()
}
bb15 = {
Return()
}
bb16 = {
Return()
}
bb17 = {
_23 = _1 as i32;
(*_5) = _9.0;
_20 = _3 as isize;
_9.0 = (*_5) % 9203336920607982541_u64;
_8 = _11 as i16;
_24.0 = _17.fld0.0;
RET = [20612_u16,63313_u16,7170_u16,28436_u16,1483_u16,33600_u16,49026_u16,33831_u16];
_10 = _20 ^ _20;
_23 = 685268260_i32 | 1853623652_i32;
(*_7) = _9.0;
Goto(bb18)
}
bb18 = {
Call(_25 = dump_var(13_usize, 1_usize, Move(_1), 2_usize, Move(_2), 24_usize, Move(_24), 18_usize, Move(_18)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_25 = dump_var(13_usize, 16_usize, Move(_16), 8_usize, Move(_8), 10_usize, Move(_10), 26_usize, _26), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn14(mut _1: *const u64,mut _2: (u64, u128),mut _3: (u64, u128),mut _4: *const *const u64,mut _5: u64,mut _6: *const u64,mut _7: *const (i64, *mut u64, u128, [i32; 6], *const *const f64, (i8,)),mut _8: char,mut _9: char,mut _10: i128,mut _11: Adt61) -> u32 {
mir! {
type RET = u32;
let _12: u64;
let _13: f32;
let _14: Adt51;
let _15: Adt61;
let _16: (i8,);
let _17: f32;
let _18: [i32; 6];
let _19: (i32, i128);
let _20: [bool; 4];
let _21: *mut u64;
let _22: isize;
let _23: [i32; 6];
let _24: u8;
let _25: [u64; 2];
let _26: *const *const u64;
let _27: isize;
let _28: f32;
let _29: [u64; 2];
let _30: Adt52;
let _31: *mut char;
let _32: f64;
let _33: Adt51;
let _34: ();
let _35: ();
{
RET = 2063132046_u32;
RET = 252163528_u32;
(*_7).3 = [(-248297455_i32),1902781217_i32,(-676559322_i32),98069385_i32,(-2033696037_i32),1994239371_i32];
(*_6) = !_5;
_11.fld0 = (26553_i16, (*_7).3);
(*_7).1 = core::ptr::addr_of_mut!((*_1));
(*_7).0 = !(-2176405897800504621_i64);
(*_1) = _5;
(*_7).2 = 7_usize as u128;
_13 = (*_7).0 as f32;
_5 = 1721473770_i32 as u64;
(*_7).2 = _3.1 ^ _2.1;
_12 = 161_u8 as u64;
(*_1) = !_2.0;
_14.fld2 = (-9223372036854775808_isize);
(*_7).0 = -7865204005982810208_i64;
_1 = (*_4);
(*_7).5.0 = (-123_i8);
_5 = (*_7).0 as u64;
(*_7).5 = (106_i8,);
_1 = core::ptr::addr_of!(_2.0);
_8 = _9;
_1 = (*_4);
(*_6) = !_2.0;
_15.fld0 = (_11.fld0.0, (*_7).3);
Goto(bb1)
}
bb1 = {
(*_7).1 = core::ptr::addr_of_mut!((*_1));
_11.fld0 = _15.fld0;
_10 = (-165007050916744015146260629331513550780_i128);
(*_7).3 = [(-1337136891_i32),(-1277814839_i32),1048491685_i32,1281639286_i32,679794435_i32,1974273588_i32];
match _11.fld0.0 {
0 => bb2,
1 => bb3,
26553 => bb5,
_ => bb4
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
_13 = _11.fld0.0 as f32;
_5 = (*_1) % 2625222106625763615_u64;
_15.fld0.0 = _13 as i16;
_12 = _2.0;
_6 = _1;
_10 = -73098255583629479793710982683482663407_i128;
Goto(bb6)
}
bb6 = {
_15.fld0.0 = _11.fld0.0;
(*_7).2 = _2.1 >> _3.0;
_14.fld0 = _13 as f64;
(*_7).0 = -6038152147238062607_i64;
_1 = core::ptr::addr_of!(_2.0);
_15 = Adt61 { fld0: _11.fld0 };
(*_7).3 = _11.fld0.1;
_11.fld0.1 = [(-1549797611_i32),1214822080_i32,(-271943693_i32),(-78825974_i32),(-443599331_i32),(-1956935960_i32)];
_8 = _9;
RET = 133_u8 as u32;
_19 = (704974765_i32, _10);
_15.fld0.1 = [_19.0,_19.0,_19.0,_19.0,_19.0,_19.0];
_14.fld0 = (*_7).0 as f64;
_2.0 = !(*_6);
_17 = _13 - _13;
_11 = Adt61 { fld0: _15.fld0 };
match _15.fld0.0 {
0 => bb4,
1 => bb3,
26553 => bb8,
_ => bb7
}
}
bb7 = {
Return()
}
bb8 = {
_8 = _9;
(*_4) = _6;
_20 = [true,false,true,false];
(*_4) = core::ptr::addr_of!(_12);
_2.0 = _5;
(*_7).5.0 = _13 as i8;
(*_1) = _19.1 as u64;
_17 = _13;
_16.0 = _10 as i8;
(*_7).3 = [_19.0,_19.0,_19.0,_19.0,_19.0,_19.0];
_5 = _12;
(*_7).5 = (_16.0,);
_11.fld0.1 = [_19.0,_19.0,_19.0,_19.0,_19.0,_19.0];
_17 = -_13;
_5 = _10 as u64;
_6 = _1;
_2.0 = _3.0 - _3.0;
_3 = _2;
_11.fld0 = (_15.fld0.0, _15.fld0.1);
_2 = (_12, (*_7).2);
_6 = core::ptr::addr_of!(_2.0);
(*_7).0 = 3390912570715713321_i64;
_20 = [true,true,true,false];
_3.1 = _2.1;
(*_7).5 = _16;
_5 = _3.0 ^ _2.0;
match _19.0 {
0 => bb1,
1 => bb2,
704974765 => bb9,
_ => bb6
}
}
bb9 = {
_23 = [_19.0,_19.0,_19.0,_19.0,_19.0,_19.0];
(*_7).5.0 = _16.0;
_14.fld1 = [3324012408_u32,991452277_u32,1987927112_u32,2948558011_u32,2036097454_u32,23976179_u32,3240586667_u32,2247142514_u32];
_23 = [_19.0,_19.0,_19.0,_19.0,_19.0,_19.0];
_25 = [(*_1),(*_6)];
(*_7).0 = 2531539106211458713_i64 >> _3.0;
_21 = core::ptr::addr_of_mut!((*_6));
(*_7).5.0 = !_16.0;
_18 = [_19.0,_19.0,_19.0,_19.0,_19.0,_19.0];
_7 = core::ptr::addr_of!((*_7));
_3 = (_2.0, (*_7).2);
_1 = core::ptr::addr_of!(_12);
(*_21) = (*_1) & _12;
_2 = (_5, (*_7).2);
Goto(bb10)
}
bb10 = {
_13 = _10 as f32;
_21 = core::ptr::addr_of_mut!(_5);
_15.fld0 = (_11.fld0.0, _18);
_14.fld1 = [2494171880_u32,2655256913_u32,966484539_u32,2557822610_u32,791930104_u32,28660577_u32,1010121833_u32,1541286928_u32];
(*_1) = (*_6);
_11.fld0.1 = _18;
(*_4) = core::ptr::addr_of!((*_1));
_3.1 = (*_7).2;
Goto(bb11)
}
bb11 = {
(*_7).3 = _18;
_20 = [false,false,false,false];
_14.fld0 = _10 as f64;
_3.0 = (*_1);
_9 = _8;
(*_7).0 = (-8848560735665675514_i64);
_13 = -_17;
(*_21) = (*_6);
_2.1 = !(*_7).2;
_2.0 = !(*_1);
_21 = core::ptr::addr_of_mut!((*_21));
_8 = _9;
(*_7).5 = (_16.0,);
_19 = ((-1452233630_i32), _10);
_23 = [_19.0,_19.0,_19.0,_19.0,_19.0,_19.0];
_15.fld0.0 = -_11.fld0.0;
_13 = _17;
RET = !3370438041_u32;
_30.fld0.0 = _11.fld0.0;
_13 = _17 + _17;
_3 = ((*_6), (*_7).2);
_28 = _13 / 0.000000000000000000000000000000000000005434435830332039_f32;
_21 = core::ptr::addr_of_mut!((*_1));
(*_7).5.0 = !_16.0;
_30.fld0.0 = _15.fld0.0 * _11.fld0.0;
match _11.fld0.0 {
0 => bb2,
1 => bb12,
2 => bb13,
26553 => bb15,
_ => bb14
}
}
bb12 = {
_13 = _10 as f32;
_21 = core::ptr::addr_of_mut!(_5);
_15.fld0 = (_11.fld0.0, _18);
_14.fld1 = [2494171880_u32,2655256913_u32,966484539_u32,2557822610_u32,791930104_u32,28660577_u32,1010121833_u32,1541286928_u32];
(*_1) = (*_6);
_11.fld0.1 = _18;
(*_4) = core::ptr::addr_of!((*_1));
_3.1 = (*_7).2;
Goto(bb11)
}
bb13 = {
_23 = [_19.0,_19.0,_19.0,_19.0,_19.0,_19.0];
(*_7).5.0 = _16.0;
_14.fld1 = [3324012408_u32,991452277_u32,1987927112_u32,2948558011_u32,2036097454_u32,23976179_u32,3240586667_u32,2247142514_u32];
_23 = [_19.0,_19.0,_19.0,_19.0,_19.0,_19.0];
_25 = [(*_1),(*_6)];
(*_7).0 = 2531539106211458713_i64 >> _3.0;
_21 = core::ptr::addr_of_mut!((*_6));
(*_7).5.0 = !_16.0;
_18 = [_19.0,_19.0,_19.0,_19.0,_19.0,_19.0];
_7 = core::ptr::addr_of!((*_7));
_3 = (_2.0, (*_7).2);
_1 = core::ptr::addr_of!(_12);
(*_21) = (*_1) & _12;
_2 = (_5, (*_7).2);
Goto(bb10)
}
bb14 = {
_15.fld0.0 = _11.fld0.0;
(*_7).2 = _2.1 >> _3.0;
_14.fld0 = _13 as f64;
(*_7).0 = -6038152147238062607_i64;
_1 = core::ptr::addr_of!(_2.0);
_15 = Adt61 { fld0: _11.fld0 };
(*_7).3 = _11.fld0.1;
_11.fld0.1 = [(-1549797611_i32),1214822080_i32,(-271943693_i32),(-78825974_i32),(-443599331_i32),(-1956935960_i32)];
_8 = _9;
RET = 133_u8 as u32;
_19 = (704974765_i32, _10);
_15.fld0.1 = [_19.0,_19.0,_19.0,_19.0,_19.0,_19.0];
_14.fld0 = (*_7).0 as f64;
_2.0 = !(*_6);
_17 = _13 - _13;
_11 = Adt61 { fld0: _15.fld0 };
match _15.fld0.0 {
0 => bb4,
1 => bb3,
26553 => bb8,
_ => bb7
}
}
bb15 = {
_20 = [true,true,false,true];
_22 = _14.fld2;
_19.0 = 30845_u16 as i32;
_33.fld1 = [789865972_u32,1204282985_u32,2806380984_u32,424926986_u32,3849169810_u32,1033221136_u32,2263866482_u32,325984802_u32];
_19 = ((-189911745_i32), _10);
_11.fld0.0 = _30.fld0.0 >> (*_21);
_25 = [(*_1),(*_21)];
(*_7).5.0 = !_16.0;
_11.fld0 = (_30.fld0.0, _15.fld0.1);
(*_7).3 = [_19.0,_19.0,_19.0,_19.0,_19.0,_19.0];
_32 = _14.fld0;
_4 = core::ptr::addr_of!((*_4));
_15 = Adt61 { fld0: _11.fld0 };
(*_7).2 = !_2.1;
_15.fld0.1 = [_19.0,_19.0,_19.0,_19.0,_19.0,_19.0];
_3.0 = (*_1);
_3 = (_12, (*_7).2);
_24 = _14.fld0 as u8;
(*_7).3 = [_19.0,_19.0,_19.0,_19.0,_19.0,_19.0];
Goto(bb16)
}
bb16 = {
Call(_34 = dump_var(14_usize, 25_usize, Move(_25), 19_usize, Move(_19), 9_usize, Move(_9), 18_usize, Move(_18)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_34 = dump_var(14_usize, 20_usize, Move(_20), 3_usize, Move(_3), 16_usize, Move(_16), 35_usize, _35), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn15(mut _1: u64,mut _2: bool,mut _3: *const *const u64) -> isize {
mir! {
type RET = isize;
let _4: [bool; 4];
let _5: [u32; 6];
let _6: f64;
let _7: (*const u64, f64);
let _8: i32;
let _9: Adt64;
let _10: [u32; 8];
let _11: *const *mut u64;
let _12: [u32; 6];
let _13: Adt55;
let _14: [u64; 2];
let _15: Adt58;
let _16: char;
let _17: Adt52;
let _18: [bool; 1];
let _19: Adt52;
let _20: [bool; 1];
let _21: Adt57;
let _22: Adt51;
let _23: u32;
let _24: usize;
let _25: isize;
let _26: bool;
let _27: (u64, u128);
let _28: i128;
let _29: (i32, i128);
let _30: isize;
let _31: f64;
let _32: i32;
let _33: Adt51;
let _34: Adt50;
let _35: bool;
let _36: ();
let _37: ();
{
_1 = 9274807729247623981_u64 / 17579687892227114284_u64;
_3 = core::ptr::addr_of!((*_3));
(*_3) = core::ptr::addr_of!(_1);
Call(RET = fn16((*_3), _3, _2, _1, _3, _1, _3, _1, _3, _3, (*_3), _3, _3, (*_3), _1), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_3 = core::ptr::addr_of!((*_3));
RET = (-9223372036854775808_isize);
_2 = !true;
RET = (-44_isize) ^ 9223372036854775807_isize;
_2 = _1 >= _1;
Call(RET = core::intrinsics::transmute(_1), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_1 = !6321387229487244410_u64;
_5 = [2468709895_u32,517042713_u32,161952024_u32,3938171304_u32,436825345_u32,2535043519_u32];
_4 = [_2,_2,_2,_2];
_3 = core::ptr::addr_of!((*_3));
RET = !9223372036854775807_isize;
_3 = core::ptr::addr_of!((*_3));
_3 = core::ptr::addr_of!((*_3));
_2 = true;
RET = _2 as isize;
_1 = 15043_u16 as u64;
_2 = !true;
_1 = 16660654724427193197_u64 >> (-1149760569_i32);
_6 = (-56_isize) as f64;
_3 = core::ptr::addr_of!((*_3));
_2 = false;
_3 = core::ptr::addr_of!((*_3));
_6 = 7_usize as f64;
_3 = core::ptr::addr_of!((*_3));
_7 = ((*_3), _6);
_6 = 42_u8 as f64;
Goto(bb3)
}
bb3 = {
RET = !(-8_isize);
_7.1 = -_6;
RET = 31538_i16 as isize;
_4 = [_2,_2,_2,_2];
_9.fld0.fld1.fld4.0 = _7.0;
_9.fld0.fld1.fld4 = _7;
_4 = [_2,_2,_2,_2];
_9.fld0.fld1.fld4.1 = _7.1;
Goto(bb4)
}
bb4 = {
_9.fld0.fld1.fld1 = [65523_u16,11067_u16,36921_u16,20092_u16,46651_u16,2438_u16,52994_u16,49238_u16];
_9.fld0.fld1.fld2 = (*_3);
_9.fld0.fld1.fld1 = [19230_u16,5070_u16,28847_u16,7455_u16,13311_u16,58229_u16,2935_u16,4789_u16];
_4 = [_2,_2,_2,_2];
_9.fld0.fld1.fld1 = [61642_u16,706_u16,26370_u16,11904_u16,29312_u16,5544_u16,45320_u16,8738_u16];
_10 = [2491068025_u32,1240878273_u32,979099385_u32,87600547_u32,4097622093_u32,633441928_u32,986572352_u32,896292799_u32];
_12 = [4266611867_u32,3357413913_u32,329633999_u32,3205281496_u32,3602404948_u32,3895162315_u32];
_7.1 = -_9.fld0.fld1.fld4.1;
_13.fld0.0.0.1 = (-9223372036854775808_isize);
_13.fld0.0.0.1 = 69_u8 as isize;
_13.fld0.1 = !6_usize;
_13.fld0.0.0.5 = _2 as i8;
_13.fld0.0.0.7 = !1550889520_u32;
_13.fld0.0.0.2 = core::ptr::addr_of_mut!(_1);
_13.fld0.0.1 = _13.fld0.0.0.5 + _13.fld0.0.0.5;
_13.fld0.0.0.4 = 243711399140601144022240552934291436445_u128;
_10 = [_13.fld0.0.0.7,_13.fld0.0.0.7,_13.fld0.0.0.7,_13.fld0.0.0.7,_13.fld0.0.0.7,_13.fld0.0.0.7,_13.fld0.0.0.7,_13.fld0.0.0.7];
_13.fld0.0.0.4 = _13.fld0.0.0.1 as u128;
_15.fld1.fld2 = core::ptr::addr_of!(_1);
_13.fld0.0.0.4 = '\u{da4c8}' as u128;
_13.fld0.1 = 5415277955384148912_usize - 2_usize;
_15.fld1.fld1 = [65164_u16,63052_u16,34494_u16,11638_u16,23663_u16,50108_u16,42221_u16,37429_u16];
_13.fld0.0.0.7 = 3357077786_u32;
match _13.fld0.0.0.7 {
3357077786 => bb5,
_ => bb3
}
}
bb5 = {
_13.fld0.0.2 = '\u{1032f6}';
_15.fld1.fld4.1 = _7.1 / (-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018254443312230466_f64);
_15.fld1.fld2 = (*_3);
_9.fld0.fld1.fld4.1 = -_7.1;
_7 = _9.fld0.fld1.fld4;
_1 = 1138502595182858196_u64;
Call(_9.fld0.fld1.fld1 = core::intrinsics::transmute(_15.fld1.fld1), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
_8 = _13.fld0.0.0.1 as i32;
_21.fld1 = (_8, (-60037844635518031748923059736933638228_i128));
_21.fld3 = !_13.fld0.0.0.5;
_15.fld0 = core::ptr::addr_of!(_17.fld0.1);
_17.fld0.1 = core::ptr::addr_of!(_22.fld0);
_8 = !_21.fld1.0;
_17.fld1.0 = core::ptr::addr_of_mut!(_13.fld0.0.2);
_1 = 13608110781507911597_u64;
_19.fld0.0 = (-27604_i16);
_7.1 = _15.fld1.fld4.1 + _9.fld0.fld1.fld4.1;
_21.fld5.1 = [_8,_21.fld1.0,_21.fld1.0,_21.fld1.0,_21.fld1.0,_21.fld1.0];
_18 = [_2];
_16 = _13.fld0.0.2;
Goto(bb7)
}
bb7 = {
_9.fld0.fld0 = core::ptr::addr_of!(_19.fld0.1);
_14 = [_1,_1];
_19.fld0.0 = (-21775_i16) + (-8909_i16);
_16 = _13.fld0.0.2;
_11 = core::ptr::addr_of!(_13.fld0.0.0.2);
_9.fld0.fld0 = core::ptr::addr_of!(_17.fld0.1);
_13.fld0.0.0.1 = 9223372036854775807_isize & (-9223372036854775808_isize);
_13.fld0.0.0.5 = -_21.fld3;
_21.fld4 = _4;
RET = -_13.fld0.0.0.1;
_15.fld0 = core::ptr::addr_of!(_19.fld0.1);
_15.fld1.fld1 = _9.fld0.fld1.fld1;
_13.fld0.0.0.4 = !322399852296171793000537683252373733512_u128;
_13.fld0.0.0.5 = _13.fld0.1 as i8;
(*_11) = core::ptr::addr_of_mut!(_1);
_13.fld0.0.0.3 = 3533_u16;
_21.fld5.0 = _19.fld0.0;
_13.fld0.0.1 = !_21.fld3;
match _1 {
0 => bb8,
13608110781507911597 => bb10,
_ => bb9
}
}
bb8 = {
_1 = !6321387229487244410_u64;
_5 = [2468709895_u32,517042713_u32,161952024_u32,3938171304_u32,436825345_u32,2535043519_u32];
_4 = [_2,_2,_2,_2];
_3 = core::ptr::addr_of!((*_3));
RET = !9223372036854775807_isize;
_3 = core::ptr::addr_of!((*_3));
_3 = core::ptr::addr_of!((*_3));
_2 = true;
RET = _2 as isize;
_1 = 15043_u16 as u64;
_2 = !true;
_1 = 16660654724427193197_u64 >> (-1149760569_i32);
_6 = (-56_isize) as f64;
_3 = core::ptr::addr_of!((*_3));
_2 = false;
_3 = core::ptr::addr_of!((*_3));
_6 = 7_usize as f64;
_3 = core::ptr::addr_of!((*_3));
_7 = ((*_3), _6);
_6 = 42_u8 as f64;
Goto(bb3)
}
bb9 = {
_3 = core::ptr::addr_of!((*_3));
RET = (-9223372036854775808_isize);
_2 = !true;
RET = (-44_isize) ^ 9223372036854775807_isize;
_2 = _1 >= _1;
Call(RET = core::intrinsics::transmute(_1), ReturnTo(bb2), UnwindUnreachable())
}
bb10 = {
_13.fld0.0.0.4 = 321098152130143646074857350979916374079_u128 & 148707257312623142492469302149406757899_u128;
_10 = [_13.fld0.0.0.7,_13.fld0.0.0.7,_13.fld0.0.0.7,_13.fld0.0.0.7,_13.fld0.0.0.7,_13.fld0.0.0.7,_13.fld0.0.0.7,_13.fld0.0.0.7];
_19.fld0.1 = core::ptr::addr_of!(_6);
_22 = Adt51 { fld0: _7.1,fld1: _10,fld2: _13.fld0.0.0.1 };
_15.fld1.fld4 = ((*_3), _22.fld0);
match _13.fld0.0.0.7 {
0 => bb11,
3357077786 => bb13,
_ => bb12
}
}
bb11 = {
_9.fld0.fld1.fld1 = [65523_u16,11067_u16,36921_u16,20092_u16,46651_u16,2438_u16,52994_u16,49238_u16];
_9.fld0.fld1.fld2 = (*_3);
_9.fld0.fld1.fld1 = [19230_u16,5070_u16,28847_u16,7455_u16,13311_u16,58229_u16,2935_u16,4789_u16];
_4 = [_2,_2,_2,_2];
_9.fld0.fld1.fld1 = [61642_u16,706_u16,26370_u16,11904_u16,29312_u16,5544_u16,45320_u16,8738_u16];
_10 = [2491068025_u32,1240878273_u32,979099385_u32,87600547_u32,4097622093_u32,633441928_u32,986572352_u32,896292799_u32];
_12 = [4266611867_u32,3357413913_u32,329633999_u32,3205281496_u32,3602404948_u32,3895162315_u32];
_7.1 = -_9.fld0.fld1.fld4.1;
_13.fld0.0.0.1 = (-9223372036854775808_isize);
_13.fld0.0.0.1 = 69_u8 as isize;
_13.fld0.1 = !6_usize;
_13.fld0.0.0.5 = _2 as i8;
_13.fld0.0.0.7 = !1550889520_u32;
_13.fld0.0.0.2 = core::ptr::addr_of_mut!(_1);
_13.fld0.0.1 = _13.fld0.0.0.5 + _13.fld0.0.0.5;
_13.fld0.0.0.4 = 243711399140601144022240552934291436445_u128;
_10 = [_13.fld0.0.0.7,_13.fld0.0.0.7,_13.fld0.0.0.7,_13.fld0.0.0.7,_13.fld0.0.0.7,_13.fld0.0.0.7,_13.fld0.0.0.7,_13.fld0.0.0.7];
_13.fld0.0.0.4 = _13.fld0.0.0.1 as u128;
_15.fld1.fld2 = core::ptr::addr_of!(_1);
_13.fld0.0.0.4 = '\u{da4c8}' as u128;
_13.fld0.1 = 5415277955384148912_usize - 2_usize;
_15.fld1.fld1 = [65164_u16,63052_u16,34494_u16,11638_u16,23663_u16,50108_u16,42221_u16,37429_u16];
_13.fld0.0.0.7 = 3357077786_u32;
match _13.fld0.0.0.7 {
3357077786 => bb5,
_ => bb3
}
}
bb12 = {
_1 = !6321387229487244410_u64;
_5 = [2468709895_u32,517042713_u32,161952024_u32,3938171304_u32,436825345_u32,2535043519_u32];
_4 = [_2,_2,_2,_2];
_3 = core::ptr::addr_of!((*_3));
RET = !9223372036854775807_isize;
_3 = core::ptr::addr_of!((*_3));
_3 = core::ptr::addr_of!((*_3));
_2 = true;
RET = _2 as isize;
_1 = 15043_u16 as u64;
_2 = !true;
_1 = 16660654724427193197_u64 >> (-1149760569_i32);
_6 = (-56_isize) as f64;
_3 = core::ptr::addr_of!((*_3));
_2 = false;
_3 = core::ptr::addr_of!((*_3));
_6 = 7_usize as f64;
_3 = core::ptr::addr_of!((*_3));
_7 = ((*_3), _6);
_6 = 42_u8 as f64;
Goto(bb3)
}
bb13 = {
_22.fld2 = _13.fld0.0.0.3 as isize;
_19.fld0.0 = _21.fld5.0 >> _13.fld0.0.0.4;
Goto(bb14)
}
bb14 = {
_31 = _7.1;
_28 = !_21.fld1.1;
_13.fld0.0.0.5 = _13.fld0.0.1 * _21.fld3;
_29.0 = _13.fld0.0.2 as i32;
_27.1 = _13.fld0.0.0.4 - _13.fld0.0.0.4;
_13.fld0.0.0.1 = _21.fld1.1 as isize;
_28 = _21.fld1.1 & _21.fld1.1;
(*_11) = core::ptr::addr_of_mut!(_34.fld0.0);
Goto(bb15)
}
bb15 = {
Call(_36 = dump_var(15_usize, 28_usize, Move(_28), 18_usize, Move(_18), 8_usize, Move(_8), 4_usize, Move(_4)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_36 = dump_var(15_usize, 1_usize, Move(_1), 37_usize, _37, 37_usize, _37, 37_usize, _37), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn16(mut _1: *const u64,mut _2: *const *const u64,mut _3: bool,mut _4: u64,mut _5: *const *const u64,mut _6: u64,mut _7: *const *const u64,mut _8: u64,mut _9: *const *const u64,mut _10: *const *const u64,mut _11: *const u64,mut _12: *const *const u64,mut _13: *const *const u64,mut _14: *const u64,mut _15: u64) -> isize {
mir! {
type RET = isize;
let _16: (u64,);
let _17: [bool; 1];
let _18: (u64,);
let _19: isize;
let _20: f32;
let _21: i8;
let _22: bool;
let _23: Adt50;
let _24: usize;
let _25: (u64,);
let _26: Adt50;
let _27: isize;
let _28: (i32, i128);
let _29: isize;
let _30: u128;
let _31: Adt61;
let _32: isize;
let _33: bool;
let _34: u8;
let _35: [u16; 8];
let _36: u16;
let _37: ();
let _38: ();
{
_12 = core::ptr::addr_of!((*_9));
(*_7) = core::ptr::addr_of!(_8);
_11 = _1;
_4 = _8 << (*_11);
(*_11) = !_4;
RET = (-9223372036854775808_isize);
(*_5) = core::ptr::addr_of!(_6);
(*_14) = !_8;
_8 = _15 & _15;
(*_9) = core::ptr::addr_of!((*_1));
Call(_1 = core::intrinsics::arith_offset((*_9), (-36_isize)), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_4 = (*_11);
_9 = core::ptr::addr_of!(_14);
(*_11) = _8 - _4;
(*_14) = _8 * _8;
RET = 9223372036854775807_isize - (-64_isize);
(*_9) = core::ptr::addr_of!((*_11));
_14 = core::ptr::addr_of!(_4);
Goto(bb2)
}
bb2 = {
RET = !(-9223372036854775808_isize);
_16.0 = (*_14) % 3076803180771439232_u64;
(*_5) = _14;
(*_2) = core::ptr::addr_of!(_16.0);
_10 = core::ptr::addr_of!((*_12));
(*_12) = core::ptr::addr_of!(_4);
(*_7) = core::ptr::addr_of!((*_14));
(*_13) = _1;
_3 = true;
_10 = core::ptr::addr_of!((*_10));
_3 = false;
_15 = _8 & (*_11);
_15 = !(*_11);
RET = 9223372036854775807_isize - 9223372036854775807_isize;
_16.0 = !_15;
_3 = !false;
_10 = _12;
_17 = [_3];
_3 = false | true;
_13 = core::ptr::addr_of!((*_10));
RET = '\u{cf5a8}' as isize;
_18.0 = 2895936740_u32 as u64;
_10 = _12;
_18 = _16;
_19 = 7888_i16 as isize;
_8 = _4;
_19 = (-12_isize);
_7 = _2;
Call(_8 = core::intrinsics::transmute(_19), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_13 = core::ptr::addr_of!((*_2));
_5 = core::ptr::addr_of!(_1);
_14 = (*_5);
_2 = core::ptr::addr_of!(_1);
_9 = core::ptr::addr_of!((*_7));
(*_11) = _15 << _6;
_9 = core::ptr::addr_of!((*_9));
_2 = core::ptr::addr_of!((*_9));
_8 = _16.0 - (*_11);
_18 = _16;
_7 = _13;
_11 = core::ptr::addr_of!((*_11));
_16.0 = _8 + _8;
_11 = core::ptr::addr_of!(_16.0);
(*_11) = 74289540597035331001696827148058967617_u128 as u64;
_4 = _15;
_3 = true & true;
(*_11) = _8 * _8;
_13 = core::ptr::addr_of!((*_2));
_4 = 28801_u16 as u64;
_7 = core::ptr::addr_of!((*_13));
(*_11) = _8 + _15;
_17 = [_3];
_11 = (*_13);
Goto(bb4)
}
bb4 = {
_23.fld1.0 = (*_13);
_13 = _7;
_3 = true;
_15 = 13918535822496094508_usize as u64;
_23.fld2 = [(-1981660783_i32),1917600514_i32,(-1339513501_i32),106587936_i32,(-1231305156_i32),(-1304645994_i32)];
_24 = 6859801356545907608_usize - 11884461392463952536_usize;
_23.fld0 = (_18.0,);
_6 = 127934896884283878382344937194121805765_i128 as u64;
_9 = core::ptr::addr_of!((*_12));
_23.fld1.1 = 13664_u16 as f64;
_16 = (_8,);
_18.0 = '\u{cdc00}' as u64;
_18.0 = _8 ^ _6;
_17 = [_3];
_23.fld1.1 = (-18568_i16) as f64;
_25.0 = _18.0;
Call(_15 = core::intrinsics::bswap(_8), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
_22 = _25.0 == _16.0;
_12 = core::ptr::addr_of!((*_10));
_18.0 = !_16.0;
_28 = (777271567_i32, 107889894042192377318877742576796573088_i128);
_16 = (_18.0,);
RET = _19 & _19;
match _19 {
0 => bb6,
1 => bb7,
2 => bb8,
3 => bb9,
4 => bb10,
5 => bb11,
340282366920938463463374607431768211444 => bb13,
_ => bb12
}
}
bb6 = {
_23.fld1.0 = (*_13);
_13 = _7;
_3 = true;
_15 = 13918535822496094508_usize as u64;
_23.fld2 = [(-1981660783_i32),1917600514_i32,(-1339513501_i32),106587936_i32,(-1231305156_i32),(-1304645994_i32)];
_24 = 6859801356545907608_usize - 11884461392463952536_usize;
_23.fld0 = (_18.0,);
_6 = 127934896884283878382344937194121805765_i128 as u64;
_9 = core::ptr::addr_of!((*_12));
_23.fld1.1 = 13664_u16 as f64;
_16 = (_8,);
_18.0 = '\u{cdc00}' as u64;
_18.0 = _8 ^ _6;
_17 = [_3];
_23.fld1.1 = (-18568_i16) as f64;
_25.0 = _18.0;
Call(_15 = core::intrinsics::bswap(_8), ReturnTo(bb5), UnwindUnreachable())
}
bb7 = {
_13 = core::ptr::addr_of!((*_2));
_5 = core::ptr::addr_of!(_1);
_14 = (*_5);
_2 = core::ptr::addr_of!(_1);
_9 = core::ptr::addr_of!((*_7));
(*_11) = _15 << _6;
_9 = core::ptr::addr_of!((*_9));
_2 = core::ptr::addr_of!((*_9));
_8 = _16.0 - (*_11);
_18 = _16;
_7 = _13;
_11 = core::ptr::addr_of!((*_11));
_16.0 = _8 + _8;
_11 = core::ptr::addr_of!(_16.0);
(*_11) = 74289540597035331001696827148058967617_u128 as u64;
_4 = _15;
_3 = true & true;
(*_11) = _8 * _8;
_13 = core::ptr::addr_of!((*_2));
_4 = 28801_u16 as u64;
_7 = core::ptr::addr_of!((*_13));
(*_11) = _8 + _15;
_17 = [_3];
_11 = (*_13);
Goto(bb4)
}
bb8 = {
RET = !(-9223372036854775808_isize);
_16.0 = (*_14) % 3076803180771439232_u64;
(*_5) = _14;
(*_2) = core::ptr::addr_of!(_16.0);
_10 = core::ptr::addr_of!((*_12));
(*_12) = core::ptr::addr_of!(_4);
(*_7) = core::ptr::addr_of!((*_14));
(*_13) = _1;
_3 = true;
_10 = core::ptr::addr_of!((*_10));
_3 = false;
_15 = _8 & (*_11);
_15 = !(*_11);
RET = 9223372036854775807_isize - 9223372036854775807_isize;
_16.0 = !_15;
_3 = !false;
_10 = _12;
_17 = [_3];
_3 = false | true;
_13 = core::ptr::addr_of!((*_10));
RET = '\u{cf5a8}' as isize;
_18.0 = 2895936740_u32 as u64;
_10 = _12;
_18 = _16;
_19 = 7888_i16 as isize;
_8 = _4;
_19 = (-12_isize);
_7 = _2;
Call(_8 = core::intrinsics::transmute(_19), ReturnTo(bb3), UnwindUnreachable())
}
bb9 = {
_4 = (*_11);
_9 = core::ptr::addr_of!(_14);
(*_11) = _8 - _4;
(*_14) = _8 * _8;
RET = 9223372036854775807_isize - (-64_isize);
(*_9) = core::ptr::addr_of!((*_11));
_14 = core::ptr::addr_of!(_4);
Goto(bb2)
}
bb10 = {
Return()
}
bb11 = {
Return()
}
bb12 = {
Return()
}
bb13 = {
_12 = core::ptr::addr_of!(_1);
_3 = _22;
_19 = -42_isize;
_26.fld1 = ((*_13), _23.fld1.1);
_30 = !283835482621443964994711394212655251901_u128;
_10 = core::ptr::addr_of!((*_13));
_31.fld0.1 = [_28.0,_28.0,_28.0,_28.0,_28.0,_28.0];
_20 = _28.1 as f32;
_28 = ((-1728136593_i32), (-111742528417637111912359744490507595700_i128));
_33 = _22;
_25 = (_16.0,);
match _28.1 {
0 => bb4,
1 => bb14,
2 => bb15,
228539838503301351551014862941260615756 => bb17,
_ => bb16
}
}
bb14 = {
Return()
}
bb15 = {
_22 = _25.0 == _16.0;
_12 = core::ptr::addr_of!((*_10));
_18.0 = !_16.0;
_28 = (777271567_i32, 107889894042192377318877742576796573088_i128);
_16 = (_18.0,);
RET = _19 & _19;
match _19 {
0 => bb6,
1 => bb7,
2 => bb8,
3 => bb9,
4 => bb10,
5 => bb11,
340282366920938463463374607431768211444 => bb13,
_ => bb12
}
}
bb16 = {
_23.fld1.0 = (*_13);
_13 = _7;
_3 = true;
_15 = 13918535822496094508_usize as u64;
_23.fld2 = [(-1981660783_i32),1917600514_i32,(-1339513501_i32),106587936_i32,(-1231305156_i32),(-1304645994_i32)];
_24 = 6859801356545907608_usize - 11884461392463952536_usize;
_23.fld0 = (_18.0,);
_6 = 127934896884283878382344937194121805765_i128 as u64;
_9 = core::ptr::addr_of!((*_12));
_23.fld1.1 = 13664_u16 as f64;
_16 = (_8,);
_18.0 = '\u{cdc00}' as u64;
_18.0 = _8 ^ _6;
_17 = [_3];
_23.fld1.1 = (-18568_i16) as f64;
_25.0 = _18.0;
Call(_15 = core::intrinsics::bswap(_8), ReturnTo(bb5), UnwindUnreachable())
}
bb17 = {
_36 = !36939_u16;
_26.fld0.0 = _18.0 | _18.0;
_18 = (_8,);
_26.fld0 = (_16.0,);
_28 = ((-1528757849_i32), 117058729328172215144567816519059378703_i128);
_20 = 3451652224_u32 as f32;
_2 = _9;
_23.fld1 = ((*_7), _26.fld1.1);
Goto(bb18)
}
bb18 = {
Call(_37 = dump_var(16_usize, 28_usize, Move(_28), 22_usize, Move(_22), 36_usize, Move(_36), 25_usize, Move(_25)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_37 = dump_var(16_usize, 19_usize, Move(_19), 18_usize, Move(_18), 8_usize, Move(_8), 16_usize, Move(_16)), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn17(mut _1: i128,mut _2: i32,mut _3: bool) -> f64 {
mir! {
type RET = f64;
let _4: usize;
let _5: Adt51;
let _6: [bool; 1];
let _7: i32;
let _8: isize;
let _9: [u32; 8];
let _10: [i32; 6];
let _11: (i32, i128);
let _12: u64;
let _13: i128;
let _14: [bool; 1];
let _15: isize;
let _16: [bool; 1];
let _17: [u32; 8];
let _18: f32;
let _19: char;
let _20: Adt56;
let _21: Adt51;
let _22: u64;
let _23: f64;
let _24: ();
let _25: ();
{
RET = 8492_i16 as f64;
_2 = !398379764_i32;
_3 = false | true;
_4 = !4_usize;
_5.fld2 = 20_isize * (-59_isize);
_7 = _3 as i32;
_3 = true;
RET = 625_u16 as f64;
_7 = _2;
_5.fld1 = [1433550857_u32,1533936667_u32,765772769_u32,1331197378_u32,4054957854_u32,4014904665_u32,3331155151_u32,1201729279_u32];
_8 = _5.fld2;
RET = 5735952625426363479_u64 as f64;
_9 = _5.fld1;
_5.fld0 = 79_u8 as f64;
_11.0 = -_2;
_9 = [2120602722_u32,475173837_u32,2576371968_u32,1877950691_u32,2285847957_u32,316508831_u32,3998423706_u32,2285729331_u32];
_5.fld1 = [3262652757_u32,3549840902_u32,1183095263_u32,3777034839_u32,1295151438_u32,1722473145_u32,1145812440_u32,2885539144_u32];
Goto(bb1)
}
bb1 = {
_13 = _1 + _1;
_11.1 = _1 | _13;
_1 = _11.1 | _11.1;
_11.0 = _2;
_8 = _1 as isize;
Goto(bb2)
}
bb2 = {
_12 = 3730477080769538501_u64;
_3 = !false;
_6 = [_3];
_13 = 34826_u16 as i128;
_7 = _11.0 - _11.0;
_11 = (_7, _1);
_5.fld2 = _8;
_4 = !3776879209974849645_usize;
_1 = _11.1 | _11.1;
_15 = -_8;
_11 = (_7, _1);
Goto(bb3)
}
bb3 = {
_16 = _6;
_5.fld0 = 9820_u16 as f64;
_14 = [_3];
_12 = 4122835190852320311_u64 * 14639071465141975964_u64;
Goto(bb4)
}
bb4 = {
_8 = _5.fld2 >> _5.fld2;
_14 = _16;
_18 = 98_i8 as f32;
_18 = 103_u8 as f32;
Goto(bb5)
}
bb5 = {
_19 = '\u{31d2f}';
_4 = 4_usize * 9063417122104280582_usize;
_1 = -_11.1;
_20.fld1 = (-24124_i16) - 24104_i16;
_6 = [_3];
_8 = -_15;
_9 = [377132420_u32,2930052663_u32,898369105_u32,2249265114_u32,2245443416_u32,4137471593_u32,2300882774_u32,886366230_u32];
_3 = _18 < _18;
_20 = Adt56 { fld0: _1,fld1: 12013_i16 };
RET = _5.fld0 / f64::NEG_INFINITY;
_21.fld0 = _5.fld0 * _5.fld0;
_10 = [_2,_7,_7,_11.0,_7,_11.0];
_20 = Adt56 { fld0: _1,fld1: (-26802_i16) };
_20 = Adt56 { fld0: _1,fld1: 30730_i16 };
_5.fld1 = [3863855753_u32,1033031610_u32,2421147247_u32,4077932488_u32,91693707_u32,2186985650_u32,298053785_u32,1439916031_u32];
Goto(bb6)
}
bb6 = {
_21 = Move(_5);
_11 = (_7, _1);
_16 = _6;
_3 = _20.fld0 < _1;
_2 = _4 as i32;
RET = _21.fld0;
_17 = _9;
_3 = !false;
_16 = [_3];
_23 = _4 as f64;
_11.1 = _1;
_11.1 = _20.fld0;
match _20.fld1 {
0 => bb4,
1 => bb2,
2 => bb5,
3 => bb7,
4 => bb8,
5 => bb9,
6 => bb10,
30730 => bb12,
_ => bb11
}
}
bb7 = {
_19 = '\u{31d2f}';
_4 = 4_usize * 9063417122104280582_usize;
_1 = -_11.1;
_20.fld1 = (-24124_i16) - 24104_i16;
_6 = [_3];
_8 = -_15;
_9 = [377132420_u32,2930052663_u32,898369105_u32,2249265114_u32,2245443416_u32,4137471593_u32,2300882774_u32,886366230_u32];
_3 = _18 < _18;
_20 = Adt56 { fld0: _1,fld1: 12013_i16 };
RET = _5.fld0 / f64::NEG_INFINITY;
_21.fld0 = _5.fld0 * _5.fld0;
_10 = [_2,_7,_7,_11.0,_7,_11.0];
_20 = Adt56 { fld0: _1,fld1: (-26802_i16) };
_20 = Adt56 { fld0: _1,fld1: 30730_i16 };
_5.fld1 = [3863855753_u32,1033031610_u32,2421147247_u32,4077932488_u32,91693707_u32,2186985650_u32,298053785_u32,1439916031_u32];
Goto(bb6)
}
bb8 = {
_8 = _5.fld2 >> _5.fld2;
_14 = _16;
_18 = 98_i8 as f32;
_18 = 103_u8 as f32;
Goto(bb5)
}
bb9 = {
_16 = _6;
_5.fld0 = 9820_u16 as f64;
_14 = [_3];
_12 = 4122835190852320311_u64 * 14639071465141975964_u64;
Goto(bb4)
}
bb10 = {
_12 = 3730477080769538501_u64;
_3 = !false;
_6 = [_3];
_13 = 34826_u16 as i128;
_7 = _11.0 - _11.0;
_11 = (_7, _1);
_5.fld2 = _8;
_4 = !3776879209974849645_usize;
_1 = _11.1 | _11.1;
_15 = -_8;
_11 = (_7, _1);
Goto(bb3)
}
bb11 = {
_13 = _1 + _1;
_11.1 = _1 | _13;
_1 = _11.1 | _11.1;
_11.0 = _2;
_8 = _1 as isize;
Goto(bb2)
}
bb12 = {
_21.fld2 = _8 | _8;
_21.fld0 = -_23;
_11.0 = _2 * _7;
_13 = _1 - _11.1;
match _20.fld1 {
0 => bb11,
1 => bb13,
2 => bb14,
3 => bb15,
4 => bb16,
5 => bb17,
30730 => bb19,
_ => bb18
}
}
bb13 = {
_19 = '\u{31d2f}';
_4 = 4_usize * 9063417122104280582_usize;
_1 = -_11.1;
_20.fld1 = (-24124_i16) - 24104_i16;
_6 = [_3];
_8 = -_15;
_9 = [377132420_u32,2930052663_u32,898369105_u32,2249265114_u32,2245443416_u32,4137471593_u32,2300882774_u32,886366230_u32];
_3 = _18 < _18;
_20 = Adt56 { fld0: _1,fld1: 12013_i16 };
RET = _5.fld0 / f64::NEG_INFINITY;
_21.fld0 = _5.fld0 * _5.fld0;
_10 = [_2,_7,_7,_11.0,_7,_11.0];
_20 = Adt56 { fld0: _1,fld1: (-26802_i16) };
_20 = Adt56 { fld0: _1,fld1: 30730_i16 };
_5.fld1 = [3863855753_u32,1033031610_u32,2421147247_u32,4077932488_u32,91693707_u32,2186985650_u32,298053785_u32,1439916031_u32];
Goto(bb6)
}
bb14 = {
_8 = _5.fld2 >> _5.fld2;
_14 = _16;
_18 = 98_i8 as f32;
_18 = 103_u8 as f32;
Goto(bb5)
}
bb15 = {
_16 = _6;
_5.fld0 = 9820_u16 as f64;
_14 = [_3];
_12 = 4122835190852320311_u64 * 14639071465141975964_u64;
Goto(bb4)
}
bb16 = {
_8 = _5.fld2 >> _5.fld2;
_14 = _16;
_18 = 98_i8 as f32;
_18 = 103_u8 as f32;
Goto(bb5)
}
bb17 = {
_16 = _6;
_5.fld0 = 9820_u16 as f64;
_14 = [_3];
_12 = 4122835190852320311_u64 * 14639071465141975964_u64;
Goto(bb4)
}
bb18 = {
_13 = _1 + _1;
_11.1 = _1 | _13;
_1 = _11.1 | _11.1;
_11.0 = _2;
_8 = _1 as isize;
Goto(bb2)
}
bb19 = {
_4 = 4722073323452963786_usize;
_20 = Adt56 { fld0: _11.1,fld1: 22300_i16 };
_11.0 = _3 as i32;
RET = _23 / 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002202244390687764_f64;
_9 = [83258740_u32,4087410433_u32,3358417451_u32,183835100_u32,869497722_u32,3255546629_u32,1882007829_u32,4227937023_u32];
Goto(bb20)
}
bb20 = {
Call(_24 = dump_var(17_usize, 11_usize, Move(_11), 15_usize, Move(_15), 17_usize, Move(_17), 16_usize, Move(_16)), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
Call(_24 = dump_var(17_usize, 8_usize, Move(_8), 13_usize, Move(_13), 10_usize, Move(_10), 9_usize, Move(_9)), ReturnTo(bb22), UnwindUnreachable())
}
bb22 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn18(mut _1: u128,mut _2: char,mut _3: *mut u64) -> isize {
mir! {
type RET = isize;
let _4: *mut char;
let _5: isize;
let _6: i16;
let _7: [u32; 8];
let _8: [u32; 8];
let _9: (i16, *const f64);
let _10: usize;
let _11: (i32, i128);
let _12: u64;
let _13: isize;
let _14: *const (i64, *mut u64, u128, [i32; 6], *const *const f64, (i8,));
let _15: f32;
let _16: Adt56;
let _17: (u64,);
let _18: (isize, i64, (i8,), (u64,), *const f64, i128);
let _19: (i8,);
let _20: u8;
let _21: f32;
let _22: isize;
let _23: (i16, *const f64);
let _24: ();
let _25: ();
{
_3 = core::ptr::addr_of_mut!((*_3));
(*_3) = 14878511793398964596548436604609315010_i128 as u64;
RET = 9223372036854775807_isize >> _1;
RET = -9223372036854775807_isize;
(*_3) = !14422796689275119268_u64;
RET = 18_isize + (-127_isize);
_3 = core::ptr::addr_of_mut!((*_3));
_4 = core::ptr::addr_of_mut!(_2);
_5 = 6895_i16 as isize;
_1 = !248503969112480687580482617683234532171_u128;
_1 = _5 as u128;
Goto(bb1)
}
bb1 = {
_6 = _5 as i16;
RET = -_5;
_3 = core::ptr::addr_of_mut!((*_3));
_1 = 18863744695561720416968717751370206641_u128;
_2 = '\u{1576f}';
_6 = (-20236_i16) + 20573_i16;
_5 = (-7_isize) * (-9223372036854775808_isize);
RET = _5 + _5;
_3 = core::ptr::addr_of_mut!((*_3));
_4 = core::ptr::addr_of_mut!((*_4));
_3 = core::ptr::addr_of_mut!((*_3));
(*_4) = '\u{e0df9}';
(*_3) = !12994754205812107406_u64;
_4 = core::ptr::addr_of_mut!((*_4));
_3 = core::ptr::addr_of_mut!((*_3));
_4 = core::ptr::addr_of_mut!((*_4));
_3 = core::ptr::addr_of_mut!((*_3));
_1 = 178792903272199906298358675325668978643_u128 * 14891664284923631496236656026499698398_u128;
_5 = -91_isize;
_7 = [1788208610_u32,2106574120_u32,2911436977_u32,2401918113_u32,2685885089_u32,3054862282_u32,3737392622_u32,1061882720_u32];
RET = !_5;
(*_3) = 15113061435979570261_u64;
(*_3) = !10368458789309628854_u64;
(*_4) = '\u{1b447}';
Goto(bb2)
}
bb2 = {
(*_3) = 11632559727721632788_u64;
_5 = 3590409264_u32 as isize;
(*_3) = 7302417023206293711_u64;
_11.1 = (-150405335528865707208567682513785124597_i128) & (-21471648567391514685430860368301619982_i128);
_11.1 = 7744044615154591973175211373709209311_i128;
_11.1 = (-98471418768098308817434650216502534644_i128);
_3 = core::ptr::addr_of_mut!(_12);
_11 = (934932056_i32, 70892356562625848657795739349600226837_i128);
Goto(bb3)
}
bb3 = {
RET = _5 - _5;
RET = !_5;
_11.0 = (-906817091_i32) & (-1939495029_i32);
_12 = 8459518139108409406_i64 as u64;
RET = (-50_i8) as isize;
_11.1 = (*_4) as i128;
_13 = -_5;
_12 = 2764619658314813383_i64 as u64;
Goto(bb4)
}
bb4 = {
_3 = core::ptr::addr_of_mut!(_12);
_12 = !5956983566948573519_u64;
_11 = (1506774778_i32, 169795281572571206851189948089141354631_i128);
_9.0 = _6 + _6;
_11.1 = (-18417922457522286325845321488353806113_i128);
RET = _13 << _1;
_12 = !17894552086789870450_u64;
_11 = ((-1850531266_i32), (-127032241139556870834287166913432689619_i128));
_1 = 68185969026117757472537907505647891751_u128 >> (*_3);
_13 = _5;
_12 = 3577674046124261542_u64;
_8 = _7;
_3 = core::ptr::addr_of_mut!((*_3));
_9.0 = _6 >> _1;
(*_4) = '\u{6f601}';
_16.fld1 = -_9.0;
_8 = [844060442_u32,3333382240_u32,1212919718_u32,300830162_u32,3363504843_u32,1424377274_u32,3094725268_u32,4154333779_u32];
_9.0 = _6;
_19 = ((-119_i8),);
Call(_18.3.0 = core::intrinsics::bswap((*_3)), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
_18.2 = _19;
(*_4) = '\u{f743a}';
_8 = _7;
_4 = core::ptr::addr_of_mut!(_2);
_17.0 = !(*_3);
_16 = Adt56 { fld0: _11.1,fld1: _6 };
_18.2.0 = _6 as i8;
RET = -_5;
_16.fld1 = _6;
match _16.fld0 {
0 => bb6,
1 => bb7,
2 => bb8,
3 => bb9,
4 => bb10,
5 => bb11,
213250125781381592629087440518335521837 => bb13,
_ => bb12
}
}
bb6 = {
_3 = core::ptr::addr_of_mut!(_12);
_12 = !5956983566948573519_u64;
_11 = (1506774778_i32, 169795281572571206851189948089141354631_i128);
_9.0 = _6 + _6;
_11.1 = (-18417922457522286325845321488353806113_i128);
RET = _13 << _1;
_12 = !17894552086789870450_u64;
_11 = ((-1850531266_i32), (-127032241139556870834287166913432689619_i128));
_1 = 68185969026117757472537907505647891751_u128 >> (*_3);
_13 = _5;
_12 = 3577674046124261542_u64;
_8 = _7;
_3 = core::ptr::addr_of_mut!((*_3));
_9.0 = _6 >> _1;
(*_4) = '\u{6f601}';
_16.fld1 = -_9.0;
_8 = [844060442_u32,3333382240_u32,1212919718_u32,300830162_u32,3363504843_u32,1424377274_u32,3094725268_u32,4154333779_u32];
_9.0 = _6;
_19 = ((-119_i8),);
Call(_18.3.0 = core::intrinsics::bswap((*_3)), ReturnTo(bb5), UnwindUnreachable())
}
bb7 = {
RET = _5 - _5;
RET = !_5;
_11.0 = (-906817091_i32) & (-1939495029_i32);
_12 = 8459518139108409406_i64 as u64;
RET = (-50_i8) as isize;
_11.1 = (*_4) as i128;
_13 = -_5;
_12 = 2764619658314813383_i64 as u64;
Goto(bb4)
}
bb8 = {
(*_3) = 11632559727721632788_u64;
_5 = 3590409264_u32 as isize;
(*_3) = 7302417023206293711_u64;
_11.1 = (-150405335528865707208567682513785124597_i128) & (-21471648567391514685430860368301619982_i128);
_11.1 = 7744044615154591973175211373709209311_i128;
_11.1 = (-98471418768098308817434650216502534644_i128);
_3 = core::ptr::addr_of_mut!(_12);
_11 = (934932056_i32, 70892356562625848657795739349600226837_i128);
Goto(bb3)
}
bb9 = {
_6 = _5 as i16;
RET = -_5;
_3 = core::ptr::addr_of_mut!((*_3));
_1 = 18863744695561720416968717751370206641_u128;
_2 = '\u{1576f}';
_6 = (-20236_i16) + 20573_i16;
_5 = (-7_isize) * (-9223372036854775808_isize);
RET = _5 + _5;
_3 = core::ptr::addr_of_mut!((*_3));
_4 = core::ptr::addr_of_mut!((*_4));
_3 = core::ptr::addr_of_mut!((*_3));
(*_4) = '\u{e0df9}';
(*_3) = !12994754205812107406_u64;
_4 = core::ptr::addr_of_mut!((*_4));
_3 = core::ptr::addr_of_mut!((*_3));
_4 = core::ptr::addr_of_mut!((*_4));
_3 = core::ptr::addr_of_mut!((*_3));
_1 = 178792903272199906298358675325668978643_u128 * 14891664284923631496236656026499698398_u128;
_5 = -91_isize;
_7 = [1788208610_u32,2106574120_u32,2911436977_u32,2401918113_u32,2685885089_u32,3054862282_u32,3737392622_u32,1061882720_u32];
RET = !_5;
(*_3) = 15113061435979570261_u64;
(*_3) = !10368458789309628854_u64;
(*_4) = '\u{1b447}';
Goto(bb2)
}
bb10 = {
Return()
}
bb11 = {
Return()
}
bb12 = {
Return()
}
bb13 = {
_18.5 = _1 as i128;
_17 = (_12,);
_20 = !92_u8;
_10 = 14914525563584453301_usize;
_20 = 160_u8;
(*_4) = '\u{105313}';
_18.5 = _16.fld0;
_18.0 = (*_4) as isize;
_17 = ((*_3),);
(*_3) = _10 as u64;
_20 = !3_u8;
_18.1 = _10 as i64;
_3 = core::ptr::addr_of_mut!(_12);
_9.0 = !_6;
_15 = _12 as f32;
(*_3) = !_17.0;
match _17.0 {
3577674046124261542 => bb15,
_ => bb14
}
}
bb14 = {
Return()
}
bb15 = {
_21 = 35432_u16 as f32;
_16.fld1 = _9.0 & _6;
_19.0 = !_18.2.0;
_11.0 = -(-853098610_i32);
_19 = _18.2;
RET = _5;
_19 = _18.2;
_23.0 = -_9.0;
_17.0 = _2 as u64;
_6 = 3014034191_u32 as i16;
_12 = _18.0 as u64;
_2 = '\u{779cc}';
Goto(bb16)
}
bb16 = {
Call(_24 = dump_var(18_usize, 20_usize, Move(_20), 11_usize, Move(_11), 2_usize, Move(_2), 10_usize, Move(_10)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_24 = dump_var(18_usize, 8_usize, Move(_8), 17_usize, Move(_17), 25_usize, _25, 25_usize, _25), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
pub fn main() {
                fn0(std::hint::black_box(10267524969186805484_u64), std::hint::black_box(23203_i16));
                
            }
#[derive(Debug)]
pub struct Adt50 {
fld0: (u64,),
fld1: (*const u64, f64),
fld2: [i32; 6],
}
#[derive(Debug)]
pub struct Adt51 {
fld0: f64,
fld1: [u32; 8],
fld2: isize,
}
#[derive(Debug)]
pub struct Adt52 {
fld0: (i16, *const f64),
fld1: (*mut char,),
}
#[derive(Debug)]
pub struct Adt53 {
fld0: *const *const f64,
}
#[derive(Debug)]
pub struct Adt54 {
fld0: *const (i64, *mut u64, u128, [i32; 6], *const *const f64, (i8,)),
fld1: [u16; 8],
fld2: *const u64,
fld3: *const *const f64,
fld4: (*const u64, f64),
}
#[derive(Debug,Copy,Clone)]
pub struct Adt55 {
fld0: (((i128, isize, *mut u64, u16, u128, i8, i16, u32, u128), i8, char), usize),
}
#[derive(Debug,Copy,Clone)]
pub struct Adt56 {
fld0: i128,
fld1: i16,
}
#[derive(Debug)]
pub struct Adt57 {
fld0: bool,
fld1: (i32, i128),
fld2: *const (i64, *mut u64, u128, [i32; 6], *const *const f64, (i8,)),
fld3: i8,
fld4: [bool; 4],
fld5: (i16, [i32; 6]),
}
#[derive(Debug)]
pub struct Adt58 {
fld0: *const *const f64,
fld1: Adt54,
}
#[derive(Debug)]
pub struct Adt59 {
fld0: (*const u64, (i128, isize, *mut u64, u16, u128, i8, i16, u32, u128), (*mut char,), *const u64),
fld1: Adt56,
fld2: isize,
fld3: Adt57,
fld4: *const *const f64,
fld5: u128,
fld6: (u64, u128),
}
#[derive(Debug,Copy,Clone)]
pub struct Adt60 {
fld0: [u64; 2],
fld1: i128,
fld2: *const u16,
fld3: [u16; 8],
fld4: i16,
fld5: u8,
}
#[derive(Debug)]
pub struct Adt61 {
fld0: (i16, [i32; 6]),
}
#[derive(Debug)]
pub struct Adt62 {
fld0: Adt61,
fld1: (i16, [i32; 6]),
fld2: Adt59,
}
#[derive(Debug)]
pub struct Adt63 {
fld0: Adt61,
fld1: [u32; 8],
fld2: Adt59,
fld3: *mut (((i128, isize, *mut u64, u16, u128, i8, i16, u32, u128), i8, char), usize),
fld4: ((i128, isize, *mut u64, u16, u128, i8, i16, u32, u128), i8, char),
fld5: [bool; 1],
}
#[derive(Debug)]
pub struct Adt64 {
fld0: Adt58,
}
#[derive(Debug)]
pub struct Adt65 {
fld0: (*const u64, f64),
fld1: [bool; 4],
fld2: *mut i16,
fld3: (i16, [i32; 6]),
fld4: *mut *mut i16,
fld5: u32,
fld6: u128,
}
#[derive(Debug)]
pub struct Adt66 {
fld0: Adt52,
fld1: (((i128, isize, *mut u64, u16, u128, i8, i16, u32, u128), i8, char), usize),
}

