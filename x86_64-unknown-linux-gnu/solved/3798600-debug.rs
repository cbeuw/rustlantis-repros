#![recursion_limit = "1024"]
    #![feature(custom_mir, core_intrinsics, const_hash)]
    #![allow(unused_parens, unused_assignments, overflowing_literals)]
    extern crate core;
    use core::intrinsics::mir::*;

    use std::fmt::Debug;

    #[inline(never)]
    fn dump_var(
        f: usize,
        var0: usize, val0: impl Debug,
        var1: usize, val1: impl Debug,
        var2: usize, val2: impl Debug,
        var3: usize, val3: impl Debug,
    ) {
        println!("fn{f}:_{var0} = {val0:?}\n_{var1} = {val1:?}\n_{var2} = {val2:?}\n_{var3} = {val3:?}");
    }
    #[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn0(mut _1: u128,mut _2: char,mut _3: u32,mut _4: i8,mut _5: u16,mut _6: i32) -> u128 {
mir! {
type RET = u128;
let _7: (isize,);
let _8: (u8, u64, i64);
let _9: isize;
let _10: [isize; 3];
let _11: f32;
let _12: *mut i8;
let _13: i8;
let _14: usize;
let _15: isize;
let _16: isize;
let _17: bool;
let _18: (*mut char, usize, i128);
let _19: char;
let _20: (bool,);
let _21: isize;
let _22: (isize,);
let _23: isize;
let _24: Adt51;
let _25: Adt59;
let _26: Adt51;
let _27: (*mut char, usize, i128);
let _28: &'static u64;
let _29: [char; 7];
let _30: (bool,);
let _31: *mut u16;
let _32: [isize; 7];
let _33: ();
let _34: ();
{
_4 = 105_i8;
_6 = 187620086610259279057157474123257791468_u128 as i32;
_3 = !525972548_u32;
_3 = !1993283560_u32;
_6 = 491944152_i32 - (-2116469709_i32);
RET = 53481519157513606590906313325756817535_u128;
RET = !213465291754459447749254499510733428891_u128;
_4 = -(-81_i8);
_3 = !2564826404_u32;
_2 = '\u{85abe}';
_8.1 = RET as u64;
_3 = 4022460109_u32;
_7.0 = (-115_isize);
_13 = _4;
_3 = 1478192916_u32 ^ 3802905291_u32;
_4 = _13 & _13;
_12 = core::ptr::addr_of_mut!(_4);
match _7.0 {
0 => bb1,
1 => bb2,
2 => bb3,
340282366920938463463374607431768211341 => bb5,
_ => bb4
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
RET = !300551220690709208895643598646822705725_u128;
_5 = !3028_u16;
_4 = !_13;
Call(_12 = fn1(_7, _2, RET, RET, _8.1, _6, RET, _8.1, _7.0, _8.1, (*_12), _3, (*_12), _4), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
_15 = _2 as isize;
_9 = _15;
_2 = '\u{f3198}';
_2 = '\u{4bdc8}';
_14 = 2670493224763779576_usize;
_15 = false as isize;
_7.0 = _15 ^ _9;
_8.0 = 34_u8;
_3 = _2 as u32;
_7.0 = -_15;
_9 = _7.0 >> _14;
_12 = core::ptr::addr_of_mut!(_13);
_14 = 7305338452037982219_usize * 14695045653618378464_usize;
_11 = _8.1 as f32;
_18.0 = core::ptr::addr_of_mut!(_2);
RET = _8.1 as u128;
_18.2 = !135992907161430275496634219985135813308_i128;
_18.0 = core::ptr::addr_of_mut!(_2);
_6 = !2093137167_i32;
match _8.0 {
0 => bb1,
1 => bb7,
2 => bb8,
34 => bb10,
_ => bb9
}
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_1 = RET << _13;
_17 = true;
_16 = _7.0 * _15;
_8.2 = (-4834666220652343516_i64) & (-7775655674112742956_i64);
RET = _17 as u128;
_20.0 = _4 == (*_12);
_11 = _16 as f32;
_3 = 3879318566_u32;
_6 = !1623271211_i32;
_1 = !RET;
_10 = [_9,_16,_9];
_20.0 = !_17;
_19 = _2;
_21 = _15 & _9;
_11 = _8.2 as f32;
_18.1 = _14 - _14;
_3 = !2041423962_u32;
_24.fld4.2 = _21 as f64;
match _8.0 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb7,
4 => bb5,
34 => bb12,
_ => bb11
}
}
bb11 = {
Return()
}
bb12 = {
_18.1 = _14 & _14;
_24.fld3.fld2 = [_5,_5,_5,_5,_5];
_24.fld3.fld3 = _8.2 | _8.2;
RET = _1;
_18.1 = _18.2 as usize;
_6 = (-884258646_i32);
_24.fld4.0.0 = core::ptr::addr_of_mut!(_19);
_24.fld4.0.0 = core::ptr::addr_of_mut!(_19);
_25.fld1 = core::ptr::addr_of_mut!(_8.0);
_24.fld5 = core::ptr::addr_of!(_25.fld1);
_7 = (_16,);
_24.fld4.2 = _18.2 as f64;
_24.fld4.2 = _8.0 as f64;
_26.fld5 = core::ptr::addr_of!(_25.fld1);
_18.0 = core::ptr::addr_of_mut!(_19);
_24.fld1 = _24.fld4.2 + _24.fld4.2;
_26.fld3.fld4 = (-10190_i16) & (-32715_i16);
_24.fld4.1 = [_19,_19,_2,_19,_2,_2,_2];
_5 = 6527_u16 - 64554_u16;
_26.fld4.0 = (_18.0, _14, _18.2);
_23 = _17 as isize;
_9 = _16;
_26.fld3.fld5 = core::ptr::addr_of_mut!(_26.fld3.fld0);
match _8.0 {
34 => bb14,
_ => bb13
}
}
bb13 = {
Return()
}
bb14 = {
_26.fld2 = [_8.2,_24.fld3.fld3,_24.fld3.fld3,_8.2,_24.fld3.fld3,_24.fld3.fld3,_8.2,_24.fld3.fld3];
_26.fld4.0 = _18;
_30 = _20;
_29 = [_19,_2,_2,_19,_19,_19,_19];
_22 = _7;
_27.0 = _26.fld4.0.0;
_20.0 = _30.0;
Goto(bb15)
}
bb15 = {
Call(_33 = dump_var(0_usize, 6_usize, Move(_6), 7_usize, Move(_7), 17_usize, Move(_17), 4_usize, Move(_4)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_33 = dump_var(0_usize, 19_usize, Move(_19), 30_usize, Move(_30), 3_usize, Move(_3), 15_usize, Move(_15)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_33 = dump_var(0_usize, 14_usize, Move(_14), 1_usize, Move(_1), 29_usize, Move(_29), 34_usize, _34), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn1(mut _1: (isize,),mut _2: char,mut _3: u128,mut _4: u128,mut _5: u64,mut _6: i32,mut _7: u128,mut _8: u64,mut _9: isize,mut _10: u64,mut _11: i8,mut _12: u32,mut _13: i8,mut _14: i8) -> *mut i8 {
mir! {
type RET = *mut i8;
let _15: u64;
let _16: [char; 7];
let _17: Adt55;
let _18: i8;
let _19: (bool,);
let _20: [u16; 5];
let _21: [isize; 7];
let _22: bool;
let _23: (*mut char, usize, i128);
let _24: (i32, (usize, i64, f32, i64, &'static u64, u32), i8, (*mut u16, i128));
let _25: u128;
let _26: usize;
let _27: *mut u8;
let _28: Adt47;
let _29: char;
let _30: Adt56;
let _31: i8;
let _32: usize;
let _33: u16;
let _34: [isize; 7];
let _35: Adt59;
let _36: char;
let _37: ();
let _38: ();
{
RET = core::ptr::addr_of_mut!(_14);
_3 = _7;
_3 = _7;
_7 = _3 << _5;
_14 = _12 as i8;
RET = core::ptr::addr_of_mut!((*RET));
_5 = !_8;
Call(RET = fn2(_2, _12, (*RET), (*RET)), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_1.0 = _9 - _9;
_8 = 6_usize as u64;
_10 = _5;
RET = core::ptr::addr_of_mut!(_11);
_12 = 2936155495_u32 - 3234123493_u32;
Goto(bb2)
}
bb2 = {
_8 = _10;
_6 = (-1798656686_i32) - (-662635714_i32);
_6 = -1704626869_i32;
_14 = _4 as i8;
_9 = _1.0;
_5 = 7355103728222238418_i64 as u64;
_7 = _3;
_8 = _5;
_13 = !(*RET);
_9 = !_1.0;
_9 = _1.0;
_10 = _5 + _8;
RET = core::ptr::addr_of_mut!((*RET));
_16 = [_2,_2,_2,_2,_2,_2,_2];
_4 = _7 & _3;
RET = core::ptr::addr_of_mut!(_13);
_17.fld3.1 = 75_u8 as i128;
_17.fld0 = _9 as u64;
_10 = _17.fld0 & _17.fld0;
Call(_3 = core::intrinsics::transmute(_4), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_15 = _10 - _10;
_10 = _15;
_9 = _17.fld3.1 as isize;
_18 = 4_usize as i8;
_10 = _15 << _17.fld3.1;
_16 = [_2,_2,_2,_2,_2,_2,_2];
_3 = _4;
_9 = _1.0;
RET = core::ptr::addr_of_mut!(_14);
RET = core::ptr::addr_of_mut!(_14);
_9 = -_1.0;
_17.fld3.1 = -(-126012267311147877604935609079887664943_i128);
RET = core::ptr::addr_of_mut!((*RET));
_1.0 = _9 * _9;
_5 = _10;
_13 = (-4422615020523437822_i64) as i8;
_20 = [58590_u16,16639_u16,32371_u16,56349_u16,50009_u16];
_19.0 = false;
RET = core::ptr::addr_of_mut!((*RET));
_11 = (*RET) | _14;
_17.fld0 = _5 << (*RET);
_16 = [_2,_2,_2,_2,_2,_2,_2];
_14 = !_13;
_19.0 = true & true;
_19 = (false,);
RET = core::ptr::addr_of_mut!((*RET));
RET = core::ptr::addr_of_mut!(_18);
_19 = (false,);
_10 = _17.fld0;
Goto(bb4)
}
bb4 = {
_10 = _17.fld0;
_17.fld0 = !_5;
_16 = [_2,_2,_2,_2,_2,_2,_2];
_10 = _12 as u64;
_5 = !_17.fld0;
_9 = _1.0 >> _5;
_13 = -(*RET);
_1 = (_9,);
_13 = _11 - _14;
_19 = (false,);
_21 = [_1.0,_9,_9,_1.0,_9,_1.0,_9];
_2 = '\u{461bc}';
_15 = _8 + _10;
_3 = !_4;
_17.fld3.1 = 17512475027523484783541854073096529113_i128;
_17.fld0 = _6 as u64;
_21 = [_1.0,_9,_9,_1.0,_9,_1.0,_9];
_13 = _14 + _11;
_2 = '\u{546d9}';
_2 = '\u{301c3}';
_17.fld2 = _1.0;
_19.0 = false;
_17.fld2 = -_9;
_3 = _2 as u128;
_16 = [_2,_2,_2,_2,_2,_2,_2];
_5 = _15 ^ _10;
Goto(bb5)
}
bb5 = {
_2 = '\u{e6045}';
_11 = _13 | _13;
_24.1.1 = _17.fld2 as i64;
_24.1.2 = _1.0 as f32;
_24.3.1 = _17.fld3.1 & _17.fld3.1;
_24.1.5 = _24.1.1 as u32;
_3 = _7 >> _1.0;
match _17.fld3.1 {
17512475027523484783541854073096529113 => bb7,
_ => bb6
}
}
bb6 = {
_1.0 = _9 - _9;
_8 = 6_usize as u64;
_10 = _5;
RET = core::ptr::addr_of_mut!(_11);
_12 = 2936155495_u32 - 3234123493_u32;
Goto(bb2)
}
bb7 = {
_3 = _4 >> _17.fld2;
_20 = [26285_u16,61484_u16,23529_u16,21523_u16,27046_u16];
_24.1.3 = _24.1.1;
_24.1.0 = 2_usize;
_8 = _24.1.2 as u64;
_23.0 = core::ptr::addr_of_mut!(_2);
_10 = !_8;
_24.1.0 = 7_usize;
RET = core::ptr::addr_of_mut!((*RET));
_22 = !_19.0;
Goto(bb8)
}
bb8 = {
_5 = _8;
_5 = _10 & _8;
_19 = (_22,);
_24.3.1 = _17.fld3.1 >> _10;
_17.fld2 = 186_u8 as isize;
_4 = _17.fld3.1 as u128;
_6 = 1086749503_i32 << _24.1.5;
_14 = _11 << _6;
_15 = !_10;
_1.0 = _9 << _10;
RET = core::ptr::addr_of_mut!(_18);
_7 = _3;
_21 = [_1.0,_1.0,_9,_1.0,_9,_9,_1.0];
_23.1 = _24.1.0;
_23.1 = _24.1.0;
RET = core::ptr::addr_of_mut!(_18);
_5 = _12 as u64;
_24.1.1 = _24.1.3 | _24.1.3;
_15 = !_8;
Goto(bb9)
}
bb9 = {
_1 = (_9,);
_17.fld2 = _1.0;
Goto(bb10)
}
bb10 = {
_11 = !(*RET);
_6 = (-461849008_i32) - (-301945862_i32);
_10 = _24.1.5 as u64;
_17.fld3.0 = core::ptr::addr_of_mut!(_33);
_1 = (_9,);
_16 = [_2,_2,_2,_2,_2,_2,_2];
_24.3.0 = core::ptr::addr_of_mut!(_33);
_25 = _3 + _7;
match _23.1 {
0 => bb11,
7 => bb13,
_ => bb12
}
}
bb11 = {
_3 = _4 >> _17.fld2;
_20 = [26285_u16,61484_u16,23529_u16,21523_u16,27046_u16];
_24.1.3 = _24.1.1;
_24.1.0 = 2_usize;
_8 = _24.1.2 as u64;
_23.0 = core::ptr::addr_of_mut!(_2);
_10 = !_8;
_24.1.0 = 7_usize;
RET = core::ptr::addr_of_mut!((*RET));
_22 = !_19.0;
Goto(bb8)
}
bb12 = {
_15 = _10 - _10;
_10 = _15;
_9 = _17.fld3.1 as isize;
_18 = 4_usize as i8;
_10 = _15 << _17.fld3.1;
_16 = [_2,_2,_2,_2,_2,_2,_2];
_3 = _4;
_9 = _1.0;
RET = core::ptr::addr_of_mut!(_14);
RET = core::ptr::addr_of_mut!(_14);
_9 = -_1.0;
_17.fld3.1 = -(-126012267311147877604935609079887664943_i128);
RET = core::ptr::addr_of_mut!((*RET));
_1.0 = _9 * _9;
_5 = _10;
_13 = (-4422615020523437822_i64) as i8;
_20 = [58590_u16,16639_u16,32371_u16,56349_u16,50009_u16];
_19.0 = false;
RET = core::ptr::addr_of_mut!((*RET));
_11 = (*RET) | _14;
_17.fld0 = _5 << (*RET);
_16 = [_2,_2,_2,_2,_2,_2,_2];
_14 = !_13;
_19.0 = true & true;
_19 = (false,);
RET = core::ptr::addr_of_mut!((*RET));
RET = core::ptr::addr_of_mut!(_18);
_19 = (false,);
_10 = _17.fld0;
Goto(bb4)
}
bb13 = {
_24.1.2 = _24.3.1 as f32;
match _23.1 {
0 => bb14,
1 => bb15,
2 => bb16,
3 => bb17,
4 => bb18,
7 => bb20,
_ => bb19
}
}
bb14 = {
_15 = _10 - _10;
_10 = _15;
_9 = _17.fld3.1 as isize;
_18 = 4_usize as i8;
_10 = _15 << _17.fld3.1;
_16 = [_2,_2,_2,_2,_2,_2,_2];
_3 = _4;
_9 = _1.0;
RET = core::ptr::addr_of_mut!(_14);
RET = core::ptr::addr_of_mut!(_14);
_9 = -_1.0;
_17.fld3.1 = -(-126012267311147877604935609079887664943_i128);
RET = core::ptr::addr_of_mut!((*RET));
_1.0 = _9 * _9;
_5 = _10;
_13 = (-4422615020523437822_i64) as i8;
_20 = [58590_u16,16639_u16,32371_u16,56349_u16,50009_u16];
_19.0 = false;
RET = core::ptr::addr_of_mut!((*RET));
_11 = (*RET) | _14;
_17.fld0 = _5 << (*RET);
_16 = [_2,_2,_2,_2,_2,_2,_2];
_14 = !_13;
_19.0 = true & true;
_19 = (false,);
RET = core::ptr::addr_of_mut!((*RET));
RET = core::ptr::addr_of_mut!(_18);
_19 = (false,);
_10 = _17.fld0;
Goto(bb4)
}
bb15 = {
_3 = _4 >> _17.fld2;
_20 = [26285_u16,61484_u16,23529_u16,21523_u16,27046_u16];
_24.1.3 = _24.1.1;
_24.1.0 = 2_usize;
_8 = _24.1.2 as u64;
_23.0 = core::ptr::addr_of_mut!(_2);
_10 = !_8;
_24.1.0 = 7_usize;
RET = core::ptr::addr_of_mut!((*RET));
_22 = !_19.0;
Goto(bb8)
}
bb16 = {
_11 = !(*RET);
_6 = (-461849008_i32) - (-301945862_i32);
_10 = _24.1.5 as u64;
_17.fld3.0 = core::ptr::addr_of_mut!(_33);
_1 = (_9,);
_16 = [_2,_2,_2,_2,_2,_2,_2];
_24.3.0 = core::ptr::addr_of_mut!(_33);
_25 = _3 + _7;
match _23.1 {
0 => bb11,
7 => bb13,
_ => bb12
}
}
bb17 = {
_10 = _17.fld0;
_17.fld0 = !_5;
_16 = [_2,_2,_2,_2,_2,_2,_2];
_10 = _12 as u64;
_5 = !_17.fld0;
_9 = _1.0 >> _5;
_13 = -(*RET);
_1 = (_9,);
_13 = _11 - _14;
_19 = (false,);
_21 = [_1.0,_9,_9,_1.0,_9,_1.0,_9];
_2 = '\u{461bc}';
_15 = _8 + _10;
_3 = !_4;
_17.fld3.1 = 17512475027523484783541854073096529113_i128;
_17.fld0 = _6 as u64;
_21 = [_1.0,_9,_9,_1.0,_9,_1.0,_9];
_13 = _14 + _11;
_2 = '\u{546d9}';
_2 = '\u{301c3}';
_17.fld2 = _1.0;
_19.0 = false;
_17.fld2 = -_9;
_3 = _2 as u128;
_16 = [_2,_2,_2,_2,_2,_2,_2];
_5 = _15 ^ _10;
Goto(bb5)
}
bb18 = {
_1.0 = _9 - _9;
_8 = 6_usize as u64;
_10 = _5;
RET = core::ptr::addr_of_mut!(_11);
_12 = 2936155495_u32 - 3234123493_u32;
Goto(bb2)
}
bb19 = {
_2 = '\u{e6045}';
_11 = _13 | _13;
_24.1.1 = _17.fld2 as i64;
_24.1.2 = _1.0 as f32;
_24.3.1 = _17.fld3.1 & _17.fld3.1;
_24.1.5 = _24.1.1 as u32;
_3 = _7 >> _1.0;
match _17.fld3.1 {
17512475027523484783541854073096529113 => bb7,
_ => bb6
}
}
bb20 = {
_5 = _10;
_24.1.4 = &_15;
_24.1.4 = &_8;
_5 = _10;
_7 = _11 as u128;
_32 = !_24.1.0;
_4 = _25;
_25 = _3 + _7;
_24.3.0 = core::ptr::addr_of_mut!(_33);
_33 = _24.3.1 as u16;
_33 = 37172_u16 << _3;
_11 = _14;
_12 = !_24.1.5;
_24.0 = _6;
_5 = !_8;
_24.2 = _18 + _14;
_7 = _3;
_1 = (_17.fld2,);
_35.fld2.0 = !_19.0;
_32 = !_23.1;
_17.fld2 = _23.1 as isize;
Goto(bb21)
}
bb21 = {
Call(_37 = dump_var(1_usize, 6_usize, Move(_6), 2_usize, Move(_2), 33_usize, Move(_33), 13_usize, Move(_13)), ReturnTo(bb22), UnwindUnreachable())
}
bb22 = {
Call(_37 = dump_var(1_usize, 1_usize, Move(_1), 7_usize, Move(_7), 4_usize, Move(_4), 11_usize, Move(_11)), ReturnTo(bb23), UnwindUnreachable())
}
bb23 = {
Call(_37 = dump_var(1_usize, 14_usize, Move(_14), 32_usize, Move(_32), 18_usize, Move(_18), 25_usize, Move(_25)), ReturnTo(bb24), UnwindUnreachable())
}
bb24 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn2(mut _1: char,mut _2: u32,mut _3: i8,mut _4: i8) -> *mut i8 {
mir! {
type RET = *mut i8;
let _5: u16;
let _6: isize;
let _7: [i64; 8];
let _8: bool;
let _9: isize;
let _10: u16;
let _11: [char; 7];
let _12: ([u16; 5],);
let _13: *const i64;
let _14: ([u16; 5],);
let _15: (*mut u16, i128);
let _16: [u16; 5];
let _17: [i64; 8];
let _18: Adt47;
let _19: *mut [i64; 8];
let _20: i128;
let _21: u16;
let _22: (u8, u64, i64);
let _23: (isize,);
let _24: (isize,);
let _25: i128;
let _26: u8;
let _27: isize;
let _28: i8;
let _29: Adt50;
let _30: Adt48;
let _31: ([u16; 5],);
let _32: [char; 7];
let _33: [isize; 3];
let _34: u32;
let _35: [u16; 5];
let _36: Adt50;
let _37: i32;
let _38: [char; 7];
let _39: (u128, (isize,), u32, (usize,));
let _40: Adt56;
let _41: bool;
let _42: bool;
let _43: usize;
let _44: (u128, (isize,), u32, (usize,));
let _45: Adt56;
let _46: [isize; 3];
let _47: bool;
let _48: (u8, u64, i64);
let _49: ();
let _50: ();
{
RET = core::ptr::addr_of_mut!(_4);
_2 = (-1297449471_i32) as u32;
_6 = (-90_isize);
RET = core::ptr::addr_of_mut!((*RET));
RET = core::ptr::addr_of_mut!((*RET));
_2 = 1881827710_u32;
_3 = 794990043_i32 as i8;
_6 = !(-29_isize);
RET = core::ptr::addr_of_mut!(_3);
_2 = 1433523467_u32 & 3661776597_u32;
_5 = !33410_u16;
_2 = 3105902844_u32;
RET = core::ptr::addr_of_mut!(_3);
_4 = _3;
_6 = -(-9223372036854775808_isize);
_2 = _4 as u32;
Call(_2 = core::intrinsics::bswap(586638329_u32), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
Goto(bb2)
}
bb2 = {
_10 = _5;
_8 = !false;
RET = core::ptr::addr_of_mut!((*RET));
_9 = _8 as isize;
_8 = true;
_9 = 160021737987632576277472404447207917886_i128 as isize;
RET = core::ptr::addr_of_mut!((*RET));
RET = core::ptr::addr_of_mut!((*RET));
_9 = _6 >> _10;
_3 = _4;
_1 = '\u{646c4}';
Goto(bb3)
}
bb3 = {
_5 = !_10;
_8 = false | false;
RET = core::ptr::addr_of_mut!((*RET));
_4 = -(*RET);
RET = core::ptr::addr_of_mut!(_3);
_11 = [_1,_1,_1,_1,_1,_1,_1];
_9 = _6 - _6;
_10 = _5;
_12.0 = [_10,_5,_10,_10,_10];
_3 = -_4;
_10 = _5;
_7 = [(-4556245049148080961_i64),(-1072963913248756278_i64),399206008661408937_i64,4696972352963362149_i64,(-2542010512108435117_i64),989607619674124575_i64,9161868430440553889_i64,(-6270174710383701136_i64)];
RET = core::ptr::addr_of_mut!((*RET));
_15.1 = 109624412247567921071933873172823867315_i128;
RET = core::ptr::addr_of_mut!((*RET));
_14 = (_12.0,);
RET = core::ptr::addr_of_mut!(_4);
_15.0 = core::ptr::addr_of_mut!(_5);
_2 = !2496698257_u32;
_3 = _2 as i8;
_8 = _5 > _5;
_14.0 = [_10,_10,_5,_10,_5];
_3 = _4;
Goto(bb4)
}
bb4 = {
_8 = true | true;
_4 = _3;
_9 = _6 << (*RET);
_9 = (*RET) as isize;
_10 = _5 - _5;
_14 = (_12.0,);
_15.1 = (-132224034299434259974394238033388417306_i128) | (-36965315181974203993872401358007097614_i128);
Goto(bb5)
}
bb5 = {
_8 = true;
_14 = _12;
_16 = [_10,_10,_10,_5,_10];
_3 = (*RET);
_15.0 = core::ptr::addr_of_mut!(_5);
RET = core::ptr::addr_of_mut!(_4);
_12.0 = [_10,_10,_10,_10,_10];
_9 = !_6;
RET = core::ptr::addr_of_mut!((*RET));
_12 = (_16,);
_14 = _12;
_14 = (_16,);
_2 = 1626163907_u32 + 3391284643_u32;
_3 = _4 ^ (*RET);
_17 = [2548793211027845039_i64,(-3565254055962715566_i64),(-8612156578930726798_i64),4235450968638958005_i64,(-6677008067314860311_i64),(-6605596616474007840_i64),(-5810817616809196288_i64),4762048619662838469_i64];
_10 = _5;
_22.2 = 5848284980566326959_i64 + 544151636657625736_i64;
_7 = [_22.2,_22.2,_22.2,_22.2,_22.2,_22.2,_22.2,_22.2];
_4 = _3;
_22.0 = 99_u8;
_22.2 = 6_usize as i64;
_24.0 = -_9;
Goto(bb6)
}
bb6 = {
_14 = (_12.0,);
_16 = [_5,_5,_5,_5,_10];
_23 = _24;
RET = core::ptr::addr_of_mut!(_4);
_11 = [_1,_1,_1,_1,_1,_1,_1];
_21 = _10;
_1 = '\u{63952}';
_27 = _23.0 ^ _9;
_25 = (*RET) as i128;
_9 = _6 - _27;
_22.0 = 152_u8 ^ 148_u8;
_22.2 = !3310545940845055597_i64;
_22.1 = 9188383224815142045_u64 | 3986752625500456649_u64;
_22.2 = !(-7577123530709164999_i64);
_19 = core::ptr::addr_of_mut!(_7);
_6 = _9 | _23.0;
RET = core::ptr::addr_of_mut!(_3);
_27 = _9;
Call(_11 = fn3(_23, _16, _15, _24.0, _3, _6, _6, _8, _27), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
_29 = Adt50 { fld0: _4 };
_28 = _29.fld0 ^ _4;
_26 = _22.0 << _3;
_2 = 2404281538_u32 - 809773066_u32;
_31.0 = [_10,_5,_10,_5,_10];
_30.fld2 = _14;
_17 = [_22.2,_22.2,_22.2,_22.2,_22.2,_22.2,_22.2,_22.2];
_30.fld2 = _31;
_34 = !_2;
_34 = _2 - _2;
_30.fld5.1 = -_15.1;
_6 = _15.1 as isize;
_30.fld2 = (_16,);
RET = core::ptr::addr_of_mut!(_28);
RET = core::ptr::addr_of_mut!(_4);
RET = core::ptr::addr_of_mut!((*RET));
_30.fld2 = (_12.0,);
_19 = core::ptr::addr_of_mut!((*_19));
Call(_16 = fn8(_9, _9, _22.1, _3, _3, _12.0, _15.0), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
_22.0 = _26;
_10 = _25 as u16;
_24 = (_9,);
Goto(bb9)
}
bb9 = {
_29 = Adt50 { fld0: _28 };
_32 = [_1,_1,_1,_1,_1,_1,_1];
Goto(bb10)
}
bb10 = {
_20 = _9 as i128;
_16 = [_10,_10,_5,_10,_10];
_28 = (*RET);
_35 = [_10,_10,_10,_10,_21];
_13 = core::ptr::addr_of!(_22.2);
_15.0 = core::ptr::addr_of_mut!(_5);
_39.2 = _34;
_39.3.0 = _26 as usize;
_16 = [_10,_10,_10,_10,_10];
_36.fld0 = _28;
_31.0 = _30.fld2.0;
_37 = 1694893115_i32 & 1190256737_i32;
_16 = _31.0;
_34 = 20135287045238768019792190591429573678_u128 as u32;
_39.0 = _22.0 as u128;
_20 = !_15.1;
_31.0 = [_5,_21,_5,_21,_5];
_40 = Adt56::Variant1 { fld0: _22,fld1: _19,fld2: _13,fld3: _22.0 };
place!(Field::<(u8, u64, i64)>(Variant(_40, 1), 0)).1 = _22.0 as u64;
_29 = Adt50 { fld0: (*RET) };
_28 = _37 as i8;
_16 = [_10,_21,_5,_10,_21];
_9 = _6;
RET = core::ptr::addr_of_mut!(_3);
_28 = -_3;
_34 = _22.1 as u32;
Goto(bb11)
}
bb11 = {
SetDiscriminant(_40, 0);
_30.fld2.0 = [_10,_21,_10,_5,_5];
_12 = _31;
_28 = _4 * _29.fld0;
Goto(bb12)
}
bb12 = {
_30.fld0 = _37 as f64;
_15.0 = core::ptr::addr_of_mut!(_5);
_30.fld5.0 = core::ptr::addr_of_mut!(_21);
Call(_24.0 = core::intrinsics::bswap(_6), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
_36.fld0 = _4 * _28;
place!(Field::<(u128, (isize,), u32, (usize,))>(Variant(_40, 0), 0)).1 = _24;
_6 = _8 as isize;
_22.1 = !7737489486630319607_u64;
RET = core::ptr::addr_of_mut!((*RET));
place!(Field::<(u128, (isize,), u32, (usize,))>(Variant(_40, 0), 0)).0 = _39.0 - _39.0;
place!(Field::<(u128, (isize,), u32, (usize,))>(Variant(_40, 0), 0)).3.0 = !_39.3.0;
place!(Field::<(u128, (isize,), u32, (usize,))>(Variant(_40, 0), 0)) = (_39.0, _24, _2, _39.3);
_42 = !_8;
_22.0 = _26;
_9 = _39.3.0 as isize;
_5 = _34 as u16;
_24 = (_6,);
place!(Field::<([u16; 5],)>(Variant(_40, 0), 1)) = (_14.0,);
_30.fld0 = _25 as f64;
_10 = (*_13) as u16;
_12 = (_16,);
_31 = (Field::<([u16; 5],)>(Variant(_40, 0), 1).0,);
_26 = _22.0;
_41 = _8;
_4 = (*RET) >> _24.0;
Call(_30.fld5.1 = core::intrinsics::transmute(Field::<(u128, (isize,), u32, (usize,))>(Variant(_40, 0), 0).0), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
_7 = [(*_13),(*_13),(*_13),(*_13),(*_13),(*_13),(*_13),_22.2];
_43 = !Field::<(u128, (isize,), u32, (usize,))>(Variant(_40, 0), 0).3.0;
_44.2 = _39.2;
_9 = _22.1 as isize;
_36 = Adt50 { fld0: (*RET) };
_37 = (-163633035_i32);
_31.0 = Field::<([u16; 5],)>(Variant(_40, 0), 1).0;
_23 = (Field::<(u128, (isize,), u32, (usize,))>(Variant(_40, 0), 0).1.0,);
SetDiscriminant(_40, 0);
_44.1.0 = _27 * _24.0;
place!(Field::<(u128, (isize,), u32, (usize,))>(Variant(_40, 0), 0)).2 = _34 | _44.2;
Goto(bb15)
}
bb15 = {
Call(_49 = dump_var(2_usize, 5_usize, Move(_5), 1_usize, Move(_1), 24_usize, Move(_24), 34_usize, Move(_34)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_49 = dump_var(2_usize, 9_usize, Move(_9), 6_usize, Move(_6), 10_usize, Move(_10), 25_usize, Move(_25)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_49 = dump_var(2_usize, 14_usize, Move(_14), 42_usize, Move(_42), 17_usize, Move(_17), 28_usize, Move(_28)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_49 = dump_var(2_usize, 20_usize, Move(_20), 26_usize, Move(_26), 41_usize, Move(_41), 22_usize, Move(_22)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn3(mut _1: (isize,),mut _2: [u16; 5],mut _3: (*mut u16, i128),mut _4: isize,mut _5: i8,mut _6: isize,mut _7: isize,mut _8: bool,mut _9: isize) -> [char; 7] {
mir! {
type RET = [char; 7];
let _10: ((usize,), *mut u16);
let _11: Adt46;
let _12: i8;
let _13: *const i64;
let _14: (isize,);
let _15: Adt49;
let _16: *const *mut u8;
let _17: isize;
let _18: [u16; 5];
let _19: ((usize,), *mut u16);
let _20: isize;
let _21: (usize,);
let _22: [i64; 8];
let _23: u16;
let _24: char;
let _25: (bool,);
let _26: ([u16; 5],);
let _27: i128;
let _28: [u16; 5];
let _29: ([u16; 5],);
let _30: (u8, u64, i64);
let _31: Adt50;
let _32: [char; 7];
let _33: isize;
let _34: ([u16; 5],);
let _35: i32;
let _36: i64;
let _37: Adt50;
let _38: u8;
let _39: f64;
let _40: *mut i8;
let _41: u128;
let _42: f32;
let _43: isize;
let _44: (isize,);
let _45: bool;
let _46: *mut u16;
let _47: Adt51;
let _48: bool;
let _49: Adt55;
let _50: isize;
let _51: isize;
let _52: (*mut (usize, i64, f32, i64, &'static u64, u32),);
let _53: isize;
let _54: u64;
let _55: ();
let _56: ();
{
_5 = _3.1 as i8;
_10.0 = (5_usize,);
Goto(bb1)
}
bb1 = {
RET = ['\u{63bfe}','\u{8d1a2}','\u{a9215}','\u{ced2b}','\u{1093a1}','\u{503cb}','\u{f2299}'];
_7 = !_4;
_1 = (_6,);
_9 = _4;
Goto(bb2)
}
bb2 = {
_6 = _7 | _9;
_10.1 = _3.0;
_10.1 = _3.0;
_5 = -17_i8;
_3 = (_10.1, (-77866418770339489911482473965445813862_i128));
_3.0 = _10.1;
_1.0 = _6 << _5;
_4 = '\u{ab4e3}' as isize;
RET = ['\u{bc999}','\u{d549e}','\u{914f5}','\u{101cf0}','\u{a5d4c}','\u{45e5b}','\u{92d10}'];
_2 = [53783_u16,27761_u16,30708_u16,34603_u16,3999_u16];
_3.1 = 1061390530015767019286563439570395738_u128 as i128;
_15.fld3 = !(-645518026355947250_i64);
_1.0 = _9 << _6;
_15.fld0 = [_15.fld3,_15.fld3,_15.fld3,_15.fld3,_15.fld3,_15.fld3,_15.fld3,_15.fld3];
_14.0 = _1.0;
_4 = _6 + _6;
_15.fld4 = _4 as i16;
_9 = !_1.0;
_4 = _14.0;
_14 = (_6,);
_9 = _1.0;
_10.0.0 = 18053628402591081101_usize >> _6;
_10.0.0 = 188626138498224105246922500683562389546_u128 as usize;
_12 = _5 << _14.0;
Goto(bb3)
}
bb3 = {
_12 = _8 as i8;
_2 = [34497_u16,36167_u16,49916_u16,26945_u16,15925_u16];
_3.1 = !86865871580031251805579445289496409496_i128;
_15.fld4 = 32109_i16 >> _1.0;
_17 = _14.0;
_10.0.0 = 11794416268948875370_usize - 3179894752936000235_usize;
_18 = [21094_u16,23135_u16,37058_u16,54343_u16,21370_u16];
_5 = !_12;
_21.0 = _8 as usize;
_15.fld0 = [_15.fld3,_15.fld3,_15.fld3,_15.fld3,_15.fld3,_15.fld3,_15.fld3,_15.fld3];
Call(_15.fld5 = fn4(_10, _18, _6, _4, _6, _6, _2, _3), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_13 = core::ptr::addr_of!(_15.fld3);
_5 = 81857806887293095613510948272535610285_u128 as i8;
_19.0.0 = !_10.0.0;
_14.0 = _1.0 & _4;
_21 = (_19.0.0,);
_1 = _14;
_8 = false | false;
_10 = (_21, _3.0);
_24 = '\u{e63b9}';
_5 = -_12;
_1 = _14;
_15.fld5 = core::ptr::addr_of_mut!(_22);
_15.fld5 = core::ptr::addr_of_mut!(_22);
_6 = _14.0;
_25 = (_8,);
RET = [_24,_24,_24,_24,_24,_24,_24];
RET = [_24,_24,_24,_24,_24,_24,_24];
_19 = (_21, _10.1);
_26 = (_18,);
Call(_27 = fn6(_1, _14, _1.0, _6, _17), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
_27 = _3.1;
_24 = '\u{481dd}';
_23 = !53552_u16;
_13 = core::ptr::addr_of!(_30.2);
_15.fld2 = [_23,_23,_23,_23,_23];
RET = [_24,_24,_24,_24,_24,_24,_24];
_17 = _12 as isize;
_15.fld2 = [_23,_23,_23,_23,_23];
_29.0 = [_23,_23,_23,_23,_23];
_21 = (_19.0.0,);
_19.1 = core::ptr::addr_of_mut!(_23);
_31 = Adt50 { fld0: _5 };
_7 = _3.1 as isize;
_30.0 = _27 as u8;
RET = [_24,_24,_24,_24,_24,_24,_24];
_3 = (_19.1, _27);
Goto(bb6)
}
bb6 = {
_6 = 4585941392072754830_u64 as isize;
_4 = _1.0 | _14.0;
_15.fld0 = [_15.fld3,_15.fld3,_15.fld3,_15.fld3,_15.fld3,_15.fld3,_15.fld3,_15.fld3];
_33 = _4;
_26 = (_2,);
_27 = _3.1 * _3.1;
_34 = _26;
_34 = _26;
_29 = _34;
_9 = !_4;
_10.0.0 = _21.0 >> _15.fld4;
_33 = _4 | _7;
_10.0 = (_19.0.0,);
_35 = 582812910_i32;
_23 = _21.0 as u16;
_26.0 = [_23,_23,_23,_23,_23];
_19.0.0 = _21.0 & _10.0.0;
_6 = _4;
_3 = (_19.1, _27);
_25 = (_8,);
_28 = [_23,_23,_23,_23,_23];
_34.0 = [_23,_23,_23,_23,_23];
_36 = _15.fld3;
_24 = '\u{9d8fe}';
_18 = [_23,_23,_23,_23,_23];
_4 = _15.fld3 as isize;
_32 = RET;
Goto(bb7)
}
bb7 = {
_30.2 = _36 >> _14.0;
_32 = [_24,_24,_24,_24,_24,_24,_24];
_1 = (_6,);
_10.0 = (_19.0.0,);
_20 = _35 as isize;
_12 = _31.fld0;
_25.0 = _8;
_29.0 = [_23,_23,_23,_23,_23];
_26.0 = [_23,_23,_23,_23,_23];
_15.fld2 = [_23,_23,_23,_23,_23];
_37.fld0 = _15.fld4 as i8;
_6 = 288516781960705138914529782777741012978_u128 as isize;
_36 = _30.2;
_24 = '\u{cd066}';
_19.0.0 = !_21.0;
_19.0.0 = !_10.0.0;
_12 = !_5;
_32 = RET;
_20 = _1.0;
_19 = (_21, _3.0);
match _35 {
582812910 => bb8,
_ => bb2
}
}
bb8 = {
_38 = _30.0 >> _36;
_32 = [_24,_24,_24,_24,_24,_24,_24];
_6 = !_14.0;
_25.0 = !_8;
_2 = _26.0;
_19.0 = (_10.0.0,);
RET = [_24,_24,_24,_24,_24,_24,_24];
_15.fld0 = [_30.2,_36,(*_13),(*_13),_30.2,(*_13),_36,_36];
_19.0 = (_10.0.0,);
_10.0.0 = !_19.0.0;
_30.0 = !_38;
_10 = (_19.0, _3.0);
_29 = _26;
_32 = [_24,_24,_24,_24,_24,_24,_24];
_3.0 = core::ptr::addr_of_mut!(_23);
_33 = _9;
_18 = [_23,_23,_23,_23,_23];
_31 = Adt50 { fld0: _37.fld0 };
_32 = RET;
_15.fld5 = core::ptr::addr_of_mut!(_22);
_21.0 = !_19.0.0;
RET = _32;
_42 = _3.1 as f32;
_39 = (*_13) as f64;
_10.0.0 = !_19.0.0;
_14 = (_1.0,);
_26 = (_29.0,);
match _35 {
0 => bb5,
1 => bb7,
2 => bb3,
582812910 => bb9,
_ => bb4
}
}
bb9 = {
_46 = core::ptr::addr_of_mut!(_23);
_34 = (_18,);
_25 = (_8,);
_26 = (_15.fld2,);
_37.fld0 = _5 << _21.0;
_42 = _21.0 as f32;
_40 = core::ptr::addr_of_mut!(_5);
_11 = Adt46::Variant1 { fld0: _3.1,fld1: _42,fld2: _21.0,fld3: _21,fld4: _1,fld5: 4206601872_u32 };
place!(Field::<u32>(Variant(_11, 1), 5)) = 2730800629_u32 * 2802327786_u32;
RET = [_24,_24,_24,_24,_24,_24,_24];
_30.1 = 5130789792870869153_u64 & 7483055265118596232_u64;
_47.fld4.0.1 = _21.0;
_15.fld3 = (*_13);
place!(Field::<f32>(Variant(_11, 1), 1)) = _35 as f32;
_9 = (*_13) as isize;
SetDiscriminant(_11, 1);
_45 = _23 != (*_46);
_42 = _36 as f32;
place!(Field::<f32>(Variant(_11, 1), 1)) = _42 + _42;
_47.fld6 = core::ptr::addr_of_mut!((*_46));
_34 = (_2,);
_45 = _25.0;
_47.fld3.fld3 = _36;
place!(Field::<usize>(Variant(_11, 1), 2)) = _45 as usize;
_47.fld3.fld4 = !_15.fld4;
_30.1 = !16551831652274584238_u64;
Goto(bb10)
}
bb10 = {
place!(Field::<i128>(Variant(_11, 1), 0)) = -_3.1;
_22 = [_47.fld3.fld3,(*_13),_47.fld3.fld3,_47.fld3.fld3,_30.2,_30.2,_15.fld3,_36];
_9 = _20;
_19.1 = _46;
_3.1 = !_27;
place!(Field::<usize>(Variant(_11, 1), 2)) = _19.0.0;
_47.fld4.0.2 = -Field::<i128>(Variant(_11, 1), 0);
place!(Field::<u32>(Variant(_11, 1), 5)) = _38 as u32;
_15.fld2 = [(*_46),(*_46),_23,(*_46),(*_46)];
_49.fld0 = _30.1;
_47.fld3.fld2 = [(*_46),_23,(*_46),(*_46),(*_46)];
_19.0.0 = _21.0;
_47.fld4.0.2 = _27;
_47.fld6 = _46;
place!(Field::<(usize,)>(Variant(_11, 1), 3)).0 = !_19.0.0;
place!(Field::<(isize,)>(Variant(_11, 1), 4)) = (_9,);
_14 = _1;
match _35 {
0 => bb6,
1 => bb11,
2 => bb12,
3 => bb13,
4 => bb14,
582812910 => bb16,
_ => bb15
}
}
bb11 = {
_46 = core::ptr::addr_of_mut!(_23);
_34 = (_18,);
_25 = (_8,);
_26 = (_15.fld2,);
_37.fld0 = _5 << _21.0;
_42 = _21.0 as f32;
_40 = core::ptr::addr_of_mut!(_5);
_11 = Adt46::Variant1 { fld0: _3.1,fld1: _42,fld2: _21.0,fld3: _21,fld4: _1,fld5: 4206601872_u32 };
place!(Field::<u32>(Variant(_11, 1), 5)) = 2730800629_u32 * 2802327786_u32;
RET = [_24,_24,_24,_24,_24,_24,_24];
_30.1 = 5130789792870869153_u64 & 7483055265118596232_u64;
_47.fld4.0.1 = _21.0;
_15.fld3 = (*_13);
place!(Field::<f32>(Variant(_11, 1), 1)) = _35 as f32;
_9 = (*_13) as isize;
SetDiscriminant(_11, 1);
_45 = _23 != (*_46);
_42 = _36 as f32;
place!(Field::<f32>(Variant(_11, 1), 1)) = _42 + _42;
_47.fld6 = core::ptr::addr_of_mut!((*_46));
_34 = (_2,);
_45 = _25.0;
_47.fld3.fld3 = _36;
place!(Field::<usize>(Variant(_11, 1), 2)) = _45 as usize;
_47.fld3.fld4 = !_15.fld4;
_30.1 = !16551831652274584238_u64;
Goto(bb10)
}
bb12 = {
_13 = core::ptr::addr_of!(_15.fld3);
_5 = 81857806887293095613510948272535610285_u128 as i8;
_19.0.0 = !_10.0.0;
_14.0 = _1.0 & _4;
_21 = (_19.0.0,);
_1 = _14;
_8 = false | false;
_10 = (_21, _3.0);
_24 = '\u{e63b9}';
_5 = -_12;
_1 = _14;
_15.fld5 = core::ptr::addr_of_mut!(_22);
_15.fld5 = core::ptr::addr_of_mut!(_22);
_6 = _14.0;
_25 = (_8,);
RET = [_24,_24,_24,_24,_24,_24,_24];
RET = [_24,_24,_24,_24,_24,_24,_24];
_19 = (_21, _10.1);
_26 = (_18,);
Call(_27 = fn6(_1, _14, _1.0, _6, _17), ReturnTo(bb5), UnwindUnreachable())
}
bb13 = {
_30.2 = _36 >> _14.0;
_32 = [_24,_24,_24,_24,_24,_24,_24];
_1 = (_6,);
_10.0 = (_19.0.0,);
_20 = _35 as isize;
_12 = _31.fld0;
_25.0 = _8;
_29.0 = [_23,_23,_23,_23,_23];
_26.0 = [_23,_23,_23,_23,_23];
_15.fld2 = [_23,_23,_23,_23,_23];
_37.fld0 = _15.fld4 as i8;
_6 = 288516781960705138914529782777741012978_u128 as isize;
_36 = _30.2;
_24 = '\u{cd066}';
_19.0.0 = !_21.0;
_19.0.0 = !_10.0.0;
_12 = !_5;
_32 = RET;
_20 = _1.0;
_19 = (_21, _3.0);
match _35 {
582812910 => bb8,
_ => bb2
}
}
bb14 = {
_6 = 4585941392072754830_u64 as isize;
_4 = _1.0 | _14.0;
_15.fld0 = [_15.fld3,_15.fld3,_15.fld3,_15.fld3,_15.fld3,_15.fld3,_15.fld3,_15.fld3];
_33 = _4;
_26 = (_2,);
_27 = _3.1 * _3.1;
_34 = _26;
_34 = _26;
_29 = _34;
_9 = !_4;
_10.0.0 = _21.0 >> _15.fld4;
_33 = _4 | _7;
_10.0 = (_19.0.0,);
_35 = 582812910_i32;
_23 = _21.0 as u16;
_26.0 = [_23,_23,_23,_23,_23];
_19.0.0 = _21.0 & _10.0.0;
_6 = _4;
_3 = (_19.1, _27);
_25 = (_8,);
_28 = [_23,_23,_23,_23,_23];
_34.0 = [_23,_23,_23,_23,_23];
_36 = _15.fld3;
_24 = '\u{9d8fe}';
_18 = [_23,_23,_23,_23,_23];
_4 = _15.fld3 as isize;
_32 = RET;
Goto(bb7)
}
bb15 = {
_27 = _3.1;
_24 = '\u{481dd}';
_23 = !53552_u16;
_13 = core::ptr::addr_of!(_30.2);
_15.fld2 = [_23,_23,_23,_23,_23];
RET = [_24,_24,_24,_24,_24,_24,_24];
_17 = _12 as isize;
_15.fld2 = [_23,_23,_23,_23,_23];
_29.0 = [_23,_23,_23,_23,_23];
_21 = (_19.0.0,);
_19.1 = core::ptr::addr_of_mut!(_23);
_31 = Adt50 { fld0: _5 };
_7 = _3.1 as isize;
_30.0 = _27 as u8;
RET = [_24,_24,_24,_24,_24,_24,_24];
_3 = (_19.1, _27);
Goto(bb6)
}
bb16 = {
_21.0 = Field::<usize>(Variant(_11, 1), 2) & Field::<(usize,)>(Variant(_11, 1), 3).0;
Goto(bb17)
}
bb17 = {
Call(_55 = dump_var(3_usize, 14_usize, Move(_14), 22_usize, Move(_22), 28_usize, Move(_28), 8_usize, Move(_8)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_55 = dump_var(3_usize, 12_usize, Move(_12), 33_usize, Move(_33), 20_usize, Move(_20), 34_usize, Move(_34)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_55 = dump_var(3_usize, 29_usize, Move(_29), 24_usize, Move(_24), 4_usize, Move(_4), 18_usize, Move(_18)), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Call(_55 = dump_var(3_usize, 9_usize, Move(_9), 32_usize, Move(_32), 2_usize, Move(_2), 56_usize, _56), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn4(mut _1: ((usize,), *mut u16),mut _2: [u16; 5],mut _3: isize,mut _4: isize,mut _5: isize,mut _6: isize,mut _7: [u16; 5],mut _8: (*mut u16, i128)) -> *mut [i64; 8] {
mir! {
type RET = *mut [i64; 8];
let _9: u64;
let _10: isize;
let _11: f64;
let _12: (u8, u64, i64);
let _13: [char; 7];
let _14: char;
let _15: Adt52;
let _16: isize;
let _17: (usize,);
let _18: f64;
let _19: Adt52;
let _20: char;
let _21: [char; 7];
let _22: u64;
let _23: [i64; 8];
let _24: i32;
let _25: u16;
let _26: (isize,);
let _27: isize;
let _28: isize;
let _29: (usize,);
let _30: f32;
let _31: [isize; 3];
let _32: ([u16; 5],);
let _33: isize;
let _34: ();
let _35: ();
{
_1.0.0 = 5_usize;
_1.0.0 = !6_usize;
_1.0 = (0_usize,);
_1.1 = _8.0;
_8.0 = _1.1;
_2 = _7;
_7 = [27730_u16,50114_u16,53521_u16,45843_u16,20897_u16];
_8.1 = !53627579638157469651035173290136318299_i128;
_7 = _2;
_4 = _3;
_7 = [13394_u16,11933_u16,33274_u16,42771_u16,35227_u16];
_8 = (_1.1, (-54792458699840742062757711496423688813_i128));
_1.0.0 = 7_usize | 1_usize;
_1.0.0 = 9088579581466638346_usize - 2_usize;
_9 = 9861613830388603209_u64 & 13656721808307950582_u64;
_4 = _6;
_11 = 6759777131048768197_i64 as f64;
_8 = (_1.1, 8607040142129210598295259130194753009_i128);
_1.0.0 = 16147526159761004216_usize | 5722342688700318837_usize;
_1.0.0 = 4_usize;
_9 = 15235100931023180843_u64;
_10 = _4 | _5;
_12.1 = 31629_u16 as u64;
Goto(bb1)
}
bb1 = {
_2 = _7;
_10 = !_4;
match _8.1 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
8607040142129210598295259130194753009 => bb8,
_ => bb7
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_11 = 1425535372_u32 as f64;
_1.0.0 = !11849589158757335660_usize;
_11 = 940026687_i32 as f64;
_1.0.0 = 3438718367_u32 as usize;
_8 = (_1.1, 53982679582574308719556346996565151841_i128);
_12 = (167_u8, _9, (-7795804179262364970_i64));
_1.0 = (6_usize,);
_12.0 = 41_u8 & 249_u8;
_7 = _2;
_1.0.0 = !3770859192325274086_usize;
_8 = (_1.1, 161258615687052252221272800340183755178_i128);
_14 = '\u{64246}';
Goto(bb9)
}
bb9 = {
_7 = _2;
_1.1 = _8.0;
_1.0.0 = _12.0 as usize;
_1.0 = (5_usize,);
_5 = _10;
Call(_3 = fn5(_1.0, _4, _6, _8.0, _8), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_8 = (_1.1, (-47174628796835089526364045593980118723_i128));
_14 = '\u{7a5c4}';
_7 = _2;
_13 = [_14,_14,_14,_14,_14,_14,_14];
_1.1 = _8.0;
_8.0 = _1.1;
_16 = _8.1 as isize;
_6 = _3;
_8.1 = 112588845093291034247726410740172875992_i128;
_18 = _1.0.0 as f64;
_17.0 = _1.0.0;
_6 = _3 | _3;
_13 = [_14,_14,_14,_14,_14,_14,_14];
_12 = (174_u8, _9, (-5378091324590188647_i64));
_12.1 = _9;
_8.1 = (-64556512608487069274616051957381115023_i128);
_10 = _6 ^ _3;
_12 = (153_u8, _9, (-2134868957738093516_i64));
_12.2 = _9 as i64;
_16 = _10 << _3;
_4 = _10 >> _10;
Goto(bb11)
}
bb11 = {
_6 = _16 ^ _16;
_21 = [_14,_14,_14,_14,_14,_14,_14];
match _12.1 {
0 => bb3,
15235100931023180843 => bb12,
_ => bb8
}
}
bb12 = {
_12 = (70_u8, _9, (-4052434975078859071_i64));
_20 = _14;
_1 = (_17, _8.0);
_6 = _12.2 as isize;
_12.2 = (-8673083245683086117_i64) - 1028918567078450059_i64;
_12 = (90_u8, _9, 5754105437207714906_i64);
RET = core::ptr::addr_of_mut!(_23);
_17 = (_1.0.0,);
_1.0.0 = _17.0 >> _4;
_22 = !_12.1;
_9 = 1906773765_i32 as u64;
_21 = _13;
_8 = (_1.1, 157328216681925475675475275354794503437_i128);
_9 = 9713_i16 as u64;
RET = core::ptr::addr_of_mut!((*RET));
_8.1 = 77479497202449344750143461718262296646_i128 - (-26096210430931037330673177467183511273_i128);
_8.0 = _1.1;
_8.0 = _1.1;
_25 = 30812_u16 ^ 60893_u16;
_23 = [_12.2,_12.2,_12.2,_12.2,_12.2,_12.2,_12.2,_12.2];
RET = core::ptr::addr_of_mut!((*RET));
Call(_2 = core::intrinsics::transmute(_7), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
_6 = -_16;
_21 = [_14,_20,_14,_14,_20,_20,_20];
_26.0 = !_6;
_9 = !_12.1;
_29.0 = _1.0.0 - _1.0.0;
_10 = 317159879751300348203220073706800957074_u128 as isize;
_1.0.0 = _29.0;
_22 = _8.1 as u64;
_18 = 281493041615770878077069807832453462106_u128 as f64;
RET = core::ptr::addr_of_mut!((*RET));
_1.1 = _8.0;
_29 = _1.0;
_24 = _20 as i32;
_16 = _4;
_11 = _18;
_3 = 2908570822_u32 as isize;
_1 = (_29, _8.0);
_32.0 = [_25,_25,_25,_25,_25];
_6 = !_4;
_21 = _13;
_1 = (_29, _8.0);
_7 = [_25,_25,_25,_25,_25];
_29.0 = _24 as usize;
_20 = _14;
Goto(bb14)
}
bb14 = {
_12.1 = !_22;
_5 = -_4;
_12 = (80_u8, _22, (-1148652193715366672_i64));
_12 = (48_u8, _22, (-5255708298291718837_i64));
_29 = (_1.0.0,);
_13 = [_14,_20,_14,_14,_14,_14,_14];
_1.0.0 = (-99_i8) as usize;
_26 = (_6,);
_20 = _14;
_28 = _4;
_12.1 = _9 >> _16;
RET = core::ptr::addr_of_mut!((*RET));
_24 = !(-409728937_i32);
_1 = (_29, _8.0);
_3 = !_28;
RET = core::ptr::addr_of_mut!((*RET));
_30 = 84_i8 as f32;
_29.0 = _1.0.0;
_12.2 = -(-1664974670595728710_i64);
_8.1 = (-85143024713219740218344403178766941684_i128);
_25 = _12.2 as u16;
_29 = (_1.0.0,);
_1.0.0 = !_29.0;
RET = core::ptr::addr_of_mut!(_23);
_5 = !_16;
_30 = _24 as f32;
Goto(bb15)
}
bb15 = {
Call(_34 = dump_var(4_usize, 7_usize, Move(_7), 9_usize, Move(_9), 5_usize, Move(_5), 16_usize, Move(_16)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_34 = dump_var(4_usize, 25_usize, Move(_25), 12_usize, Move(_12), 13_usize, Move(_13), 10_usize, Move(_10)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_34 = dump_var(4_usize, 29_usize, Move(_29), 23_usize, Move(_23), 28_usize, Move(_28), 35_usize, _35), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn5(mut _1: (usize,),mut _2: isize,mut _3: isize,mut _4: *mut u16,mut _5: (*mut u16, i128)) -> isize {
mir! {
type RET = isize;
let _6: (u128, (isize,), u32, (usize,));
let _7: f32;
let _8: u32;
let _9: (*mut u16, i128);
let _10: f32;
let _11: Adt54;
let _12: [isize; 7];
let _13: [i64; 8];
let _14: [i64; 8];
let _15: [char; 7];
let _16: ();
let _17: ();
{
_3 = _2;
RET = -_2;
_1 = (9729333381265122700_usize,);
_5.1 = (-91699833072292123828152099100094400972_i128) & 162406094967920879363662858732449315231_i128;
_3 = _2 << _1.0;
_1 = (12625802810685369125_usize,);
_4 = _5.0;
_1 = (4_usize,);
_6.1.0 = _3 - _2;
_6.0 = 228121363982244381606715654395443325853_u128 & 134640230987085309836311469553602900831_u128;
RET = _5.1 as isize;
_4 = _5.0;
_1.0 = false as usize;
RET = _3 + _3;
RET = !_3;
_5 = (_4, 146548755578103215295174538419126574328_i128);
_1 = (4_usize,);
_9.0 = _5.0;
_5 = (_4, 13844237193077604964210533792754725148_i128);
_1.0 = 4_usize;
_6.3.0 = !_1.0;
_1.0 = _6.3.0;
_1.0 = !_6.3.0;
_1 = (_6.3.0,);
_5 = (_9.0, 167157152263125592935969371130936750525_i128);
RET = _3 >> _6.0;
match _5.1 {
0 => bb1,
1 => bb2,
167157152263125592935969371130936750525 => bb4,
_ => bb3
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
_7 = _6.0 as f32;
_3 = RET ^ _6.1.0;
_9 = _5;
_5 = (_9.0, _9.1);
_6.2 = 3409236184_u32 << _9.1;
_6.2 = !2928379408_u32;
_6.2 = !2659254711_u32;
_5.1 = !_9.1;
_6.2 = 138025858_u32;
_6.1 = (_3,);
_2 = -_3;
_4 = _9.0;
_6.3 = (_1.0,);
_10 = -_7;
_3 = _2;
_4 = _5.0;
_6.1.0 = !_2;
_6.1 = (_3,);
_6.1 = (_3,);
_4 = _5.0;
Goto(bb5)
}
bb5 = {
_9.1 = _5.1 + _5.1;
Goto(bb6)
}
bb6 = {
_10 = _7 * _7;
_9.1 = _5.1 >> RET;
_3 = _6.1.0 ^ _6.1.0;
_1.0 = 44_i8 as usize;
_9 = _5;
_8 = _6.2 - _6.2;
_8 = _6.2 ^ _6.2;
_5.0 = _9.0;
_2 = !_3;
_6.0 = _1.0 as u128;
RET = !_2;
_4 = _9.0;
Goto(bb7)
}
bb7 = {
Call(_16 = dump_var(5_usize, 6_usize, Move(_6), 3_usize, Move(_3), 17_usize, _17, 17_usize, _17), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn6(mut _1: (isize,),mut _2: (isize,),mut _3: isize,mut _4: isize,mut _5: isize) -> i128 {
mir! {
type RET = i128;
let _6: (u128, (isize,), u32, (usize,));
let _7: bool;
let _8: [i64; 8];
let _9: f64;
let _10: ();
let _11: ();
{
RET = -(-136196669693245377846604927755653765607_i128);
_1.0 = _2.0;
Call(RET = fn7(_1, _1.0, _1.0, _3, _2, _2, _1, _2, _2, _1.0, _5, _2), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_3 = 1731127309_i32 as isize;
_1.0 = '\u{210e}' as isize;
RET = !(-101675476724024024675639918525183438119_i128);
_3 = !_1.0;
_6.1 = _2;
_6.2 = 81_u8 as u32;
_6.0 = 10515800487545683252_usize as u128;
_3 = _4 + _2.0;
_6.3.0 = 17911125775774799529_usize << _5;
_6.0 = (-93_i8) as u128;
_5 = _6.1.0;
_6.3.0 = 3_usize;
_1 = (_3,);
_6.1.0 = _1.0;
_9 = 12211045363924391920_u64 as f64;
RET = 136586604929614460278279317722327553279_i128 >> _3;
_6.3 = (7340049178751992145_usize,);
_1.0 = _6.1.0 << _2.0;
_1.0 = _3 >> RET;
Goto(bb2)
}
bb2 = {
Call(_10 = dump_var(6_usize, 6_usize, Move(_6), 3_usize, Move(_3), 1_usize, Move(_1), 11_usize, _11), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn7(mut _1: (isize,),mut _2: isize,mut _3: isize,mut _4: isize,mut _5: (isize,),mut _6: (isize,),mut _7: (isize,),mut _8: (isize,),mut _9: (isize,),mut _10: isize,mut _11: isize,mut _12: (isize,)) -> i128 {
mir! {
type RET = i128;
let _13: f64;
let _14: [isize; 3];
let _15: Adt61;
let _16: *mut [i64; 8];
let _17: [u16; 5];
let _18: i32;
let _19: (u8, u64, i64);
let _20: u8;
let _21: [char; 7];
let _22: [u16; 5];
let _23: Adt59;
let _24: Adt50;
let _25: (isize,);
let _26: Adt58;
let _27: ([u16; 5],);
let _28: Adt47;
let _29: f64;
let _30: u16;
let _31: [isize; 7];
let _32: Adt58;
let _33: isize;
let _34: Adt48;
let _35: bool;
let _36: char;
let _37: u8;
let _38: ();
let _39: ();
{
_8 = (_3,);
_12 = (_10,);
_9 = (_3,);
_8 = (_9.0,);
_13 = (-2075499655_i32) as f64;
RET = false as i128;
_5.0 = (-1164487807_i32) as isize;
_12.0 = !_3;
_12.0 = !_4;
_1 = _12;
_12 = (_6.0,);
RET = (-72131680676541679051697226309602519184_i128);
_12 = _8;
_6.0 = !_7.0;
_6.0 = -_7.0;
_4 = _8.0;
_6 = _7;
_10 = (-1853693999_i32) as isize;
_19 = (4_u8, 17047446613616158907_u64, 5942956518111790919_i64);
_2 = _4 | _12.0;
_19.1 = !1755691822796879374_u64;
match _19.2 {
0 => bb1,
1 => bb2,
2 => bb3,
5942956518111790919 => bb5,
_ => bb4
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
_9.0 = _13 as isize;
_19.1 = 34712010316285570591144699120088718240_u128 as u64;
_3 = _4 << _4;
_3 = _4;
_4 = _2 & _12.0;
_2 = 84998995189951197676256107308797136544_u128 as isize;
_5 = (_8.0,);
_10 = 173991573757310861327682446751262927926_u128 as isize;
_9.0 = -_4;
_19.2 = 6069162629615816410_i64 * 5667788198061936895_i64;
RET = (-2951882146293529630451492421813507013_i128);
_19 = (184_u8, 11995791176225057724_u64, (-4707859680491439210_i64));
_9 = (_7.0,);
_18 = (-1088291805_i32);
RET = (-35908984772819484372698494284554579743_i128) + (-69349378921050785690774449714324403450_i128);
_5 = (_8.0,);
_9.0 = _7.0 ^ _5.0;
_17 = [18946_u16,919_u16,31978_u16,54413_u16,55034_u16];
_22 = [12816_u16,2752_u16,25878_u16,43937_u16,59507_u16];
_5.0 = _8.0 + _8.0;
Goto(bb6)
}
bb6 = {
_5.0 = _4 | _3;
_9 = _5;
_7 = (_6.0,);
_6.0 = !_9.0;
_21 = ['\u{84c1f}','\u{af599}','\u{c9915}','\u{27e3b}','\u{cedd2}','\u{860aa}','\u{41274}'];
_7 = (_6.0,);
_4 = -_9.0;
_20 = _19.0;
_4 = -_9.0;
_2 = _4 >> _6.0;
_23.fld2.0 = true & true;
_12 = (_2,);
_17 = [15831_u16,58227_u16,8787_u16,14862_u16,54958_u16];
_6.0 = _20 as isize;
_24 = Adt50 { fld0: 106_i8 };
_7.0 = 1407247520624653776_usize as isize;
_14 = [_2,_11,_5.0];
_5 = _12;
_21 = ['\u{ac445}','\u{1087e1}','\u{83c54}','\u{46410}','\u{e02bc}','\u{7170a}','\u{3304d}'];
_12 = _8;
_7 = _5;
_1 = _5;
_10 = _5.0;
_25.0 = !_10;
_25 = (_1.0,);
_25.0 = !_2;
_11 = 980930480_u32 as isize;
_5 = (_1.0,);
match _19.1 {
0 => bb1,
1 => bb2,
11995791176225057724 => bb8,
_ => bb7
}
}
bb7 = {
Return()
}
bb8 = {
_8.0 = _1.0;
_25 = _5;
_25.0 = -_2;
_6 = _9;
_12.0 = _10;
_6.0 = _7.0;
_25 = (_12.0,);
_23.fld1 = core::ptr::addr_of_mut!(_20);
_23.fld1 = core::ptr::addr_of_mut!(_19.0);
_24.fld0 = 218054936571471592353236971237439258882_u128 as i8;
_13 = _19.1 as f64;
_19.1 = !7201913666192161414_u64;
_9 = (_12.0,);
_7.0 = _2;
_8 = _1;
_20 = _19.0 | _19.0;
_11 = _18 as isize;
_23.fld1 = core::ptr::addr_of_mut!(_19.0);
_27 = (_17,);
_12 = _7;
_21 = ['\u{ac9f5}','\u{d60a3}','\u{c5643}','\u{b2327}','\u{42a0a}','\u{8d746}','\u{88098}'];
_24.fld0 = _1.0 as i8;
_29 = _5.0 as f64;
_20 = 2921224529_u32 as u8;
_23.fld2 = (true,);
_21 = ['\u{b475f}','\u{9ef78}','\u{ad481}','\u{ea52a}','\u{e56e6}','\u{c47fe}','\u{5e87c}'];
Call(_7.0 = core::intrinsics::transmute(_2), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
_20 = !_19.0;
_7 = _9;
_27 = (_17,);
_9 = (_6.0,);
_5.0 = _1.0 | _2;
_29 = -_13;
_7.0 = _5.0 >> _8.0;
match _19.2 {
0 => bb1,
1 => bb5,
2 => bb3,
3 => bb4,
4 => bb10,
5 => bb11,
340282366920938463458666747751276772246 => bb13,
_ => bb12
}
}
bb10 = {
_9.0 = _13 as isize;
_19.1 = 34712010316285570591144699120088718240_u128 as u64;
_3 = _4 << _4;
_3 = _4;
_4 = _2 & _12.0;
_2 = 84998995189951197676256107308797136544_u128 as isize;
_5 = (_8.0,);
_10 = 173991573757310861327682446751262927926_u128 as isize;
_9.0 = -_4;
_19.2 = 6069162629615816410_i64 * 5667788198061936895_i64;
RET = (-2951882146293529630451492421813507013_i128);
_19 = (184_u8, 11995791176225057724_u64, (-4707859680491439210_i64));
_9 = (_7.0,);
_18 = (-1088291805_i32);
RET = (-35908984772819484372698494284554579743_i128) + (-69349378921050785690774449714324403450_i128);
_5 = (_8.0,);
_9.0 = _7.0 ^ _5.0;
_17 = [18946_u16,919_u16,31978_u16,54413_u16,55034_u16];
_22 = [12816_u16,2752_u16,25878_u16,43937_u16,59507_u16];
_5.0 = _8.0 + _8.0;
Goto(bb6)
}
bb11 = {
Return()
}
bb12 = {
Return()
}
bb13 = {
_7 = (_2,);
_27 = (_17,);
_8 = (_5.0,);
RET = 6246545881750998220592667661822942770_i128 & 104454736991987241973768890025850127149_i128;
match _19.0 {
0 => bb1,
1 => bb9,
2 => bb3,
3 => bb10,
184 => bb14,
_ => bb5
}
}
bb14 = {
_5.0 = _6.0;
_14 = [_10,_9.0,_3];
_34.fld5.0 = core::ptr::addr_of_mut!(_30);
_31 = [_6.0,_12.0,_8.0,_9.0,_8.0,_7.0,_12.0];
_18 = -(-789008337_i32);
_19.1 = 16073165250838034325_u64;
_18 = (-1483801943_i32) << _6.0;
_14 = [_7.0,_8.0,_12.0];
_27.0 = [47713_u16,37323_u16,58521_u16,59202_u16,8279_u16];
_34.fld5.1 = 1_usize as i128;
_34.fld1 = '\u{6c400}';
_23.fld2 = (false,);
_9.0 = _20 as isize;
Goto(bb15)
}
bb15 = {
Call(_38 = dump_var(7_usize, 22_usize, Move(_22), 11_usize, Move(_11), 31_usize, Move(_31), 3_usize, Move(_3)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_38 = dump_var(7_usize, 7_usize, Move(_7), 20_usize, Move(_20), 8_usize, Move(_8), 12_usize, Move(_12)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_38 = dump_var(7_usize, 5_usize, Move(_5), 4_usize, Move(_4), 10_usize, Move(_10), 39_usize, _39), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn8(mut _1: isize,mut _2: isize,mut _3: u64,mut _4: i8,mut _5: i8,mut _6: [u16; 5],mut _7: *mut u16) -> [u16; 5] {
mir! {
type RET = [u16; 5];
let _8: Adt45;
let _9: [u16; 5];
let _10: isize;
let _11: ([u16; 5],);
let _12: char;
let _13: (*mut char, usize, i128);
let _14: Adt58;
let _15: *mut [i64; 8];
let _16: f64;
let _17: ([u16; 5],);
let _18: bool;
let _19: i16;
let _20: (isize,);
let _21: Adt60;
let _22: (*mut char, usize, i128);
let _23: *mut i8;
let _24: [isize; 3];
let _25: Adt54;
let _26: Adt45;
let _27: (u8, u64, i64);
let _28: f32;
let _29: &'static u64;
let _30: u32;
let _31: (u128, (isize,), u32, (usize,));
let _32: char;
let _33: bool;
let _34: [isize; 3];
let _35: ();
let _36: ();
{
_2 = _1 & _1;
_6 = [30458_u16,14942_u16,27829_u16,23402_u16,41978_u16];
RET = [14807_u16,32685_u16,45887_u16,15119_u16,12490_u16];
_1 = -_2;
_1 = !_2;
RET = [22875_u16,53866_u16,10854_u16,47244_u16,7474_u16];
_9 = [32916_u16,10085_u16,31970_u16,8376_u16,1133_u16];
_9 = [9976_u16,17852_u16,34507_u16,55203_u16,29250_u16];
_4 = !_5;
_1 = 105_u8 as isize;
_11 = (RET,);
RET = [34947_u16,26160_u16,37867_u16,64413_u16,25819_u16];
_11 = (_9,);
RET = [51505_u16,49682_u16,20580_u16,59582_u16,51666_u16];
_10 = 144_u8 as isize;
_1 = _10 << _2;
Goto(bb1)
}
bb1 = {
RET = [868_u16,29458_u16,42335_u16,48135_u16,55701_u16];
RET = [37008_u16,13933_u16,30913_u16,40516_u16,5793_u16];
_13.0 = core::ptr::addr_of_mut!(_12);
_13.0 = core::ptr::addr_of_mut!(_12);
_11 = (_9,);
_11.0 = _9;
_6 = [59869_u16,42701_u16,3728_u16,16991_u16,52245_u16];
_13.0 = core::ptr::addr_of_mut!(_12);
_13.1 = !885874452488426595_usize;
_13.0 = core::ptr::addr_of_mut!(_12);
_11.0 = RET;
_10 = _2;
_2 = _10 >> _13.1;
_11.0 = RET;
_5 = _4 << _2;
_13.2 = 103912068053789766153195089908531841313_i128;
_12 = '\u{f56f3}';
_9 = [57839_u16,65529_u16,28815_u16,20762_u16,47915_u16];
_6 = [29865_u16,25664_u16,25036_u16,11831_u16,36592_u16];
_13.0 = core::ptr::addr_of_mut!(_12);
_13.2 = -120538557058215513687932454509196377096_i128;
_11.0 = [19023_u16,6219_u16,49955_u16,60365_u16,36006_u16];
_5 = 245_u8 as i8;
RET = [30923_u16,46690_u16,24571_u16,24279_u16,13294_u16];
Goto(bb2)
}
bb2 = {
_1 = _12 as isize;
_11 = (_9,);
_10 = _2;
_4 = -_5;
_9 = _6;
_2 = _1 * _1;
_9 = RET;
_10 = _1;
_6 = [3600_u16,25243_u16,16795_u16,10914_u16,31395_u16];
_10 = !_1;
_16 = 65_u8 as f64;
_5 = !_4;
_13.2 = !132759950474568284184902166497133276639_i128;
RET = [43093_u16,18207_u16,9828_u16,12411_u16,34767_u16];
Goto(bb3)
}
bb3 = {
_13.1 = !4698228342858219003_usize;
_13.2 = 65324454698503315327802423478881139833_i128 & 112805803704098519043750990725688013282_i128;
_11 = (_9,);
_11.0 = _6;
_13.1 = !7998832411534285096_usize;
_13.0 = core::ptr::addr_of_mut!(_12);
_11 = (RET,);
_17 = (_11.0,);
_5 = _4 & _4;
_5 = _4;
_12 = '\u{81f1d}';
_10 = _2 << _4;
_3 = !10378981144244564537_u64;
Call(_13 = fn9(_11, _11.0), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_5 = _4 & _4;
_9 = _11.0;
_12 = '\u{94d8a}';
_16 = _13.1 as f64;
_17 = _11;
_20 = (_2,);
Call(_9 = fn12(_20.0, _16, _16, _13, _20.0, _13, _13, _11.0, _6, _16, _16, _13, _6, _13.1, _5), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
_13.1 = 1587591246_i32 as usize;
_11 = (_9,);
_19 = (-7783991368389057117_i64) as i16;
_22 = _13;
_9 = [42931_u16,25847_u16,56837_u16,2751_u16,20617_u16];
_17 = _11;
_10 = _1;
_13.1 = 34_u8 as usize;
Goto(bb6)
}
bb6 = {
_22.1 = _13.1;
_19 = -(-29166_i16);
RET = [49062_u16,24946_u16,12676_u16,21239_u16,6762_u16];
_12 = '\u{aa401}';
RET = _17.0;
_2 = _20.0 * _20.0;
_19 = 2852_i16;
_24 = [_2,_2,_2];
_2 = 249805956_u32 as isize;
_22.0 = _13.0;
_10 = -_20.0;
_4 = _5;
_24 = [_20.0,_10,_10];
_17.0 = [38251_u16,8146_u16,31305_u16,26351_u16,21865_u16];
_22.2 = 92203559730372253173096925151905394813_u128 as i128;
_24 = [_20.0,_1,_1];
_10 = false as isize;
_17.0 = [64849_u16,41390_u16,29764_u16,64350_u16,28154_u16];
_10 = false as isize;
_20.0 = _1 ^ _2;
_1 = _2;
_16 = 1920_u16 as f64;
_19 = 7455_i16;
_17 = (_6,);
Goto(bb7)
}
bb7 = {
RET = _17.0;
_27.0 = 198_u8;
_23 = core::ptr::addr_of_mut!(_4);
_1 = _2 & _20.0;
_18 = !false;
_17 = (_11.0,);
_28 = (-339031168_i32) as f32;
_22 = _13;
_20 = (_1,);
_27.1 = _16 as u64;
_22.1 = _13.1 ^ _13.1;
_1 = _20.0 + _2;
_4 = _27.0 as i8;
_27.0 = 245_u8;
_27.2 = !6640716839635535064_i64;
_30 = !3122361278_u32;
match _27.0 {
0 => bb8,
1 => bb9,
2 => bb10,
3 => bb11,
4 => bb12,
245 => bb14,
_ => bb13
}
}
bb8 = {
_22.1 = _13.1;
_19 = -(-29166_i16);
RET = [49062_u16,24946_u16,12676_u16,21239_u16,6762_u16];
_12 = '\u{aa401}';
RET = _17.0;
_2 = _20.0 * _20.0;
_19 = 2852_i16;
_24 = [_2,_2,_2];
_2 = 249805956_u32 as isize;
_22.0 = _13.0;
_10 = -_20.0;
_4 = _5;
_24 = [_20.0,_10,_10];
_17.0 = [38251_u16,8146_u16,31305_u16,26351_u16,21865_u16];
_22.2 = 92203559730372253173096925151905394813_u128 as i128;
_24 = [_20.0,_1,_1];
_10 = false as isize;
_17.0 = [64849_u16,41390_u16,29764_u16,64350_u16,28154_u16];
_10 = false as isize;
_20.0 = _1 ^ _2;
_1 = _2;
_16 = 1920_u16 as f64;
_19 = 7455_i16;
_17 = (_6,);
Goto(bb7)
}
bb9 = {
_13.1 = 1587591246_i32 as usize;
_11 = (_9,);
_19 = (-7783991368389057117_i64) as i16;
_22 = _13;
_9 = [42931_u16,25847_u16,56837_u16,2751_u16,20617_u16];
_17 = _11;
_10 = _1;
_13.1 = 34_u8 as usize;
Goto(bb6)
}
bb10 = {
_5 = _4 & _4;
_9 = _11.0;
_12 = '\u{94d8a}';
_16 = _13.1 as f64;
_17 = _11;
_20 = (_2,);
Call(_9 = fn12(_20.0, _16, _16, _13, _20.0, _13, _13, _11.0, _6, _16, _16, _13, _6, _13.1, _5), ReturnTo(bb5), UnwindUnreachable())
}
bb11 = {
_13.1 = !4698228342858219003_usize;
_13.2 = 65324454698503315327802423478881139833_i128 & 112805803704098519043750990725688013282_i128;
_11 = (_9,);
_11.0 = _6;
_13.1 = !7998832411534285096_usize;
_13.0 = core::ptr::addr_of_mut!(_12);
_11 = (RET,);
_17 = (_11.0,);
_5 = _4 & _4;
_5 = _4;
_12 = '\u{81f1d}';
_10 = _2 << _4;
_3 = !10378981144244564537_u64;
Call(_13 = fn9(_11, _11.0), ReturnTo(bb4), UnwindUnreachable())
}
bb12 = {
_1 = _12 as isize;
_11 = (_9,);
_10 = _2;
_4 = -_5;
_9 = _6;
_2 = _1 * _1;
_9 = RET;
_10 = _1;
_6 = [3600_u16,25243_u16,16795_u16,10914_u16,31395_u16];
_10 = !_1;
_16 = 65_u8 as f64;
_5 = !_4;
_13.2 = !132759950474568284184902166497133276639_i128;
RET = [43093_u16,18207_u16,9828_u16,12411_u16,34767_u16];
Goto(bb3)
}
bb13 = {
RET = [868_u16,29458_u16,42335_u16,48135_u16,55701_u16];
RET = [37008_u16,13933_u16,30913_u16,40516_u16,5793_u16];
_13.0 = core::ptr::addr_of_mut!(_12);
_13.0 = core::ptr::addr_of_mut!(_12);
_11 = (_9,);
_11.0 = _9;
_6 = [59869_u16,42701_u16,3728_u16,16991_u16,52245_u16];
_13.0 = core::ptr::addr_of_mut!(_12);
_13.1 = !885874452488426595_usize;
_13.0 = core::ptr::addr_of_mut!(_12);
_11.0 = RET;
_10 = _2;
_2 = _10 >> _13.1;
_11.0 = RET;
_5 = _4 << _2;
_13.2 = 103912068053789766153195089908531841313_i128;
_12 = '\u{f56f3}';
_9 = [57839_u16,65529_u16,28815_u16,20762_u16,47915_u16];
_6 = [29865_u16,25664_u16,25036_u16,11831_u16,36592_u16];
_13.0 = core::ptr::addr_of_mut!(_12);
_13.2 = -120538557058215513687932454509196377096_i128;
_11.0 = [19023_u16,6219_u16,49955_u16,60365_u16,36006_u16];
_5 = 245_u8 as i8;
RET = [30923_u16,46690_u16,24571_u16,24279_u16,13294_u16];
Goto(bb2)
}
bb14 = {
_17 = (_9,);
_5 = _4;
_31.1.0 = !_20.0;
_31.0 = 10587_u16 as u128;
_27.2 = !5798072909717252630_i64;
_13 = (_22.0, _22.1, _22.2);
_11 = _17;
_22.2 = _27.0 as i128;
_31.3.0 = !_13.1;
_19 = (-23772_i16);
_19 = 7958_i16 + (-22488_i16);
_31.1 = (_2,);
_12 = '\u{ea565}';
_30 = 4283416238_u32;
_6 = [59097_u16,3250_u16,56718_u16,46642_u16,44160_u16];
_23 = core::ptr::addr_of_mut!(_4);
_27.0 = !118_u8;
Goto(bb15)
}
bb15 = {
Call(_35 = dump_var(8_usize, 6_usize, Move(_6), 1_usize, Move(_1), 17_usize, Move(_17), 30_usize, Move(_30)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_35 = dump_var(8_usize, 2_usize, Move(_2), 4_usize, Move(_4), 3_usize, Move(_3), 9_usize, Move(_9)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn9(mut _1: ([u16; 5],),mut _2: [u16; 5]) -> (*mut char, usize, i128) {
mir! {
type RET = (*mut char, usize, i128);
let _3: i16;
let _4: isize;
let _5: i64;
let _6: (usize,);
let _7: (u8, u64, i64);
let _8: i128;
let _9: bool;
let _10: (usize,);
let _11: u16;
let _12: (u128, (isize,), u32, (usize,));
let _13: *mut char;
let _14: char;
let _15: [char; 7];
let _16: (*mut (usize, i64, f32, i64, &'static u64, u32),);
let _17: (usize,);
let _18: bool;
let _19: ([u16; 5],);
let _20: ();
let _21: ();
{
_1 = (_2,);
_1 = (_2,);
RET.1 = 1_usize | 2_usize;
RET.2 = !(-82355172139022950858745555601449900495_i128);
RET.1 = 16194925120114668927_usize - 16696194853839158360_usize;
_3 = 32068_u16 as i16;
_2 = [42658_u16,35754_u16,23049_u16,56986_u16,56398_u16];
RET.1 = (-50_i8) as usize;
_1 = (_2,);
RET.2 = -155393608692846709481685017647225730538_i128;
_4 = _3 as isize;
_1.0 = [13325_u16,26286_u16,42401_u16,48178_u16,8623_u16];
_6 = (RET.1,);
_2 = _1.0;
_3 = (-24906_i16);
_4 = -123_isize;
_4 = 9223372036854775807_isize;
_3 = !(-20654_i16);
_1 = (_2,);
_1 = (_2,);
_7.2 = 57754_u16 as i64;
_7.1 = 7174953573093213341_u64;
_7 = (239_u8, 16370893523259111335_u64, 4571507311634808768_i64);
_7 = (130_u8, 5492106617975414015_u64, (-5421804370222061576_i64));
Goto(bb1)
}
bb1 = {
_7 = (46_u8, 7819107886970675547_u64, 4215417734184416990_i64);
_1 = (_2,);
_6.0 = RET.1 ^ RET.1;
_9 = !true;
_1.0 = [24706_u16,17185_u16,60423_u16,10195_u16,56261_u16];
_8 = RET.2;
_7.1 = 145_u16 as u64;
_8 = !RET.2;
_5 = _7.2;
_5 = !_7.2;
_6.0 = RET.1;
_1.0 = [58394_u16,15400_u16,11090_u16,54141_u16,14322_u16];
Goto(bb2)
}
bb2 = {
_2 = [10006_u16,42595_u16,45530_u16,22326_u16,34900_u16];
_10 = _6;
RET.2 = _8 * _8;
RET.1 = _9 as usize;
_7 = (65_u8, 15118432619163640360_u64, _5);
_9 = !false;
_2 = _1.0;
RET.2 = 895946110_u32 as i128;
_4 = (-116_isize);
_10.0 = !_6.0;
_10 = _6;
_7 = (137_u8, 11192657480641554413_u64, _5);
_10.0 = !_6.0;
_2 = _1.0;
_6 = (_10.0,);
_6 = (RET.1,);
_7.1 = !675427431545835809_u64;
_2 = [3964_u16,39648_u16,52300_u16,22700_u16,44752_u16];
_6 = _10;
_3 = -(-20973_i16);
_9 = _7.2 > _5;
_3 = (-24131_i16) ^ (-11823_i16);
Goto(bb3)
}
bb3 = {
_6.0 = _10.0 << _10.0;
_8 = RET.2;
_10 = _6;
_4 = (-9223372036854775808_isize) * 9223372036854775807_isize;
RET.2 = -_8;
_1 = (_2,);
_7.0 = '\u{b18e5}' as u8;
_6.0 = _9 as usize;
RET.1 = _10.0 & _6.0;
Call(_2 = fn10(_3, _4, _10, _7, _9, _7, _7.2, _5, _7, _7.2), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_2 = _1.0;
_10 = _6;
_9 = _5 >= _5;
_11 = _8 as u16;
_3 = (-23153_i16) >> RET.1;
_6 = _10;
RET.1 = _10.0;
_12.3 = (_10.0,);
_2 = [_11,_11,_11,_11,_11];
_2 = _1.0;
_7.1 = _9 as u64;
RET.0 = core::ptr::addr_of_mut!(_14);
_12.2 = !3675565518_u32;
_14 = '\u{3b89b}';
_12.1.0 = -_4;
RET.0 = core::ptr::addr_of_mut!(_14);
_2 = [_11,_11,_11,_11,_11];
_12.1.0 = _4 >> RET.1;
RET.0 = core::ptr::addr_of_mut!(_14);
_4 = _12.1.0 ^ _12.1.0;
_15 = [_14,_14,_14,_14,_14,_14,_14];
RET.0 = core::ptr::addr_of_mut!(_14);
RET.1 = !_12.3.0;
_12.2 = (-269424153_i32) as u32;
Goto(bb5)
}
bb5 = {
_7.0 = 77_u8;
RET.1 = _6.0 ^ _6.0;
_12.0 = !92033959866742253288951539888784666937_u128;
_11 = !29213_u16;
RET.0 = core::ptr::addr_of_mut!(_14);
_3 = -(-4367_i16);
_7.2 = _5 * _5;
_12.1.0 = _11 as isize;
_12.1.0 = _4 & _4;
_14 = '\u{2f9d7}';
RET.2 = _8;
_12.3 = (_10.0,);
_17.0 = _10.0 & _6.0;
_8 = RET.2 | RET.2;
RET.0 = core::ptr::addr_of_mut!(_14);
_7.2 = _5 ^ _5;
_13 = core::ptr::addr_of_mut!(_14);
Goto(bb6)
}
bb6 = {
Call(_20 = dump_var(9_usize, 15_usize, Move(_15), 14_usize, Move(_14), 3_usize, Move(_3), 7_usize, Move(_7)), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
Call(_20 = dump_var(9_usize, 10_usize, Move(_10), 9_usize, Move(_9), 5_usize, Move(_5), 21_usize, _21), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn10(mut _1: i16,mut _2: isize,mut _3: (usize,),mut _4: (u8, u64, i64),mut _5: bool,mut _6: (u8, u64, i64),mut _7: i64,mut _8: i64,mut _9: (u8, u64, i64),mut _10: i64) -> [u16; 5] {
mir! {
type RET = [u16; 5];
let _11: char;
let _12: Adt50;
let _13: (u128, (isize,), u32, (usize,));
let _14: f64;
let _15: [u16; 5];
let _16: f32;
let _17: [u16; 5];
let _18: f32;
let _19: (usize,);
let _20: (u128, (isize,), u32, (usize,));
let _21: *mut u8;
let _22: (*mut u16, i128);
let _23: Adt57;
let _24: ([u16; 5],);
let _25: u64;
let _26: (u8, u64, i64);
let _27: bool;
let _28: ();
let _29: ();
{
_3.0 = '\u{2be84}' as usize;
RET = [44619_u16,25998_u16,15875_u16,28174_u16,257_u16];
_4.0 = _9.0 & _9.0;
_4.1 = !_9.1;
_8 = _6.2 >> _9.2;
_4.2 = _6.1 as i64;
_3 = (1_usize,);
_11 = '\u{4d933}';
_12 = Adt50 { fld0: (-52_i8) };
_12 = Adt50 { fld0: (-43_i8) };
_7 = _6.1 as i64;
_3 = (1_usize,);
_9.2 = _12.fld0 as i64;
_3 = (18191606032886579593_usize,);
_4.1 = _1 as u64;
_7 = _10 - _4.2;
_9.1 = _4.1 >> _9.2;
RET = [65352_u16,28980_u16,41739_u16,45197_u16,29835_u16];
_5 = false;
_12.fld0 = 41_i8 << _4.1;
RET = [3249_u16,35005_u16,4328_u16,45977_u16,31735_u16];
_4.1 = _6.1 ^ _6.1;
_13.3.0 = _3.0;
Goto(bb1)
}
bb1 = {
_4 = (_6.0, _9.1, _10);
_12 = Adt50 { fld0: (-75_i8) };
_4.1 = !_9.1;
_7 = -_6.2;
_9 = (_4.0, _4.1, _6.2);
_9.2 = _4.2 << _7;
_6.0 = _9.2 as u8;
_15 = [62458_u16,29880_u16,50284_u16,15877_u16,13903_u16];
_10 = _11 as i64;
_13.3.0 = _3.0;
_12 = Adt50 { fld0: 92_i8 };
_13.1.0 = _4.2 as isize;
_9.2 = _8 - _8;
_1 = _12.fld0 as i16;
_6 = (_9.0, _4.1, _8);
_4.2 = _7 | _8;
_13.1 = (_2,);
_13.2 = 318178559_u32;
match _13.3.0 {
18191606032886579593 => bb3,
_ => bb2
}
}
bb2 = {
Return()
}
bb3 = {
_12 = Adt50 { fld0: (-95_i8) };
_17 = [26146_u16,39456_u16,29440_u16,27570_u16,53184_u16];
_4.0 = _11 as u8;
_3.0 = !_13.3.0;
_6.2 = _9.2;
_9.1 = _13.2 as u64;
Call(_14 = fn11(_9, _3.0), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_2 = _13.1.0;
_4 = (_6.0, _9.1, _8);
_19.0 = !_13.3.0;
_9.2 = _4.2 >> _2;
_19 = (_3.0,);
_7 = _11 as i64;
_4.0 = !_6.0;
_13.3 = _19;
_3.0 = _19.0;
RET = [19524_u16,18636_u16,53678_u16,684_u16,5764_u16];
_5 = false;
_13.1.0 = _2;
_11 = '\u{66198}';
_13.1.0 = _2;
RET = [49326_u16,3278_u16,42220_u16,308_u16,47009_u16];
_13.3.0 = _19.0;
_3 = _19;
_12 = Adt50 { fld0: 56_i8 };
_4 = _9;
_19 = _13.3;
_12 = Adt50 { fld0: 65_i8 };
_20.1.0 = !_13.1.0;
match _12.fld0 {
0 => bb5,
1 => bb6,
2 => bb7,
65 => bb9,
_ => bb8
}
}
bb5 = {
_12 = Adt50 { fld0: (-95_i8) };
_17 = [26146_u16,39456_u16,29440_u16,27570_u16,53184_u16];
_4.0 = _11 as u8;
_3.0 = !_13.3.0;
_6.2 = _9.2;
_9.1 = _13.2 as u64;
Call(_14 = fn11(_9, _3.0), ReturnTo(bb4), UnwindUnreachable())
}
bb6 = {
Return()
}
bb7 = {
_4 = (_6.0, _9.1, _10);
_12 = Adt50 { fld0: (-75_i8) };
_4.1 = !_9.1;
_7 = -_6.2;
_9 = (_4.0, _4.1, _6.2);
_9.2 = _4.2 << _7;
_6.0 = _9.2 as u8;
_15 = [62458_u16,29880_u16,50284_u16,15877_u16,13903_u16];
_10 = _11 as i64;
_13.3.0 = _3.0;
_12 = Adt50 { fld0: 92_i8 };
_13.1.0 = _4.2 as isize;
_9.2 = _8 - _8;
_1 = _12.fld0 as i16;
_6 = (_9.0, _4.1, _8);
_4.2 = _7 | _8;
_13.1 = (_2,);
_13.2 = 318178559_u32;
match _13.3.0 {
18191606032886579593 => bb3,
_ => bb2
}
}
bb8 = {
Return()
}
bb9 = {
_4 = (_9.0, _9.1, _6.2);
_19 = (_13.3.0,);
_20.0 = 54240457566267536889783631614273990171_u128;
_20.1.0 = _2;
_11 = '\u{9992e}';
_13.3 = (_19.0,);
_15 = RET;
_13.1.0 = _2 - _2;
RET = _17;
_20.1 = (_13.1.0,);
_9.0 = !_6.0;
_9.0 = !_6.0;
RET = [17549_u16,43269_u16,31109_u16,51886_u16,46992_u16];
_12 = Adt50 { fld0: (-84_i8) };
_2 = _13.1.0;
_13.0 = _20.0;
_18 = _13.1.0 as f32;
match _13.0 {
0 => bb3,
1 => bb2,
2 => bb10,
3 => bb11,
4 => bb12,
5 => bb13,
54240457566267536889783631614273990171 => bb15,
_ => bb14
}
}
bb10 = {
Return()
}
bb11 = {
_4 = (_6.0, _9.1, _10);
_12 = Adt50 { fld0: (-75_i8) };
_4.1 = !_9.1;
_7 = -_6.2;
_9 = (_4.0, _4.1, _6.2);
_9.2 = _4.2 << _7;
_6.0 = _9.2 as u8;
_15 = [62458_u16,29880_u16,50284_u16,15877_u16,13903_u16];
_10 = _11 as i64;
_13.3.0 = _3.0;
_12 = Adt50 { fld0: 92_i8 };
_13.1.0 = _4.2 as isize;
_9.2 = _8 - _8;
_1 = _12.fld0 as i16;
_6 = (_9.0, _4.1, _8);
_4.2 = _7 | _8;
_13.1 = (_2,);
_13.2 = 318178559_u32;
match _13.3.0 {
18191606032886579593 => bb3,
_ => bb2
}
}
bb12 = {
Return()
}
bb13 = {
Return()
}
bb14 = {
_2 = _13.1.0;
_4 = (_6.0, _9.1, _8);
_19.0 = !_13.3.0;
_9.2 = _4.2 >> _2;
_19 = (_3.0,);
_7 = _11 as i64;
_4.0 = !_6.0;
_13.3 = _19;
_3.0 = _19.0;
RET = [19524_u16,18636_u16,53678_u16,684_u16,5764_u16];
_5 = false;
_13.1.0 = _2;
_11 = '\u{66198}';
_13.1.0 = _2;
RET = [49326_u16,3278_u16,42220_u16,308_u16,47009_u16];
_13.3.0 = _19.0;
_3 = _19;
_12 = Adt50 { fld0: 56_i8 };
_4 = _9;
_19 = _13.3;
_12 = Adt50 { fld0: 65_i8 };
_20.1.0 = !_13.1.0;
match _12.fld0 {
0 => bb5,
1 => bb6,
2 => bb7,
65 => bb9,
_ => bb8
}
}
bb15 = {
_20.3 = (_13.3.0,);
_19 = _20.3;
_9 = (_6.0, _6.1, _6.2);
_20.3 = _13.3;
_14 = _9.1 as f64;
_24 = (_17,);
_4.2 = _9.2 >> _9.1;
_9.2 = _8 - _4.2;
_6.2 = _9.2 + _9.2;
_22.1 = _11 as i128;
_12 = Adt50 { fld0: (-20_i8) };
_6.0 = _11 as u8;
_15 = [58939_u16,36434_u16,43421_u16,24061_u16,34443_u16];
Goto(bb16)
}
bb16 = {
Call(_28 = dump_var(10_usize, 2_usize, Move(_2), 10_usize, Move(_10), 1_usize, Move(_1), 7_usize, Move(_7)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_28 = dump_var(10_usize, 19_usize, Move(_19), 13_usize, Move(_13), 4_usize, Move(_4), 15_usize, Move(_15)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn11(mut _1: (u8, u64, i64),mut _2: usize) -> f64 {
mir! {
type RET = f64;
let _3: [i64; 8];
let _4: *mut u8;
let _5: isize;
let _6: Adt50;
let _7: [isize; 7];
let _8: (u8, u64, i64);
let _9: Adt56;
let _10: (u8, u64, i64);
let _11: [i64; 8];
let _12: i32;
let _13: [isize; 3];
let _14: [i64; 8];
let _15: char;
let _16: (u8, u64, i64);
let _17: u8;
let _18: u64;
let _19: Adt57;
let _20: u8;
let _21: u128;
let _22: Adt52;
let _23: Adt53;
let _24: [u16; 5];
let _25: (*mut (usize, i64, f32, i64, &'static u64, u32),);
let _26: ();
let _27: ();
{
_2 = 3_usize << _1.2;
_1.0 = 159_u8 & 212_u8;
_2 = !11206738298624073912_usize;
_1.0 = !171_u8;
_1 = (244_u8, 16707350455471881817_u64, 4365734778190368737_i64);
_1.1 = 6588876432916124347_u64;
RET = _2 as f64;
Goto(bb1)
}
bb1 = {
_1.1 = RET as u64;
_6.fld0 = _2 as i8;
_3 = [_1.2,_1.2,_1.2,_1.2,_1.2,_1.2,_1.2,_1.2];
Goto(bb2)
}
bb2 = {
_2 = _1.0 as usize;
_8.1 = _1.1 ^ _1.1;
_2 = 3802372257882165004_usize + 17709781959756883381_usize;
RET = _2 as f64;
RET = (-11919_i16) as f64;
_10.0 = true as u8;
_8.0 = _10.0 << _2;
_8.2 = _1.2;
_3 = [_8.2,_8.2,_1.2,_8.2,_8.2,_1.2,_1.2,_8.2];
_11 = [_8.2,_1.2,_8.2,_8.2,_1.2,_1.2,_8.2,_1.2];
RET = _1.2 as f64;
_4 = core::ptr::addr_of_mut!(_10.0);
_10 = _8;
Call(_2 = core::intrinsics::transmute(_8.2), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_8.1 = _10.1;
_4 = core::ptr::addr_of_mut!(_10.0);
_7 = [13_isize,(-9223372036854775808_isize),(-94_isize),9223372036854775807_isize,(-11_isize),(-9223372036854775808_isize),(-9223372036854775808_isize)];
_12 = (-262983481_i32);
_5 = (-9223372036854775808_isize) | 9223372036854775807_isize;
_10.2 = _1.2 | _1.2;
_8.2 = _10.2 >> _10.2;
_3 = _11;
_8 = _1;
RET = _10.0 as f64;
_10.1 = _1.1;
_8.1 = !_1.1;
_2 = _10.1 as usize;
_8.1 = 25602_i16 as u64;
_11 = [_1.2,_8.2,_1.2,_8.2,_10.2,_10.2,_10.2,_8.2];
_1.1 = 68874577368863625750445777783257850909_u128 as u64;
_1.0 = !(*_4);
_10.0 = _5 as u8;
_1.0 = (*_4);
_13 = [_5,_5,_5];
match _8.0 {
0 => bb4,
1 => bb5,
2 => bb6,
3 => bb7,
4 => bb8,
5 => bb9,
244 => bb11,
_ => bb10
}
}
bb4 = {
_2 = _1.0 as usize;
_8.1 = _1.1 ^ _1.1;
_2 = 3802372257882165004_usize + 17709781959756883381_usize;
RET = _2 as f64;
RET = (-11919_i16) as f64;
_10.0 = true as u8;
_8.0 = _10.0 << _2;
_8.2 = _1.2;
_3 = [_8.2,_8.2,_1.2,_8.2,_8.2,_1.2,_1.2,_8.2];
_11 = [_8.2,_1.2,_8.2,_8.2,_1.2,_1.2,_8.2,_1.2];
RET = _1.2 as f64;
_4 = core::ptr::addr_of_mut!(_10.0);
_10 = _8;
Call(_2 = core::intrinsics::transmute(_8.2), ReturnTo(bb3), UnwindUnreachable())
}
bb5 = {
_1.1 = RET as u64;
_6.fld0 = _2 as i8;
_3 = [_1.2,_1.2,_1.2,_1.2,_1.2,_1.2,_1.2,_1.2];
Goto(bb2)
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
_15 = '\u{888bb}';
_5 = -9223372036854775807_isize;
_6 = Adt50 { fld0: 122_i8 };
_3 = _11;
_5 = -(-11_isize);
_16.0 = !_10.0;
_8.0 = (*_4) - _10.0;
_5 = (-9223372036854775808_isize) | (-9223372036854775808_isize);
_8.1 = _12 as u64;
_10.2 = _8.2 * _1.2;
_16.0 = _8.0;
_12 = -1880266340_i32;
_8 = _10;
_12 = (-1957869561_i32);
_6 = Adt50 { fld0: (-102_i8) };
_6 = Adt50 { fld0: (-119_i8) };
_14 = _3;
_1.0 = (*_4);
_5 = 13_isize + 9223372036854775807_isize;
_18 = !_10.1;
_13 = [_5,_5,_5];
match _12 {
0 => bb1,
1 => bb9,
2 => bb8,
340282366920938463463374607429810341895 => bb12,
_ => bb4
}
}
bb12 = {
_16.1 = _18;
_4 = core::ptr::addr_of_mut!(_16.0);
_16 = _10;
_7 = [_5,_5,_5,_5,_5,_5,_5];
Goto(bb13)
}
bb13 = {
_8.2 = _16.2;
_16.0 = !_1.0;
_10.1 = _1.1;
RET = 117948541626916017470942949517534843938_u128 as f64;
_17 = (*_4) >> _1.0;
Goto(bb14)
}
bb14 = {
_17 = _8.0;
_8 = _1;
_6 = Adt50 { fld0: (-86_i8) };
_3 = [_10.2,_10.2,_16.2,_16.2,_8.2,_10.2,_8.2,_10.2];
_17 = !(*_4);
_1.1 = !_10.1;
_17 = !(*_4);
_16.1 = _1.1;
_17 = !(*_4);
_13 = [_5,_5,_5];
_16.1 = _1.1 - _8.1;
_14 = [_1.2,_8.2,_8.2,_16.2,_1.2,_8.2,_10.2,_1.2];
_10.2 = _16.2;
_8 = _10;
RET = _2 as f64;
_16.0 = _17;
RET = 2126551760_u32 as f64;
_13 = [_5,_5,_5];
_11 = _3;
_16.2 = _8.2 & _8.2;
_12 = _15 as i32;
_20 = _17 & (*_4);
_10.1 = !_18;
Goto(bb15)
}
bb15 = {
Call(_26 = dump_var(11_usize, 14_usize, Move(_14), 20_usize, Move(_20), 13_usize, Move(_13), 1_usize, Move(_1)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_26 = dump_var(11_usize, 16_usize, Move(_16), 12_usize, Move(_12), 2_usize, Move(_2), 3_usize, Move(_3)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn12(mut _1: isize,mut _2: f64,mut _3: f64,mut _4: (*mut char, usize, i128),mut _5: isize,mut _6: (*mut char, usize, i128),mut _7: (*mut char, usize, i128),mut _8: [u16; 5],mut _9: [u16; 5],mut _10: f64,mut _11: f64,mut _12: (*mut char, usize, i128),mut _13: [u16; 5],mut _14: usize,mut _15: i8) -> [u16; 5] {
mir! {
type RET = [u16; 5];
let _16: ((usize,), *mut u16);
let _17: (u8, u64, i64);
let _18: [isize; 7];
let _19: f32;
let _20: u128;
let _21: isize;
let _22: char;
let _23: (u128, (isize,), u32, (usize,));
let _24: [char; 7];
let _25: isize;
let _26: f32;
let _27: char;
let _28: [isize; 3];
let _29: u64;
let _30: ([u16; 5],);
let _31: isize;
let _32: Adt61;
let _33: isize;
let _34: (u8, u64, i64);
let _35: ();
let _36: ();
{
_5 = _1;
_12.0 = _4.0;
_4 = (_12.0, _6.1, _7.2);
RET = _13;
_4.0 = _7.0;
_13 = _9;
_6.0 = _12.0;
_7 = (_4.0, _4.1, _12.2);
_6.1 = 1932808005_i32 as usize;
_6.2 = _4.2 >> _4.1;
_7 = (_6.0, _14, _6.2);
_15 = (-52_i8);
_8 = [19331_u16,58628_u16,62317_u16,15250_u16,23566_u16];
_4 = _7;
_6.2 = _7.2;
_7.1 = !_12.1;
_4.2 = _7.2;
Goto(bb1)
}
bb1 = {
_17 = (73_u8, 18360635248743940410_u64, (-3186640796559311178_i64));
_5 = _15 as isize;
_14 = _7.1;
RET = _13;
_18 = [_1,_5,_1,_1,_1,_5,_1];
_18 = [_1,_1,_5,_1,_1,_1,_1];
_12.1 = !_14;
_4.0 = _7.0;
_18 = [_1,_1,_1,_5,_1,_1,_1];
_11 = _3 + _2;
_17.2 = -5654771758342493667_i64;
_17 = (148_u8, 8334019778550720908_u64, (-2901888774405923744_i64));
_2 = _11 - _11;
_6.1 = _14;
_16.0 = (_14,);
_14 = _17.1 as usize;
_6 = _4;
RET = _8;
_17.2 = !(-5519184601702291220_i64);
_7.2 = 90266693_i32 as i128;
_6 = (_12.0, _7.1, _4.2);
Call(_2 = fn13(_4.1, _11, _3, _3, _4, _8, _11, _12, _3), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_17.0 = 38_u8 | 148_u8;
_7.1 = '\u{4f60d}' as usize;
_7.2 = _4.2;
_12.0 = _4.0;
_12.2 = !_7.2;
_1 = 4067438041_u32 as isize;
_23.3 = _16.0;
_6.2 = -_7.2;
_25 = _1 - _1;
_11 = -_2;
_14 = 3370509134_u32 as usize;
_13 = _8;
_23.1.0 = _25 >> _23.3.0;
RET = [42573_u16,1576_u16,40426_u16,62979_u16,5273_u16];
_6.0 = core::ptr::addr_of_mut!(_22);
_23.1.0 = _25 >> _6.1;
_7.2 = 26437254336869029248579930635356912215_u128 as i128;
_7.0 = _12.0;
_27 = '\u{3c273}';
_28 = [_1,_5,_23.1.0];
_4 = _12;
_4.1 = _12.2 as usize;
_17 = (149_u8, 15823300942240759599_u64, (-5679094925667603561_i64));
_10 = (-1667959517_i32) as f64;
_26 = _4.1 as f32;
match _17.0 {
0 => bb3,
149 => bb5,
_ => bb4
}
}
bb3 = {
_17 = (73_u8, 18360635248743940410_u64, (-3186640796559311178_i64));
_5 = _15 as isize;
_14 = _7.1;
RET = _13;
_18 = [_1,_5,_1,_1,_1,_5,_1];
_18 = [_1,_1,_5,_1,_1,_1,_1];
_12.1 = !_14;
_4.0 = _7.0;
_18 = [_1,_1,_1,_5,_1,_1,_1];
_11 = _3 + _2;
_17.2 = -5654771758342493667_i64;
_17 = (148_u8, 8334019778550720908_u64, (-2901888774405923744_i64));
_2 = _11 - _11;
_6.1 = _14;
_16.0 = (_14,);
_14 = _17.1 as usize;
_6 = _4;
RET = _8;
_17.2 = !(-5519184601702291220_i64);
_7.2 = 90266693_i32 as i128;
_6 = (_12.0, _7.1, _4.2);
Call(_2 = fn13(_4.1, _11, _3, _3, _4, _8, _11, _12, _3), ReturnTo(bb2), UnwindUnreachable())
}
bb4 = {
Return()
}
bb5 = {
RET = [56216_u16,12166_u16,60359_u16,26898_u16,9166_u16];
_17.1 = !6960739256183695637_u64;
_12.2 = _26 as i128;
_17.1 = 10090310350496438557_u64 + 11387567981750806635_u64;
_7 = _6;
_19 = _26 * _26;
_9 = [55258_u16,65027_u16,30493_u16,48252_u16,34568_u16];
_6.0 = _4.0;
_6.1 = !_23.3.0;
_15 = -19_i8;
_30 = (RET,);
match _17.0 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb6,
4 => bb7,
5 => bb8,
6 => bb9,
149 => bb11,
_ => bb10
}
}
bb6 = {
Return()
}
bb7 = {
_17 = (73_u8, 18360635248743940410_u64, (-3186640796559311178_i64));
_5 = _15 as isize;
_14 = _7.1;
RET = _13;
_18 = [_1,_5,_1,_1,_1,_5,_1];
_18 = [_1,_1,_5,_1,_1,_1,_1];
_12.1 = !_14;
_4.0 = _7.0;
_18 = [_1,_1,_1,_5,_1,_1,_1];
_11 = _3 + _2;
_17.2 = -5654771758342493667_i64;
_17 = (148_u8, 8334019778550720908_u64, (-2901888774405923744_i64));
_2 = _11 - _11;
_6.1 = _14;
_16.0 = (_14,);
_14 = _17.1 as usize;
_6 = _4;
RET = _8;
_17.2 = !(-5519184601702291220_i64);
_7.2 = 90266693_i32 as i128;
_6 = (_12.0, _7.1, _4.2);
Call(_2 = fn13(_4.1, _11, _3, _3, _4, _8, _11, _12, _3), ReturnTo(bb2), UnwindUnreachable())
}
bb8 = {
_17.0 = 38_u8 | 148_u8;
_7.1 = '\u{4f60d}' as usize;
_7.2 = _4.2;
_12.0 = _4.0;
_12.2 = !_7.2;
_1 = 4067438041_u32 as isize;
_23.3 = _16.0;
_6.2 = -_7.2;
_25 = _1 - _1;
_11 = -_2;
_14 = 3370509134_u32 as usize;
_13 = _8;
_23.1.0 = _25 >> _23.3.0;
RET = [42573_u16,1576_u16,40426_u16,62979_u16,5273_u16];
_6.0 = core::ptr::addr_of_mut!(_22);
_23.1.0 = _25 >> _6.1;
_7.2 = 26437254336869029248579930635356912215_u128 as i128;
_7.0 = _12.0;
_27 = '\u{3c273}';
_28 = [_1,_5,_23.1.0];
_4 = _12;
_4.1 = _12.2 as usize;
_17 = (149_u8, 15823300942240759599_u64, (-5679094925667603561_i64));
_10 = (-1667959517_i32) as f64;
_26 = _4.1 as f32;
match _17.0 {
0 => bb3,
149 => bb5,
_ => bb4
}
}
bb9 = {
_17 = (73_u8, 18360635248743940410_u64, (-3186640796559311178_i64));
_5 = _15 as isize;
_14 = _7.1;
RET = _13;
_18 = [_1,_5,_1,_1,_1,_5,_1];
_18 = [_1,_1,_5,_1,_1,_1,_1];
_12.1 = !_14;
_4.0 = _7.0;
_18 = [_1,_1,_1,_5,_1,_1,_1];
_11 = _3 + _2;
_17.2 = -5654771758342493667_i64;
_17 = (148_u8, 8334019778550720908_u64, (-2901888774405923744_i64));
_2 = _11 - _11;
_6.1 = _14;
_16.0 = (_14,);
_14 = _17.1 as usize;
_6 = _4;
RET = _8;
_17.2 = !(-5519184601702291220_i64);
_7.2 = 90266693_i32 as i128;
_6 = (_12.0, _7.1, _4.2);
Call(_2 = fn13(_4.1, _11, _3, _3, _4, _8, _11, _12, _3), ReturnTo(bb2), UnwindUnreachable())
}
bb10 = {
Return()
}
bb11 = {
_31 = !_23.1.0;
_23.2 = !4188803162_u32;
_23.2 = _17.0 as u32;
_7.1 = 64567_u16 as usize;
_7.0 = _12.0;
_30 = (_9,);
_25 = _27 as isize;
_30 = (_8,);
_12.1 = !_16.0.0;
_22 = _27;
_6.0 = core::ptr::addr_of_mut!(_27);
_5 = _17.0 as isize;
_23.3 = (_6.1,);
_17 = (8_u8, 10333838313440934977_u64, 2233840555822952375_i64);
_4 = _12;
_11 = _15 as f64;
_4.0 = _7.0;
_23.2 = !3969232402_u32;
_4 = (_6.0, _23.3.0, _6.2);
_30 = (_8,);
_23.3.0 = !_4.1;
_14 = _16.0.0 * _6.1;
_12.1 = _14 | _6.1;
_30 = (_8,);
_23.1.0 = !_31;
_23.1 = (_5,);
_6.1 = _26 as usize;
_20 = !89315433787376386361354403538343495043_u128;
_12 = (_6.0, _4.1, _6.2);
_7 = (_4.0, _14, _4.2);
match _17.1 {
0 => bb6,
1 => bb12,
2 => bb13,
3 => bb14,
10333838313440934977 => bb16,
_ => bb15
}
}
bb12 = {
Return()
}
bb13 = {
_17.0 = 38_u8 | 148_u8;
_7.1 = '\u{4f60d}' as usize;
_7.2 = _4.2;
_12.0 = _4.0;
_12.2 = !_7.2;
_1 = 4067438041_u32 as isize;
_23.3 = _16.0;
_6.2 = -_7.2;
_25 = _1 - _1;
_11 = -_2;
_14 = 3370509134_u32 as usize;
_13 = _8;
_23.1.0 = _25 >> _23.3.0;
RET = [42573_u16,1576_u16,40426_u16,62979_u16,5273_u16];
_6.0 = core::ptr::addr_of_mut!(_22);
_23.1.0 = _25 >> _6.1;
_7.2 = 26437254336869029248579930635356912215_u128 as i128;
_7.0 = _12.0;
_27 = '\u{3c273}';
_28 = [_1,_5,_23.1.0];
_4 = _12;
_4.1 = _12.2 as usize;
_17 = (149_u8, 15823300942240759599_u64, (-5679094925667603561_i64));
_10 = (-1667959517_i32) as f64;
_26 = _4.1 as f32;
match _17.0 {
0 => bb3,
149 => bb5,
_ => bb4
}
}
bb14 = {
RET = [56216_u16,12166_u16,60359_u16,26898_u16,9166_u16];
_17.1 = !6960739256183695637_u64;
_12.2 = _26 as i128;
_17.1 = 10090310350496438557_u64 + 11387567981750806635_u64;
_7 = _6;
_19 = _26 * _26;
_9 = [55258_u16,65027_u16,30493_u16,48252_u16,34568_u16];
_6.0 = _4.0;
_6.1 = !_23.3.0;
_15 = -19_i8;
_30 = (RET,);
match _17.0 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb6,
4 => bb7,
5 => bb8,
6 => bb9,
149 => bb11,
_ => bb10
}
}
bb15 = {
Return()
}
bb16 = {
RET = _13;
_23.0 = _20 >> _17.1;
_31 = !_5;
_27 = _22;
_12.2 = _6.2;
_7.0 = _12.0;
_23.2 = _15 as u32;
_7.1 = _17.2 as usize;
_4 = _7;
_6 = _12;
_12 = (_4.0, _6.1, _7.2);
_17.2 = -829247961999439267_i64;
_12 = (_4.0, _6.1, _7.2);
_5 = _4.2 as isize;
_6.1 = _23.3.0 | _16.0.0;
_17 = (36_u8, 16855017633637027952_u64, 2750524283577547066_i64);
_34.2 = _17.2 ^ _17.2;
Goto(bb17)
}
bb17 = {
Call(_35 = dump_var(12_usize, 23_usize, Move(_23), 31_usize, Move(_31), 27_usize, Move(_27), 13_usize, Move(_13)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_35 = dump_var(12_usize, 17_usize, Move(_17), 5_usize, Move(_5), 15_usize, Move(_15), 28_usize, Move(_28)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn13(mut _1: usize,mut _2: f64,mut _3: f64,mut _4: f64,mut _5: (*mut char, usize, i128),mut _6: [u16; 5],mut _7: f64,mut _8: (*mut char, usize, i128),mut _9: f64) -> f64 {
mir! {
type RET = f64;
let _10: bool;
let _11: bool;
let _12: [isize; 7];
let _13: (bool,);
let _14: f64;
let _15: *mut u8;
let _16: ();
let _17: ();
{
RET = 10357509500239281119_u64 as f64;
_6 = [44431_u16,31619_u16,28810_u16,64724_u16,16858_u16];
_8 = (_5.0, _5.1, _5.2);
_5.1 = _1;
_3 = _2;
_5 = (_8.0, _1, _8.2);
_2 = _7;
RET = 20_u8 as f64;
_3 = _7;
_13.0 = true;
RET = _2;
_6 = [2051_u16,52555_u16,48673_u16,11180_u16,1241_u16];
_11 = _13.0;
_10 = _11;
_8 = (_5.0, _1, _5.2);
_5.1 = 286211808317275261822074348676049919720_u128 as usize;
RET = _2 + _2;
_8.0 = _5.0;
_8.0 = _5.0;
Goto(bb1)
}
bb1 = {
Call(_16 = dump_var(13_usize, 10_usize, Move(_10), 11_usize, Move(_11), 17_usize, _17, 17_usize, _17), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
pub fn main() {
                fn0(std::hint::black_box(209524458973568032589777693620790351254_u128), std::hint::black_box('\u{4da4e}'), std::hint::black_box(2690283754_u32), std::hint::black_box(52_i8), std::hint::black_box(47782_u16), std::hint::black_box((-1463017206_i32)));
                
            }
#[derive(Debug,Copy,Clone)]
pub enum Adt45 {
Variant0{
fld0: [i64; 8],
fld1: char,
fld2: *mut char,
fld3: *mut u16,

},
Variant1{
fld0: u128,
fld1: ([u16; 5],),
fld2: isize,
fld3: f64,
fld4: ((*mut char, usize, i128), [char; 7], f64),
fld5: [isize; 7],

}}
#[derive(Debug)]
pub enum Adt46 {
Variant0{
fld0: bool,
fld1: u64,
fld2: isize,
fld3: i8,
fld4: ((usize,), *mut u16),
fld5: i128,
fld6: *mut char,

},
Variant1{
fld0: i128,
fld1: f32,
fld2: usize,
fld3: (usize,),
fld4: (isize,),
fld5: u32,

}}
#[derive(Debug)]
pub enum Adt47 {
Variant0{
fld0: *const i64,
fld1: [char; 7],
fld2: *mut i8,
fld3: u64,
fld4: f32,
fld5: i32,
fld6: i64,

},
Variant1{
fld0: bool,
fld1: *mut u8,
fld2: i128,
fld3: Adt46,
fld4: *mut i8,

},
Variant2{
fld0: *const *mut u8,
fld1: Adt46,
fld2: isize,
fld3: (*mut char, usize, i128),
fld4: *const i64,

}}
#[derive(Debug)]
pub struct Adt48 {
fld0: f64,
fld1: char,
fld2: ([u16; 5],),
fld3: Adt46,
fld4: *const *mut u8,
fld5: (*mut u16, i128),
fld6: Adt45,
}
#[derive(Debug)]
pub struct Adt49 {
fld0: [i64; 8],
fld1: Adt45,
fld2: [u16; 5],
fld3: i64,
fld4: i16,
fld5: *mut [i64; 8],
}
#[derive(Debug)]
pub struct Adt50 {
fld0: i8,
}
#[derive(Debug)]
pub struct Adt51 {
fld0: u32,
fld1: f64,
fld2: [i64; 8],
fld3: Adt49,
fld4: ((*mut char, usize, i128), [char; 7], f64),
fld5: *const *mut u8,
fld6: *mut u16,
}
#[derive(Debug)]
pub enum Adt52 {
Variant0{
fld0: (*mut char, usize, i128),
fld1: i32,
fld2: [isize; 7],

},
Variant1{
fld0: Adt48,

},
Variant2{
fld0: *mut char,
fld1: Adt48,
fld2: Adt47,

}}
#[derive(Debug)]
pub enum Adt53 {
Variant0{
fld0: Adt51,
fld1: ((usize,), *mut u16),
fld2: [isize; 7],
fld3: *mut char,
fld4: Adt50,
fld5: (u8, u64, i64),

},
Variant1{
fld0: f64,
fld1: *const i64,
fld2: ([u16; 5],),
fld3: Adt49,
fld4: *mut u16,
fld5: Adt50,
fld6: Adt51,

},
Variant2{
fld0: Adt50,
fld1: [u16; 5],
fld2: [char; 7],
fld3: Adt49,
fld4: *mut char,
fld5: [i64; 8],
fld6: i64,
fld7: usize,

}}
#[derive(Debug)]
pub enum Adt54 {
Variant0{
fld0: (bool,),
fld1: char,
fld2: u128,
fld3: Adt49,
fld4: usize,
fld5: f64,
fld6: *const *mut u8,
fld7: Adt52,

},
Variant1{
fld0: Adt52,
fld1: *const *mut u8,
fld2: (u8, u64, i64),
fld3: f64,

},
Variant2{
fld0: [u16; 5],
fld1: *mut char,
fld2: Adt47,
fld3: Adt53,

}}
#[derive(Debug)]
pub struct Adt55 {
fld0: u64,
fld1: *const *mut u8,
fld2: isize,
fld3: (*mut u16, i128),
fld4: Adt54,
}
#[derive(Debug)]
pub enum Adt56 {
Variant0{
fld0: (u128, (isize,), u32, (usize,)),
fld1: ([u16; 5],),

},
Variant1{
fld0: (u8, u64, i64),
fld1: *mut [i64; 8],
fld2: *const i64,
fld3: u8,

},
Variant2{
fld0: bool,
fld1: char,
fld2: [u16; 5],
fld3: *const *mut u8,
fld4: f64,

}}
#[derive(Debug)]
pub enum Adt57 {
Variant0{
fld0: (u128, (isize,), u32, (usize,)),
fld1: Adt49,
fld2: [i64; 8],
fld3: i8,
fld4: u128,
fld5: Adt53,
fld6: i64,
fld7: f32,

},
Variant1{
fld0: Adt48,
fld1: Adt50,
fld2: [isize; 3],

}}
#[derive(Debug)]
pub enum Adt58 {
Variant0{
fld0: Adt53,
fld1: Adt49,
fld2: ([u16; 5],),
fld3: (*mut char, usize, i128),
fld4: *const i64,
fld5: Adt45,

},
Variant1{
fld0: usize,
fld1: u64,
fld2: Adt46,
fld3: (u128, (isize,), u32, (usize,)),
fld4: *const *mut u8,
fld5: Adt47,

},
Variant2{
fld0: (bool,),
fld1: Adt47,
fld2: isize,
fld3: ((usize,), *mut u16),
fld4: *mut u16,
fld5: Adt45,

}}
#[derive(Debug,Copy,Clone)]
pub struct Adt59 {
fld0: *mut [i64; 8],
fld1: *mut u8,
fld2: (bool,),
}
#[derive(Debug)]
pub enum Adt60 {
Variant0{
fld0: Adt58,

},
Variant1{
fld0: (usize,),
fld1: Adt53,
fld2: usize,

},
Variant2{
fld0: bool,
fld1: ((*mut char, usize, i128), [char; 7], f64),
fld2: (usize,),

}}
#[derive(Debug)]
pub enum Adt61 {
Variant0{
fld0: u8,
fld1: Adt50,

},
Variant1{
fld0: Adt53,
fld1: Adt57,
fld2: Adt55,
fld3: [u16; 5],
fld4: Adt47,
fld5: i32,
fld6: *mut [i64; 8],
fld7: [i64; 8],

},
Variant2{
fld0: (*mut u16, i128),
fld1: Adt50,
fld2: isize,
fld3: u16,
fld4: (usize,),
fld5: i32,
fld6: [i64; 8],
fld7: i128,

},
Variant3{
fld0: u128,

}}

