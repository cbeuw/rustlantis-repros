#![recursion_limit = "1024"]
    #![feature(custom_mir, core_intrinsics, const_hash)]
    #![allow(unused_parens, unused_assignments, overflowing_literals)]
    extern crate core;
    use core::intrinsics::mir::*;

    use std::fmt::Debug;

    #[inline(never)]
    fn dump_var(
        f: usize,
        var0: usize, val0: impl Debug,
        var1: usize, val1: impl Debug,
        var2: usize, val2: impl Debug,
        var3: usize, val3: impl Debug,
    ) {
        println!("fn{f}:_{var0} = {val0:?}\n_{var1} = {val1:?}\n_{var2} = {val2:?}\n_{var3} = {val3:?}");
    }
    #[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn0(mut _1: bool,mut _2: u64,mut _3: u32,mut _4: u8,mut _5: i16,mut _6: i32,mut _7: i64,mut _8: i128) -> i16 {
mir! {
type RET = i16;
let _9: isize;
let _10: i32;
let _11: i32;
let _12: (i64, [char; 4], u64);
let _13: u128;
let _14: isize;
let _15: [isize; 6];
let _16: isize;
let _17: Adt56;
let _18: bool;
let _19: ();
let _20: ();
{
_8 = (-10444059358970840560001689734284231452_i128) << 523682679_i32;
_6 = (-2303717497163157640_i64) as i32;
_4 = 8215972625444868206_u64 as u8;
_5 = -(-29372_i16);
RET = _5;
Goto(bb1)
}
bb1 = {
_1 = RET != _5;
_6 = (-710954450_i32) - (-1155863063_i32);
RET = 6228211907598758908_u64 as i16;
_5 = RET;
_1 = _6 > _6;
_6 = _8 as i32;
RET = _5 * _5;
_2 = 7500759738130815992_u64 + 4321542350162404899_u64;
RET = _1 as i16;
_2 = 9481007340645319119_u64;
RET = _5 >> _5;
_3 = 1009230594_u32;
_7 = _3 as i64;
_2 = _5 as u64;
_3 = !2022714920_u32;
_7 = (-7545330850257997013_i64);
_3 = !3901068706_u32;
RET = _5;
_6 = (-582690238_i32);
_5 = RET;
_11 = _6 ^ _6;
_5 = RET << _3;
_11 = _6;
Call(_5 = fn1(_8, _6, _11, _4, _8, _6, _2, _7, _11, RET), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_10 = -_6;
_8 = _2 as i128;
_5 = 19582499453751667653313692965453940046_u128 as i16;
Call(_9 = fn14(_11, _6, _11, _11, _3, _1, _7, _11, _10, _5), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_6 = RET as i32;
_12.0 = -_7;
_12.2 = !_2;
_4 = 117_u8 * 98_u8;
_11 = _10;
_13 = 312724982983497740501222778021350110400_u128 ^ 215704338465643018597455373616617376074_u128;
_12.1 = ['\u{97788}','\u{bf44}','\u{4432c}','\u{55e27}'];
_6 = _10 << _10;
_6 = -_11;
RET = -_5;
_14 = _6 as isize;
_7 = _12.0;
_7 = 52_i8 as i64;
_16 = _13 as isize;
_12.2 = !_2;
Call(RET = fn15(_1, _9, _5, _9, _5, _12.1, _12.1), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_5 = RET & RET;
Goto(bb5)
}
bb5 = {
Call(_19 = dump_var(0_usize, 2_usize, Move(_2), 6_usize, Move(_6), 3_usize, Move(_3), 7_usize, Move(_7)), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
Call(_19 = dump_var(0_usize, 11_usize, Move(_11), 8_usize, Move(_8), 13_usize, Move(_13), 20_usize, _20), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn1(mut _1: i128,mut _2: i32,mut _3: i32,mut _4: u8,mut _5: i128,mut _6: i32,mut _7: u64,mut _8: i64,mut _9: i32,mut _10: i16) -> i16 {
mir! {
type RET = i16;
let _11: u64;
let _12: f64;
let _13: usize;
let _14: isize;
let _15: [char; 4];
let _16: char;
let _17: Adt48;
let _18: bool;
let _19: usize;
let _20: [i64; 1];
let _21: Adt47;
let _22: Adt56;
let _23: f64;
let _24: (i128, u128);
let _25: *mut f32;
let _26: f32;
let _27: [u16; 2];
let _28: (u16, (u32, [char; 4], f32), *const u128);
let _29: i64;
let _30: *mut [isize; 6];
let _31: Adt53;
let _32: ();
let _33: ();
{
_5 = '\u{1e9bc}' as i128;
_7 = 16603428162005099775_u64 >> _3;
RET = -_10;
_4 = 2_u8;
_1 = -_5;
RET = _10 | _10;
_6 = _2 ^ _3;
_8 = _3 as i64;
_9 = _7 as i32;
_10 = RET << RET;
RET = _10 << _3;
_10 = -RET;
_2 = 17709177750589714147_usize as i32;
_8 = (-6754205414688279098_i64);
_8 = (-2707576222390426714_i64);
_1 = _5 >> _7;
_11 = _7 + _7;
_7 = _10 as u64;
_8 = 7244829225609763985_i64 ^ (-2660044916266806100_i64);
_9 = _8 as i32;
_1 = _5;
_11 = 14506_u16 as u64;
_12 = _7 as f64;
RET = _10;
Goto(bb1)
}
bb1 = {
RET = _10 ^ _10;
RET = _10 + _10;
RET = _10 * _10;
_7 = _11 ^ _11;
_12 = _7 as f64;
_12 = 1_usize as f64;
_9 = 178193246582979302623759757391661743342_u128 as i32;
_16 = '\u{bef38}';
_17.fld0.1 = [_16,_16,_16,_16];
_14 = _11 as isize;
_12 = 16_i8 as f64;
_5 = -_1;
_15 = _17.fld0.1;
_16 = '\u{f9591}';
RET = !_10;
_19 = 125097597786131167219125317286129865062_u128 as usize;
_17.fld0.0 = !130656569861208838439108685501360177537_u128;
_11 = _7 | _7;
Call(_5 = core::intrinsics::transmute(_17.fld0.1), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_19 = 15658631635412961973_usize;
RET = !_10;
_9 = _2 & _2;
_18 = !true;
_16 = '\u{7d08f}';
_20 = [_8];
_7 = !_11;
_14 = _16 as isize;
_10 = _19 as i16;
_11 = !_7;
_15 = [_16,_16,_16,_16];
_8 = (-2020684267979374140_i64) | 3021800909184765359_i64;
_3 = _6 & _9;
_2 = _3;
_17.fld0.0 = 183031833688909232148946091934619886618_u128 & 60472397047597038422564948593030759940_u128;
_17.fld0.0 = _16 as u128;
_5 = _1;
_24 = (_5, _17.fld0.0);
match _4 {
0 => bb3,
1 => bb4,
3 => bb6,
4 => bb7,
5 => bb8,
2 => bb10,
_ => bb9
}
}
bb3 = {
RET = _10 ^ _10;
RET = _10 + _10;
RET = _10 * _10;
_7 = _11 ^ _11;
_12 = _7 as f64;
_12 = 1_usize as f64;
_9 = 178193246582979302623759757391661743342_u128 as i32;
_16 = '\u{bef38}';
_17.fld0.1 = [_16,_16,_16,_16];
_14 = _11 as isize;
_12 = 16_i8 as f64;
_5 = -_1;
_15 = _17.fld0.1;
_16 = '\u{f9591}';
RET = !_10;
_19 = 125097597786131167219125317286129865062_u128 as usize;
_17.fld0.0 = !130656569861208838439108685501360177537_u128;
_11 = _7 | _7;
Call(_5 = core::intrinsics::transmute(_17.fld0.1), ReturnTo(bb2), UnwindUnreachable())
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_20 = [_8];
_17.fld0.0 = _24.1 ^ _24.1;
_20 = [_8];
_13 = !_19;
_7 = _12 as u64;
_17.fld0.1 = [_16,_16,_16,_16];
Call(_5 = fn2(_6, _24), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_16 = '\u{23264}';
_24.0 = _1;
_24 = (_1, _17.fld0.0);
_5 = _24.0;
_3 = _12 as i32;
Goto(bb12)
}
bb12 = {
_24.1 = !_17.fld0.0;
_12 = _8 as f64;
_25 = core::ptr::addr_of_mut!(_26);
_12 = 82_i8 as f64;
_7 = _11;
_3 = _2 & _6;
_7 = !_11;
_17.fld0.1 = _15;
_12 = (-109_i8) as f64;
_25 = core::ptr::addr_of_mut!(_26);
_1 = _24.0;
Call(_24.1 = fn13(_20, _1), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
_1 = _24.0;
_7 = _11 * _11;
_5 = RET as i128;
_17.fld0.1 = _15;
_28.1.0 = (-100_i8) as u32;
_28.1.0 = _18 as u32;
match _19 {
0 => bb10,
1 => bb5,
2 => bb3,
3 => bb11,
4 => bb14,
5 => bb15,
15658631635412961973 => bb17,
_ => bb16
}
}
bb14 = {
Return()
}
bb15 = {
_16 = '\u{23264}';
_24.0 = _1;
_24 = (_1, _17.fld0.0);
_5 = _24.0;
_3 = _12 as i32;
Goto(bb12)
}
bb16 = {
_19 = 15658631635412961973_usize;
RET = !_10;
_9 = _2 & _2;
_18 = !true;
_16 = '\u{7d08f}';
_20 = [_8];
_7 = !_11;
_14 = _16 as isize;
_10 = _19 as i16;
_11 = !_7;
_15 = [_16,_16,_16,_16];
_8 = (-2020684267979374140_i64) | 3021800909184765359_i64;
_3 = _6 & _9;
_2 = _3;
_17.fld0.0 = 183031833688909232148946091934619886618_u128 & 60472397047597038422564948593030759940_u128;
_17.fld0.0 = _16 as u128;
_5 = _1;
_24 = (_5, _17.fld0.0);
match _4 {
0 => bb3,
1 => bb4,
3 => bb6,
4 => bb7,
5 => bb8,
2 => bb10,
_ => bb9
}
}
bb17 = {
_23 = -_12;
_24.1 = !_17.fld0.0;
_19 = _13;
_1 = -_5;
_26 = RET as f32;
_28.2 = core::ptr::addr_of!(_17.fld0.0);
_24 = (_1, _17.fld0.0);
_18 = false;
_5 = _1 * _1;
_18 = _19 >= _13;
_27 = [790_u16,13202_u16];
_29 = (-111_i8) as i64;
_5 = _1 >> _3;
_15 = [_16,_16,_16,_16];
_3 = -_2;
_10 = -RET;
_29 = _24.0 as i64;
Goto(bb18)
}
bb18 = {
Call(_32 = dump_var(1_usize, 20_usize, Move(_20), 5_usize, Move(_5), 3_usize, Move(_3), 6_usize, Move(_6)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_32 = dump_var(1_usize, 1_usize, Move(_1), 10_usize, Move(_10), 8_usize, Move(_8), 4_usize, Move(_4)), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Call(_32 = dump_var(1_usize, 15_usize, Move(_15), 2_usize, Move(_2), 33_usize, _33, 33_usize, _33), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn2(mut _1: i32,mut _2: (i128, u128)) -> i128 {
mir! {
type RET = i128;
let _3: Adt42;
let _4: [i128; 8];
let _5: [u16; 2];
let _6: (i128, u128);
let _7: isize;
let _8: u64;
let _9: f64;
let _10: f32;
let _11: ();
let _12: ();
{
RET = 7587348870167936148_u64 as i128;
RET = -_2.0;
_3.fld1.1 = ['\u{26b27}','\u{f04be}','\u{70d52}','\u{3aa0e}'];
_3.fld1.1 = ['\u{366cc}','\u{363d1}','\u{a9677}','\u{cd199}'];
Goto(bb1)
}
bb1 = {
_3.fld2 = [_2.0,_2.0,_2.0,_2.0,_2.0,_2.0,RET,RET];
_3.fld0 = _2;
_3.fld1.0 = _2.1;
_3.fld2 = [_3.fld0.0,_3.fld0.0,RET,_2.0,RET,RET,_3.fld0.0,RET];
Goto(bb2)
}
bb2 = {
_2.1 = !_3.fld0.1;
RET = _2.0;
_2.1 = _3.fld0.1 - _3.fld1.0;
_3.fld0 = (_2.0, _2.1);
RET = 161_u8 as i128;
_2.0 = !_3.fld0.0;
_2 = (_3.fld0.0, _3.fld0.1);
RET = _2.0;
_2 = (_3.fld0.0, _3.fld0.1);
_2.1 = !_3.fld1.0;
_5 = [5833_u16,56881_u16];
RET = !_3.fld0.0;
_2.1 = 139_u8 as u128;
Goto(bb3)
}
bb3 = {
_5 = [23930_u16,58452_u16];
_2 = (RET, _3.fld0.1);
_4 = _3.fld2;
_3.fld0.0 = 1301981618903435091_u64 as i128;
_6.0 = _3.fld0.0 - RET;
_4 = [_2.0,_6.0,RET,_2.0,_6.0,RET,_2.0,RET];
_6 = (_3.fld0.0, _2.1);
_2.0 = 1027_i16 as i128;
_6.0 = _2.0 << _2.1;
_6.1 = !_2.1;
_1 = 3804774246_u32 as i32;
_3.fld1.1 = ['\u{d0116}','\u{cb842}','\u{2fc63}','\u{fba56}'];
_3.fld0 = (_2.0, _2.1);
Call(_3.fld1.1 = fn3(RET, _6, _6, _6.0, _1, _1, _6.0, _2.1, RET, _3.fld2), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_3.fld2 = [_2.0,_3.fld0.0,_6.0,_6.0,RET,_6.0,_3.fld0.0,_3.fld0.0];
_2.1 = !_6.1;
_3.fld2 = _4;
_8 = 29225_i16 as u64;
_8 = _3.fld0.0 as u64;
_1 = (-1522214370_i32) + (-899605261_i32);
_3.fld1.1 = ['\u{1880a}','\u{e93a6}','\u{be525}','\u{3912c}'];
_4 = _3.fld2;
_6 = (RET, _3.fld0.1);
_3.fld1.0 = _2.1;
RET = 35594_u16 as i128;
_2.0 = _1 as i128;
_6.0 = RET * _2.0;
_5 = [15248_u16,41442_u16];
_2.1 = !_3.fld0.1;
_7 = 9223372036854775807_isize;
match _7 {
0 => bb1,
1 => bb5,
2 => bb6,
3 => bb7,
4 => bb8,
5 => bb9,
6 => bb10,
9223372036854775807 => bb12,
_ => bb11
}
}
bb5 = {
_5 = [23930_u16,58452_u16];
_2 = (RET, _3.fld0.1);
_4 = _3.fld2;
_3.fld0.0 = 1301981618903435091_u64 as i128;
_6.0 = _3.fld0.0 - RET;
_4 = [_2.0,_6.0,RET,_2.0,_6.0,RET,_2.0,RET];
_6 = (_3.fld0.0, _2.1);
_2.0 = 1027_i16 as i128;
_6.0 = _2.0 << _2.1;
_6.1 = !_2.1;
_1 = 3804774246_u32 as i32;
_3.fld1.1 = ['\u{d0116}','\u{cb842}','\u{2fc63}','\u{fba56}'];
_3.fld0 = (_2.0, _2.1);
Call(_3.fld1.1 = fn3(RET, _6, _6, _6.0, _1, _1, _6.0, _2.1, RET, _3.fld2), ReturnTo(bb4), UnwindUnreachable())
}
bb6 = {
_2.1 = !_3.fld0.1;
RET = _2.0;
_2.1 = _3.fld0.1 - _3.fld1.0;
_3.fld0 = (_2.0, _2.1);
RET = 161_u8 as i128;
_2.0 = !_3.fld0.0;
_2 = (_3.fld0.0, _3.fld0.1);
RET = _2.0;
_2 = (_3.fld0.0, _3.fld0.1);
_2.1 = !_3.fld1.0;
_5 = [5833_u16,56881_u16];
RET = !_3.fld0.0;
_2.1 = 139_u8 as u128;
Goto(bb3)
}
bb7 = {
_3.fld2 = [_2.0,_2.0,_2.0,_2.0,_2.0,_2.0,RET,RET];
_3.fld0 = _2;
_3.fld1.0 = _2.1;
_3.fld2 = [_3.fld0.0,_3.fld0.0,RET,_2.0,RET,RET,_3.fld0.0,RET];
Goto(bb2)
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
Return()
}
bb12 = {
_6.0 = -RET;
_8 = !15016236502532250215_u64;
_6 = _2;
_3.fld1.0 = _3.fld0.1;
_2.1 = _3.fld1.0;
_4 = [RET,_2.0,_3.fld0.0,RET,_3.fld0.0,_3.fld0.0,_2.0,RET];
_3.fld1.1 = ['\u{3dd3f}','\u{36b9d}','\u{f744}','\u{c6870}'];
_1 = -1996825995_i32;
_3.fld0.1 = !_2.1;
_6.1 = !_3.fld0.1;
_8 = 2858299208_u32 as u64;
Goto(bb13)
}
bb13 = {
_3.fld0.0 = RET;
Goto(bb14)
}
bb14 = {
_5 = [41076_u16,53027_u16];
_6.1 = (-83_i8) as u128;
_2.1 = true as u128;
Goto(bb15)
}
bb15 = {
Call(_11 = dump_var(2_usize, 6_usize, Move(_6), 1_usize, Move(_1), 5_usize, Move(_5), 12_usize, _12), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn3(mut _1: i128,mut _2: (i128, u128),mut _3: (i128, u128),mut _4: i128,mut _5: i32,mut _6: i32,mut _7: i128,mut _8: u128,mut _9: i128,mut _10: [i128; 8]) -> [char; 4] {
mir! {
type RET = [char; 4];
let _11: *mut *mut [isize; 6];
let _12: Adt56;
let _13: [isize; 6];
let _14: u16;
let _15: (*const char, usize, [isize; 6]);
let _16: [char; 4];
let _17: char;
let _18: Adt51;
let _19: isize;
let _20: i16;
let _21: f64;
let _22: isize;
let _23: bool;
let _24: f64;
let _25: Adt54;
let _26: Adt42;
let _27: i8;
let _28: u8;
let _29: i128;
let _30: Adt45;
let _31: ();
let _32: ();
{
_4 = -_7;
_9 = _2.0 ^ _7;
Goto(bb1)
}
bb1 = {
_10 = [_9,_7,_2.0,_7,_4,_9,_1,_3.0];
_2.0 = 36488_u16 as i128;
_2.1 = !_3.1;
Call(_1 = fn4(_9, _9, _9), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_5 = (-30156_i16) as i32;
_8 = 157_u8 as u128;
_13 = [(-9223372036854775808_isize),(-9223372036854775808_isize),9223372036854775807_isize,(-9223372036854775808_isize),(-9223372036854775808_isize),9223372036854775807_isize];
RET = ['\u{8cb85}','\u{a552}','\u{d2e46}','\u{726d}'];
RET = ['\u{576e6}','\u{e19a4}','\u{1d377}','\u{e00ef}'];
_14 = !60074_u16;
_2.0 = _1 >> _1;
_2.0 = _1;
_13 = [(-81_isize),(-9223372036854775808_isize),9223372036854775807_isize,9223372036854775807_isize,22_isize,9223372036854775807_isize];
_13 = [(-9223372036854775808_isize),(-9223372036854775808_isize),9223372036854775807_isize,9223372036854775807_isize,9223372036854775807_isize,84_isize];
_6 = -_5;
_3.0 = _2.0 & _2.0;
_3.0 = !_2.0;
_4 = -_1;
_3 = (_2.0, _2.1);
_10 = [_1,_4,_2.0,_1,_2.0,_4,_1,_1];
_15.2 = [(-9223372036854775808_isize),(-75_isize),(-9223372036854775808_isize),9223372036854775807_isize,13_isize,9223372036854775807_isize];
_2.1 = _3.1 + _8;
_15.0 = core::ptr::addr_of!(_17);
_15.2 = [(-9223372036854775808_isize),5_isize,(-9223372036854775808_isize),(-55_isize),40_isize,30_isize];
Call(_17 = fn7(_2.0, _3, _3, _2, RET, _3.0, _2, _1, _2, _2.0, _2.0, _2, _4, _2, _2, _4), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
RET = [_17,_17,_17,_17];
_16 = RET;
_3 = (_2.0, _2.1);
_2.1 = _3.1 >> _4;
_16 = [_17,_17,_17,_17];
_2.1 = _8 + _8;
_15.1 = 5_usize | 14182466123556559810_usize;
RET = [_17,_17,_17,_17];
_2.1 = _8 + _3.1;
RET = [_17,_17,_17,_17];
_19 = !96_isize;
_10 = [_4,_4,_4,_2.0,_3.0,_1,_1,_2.0];
_13 = _15.2;
Goto(bb4)
}
bb4 = {
_6 = _5;
_16 = [_17,_17,_17,_17];
_3 = (_2.0, _2.1);
RET = [_17,_17,_17,_17];
_14 = _15.1 as u16;
_20 = (-16939_i16);
_5 = -_6;
_5 = _6 ^ _6;
RET = _16;
_22 = _19;
_21 = 1094739856_u32 as f64;
_2.0 = _3.0 - _4;
_13 = _15.2;
_10 = [_4,_1,_1,_9,_1,_3.0,_3.0,_3.0];
_2 = (_4, _3.1);
_25 = Adt54::Variant2 { fld0: 233_u8 };
_8 = _3.1;
_22 = (-90_i8) as isize;
_19 = !_22;
_2.0 = _3.0 << _4;
_4 = _1;
_26.fld1.0 = _8 - _3.1;
_4 = _15.1 as i128;
match _20 {
340282366920938463463374607431768194517 => bb6,
_ => bb5
}
}
bb5 = {
RET = [_17,_17,_17,_17];
_16 = RET;
_3 = (_2.0, _2.1);
_2.1 = _3.1 >> _4;
_16 = [_17,_17,_17,_17];
_2.1 = _8 + _8;
_15.1 = 5_usize | 14182466123556559810_usize;
RET = [_17,_17,_17,_17];
_2.1 = _8 + _3.1;
RET = [_17,_17,_17,_17];
_19 = !96_isize;
_10 = [_4,_4,_4,_2.0,_3.0,_1,_1,_2.0];
_13 = _15.2;
Goto(bb4)
}
bb6 = {
RET = [_17,_17,_17,_17];
_4 = _1 - _2.0;
_24 = _21 + _21;
_15.2 = [_22,_22,_22,_19,_19,_22];
place!(Field::<u8>(Variant(_25, 2), 0)) = _15.1 as u8;
_19 = _26.fld1.0 as isize;
place!(Field::<u8>(Variant(_25, 2), 0)) = 99_u8 - 192_u8;
_9 = -_4;
place!(Field::<u8>(Variant(_25, 2), 0)) = !212_u8;
_19 = _22;
_23 = !true;
_19 = _22 * _22;
_13 = [_19,_19,_19,_22,_19,_19];
_17 = '\u{ccedf}';
_26.fld1.1 = [_17,_17,_17,_17];
_24 = -_21;
_26.fld0.1 = _26.fld1.0;
place!(Field::<u8>(Variant(_25, 2), 0)) = !158_u8;
_21 = _14 as f64;
_8 = _26.fld1.0;
_2.0 = _3.0 & _9;
_26.fld0 = (_4, _3.1);
_19 = _22;
_26.fld1.0 = _3.1 & _26.fld0.1;
_26.fld0.1 = !_26.fld1.0;
SetDiscriminant(_25, 2);
_4 = _3.0 & _26.fld0.0;
_27 = 117_i8 & 112_i8;
_26.fld1 = (_26.fld0.1, _16);
_3 = _2;
match _20 {
0 => bb5,
1 => bb2,
2 => bb7,
3 => bb8,
4 => bb9,
5 => bb10,
6 => bb11,
340282366920938463463374607431768194517 => bb13,
_ => bb12
}
}
bb7 = {
RET = [_17,_17,_17,_17];
_16 = RET;
_3 = (_2.0, _2.1);
_2.1 = _3.1 >> _4;
_16 = [_17,_17,_17,_17];
_2.1 = _8 + _8;
_15.1 = 5_usize | 14182466123556559810_usize;
RET = [_17,_17,_17,_17];
_2.1 = _8 + _3.1;
RET = [_17,_17,_17,_17];
_19 = !96_isize;
_10 = [_4,_4,_4,_2.0,_3.0,_1,_1,_2.0];
_13 = _15.2;
Goto(bb4)
}
bb8 = {
_6 = _5;
_16 = [_17,_17,_17,_17];
_3 = (_2.0, _2.1);
RET = [_17,_17,_17,_17];
_14 = _15.1 as u16;
_20 = (-16939_i16);
_5 = -_6;
_5 = _6 ^ _6;
RET = _16;
_22 = _19;
_21 = 1094739856_u32 as f64;
_2.0 = _3.0 - _4;
_13 = _15.2;
_10 = [_4,_1,_1,_9,_1,_3.0,_3.0,_3.0];
_2 = (_4, _3.1);
_25 = Adt54::Variant2 { fld0: 233_u8 };
_8 = _3.1;
_22 = (-90_i8) as isize;
_19 = !_22;
_2.0 = _3.0 << _4;
_4 = _1;
_26.fld1.0 = _8 - _3.1;
_4 = _15.1 as i128;
match _20 {
340282366920938463463374607431768194517 => bb6,
_ => bb5
}
}
bb9 = {
RET = [_17,_17,_17,_17];
_16 = RET;
_3 = (_2.0, _2.1);
_2.1 = _3.1 >> _4;
_16 = [_17,_17,_17,_17];
_2.1 = _8 + _8;
_15.1 = 5_usize | 14182466123556559810_usize;
RET = [_17,_17,_17,_17];
_2.1 = _8 + _3.1;
RET = [_17,_17,_17,_17];
_19 = !96_isize;
_10 = [_4,_4,_4,_2.0,_3.0,_1,_1,_2.0];
_13 = _15.2;
Goto(bb4)
}
bb10 = {
_5 = (-30156_i16) as i32;
_8 = 157_u8 as u128;
_13 = [(-9223372036854775808_isize),(-9223372036854775808_isize),9223372036854775807_isize,(-9223372036854775808_isize),(-9223372036854775808_isize),9223372036854775807_isize];
RET = ['\u{8cb85}','\u{a552}','\u{d2e46}','\u{726d}'];
RET = ['\u{576e6}','\u{e19a4}','\u{1d377}','\u{e00ef}'];
_14 = !60074_u16;
_2.0 = _1 >> _1;
_2.0 = _1;
_13 = [(-81_isize),(-9223372036854775808_isize),9223372036854775807_isize,9223372036854775807_isize,22_isize,9223372036854775807_isize];
_13 = [(-9223372036854775808_isize),(-9223372036854775808_isize),9223372036854775807_isize,9223372036854775807_isize,9223372036854775807_isize,84_isize];
_6 = -_5;
_3.0 = _2.0 & _2.0;
_3.0 = !_2.0;
_4 = -_1;
_3 = (_2.0, _2.1);
_10 = [_1,_4,_2.0,_1,_2.0,_4,_1,_1];
_15.2 = [(-9223372036854775808_isize),(-75_isize),(-9223372036854775808_isize),9223372036854775807_isize,13_isize,9223372036854775807_isize];
_2.1 = _3.1 + _8;
_15.0 = core::ptr::addr_of!(_17);
_15.2 = [(-9223372036854775808_isize),5_isize,(-9223372036854775808_isize),(-55_isize),40_isize,30_isize];
Call(_17 = fn7(_2.0, _3, _3, _2, RET, _3.0, _2, _1, _2, _2.0, _2.0, _2, _4, _2, _2, _4), ReturnTo(bb3), UnwindUnreachable())
}
bb11 = {
_10 = [_9,_7,_2.0,_7,_4,_9,_1,_3.0];
_2.0 = 36488_u16 as i128;
_2.1 = !_3.1;
Call(_1 = fn4(_9, _9, _9), ReturnTo(bb2), UnwindUnreachable())
}
bb12 = {
Return()
}
bb13 = {
_23 = !false;
_25 = Adt54::Variant2 { fld0: 36_u8 };
_15.2 = [_19,_22,_22,_22,_19,_22];
place!(Field::<u8>(Variant(_25, 2), 0)) = _17 as u8;
_2 = (_26.fld0.0, _26.fld0.1);
_29 = -_1;
_20 = Field::<u8>(Variant(_25, 2), 0) as i16;
_3 = (_26.fld0.0, _26.fld1.0);
_28 = _19 as u8;
_15.2 = [_19,_22,_19,_22,_19,_19];
_26.fld0.1 = _8 & _2.1;
_27 = !56_i8;
_19 = _22 | _22;
_6 = _17 as i32;
_26.fld3 = _15.0;
_13 = _15.2;
place!(Field::<u8>(Variant(_25, 2), 0)) = !_28;
_1 = _20 as i128;
_26.fld0.1 = !_26.fld1.0;
_3.0 = _4 & _2.0;
_15.0 = _26.fld3;
Call(_26.fld0.1 = fn12(_29, _29, _4, _15, _29, _3.0, _2.0, _2), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
_23 = true | true;
_19 = _23 as isize;
_8 = !_26.fld0.1;
RET = [_17,_17,_17,_17];
Goto(bb15)
}
bb15 = {
Call(_31 = dump_var(3_usize, 6_usize, Move(_6), 10_usize, Move(_10), 28_usize, Move(_28), 16_usize, Move(_16)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_31 = dump_var(3_usize, 14_usize, Move(_14), 23_usize, Move(_23), 4_usize, Move(_4), 2_usize, Move(_2)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_31 = dump_var(3_usize, 20_usize, Move(_20), 13_usize, Move(_13), 32_usize, _32, 32_usize, _32), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn4(mut _1: i128,mut _2: i128,mut _3: i128) -> i128 {
mir! {
type RET = i128;
let _4: *mut *mut [isize; 6];
let _5: (u32, [char; 4], f32);
let _6: (i128, i8, bool, *const u128);
let _7: ();
let _8: ();
{
_3 = _2 & _1;
RET = '\u{91a50}' as i128;
_2 = _3 ^ _1;
_3 = 9223372036854775807_isize as i128;
RET = _2;
_2 = false as i128;
RET = _1;
_3 = RET & RET;
_2 = _1;
RET = 133628883029900693946259079037574530753_u128 as i128;
RET = 9223372036854775807_isize as i128;
Call(_3 = fn5(_2, _1, _1, _1, _2), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
RET = _3;
_2 = -RET;
_5.2 = 215861369490498009376970818400898422325_u128 as f32;
_5.0 = !354508947_u32;
RET = _2 & _3;
_5.2 = 1629319722231960941_u64 as f32;
_3 = _2 & RET;
_5.2 = _5.0 as f32;
_6.2 = _2 > _2;
_6.0 = !RET;
_1 = _5.2 as i128;
_1 = (-22_i8) as i128;
_6.1 = !(-95_i8);
_1 = RET;
_1 = !RET;
_5.2 = 31627_u16 as f32;
_3 = _5.2 as i128;
Goto(bb2)
}
bb2 = {
Call(_7 = dump_var(4_usize, 3_usize, Move(_3), 8_usize, _8, 8_usize, _8, 8_usize, _8), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn5(mut _1: i128,mut _2: i128,mut _3: i128,mut _4: i128,mut _5: i128) -> i128 {
mir! {
type RET = i128;
let _6: (i128, u128);
let _7: isize;
let _8: (u128, [char; 4]);
let _9: ();
let _10: ();
{
RET = _5;
RET = _2;
RET = !_4;
RET = 205_u8 as i128;
_5 = -_4;
_2 = _3;
_1 = _2;
RET = 4_usize as i128;
_6.0 = !_3;
RET = 253_u8 as i128;
_5 = !_3;
_6.1 = 150281282447506328371464270862554094735_u128;
_6 = (_2, 134407446487751949454355219514423956360_u128);
_4 = -_2;
_1 = !_5;
Goto(bb1)
}
bb1 = {
RET = 3_usize as i128;
_2 = _1;
_3 = 914356079_i32 as i128;
_5 = _1 << _2;
_3 = -_2;
_8.1 = ['\u{96411}','\u{beb03}','\u{37101}','\u{5d427}'];
_8.0 = _6.1;
_8.0 = 459266967_i32 as u128;
RET = -_6.0;
_8.1 = ['\u{baa7}','\u{93cde}','\u{276d4}','\u{2a7ab}'];
_4 = _3;
_2 = _6.0 + _6.0;
_2 = -_1;
_8.0 = _6.1;
_2 = _1 + _5;
_6.1 = _8.0 << _8.0;
RET = _1;
_6.0 = 243_u8 as i128;
_7 = 9223372036854775807_isize | 9223372036854775807_isize;
_5 = (-12318_i16) as i128;
Call(_5 = fn6(_2, _3, _6, _2, _4, _3, _8, _6.1, _6, _3, _1, RET, _8.0), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_8.0 = _6.1 - _6.1;
_8.1 = ['\u{4adeb}','\u{b7e17}','\u{e0a04}','\u{c124f}'];
_5 = _2 | _2;
_2 = -_5;
_6 = (RET, _8.0);
_6 = (_5, _8.0);
_1 = _5 << _8.0;
Goto(bb3)
}
bb3 = {
_5 = 1874752639_u32 as i128;
RET = _1;
_1 = _6.0 - _2;
_6.1 = _8.0;
_7 = 9223372036854775807_isize | 9223372036854775807_isize;
_5 = _1 & _6.0;
_6 = (_2, _8.0);
_3 = !RET;
_6 = (RET, _8.0);
RET = _3 | _5;
_1 = (-21847_i16) as i128;
_6.1 = _8.0;
_7 = 9223372036854775807_isize ^ 9223372036854775807_isize;
_5 = 3375412200_u32 as i128;
_6 = (RET, _8.0);
_8.0 = !_6.1;
_6 = (_3, _8.0);
_2 = RET;
_6.1 = _8.0;
Goto(bb4)
}
bb4 = {
Call(_9 = dump_var(5_usize, 5_usize, Move(_5), 2_usize, Move(_2), 3_usize, Move(_3), 8_usize, Move(_8)), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn6(mut _1: i128,mut _2: i128,mut _3: (i128, u128),mut _4: i128,mut _5: i128,mut _6: i128,mut _7: (u128, [char; 4]),mut _8: u128,mut _9: (i128, u128),mut _10: i128,mut _11: i128,mut _12: i128,mut _13: u128) -> i128 {
mir! {
type RET = i128;
let _14: [i128; 8];
let _15: u16;
let _16: ();
let _17: ();
{
_5 = _1 & _1;
RET = _12 << _12;
_12 = 3271_u16 as i128;
_9.0 = -_11;
_13 = _7.0;
_4 = RET;
_9 = _3;
_2 = _3.0 - _5;
_11 = _5 | _4;
_15 = 15656_u16 & 48022_u16;
_13 = false as u128;
_12 = _11 >> _11;
RET = (-3757779628484713202_i64) as i128;
_7.1 = ['\u{a9c67}','\u{59987}','\u{5da52}','\u{9542b}'];
_12 = _5 << _11;
_15 = !41479_u16;
_9.0 = _12 >> _11;
_9.1 = _8;
_3.1 = _1 as u128;
RET = -_11;
_4 = _5 * _12;
_4 = _11;
_3.1 = _8;
Goto(bb1)
}
bb1 = {
Call(_16 = dump_var(6_usize, 13_usize, Move(_13), 2_usize, Move(_2), 7_usize, Move(_7), 15_usize, Move(_15)), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Call(_16 = dump_var(6_usize, 4_usize, Move(_4), 10_usize, Move(_10), 12_usize, Move(_12), 17_usize, _17), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn7(mut _1: i128,mut _2: (i128, u128),mut _3: (i128, u128),mut _4: (i128, u128),mut _5: [char; 4],mut _6: i128,mut _7: (i128, u128),mut _8: i128,mut _9: (i128, u128),mut _10: i128,mut _11: i128,mut _12: (i128, u128),mut _13: i128,mut _14: (i128, u128),mut _15: (i128, u128),mut _16: i128) -> char {
mir! {
type RET = char;
let _17: f32;
let _18: bool;
let _19: Adt44;
let _20: u64;
let _21: bool;
let _22: isize;
let _23: Adt51;
let _24: Adt48;
let _25: [isize; 6];
let _26: isize;
let _27: (char, u64, u32);
let _28: u16;
let _29: (u128, [char; 4]);
let _30: (u16, (u32, [char; 4], f32), *const u128);
let _31: bool;
let _32: Adt46;
let _33: i32;
let _34: *const char;
let _35: bool;
let _36: char;
let _37: (u32, [char; 4], f32);
let _38: Adt45;
let _39: &'static u128;
let _40: f64;
let _41: bool;
let _42: isize;
let _43: Adt55;
let _44: Adt48;
let _45: u128;
let _46: [i128; 8];
let _47: Adt53;
let _48: isize;
let _49: i8;
let _50: [u16; 2];
let _51: isize;
let _52: isize;
let _53: i128;
let _54: [u16; 2];
let _55: (i128, u128);
let _56: isize;
let _57: Adt48;
let _58: Adt46;
let _59: (u8, char, u32);
let _60: (u128, [char; 4]);
let _61: i16;
let _62: ();
let _63: ();
{
_14.1 = _4.1 & _12.1;
_7 = (_9.0, _9.1);
_15.0 = _9.0;
_9.1 = _14.1 ^ _2.1;
_14.0 = (-941419866_i32) as i128;
_15 = (_2.0, _14.1);
_9.1 = _14.1 - _15.1;
RET = '\u{10ccbd}';
_9.1 = 7954164284397423929_u64 as u128;
_14.1 = 1742666067_u32 as u128;
_3 = (_4.0, _15.1);
Call(_13 = core::intrinsics::bswap(_7.0), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_17 = _8 as f32;
_13 = _4.0 & _1;
_5 = [RET,RET,RET,RET];
_4.0 = _9.0 + _9.0;
_2 = _9;
_18 = !false;
_21 = !_18;
_24.fld0 = (_12.1, _5);
_24.fld0.1 = [RET,RET,RET,RET];
_25 = [9223372036854775807_isize,26_isize,(-9223372036854775808_isize),52_isize,(-105_isize),9223372036854775807_isize];
_6 = 86_u8 as i128;
_27.2 = 1605937169_u32 & 2108767825_u32;
_25 = [(-9223372036854775808_isize),9223372036854775807_isize,9223372036854775807_isize,(-9223372036854775808_isize),(-9223372036854775808_isize),(-9223372036854775808_isize)];
_24.fld0 = (_7.1, _5);
_26 = (-9223372036854775808_isize) & 9223372036854775807_isize;
_6 = _10;
_15.0 = -_10;
_14.1 = !_7.1;
_21 = !_18;
_27 = (RET, 7498886689430005136_u64, 3764337639_u32);
Call(_19 = fn8(_16, _9, _15.0, _16, _7, _7, _13, _2, _15.0), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_29.0 = Field::<u32>(Variant(_19, 1), 1) as u128;
_11 = _27.0 as i128;
Goto(bb3)
}
bb3 = {
place!(Field::<(i128, u128)>(Variant(_19, 1), 2)).1 = _29.0 << _3.0;
_9.1 = !_29.0;
_7.0 = _1 + _1;
_30.1.0 = Field::<u8>(Variant(_19, 1), 0) as u32;
_5 = _24.fld0.1;
_24.fld0 = (_29.0, _5);
_30.1 = (Field::<u32>(Variant(_19, 1), 1), _24.fld0.1, _17);
_12 = _9;
_4 = _12;
_31 = _18 ^ _18;
_5 = _30.1.1;
Goto(bb4)
}
bb4 = {
_36 = _27.0;
_22 = !_26;
place!(Field::<(i128, u128)>(Variant(_19, 1), 2)).1 = !_12.1;
_14.0 = _31 as i128;
_28 = 14454_u16 ^ 57749_u16;
_15.0 = !_12.0;
Goto(bb5)
}
bb5 = {
_8 = _6;
_30.1.1 = [_36,RET,_36,_27.0];
_25 = [_22,_26,_22,_26,_22,_26];
place!(Field::<u32>(Variant(_19, 1), 1)) = !_30.1.0;
_7.0 = 32297_i16 as i128;
_18 = _31;
_11 = _2.0 * _6;
_27 = (RET, 9867764341682009888_u64, Field::<u32>(Variant(_19, 1), 1));
_30.2 = core::ptr::addr_of!(_2.1);
_15 = (_16, _24.fld0.0);
_11 = !_13;
_2 = (_9.0, _15.1);
_27 = (_36, 4274604434093540241_u64, _30.1.0);
_34 = core::ptr::addr_of!(_36);
_5 = [_36,_36,(*_34),(*_34)];
_13 = -_12.0;
_27.1 = !8671842995553902309_u64;
_20 = !_27.1;
Goto(bb6)
}
bb6 = {
_3.0 = 672081969_i32 as i128;
place!(Field::<u32>(Variant(_19, 1), 1)) = _27.2 >> _15.1;
_30.1.0 = !Field::<u32>(Variant(_19, 1), 1);
_15 = (_6, _4.1);
_27.0 = RET;
_30.1 = (_27.2, _24.fld0.1, _17);
_8 = _12.0 & _1;
_29 = (_12.1, _5);
_29 = _24.fld0;
_26 = -_22;
place!(Field::<(i64, [char; 4], u64)>(Variant(_19, 0), 1)).2 = _27.1;
_7.1 = _9.1;
_28 = 40230_u16;
_39 = &_14.1;
place!(Field::<(char, u64, u32)>(Variant(_19, 0), 4)).2 = _30.1.0 - _30.1.0;
_3 = (_15.0, _7.1);
_24.fld0.0 = _12.1 + _2.1;
_40 = 247184777_i32 as f64;
_4 = (_11, _3.1);
place!(Field::<(i64, [char; 4], u64)>(Variant(_19, 0), 1)) = (4626563426460874473_i64, _30.1.1, _27.1);
_14.1 = _12.1;
_37.0 = !Field::<(char, u64, u32)>(Variant(_19, 0), 4).2;
_22 = !_26;
_15.1 = _40 as u128;
_29.0 = _7.1;
_35 = _18;
match _28 {
40230 => bb7,
_ => bb2
}
}
bb7 = {
_11 = _3.0 << _24.fld0.0;
place!(Field::<(char, u64, u32)>(Variant(_19, 0), 4)).2 = _30.1.0;
_29 = _24.fld0;
_43.fld4 = core::ptr::addr_of_mut!(_25);
_3.1 = _29.0 + _29.0;
_43.fld0 = !_31;
_24 = Adt48 { fld0: _29 };
_3.0 = _22 as i128;
_15.1 = _28 as u128;
_16 = -_2.0;
_37.1 = [(*_34),_27.0,_36,(*_34)];
_24.fld0 = (_2.1, _29.1);
_28 = 45648_u16;
_44.fld0.0 = _7.1 | _24.fld0.0;
_24.fld0 = (_29.0, _5);
_43.fld4 = core::ptr::addr_of_mut!(_25);
_44 = _24;
place!(Field::<(i64, [char; 4], u64)>(Variant(_19, 0), 1)).0 = (-4454613186499874108_i64);
place!(Field::<(char, u64, u32)>(Variant(_19, 0), 4)).1 = 121_u8 as u64;
_2.0 = _20 as i128;
_34 = core::ptr::addr_of!((*_34));
_24.fld0 = _29;
_30.1.2 = -_17;
_30.1.2 = _17;
place!(Field::<(char, u64, u32)>(Variant(_19, 0), 4)).2 = Field::<(i64, [char; 4], u64)>(Variant(_19, 0), 1).2 as u32;
match _28 {
0 => bb8,
1 => bb9,
45648 => bb11,
_ => bb10
}
}
bb8 = {
_17 = _8 as f32;
_13 = _4.0 & _1;
_5 = [RET,RET,RET,RET];
_4.0 = _9.0 + _9.0;
_2 = _9;
_18 = !false;
_21 = !_18;
_24.fld0 = (_12.1, _5);
_24.fld0.1 = [RET,RET,RET,RET];
_25 = [9223372036854775807_isize,26_isize,(-9223372036854775808_isize),52_isize,(-105_isize),9223372036854775807_isize];
_6 = 86_u8 as i128;
_27.2 = 1605937169_u32 & 2108767825_u32;
_25 = [(-9223372036854775808_isize),9223372036854775807_isize,9223372036854775807_isize,(-9223372036854775808_isize),(-9223372036854775808_isize),(-9223372036854775808_isize)];
_24.fld0 = (_7.1, _5);
_26 = (-9223372036854775808_isize) & 9223372036854775807_isize;
_6 = _10;
_15.0 = -_10;
_14.1 = !_7.1;
_21 = !_18;
_27 = (RET, 7498886689430005136_u64, 3764337639_u32);
Call(_19 = fn8(_16, _9, _15.0, _16, _7, _7, _13, _2, _15.0), ReturnTo(bb2), UnwindUnreachable())
}
bb9 = {
_8 = _6;
_30.1.1 = [_36,RET,_36,_27.0];
_25 = [_22,_26,_22,_26,_22,_26];
place!(Field::<u32>(Variant(_19, 1), 1)) = !_30.1.0;
_7.0 = 32297_i16 as i128;
_18 = _31;
_11 = _2.0 * _6;
_27 = (RET, 9867764341682009888_u64, Field::<u32>(Variant(_19, 1), 1));
_30.2 = core::ptr::addr_of!(_2.1);
_15 = (_16, _24.fld0.0);
_11 = !_13;
_2 = (_9.0, _15.1);
_27 = (_36, 4274604434093540241_u64, _30.1.0);
_34 = core::ptr::addr_of!(_36);
_5 = [_36,_36,(*_34),(*_34)];
_13 = -_12.0;
_27.1 = !8671842995553902309_u64;
_20 = !_27.1;
Goto(bb6)
}
bb10 = {
_36 = _27.0;
_22 = !_26;
place!(Field::<(i128, u128)>(Variant(_19, 1), 2)).1 = !_12.1;
_14.0 = _31 as i128;
_28 = 14454_u16 ^ 57749_u16;
_15.0 = !_12.0;
Goto(bb5)
}
bb11 = {
place!(Field::<*const char>(Variant(_19, 0), 2)) = core::ptr::addr_of!((*_34));
_46 = [_16,_6,_9.0,_16,_9.0,_1,_15.0,_4.0];
place!(Field::<(i64, [char; 4], u64)>(Variant(_19, 0), 1)).2 = !Field::<(char, u64, u32)>(Variant(_19, 0), 4).1;
_43.fld1 = _17;
_27.1 = !_20;
_45 = !_24.fld0.0;
match _28 {
0 => bb6,
1 => bb4,
45648 => bb12,
_ => bb10
}
}
bb12 = {
_4 = (_11, _14.1);
_27.0 = (*_34);
_43.fld2 = [_28,_28];
_51 = _22 ^ _26;
_15.0 = _8;
_1 = Field::<(i64, [char; 4], u64)>(Variant(_19, 0), 1).0 as i128;
_17 = _20 as f32;
_43.fld2 = [_28,_28];
_48 = !_51;
_1 = _43.fld1 as i128;
_44 = _24;
place!(Field::<(i64, [char; 4], u64)>(Variant(_19, 0), 1)).2 = _27.1;
place!(Field::<(char, u64, u32)>(Variant(_19, 0), 4)).1 = Field::<(i64, [char; 4], u64)>(Variant(_19, 0), 1).0 as u64;
_30.1.2 = -_43.fld1;
_55.1 = _3.1;
_15.1 = !_7.1;
place!(Field::<(char, u64, u32)>(Variant(_19, 0), 4)).0 = (*_34);
_43.fld3 = _13 * _6;
Goto(bb13)
}
bb13 = {
_3.0 = -_43.fld3;
_57 = Adt48 { fld0: _24.fld0 };
_17 = _30.1.2;
_44.fld0.0 = _12.1 + _9.1;
_37.0 = _30.1.0;
place!(Field::<(char, u64, u32)>(Variant(_19, 0), 4)).2 = !_27.2;
_44 = _57;
_40 = _12.1 as f64;
_34 = core::ptr::addr_of!((*_34));
place!(Field::<(char, u64, u32)>(Variant(_19, 0), 4)) = ((*_34), _27.1, _30.1.0);
Call(_34 = fn9(_57, _11, _44.fld0, Field::<(i64, [char; 4], u64)>(Variant(_19, 0), 1).2, _30.2, _57.fld0, _40, _9.0, Move(_43), _6, _15, _14), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
_2.1 = _9.1;
_56 = 183_u8 as isize;
_2.0 = Field::<(char, u64, u32)>(Variant(_19, 0), 4).0 as i128;
_41 = !_35;
_25 = [_56,_51,_48,_56,_48,_48];
Goto(bb15)
}
bb15 = {
Call(_62 = dump_var(7_usize, 7_usize, Move(_7), 28_usize, Move(_28), 20_usize, Move(_20), 1_usize, Move(_1)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_62 = dump_var(7_usize, 9_usize, Move(_9), 8_usize, Move(_8), 51_usize, Move(_51), 16_usize, Move(_16)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_62 = dump_var(7_usize, 31_usize, Move(_31), 29_usize, Move(_29), 26_usize, Move(_26), 27_usize, Move(_27)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_62 = dump_var(7_usize, 41_usize, Move(_41), 18_usize, Move(_18), 46_usize, Move(_46), 12_usize, Move(_12)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_62 = dump_var(7_usize, 36_usize, Move(_36), 63_usize, _63, 63_usize, _63, 63_usize, _63), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn8(mut _1: i128,mut _2: (i128, u128),mut _3: i128,mut _4: i128,mut _5: (i128, u128),mut _6: (i128, u128),mut _7: i128,mut _8: (i128, u128),mut _9: i128) -> Adt44 {
mir! {
type RET = Adt44;
let _10: isize;
let _11: [u16; 2];
let _12: (char, u64, u32);
let _13: [char; 4];
let _14: ();
let _15: ();
{
RET = Adt44::Variant1 { fld0: 209_u8,fld1: 1144090315_u32,fld2: _2 };
_1 = _4 ^ _9;
_5.1 = Field::<(i128, u128)>(Variant(RET, 1), 2).1 - Field::<(i128, u128)>(Variant(RET, 1), 2).1;
Goto(bb1)
}
bb1 = {
place!(Field::<(i128, u128)>(Variant(RET, 1), 2)).0 = _8.0;
_2.0 = !_1;
Goto(bb2)
}
bb2 = {
_10 = (-9223372036854775808_isize) << _8.0;
place!(Field::<(i128, u128)>(Variant(RET, 1), 2)).1 = _5.1;
_5.1 = _6.1;
_2.0 = 56306_u16 as i128;
place!(Field::<u8>(Variant(RET, 1), 0)) = 971675301_u32 as u8;
Goto(bb3)
}
bb3 = {
place!(Field::<(i128, u128)>(Variant(RET, 1), 2)).1 = _5.1 << _4;
_6 = (_8.0, _2.1);
place!(Field::<u32>(Variant(RET, 1), 1)) = 48209_u16 as u32;
_5 = (_7, _6.1);
place!(Field::<(i128, u128)>(Variant(RET, 1), 2)).1 = _5.1 + _2.1;
_7 = _3;
RET = Adt44::Variant1 { fld0: 89_u8,fld1: 3982944482_u32,fld2: _5 };
_2.1 = _5.1;
place!(Field::<(i128, u128)>(Variant(RET, 1), 2)).1 = true as u128;
place!(Field::<(i128, u128)>(Variant(RET, 1), 2)) = _6;
_1 = !_5.0;
_3 = _5.0;
_6.1 = _7 as u128;
place!(Field::<u8>(Variant(RET, 1), 0)) = 2380850129_u32 as u8;
place!(Field::<u32>(Variant(RET, 1), 1)) = _6.1 as u32;
_11 = [60170_u16,31642_u16];
_6.0 = _4 ^ _5.0;
place!(Field::<u32>(Variant(RET, 1), 1)) = _6.0 as u32;
_8.0 = -_6.0;
_9 = _4 ^ _8.0;
Goto(bb4)
}
bb4 = {
Call(_14 = dump_var(8_usize, 8_usize, Move(_8), 4_usize, Move(_4), 11_usize, Move(_11), 7_usize, Move(_7)), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
Call(_14 = dump_var(8_usize, 2_usize, Move(_2), 15_usize, _15, 15_usize, _15, 15_usize, _15), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn9(mut _1: Adt48,mut _2: i128,mut _3: (u128, [char; 4]),mut _4: u64,mut _5: *const u128,mut _6: (u128, [char; 4]),mut _7: f64,mut _8: i128,mut _9: Adt55,mut _10: i128,mut _11: (i128, u128),mut _12: (i128, u128)) -> *const char {
mir! {
type RET = *const char;
let _13: [isize; 6];
let _14: (i64, [char; 4], u64);
let _15: *const u128;
let _16: i64;
let _17: f64;
let _18: bool;
let _19: (i128, u128);
let _20: isize;
let _21: bool;
let _22: (i64, [char; 4], u64);
let _23: usize;
let _24: char;
let _25: [i128; 8];
let _26: (u8, char, u32);
let _27: [i128; 8];
let _28: [u16; 2];
let _29: u8;
let _30: (i128, u128);
let _31: Adt42;
let _32: u64;
let _33: Adt46;
let _34: isize;
let _35: i16;
let _36: u32;
let _37: (i128, u128);
let _38: [isize; 6];
let _39: f32;
let _40: u64;
let _41: [char; 4];
let _42: bool;
let _43: i32;
let _44: ();
let _45: ();
{
_12 = (_10, _1.fld0.0);
_5 = core::ptr::addr_of!(_1.fld0.0);
_9.fld1 = (-6396163792253492542_i64) as f32;
_3.1 = ['\u{11bf8}','\u{db3ef}','\u{ad9f}','\u{df06c}'];
_11.1 = _12.1;
_13 = [9223372036854775807_isize,9223372036854775807_isize,9223372036854775807_isize,31_isize,(-9223372036854775808_isize),9223372036854775807_isize];
_1 = Adt48 { fld0: _3 };
_12.1 = _9.fld1 as u128;
_8 = !_9.fld3;
_4 = 71_u8 as u64;
_3.1 = ['\u{7410}','\u{b6c68}','\u{f3f45}','\u{278d3}'];
_2 = 9225_i16 as i128;
_6.1 = ['\u{bc877}','\u{8ec13}','\u{d245a}','\u{fa4a6}'];
_11.0 = _10;
_2 = !_11.0;
_3.0 = !_6.0;
_11 = (_9.fld3, _1.fld0.0);
_3 = (_11.1, _1.fld0.1);
_9.fld0 = false;
_10 = _11.0;
_9.fld3 = -_2;
_12.1 = _9.fld1 as u128;
_6 = (_1.fld0.0, _1.fld0.1);
_5 = core::ptr::addr_of!((*_5));
_3 = ((*_5), _1.fld0.1);
_5 = core::ptr::addr_of!((*_5));
_3 = _1.fld0;
Goto(bb1)
}
bb1 = {
_12.0 = -_8;
_14.1 = ['\u{3dfad}','\u{e5aa7}','\u{2e479}','\u{718c5}'];
_1.fld0.0 = (-4012748560093506546_i64) as u128;
_1.fld0.1 = ['\u{5302e}','\u{dce85}','\u{cfcc8}','\u{a44c4}'];
_15 = _5;
_17 = -_7;
_4 = !13817166955013612279_u64;
Goto(bb2)
}
bb2 = {
_7 = -_17;
_12 = _11;
_18 = _6.0 <= _6.0;
_12 = (_2, _3.0);
_12.0 = _9.fld3 & _2;
_7 = 13839619364632851333_usize as f64;
_16 = -(-4214619075232535904_i64);
Goto(bb3)
}
bb3 = {
_9.fld3 = _8;
_5 = _15;
_18 = !_9.fld0;
_14.0 = _16;
_19 = (_9.fld3, _3.0);
_3 = _6;
_9.fld3 = _19.0;
_8 = !_12.0;
_9.fld2 = [27049_u16,11068_u16];
_11 = _19;
_22.1 = ['\u{a3afe}','\u{287db}','\u{a2481}','\u{e9e30}'];
_20 = (-107_isize);
_17 = _7 + _7;
_22.0 = _18 as i64;
_22.0 = -_14.0;
_22.1 = ['\u{b9152}','\u{1b6a8}','\u{f3213}','\u{94a9c}'];
_7 = _17;
_9.fld3 = _11.0;
_4 = _9.fld1 as u64;
_1.fld0.1 = _22.1;
_3 = (_12.1, _6.1);
_14.1 = ['\u{a4344}','\u{7aecc}','\u{ba403}','\u{d611}'];
_22.2 = _9.fld3 as u64;
_5 = _15;
match _20 {
0 => bb1,
1 => bb2,
340282366920938463463374607431768211349 => bb5,
_ => bb4
}
}
bb4 = {
_7 = -_17;
_12 = _11;
_18 = _6.0 <= _6.0;
_12 = (_2, _3.0);
_12.0 = _9.fld3 & _2;
_7 = 13839619364632851333_usize as f64;
_16 = -(-4214619075232535904_i64);
Goto(bb3)
}
bb5 = {
_14.2 = _22.2 + _22.2;
_21 = _9.fld0;
_15 = core::ptr::addr_of!(_12.1);
_19.1 = (*_15);
_17 = -_7;
_22.1 = _1.fld0.1;
_3.0 = _12.1;
_23 = _9.fld1 as usize;
_15 = _5;
match _20 {
0 => bb1,
1 => bb3,
340282366920938463463374607431768211349 => bb7,
_ => bb6
}
}
bb6 = {
_7 = -_17;
_12 = _11;
_18 = _6.0 <= _6.0;
_12 = (_2, _3.0);
_12.0 = _9.fld3 & _2;
_7 = 13839619364632851333_usize as f64;
_16 = -(-4214619075232535904_i64);
Goto(bb3)
}
bb7 = {
_11 = (_19.0, _19.1);
_11.1 = !_3.0;
_9.fld3 = !_12.0;
_3.0 = _12.0 as u128;
_18 = _21 ^ _9.fld0;
_11 = _12;
_9.fld4 = core::ptr::addr_of_mut!(_13);
_22 = (_14.0, _3.1, _14.2);
_9.fld0 = !_18;
RET = core::ptr::addr_of!(_24);
_19 = _11;
_21 = _12.0 > _2;
_14 = (_22.0, _1.fld0.1, _22.2);
_19.1 = _17 as u128;
Goto(bb8)
}
bb8 = {
_19.1 = !_3.0;
_11.0 = _20 as i128;
_21 = _18 ^ _18;
_14.1 = _22.1;
_19.0 = _19.1 as i128;
_17 = _9.fld1 as f64;
_2 = _6.0 as i128;
_3.0 = _12.1 & _11.1;
_6.1 = ['\u{e8070}','\u{d191b}','\u{37332}','\u{44966}'];
_10 = _19.0;
_22 = _14;
_28 = [45353_u16,48070_u16];
_2 = _12.0;
_9.fld2 = _28;
_22.2 = _14.2;
_1.fld0.0 = _11.1 ^ _3.0;
_14.1 = ['\u{f4de3}','\u{af5ed}','\u{1efba}','\u{7b9d0}'];
Goto(bb9)
}
bb9 = {
_29 = _21 as u8;
_30.1 = _11.1 - _3.0;
_32 = _1.fld0.0 as u64;
_6 = (_12.1, _3.1);
_31.fld3 = core::ptr::addr_of!(_24);
_25 = [_19.0,_19.0,_12.0,_12.0,_2,_9.fld3,_10,_8];
_3 = (_11.1, _1.fld0.1);
_26.2 = 685248857_u32;
_4 = _22.2;
_30.1 = _9.fld1 as u128;
_11.1 = _19.1 + _12.1;
Call(_31 = fn10(_25, _1.fld0.0, _9.fld3, _3, _12.0, _1, _3, _19, _8, Move(_9), _1.fld0.0, _10, _1.fld0.1, _1, _2, _1.fld0.0), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_31.fld1.0 = 87_i8 as u128;
_18 = _21 & _21;
_15 = _5;
_23 = _19.0 as usize;
_17 = _26.2 as f64;
_19 = (_2, _11.1);
_14 = _22;
_11.0 = _31.fld0.0;
_1.fld0.0 = 1006277843_i32 as u128;
_30 = _31.fld0;
_35 = _14.2 as i16;
_19.0 = _32 as i128;
_12 = _19;
_1.fld0.1 = _3.1;
_3 = (_19.1, _22.1);
_9.fld1 = (-102_i8) as f32;
_27 = [_2,_8,_11.0,_30.0,_2,_11.0,_19.0,_30.0];
_9.fld0 = _18;
Call(_1.fld0.0 = core::intrinsics::bswap(_31.fld0.1), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_31.fld1 = (_31.fld0.1, _22.1);
Call(_17 = fn11(_22, _12.1, _27, _19.0, _3, _11.1, _31.fld0.1, _31, _22, _30), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
_34 = _20;
_1.fld0.0 = !_31.fld0.1;
_13 = [_34,_34,_20,_34,_34,_20];
_33 = Adt46::Variant2 { fld0: _31,fld1: 97_i8,fld2: _16 };
_12.1 = _34 as u128;
_6 = (_30.1, _22.1);
place!(Field::<i8>(Variant(_33, 2), 1)) = (-29_i8);
_21 = _9.fld0;
_37.0 = _10;
Goto(bb13)
}
bb13 = {
_1.fld0.0 = !Field::<Adt42>(Variant(_33, 2), 0).fld0.1;
_37.1 = _9.fld1 as u128;
_11 = _37;
RET = _31.fld3;
_11 = (_37.0, _6.0);
_1.fld0.0 = _29 as u128;
_17 = _7 * _7;
_7 = _22.2 as f64;
_8 = _37.0;
_3 = (Field::<Adt42>(Variant(_33, 2), 0).fld1.0, Field::<Adt42>(Variant(_33, 2), 0).fld1.1);
_13 = [_34,_20,_20,_20,_20,_34];
_22 = _14;
_26 = (_29, '\u{9654}', 544453120_u32);
_9.fld2 = _28;
place!(Field::<Adt42>(Variant(_33, 2), 0)).fld0.1 = _6.0;
_38 = _13;
_18 = _21;
_22.2 = _14.2;
RET = _31.fld3;
_9.fld2 = [20804_u16,47193_u16];
_31 = Field::<Adt42>(Variant(_33, 2), 0);
_22.0 = !_14.0;
_30.0 = _8 * _12.0;
_34 = _26.2 as isize;
Call(_36 = core::intrinsics::bswap(_26.2), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
_41 = [_26.1,_26.1,_26.1,_26.1];
SetDiscriminant(_33, 0);
_1.fld0.0 = _3.0 - _3.0;
_22 = _14;
_22.0 = _16;
_31.fld1.0 = _19.1;
_11.1 = _1.fld0.0 ^ _31.fld1.0;
_11.1 = !_6.0;
place!(Field::<i8>(Variant(_33, 0), 3)) = 10_i8;
place!(Field::<(*const char, usize, [isize; 6])>(Variant(_33, 0), 2)).0 = _31.fld3;
Goto(bb15)
}
bb15 = {
Call(_44 = dump_var(9_usize, 14_usize, Move(_14), 22_usize, Move(_22), 32_usize, Move(_32), 36_usize, Move(_36)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_44 = dump_var(9_usize, 16_usize, Move(_16), 19_usize, Move(_19), 25_usize, Move(_25), 23_usize, Move(_23)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_44 = dump_var(9_usize, 30_usize, Move(_30), 18_usize, Move(_18), 34_usize, Move(_34), 38_usize, Move(_38)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_44 = dump_var(9_usize, 27_usize, Move(_27), 37_usize, Move(_37), 35_usize, Move(_35), 45_usize, _45), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn10(mut _1: [i128; 8],mut _2: u128,mut _3: i128,mut _4: (u128, [char; 4]),mut _5: i128,mut _6: Adt48,mut _7: (u128, [char; 4]),mut _8: (i128, u128),mut _9: i128,mut _10: Adt55,mut _11: u128,mut _12: i128,mut _13: [char; 4],mut _14: Adt48,mut _15: i128,mut _16: u128) -> Adt42 {
mir! {
type RET = Adt42;
let _17: isize;
let _18: Adt48;
let _19: char;
let _20: usize;
let _21: (u128, [char; 4]);
let _22: u8;
let _23: Adt48;
let _24: ();
let _25: ();
{
RET.fld1 = (_6.fld0.0, _13);
_4 = (_7.0, _6.fld0.1);
_7 = RET.fld1;
_8 = (_3, _14.fld0.0);
_17 = _10.fld0 as isize;
_12 = -_10.fld3;
_6 = _14;
_3 = 36_u8 as i128;
_9 = _15;
RET.fld0.0 = !_15;
_18.fld0.1 = ['\u{100c3c}','\u{c401}','\u{b856d}','\u{81e2c}'];
RET.fld1 = _7;
_9 = _15;
_10.fld2 = [14088_u16,54890_u16];
_18.fld0.1 = ['\u{fdb87}','\u{77138}','\u{9fad5}','\u{6ac4e}'];
_18.fld0.0 = _4.0;
RET.fld2 = [_8.0,_5,_5,RET.fld0.0,_10.fld3,_10.fld3,_5,RET.fld0.0];
RET.fld0 = (_10.fld3, _4.0);
RET.fld2 = [_10.fld3,_8.0,_5,_5,_12,_15,_9,_8.0];
RET.fld1.0 = 640325379_i32 as u128;
_10.fld1 = 12985_i16 as f32;
RET.fld0.0 = _10.fld3 | _9;
_18 = _6;
_14.fld0 = _18.fld0;
_18 = Adt48 { fld0: _14.fld0 };
_8.1 = !_7.0;
_19 = '\u{96143}';
_17 = -9223372036854775807_isize;
Goto(bb1)
}
bb1 = {
_14 = _18;
RET.fld1.0 = 7_u8 as u128;
_11 = _10.fld1 as u128;
_17 = _10.fld1 as isize;
RET.fld2 = _1;
RET.fld3 = core::ptr::addr_of!(_19);
_6.fld0.0 = !_8.1;
RET.fld0.0 = !_10.fld3;
_2 = RET.fld0.1 + _8.1;
RET.fld2 = _1;
_16 = RET.fld0.1;
_7.0 = 220_u8 as u128;
RET.fld0.0 = _15;
_1 = [_12,_5,_12,_10.fld3,_15,_9,_10.fld3,_12];
_13 = [_19,_19,_19,_19];
_21.0 = _10.fld0 as u128;
_6.fld0.1 = [_19,_19,_19,_19];
_12 = _9;
_10.fld3 = _15 | _9;
Goto(bb2)
}
bb2 = {
Call(_24 = dump_var(10_usize, 15_usize, Move(_15), 4_usize, Move(_4), 19_usize, Move(_19), 7_usize, Move(_7)), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Call(_24 = dump_var(10_usize, 8_usize, Move(_8), 16_usize, Move(_16), 11_usize, Move(_11), 25_usize, _25), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn11(mut _1: (i64, [char; 4], u64),mut _2: u128,mut _3: [i128; 8],mut _4: i128,mut _5: (u128, [char; 4]),mut _6: u128,mut _7: u128,mut _8: Adt42,mut _9: (i64, [char; 4], u64),mut _10: (i128, u128)) -> f64 {
mir! {
type RET = f64;
let _11: i16;
let _12: Adt53;
let _13: isize;
let _14: (i128, u128);
let _15: bool;
let _16: *const char;
let _17: u16;
let _18: bool;
let _19: ();
let _20: ();
{
_9 = (_1.0, _5.1, _1.2);
RET = 8084_u16 as f64;
_11 = 27255_i16 ^ (-30844_i16);
_1.2 = _9.2;
_10 = (_8.fld0.0, _7);
_7 = _5.0;
_5.0 = _7;
Goto(bb1)
}
bb1 = {
_1 = _9;
_8.fld1.0 = _8.fld0.1;
_5.0 = _7;
Goto(bb2)
}
bb2 = {
_2 = !_10.1;
_6 = _8.fld1.0 >> _8.fld1.0;
_8.fld0.1 = RET as u128;
_2 = 63_u8 as u128;
_9.0 = 20_i8 as i64;
_8.fld0.1 = !_5.0;
_5 = (_8.fld1.0, _1.1);
_9.1 = ['\u{24acb}','\u{3e8e7}','\u{31b32}','\u{759c6}'];
_2 = _6;
_8.fld0 = _10;
_1.2 = _9.2 ^ _9.2;
Goto(bb3)
}
bb3 = {
_8.fld2 = [_4,_4,_8.fld0.0,_10.0,_8.fld0.0,_8.fld0.0,_4,_10.0];
_8.fld0 = (_10.0, _2);
_1.0 = 2888540486_u32 as i64;
_9 = _1;
_5.0 = _6 >> _10.0;
_11 = 16037_i16;
RET = _10.0 as f64;
_9.0 = _1.0 - _1.0;
_10.1 = _6 + _8.fld0.1;
_9 = (_1.0, _8.fld1.1, _1.2);
_9 = _1;
_1.1 = _5.1;
_15 = !true;
_14.1 = _1.0 as u128;
_5 = (_7, _9.1);
_9.0 = !_1.0;
_8.fld1.1 = ['\u{ce7cb}','\u{5ee75}','\u{12712}','\u{a683a}'];
_9.2 = _1.2 << _1.2;
_5.0 = _7;
_3 = [_4,_10.0,_4,_8.fld0.0,_10.0,_10.0,_8.fld0.0,_4];
_9.0 = _1.0 | _1.0;
_17 = (-889236030_i32) as u16;
Goto(bb4)
}
bb4 = {
Call(_19 = dump_var(11_usize, 9_usize, Move(_9), 2_usize, Move(_2), 10_usize, Move(_10), 6_usize, Move(_6)), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
Call(_19 = dump_var(11_usize, 1_usize, Move(_1), 17_usize, Move(_17), 20_usize, _20, 20_usize, _20), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn12(mut _1: i128,mut _2: i128,mut _3: i128,mut _4: (*const char, usize, [isize; 6]),mut _5: i128,mut _6: i128,mut _7: i128,mut _8: (i128, u128)) -> u128 {
mir! {
type RET = u128;
let _9: f32;
let _10: (u128, [char; 4]);
let _11: u64;
let _12: (*const isize, *const char);
let _13: isize;
let _14: (u128, [char; 4]);
let _15: (i128, i8, bool, *const u128);
let _16: u16;
let _17: u8;
let _18: ();
let _19: ();
{
_4.2 = [9223372036854775807_isize,(-9223372036854775808_isize),(-9223372036854775808_isize),9223372036854775807_isize,32_isize,9223372036854775807_isize];
_3 = 247_u8 as i128;
_1 = !_7;
_2 = _5;
_8.0 = _7 >> _2;
_9 = 8385657977976302951_u64 as f32;
_3 = _2;
RET = _5 as u128;
_6 = _3 & _2;
RET = _8.1 ^ _8.1;
_8.1 = RET & RET;
RET = 4920033670861390933_u64 as u128;
_10.1 = ['\u{6eaac}','\u{438df}','\u{fe15f}','\u{320fd}'];
_8 = (_6, RET);
RET = _4.1 as u128;
_8.0 = _5 | _6;
_8.1 = _7 as u128;
_10.0 = 2843599452_u32 as u128;
_8.1 = _10.0;
_11 = 9296345592502437695_u64 - 2863386500215243582_u64;
RET = !_8.1;
_11 = 17429395754889905466_u64;
_10.0 = RET << _3;
Goto(bb1)
}
bb1 = {
_1 = 47087_u16 as i128;
_8 = (_7, _10.0);
_7 = _6;
_8.0 = _6;
_4.2 = [(-9223372036854775808_isize),51_isize,(-9223372036854775808_isize),127_isize,(-72_isize),(-9223372036854775808_isize)];
_13 = !(-4_isize);
_10.1 = ['\u{87287}','\u{ba216}','\u{eabcf}','\u{5ebf8}'];
_10.1 = ['\u{266ac}','\u{9ae4f}','\u{d026c}','\u{c52c0}'];
RET = 23214_i16 as u128;
_6 = _9 as i128;
_5 = _7;
_12.0 = core::ptr::addr_of!(_13);
_4.1 = 4645053739123187584_usize >> _3;
_9 = _11 as f32;
_8.1 = _10.0;
_14 = (_8.1, _10.1);
_14.1 = ['\u{389ce}','\u{89c3c}','\u{27d7a}','\u{8587c}'];
_2 = -_8.0;
_10 = (_14.0, _14.1);
_15.1 = _10.0 as i8;
_11 = 6030839725624731744_u64;
_11 = 16703431955615041120_u64 & 690143267342895780_u64;
_15.2 = true;
RET = _10.0;
_12.0 = core::ptr::addr_of!(_13);
Goto(bb2)
}
bb2 = {
Call(_18 = dump_var(12_usize, 14_usize, Move(_14), 1_usize, Move(_1), 5_usize, Move(_5), 8_usize, Move(_8)), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Call(_18 = dump_var(12_usize, 7_usize, Move(_7), 19_usize, _19, 19_usize, _19, 19_usize, _19), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn13(mut _1: [i64; 1],mut _2: i128) -> u128 {
mir! {
type RET = u128;
let _3: Adt44;
let _4: f32;
let _5: [i128; 8];
let _6: char;
let _7: (*const char, usize, [isize; 6]);
let _8: [char; 4];
let _9: f32;
let _10: Adt53;
let _11: i32;
let _12: Adt47;
let _13: Adt41;
let _14: (u32, [char; 4], f32);
let _15: isize;
let _16: [i64; 1];
let _17: char;
let _18: (char, u64, u32);
let _19: f64;
let _20: i8;
let _21: bool;
let _22: [char; 4];
let _23: (i128, u128);
let _24: (i128, u128);
let _25: ();
let _26: ();
{
RET = 141392086631856298235409132373117032699_u128;
_1 = [4416107058903622399_i64];
RET = 117964787198684265165701658406537993707_u128;
_1 = [(-3967441358631881285_i64)];
RET = !30510559612928410198906262354954434644_u128;
RET = 85578864107898049207003588447365426156_u128 - 287646627774114537577427633527855747995_u128;
RET = 158793889378482350060111789966866193091_u128 ^ 283873412640162811460913620485912365085_u128;
_2 = (-62468571648921628624974038001868906900_i128) - (-124056986083080228372056040654401166785_i128);
RET = 179584222968001862530333995853511197886_u128 ^ 119521251619084925068204583588716596793_u128;
_5 = [_2,_2,_2,_2,_2,_2,_2,_2];
_6 = '\u{b0dbc}';
RET = 15_i8 as u128;
_5 = [_2,_2,_2,_2,_2,_2,_2,_2];
_1 = [2678882908123142570_i64];
_7.2 = [47_isize,9223372036854775807_isize,(-9223372036854775808_isize),(-46_isize),(-9223372036854775808_isize),9223372036854775807_isize];
_1 = [9145749425475966498_i64];
RET = 24344520371130246340632419355785903192_u128 | 26064406985571553563389824111337174088_u128;
RET = 200640922719900402466943433756708707455_u128;
match RET {
0 => bb1,
1 => bb2,
2 => bb3,
200640922719900402466943433756708707455 => bb5,
_ => bb4
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
RET = !54799517238065694709013773418707955488_u128;
_7.1 = 5_usize - 1583050583515334947_usize;
_7.2 = [79_isize,54_isize,(-9223372036854775808_isize),9223372036854775807_isize,(-38_isize),(-9223372036854775808_isize)];
_4 = 38008_u16 as f32;
_7.0 = core::ptr::addr_of!(_6);
RET = 306189873284798372892456632389252814923_u128;
_1 = [(-3333639071501954198_i64)];
_13 = Adt41::Variant2 { fld0: _5,fld1: (-1007814173_i32) };
place!(Field::<i32>(Variant(_13, 2), 1)) = 849544677_i32 & (-1389917705_i32);
_9 = _2 as f32;
_6 = '\u{5a1a8}';
_8 = [_6,_6,_6,_6];
_7.1 = 4_usize | 6234913112282664340_usize;
_6 = '\u{cb9ca}';
_14 = (2177018955_u32, _8, _9);
match RET {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
306189873284798372892456632389252814923 => bb7,
_ => bb6
}
}
bb6 = {
Return()
}
bb7 = {
_14.1 = _8;
_15 = -9223372036854775807_isize;
_14 = (3836078805_u32, _8, _4);
_4 = -_14.2;
_7.1 = !3_usize;
_8 = _14.1;
_6 = '\u{c8adf}';
place!(Field::<[i128; 8]>(Variant(_13, 2), 0)) = [_2,_2,_2,_2,_2,_2,_2,_2];
_15 = RET as isize;
RET = _2 as u128;
_14.2 = -_9;
_14.2 = _9 * _9;
place!(Field::<i32>(Variant(_13, 2), 1)) = (-1415339385_i32);
_14.0 = 3856249286_u32 << _2;
_14 = (2391838431_u32, _8, _9);
_7.2 = [_15,_15,_15,_15,_15,_15];
_7.0 = core::ptr::addr_of!(_17);
_14.2 = 21783_u16 as f32;
RET = 320449912746553446663423973995680356825_u128 | 221966224559818981702870116394835718913_u128;
_9 = RET as f32;
_17 = _6;
_14.2 = _9 + _9;
_14.0 = !1204348478_u32;
_5 = Field::<[i128; 8]>(Variant(_13, 2), 0);
_5 = [_2,_2,_2,_2,_2,_2,_2,_2];
place!(Field::<[i128; 8]>(Variant(_13, 2), 0)) = _5;
Call(_18.2 = core::intrinsics::bswap(_14.0), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
_14 = (1558228489_u32, _8, _9);
_11 = Field::<i32>(Variant(_13, 2), 1);
match _11 {
0 => bb1,
1 => bb2,
2 => bb7,
3 => bb6,
4 => bb5,
5 => bb9,
340282366920938463463374607430352872071 => bb11,
_ => bb10
}
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
_9 = 194_u8 as f32;
_4 = _14.2;
RET = 33926122883796954330809217453964549659_u128 >> Field::<i32>(Variant(_13, 2), 1);
_8 = [_6,_17,_6,_6];
_15 = 27_isize;
_16 = [(-7829435029530978165_i64)];
_21 = _7.1 != _7.1;
_7.0 = core::ptr::addr_of!(_17);
match _14.0 {
1558228489 => bb13,
_ => bb12
}
}
bb12 = {
Return()
}
bb13 = {
_8 = [_17,_17,_17,_17];
_17 = _6;
_20 = !(-82_i8);
_7.0 = core::ptr::addr_of!(_6);
_17 = _6;
_7.1 = !0_usize;
_14 = (3611064830_u32, _8, _4);
Call(_19 = core::intrinsics::transmute(_1), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
_18.1 = 4011475127093746785_u64 + 14105189276755379299_u64;
_24.0 = -_2;
Goto(bb15)
}
bb15 = {
Call(_25 = dump_var(13_usize, 21_usize, Move(_21), 16_usize, Move(_16), 17_usize, Move(_17), 1_usize, Move(_1)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_25 = dump_var(13_usize, 5_usize, Move(_5), 26_usize, _26, 26_usize, _26, 26_usize, _26), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn14(mut _1: i32,mut _2: i32,mut _3: i32,mut _4: i32,mut _5: u32,mut _6: bool,mut _7: i64,mut _8: i32,mut _9: i32,mut _10: i16) -> isize {
mir! {
type RET = isize;
let _11: bool;
let _12: u8;
let _13: [isize; 6];
let _14: char;
let _15: [isize; 6];
let _16: [i64; 1];
let _17: (i128, u128);
let _18: (char, u64, u32);
let _19: [i128; 8];
let _20: u32;
let _21: (u32, [char; 4], f32);
let _22: [i64; 1];
let _23: u8;
let _24: (i128, u128);
let _25: f32;
let _26: ();
let _27: ();
{
_9 = -_4;
_8 = -_1;
_1 = _8;
RET = 20_isize - (-15_isize);
_6 = false;
RET = _5 as isize;
_5 = 4819866340258141924_u64 as u32;
_11 = !_6;
RET = 9223372036854775807_isize ^ (-9223372036854775808_isize);
_8 = _4;
_2 = 5829043461650589229_u64 as i32;
_3 = _1 | _9;
_4 = -_2;
_9 = _4;
_1 = 2_usize as i32;
_6 = _11;
RET = !102_isize;
_1 = !_3;
_1 = -_2;
_2 = _9;
_10 = -2192_i16;
_2 = (-40986227492381398939972017854467109860_i128) as i32;
RET = -29_isize;
_1 = 2817610463775424086_u64 as i32;
match _7 {
0 => bb1,
1 => bb2,
340282366920938463455829276581510214443 => bb4,
_ => bb3
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
_10 = 111_i8 as i16;
_12 = _11 as u8;
_1 = _3 >> _5;
_10 = 58_i8 as i16;
_8 = _1;
_11 = !_6;
_12 = 59_u8;
_7 = 47217_u16 as i64;
_11 = !_6;
RET = (-9223372036854775808_isize) | (-9223372036854775808_isize);
match _12 {
0 => bb3,
1 => bb2,
2 => bb5,
3 => bb6,
4 => bb7,
5 => bb8,
59 => bb10,
_ => bb9
}
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_6 = _11;
_8 = _1;
_10 = (-20295_i16);
_7 = 4398087899466821156_i64 * 4837481971492821653_i64;
match _12 {
0 => bb5,
1 => bb9,
2 => bb6,
3 => bb4,
59 => bb12,
_ => bb11
}
}
bb11 = {
Return()
}
bb12 = {
_14 = '\u{5af58}';
_7 = 66_i8 as i64;
_16 = [_7];
_15 = [RET,RET,RET,RET,RET,RET];
_2 = !_1;
_17.1 = 89734513943590896275676163394905236632_u128 >> _9;
_17 = ((-129735993440508276732808231443760071016_i128), 207936846842973365847415656979193096288_u128);
_15 = [RET,RET,RET,RET,RET,RET];
Goto(bb13)
}
bb13 = {
_20 = _17.0 as u32;
RET = _12 as isize;
_8 = 5270763741490280182_u64 as i32;
_17 = ((-132195728815641087242167808171747424376_i128), 63137959549486346262320755652114027437_u128);
_17.1 = !322331229698147026232961572305540510554_u128;
_12 = _1 as u8;
_9 = _1;
_18 = (_14, 14099987334489308673_u64, _5);
_12 = 116_u8;
_23 = _12;
_16 = [_7];
_22 = _16;
_6 = _11;
_21.2 = _7 as f32;
_9 = _8 - _1;
_12 = _23 | _23;
_5 = _18.1 as u32;
_1 = _9;
match _18.1 {
0 => bb5,
1 => bb7,
2 => bb14,
3 => bb15,
4 => bb16,
5 => bb17,
14099987334489308673 => bb19,
_ => bb18
}
}
bb14 = {
Return()
}
bb15 = {
Return()
}
bb16 = {
_6 = _11;
_8 = _1;
_10 = (-20295_i16);
_7 = 4398087899466821156_i64 * 4837481971492821653_i64;
match _12 {
0 => bb5,
1 => bb9,
2 => bb6,
3 => bb4,
59 => bb12,
_ => bb11
}
}
bb17 = {
Return()
}
bb18 = {
Return()
}
bb19 = {
RET = 43_isize << _12;
_21.0 = !_20;
_18.0 = _14;
_24.0 = _17.0;
_24.1 = _17.1;
_25 = _12 as f32;
Goto(bb20)
}
bb20 = {
Call(_26 = dump_var(14_usize, 6_usize, Move(_6), 23_usize, Move(_23), 22_usize, Move(_22), 24_usize, Move(_24)), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
Call(_26 = dump_var(14_usize, 3_usize, Move(_3), 8_usize, Move(_8), 10_usize, Move(_10), 12_usize, Move(_12)), ReturnTo(bb22), UnwindUnreachable())
}
bb22 = {
Call(_26 = dump_var(14_usize, 15_usize, Move(_15), 7_usize, Move(_7), 27_usize, _27, 27_usize, _27), ReturnTo(bb23), UnwindUnreachable())
}
bb23 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn15(mut _1: bool,mut _2: isize,mut _3: i16,mut _4: isize,mut _5: i16,mut _6: [char; 4],mut _7: [char; 4]) -> i16 {
mir! {
type RET = i16;
let _8: i128;
let _9: Adt45;
let _10: i32;
let _11: i16;
let _12: bool;
let _13: Adt40;
let _14: ();
let _15: ();
{
RET = _1 as i16;
RET = 27302_u16 as i16;
_6 = ['\u{8fb56}','\u{3829f}','\u{3d8c5}','\u{1dc7a}'];
RET = !_3;
_7 = _6;
_3 = !RET;
_2 = _4;
RET = -_5;
_1 = true;
_7 = ['\u{a9466}','\u{c2ac2}','\u{62c22}','\u{76c06}'];
Goto(bb1)
}
bb1 = {
_3 = 672880885_i32 as i16;
_7 = ['\u{24f2}','\u{2e6f8}','\u{65d91}','\u{6390e}'];
_5 = -RET;
RET = _3 * _5;
_10 = 1005662527_i32 * (-2126453548_i32);
_4 = _2;
_1 = !true;
_7 = _6;
_8 = (-100690519122647493575864565947719410616_i128);
_1 = false;
RET = _5 - _5;
_5 = _3 | RET;
_1 = false;
_3 = (-32_i8) as i16;
RET = _5;
_10 = !(-1726942154_i32);
_6 = _7;
_2 = _4 + _4;
_5 = -RET;
_3 = _5 << _5;
_7 = ['\u{f2bf2}','\u{26dd1}','\u{b2ddb}','\u{4c771}'];
RET = !_5;
RET = _3 << _2;
_6 = _7;
_12 = !_1;
Goto(bb2)
}
bb2 = {
Call(_14 = dump_var(15_usize, 4_usize, Move(_4), 1_usize, Move(_1), 12_usize, Move(_12), 6_usize, Move(_6)), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Call(_14 = dump_var(15_usize, 3_usize, Move(_3), 15_usize, _15, 15_usize, _15, 15_usize, _15), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
Return()
}

}
}
pub fn main() {
                fn0(std::hint::black_box(false), std::hint::black_box(6752457737596178437_u64), std::hint::black_box(717610650_u32), std::hint::black_box(9_u8), std::hint::black_box((-32749_i16)), std::hint::black_box((-1022069387_i32)), std::hint::black_box((-5825931546056404166_i64)), std::hint::black_box(33483379318929539135801084107924790591_i128));
                
            }
#[derive(Debug)]
pub enum Adt40 {
Variant0{
fld0: (*const isize, *const char),
fld1: *mut f32,

},
Variant1{
fld0: [i128; 8],
fld1: (i128, i8, bool, *const u128),
fld2: (u32, [char; 4], f32),
fld3: i8,
fld4: (char, u64, u32),
fld5: i32,
fld6: *const u128,
fld7: u128,

}}
#[derive(Debug)]
pub enum Adt41 {
Variant0{
fld0: (u8, char, u32),
fld1: Adt40,

},
Variant1{
fld0: ((u16, (u32, [char; 4], f32), *const u128),),
fld1: f64,
fld2: (u128, [char; 4]),

},
Variant2{
fld0: [i128; 8],
fld1: i32,

}}
#[derive(Debug,Copy,Clone)]
pub struct Adt42 {
fld0: (i128, u128),
fld1: (u128, [char; 4]),
fld2: [i128; 8],
fld3: *const char,
}
#[derive(Debug)]
pub enum Adt43 {
Variant0{
fld0: f32,

},
Variant1{
fld0: Adt40,
fld1: u128,

},
Variant2{
fld0: *const u128,

}}
#[derive(Debug)]
pub enum Adt44 {
Variant0{
fld0: bool,
fld1: (i64, [char; 4], u64),
fld2: *const char,
fld3: Adt40,
fld4: (char, u64, u32),

},
Variant1{
fld0: u8,
fld1: u32,
fld2: (i128, u128),

}}
#[derive(Debug)]
pub enum Adt45 {
Variant0{
fld0: bool,
fld1: u64,
fld2: (u16, (u32, [char; 4], f32), *const u128),
fld3: f64,
fld4: u32,
fld5: i32,
fld6: *mut *mut [isize; 6],
fld7: u8,

},
Variant1{
fld0: Adt41,
fld1: Adt43,
fld2: ((u16, (u32, [char; 4], f32), *const u128),),
fld3: *const u128,
fld4: u32,
fld5: *mut *mut [isize; 6],
fld6: [u16; 2],

},
Variant2{
fld0: *mut f32,
fld1: char,
fld2: Adt42,
fld3: i64,

}}
#[derive(Debug)]
pub enum Adt46 {
Variant0{
fld0: u64,
fld1: *mut [isize; 6],
fld2: (*const char, usize, [isize; 6]),
fld3: i8,

},
Variant1{
fld0: Adt40,
fld1: *const char,
fld2: [i64; 1],

},
Variant2{
fld0: Adt42,
fld1: i8,
fld2: i64,

}}
#[derive(Debug)]
pub enum Adt47 {
Variant0{
fld0: usize,
fld1: u128,
fld2: *const isize,

},
Variant1{
fld0: bool,
fld1: (*const char, usize, [isize; 6]),
fld2: (i128, u128),
fld3: u16,

},
Variant2{
fld0: f32,
fld1: Adt40,
fld2: *const isize,
fld3: i8,
fld4: [i128; 8],
fld5: ((u16, (u32, [char; 4], f32), *const u128),),

}}
#[derive(Debug,Copy,Clone)]
pub struct Adt48 {
fld0: (u128, [char; 4]),
}
#[derive(Debug,Copy,Clone)]
pub struct Adt49 {
fld0: *const isize,
fld1: (u8, char, u32),
fld2: isize,
fld3: i8,
fld4: [isize; 6],
fld5: (i128, u128),
fld6: (char, u64, u32),
}
#[derive(Debug)]
pub enum Adt50 {
Variant0{
fld0: bool,
fld1: f64,
fld2: (u16, (u32, [char; 4], f32), *const u128),
fld3: *mut f32,
fld4: *mut [isize; 6],
fld5: u16,
fld6: (*const char, usize, [isize; 6]),

},
Variant1{
fld0: i128,
fld1: [i64; 1],
fld2: u16,
fld3: *mut [isize; 6],
fld4: i32,

}}
#[derive(Debug)]
pub enum Adt51 {
Variant0{
fld0: *const char,
fld1: Adt42,
fld2: (u16, (u32, [char; 4], f32), *const u128),
fld3: ((u16, (u32, [char; 4], f32), *const u128),),
fld4: i16,
fld5: Adt47,

},
Variant1{
fld0: Adt41,
fld1: (i128, i8, bool, *const u128),

},
Variant2{
fld0: bool,
fld1: u128,
fld2: *const isize,
fld3: (char, u64, u32),

},
Variant3{
fld0: u16,
fld1: (*const char, usize, [isize; 6]),
fld2: (u32, [char; 4], f32),
fld3: (i64, [char; 4], u64),
fld4: u64,
fld5: (i128, u128),
fld6: (i128, i8, bool, *const u128),

}}
#[derive(Debug)]
pub enum Adt52 {
Variant0{
fld0: usize,
fld1: (i64, [char; 4], u64),
fld2: Adt46,
fld3: (u32, [char; 4], f32),
fld4: [isize; 6],

},
Variant1{
fld0: *mut f32,
fld1: char,
fld2: (u8, char, u32),
fld3: [char; 4],
fld4: usize,
fld5: [u16; 2],

},
Variant2{
fld0: bool,
fld1: f32,
fld2: (u32, [char; 4], f32),
fld3: (i128, u128),
fld4: Adt43,

},
Variant3{
fld0: i32,
fld1: i64,
fld2: [i128; 8],
fld3: i8,
fld4: (u32, [char; 4], f32),

}}
#[derive(Debug)]
pub enum Adt53 {
Variant0{
fld0: *mut *mut [isize; 6],
fld1: *const char,

},
Variant1{
fld0: u128,
fld1: Adt52,
fld2: isize,
fld3: ((u16, (u32, [char; 4], f32), *const u128),),
fld4: Adt51,

}}
#[derive(Debug)]
pub enum Adt54 {
Variant0{
fld0: (i128, u128),
fld1: ((u16, (u32, [char; 4], f32), *const u128),),

},
Variant1{
fld0: bool,
fld1: Adt42,
fld2: *mut [isize; 6],
fld3: Adt52,

},
Variant2{
fld0: u8,

}}
#[derive(Debug)]
pub struct Adt55 {
fld0: bool,
fld1: f32,
fld2: [u16; 2],
fld3: i128,
fld4: *mut [isize; 6],
}
#[derive(Debug)]
pub enum Adt56 {
Variant0{
fld0: bool,
fld1: Adt53,
fld2: Adt52,
fld3: Adt54,
fld4: [isize; 6],
fld5: i32,

},
Variant1{
fld0: [char; 4],
fld1: Adt42,
fld2: f64,
fld3: u128,
fld4: Adt53,
fld5: (*const isize, *const char),
fld6: *mut f32,

},
Variant2{
fld0: [u16; 2],
fld1: (i64, [char; 4], u64),
fld2: *const isize,
fld3: Adt52,
fld4: [i128; 8],
fld5: (u16, (u32, [char; 4], f32), *const u128),
fld6: u8,
fld7: i128,

}}

