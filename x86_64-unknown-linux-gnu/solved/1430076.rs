#![recursion_limit = "256"]
    #![feature(custom_mir, core_intrinsics, const_hash)]
    #![allow(unused_parens, unused_assignments, overflowing_literals)]
    extern crate core;
    use core::intrinsics::mir::*;

    use std::collections::hash_map::DefaultHasher;
    use std::hash::{Hash, Hasher};

    static mut H: DefaultHasher = DefaultHasher::new();

    #[inline(never)]
    fn dump_var<T: Hash, U: Hash, V: Hash, W: Hash>(
        val0: T,
        val1: U,
        val2: V,
        val3: W,
    ) {
        unsafe {
            val0.hash(&mut H);
            val1.hash(&mut H);
            val2.hash(&mut H);
            val3.hash(&mut H);
        }
    }
    #[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn0(mut _1: u8,mut _2: u16,mut _3: u64) -> [i32; 4] {
mir! {
type RET = [i32; 4];
let _4: char;
let _5: i16;
let _6: *mut f64;
let _7: isize;
let _8: isize;
let _9: *const u8;
let _10: i32;
let _11: *mut i8;
let _12: Adt53;
let _13: Adt63;
let _14: isize;
let _15: bool;
let _16: bool;
let _17: (i128, *mut i8, isize, *const u8);
let _18: isize;
let _19: f64;
let _20: char;
let _21: ((f32, i16, i32, i8), u128);
let _22: (i128, *mut i8, isize, *const u8);
let _23: Adt47;
let _24: char;
let _25: (char,);
let _26: Adt58;
let _27: u32;
let _28: u32;
let _29: ((f32, i16, i32, i8), u128);
let _30: i8;
let _31: (f32, i16, i32, i8);
let _32: ();
let _33: ();
{
_2 = !1243_u16;
RET = [(-677845847_i32),(-1842988042_i32),1289392955_i32,(-852546282_i32)];
RET = [(-1135098175_i32),1884819512_i32,(-762715162_i32),(-1463697711_i32)];
_2 = 50466_u16;
_2 = 29424_u16 ^ 19260_u16;
RET = [(-1673696812_i32),(-841312311_i32),(-1442039950_i32),1651836871_i32];
RET = [(-1104639460_i32),(-1575273229_i32),(-1544731287_i32),1874506194_i32];
_4 = '\u{108fb5}';
RET = [(-2003475477_i32),(-2140430196_i32),(-1982222794_i32),499997764_i32];
_3 = 10969951128806554017_u64 & 11161438442539085645_u64;
_4 = '\u{ed438}';
_1 = 4_u8 << _2;
_4 = '\u{cfd89}';
_1 = !211_u8;
RET = [(-1519890719_i32),(-1451734389_i32),(-283753723_i32),1272489960_i32];
RET = [(-953583671_i32),1805847894_i32,(-476063220_i32),2121497400_i32];
_3 = 16409578648389963549_u64;
RET = [41739195_i32,(-304354636_i32),(-1576502069_i32),322952088_i32];
_4 = '\u{5325c}';
_3 = _4 as u64;
_5 = 1690034725_u32 as i16;
_4 = '\u{4ddd1}';
_5 = (-9342_i16) + 14056_i16;
_5 = 4_usize as i16;
RET = [1987165791_i32,1239891180_i32,1842572034_i32,(-754608988_i32)];
RET = [309075399_i32,(-2080257299_i32),(-438001059_i32),(-1086767539_i32)];
RET = [(-700397260_i32),(-521336108_i32),(-1579569296_i32),(-348923676_i32)];
Call(_5 = core::intrinsics::transmute(_2), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_5 = 131004275888701500273965921949534675374_i128 as i16;
_2 = 4878_u16;
_5 = -9275_i16;
_3 = 2763572812333006740_usize as u64;
_5 = (-13419_i16);
_1 = _5 as u8;
_4 = '\u{e9297}';
_4 = '\u{2af0f}';
_4 = '\u{8070e}';
_1 = 35_u8;
_2 = 1208464524_u32 as u16;
_5 = (-7317_i16);
_7 = (-9223372036854775808_isize) >> _2;
RET = [1797806998_i32,257742171_i32,116324090_i32,923589634_i32];
_7 = _1 as isize;
_5 = !12880_i16;
_2 = 46378_u16 | 60955_u16;
_5 = (-2427_i16) & (-23682_i16);
_4 = '\u{d8bb5}';
_10 = !(-854263681_i32);
_9 = core::ptr::addr_of!(_1);
_8 = !_7;
match (*_9) {
0 => bb2,
35 => bb4,
_ => bb3
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
_13.fld0.fld0.0.0 = 3857347903244695968_i64 as f32;
_7 = !_8;
RET = [_10,_10,_10,_10];
_13.fld0.fld0.1 = _7 == _8;
_9 = core::ptr::addr_of!(_1);
_12.fld1 = _13.fld0.fld0.0.0 / 0.0000000000000000000000000000000000000030359621684059676_f32;
Goto(bb5)
}
bb5 = {
_12.fld1 = -_13.fld0.fld0.0.0;
_3 = 16164483632755005132_u64;
_13.fld0.fld0.0.3 = _4 as i8;
_13.fld0.fld0.0 = (_12.fld1, _5, _10, 100_i8);
_13.fld0.fld0.0.3 = (-50_i8) - (-18_i8);
_11 = core::ptr::addr_of_mut!(_13.fld0.fld0.0.3);
_7 = _13.fld0.fld0.1 as isize;
_13.fld0.fld0.0.2 = -_10;
_13.fld0.fld1 = !_2;
_12.fld0.fld0 = [14042304072531830404298628385195899370_u128,34048127753789893881682845736011576851_u128,75927287800225209012111162043067402837_u128,216739153825700614506999213425372407155_u128,29722605604853780930955844544997047980_u128];
_13.fld0.fld1 = _2;
_13.fld0.fld0.0.0 = _12.fld1 / 1_f32;
_13.fld0.fld0.2 = _13.fld0.fld0.0.1 & _5;
(*_11) = (-17_i8);
_13.fld0.fld0.0 = (_12.fld1, _5, _10, (-117_i8));
_1 = _12.fld1 as u8;
_13.fld0.fld0.0.1 = _3 as i16;
_13.fld0.fld0.0.2 = _1 as i32;
_12.fld1 = 1070857217_u32 as f32;
_5 = _13.fld0.fld0.2;
_12.fld1 = _13.fld0.fld0.0.2 as f32;
_1 = !209_u8;
_14 = _7 | _7;
match (*_11) {
0 => bb1,
1 => bb6,
2 => bb7,
3 => bb8,
4 => bb9,
340282366920938463463374607431768211339 => bb11,
_ => bb10
}
}
bb6 = {
_13.fld0.fld0.0.0 = 3857347903244695968_i64 as f32;
_7 = !_8;
RET = [_10,_10,_10,_10];
_13.fld0.fld0.1 = _7 == _8;
_9 = core::ptr::addr_of!(_1);
_12.fld1 = _13.fld0.fld0.0.0 / 0.0000000000000000000000000000000000000030359621684059676_f32;
Goto(bb5)
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
_5 = 131004275888701500273965921949534675374_i128 as i16;
_2 = 4878_u16;
_5 = -9275_i16;
_3 = 2763572812333006740_usize as u64;
_5 = (-13419_i16);
_1 = _5 as u8;
_4 = '\u{e9297}';
_4 = '\u{2af0f}';
_4 = '\u{8070e}';
_1 = 35_u8;
_2 = 1208464524_u32 as u16;
_5 = (-7317_i16);
_7 = (-9223372036854775808_isize) >> _2;
RET = [1797806998_i32,257742171_i32,116324090_i32,923589634_i32];
_7 = _1 as isize;
_5 = !12880_i16;
_2 = 46378_u16 | 60955_u16;
_5 = (-2427_i16) & (-23682_i16);
_4 = '\u{d8bb5}';
_10 = !(-854263681_i32);
_9 = core::ptr::addr_of!(_1);
_8 = !_7;
match (*_9) {
0 => bb2,
35 => bb4,
_ => bb3
}
}
bb10 = {
Return()
}
bb11 = {
_15 = _13.fld0.fld0.1;
_9 = core::ptr::addr_of!(_1);
_17.0 = (-81562943245528845174951756304196774229_i128);
_12.fld1 = _5 as f32;
_17.0 = -(-169677683977913672675124413100444061212_i128);
_9 = core::ptr::addr_of!(_1);
_17.3 = core::ptr::addr_of!((*_9));
_17.1 = core::ptr::addr_of_mut!((*_11));
_17.2 = -_7;
_13.fld0.fld0.0.3 = 88_i8 * 90_i8;
_16 = _15 <= _13.fld0.fld0.1;
_12.fld0.fld0 = [32049988491491315275401580183324474992_u128,180109575589957173299160165994966974896_u128,89237876862636275160109850397275922418_u128,259509911151083570663555439000667432241_u128,152193939466971816866903936761033436541_u128];
_13.fld0.fld0.0.0 = (*_11) as f32;
Call(_17.3 = fn1(_17.2, _13.fld0.fld1, _7, _17.2, _3, _13.fld0.fld0.0.2, _7, _13.fld0.fld0.2), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
_6 = core::ptr::addr_of_mut!(_19);
_16 = _13.fld0.fld0.1 ^ _15;
(*_9) = _13.fld0.fld0.2 as u8;
_8 = 4133399136764544280_usize as isize;
_21.0.1 = _12.fld1 as i16;
_3 = !5885654774829521955_u64;
_13.fld0.fld0.2 = -_5;
RET = [_10,_10,_13.fld0.fld0.0.2,_10];
_17.0 = (-35373028073494622623372829828340912724_i128);
_6 = core::ptr::addr_of_mut!((*_6));
_18 = _17.2;
_22.0 = _17.0 | _17.0;
_2 = _13.fld0.fld1 + _13.fld0.fld1;
_25 = (_4,);
_25 = (_4,);
_23.fld1 = [_10,_13.fld0.fld0.0.2,_10,_10];
_1 = _13.fld0.fld0.0.0 as u8;
_8 = _17.2;
_25.0 = _4;
_22.3 = core::ptr::addr_of!(_1);
_17 = (_22.0, _11, _14, _9);
_23.fld2 = 6576563296192860149_i64;
_23.fld0 = [154948851_u32,3842137760_u32,358119191_u32,2583694588_u32,2943613194_u32,1972982333_u32,2454809752_u32,843740231_u32];
match _23.fld2 {
0 => bb10,
6576563296192860149 => bb13,
_ => bb3
}
}
bb13 = {
_13.fld0.fld0.2 = _12.fld1 as i16;
(*_11) = 1288528427_u32 as i8;
_21.1 = !63721190384496284447006390451036804109_u128;
_25.0 = _4;
_21.0.3 = _13.fld0.fld0.0.2 as i8;
_13.fld0.fld0.0.2 = -_10;
_21.0.1 = -_5;
_23.fld0 = [1446908340_u32,1018057446_u32,514758774_u32,1138109101_u32,3250302949_u32,1261805485_u32,3678324192_u32,2327890440_u32];
Call(_26.fld0 = fn16(_22.3, _13.fld0.fld0.2, _13.fld0.fld0.0.0, _1), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
_29.0.1 = !_5;
_28 = 1562021993_u32;
_17.1 = _11;
_18 = _14 >> _2;
_29 = (_13.fld0.fld0.0, _21.1);
Goto(bb15)
}
bb15 = {
Call(_32 = dump_var(Move(_16), Move(_1), Move(_3), Move(_5)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_32 = dump_var(Move(_25), Move(_7), Move(_14), _33), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn1(mut _1: isize,mut _2: u16,mut _3: isize,mut _4: isize,mut _5: u64,mut _6: i32,mut _7: isize,mut _8: i16) -> *const u8 {
mir! {
type RET = *const u8;
let _9: u16;
let _10: char;
let _11: ((f32, i16, i32, i8), u128);
let _12: bool;
let _13: *const ((f32, i16, i32, i8), bool, i16);
let _14: i8;
let _15: (bool, (i32, *mut f64, char));
let _16: u128;
let _17: isize;
let _18: Adt53;
let _19: i8;
let _20: bool;
let _21: *mut f64;
let _22: i64;
let _23: *const i32;
let _24: (char,);
let _25: Adt48;
let _26: (f32, i16, i32, i8);
let _27: f64;
let _28: [i32; 4];
let _29: f64;
let _30: Adt53;
let _31: ();
let _32: ();
{
_5 = 2683607065400622918_u64 & 9103857997455292269_u64;
_7 = !_3;
_5 = 15977609752480873161_u64 | 14981616732131165454_u64;
_1 = !_4;
_1 = !_4;
_7 = 64231199356069561265444423805342472897_i128 as isize;
_8 = (-11144_i16) | 756_i16;
Call(RET = fn2(_1, _1, _5, _3, _8, _5, _8, _7, _2, _5, _3, _6, _1), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_7 = _1;
_8 = 26891_i16;
match _8 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
26891 => bb7,
_ => bb6
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
_8 = (-32055_i16);
_2 = 38354_u16;
_4 = !_1;
_4 = !_7;
_1 = 937105514471988454236116134193723219_u128 as isize;
_4 = _3 & _1;
_8 = 8209_i16 | 7460_i16;
_3 = !_4;
_6 = 1499521685_i32 >> _8;
_9 = !_2;
_5 = 13666128786027121972_u64;
_5 = 232_u8 as u64;
_6 = !(-2006322444_i32);
_4 = -_7;
_2 = _9;
_4 = !_7;
_3 = !_4;
_8 = -20911_i16;
_9 = _2 / 47671_u16;
_7 = -_1;
_7 = _6 as isize;
_10 = '\u{eb230}';
_10 = '\u{a1c2a}';
_4 = 3533724222_u32 as isize;
_3 = true as isize;
_7 = _1;
_3 = _7;
Goto(bb8)
}
bb8 = {
_7 = _3;
_11.1 = 249521592466029851857065702277755067877_u128;
_10 = '\u{a5f04}';
_11.0.2 = _11.1 as i32;
_4 = _7 & _1;
_7 = _1;
_11.0.0 = (-8554055252747790836_i64) as f32;
_9 = _2 - _2;
_5 = 4073643976365975116_u64;
_2 = !_9;
_11.0.1 = _8 >> _9;
_11.0.1 = _8 - _8;
_1 = -_4;
match _5 {
0 => bb7,
1 => bb2,
2 => bb3,
3 => bb6,
4073643976365975116 => bb9,
_ => bb5
}
}
bb9 = {
_7 = _3 - _1;
_6 = _11.0.2 + _11.0.2;
_11.0.2 = _9 as i32;
_5 = 10550547675169234630_usize as u64;
_3 = _1;
_7 = _9 as isize;
_3 = _4 | _1;
match _11.1 {
249521592466029851857065702277755067877 => bb10,
_ => bb7
}
}
bb10 = {
_2 = true as u16;
_9 = _2;
_15.1.2 = _10;
_11.0.3 = (-3_i8);
_2 = _9;
_15.0 = !true;
_15.1.2 = _10;
_15.0 = _3 <= _3;
_14 = -_11.0.3;
_19 = -_14;
_4 = _7 >> _7;
_15.1.0 = 800889992431729481_i64 as i32;
_18.fld1 = _11.0.0 - _11.0.0;
_12 = _15.0;
_20 = !_12;
_18.fld1 = _11.0.0 + _11.0.0;
_16 = _3 as u128;
_19 = !_11.0.3;
_16 = 2414267375_u32 as u128;
_1 = _4 << _11.0.2;
_1 = _4 ^ _4;
Goto(bb11)
}
bb11 = {
_11.1 = _16;
_22 = 7487318973149502818_i64;
_2 = !_9;
_25.fld0.0 = [_11.0.2,_15.1.0,_6,_11.0.2];
_5 = 17654653331979917444_u64 | 8045119039191965935_u64;
_18.fld1 = _11.0.0;
_11.0.2 = _15.1.0 << _4;
_20 = _18.fld1 < _18.fld1;
_15.0 = _12;
_11.1 = !_16;
_18.fld1 = _11.0.0;
match _11.0.3 {
0 => bb7,
1 => bb10,
2 => bb6,
3 => bb12,
340282366920938463463374607431768211453 => bb14,
_ => bb13
}
}
bb12 = {
Return()
}
bb13 = {
Return()
}
bb14 = {
_26.2 = _11.0.2;
_24 = (_15.1.2,);
_15.1.2 = _24.0;
_26.1 = _11.0.1;
_12 = _15.0;
_7 = 7_usize as isize;
_6 = _11.0.2 & _11.0.2;
_25.fld0.0 = [_6,_11.0.2,_6,_6];
_21 = core::ptr::addr_of_mut!(_27);
_29 = _18.fld1 as f64;
_27 = 12_u8 as f64;
_23 = core::ptr::addr_of!(_6);
_10 = _15.1.2;
Goto(bb15)
}
bb15 = {
Call(_31 = dump_var(Move(_12), Move(_9), Move(_6), Move(_19)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_31 = dump_var(Move(_24), Move(_16), Move(_3), Move(_4)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn2(mut _1: isize,mut _2: isize,mut _3: u64,mut _4: isize,mut _5: i16,mut _6: u64,mut _7: i16,mut _8: isize,mut _9: u16,mut _10: u64,mut _11: isize,mut _12: i32,mut _13: isize) -> *const u8 {
mir! {
type RET = *const u8;
let _14: i8;
let _15: isize;
let _16: bool;
let _17: f32;
let _18: i64;
let _19: usize;
let _20: (i64, i64, usize, *mut i8, *mut isize);
let _21: isize;
let _22: i8;
let _23: u8;
let _24: char;
let _25: isize;
let _26: (f32, i16, i32, i8);
let _27: Adt58;
let _28: (bool, (i32, *mut f64, char));
let _29: u64;
let _30: isize;
let _31: usize;
let _32: u64;
let _33: u8;
let _34: Adt54;
let _35: Adt47;
let _36: f32;
let _37: Adt48;
let _38: Adt62;
let _39: u16;
let _40: u16;
let _41: u64;
let _42: ((f32, i16, i32, i8), u128);
let _43: isize;
let _44: Adt58;
let _45: ();
let _46: ();
{
_12 = 1125299084_i32;
_5 = _7;
_11 = _2 - _2;
_2 = !_4;
_1 = _11;
_14 = '\u{561c0}' as i8;
_3 = _6 * _6;
_11 = !_8;
_7 = _5;
_12 = (-2027895847_i32);
_1 = _13 | _4;
_10 = !_3;
_5 = _7;
_7 = _9 as i16;
_7 = _5 ^ _5;
_14 = _5 as i8;
_5 = _7;
_9 = 5_usize as u16;
_1 = -_2;
match _12 {
340282366920938463463374607429740315609 => bb2,
_ => bb1
}
}
bb1 = {
Return()
}
bb2 = {
_1 = -_13;
_5 = _7 + _7;
_4 = -_1;
_10 = _3 ^ _6;
_13 = _1;
_13 = -_4;
_1 = _4 - _4;
_15 = _12 as isize;
_14 = (-105_i8) * 116_i8;
_13 = -_1;
_11 = _15 | _1;
_16 = false;
_10 = _6;
_14 = _16 as i8;
_10 = _3;
_1 = _14 as isize;
Goto(bb3)
}
bb3 = {
_2 = !_4;
_8 = _1;
_14 = 8782082509200284484_i64 as i8;
_8 = _13;
_12 = -1289683202_i32;
_15 = _2 + _11;
_2 = !_13;
_7 = _5 + _5;
_3 = _9 as u64;
_10 = _6;
_17 = 16099597076799973883_usize as f32;
_11 = _3 as isize;
Call(RET = fn3(_10, _12, _15, _16, _5, _6, _13, _4, _1, _1, _6), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_22 = -_14;
_18 = 72780282906330081976732009154884099611_i128 as i64;
_20.3 = core::ptr::addr_of_mut!(_26.3);
_20.3 = core::ptr::addr_of_mut!(_22);
_26 = (_17, _5, _12, _22);
_6 = _10 & _3;
_8 = _16 as isize;
_16 = _15 > _15;
_24 = '\u{f665a}';
_28.0 = _16 | _16;
_26.0 = _17 / (-0.000000000000000000000000000000000000007976318377097112_f32);
_27.fld2 = [_24,_24,_24,_24,_24,_24,_24,_24];
_14 = _26.3 << _10;
_9 = 1475_u16;
RET = core::ptr::addr_of!(_23);
_24 = '\u{2f34f}';
_27.fld2 = [_24,_24,_24,_24,_24,_24,_24,_24];
_28.0 = _16;
_12 = -_26.2;
_1 = 946928426_u32 as isize;
_16 = _6 == _3;
(*RET) = !96_u8;
_22 = _23 as i8;
_28.1.2 = _24;
_19 = _18 as usize;
_25 = _2 ^ _8;
RET = core::ptr::addr_of!((*RET));
match _9 {
0 => bb1,
1475 => bb5,
_ => bb2
}
}
bb5 = {
_2 = _9 as isize;
_31 = _19;
_20.0 = _18;
_19 = _26.0 as usize;
_29 = _10;
_18 = !_20.0;
_26.2 = _14 as i32;
_9 = 1623_u16;
RET = core::ptr::addr_of!((*RET));
_24 = _28.1.2;
_26.1 = _7 << _26.2;
_19 = !_31;
_25 = !_15;
_20.1 = _20.0 | _20.0;
_32 = _18 as u64;
RET = core::ptr::addr_of!(_23);
_10 = _26.1 as u64;
_34.fld5 = (3543712197_u32,);
RET = core::ptr::addr_of!(_33);
(*RET) = _25 as u8;
_26.2 = _9 as i32;
match _34.fld5.0 {
0 => bb4,
1 => bb6,
2 => bb7,
3 => bb8,
4 => bb9,
5 => bb10,
3543712197 => bb12,
_ => bb11
}
}
bb6 = {
_22 = -_14;
_18 = 72780282906330081976732009154884099611_i128 as i64;
_20.3 = core::ptr::addr_of_mut!(_26.3);
_20.3 = core::ptr::addr_of_mut!(_22);
_26 = (_17, _5, _12, _22);
_6 = _10 & _3;
_8 = _16 as isize;
_16 = _15 > _15;
_24 = '\u{f665a}';
_28.0 = _16 | _16;
_26.0 = _17 / (-0.000000000000000000000000000000000000007976318377097112_f32);
_27.fld2 = [_24,_24,_24,_24,_24,_24,_24,_24];
_14 = _26.3 << _10;
_9 = 1475_u16;
RET = core::ptr::addr_of!(_23);
_24 = '\u{2f34f}';
_27.fld2 = [_24,_24,_24,_24,_24,_24,_24,_24];
_28.0 = _16;
_12 = -_26.2;
_1 = 946928426_u32 as isize;
_16 = _6 == _3;
(*RET) = !96_u8;
_22 = _23 as i8;
_28.1.2 = _24;
_19 = _18 as usize;
_25 = _2 ^ _8;
RET = core::ptr::addr_of!((*RET));
match _9 {
0 => bb1,
1475 => bb5,
_ => bb2
}
}
bb7 = {
_2 = !_4;
_8 = _1;
_14 = 8782082509200284484_i64 as i8;
_8 = _13;
_12 = -1289683202_i32;
_15 = _2 + _11;
_2 = !_13;
_7 = _5 + _5;
_3 = _9 as u64;
_10 = _6;
_17 = 16099597076799973883_usize as f32;
_11 = _3 as isize;
Call(RET = fn3(_10, _12, _15, _16, _5, _6, _13, _4, _1, _1, _6), ReturnTo(bb4), UnwindUnreachable())
}
bb8 = {
_1 = -_13;
_5 = _7 + _7;
_4 = -_1;
_10 = _3 ^ _6;
_13 = _1;
_13 = -_4;
_1 = _4 - _4;
_15 = _12 as isize;
_14 = (-105_i8) * 116_i8;
_13 = -_1;
_11 = _15 | _1;
_16 = false;
_10 = _6;
_14 = _16 as i8;
_10 = _3;
_1 = _14 as isize;
Goto(bb3)
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
Return()
}
bb12 = {
_8 = _15 << _10;
_20.1 = -_20.0;
_27.fld1 = [_26.2,_26.2,_26.2,_12];
_34.fld3 = core::ptr::addr_of_mut!(_13);
_34.fld4 = core::ptr::addr_of!(_26.2);
_18 = !_20.1;
_33 = _26.1 as u8;
_21 = _8;
(*RET) = _23 & _23;
_36 = _5 as f32;
_19 = !_31;
_28.1.0 = 314481313739128813650234690002859702288_u128 as i32;
_25 = _8 * _8;
_38.fld1 = (_36, _36, _28.0, _28.1.2, _26.0);
_15 = _14 as isize;
Goto(bb13)
}
bb13 = {
_26.3 = _14;
_28.0 = _10 > _10;
_26.0 = _38.fld1.0 / (-0.00000000000000000000000000000000000000009958607796417177_f32);
_38.fld0 = _27.fld1;
_40 = _20.1 as u16;
_37.fld0.0 = _38.fld0;
_9 = _40;
_2 = -_25;
RET = core::ptr::addr_of!(_23);
match _34.fld5.0 {
0 => bb6,
1 => bb14,
2 => bb15,
3 => bb16,
4 => bb17,
5 => bb18,
3543712197 => bb20,
_ => bb19
}
}
bb14 = {
_8 = _15 << _10;
_20.1 = -_20.0;
_27.fld1 = [_26.2,_26.2,_26.2,_12];
_34.fld3 = core::ptr::addr_of_mut!(_13);
_34.fld4 = core::ptr::addr_of!(_26.2);
_18 = !_20.1;
_33 = _26.1 as u8;
_21 = _8;
(*RET) = _23 & _23;
_36 = _5 as f32;
_19 = !_31;
_28.1.0 = 314481313739128813650234690002859702288_u128 as i32;
_25 = _8 * _8;
_38.fld1 = (_36, _36, _28.0, _28.1.2, _26.0);
_15 = _14 as isize;
Goto(bb13)
}
bb15 = {
_22 = -_14;
_18 = 72780282906330081976732009154884099611_i128 as i64;
_20.3 = core::ptr::addr_of_mut!(_26.3);
_20.3 = core::ptr::addr_of_mut!(_22);
_26 = (_17, _5, _12, _22);
_6 = _10 & _3;
_8 = _16 as isize;
_16 = _15 > _15;
_24 = '\u{f665a}';
_28.0 = _16 | _16;
_26.0 = _17 / (-0.000000000000000000000000000000000000007976318377097112_f32);
_27.fld2 = [_24,_24,_24,_24,_24,_24,_24,_24];
_14 = _26.3 << _10;
_9 = 1475_u16;
RET = core::ptr::addr_of!(_23);
_24 = '\u{2f34f}';
_27.fld2 = [_24,_24,_24,_24,_24,_24,_24,_24];
_28.0 = _16;
_12 = -_26.2;
_1 = 946928426_u32 as isize;
_16 = _6 == _3;
(*RET) = !96_u8;
_22 = _23 as i8;
_28.1.2 = _24;
_19 = _18 as usize;
_25 = _2 ^ _8;
RET = core::ptr::addr_of!((*RET));
match _9 {
0 => bb1,
1475 => bb5,
_ => bb2
}
}
bb16 = {
Return()
}
bb17 = {
Return()
}
bb18 = {
_2 = _9 as isize;
_31 = _19;
_20.0 = _18;
_19 = _26.0 as usize;
_29 = _10;
_18 = !_20.0;
_26.2 = _14 as i32;
_9 = 1623_u16;
RET = core::ptr::addr_of!((*RET));
_24 = _28.1.2;
_26.1 = _7 << _26.2;
_19 = !_31;
_25 = !_15;
_20.1 = _20.0 | _20.0;
_32 = _18 as u64;
RET = core::ptr::addr_of!(_23);
_10 = _26.1 as u64;
_34.fld5 = (3543712197_u32,);
RET = core::ptr::addr_of!(_33);
(*RET) = _25 as u8;
_26.2 = _9 as i32;
match _34.fld5.0 {
0 => bb4,
1 => bb6,
2 => bb7,
3 => bb8,
4 => bb9,
5 => bb10,
3543712197 => bb12,
_ => bb11
}
}
bb19 = {
_2 = !_4;
_8 = _1;
_14 = 8782082509200284484_i64 as i8;
_8 = _13;
_12 = -1289683202_i32;
_15 = _2 + _11;
_2 = !_13;
_7 = _5 + _5;
_3 = _9 as u64;
_10 = _6;
_17 = 16099597076799973883_usize as f32;
_11 = _3 as isize;
Call(RET = fn3(_10, _12, _15, _16, _5, _6, _13, _4, _1, _1, _6), ReturnTo(bb4), UnwindUnreachable())
}
bb20 = {
_17 = _36 * _38.fld1.1;
_6 = _10 % 2291647208594847668_u64;
_1 = !_21;
_35.fld0 = [_34.fld5.0,_34.fld5.0,_34.fld5.0,_34.fld5.0,_34.fld5.0,_34.fld5.0,_34.fld5.0,_34.fld5.0];
_11 = _25;
(*RET) = _33;
Goto(bb21)
}
bb21 = {
Call(_45 = dump_var(Move(_5), Move(_31), Move(_29), Move(_18)), ReturnTo(bb22), UnwindUnreachable())
}
bb22 = {
Call(_45 = dump_var(Move(_1), Move(_4), Move(_13), Move(_10)), ReturnTo(bb23), UnwindUnreachable())
}
bb23 = {
Call(_45 = dump_var(Move(_3), Move(_15), Move(_6), Move(_12)), ReturnTo(bb24), UnwindUnreachable())
}
bb24 = {
Call(_45 = dump_var(Move(_8), Move(_16), _46, _46), ReturnTo(bb25), UnwindUnreachable())
}
bb25 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn3(mut _1: u64,mut _2: i32,mut _3: isize,mut _4: bool,mut _5: i16,mut _6: u64,mut _7: isize,mut _8: isize,mut _9: isize,mut _10: isize,mut _11: u64) -> *const u8 {
mir! {
type RET = *const u8;
let _12: *mut u128;
let _13: isize;
let _14: Adt62;
let _15: Adt59;
let _16: (usize,);
let _17: f32;
let _18: Adt50;
let _19: u8;
let _20: Adt61;
let _21: u64;
let _22: f64;
let _23: f32;
let _24: *mut *const (f32, i16, i32, i8);
let _25: [char; 8];
let _26: (u32,);
let _27: i8;
let _28: f64;
let _29: isize;
let _30: bool;
let _31: (f32, i16, i32, i8);
let _32: isize;
let _33: char;
let _34: f64;
let _35: Adt52;
let _36: [i16; 4];
let _37: Adt47;
let _38: *const ((f32, i16, i32, i8), bool, i16);
let _39: ([i32; 4],);
let _40: f64;
let _41: Adt52;
let _42: u128;
let _43: i16;
let _44: f32;
let _45: char;
let _46: char;
let _47: *mut u128;
let _48: i16;
let _49: (f32, i16, i32, i8);
let _50: ();
let _51: ();
{
_2 = 99_u8 as i32;
_6 = _2 as u64;
_3 = -_7;
_6 = _1 + _11;
_11 = _6;
_1 = 174687659555665089486978097389693808919_u128 as u64;
_11 = _6;
_3 = _2 as isize;
_10 = -_7;
_8 = '\u{99b3b}' as isize;
_13 = !_3;
_8 = !_10;
_7 = !_10;
_4 = _5 > _5;
_4 = !false;
Goto(bb1)
}
bb1 = {
_13 = _8;
_8 = _13 >> _6;
_2 = !(-398126591_i32);
_13 = _3 | _7;
_6 = 3121456978_u32 as u64;
_2 = (-532620762_i32) << _5;
_9 = _1 as isize;
_13 = _8;
_1 = _11 | _11;
_13 = _8 - _9;
_6 = 241_u8 as u64;
_8 = -_13;
_14.fld0 = [_2,_2,_2,_2];
_15.fld3 = _5 >> _8;
_14.fld1.2 = _4;
_15.fld1.0 = -104528105535423347645675554818674644286_i128;
_14.fld1.0 = _2 as f32;
Call(_2 = fn4(_13, _1, _13, _1), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_15.fld0 = (6_usize,);
_15.fld0 = (3_usize,);
_14.fld1.1 = _11 as f32;
_15.fld0.0 = !7004208443910759084_usize;
_3 = _13 & _8;
_13 = -_3;
_15.fld3 = 39_u8 as i16;
_14.fld0 = [_2,_2,_2,_2];
_14.fld0 = [_2,_2,_2,_2];
_18.fld0.1 = _5;
_18.fld2 = 3340042647400360547_i64 >> _18.fld0.1;
_15.fld1.3 = core::ptr::addr_of!(_19);
_16.0 = _15.fld0.0 << _10;
_20.fld4.1.2 = '\u{bad9d}';
_20.fld2 = _13 + _3;
_18.fld0.3 = !110_i8;
_20.fld6.fld0.2 = _18.fld0.1;
_16.0 = !_15.fld0.0;
_20.fld4.1.2 = '\u{f8a2a}';
_20.fld1 = _20.fld2 as u32;
_20.fld7 = core::ptr::addr_of_mut!(_18.fld1);
_15.fld2 = core::ptr::addr_of!(_20.fld6.fld0.0.2);
_18.fld4 = (_16.0,);
Goto(bb3)
}
bb3 = {
_20.fld3.fld0.fld0 = [8309855891077157507369602269186562417_u128,50440243974014958602247011863404712833_u128,308485205411284199911673024710793769790_u128,295787517132767235907320816776303128320_u128,82222439457509993660355881195711868965_u128];
_18.fld1 = _15.fld1.0 as f64;
_20.fld6.fld0.0.3 = _1 as i8;
_8 = _20.fld2 & _3;
_8 = _3 * _20.fld2;
_20.fld0 = _2 as u16;
_19 = 94_u8;
RET = _15.fld1.3;
_13 = _8 << _8;
_20.fld6.fld0.0 = (_14.fld1.0, _18.fld0.1, _2, _18.fld0.3);
_5 = !_20.fld6.fld0.0.1;
_18.fld0.1 = _20.fld6.fld0.2;
_23 = -_14.fld1.1;
_14.fld1.4 = -_14.fld1.0;
_17 = _20.fld1 as f32;
_20.fld5 = [_20.fld1,_20.fld1,_20.fld1,_20.fld1,_20.fld1,_20.fld1];
_18.fld2 = _20.fld0 as i64;
_20.fld5 = [_20.fld1,_20.fld1,_20.fld1,_20.fld1,_20.fld1,_20.fld1];
(*RET) = !204_u8;
_25 = [_20.fld4.1.2,_20.fld4.1.2,_20.fld4.1.2,_20.fld4.1.2,_20.fld4.1.2,_20.fld4.1.2,_20.fld4.1.2,_20.fld4.1.2];
Call(_20.fld4.0 = fn5(_25, _18.fld0.1, _20.fld4.1.2, _7, _6, _18.fld0.1, _20.fld2, _19, _2, _14.fld1.4, _3, _15.fld2, _14.fld0, _20.fld5, _2), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_26 = (_20.fld1,);
RET = _15.fld1.3;
_22 = -_18.fld1;
_14.fld1.4 = _17 / f32::NAN;
_2 = -_20.fld6.fld0.0.2;
RET = core::ptr::addr_of!(_19);
_15.fld1.0 = (-118911394487830201953744495407804825442_i128);
_20.fld6.fld1 = _20.fld0 * _20.fld0;
_20.fld4.1.0 = _20.fld6.fld0.0.2 | _20.fld6.fld0.0.2;
_25 = [_20.fld4.1.2,_20.fld4.1.2,_20.fld4.1.2,_20.fld4.1.2,_20.fld4.1.2,_20.fld4.1.2,_20.fld4.1.2,_20.fld4.1.2];
_20.fld6.fld0.0.2 = _20.fld4.1.0;
match _15.fld1.0 {
221370972433108261509630112023963386014 => bb6,
_ => bb5
}
}
bb5 = {
_15.fld0 = (6_usize,);
_15.fld0 = (3_usize,);
_14.fld1.1 = _11 as f32;
_15.fld0.0 = !7004208443910759084_usize;
_3 = _13 & _8;
_13 = -_3;
_15.fld3 = 39_u8 as i16;
_14.fld0 = [_2,_2,_2,_2];
_14.fld0 = [_2,_2,_2,_2];
_18.fld0.1 = _5;
_18.fld2 = 3340042647400360547_i64 >> _18.fld0.1;
_15.fld1.3 = core::ptr::addr_of!(_19);
_16.0 = _15.fld0.0 << _10;
_20.fld4.1.2 = '\u{bad9d}';
_20.fld2 = _13 + _3;
_18.fld0.3 = !110_i8;
_20.fld6.fld0.2 = _18.fld0.1;
_16.0 = !_15.fld0.0;
_20.fld4.1.2 = '\u{f8a2a}';
_20.fld1 = _20.fld2 as u32;
_20.fld7 = core::ptr::addr_of_mut!(_18.fld1);
_15.fld2 = core::ptr::addr_of!(_20.fld6.fld0.0.2);
_18.fld4 = (_16.0,);
Goto(bb3)
}
bb6 = {
_18.fld4 = (_16.0,);
_18.fld0.1 = -_20.fld6.fld0.0.1;
_18.fld4 = _15.fld0;
_15.fld1.0 = -163502758003689197433823968808189551805_i128;
_20.fld0 = !_20.fld6.fld1;
_20.fld1 = !_26.0;
_20.fld6.fld0.1 = !_20.fld4.0;
RET = _15.fld1.3;
_14.fld1 = (_17, _23, _20.fld4.0, _20.fld4.1.2, _17);
_15.fld2 = core::ptr::addr_of!(_20.fld4.1.0);
_20.fld4.1.0 = _20.fld6.fld0.0.2 ^ _2;
(*RET) = 180_u8 | 34_u8;
_27 = _18.fld0.3 & _18.fld0.3;
_31.0 = (*RET) as f32;
_19 = !27_u8;
_31.0 = -_14.fld1.0;
_18.fld0.3 = _27 & _27;
_22 = -_18.fld1;
_14.fld1.4 = -_14.fld1.0;
_20.fld4.1.1 = core::ptr::addr_of_mut!(_18.fld1);
_18.fld4.0 = _17 as usize;
_14.fld1.4 = _22 as f32;
_20.fld2 = _8;
_17 = _14.fld1.0 / f32::NAN;
_15.fld0 = (_18.fld4.0,);
_31.0 = _14.fld1.1 - _17;
Call(_14.fld1 = fn6(_20.fld6, _20.fld1, _18.fld1, (*RET), _8, _25, _20.fld2, _8, _20.fld2, _8, _10, _20.fld5, _20.fld3.fld0.fld0, _15.fld2), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
_8 = _17 as isize;
_15.fld1.1 = core::ptr::addr_of_mut!(_18.fld0.3);
_20.fld7 = core::ptr::addr_of_mut!(_22);
_2 = _20.fld6.fld0.0.2 | _20.fld6.fld0.0.2;
_31 = (_17, _20.fld6.fld0.2, _20.fld6.fld0.0.2, _27);
_10 = _14.fld1.3 as isize;
_20.fld5 = [_20.fld1,_20.fld1,_26.0,_26.0,_26.0,_20.fld1];
RET = core::ptr::addr_of!((*RET));
_18.fld3 = [254835841662137057873996772101128457551_u128,227920603571337848943737480429110222095_u128,165203683213413079760195020744626019010_u128,199640384676199875203222285451340487312_u128,40902952101896031081504506380782311252_u128];
_20.fld6.fld0.1 = !_20.fld4.0;
_20.fld6.fld0.0.3 = !_31.3;
_15.fld1.2 = _8 & _13;
_18.fld0 = (_23, _5, _31.2, _20.fld6.fld0.0.3);
_18.fld4 = _15.fld0;
_20.fld6.fld0 = (_31, _20.fld4.0, _18.fld0.1);
_8 = _13 & _20.fld2;
_10 = -_8;
_31.0 = _17 / f32::INFINITY;
_20.fld4.1 = (_2, _20.fld7, _14.fld1.3);
_20.fld6.fld0.0.1 = !_18.fld0.1;
_23 = _14.fld1.0;
_18.fld4 = (_15.fld0.0,);
_16.0 = !_18.fld4.0;
_18.fld0.0 = -_17;
_18.fld0.3 = _31.3 - _20.fld6.fld0.0.3;
_18.fld1 = _22 - _22;
Call(_20 = fn13(_31.0, _14.fld1.3, _25, _8, _5, _13, _15.fld2, _14.fld1.3, _15, _18.fld2, _15.fld1.1, _13, _19, _13, _15.fld1.2, _15.fld1.3), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
_18.fld2 = 3227983435558927203_i64 - 8772739554988395660_i64;
_20.fld6.fld0.0.2 = _18.fld0.2;
_20.fld0 = _1 as u16;
_28 = -_18.fld1;
_14.fld1 = (_17, _31.0, _20.fld4.0, _20.fld4.1.2, _20.fld6.fld0.0.0);
_13 = _20.fld2 - _8;
_13 = _18.fld0.1 as isize;
_8 = !_13;
_18.fld0.0 = 70085292909400642773827860992403743872_u128 as f32;
match _18.fld0.3 {
0 => bb7,
1 => bb2,
2 => bb3,
3 => bb6,
4 => bb5,
5 => bb9,
6 => bb10,
123 => bb12,
_ => bb11
}
}
bb9 = {
_26 = (_20.fld1,);
RET = _15.fld1.3;
_22 = -_18.fld1;
_14.fld1.4 = _17 / f32::NAN;
_2 = -_20.fld6.fld0.0.2;
RET = core::ptr::addr_of!(_19);
_15.fld1.0 = (-118911394487830201953744495407804825442_i128);
_20.fld6.fld1 = _20.fld0 * _20.fld0;
_20.fld4.1.0 = _20.fld6.fld0.0.2 | _20.fld6.fld0.0.2;
_25 = [_20.fld4.1.2,_20.fld4.1.2,_20.fld4.1.2,_20.fld4.1.2,_20.fld4.1.2,_20.fld4.1.2,_20.fld4.1.2,_20.fld4.1.2];
_20.fld6.fld0.0.2 = _20.fld4.1.0;
match _15.fld1.0 {
221370972433108261509630112023963386014 => bb6,
_ => bb5
}
}
bb10 = {
_18.fld4 = (_16.0,);
_18.fld0.1 = -_20.fld6.fld0.0.1;
_18.fld4 = _15.fld0;
_15.fld1.0 = -163502758003689197433823968808189551805_i128;
_20.fld0 = !_20.fld6.fld1;
_20.fld1 = !_26.0;
_20.fld6.fld0.1 = !_20.fld4.0;
RET = _15.fld1.3;
_14.fld1 = (_17, _23, _20.fld4.0, _20.fld4.1.2, _17);
_15.fld2 = core::ptr::addr_of!(_20.fld4.1.0);
_20.fld4.1.0 = _20.fld6.fld0.0.2 ^ _2;
(*RET) = 180_u8 | 34_u8;
_27 = _18.fld0.3 & _18.fld0.3;
_31.0 = (*RET) as f32;
_19 = !27_u8;
_31.0 = -_14.fld1.0;
_18.fld0.3 = _27 & _27;
_22 = -_18.fld1;
_14.fld1.4 = -_14.fld1.0;
_20.fld4.1.1 = core::ptr::addr_of_mut!(_18.fld1);
_18.fld4.0 = _17 as usize;
_14.fld1.4 = _22 as f32;
_20.fld2 = _8;
_17 = _14.fld1.0 / f32::NAN;
_15.fld0 = (_18.fld4.0,);
_31.0 = _14.fld1.1 - _17;
Call(_14.fld1 = fn6(_20.fld6, _20.fld1, _18.fld1, (*RET), _8, _25, _20.fld2, _8, _20.fld2, _8, _10, _20.fld5, _20.fld3.fld0.fld0, _15.fld2), ReturnTo(bb7), UnwindUnreachable())
}
bb11 = {
_15.fld0 = (6_usize,);
_15.fld0 = (3_usize,);
_14.fld1.1 = _11 as f32;
_15.fld0.0 = !7004208443910759084_usize;
_3 = _13 & _8;
_13 = -_3;
_15.fld3 = 39_u8 as i16;
_14.fld0 = [_2,_2,_2,_2];
_14.fld0 = [_2,_2,_2,_2];
_18.fld0.1 = _5;
_18.fld2 = 3340042647400360547_i64 >> _18.fld0.1;
_15.fld1.3 = core::ptr::addr_of!(_19);
_16.0 = _15.fld0.0 << _10;
_20.fld4.1.2 = '\u{bad9d}';
_20.fld2 = _13 + _3;
_18.fld0.3 = !110_i8;
_20.fld6.fld0.2 = _18.fld0.1;
_16.0 = !_15.fld0.0;
_20.fld4.1.2 = '\u{f8a2a}';
_20.fld1 = _20.fld2 as u32;
_20.fld7 = core::ptr::addr_of_mut!(_18.fld1);
_15.fld2 = core::ptr::addr_of!(_20.fld6.fld0.0.2);
_18.fld4 = (_16.0,);
Goto(bb3)
}
bb12 = {
(*RET) = 141_u8;
_11 = _1 | _6;
_35.fld4.fld4.0 = _16.0 % 1612815842645234408_usize;
_20.fld6.fld1 = !_20.fld0;
_18.fld0.1 = _20.fld6.fld0.2 - _5;
_37.fld0 = [_26.0,_26.0,_20.fld1,_26.0,_26.0,_26.0,_26.0,_26.0];
Goto(bb13)
}
bb13 = {
_35.fld4.fld0.2 = _31.2;
RET = core::ptr::addr_of!(_19);
_14.fld1.1 = -_17;
_20.fld4.1.1 = _20.fld7;
_20.fld6.fld0.0 = (_31.0, _5, _35.fld4.fld0.2, _27);
_21 = _1;
_39.0 = [_31.2,_18.fld0.2,_20.fld6.fld0.0.2,_18.fld0.2];
_18.fld3 = _20.fld3.fld0.fld0;
_16 = (_15.fld0.0,);
_20.fld4.0 = _4;
_35.fld0 = [_20.fld6.fld0.0.3,_31.3,_27,_31.3,_20.fld6.fld0.0.3,_31.3,_31.3];
_41.fld1 = core::ptr::addr_of!((*RET));
_40 = -_28;
_41.fld4.fld3 = [233624765482969391365063213926318237877_u128,47161967477134925363874329246686951862_u128,164073172069602880562939808397389563715_u128,240013500981628111813141872959308902729_u128,158763754656001780827225619001201117569_u128];
(*RET) = 43_u8 | 111_u8;
_49.3 = _31.3;
_35.fld4 = Adt50 { fld0: _20.fld6.fld0.0,fld1: _28,fld2: _18.fld2,fld3: _41.fld4.fld3,fld4: _16 };
_18.fld3 = _35.fld4.fld3;
_2 = _20.fld6.fld0.0.2 | _20.fld6.fld0.0.2;
Goto(bb14)
}
bb14 = {
_35.fld3 = _20.fld5;
Goto(bb15)
}
bb15 = {
Call(_50 = dump_var(Move(_27), Move(_2), Move(_3), Move(_16)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_50 = dump_var(Move(_21), Move(_8), Move(_11), Move(_26)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_50 = dump_var(Move(_4), _51, _51, _51), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn4(mut _1: isize,mut _2: u64,mut _3: isize,mut _4: u64) -> i32 {
mir! {
type RET = i32;
let _5: *const (f32, i16, i32, i8);
let _6: u64;
let _7: ((f32, i16, i32, i8), u128);
let _8: u16;
let _9: (f32, i16, i32, i8);
let _10: char;
let _11: u128;
let _12: Adt59;
let _13: [char; 8];
let _14: char;
let _15: Adt53;
let _16: isize;
let _17: f32;
let _18: u64;
let _19: f64;
let _20: f32;
let _21: bool;
let _22: (i128, *mut i8, isize, *const u8);
let _23: *const u8;
let _24: Adt60;
let _25: u32;
let _26: u32;
let _27: u64;
let _28: Adt57;
let _29: ();
let _30: ();
{
RET = 1855205655_i32;
RET = 1374706801_i32;
_2 = (-28608_i16) as u64;
_1 = (-1457403304_i32) as isize;
_2 = !_4;
_4 = _3 as u64;
_4 = _2 % 7690512492357589357_u64;
_2 = _3 as u64;
_6 = !_2;
_4 = 1717345888_i32 as u64;
_4 = _6;
Goto(bb1)
}
bb1 = {
_7.0.1 = (-105_i16);
RET = _2 as i32;
RET = (-755487916_i32) * 2069450029_i32;
_5 = core::ptr::addr_of!(_7.0);
_7.0.3 = -(-38_i8);
(*_5).2 = !(-2010404541_i32);
(*_5).1 = !(-17206_i16);
_6 = _2 << _4;
(*_5).0 = _3 as f32;
_4 = !_2;
_7.0.2 = (*_5).3 as i32;
_7.0.3 = (-83_i8);
(*_5).3 = -64_i8;
(*_5).1 = 18830_i16 ^ 23095_i16;
(*_5).0 = _1 as f32;
_9.0 = 11514237904649380526_usize as f32;
_1 = _3 >> _6;
(*_5) = (_9.0, (-31743_i16), 1092241906_i32, (-46_i8));
_7.1 = 6_usize as u128;
_1 = _3 << (*_5).2;
(*_5).2 = -(-21974308_i32);
(*_5).0 = _9.0;
_8 = 46406_u16;
_9.1 = (*_5).1 << _1;
(*_5).3 = 52_i8;
match (*_5).1 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
6 => bb8,
340282366920938463463374607431768179713 => bb10,
_ => bb9
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
RET = (*_5).2;
_13 = ['\u{b7d74}','\u{f88d3}','\u{71e13}','\u{996dc}','\u{91d5d}','\u{a4ed2}','\u{6120d}','\u{aea7b}'];
_7.0.0 = _9.0 + _9.0;
_9 = ((*_5).0, (*_5).1, (*_5).2, (*_5).3);
_1 = -_3;
_12.fld2 = core::ptr::addr_of!((*_5).2);
_7.0.2 = !_9.2;
_7.0.0 = _8 as f32;
_14 = '\u{bc7fc}';
_7.0.2 = _9.2;
_7.0.0 = -_9.0;
_8 = !21274_u16;
_9.2 = -(*_5).2;
(*_5).1 = -_9.1;
_12.fld2 = core::ptr::addr_of!(_7.0.2);
(*_5) = (_9.0, _9.1, _9.2, _9.3);
_7.0.0 = -_9.0;
(*_5).0 = _9.0;
(*_5).1 = !_9.1;
_12.fld0.0 = !3_usize;
_16 = _1 + _3;
_15.fld1 = 5125030830132705228_i64 as f32;
(*_5).2 = !_9.2;
_7.0.2 = 4060367056_u32 as i32;
_14 = '\u{bbc8f}';
match _7.0.3 {
0 => bb11,
1 => bb12,
2 => bb13,
3 => bb14,
52 => bb16,
_ => bb15
}
}
bb11 = {
Return()
}
bb12 = {
Return()
}
bb13 = {
Return()
}
bb14 = {
Return()
}
bb15 = {
_7.0.1 = (-105_i16);
RET = _2 as i32;
RET = (-755487916_i32) * 2069450029_i32;
_5 = core::ptr::addr_of!(_7.0);
_7.0.3 = -(-38_i8);
(*_5).2 = !(-2010404541_i32);
(*_5).1 = !(-17206_i16);
_6 = _2 << _4;
(*_5).0 = _3 as f32;
_4 = !_2;
_7.0.2 = (*_5).3 as i32;
_7.0.3 = (-83_i8);
(*_5).3 = -64_i8;
(*_5).1 = 18830_i16 ^ 23095_i16;
(*_5).0 = _1 as f32;
_9.0 = 11514237904649380526_usize as f32;
_1 = _3 >> _6;
(*_5) = (_9.0, (-31743_i16), 1092241906_i32, (-46_i8));
_7.1 = 6_usize as u128;
_1 = _3 << (*_5).2;
(*_5).2 = -(-21974308_i32);
(*_5).0 = _9.0;
_8 = 46406_u16;
_9.1 = (*_5).1 << _1;
(*_5).3 = 52_i8;
match (*_5).1 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
6 => bb8,
340282366920938463463374607431768179713 => bb10,
_ => bb9
}
}
bb16 = {
_7.0.1 = _9.1;
(*_5).1 = _7.1 as i16;
_18 = _2 ^ _6;
_12.fld1.0 = (-8854890618025382591270223193394188999_i128) * 164060164537039439667333514946834416881_i128;
_21 = !false;
_11 = _12.fld0.0 as u128;
_7.0.2 = _9.2 >> _16;
(*_5) = (_9.0, _9.1, _9.2, _9.3);
_17 = _12.fld0.0 as f32;
_14 = '\u{217c9}';
(*_5).2 = _3 as i32;
_15.fld0.fld0 = [_11,_11,_11,_7.1,_11];
_10 = _14;
(*_5).0 = _9.0 - _15.fld1;
_12.fld0.0 = 0_usize >> _6;
_20 = _7.0.0;
_19 = 5639460839404765363_i64 as f64;
_9.3 = -_7.0.3;
_22.3 = core::ptr::addr_of!(_24.fld3);
_24.fld4 = !1779886654_u32;
_3 = !_1;
Goto(bb17)
}
bb17 = {
Call(_29 = dump_var(Move(_18), Move(_1), Move(_8), Move(_10)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_29 = dump_var(Move(_11), Move(_3), _30, _30), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn5(mut _1: [char; 8],mut _2: i16,mut _3: char,mut _4: isize,mut _5: u64,mut _6: i16,mut _7: isize,mut _8: u8,mut _9: i32,mut _10: f32,mut _11: isize,mut _12: *const i32,mut _13: [i32; 4],mut _14: [u32; 6],mut _15: i32) -> bool {
mir! {
type RET = bool;
let _16: isize;
let _17: [u128; 5];
let _18: *const (f32, i16, i32, i8);
let _19: *mut bool;
let _20: f32;
let _21: ();
let _22: ();
{
RET = _7 == _7;
_5 = 16068_u16 as u64;
_9 = (*_12);
(*_12) = _8 as i32;
_7 = _10 as isize;
_11 = _7;
_17 = [238489405730171327906287493201923946759_u128,143479522827910403531032475318984503320_u128,169071683582608710779851855265594149788_u128,9354929757944605035082302578836864812_u128,271200298560311745885970827471465982075_u128];
_16 = !_11;
_7 = _11;
_12 = core::ptr::addr_of!(_9);
_2 = 800459576_u32 as i16;
_16 = _7;
_12 = core::ptr::addr_of!(_9);
Goto(bb1)
}
bb1 = {
Call(_21 = dump_var(Move(_7), Move(_8), Move(_15), Move(_6)), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Call(_21 = dump_var(Move(_3), Move(_9), Move(_11), _22), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn6(mut _1: Adt56,mut _2: u32,mut _3: f64,mut _4: u8,mut _5: isize,mut _6: [char; 8],mut _7: isize,mut _8: isize,mut _9: isize,mut _10: isize,mut _11: isize,mut _12: [u32; 6],mut _13: [u128; 5],mut _14: *const i32) -> (f32, f32, bool, char, f32) {
mir! {
type RET = (f32, f32, bool, char, f32);
let _15: [u32; 6];
let _16: isize;
let _17: u128;
let _18: ();
let _19: ();
{
(*_14) = _1.fld0.0.2 ^ _1.fld0.0.2;
_9 = _5 & _10;
_1.fld0.0.2 = (-80384846270709819758134070137471496098_i128) as i32;
RET.0 = _1.fld0.0.0 / 1_f32;
_6 = ['\u{ce06a}','\u{e8c59}','\u{ecdc2}','\u{d4061}','\u{cd15a}','\u{69579}','\u{146fc}','\u{9f5e1}'];
RET.2 = !_1.fld0.1;
(*_14) = !_1.fld0.0.2;
RET.1 = _1.fld0.0.0 + _1.fld0.0.0;
_14 = core::ptr::addr_of!(_1.fld0.0.2);
_10 = _3 as isize;
_15 = _12;
_1.fld1 = _1.fld0.0.3 as u16;
Call(RET.3 = fn7(_1.fld0.2, _5, _4), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_1.fld0.0.3 = !111_i8;
_1.fld1 = 42167_u16 - 52170_u16;
_17 = 108829122920524653010975298148538012478_u128;
RET = (_1.fld0.0.0, _1.fld0.0.0, _1.fld0.1, '\u{70c9d}', _1.fld0.0.0);
RET.1 = -_1.fld0.0.0;
RET = (_1.fld0.0.0, _1.fld0.0.0, _1.fld0.1, '\u{5af40}', _1.fld0.0.0);
RET = (_1.fld0.0.0, _1.fld0.0.0, _1.fld0.1, '\u{677bd}', _1.fld0.0.0);
RET = (_1.fld0.0.0, _1.fld0.0.0, _1.fld0.1, '\u{108e63}', _1.fld0.0.0);
_11 = _9 << _9;
_12 = _15;
(*_14) = -1030686399_i32;
RET.2 = _1.fld0.1;
RET = (_1.fld0.0.0, _1.fld0.0.0, _1.fld0.1, '\u{83650}', _1.fld0.0.0);
_16 = -_9;
_4 = 138_u8 << _8;
RET.2 = _1.fld0.1 <= _1.fld0.1;
Goto(bb2)
}
bb2 = {
Call(_18 = dump_var(Move(_5), Move(_13), Move(_4), Move(_15)), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Call(_18 = dump_var(Move(_2), Move(_8), Move(_11), _19), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn7(mut _1: i16,mut _2: isize,mut _3: u8) -> char {
mir! {
type RET = char;
let _4: (f32, i16, i32, i8);
let _5: (usize,);
let _6: Adt53;
let _7: isize;
let _8: Adt47;
let _9: *mut f64;
let _10: u16;
let _11: ((f32, i16, i32, i8), u128);
let _12: u8;
let _13: f32;
let _14: ((f32, i16, i32, i8), u128);
let _15: *mut u128;
let _16: Adt58;
let _17: Adt49;
let _18: [i32; 3];
let _19: isize;
let _20: ();
let _21: ();
{
_3 = 7209972153600873444_u64 as u8;
RET = '\u{74b52}';
_4.3 = -(-73_i8);
_1 = 467163139_u32 as i16;
_6.fld0.fld0 = [154951877121324709059611648282851342470_u128,12650512795265048027741201579020845160_u128,42242978855942257927395713371023595491_u128,29826064116716926021051362284341143576_u128,115233327525452579699096853098260627704_u128];
_4.1 = true as i16;
_3 = !2_u8;
_4.1 = 168722071_u32 as i16;
_6.fld1 = 4402719839843397069_i64 as f32;
RET = '\u{bff51}';
_4.0 = _6.fld1;
_4.2 = -40676423_i32;
_4.1 = _1 << _2;
_3 = !200_u8;
_4.3 = 89_i8 ^ (-53_i8);
_3 = 1368221386_u32 as u8;
Goto(bb1)
}
bb1 = {
_4.0 = 161006159853360616865345087664508939531_i128 as f32;
_5.0 = 3_usize;
Goto(bb2)
}
bb2 = {
_4.0 = 3464025827_u32 as f32;
_4.2 = _3 as i32;
_3 = !236_u8;
_5.0 = !7120374331341577192_usize;
_6.fld1 = 3835989779_u32 as f32;
_4.2 = (-649322346_i32) - 1979161332_i32;
_4 = (_6.fld1, _1, (-2114327311_i32), (-90_i8));
_4.1 = _1 + _1;
_2 = (-9223372036854775808_isize);
_5.0 = !10733722840301451628_usize;
_1 = !_4.1;
RET = '\u{1094b}';
_8.fld1 = [_4.2,_4.2,_4.2,_4.2];
match _4.3 {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
340282366920938463463374607431768211366 => bb8,
_ => bb7
}
}
bb3 = {
_4.0 = 161006159853360616865345087664508939531_i128 as f32;
_5.0 = 3_usize;
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_4.2 = !(-635171896_i32);
_4.1 = !_1;
_4 = (_6.fld1, _1, (-901087109_i32), (-120_i8));
RET = '\u{f7f8d}';
_4.1 = _1 - _1;
RET = '\u{88cbc}';
_12 = _3;
_4.3 = !31_i8;
_4 = (_6.fld1, _1, (-442961684_i32), (-99_i8));
_7 = _2 >> _4.1;
_10 = 13794_u16 - 37988_u16;
_11.1 = !278076106730260239434249905898329183508_u128;
_11.0 = _4;
_14.0 = (_11.0.0, _1, _4.2, _11.0.3);
_8.fld2 = (-2324482455656416217_i64) - (-5432989520285121838_i64);
_15 = core::ptr::addr_of_mut!(_11.1);
_8.fld1 = [_4.2,_4.2,_14.0.2,_11.0.2];
_1 = _3 as i16;
(*_15) = 164240244804584276231445197009620537603_u128;
_4.3 = _11.0.3 ^ _11.0.3;
_14.1 = _11.1 + _11.1;
RET = '\u{f4d53}';
_6.fld0.fld0 = [_11.1,_14.1,(*_15),_11.1,_11.1];
_11.0.3 = _14.0.3 - _4.3;
Call(_17.fld2 = fn8(_11.1, _14, _6.fld0.fld0, _5, _5, _11.1, _14.0, _14, _1), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
_4.1 = -_11.0.1;
_11.0.2 = _11.0.3 as i32;
_4.2 = 120791779247759163318476187902584999808_i128 as i32;
_11.0 = (_6.fld1, _1, _14.0.2, _14.0.3);
_11.0.1 = !_4.1;
_5.0 = !3_usize;
_4.0 = _14.0.0;
_11.0 = _4;
match _2 {
0 => bb1,
1 => bb2,
2 => bb8,
3 => bb6,
4 => bb7,
5 => bb10,
6 => bb11,
340282366920938463454151235394913435648 => bb13,
_ => bb12
}
}
bb10 = {
_4.2 = !(-635171896_i32);
_4.1 = !_1;
_4 = (_6.fld1, _1, (-901087109_i32), (-120_i8));
RET = '\u{f7f8d}';
_4.1 = _1 - _1;
RET = '\u{88cbc}';
_12 = _3;
_4.3 = !31_i8;
_4 = (_6.fld1, _1, (-442961684_i32), (-99_i8));
_7 = _2 >> _4.1;
_10 = 13794_u16 - 37988_u16;
_11.1 = !278076106730260239434249905898329183508_u128;
_11.0 = _4;
_14.0 = (_11.0.0, _1, _4.2, _11.0.3);
_8.fld2 = (-2324482455656416217_i64) - (-5432989520285121838_i64);
_15 = core::ptr::addr_of_mut!(_11.1);
_8.fld1 = [_4.2,_4.2,_14.0.2,_11.0.2];
_1 = _3 as i16;
(*_15) = 164240244804584276231445197009620537603_u128;
_4.3 = _11.0.3 ^ _11.0.3;
_14.1 = _11.1 + _11.1;
RET = '\u{f4d53}';
_6.fld0.fld0 = [_11.1,_14.1,(*_15),_11.1,_11.1];
_11.0.3 = _14.0.3 - _4.3;
Call(_17.fld2 = fn8(_11.1, _14, _6.fld0.fld0, _5, _5, _11.1, _14.0, _14, _1), ReturnTo(bb9), UnwindUnreachable())
}
bb11 = {
Return()
}
bb12 = {
Return()
}
bb13 = {
_6.fld1 = -_4.0;
_17.fld0 = [3840175938_u32,786518696_u32,3185465141_u32,303532567_u32,1246050997_u32,3794465276_u32];
_14.0.2 = !_4.2;
_17.fld1 = _17.fld2.fld0;
(*_15) = _14.1;
_16.fld1 = [_14.0.2,_11.0.2,_4.2,_11.0.2];
RET = '\u{7ec55}';
_15 = core::ptr::addr_of_mut!(_14.1);
_11.1 = !(*_15);
_11.0.1 = -_14.0.1;
Goto(bb14)
}
bb14 = {
_16.fld2 = ['\u{478e7}','\u{983f0}','\u{1823e}','\u{d55a9}','\u{23c27}','\u{da07c}','\u{16fe7}','\u{ae5bc}'];
_15 = core::ptr::addr_of_mut!(_11.1);
_4.2 = _11.0.2;
_14 = _11;
_2 = _1 as isize;
_19 = _2;
_17.fld1.0 = [_14.0.2,_4.2,_4.2,_4.2];
_14.1 = _11.0.0 as u128;
_17.fld0 = [3027239518_u32,4280341535_u32,4055381112_u32,1110462942_u32,2785552832_u32,3396042901_u32];
_10 = _19 as u16;
_4.2 = -_11.0.2;
Goto(bb15)
}
bb15 = {
Call(_20 = dump_var(Move(_1), Move(_10), Move(_2), Move(_19)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn8(mut _1: u128,mut _2: ((f32, i16, i32, i8), u128),mut _3: [u128; 5],mut _4: (usize,),mut _5: (usize,),mut _6: u128,mut _7: (f32, i16, i32, i8),mut _8: ((f32, i16, i32, i8), u128),mut _9: i16) -> Adt48 {
mir! {
type RET = Adt48;
let _10: [char; 8];
let _11: isize;
let _12: i16;
let _13: isize;
let _14: f32;
let _15: *mut f64;
let _16: f64;
let _17: i32;
let _18: isize;
let _19: isize;
let _20: *const (f32, i16, i32, i8);
let _21: i8;
let _22: Adt50;
let _23: Adt58;
let _24: (i32, *mut f64, char);
let _25: isize;
let _26: i32;
let _27: (f32, f32, bool, char, f32);
let _28: (i32, *mut f64, char);
let _29: i16;
let _30: f64;
let _31: Adt56;
let _32: [i8; 7];
let _33: ((f32, i16, i32, i8), bool, i16);
let _34: ((f32, i16, i32, i8), u128);
let _35: u32;
let _36: [i32; 3];
let _37: (f32, f32, bool, char, f32);
let _38: [char; 8];
let _39: ();
let _40: ();
{
_7 = (_2.0.0, _9, _2.0.2, _8.0.3);
_2.0.1 = _8.0.1;
_8.0.1 = 59873_u16 as i16;
_4.0 = _5.0 ^ _5.0;
_7.1 = _8.0.2 as i16;
_2.0.2 = _8.0.2;
_8.0.3 = _7.3 ^ _2.0.3;
_8.0.3 = false as i8;
_7 = (_8.0.0, _2.0.1, _8.0.2, _2.0.3);
_8.0.3 = !_2.0.3;
_11 = (-9013465283232054042_i64) as isize;
_5.0 = _4.0;
_10 = ['\u{2c35e}','\u{fca7c}','\u{49fa1}','\u{d6a10}','\u{e4468}','\u{31be9}','\u{1276f}','\u{f5386}'];
_8.0 = (_2.0.0, _9, _2.0.2, _7.3);
_7 = _8.0;
_5.0 = !_4.0;
_7 = (_8.0.0, _2.0.1, _2.0.2, _2.0.3);
_6 = _1 + _8.1;
Call(_7.2 = fn9(_8.1, _8, _11, _2.1, _1, _7.3, _10, _5, _8.1, _2.0.2, _8.0.2), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_7.2 = _11 as i32;
_7.3 = _2.0.3;
_14 = _7.0 * _2.0.0;
_3 = [_8.1,_6,_8.1,_8.1,_8.1];
RET.fld0.0 = [_8.0.2,_8.0.2,_8.0.2,_2.0.2];
_13 = _11;
_2.0.1 = -_7.1;
_2 = _8;
_8.0.3 = !_7.3;
_2.0.1 = _7.1 >> _8.0.3;
_2.0.3 = 78_u8 as i8;
Call(_16 = fn12(_8.1, _8.0.1, _7, _8.0.2, _7.3, _1, _7.2, _7.1, _8.0.0, _5.0, _4.0, _1, _8.0.1, _7.2, _2.0, _5.0), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_2.0.3 = _7.3;
_8.0.1 = -_2.0.1;
_2.1 = !_6;
_7.0 = _2.0.1 as f32;
_9 = -_2.0.1;
_5 = (_4.0,);
_8.1 = _2.1;
_15 = core::ptr::addr_of_mut!(_16);
RET.fld0.0 = [_8.0.2,_2.0.2,_2.0.2,_8.0.2];
_15 = core::ptr::addr_of_mut!((*_15));
_22 = Adt50 { fld0: _7,fld1: (*_15),fld2: 3852798532005686867_i64,fld3: _3,fld4: _4 };
_2.0.1 = !_8.0.1;
_5 = _22.fld4;
_4.0 = (*_15) as usize;
_2.0.0 = _22.fld0.0;
_24.2 = '\u{51f78}';
_17 = false as i32;
_22.fld2 = (-8579655927077697067_i64);
_22.fld4.0 = !_5.0;
match _22.fld0.3 {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
4 => bb7,
5 => bb8,
6 => bb9,
340282366920938463463374607431768211357 => bb11,
_ => bb10
}
}
bb3 = {
_7.2 = _11 as i32;
_7.3 = _2.0.3;
_14 = _7.0 * _2.0.0;
_3 = [_8.1,_6,_8.1,_8.1,_8.1];
RET.fld0.0 = [_8.0.2,_8.0.2,_8.0.2,_2.0.2];
_13 = _11;
_2.0.1 = -_7.1;
_2 = _8;
_8.0.3 = !_7.3;
_2.0.1 = _7.1 >> _8.0.3;
_2.0.3 = 78_u8 as i8;
Call(_16 = fn12(_8.1, _8.0.1, _7, _8.0.2, _7.3, _1, _7.2, _7.1, _8.0.0, _5.0, _4.0, _1, _8.0.1, _7.2, _2.0, _5.0), ReturnTo(bb2), UnwindUnreachable())
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
_24.1 = _15;
Goto(bb12)
}
bb12 = {
_4 = _5;
_22.fld0.1 = _9 | _8.0.1;
_4.0 = !_22.fld4.0;
_12 = _9 ^ _22.fld0.1;
_19 = !_11;
_16 = _22.fld1 / f64::INFINITY;
_21 = 63_u8 as i8;
_19 = -_13;
_22.fld2 = (-3567392261792482887_i64);
_7.0 = _4.0 as f32;
_15 = core::ptr::addr_of_mut!(_16);
_26 = _2.0.2 - _7.2;
_15 = core::ptr::addr_of_mut!(_22.fld1);
_2.0.3 = _21;
_20 = core::ptr::addr_of!(_22.fld0);
_2.0.3 = 4067089461_u32 as i8;
_2.0.0 = (*_20).0;
_2.0.0 = -(*_20).0;
_28 = (_2.0.2, _15, _24.2);
(*_20).1 = (*_20).3 as i16;
(*_20).0 = 85933478818616576158065597512935204776_i128 as f32;
_19 = _11;
Goto(bb13)
}
bb13 = {
_31.fld0.0.2 = 72142688703177904737212275272578770992_i128 as i32;
(*_20).2 = _28.0;
(*_20) = (_8.0.0, _2.0.1, _31.fld0.0.2, _7.3);
_28.2 = _24.2;
RET.fld0.0 = [_2.0.2,_26,_26,_31.fld0.0.2];
_7.1 = _12;
_31.fld0.0.0 = _2.0.0 / f32::NAN;
_31.fld1 = 4661_u16 / 58792_u16;
(*_20).3 = !_8.0.3;
_34.1 = !_8.1;
Goto(bb14)
}
bb14 = {
_34.0.0 = _2.0.0 * _31.fld0.0.0;
(*_20).1 = _7.1 * _7.1;
_2.1 = !_1;
_27.2 = (*_20).1 != (*_20).1;
_33.0.3 = 3662999869_u32 as i8;
_11 = 1677166239_u32 as isize;
(*_20).0 = -_34.0.0;
_2 = _8;
_22 = Adt50 { fld0: _7,fld1: _16,fld2: 3605504632835036291_i64,fld3: _3,fld4: _5 };
_29 = 4463427060737543303_u64 as i16;
_31.fld1 = !39703_u16;
_34.0.3 = _22.fld4.0 as i8;
_22.fld0 = (_7.0, _2.0.1, _26, _8.0.3);
(*_20).3 = _21 - _8.0.3;
_25 = _8.1 as isize;
_27.0 = _34.0.0;
(*_20).3 = _27.0 as i8;
_19 = _25 | _11;
Goto(bb15)
}
bb15 = {
Call(_39 = dump_var(Move(_6), Move(_19), Move(_4), Move(_9)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_39 = dump_var(Move(_13), Move(_12), Move(_5), Move(_25)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn9(mut _1: u128,mut _2: ((f32, i16, i32, i8), u128),mut _3: isize,mut _4: u128,mut _5: u128,mut _6: i8,mut _7: [char; 8],mut _8: (usize,),mut _9: u128,mut _10: i32,mut _11: i32) -> i32 {
mir! {
type RET = i32;
let _12: ([i32; 4],);
let _13: *const i32;
let _14: Adt49;
let _15: *mut f64;
let _16: f32;
let _17: (usize,);
let _18: char;
let _19: Adt47;
let _20: *mut *const (f32, i16, i32, i8);
let _21: Adt51;
let _22: isize;
let _23: bool;
let _24: ();
let _25: ();
{
_4 = _11 as u128;
RET = -_2.0.2;
_2.1 = !_4;
_12.0 = [_10,_10,_11,_2.0.2];
_10 = 8650647690551284946_i64 as i32;
_6 = _2.0.3;
_14.fld2 = Adt48 { fld0: _12 };
_14.fld0 = [1193528147_u32,2363950838_u32,1092219516_u32,3586795175_u32,1519659480_u32,1325666624_u32];
_12 = (_14.fld2.fld0.0,);
_2.1 = _1;
_14.fld1.0 = _12.0;
_9 = !_4;
_9 = _3 as u128;
_8.0 = _4 as usize;
_16 = _8.0 as f32;
_14.fld0 = [235528913_u32,2870753402_u32,962876992_u32,2873457563_u32,616380609_u32,3271009078_u32];
_4 = _2.1;
_14.fld2.fld0.0 = [_11,_11,_2.0.2,_11];
_17.0 = _8.0;
_11 = _2.0.2;
Call(_12 = fn10(_17.0, _3, _1, _2, _16, _17.0, _14.fld1, _14.fld2.fld0, _11, _2.0, Move(_14), _2.0.0, _2.0.3, _8.0, _8, _5), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_12.0 = [_11,_10,_11,_2.0.2];
_16 = _2.0.0 / 1_f32;
match _2.0.3 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
340282366920938463463374607431768211357 => bb9,
_ => bb8
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
_2.0.1 = (-16589_i16);
_8 = (_17.0,);
_19.fld2 = 7029902773656410579_i64;
_2.0.1 = -31344_i16;
_8.0 = !_17.0;
_13 = core::ptr::addr_of!(_2.0.2);
_2.0.2 = -_11;
RET = !_2.0.2;
_23 = false;
_2.0 = (_16, 2007_i16, _11, _6);
_21.fld0 = [_2.1,_2.1,_1,_1,_4];
_1 = _2.0.1 as u128;
_11 = _23 as i32;
_2.0 = (_16, (-1397_i16), _10, _6);
_19.fld2 = 3704766854_u32 as i64;
_8 = _17;
_6 = _2.0.3 | _2.0.3;
Call(_19.fld0 = core::intrinsics::transmute(_7), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_19.fld1 = [_11,_10,_11,_10];
_9 = _1 >> _2.0.2;
_10 = !(*_13);
_13 = core::ptr::addr_of!(_11);
_17.0 = !_8.0;
_2.0.3 = _6 >> _8.0;
_19.fld1 = [_10,(*_13),_10,(*_13)];
match _2.0.1 {
0 => bb1,
1 => bb2,
2 => bb9,
3 => bb4,
4 => bb5,
5 => bb6,
6 => bb7,
340282366920938463463374607431768210059 => bb12,
_ => bb11
}
}
bb11 = {
Return()
}
bb12 = {
_2.0.0 = _16;
Goto(bb13)
}
bb13 = {
(*_13) = 17104754060306231334_u64 as i32;
_12.0 = [(*_13),(*_13),_2.0.2,(*_13)];
_19.fld2 = 1568295078819415007_i64;
_7 = ['\u{31ce3}','\u{76a0f}','\u{ca602}','\u{1a016}','\u{8a5f7}','\u{c5d57}','\u{813f5}','\u{563c5}'];
_17.0 = '\u{7ee17}' as usize;
_19.fld2 = 1483158996522186414_i64;
_2.0 = (_16, 12390_i16, (*_13), _6);
_9 = 14571185712460752890_u64 as u128;
_18 = '\u{8e46}';
_4 = !_2.1;
_13 = core::ptr::addr_of!(_11);
_8.0 = !_17.0;
_19.fld0 = [3569144207_u32,253714636_u32,2531375267_u32,3594816010_u32,2726416145_u32,271126985_u32,3168930003_u32,3742965830_u32];
_22 = _19.fld2 as isize;
_12.0 = _19.fld1;
_16 = _2.0.0 - _2.0.0;
_21.fld0 = [_9,_1,_5,_1,_1];
Goto(bb14)
}
bb14 = {
_8.0 = _17.0;
_18 = '\u{b66c2}';
_2.0 = (_16, (-26631_i16), (*_13), _6);
_7 = [_18,_18,_18,_18,_18,_18,_18,_18];
_11 = _2.0.2 & _10;
_11 = _1 as i32;
_9 = !_1;
(*_13) = !_10;
_4 = !_2.1;
_3 = (-25095930029396909174558628380754939423_i128) as isize;
_4 = 3348997268_u32 as u128;
_8.0 = _17.0;
Goto(bb15)
}
bb15 = {
Call(_24 = dump_var(Move(_4), Move(_11), Move(_6), Move(_8)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_24 = dump_var(Move(_22), Move(_7), Move(_17), _25), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn10(mut _1: usize,mut _2: isize,mut _3: u128,mut _4: ((f32, i16, i32, i8), u128),mut _5: f32,mut _6: usize,mut _7: ([i32; 4],),mut _8: ([i32; 4],),mut _9: i32,mut _10: (f32, i16, i32, i8),mut _11: Adt49,mut _12: f32,mut _13: i8,mut _14: usize,mut _15: (usize,),mut _16: u128) -> ([i32; 4],) {
mir! {
type RET = ([i32; 4],);
let _17: *mut isize;
let _18: Adt48;
let _19: [u32; 6];
let _20: Adt62;
let _21: [char; 8];
let _22: usize;
let _23: [char; 8];
let _24: char;
let _25: u128;
let _26: u32;
let _27: Adt56;
let _28: f32;
let _29: (i128, *mut i8, isize, *const u8);
let _30: isize;
let _31: ((f32, i16, i32, i8), u128);
let _32: [u32; 6];
let _33: (f32, f32, bool, char, f32);
let _34: f32;
let _35: *const u8;
let _36: (i128, *mut i8, isize, *const u8);
let _37: u64;
let _38: [i8; 7];
let _39: [u32; 8];
let _40: Adt55;
let _41: [i32; 3];
let _42: bool;
let _43: (f32, i16, i32, i8);
let _44: usize;
let _45: char;
let _46: ();
let _47: ();
{
_11.fld0 = [3073191912_u32,547861944_u32,2016815593_u32,3975536721_u32,3421542502_u32,3777268125_u32];
_6 = _14;
_17 = core::ptr::addr_of_mut!(_2);
_10.0 = 998066216050988975_u64 as f32;
_19 = _11.fld0;
_8.0 = _11.fld2.fld0.0;
Goto(bb1)
}
bb1 = {
_18.fld0 = _11.fld2.fld0;
_4 = (_10, _3);
_20.fld1.2 = false;
_18 = Move(_11.fld2);
_8 = _11.fld1;
RET = (_18.fld0.0,);
_10.3 = _13 ^ _13;
_18.fld0.0 = _7.0;
(*_17) = -(-11_isize);
_21 = ['\u{8affa}','\u{7da32}','\u{e0bde}','\u{fb78e}','\u{18cbf}','\u{48606}','\u{c54f5}','\u{6e6a3}'];
_20.fld0 = [_9,_9,_9,_9];
_20.fld1.0 = _13 as f32;
_4.1 = !_3;
RET.0 = [_4.0.2,_10.2,_9,_10.2];
_20.fld1.4 = _5 * _5;
_20.fld1.0 = 3494336304403926737_i64 as f32;
_22 = _14 | _15.0;
_11.fld1.0 = _8.0;
_4.0.1 = _10.1 | _10.1;
_4.0.0 = _22 as f32;
(*_17) = (-9223372036854775808_isize) + (-9223372036854775808_isize);
_23 = ['\u{b702a}','\u{104d56}','\u{ba8dd}','\u{beb4}','\u{9a1b9}','\u{c988e}','\u{26b5f}','\u{95e2f}'];
_5 = -_20.fld1.4;
_18 = Adt48 { fld0: _11.fld1 };
match _10.2 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
340282366920938463463374607431325249772 => bb8,
_ => bb7
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_11.fld0 = [2507637332_u32,3608437339_u32,3079130901_u32,4291721068_u32,3564633734_u32,4074541844_u32];
_15 = (_22,);
_7.0 = [_9,_9,_10.2,_10.2];
_20.fld1 = (_5, _4.0.0, false, '\u{ae61}', _4.0.0);
_26 = 850027219_u32;
_2 = !9223372036854775807_isize;
_8.0 = [_9,_10.2,_9,_9];
_11.fld1.0 = [_9,_9,_9,_9];
_23 = [_20.fld1.3,_20.fld1.3,_20.fld1.3,_20.fld1.3,_20.fld1.3,_20.fld1.3,_20.fld1.3,_20.fld1.3];
_5 = 2896197016626502976_i64 as f32;
_15 = (_1,);
_31.0.1 = _2 as i16;
RET.0 = _18.fld0.0;
(*_17) = (-9223372036854775808_isize);
_18.fld0.0 = [_10.2,_9,_10.2,_10.2];
_20.fld1.1 = _20.fld1.0;
_27.fld0.0.1 = !_4.0.1;
_20.fld1.1 = _9 as f32;
_29.2 = _2;
_31.0.3 = _13 | _4.0.3;
_4.0.1 = -_27.fld0.0.1;
_25 = !_3;
_20.fld0 = [_10.2,_4.0.2,_10.2,_9];
match _13 {
0 => bb1,
1 => bb2,
2 => bb9,
340282366920938463463374607431768211357 => bb11,
_ => bb10
}
}
bb9 = {
_18.fld0 = _11.fld2.fld0;
_4 = (_10, _3);
_20.fld1.2 = false;
_18 = Move(_11.fld2);
_8 = _11.fld1;
RET = (_18.fld0.0,);
_10.3 = _13 ^ _13;
_18.fld0.0 = _7.0;
(*_17) = -(-11_isize);
_21 = ['\u{8affa}','\u{7da32}','\u{e0bde}','\u{fb78e}','\u{18cbf}','\u{48606}','\u{c54f5}','\u{6e6a3}'];
_20.fld0 = [_9,_9,_9,_9];
_20.fld1.0 = _13 as f32;
_4.1 = !_3;
RET.0 = [_4.0.2,_10.2,_9,_10.2];
_20.fld1.4 = _5 * _5;
_20.fld1.0 = 3494336304403926737_i64 as f32;
_22 = _14 | _15.0;
_11.fld1.0 = _8.0;
_4.0.1 = _10.1 | _10.1;
_4.0.0 = _22 as f32;
(*_17) = (-9223372036854775808_isize) + (-9223372036854775808_isize);
_23 = ['\u{b702a}','\u{104d56}','\u{ba8dd}','\u{beb4}','\u{9a1b9}','\u{c988e}','\u{26b5f}','\u{95e2f}'];
_5 = -_20.fld1.4;
_18 = Adt48 { fld0: _11.fld1 };
match _10.2 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
340282366920938463463374607431325249772 => bb8,
_ => bb7
}
}
bb10 = {
Return()
}
bb11 = {
_18.fld0.0 = _11.fld1.0;
_31.0.2 = _4.0.2 | _4.0.2;
_2 = 9812161383930279035_u64 as isize;
_26 = 374959104_u32 / 471975455_u32;
_27.fld0.0 = (_4.0.0, _10.1, _31.0.2, _10.3);
_15 = (_6,);
_27.fld0.0.0 = _20.fld1.0 * _20.fld1.0;
_11.fld0 = _19;
_27.fld0.2 = _31.0.1 ^ _4.0.1;
Call(_33.3 = fn11(_13, _27.fld0.0.3, _31.0.1, _29.2, _17, _29.2, _10.1, Move(_18)), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
_4.0.1 = _20.fld1.1 as i16;
_33.0 = -_4.0.0;
_1 = !_22;
_29.0 = _31.0.2 as i128;
_4 = (_27.fld0.0, _25);
_28 = _27.fld0.0.0 * _20.fld1.0;
_27.fld0.2 = -_10.1;
_29.1 = core::ptr::addr_of_mut!(_4.0.3);
_20.fld1.2 = _27.fld0.0.2 < _4.0.2;
_31 = (_10, _25);
RET.0 = [_27.fld0.0.2,_31.0.2,_9,_10.2];
_10.1 = _4.0.1 | _31.0.1;
_27.fld0.0.3 = _10.3 >> _13;
RET = (_11.fld1.0,);
_33.1 = _27.fld0.2 as f32;
_33.4 = -_27.fld0.0.0;
_24 = _20.fld1.3;
_22 = _1;
_7.0 = [_27.fld0.0.2,_31.0.2,_9,_10.2];
_19 = _11.fld0;
_4.0.2 = !_9;
_4.0.0 = _33.0 + _28;
_36.2 = (*_17);
_36.0 = _20.fld1.2 as i128;
Goto(bb13)
}
bb13 = {
_27.fld0.1 = !_20.fld1.2;
_33.2 = _20.fld1.2;
_20.fld1.3 = _24;
_27.fld0.0.2 = _31.0.2 << _15.0;
_31.0.2 = _10.2 - _27.fld0.0.2;
_17 = core::ptr::addr_of_mut!(_36.2);
_40.fld4 = _27.fld0.0.0 as i16;
_25 = _20.fld1.2 as u128;
_29.2 = (*_17);
(*_17) = _29.2;
_33.1 = _20.fld1.0;
_10.2 = _27.fld0.0.2 & _31.0.2;
_27.fld1 = !571_u16;
_10.3 = _27.fld0.0.3 ^ _4.0.3;
_40.fld1.fld0 = _7;
_40.fld3 = _25;
_33.3 = _20.fld1.3;
_29.1 = core::ptr::addr_of_mut!(_13);
match _16 {
0 => bb4,
1 => bb14,
2 => bb15,
3 => bb16,
164240244804584276231445197009620537603 => bb18,
_ => bb17
}
}
bb14 = {
_11.fld0 = [2507637332_u32,3608437339_u32,3079130901_u32,4291721068_u32,3564633734_u32,4074541844_u32];
_15 = (_22,);
_7.0 = [_9,_9,_10.2,_10.2];
_20.fld1 = (_5, _4.0.0, false, '\u{ae61}', _4.0.0);
_26 = 850027219_u32;
_2 = !9223372036854775807_isize;
_8.0 = [_9,_10.2,_9,_9];
_11.fld1.0 = [_9,_9,_9,_9];
_23 = [_20.fld1.3,_20.fld1.3,_20.fld1.3,_20.fld1.3,_20.fld1.3,_20.fld1.3,_20.fld1.3,_20.fld1.3];
_5 = 2896197016626502976_i64 as f32;
_15 = (_1,);
_31.0.1 = _2 as i16;
RET.0 = _18.fld0.0;
(*_17) = (-9223372036854775808_isize);
_18.fld0.0 = [_10.2,_9,_10.2,_10.2];
_20.fld1.1 = _20.fld1.0;
_27.fld0.0.1 = !_4.0.1;
_20.fld1.1 = _9 as f32;
_29.2 = _2;
_31.0.3 = _13 | _4.0.3;
_4.0.1 = -_27.fld0.0.1;
_25 = !_3;
_20.fld0 = [_10.2,_4.0.2,_10.2,_9];
match _13 {
0 => bb1,
1 => bb2,
2 => bb9,
340282366920938463463374607431768211357 => bb11,
_ => bb10
}
}
bb15 = {
Return()
}
bb16 = {
Return()
}
bb17 = {
Return()
}
bb18 = {
_13 = !_10.3;
_34 = _27.fld0.0.0;
_11 = Adt49 { fld0: _19,fld1: _40.fld1.fld0,fld2: Move(_40.fld1) };
_15.0 = !_6;
_36.1 = _29.1;
_29.1 = core::ptr::addr_of_mut!(_4.0.3);
_4.0.1 = _40.fld4 << _10.3;
_27.fld1 = 23628_u16;
_43 = (_4.0.0, _4.0.1, _31.0.2, _27.fld0.0.3);
_40.fld6 = core::ptr::addr_of!(_27.fld0.0);
_27.fld0.0 = (_33.1, _4.0.1, _10.2, _31.0.3);
_44 = _20.fld1.0 as usize;
RET.0 = [_10.2,_43.2,_10.2,_43.2];
_41 = [_4.0.2,_10.2,_27.fld0.0.2];
(*_17) = !_2;
_36.1 = core::ptr::addr_of_mut!(_31.0.3);
_4 = (_27.fld0.0, _25);
_20.fld1.2 = _27.fld0.1;
_40.fld5 = core::ptr::addr_of!(_27.fld0);
_33.3 = _24;
_15 = (_6,);
_11.fld0 = [_26,_26,_26,_26,_26,_26];
_39 = [_26,_26,_26,_26,_26,_26,_26,_26];
_11.fld1 = (_20.fld0,);
Goto(bb19)
}
bb19 = {
Call(_46 = dump_var(Move(_25), Move(_22), Move(_2), Move(_8)), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Call(_46 = dump_var(Move(_41), Move(_6), Move(_14), Move(_24)), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
Call(_46 = dump_var(Move(_26), Move(_23), _47, _47), ReturnTo(bb22), UnwindUnreachable())
}
bb22 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn11(mut _1: i8,mut _2: i8,mut _3: i16,mut _4: isize,mut _5: *mut isize,mut _6: isize,mut _7: i16,mut _8: Adt48) -> char {
mir! {
type RET = char;
let _9: (f32, i16, i32, i8);
let _10: Adt52;
let _11: *const ((f32, i16, i32, i8), bool, i16);
let _12: f64;
let _13: (i128, *mut i8, isize, *const u8);
let _14: bool;
let _15: char;
let _16: (i128, *mut i8, isize, *const u8);
let _17: ();
let _18: ();
{
RET = '\u{4dfbb}';
_3 = !_7;
_9.1 = !_7;
match _1 {
0 => bb1,
340282366920938463463374607431768211357 => bb3,
_ => bb2
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
_9.3 = _2 | _2;
_3 = -_7;
_9.2 = -(-1444866867_i32);
(*_5) = 19_u8 as isize;
_9.0 = _3 as f32;
_10.fld0 = [_2,_9.3,_2,_9.3,_1,_9.3,_2];
RET = '\u{78ff}';
_10.fld4.fld2 = 59044132691400144051822950052802425102_i128 as i64;
_10.fld0 = [_2,_9.3,_1,_2,_9.3,_2,_1];
_4 = _10.fld4.fld2 as isize;
_10.fld4.fld1 = _10.fld4.fld2 as f64;
_8.fld0.0 = [_9.2,_9.2,_9.2,_9.2];
_10.fld2 = [_9.2,_9.2,_9.2];
_10.fld4.fld1 = _9.0 as f64;
Call(_10.fld4.fld4.0 = core::intrinsics::bswap(4_usize), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
(*_5) = _4;
_4 = _6 | _6;
_10.fld4.fld4 = (5_usize,);
_3 = _7 + _7;
match _1 {
0 => bb2,
1 => bb5,
2 => bb6,
3 => bb7,
4 => bb8,
340282366920938463463374607431768211357 => bb10,
_ => bb9
}
}
bb5 = {
_9.3 = _2 | _2;
_3 = -_7;
_9.2 = -(-1444866867_i32);
(*_5) = 19_u8 as isize;
_9.0 = _3 as f32;
_10.fld0 = [_2,_9.3,_2,_9.3,_1,_9.3,_2];
RET = '\u{78ff}';
_10.fld4.fld2 = 59044132691400144051822950052802425102_i128 as i64;
_10.fld0 = [_2,_9.3,_1,_2,_9.3,_2,_1];
_4 = _10.fld4.fld2 as isize;
_10.fld4.fld1 = _10.fld4.fld2 as f64;
_8.fld0.0 = [_9.2,_9.2,_9.2,_9.2];
_10.fld2 = [_9.2,_9.2,_9.2];
_10.fld4.fld1 = _9.0 as f64;
Call(_10.fld4.fld4.0 = core::intrinsics::bswap(4_usize), ReturnTo(bb4), UnwindUnreachable())
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_10.fld3 = [3396243424_u32,1286907712_u32,82133057_u32,2171325636_u32,25982189_u32,3437386682_u32];
_2 = 1_u8 as i8;
_10.fld4.fld0 = _9;
_9.2 = _10.fld4.fld0.2 ^ _10.fld4.fld0.2;
_9.2 = -_10.fld4.fld0.2;
_5 = core::ptr::addr_of_mut!(_6);
_10.fld4.fld4 = (16328432557264306390_usize,);
_10.fld4.fld0 = (_9.0, _3, _9.2, _9.3);
_12 = -_10.fld4.fld1;
RET = '\u{b4cbc}';
_13.0 = !(-126991011563648350954354976596542023258_i128);
match _1 {
0 => bb7,
340282366920938463463374607431768211357 => bb12,
_ => bb11
}
}
bb11 = {
_9.3 = _2 | _2;
_3 = -_7;
_9.2 = -(-1444866867_i32);
(*_5) = 19_u8 as isize;
_9.0 = _3 as f32;
_10.fld0 = [_2,_9.3,_2,_9.3,_1,_9.3,_2];
RET = '\u{78ff}';
_10.fld4.fld2 = 59044132691400144051822950052802425102_i128 as i64;
_10.fld0 = [_2,_9.3,_1,_2,_9.3,_2,_1];
_4 = _10.fld4.fld2 as isize;
_10.fld4.fld1 = _10.fld4.fld2 as f64;
_8.fld0.0 = [_9.2,_9.2,_9.2,_9.2];
_10.fld2 = [_9.2,_9.2,_9.2];
_10.fld4.fld1 = _9.0 as f64;
Call(_10.fld4.fld4.0 = core::intrinsics::bswap(4_usize), ReturnTo(bb4), UnwindUnreachable())
}
bb12 = {
_10.fld4.fld0.2 = -_9.2;
_13.2 = (*_5) ^ (*_5);
_10.fld4.fld3 = [188404701908860242901444279133604613049_u128,273270223587943243969541705619993456999_u128,42585875134088718351742310476297821760_u128,194676563990741377132488542724269408892_u128,30721614796988235449831045740053649979_u128];
_4 = !_6;
_6 = _9.0 as isize;
_2 = _10.fld4.fld0.3 | _9.3;
_3 = _10.fld4.fld0.1 | _10.fld4.fld0.1;
(*_5) = _10.fld4.fld2 as isize;
_10.fld4.fld1 = _12;
_10.fld4.fld0 = (_9.0, _7, _9.2, _9.3);
_4 = 2984984405_u32 as isize;
_9 = (_10.fld4.fld0.0, _7, _10.fld4.fld0.2, _2);
_10.fld4.fld4.0 = !359312572201221616_usize;
Goto(bb13)
}
bb13 = {
_10.fld4.fld1 = _10.fld4.fld0.0 as f64;
(*_5) = _13.0 as isize;
_7 = _3 * _3;
_10.fld4.fld0.1 = 43177_u16 as i16;
_1 = !_9.3;
_10.fld4.fld0.1 = _7;
_16.1 = core::ptr::addr_of_mut!(_10.fld4.fld0.3);
_6 = _13.2;
_4 = _13.2 - _6;
Goto(bb14)
}
bb14 = {
(*_5) = _1 as isize;
_13.1 = core::ptr::addr_of_mut!(_2);
_10.fld4.fld0.0 = _9.0 / f32::NEG_INFINITY;
_10.fld0 = [_1,_1,_2,_1,_9.3,_2,_9.3];
RET = '\u{f8053}';
_10.fld4.fld0.0 = _9.2 as f32;
(*_5) = '\u{ab554}' as isize;
_10.fld4.fld0.0 = _7 as f32;
_2 = _1;
_8.fld0.0 = [_9.2,_9.2,_10.fld4.fld0.2,_10.fld4.fld0.2];
_10.fld0 = [_9.3,_10.fld4.fld0.3,_1,_1,_2,_1,_1];
_10.fld4.fld1 = _3 as f64;
Goto(bb15)
}
bb15 = {
Call(_17 = dump_var(Move(_3), Move(_2), Move(_1), _18), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn12(mut _1: u128,mut _2: i16,mut _3: (f32, i16, i32, i8),mut _4: i32,mut _5: i8,mut _6: u128,mut _7: i32,mut _8: i16,mut _9: f32,mut _10: usize,mut _11: usize,mut _12: u128,mut _13: i16,mut _14: i32,mut _15: (f32, i16, i32, i8),mut _16: usize) -> f64 {
mir! {
type RET = f64;
let _17: i128;
let _18: Adt58;
let _19: char;
let _20: usize;
let _21: f64;
let _22: isize;
let _23: u64;
let _24: *mut i8;
let _25: f64;
let _26: bool;
let _27: bool;
let _28: Adt61;
let _29: *mut bool;
let _30: f32;
let _31: f64;
let _32: f64;
let _33: ((f32, i16, i32, i8), bool, i16);
let _34: [u32; 8];
let _35: [u32; 8];
let _36: [u128; 5];
let _37: [u128; 5];
let _38: usize;
let _39: u128;
let _40: char;
let _41: u32;
let _42: (u32,);
let _43: Adt60;
let _44: bool;
let _45: ((f32, i16, i32, i8), bool, i16);
let _46: (bool, (i32, *mut f64, char));
let _47: f32;
let _48: isize;
let _49: char;
let _50: ();
let _51: ();
{
_9 = _3.0;
_11 = _16 >> _15.1;
RET = _16 as f64;
_3 = (_15.0, _15.1, _15.2, _5);
_4 = _7 >> _3.1;
_9 = _3.0;
_5 = 9223372036854775807_isize as i8;
_3.2 = _14 * _15.2;
RET = _11 as f64;
_4 = true as i32;
_1 = _12 % 244970844710935124427859268348652693760_u128;
_13 = _8;
_3.3 = -_15.3;
Goto(bb1)
}
bb1 = {
_3.1 = _11 as i16;
_5 = _1 as i8;
_15.1 = false as i16;
_3.3 = _5 * _5;
_13 = _3.1;
_12 = _1 >> _3.1;
_6 = false as u128;
_7 = false as i32;
_15.0 = _3.0 * _3.0;
RET = _4 as f64;
RET = 130_u8 as f64;
_7 = _3.2;
_20 = _11 + _16;
_19 = '\u{ddf96}';
_18.fld1 = [_15.2,_3.2,_3.2,_7];
_3.0 = -_9;
_3.0 = _9 / 0.000000000000000000000000000000000000003854359707928662_f32;
Goto(bb2)
}
bb2 = {
RET = _11 as f64;
_19 = '\u{563b9}';
_15.2 = _14 & _7;
_15 = (_3.0, _13, _7, _3.3);
_12 = _6 + _1;
_23 = 9641319445479450604_u64 + 17589026927026393914_u64;
_23 = 14815823321697012746_u64;
_3.2 = !_15.2;
_18.fld2 = [_19,_19,_19,_19,_19,_19,_19,_19];
_3.1 = _15.1;
_3.3 = _5;
_23 = 126_u8 as u64;
_6 = _12 % 190284481788721625941626858498475006460_u128;
_18.fld1 = [_4,_7,_3.2,_15.2];
RET = 9223372036854775807_isize as f64;
_11 = !_20;
_15 = (_9, _3.1, _7, _5);
_9 = -_15.0;
_3.1 = _13 * _15.1;
_5 = _3.3;
_22 = 9223372036854775807_isize << _15.3;
_8 = -_3.1;
_8 = -_13;
_24 = core::ptr::addr_of_mut!(_3.3);
_14 = _3.2 * _3.2;
Goto(bb3)
}
bb3 = {
_3.1 = _8 + _15.1;
_25 = _15.0 as f64;
_12 = _6;
_18.fld0 = core::ptr::addr_of_mut!(_25);
_15.0 = _3.0;
_15.3 = 21085_u16 as i8;
_28.fld5 = [639787093_u32,25488892_u32,1534194611_u32,143911083_u32,2023024148_u32,473235392_u32];
_21 = _25;
_12 = _1 + _1;
_28.fld3.fld0.fld0 = [_1,_6,_1,_6,_6];
_28.fld7 = core::ptr::addr_of_mut!(_25);
Call(RET = core::intrinsics::fmaf64(_21, _25, _25), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_21 = 3803817393615855530_i64 as f64;
_24 = core::ptr::addr_of_mut!(_28.fld6.fld0.0.3);
_15 = (_3.0, _2, _3.2, _5);
_18.fld0 = core::ptr::addr_of_mut!(_21);
_20 = _16 - _16;
Goto(bb5)
}
bb5 = {
_26 = _8 != _2;
_15 = (_9, _13, _14, _5);
_12 = !_1;
_3.1 = _8 + _8;
_3.2 = _14 << _13;
_27 = _26;
_28.fld4.1.2 = _19;
_6 = _12 ^ _1;
_28.fld5 = [1092529293_u32,726408907_u32,2856138049_u32,3634128652_u32,1704798743_u32,523701678_u32];
_28.fld5 = [1380823835_u32,2990643471_u32,3002978960_u32,2645396915_u32,2314879024_u32,346364437_u32];
Goto(bb6)
}
bb6 = {
_28.fld4.1 = (_15.2, _28.fld7, _19);
_2 = _11 as i16;
_29 = core::ptr::addr_of_mut!(_26);
_16 = !_11;
_28.fld7 = _18.fld0;
_28.fld6.fld0.0.1 = _8 & _13;
_28.fld6.fld0.0.2 = _14;
_15.3 = _5;
_28.fld6.fld0.2 = -_28.fld6.fld0.0.1;
_28.fld3.fld0.fld0 = [_1,_6,_6,_6,_12];
_15.2 = _28.fld6.fld0.0.2;
_11 = 196004227_u32 as usize;
_25 = -_21;
_23 = 2567172253849021852_u64;
_28.fld6.fld0.0.1 = _15.1;
_2 = _15.1;
_2 = _22 as i16;
_11 = 56366_u16 as usize;
_29 = core::ptr::addr_of_mut!(_28.fld4.0);
_28.fld6.fld1 = _25 as u16;
_19 = _28.fld4.1.2;
_28.fld3.fld1 = _22 as f32;
_10 = _11;
_32 = _21;
_19 = _28.fld4.1.2;
_28.fld4.1.2 = _19;
_3 = _15;
match _23 {
0 => bb2,
1 => bb7,
2 => bb8,
2567172253849021852 => bb10,
_ => bb9
}
}
bb7 = {
RET = _11 as f64;
_19 = '\u{563b9}';
_15.2 = _14 & _7;
_15 = (_3.0, _13, _7, _3.3);
_12 = _6 + _1;
_23 = 9641319445479450604_u64 + 17589026927026393914_u64;
_23 = 14815823321697012746_u64;
_3.2 = !_15.2;
_18.fld2 = [_19,_19,_19,_19,_19,_19,_19,_19];
_3.1 = _15.1;
_3.3 = _5;
_23 = 126_u8 as u64;
_6 = _12 % 190284481788721625941626858498475006460_u128;
_18.fld1 = [_4,_7,_3.2,_15.2];
RET = 9223372036854775807_isize as f64;
_11 = !_20;
_15 = (_9, _3.1, _7, _5);
_9 = -_15.0;
_3.1 = _13 * _15.1;
_5 = _3.3;
_22 = 9223372036854775807_isize << _15.3;
_8 = -_3.1;
_8 = -_13;
_24 = core::ptr::addr_of_mut!(_3.3);
_14 = _3.2 * _3.2;
Goto(bb3)
}
bb8 = {
_21 = 3803817393615855530_i64 as f64;
_24 = core::ptr::addr_of_mut!(_28.fld6.fld0.0.3);
_15 = (_3.0, _2, _3.2, _5);
_18.fld0 = core::ptr::addr_of_mut!(_21);
_20 = _16 - _16;
Goto(bb5)
}
bb9 = {
_3.1 = _8 + _15.1;
_25 = _15.0 as f64;
_12 = _6;
_18.fld0 = core::ptr::addr_of_mut!(_25);
_15.0 = _3.0;
_15.3 = 21085_u16 as i8;
_28.fld5 = [639787093_u32,25488892_u32,1534194611_u32,143911083_u32,2023024148_u32,473235392_u32];
_21 = _25;
_12 = _1 + _1;
_28.fld3.fld0.fld0 = [_1,_6,_1,_6,_6];
_28.fld7 = core::ptr::addr_of_mut!(_25);
Call(RET = core::intrinsics::fmaf64(_21, _25, _25), ReturnTo(bb4), UnwindUnreachable())
}
bb10 = {
_28.fld0 = _28.fld6.fld1;
_16 = !_20;
_34 = [2670245047_u32,1587993432_u32,1893153294_u32,1146676914_u32,1273090108_u32,1914758964_u32,3885155444_u32,1726972414_u32];
(*_29) = _26;
_28.fld6.fld0.0.3 = _3.3 & _5;
_33.0 = _15;
_28.fld4.0 = !_27;
_28.fld6.fld0.0.1 = 877563627183927863_i64 as i16;
_3.3 = !_28.fld6.fld0.0.3;
_24 = core::ptr::addr_of_mut!(_33.0.3);
_28.fld6.fld0 = (_3, (*_29), _2);
_28.fld6.fld1 = _22 as u16;
_28.fld1 = 934046464_u32;
_28.fld4.1 = (_14, _28.fld7, _19);
_33.0.3 = _28.fld6.fld0.0.3;
_33.0.1 = _28.fld6.fld0.2 * _28.fld6.fld0.2;
_15.3 = (-101130565692861861257147216855209679149_i128) as i8;
_16 = _28.fld1 as usize;
match _23 {
0 => bb6,
1 => bb2,
2 => bb9,
3 => bb4,
4 => bb5,
5 => bb11,
2567172253849021852 => bb13,
_ => bb12
}
}
bb11 = {
_3.1 = _8 + _15.1;
_25 = _15.0 as f64;
_12 = _6;
_18.fld0 = core::ptr::addr_of_mut!(_25);
_15.0 = _3.0;
_15.3 = 21085_u16 as i8;
_28.fld5 = [639787093_u32,25488892_u32,1534194611_u32,143911083_u32,2023024148_u32,473235392_u32];
_21 = _25;
_12 = _1 + _1;
_28.fld3.fld0.fld0 = [_1,_6,_1,_6,_6];
_28.fld7 = core::ptr::addr_of_mut!(_25);
Call(RET = core::intrinsics::fmaf64(_21, _25, _25), ReturnTo(bb4), UnwindUnreachable())
}
bb12 = {
_3.1 = _11 as i16;
_5 = _1 as i8;
_15.1 = false as i16;
_3.3 = _5 * _5;
_13 = _3.1;
_12 = _1 >> _3.1;
_6 = false as u128;
_7 = false as i32;
_15.0 = _3.0 * _3.0;
RET = _4 as f64;
RET = 130_u8 as f64;
_7 = _3.2;
_20 = _11 + _16;
_19 = '\u{ddf96}';
_18.fld1 = [_15.2,_3.2,_3.2,_7];
_3.0 = -_9;
_3.0 = _9 / 0.000000000000000000000000000000000000003854359707928662_f32;
Goto(bb2)
}
bb13 = {
_11 = _16;
_34 = [_28.fld1,_28.fld1,_28.fld1,_28.fld1,_28.fld1,_28.fld1,_28.fld1,_28.fld1];
_45.0.1 = _20 as i16;
_41 = !_28.fld1;
_16 = _8 as usize;
_3.3 = (*_24) - _28.fld6.fld0.0.3;
_28.fld4.1.2 = _19;
_27 = !(*_29);
_28.fld6.fld0.1 = _3.1 <= _13;
_33 = _28.fld6.fld0;
_43.fld1.0.0 = _9;
_3.1 = _23 as i16;
_45.0.0 = -_33.0.0;
_42.0 = _28.fld3.fld1 as u32;
_43.fld1.0.1 = _33.2;
_28.fld6.fld0.0.2 = _12 as i32;
_11 = !_10;
_43.fld6.1 = _45.0.0;
Goto(bb14)
}
bb14 = {
_43.fld6.2 = _3.2 != _33.0.2;
_15 = (_33.0.0, _2, _33.0.2, (*_24));
_46 = ((*_29), _28.fld4.1);
_43.fld1.0 = (_28.fld3.fld1, _33.0.1, _46.1.0, _33.0.3);
(*_29) = !_28.fld6.fld0.1;
_43.fld1.0.2 = _3.2;
_45.0.2 = (*_29) as i32;
_20 = _16 + _16;
_45.0.0 = _28.fld4.1.0 as f32;
_28.fld1 = _41 - _42.0;
_28.fld0 = _28.fld6.fld1;
_43.fld0.2 = _7 + _14;
_45 = _28.fld6.fld0;
Goto(bb15)
}
bb15 = {
Call(_50 = dump_var(Move(_20), Move(_26), Move(_16), Move(_5)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_50 = dump_var(Move(_42), Move(_11), Move(_19), Move(_8)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_50 = dump_var(Move(_7), Move(_12), Move(_23), _51), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn13(mut _1: f32,mut _2: char,mut _3: [char; 8],mut _4: isize,mut _5: i16,mut _6: isize,mut _7: *const i32,mut _8: char,mut _9: Adt59,mut _10: i64,mut _11: *mut i8,mut _12: isize,mut _13: u8,mut _14: isize,mut _15: isize,mut _16: *const u8) -> Adt61 {
mir! {
type RET = Adt61;
let _17: (usize,);
let _18: (char,);
let _19: isize;
let _20: usize;
let _21: [u128; 5];
let _22: isize;
let _23: u32;
let _24: u128;
let _25: u128;
let _26: isize;
let _27: Adt58;
let _28: i8;
let _29: ();
let _30: ();
{
_16 = core::ptr::addr_of!(_13);
_9.fld2 = _7;
RET.fld4.1.2 = _8;
RET.fld2 = _12 ^ _12;
(*_16) = _9.fld1.0 as u8;
(*_16) = (*_11) as u8;
RET.fld6.fld0.0 = (_1, _5, (-2093751138_i32), (*_11));
_9.fld2 = _7;
_9.fld1.1 = core::ptr::addr_of_mut!((*_11));
_10 = !1625329656896659222_i64;
_2 = _8;
RET.fld1 = 1138898271_u32;
_9.fld1.3 = core::ptr::addr_of!((*_16));
_9.fld1.2 = _4 - _15;
RET.fld6.fld0.0.1 = _5 << _12;
RET.fld6.fld1 = 38363_u16 % 61033_u16;
_7 = _9.fld2;
RET.fld3.fld1 = _1 / 1_f32;
RET.fld6.fld0.0 = (_1, _5, (-1444625481_i32), (*_11));
RET.fld6.fld0.1 = !false;
RET.fld6.fld0.0.2 = 35209_u16 as i32;
RET.fld6.fld0.0.1 = _5;
RET.fld6.fld0.0.0 = _1 + _1;
Goto(bb1)
}
bb1 = {
_18.0 = _8;
RET.fld6.fld0.2 = _5;
RET.fld6.fld0.0.2 = (-1167087218_i32) | 121574202_i32;
_10 = (*_11) as i64;
_17.0 = _9.fld0.0;
_22 = _4 ^ _14;
RET.fld0 = 164182307061508883941161884084197341318_u128 as u16;
RET.fld4.0 = false;
_21 = [3390365191268355562775842536638033670_u128,250660597426798873914853608283380108638_u128,227586342048372247327020609716838308580_u128,19764007280069598239353453284965246511_u128,167302133165473649687903256670898362376_u128];
RET.fld6.fld0.0 = (_1, _5, 1552035829_i32, (*_11));
RET.fld3.fld0.fld0 = [289844529286611733579274076214992590476_u128,226400273031356612610684242952290573985_u128,216522195284627542194414789252257153386_u128,287025697958354191924211044312101807206_u128,160666639799471685966221919235531187037_u128];
RET.fld3.fld0 = Adt51 { fld0: _21 };
RET.fld1 = 950261979_u32 * 3633717717_u32;
_7 = _9.fld2;
(*_11) = (-120_i8) + (-40_i8);
_18 = (_8,);
_23 = !1264219044_u32;
RET.fld6.fld0.0 = (_1, _9.fld3, (-420410016_i32), (*_11));
RET.fld6.fld0.0.1 = _9.fld1.0 as i16;
_13 = !95_u8;
RET.fld2 = _14;
_8 = _2;
Call(RET = fn14(_10, _9.fld2, _9), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
RET.fld4.1.0 = -(-1875923368_i32);
RET.fld6.fld0.2 = _5;
RET.fld6.fld0.0.1 = !_9.fld3;
_3 = [_18.0,_8,_18.0,_18.0,_2,_8,_8,_2];
RET.fld2 = _12;
_9.fld1.0 = 165027803451141000977179381430405573005_i128;
_3 = [_18.0,_18.0,_8,_18.0,_8,_18.0,_18.0,_18.0];
RET.fld4.0 = true;
_16 = core::ptr::addr_of!((*_16));
RET.fld4.0 = false;
Goto(bb3)
}
bb3 = {
Call(_29 = dump_var(Move(_4), Move(_18), Move(_21), Move(_5)), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
Call(_29 = dump_var(Move(_3), Move(_15), Move(_22), Move(_12)), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn14(mut _1: i64,mut _2: *const i32,mut _3: Adt59) -> Adt61 {
mir! {
type RET = Adt61;
let _4: *const i32;
let _5: isize;
let _6: Adt63;
let _7: *const (f32, i16, i32, i8);
let _8: Adt52;
let _9: char;
let _10: isize;
let _11: *const ((f32, i16, i32, i8), bool, i16);
let _12: u32;
let _13: bool;
let _14: Adt59;
let _15: char;
let _16: [i32; 4];
let _17: [i8; 7];
let _18: Adt47;
let _19: i32;
let _20: Adt53;
let _21: (i64, i64, usize, *mut i8, *mut isize);
let _22: bool;
let _23: Adt48;
let _24: i128;
let _25: Adt57;
let _26: isize;
let _27: Adt49;
let _28: usize;
let _29: ();
let _30: ();
{
RET.fld1 = 1958693851_u32 >> _1;
RET.fld6.fld0.2 = _3.fld3 | _3.fld3;
RET.fld4.1.0 = -(-2139302424_i32);
RET.fld4.1.0 = 4558868418776436739_u64 as i32;
RET.fld6.fld0.2 = (-7_i8) as i16;
RET.fld6.fld0.0.3 = 111_i8 | 111_i8;
RET.fld4.1.2 = '\u{8c66c}';
RET.fld6.fld0.0.3 = -(-27_i8);
RET.fld5 = [801041674_u32,1318804671_u32,1445563297_u32,1961178548_u32,2275685705_u32,880554543_u32];
RET.fld0 = 30317_u16 / 46491_u16;
RET.fld6.fld1 = 52639_u16;
RET.fld6.fld0.0.3 = 1323653321626418537_u64 as i8;
RET.fld4.1.2 = '\u{38c2c}';
_3.fld1.0 = (-29300871229634873089338927711150076127_i128) & 104561412859960922198759214698481618695_i128;
_3.fld1.0 = (-120058976104338722381761042738220603394_i128);
_4 = _2;
RET.fld0 = 9537_u16;
RET.fld4.1.0 = -392008770_i32;
_3.fld1.2 = (-9223372036854775808_isize) << _3.fld0.0;
RET.fld6.fld0.0.0 = _3.fld0.0 as f32;
_4 = _2;
RET.fld4.1.0 = -949840956_i32;
_3.fld1.0 = -18060334649257640338064478218529917140_i128;
RET.fld5 = [3493639071_u32,2275353030_u32,2479283222_u32,1015945605_u32,1869130085_u32,3667337345_u32];
Goto(bb1)
}
bb1 = {
_3.fld1.2 = 9223372036854775807_isize;
RET.fld4.0 = true | true;
RET.fld3.fld1 = 291938907080480800051732158287387342175_u128 as f32;
_5 = _3.fld1.0 as isize;
_4 = core::ptr::addr_of!(_6.fld0.fld0.0.2);
RET.fld6.fld0.0.1 = 1068297035_i32 as i16;
RET.fld2 = 1375083478_u32 as isize;
(*_4) = false as i32;
RET.fld1 = !2497200728_u32;
_3.fld3 = (-10103_i16);
_3.fld3 = (-2971_i16) << _3.fld0.0;
RET.fld3.fld0.fld0 = [45008439019876506487376323314846414295_u128,58349250127129667019130795898634994779_u128,176320338434798501422085514499128796847_u128,161901518751649679838283808398157487751_u128,212213995473828546189882967854593444708_u128];
_6.fld0.fld1 = _1 as u16;
_3.fld0 = (4488228430538031955_usize,);
RET.fld5 = [1066671507_u32,139379104_u32,1474639985_u32,1699858067_u32,1229123829_u32,3521259553_u32];
_6.fld0.fld0.0.3 = -(-36_i8);
RET.fld4.1.2 = '\u{a620}';
_3.fld2 = core::ptr::addr_of!(_6.fld0.fld0.0.2);
RET.fld6.fld0.0.3 = _1 as i8;
RET.fld6.fld0.0.2 = !_6.fld0.fld0.0.2;
match _3.fld0.0 {
0 => bb2,
4488228430538031955 => bb4,
_ => bb3
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
RET.fld4.1.2 = '\u{dde84}';
RET.fld5 = [79636918_u32,2041107518_u32,3892251656_u32,1666243878_u32,1855243549_u32,821282691_u32];
RET.fld2 = '\u{cd3bb}' as isize;
RET.fld6.fld0.0.2 = (*_4) - _6.fld0.fld0.0.2;
RET.fld6.fld0.1 = _3.fld3 <= _3.fld3;
_5 = _3.fld1.2;
RET.fld6.fld1 = !_6.fld0.fld1;
RET.fld3.fld1 = _3.fld3 as f32;
_5 = (*_4) as isize;
(*_4) = -1526644579_i32;
_3.fld3 = (-4374_i16) >> _3.fld1.0;
_6.fld0.fld0.0.1 = !_3.fld3;
_8.fld2 = [(*_4),(*_4),(*_4)];
RET.fld6.fld0.0.2 = true as i32;
RET.fld6.fld0.2 = _6.fld0.fld0.0.1 + _3.fld3;
RET.fld6.fld0.1 = true;
_6.fld0.fld0.2 = _6.fld0.fld0.0.1;
_6.fld0.fld0.2 = _3.fld3 & _3.fld3;
RET.fld4.1.1 = core::ptr::addr_of_mut!(_8.fld4.fld1);
Goto(bb5)
}
bb5 = {
_6.fld0.fld0.0.0 = 226_u8 as f32;
RET.fld4.1.0 = !_6.fld0.fld0.0.2;
_6.fld0.fld0.1 = !false;
RET.fld6.fld0.2 = _6.fld0.fld0.2 * _6.fld0.fld0.2;
_8.fld3 = [546242573_u32,2087917172_u32,3379356614_u32,1526252999_u32,1684157699_u32,3563024163_u32];
_8.fld0 = [_6.fld0.fld0.0.3,_6.fld0.fld0.0.3,_6.fld0.fld0.0.3,_6.fld0.fld0.0.3,_6.fld0.fld0.0.3,_6.fld0.fld0.0.3,_6.fld0.fld0.0.3];
RET.fld6.fld1 = !_6.fld0.fld1;
RET.fld4.1.1 = core::ptr::addr_of_mut!(_8.fld4.fld1);
RET.fld5 = [1897173095_u32,1865692932_u32,4238926291_u32,3207981224_u32,666218160_u32,1559262285_u32];
_3.fld3 = 1515267780_u32 as i16;
RET.fld3.fld1 = _6.fld0.fld0.0.0;
RET.fld2 = _5 >> _3.fld0.0;
RET.fld7 = core::ptr::addr_of_mut!(_8.fld4.fld1);
RET.fld6.fld0.0 = (_6.fld0.fld0.0.0, _6.fld0.fld0.2, (*_4), _6.fld0.fld0.0.3);
RET.fld1 = 1698857269_u32 * 1779145296_u32;
RET.fld4.1.1 = core::ptr::addr_of_mut!(_8.fld4.fld1);
RET.fld6.fld1 = 109_u8 as u16;
_8.fld1 = _3.fld1.3;
_12 = 3164120591_u32;
_9 = '\u{91adf}';
_8.fld4.fld0.2 = (*_4) + _6.fld0.fld0.0.2;
Call(_8.fld4.fld0.0 = fn15(_3.fld2, _3, _12, _3.fld0, _3.fld1.2, _4, (*_4), _3.fld1.1), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
_5 = _3.fld1.2 - _3.fld1.2;
_6.fld0.fld0.0.0 = -_8.fld4.fld0.0;
_8.fld4.fld0.0 = -_6.fld0.fld0.0.0;
_3.fld1.0 = _3.fld1.2 as i128;
_14.fld0 = _3.fld0;
_10 = _3.fld1.2 - _3.fld1.2;
RET.fld4.1.1 = core::ptr::addr_of_mut!(_8.fld4.fld1);
RET.fld0 = _6.fld0.fld1;
_13 = _6.fld0.fld0.1;
RET.fld4.1.0 = (*_4);
RET.fld6.fld0.0.3 = 89083701888572135408792940622410059563_u128 as i8;
_14.fld3 = _6.fld0.fld0.2;
_14.fld2 = core::ptr::addr_of!(_6.fld0.fld0.0.2);
_13 = _5 > _10;
_10 = _6.fld0.fld0.0.3 as isize;
_6.fld0.fld0.0.1 = -_3.fld3;
match _12 {
0 => bb4,
1 => bb7,
2 => bb8,
3164120591 => bb10,
_ => bb9
}
}
bb7 = {
Return()
}
bb8 = {
RET.fld4.1.2 = '\u{dde84}';
RET.fld5 = [79636918_u32,2041107518_u32,3892251656_u32,1666243878_u32,1855243549_u32,821282691_u32];
RET.fld2 = '\u{cd3bb}' as isize;
RET.fld6.fld0.0.2 = (*_4) - _6.fld0.fld0.0.2;
RET.fld6.fld0.1 = _3.fld3 <= _3.fld3;
_5 = _3.fld1.2;
RET.fld6.fld1 = !_6.fld0.fld1;
RET.fld3.fld1 = _3.fld3 as f32;
_5 = (*_4) as isize;
(*_4) = -1526644579_i32;
_3.fld3 = (-4374_i16) >> _3.fld1.0;
_6.fld0.fld0.0.1 = !_3.fld3;
_8.fld2 = [(*_4),(*_4),(*_4)];
RET.fld6.fld0.0.2 = true as i32;
RET.fld6.fld0.2 = _6.fld0.fld0.0.1 + _3.fld3;
RET.fld6.fld0.1 = true;
_6.fld0.fld0.2 = _6.fld0.fld0.0.1;
_6.fld0.fld0.2 = _3.fld3 & _3.fld3;
RET.fld4.1.1 = core::ptr::addr_of_mut!(_8.fld4.fld1);
Goto(bb5)
}
bb9 = {
_3.fld1.2 = 9223372036854775807_isize;
RET.fld4.0 = true | true;
RET.fld3.fld1 = 291938907080480800051732158287387342175_u128 as f32;
_5 = _3.fld1.0 as isize;
_4 = core::ptr::addr_of!(_6.fld0.fld0.0.2);
RET.fld6.fld0.0.1 = 1068297035_i32 as i16;
RET.fld2 = 1375083478_u32 as isize;
(*_4) = false as i32;
RET.fld1 = !2497200728_u32;
_3.fld3 = (-10103_i16);
_3.fld3 = (-2971_i16) << _3.fld0.0;
RET.fld3.fld0.fld0 = [45008439019876506487376323314846414295_u128,58349250127129667019130795898634994779_u128,176320338434798501422085514499128796847_u128,161901518751649679838283808398157487751_u128,212213995473828546189882967854593444708_u128];
_6.fld0.fld1 = _1 as u16;
_3.fld0 = (4488228430538031955_usize,);
RET.fld5 = [1066671507_u32,139379104_u32,1474639985_u32,1699858067_u32,1229123829_u32,3521259553_u32];
_6.fld0.fld0.0.3 = -(-36_i8);
RET.fld4.1.2 = '\u{a620}';
_3.fld2 = core::ptr::addr_of!(_6.fld0.fld0.0.2);
RET.fld6.fld0.0.3 = _1 as i8;
RET.fld6.fld0.0.2 = !_6.fld0.fld0.0.2;
match _3.fld0.0 {
0 => bb2,
4488228430538031955 => bb4,
_ => bb3
}
}
bb10 = {
_14.fld2 = _2;
RET.fld7 = core::ptr::addr_of_mut!(_8.fld4.fld1);
_3.fld1.0 = 14297470256749123301080011976889094567_i128;
Goto(bb11)
}
bb11 = {
_8.fld4.fld0.2 = _3.fld0.0 as i32;
_8.fld4.fld2 = _1;
_14.fld3 = _6.fld0.fld0.2;
_18.fld0 = [_12,_12,_12,_12,_12,_12,_12,_12];
_15 = _9;
_7 = core::ptr::addr_of!(_6.fld0.fld0.0);
_14.fld1.3 = _3.fld1.3;
RET.fld3.fld0.fld0 = [59268934947844425514547753767024089683_u128,254975787766916259390162007442572176843_u128,151150799718716467482820881352662394025_u128,176061717999993029062277999987594947491_u128,78282179945498380661838676333795923349_u128];
RET.fld6 = Adt56 { fld0: _6.fld0.fld0,fld1: _6.fld0.fld1 };
RET.fld6.fld0.2 = _6.fld0.fld0.2 & (*_7).1;
_8.fld4.fld0 = (_6.fld0.fld0.0.0, _14.fld3, (*_7).2, (*_7).3);
_14.fld1 = (_3.fld1.0, _3.fld1.1, _5, _3.fld1.3);
(*_4) = _8.fld4.fld0.2 + _8.fld4.fld0.2;
RET.fld6 = _6.fld0;
_3.fld2 = core::ptr::addr_of!(_6.fld0.fld0.0.2);
_6.fld0.fld0.0.1 = _8.fld4.fld0.1;
RET.fld6.fld0.2 = !_8.fld4.fld0.1;
_8.fld4.fld0 = (*_7);
_11 = core::ptr::addr_of!(_6.fld0.fld0);
RET.fld6.fld0.0 = (_8.fld4.fld0.0, (*_11).0.1, _6.fld0.fld0.0.2, (*_7).3);
_15 = _9;
(*_11).2 = (*_7).1;
(*_7).3 = _8.fld4.fld0.3 - _8.fld4.fld0.3;
(*_7).0 = _8.fld4.fld0.0 + _8.fld4.fld0.0;
_14.fld1.0 = _3.fld1.0;
(*_7).3 = -_8.fld4.fld0.3;
RET.fld5 = [_12,_12,_12,_12,_12,_12];
_1 = _8.fld4.fld2 << (*_11).0.1;
Goto(bb12)
}
bb12 = {
(*_4) = _13 as i32;
_8.fld1 = _14.fld1.3;
RET.fld6.fld0.0 = (_8.fld4.fld0.0, (*_11).0.1, (*_11).0.2, (*_7).3);
RET.fld3.fld0.fld0 = [314349223404758860845462898256245857902_u128,140218155630894484925443728342500219108_u128,42573220193880242244508861124463088824_u128,198621865459970439137397929732476302569_u128,317653495009458437168343291706287380686_u128];
(*_11).0.2 = _8.fld4.fld0.2;
_8.fld4.fld0.3 = (*_11).0.1 as i8;
_8.fld4.fld1 = 7043798306604321111_u64 as f64;
RET.fld5 = _8.fld3;
_21.3 = core::ptr::addr_of_mut!((*_7).3);
_6.fld0.fld0.0.3 = _8.fld4.fld0.3;
_8.fld4.fld3 = [158265466308981562546554683736973378024_u128,249200195944428563587551679195446964389_u128,145366346070538860680833573392709891522_u128,114365956161454864933499188907375055707_u128,300810826190931127517051671430696141319_u128];
RET.fld3.fld1 = _8.fld4.fld0.0 - _8.fld4.fld0.0;
_21.0 = 99_u8 as i64;
_11 = core::ptr::addr_of!((*_11));
RET.fld5 = _8.fld3;
_16 = [(*_7).2,(*_7).2,(*_4),_8.fld4.fld0.2];
_21.3 = core::ptr::addr_of_mut!((*_7).3);
RET.fld6.fld1 = _6.fld0.fld1 + _6.fld0.fld1;
RET.fld6.fld0 = ((*_7), (*_11).1, (*_11).0.1);
RET.fld3.fld0 = Adt51 { fld0: _8.fld4.fld3 };
RET.fld4.1.1 = core::ptr::addr_of_mut!(_8.fld4.fld1);
(*_11).1 = _13 ^ _13;
(*_7).1 = _3.fld3 + _8.fld4.fld0.1;
RET.fld3.fld0 = Adt51 { fld0: _8.fld4.fld3 };
_2 = core::ptr::addr_of!((*_11).0.2);
(*_11).2 = (*_7).1 | (*_7).1;
RET.fld6.fld0.0 = (_6.fld0.fld0.0.0, _14.fld3, (*_4), _6.fld0.fld0.0.3);
match _3.fld0.0 {
0 => bb3,
1 => bb8,
2 => bb13,
3 => bb14,
4488228430538031955 => bb16,
_ => bb15
}
}
bb13 = {
_3.fld1.2 = 9223372036854775807_isize;
RET.fld4.0 = true | true;
RET.fld3.fld1 = 291938907080480800051732158287387342175_u128 as f32;
_5 = _3.fld1.0 as isize;
_4 = core::ptr::addr_of!(_6.fld0.fld0.0.2);
RET.fld6.fld0.0.1 = 1068297035_i32 as i16;
RET.fld2 = 1375083478_u32 as isize;
(*_4) = false as i32;
RET.fld1 = !2497200728_u32;
_3.fld3 = (-10103_i16);
_3.fld3 = (-2971_i16) << _3.fld0.0;
RET.fld3.fld0.fld0 = [45008439019876506487376323314846414295_u128,58349250127129667019130795898634994779_u128,176320338434798501422085514499128796847_u128,161901518751649679838283808398157487751_u128,212213995473828546189882967854593444708_u128];
_6.fld0.fld1 = _1 as u16;
_3.fld0 = (4488228430538031955_usize,);
RET.fld5 = [1066671507_u32,139379104_u32,1474639985_u32,1699858067_u32,1229123829_u32,3521259553_u32];
_6.fld0.fld0.0.3 = -(-36_i8);
RET.fld4.1.2 = '\u{a620}';
_3.fld2 = core::ptr::addr_of!(_6.fld0.fld0.0.2);
RET.fld6.fld0.0.3 = _1 as i8;
RET.fld6.fld0.0.2 = !_6.fld0.fld0.0.2;
match _3.fld0.0 {
0 => bb2,
4488228430538031955 => bb4,
_ => bb3
}
}
bb14 = {
RET.fld4.1.2 = '\u{dde84}';
RET.fld5 = [79636918_u32,2041107518_u32,3892251656_u32,1666243878_u32,1855243549_u32,821282691_u32];
RET.fld2 = '\u{cd3bb}' as isize;
RET.fld6.fld0.0.2 = (*_4) - _6.fld0.fld0.0.2;
RET.fld6.fld0.1 = _3.fld3 <= _3.fld3;
_5 = _3.fld1.2;
RET.fld6.fld1 = !_6.fld0.fld1;
RET.fld3.fld1 = _3.fld3 as f32;
_5 = (*_4) as isize;
(*_4) = -1526644579_i32;
_3.fld3 = (-4374_i16) >> _3.fld1.0;
_6.fld0.fld0.0.1 = !_3.fld3;
_8.fld2 = [(*_4),(*_4),(*_4)];
RET.fld6.fld0.0.2 = true as i32;
RET.fld6.fld0.2 = _6.fld0.fld0.0.1 + _3.fld3;
RET.fld6.fld0.1 = true;
_6.fld0.fld0.2 = _6.fld0.fld0.0.1;
_6.fld0.fld0.2 = _3.fld3 & _3.fld3;
RET.fld4.1.1 = core::ptr::addr_of_mut!(_8.fld4.fld1);
Goto(bb5)
}
bb15 = {
_3.fld1.2 = 9223372036854775807_isize;
RET.fld4.0 = true | true;
RET.fld3.fld1 = 291938907080480800051732158287387342175_u128 as f32;
_5 = _3.fld1.0 as isize;
_4 = core::ptr::addr_of!(_6.fld0.fld0.0.2);
RET.fld6.fld0.0.1 = 1068297035_i32 as i16;
RET.fld2 = 1375083478_u32 as isize;
(*_4) = false as i32;
RET.fld1 = !2497200728_u32;
_3.fld3 = (-10103_i16);
_3.fld3 = (-2971_i16) << _3.fld0.0;
RET.fld3.fld0.fld0 = [45008439019876506487376323314846414295_u128,58349250127129667019130795898634994779_u128,176320338434798501422085514499128796847_u128,161901518751649679838283808398157487751_u128,212213995473828546189882967854593444708_u128];
_6.fld0.fld1 = _1 as u16;
_3.fld0 = (4488228430538031955_usize,);
RET.fld5 = [1066671507_u32,139379104_u32,1474639985_u32,1699858067_u32,1229123829_u32,3521259553_u32];
_6.fld0.fld0.0.3 = -(-36_i8);
RET.fld4.1.2 = '\u{a620}';
_3.fld2 = core::ptr::addr_of!(_6.fld0.fld0.0.2);
RET.fld6.fld0.0.3 = _1 as i8;
RET.fld6.fld0.0.2 = !_6.fld0.fld0.0.2;
match _3.fld0.0 {
0 => bb2,
4488228430538031955 => bb4,
_ => bb3
}
}
bb16 = {
_8.fld1 = _14.fld1.3;
_9 = _15;
(*_11).2 = (*_7).1 + (*_11).0.1;
_25.fld2.0.3 = _6.fld0.fld0.0.3;
RET.fld6.fld0.0.3 = _15 as i8;
RET.fld6.fld0.0.2 = _6.fld0.fld1 as i32;
_17 = [(*_7).3,_8.fld4.fld0.3,_25.fld2.0.3,(*_7).3,(*_11).0.3,(*_7).3,(*_7).3];
_21.1 = _1 + _1;
_21.4 = core::ptr::addr_of_mut!(_3.fld1.2);
_1 = _21.1;
_25.fld2.0.2 = (*_2);
RET.fld6.fld0.0.3 = _25.fld2.0.3;
_22 = _6.fld0.fld0.1 & (*_11).1;
_8.fld4.fld0.1 = (*_11).2;
_24 = _3.fld1.0;
_25.fld3 = core::ptr::addr_of_mut!(_7);
_27.fld2.fld0.0 = [_25.fld2.0.2,(*_4),(*_4),(*_2)];
(*_11).0.1 = _6.fld0.fld0.2;
(*_7).1 = _8.fld4.fld0.1 * _6.fld0.fld0.2;
_25.fld0 = core::ptr::addr_of_mut!(_8.fld4.fld1);
_8.fld3 = [_12,_12,_12,_12,_12,_12];
_8.fld4.fld4.0 = _3.fld0.0;
_20.fld0 = Adt51 { fld0: _8.fld4.fld3 };
RET.fld6.fld0.0.0 = _8.fld4.fld1 as f32;
Goto(bb17)
}
bb17 = {
Call(_29 = dump_var(Move(_16), Move(_13), Move(_15), Move(_1)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_29 = dump_var(Move(_5), _30, _30, _30), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn15(mut _1: *const i32,mut _2: Adt59,mut _3: u32,mut _4: (usize,),mut _5: isize,mut _6: *const i32,mut _7: i32,mut _8: *mut i8) -> f32 {
mir! {
type RET = f32;
let _9: ((f32, i16, i32, i8), bool, i16);
let _10: i64;
let _11: isize;
let _12: [u32; 6];
let _13: usize;
let _14: Adt47;
let _15: isize;
let _16: char;
let _17: Adt54;
let _18: f64;
let _19: (i32, *mut f64, char);
let _20: Adt58;
let _21: f64;
let _22: (usize,);
let _23: *mut bool;
let _24: [u32; 6];
let _25: ((f32, i16, i32, i8), u128);
let _26: ();
let _27: ();
{
(*_8) = !(-108_i8);
_2.fld1.0 = 35323960664180104841444763412254728901_i128;
_2.fld1.2 = _5 >> (*_8);
_1 = _6;
(*_8) = 123_i8;
_2.fld0 = (_4.0,);
(*_6) = !_7;
_9.0.2 = (*_6) ^ (*_6);
_2.fld1.2 = -_5;
_3 = !1881582558_u32;
_9.0.0 = _2.fld1.2 as f32;
_8 = core::ptr::addr_of_mut!((*_8));
_1 = core::ptr::addr_of!((*_1));
RET = -_9.0.0;
_2.fld2 = core::ptr::addr_of!((*_6));
_10 = _2.fld1.2 as i64;
_4.0 = !_2.fld0.0;
_8 = core::ptr::addr_of_mut!(_9.0.3);
RET = _2.fld3 as f32;
_7 = (*_6);
(*_8) = 40387_u16 as i8;
_2.fld0.0 = !_4.0;
_9.2 = 10_u16 as i16;
_12 = [_3,_3,_3,_3,_3,_3];
_12 = [_3,_3,_3,_3,_3,_3];
_6 = core::ptr::addr_of!(_7);
_2.fld0 = (_4.0,);
Goto(bb1)
}
bb1 = {
_2.fld1.1 = core::ptr::addr_of_mut!((*_8));
_2.fld3 = _3 as i16;
_11 = !_5;
(*_8) = 51_i8;
_12 = [_3,_3,_3,_3,_3,_3];
_1 = _6;
_2.fld1.1 = core::ptr::addr_of_mut!((*_8));
_2.fld2 = _1;
_9.0.3 = !34_i8;
_4.0 = 75_u8 as usize;
match _5 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
9223372036854775807 => bb9,
_ => bb8
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
(*_1) = _9.0.0 as i32;
_14.fld1 = [_9.0.2,_9.0.2,(*_1),(*_1)];
_14.fld0 = [_3,_3,_3,_3,_3,_3,_3,_3];
_9.0.1 = _11 as i16;
_13 = _2.fld0.0 * _2.fld0.0;
_2.fld1.1 = _8;
_2.fld2 = core::ptr::addr_of!(_9.0.2);
_14.fld0 = [_3,_3,_3,_3,_3,_3,_3,_3];
Goto(bb10)
}
bb10 = {
_17.fld4 = _6;
_7 = _9.0.2;
_2.fld0 = (_13,);
RET = _9.0.0 - _9.0.0;
_17.fld5 = (_3,);
_5 = _11;
_2.fld1.0 = (-65434846014601331368971086952525142444_i128);
_3 = _17.fld5.0 * _17.fld5.0;
_18 = 85_u8 as f64;
_2.fld0.0 = _13 | _13;
_2.fld0.0 = '\u{93662}' as usize;
_6 = _17.fld4;
_7 = _18 as i32;
_18 = 52006_u16 as f64;
_17.fld4 = core::ptr::addr_of!(_9.0.2);
_1 = _2.fld2;
_2.fld3 = _9.0.1;
(*_1) = !_7;
_14.fld2 = _10 & _10;
_19.0 = 116_u8 as i32;
_19.1 = core::ptr::addr_of_mut!(_21);
_20.fld1 = _14.fld1;
_17.fld2 = 3975852440968773706_u64;
_13 = 37737_u16 as usize;
_22.0 = _11 as usize;
_9.0.1 = _17.fld2 as i16;
match _17.fld2 {
0 => bb9,
1 => bb8,
2 => bb11,
3 => bb12,
4 => bb13,
3975852440968773706 => bb15,
_ => bb14
}
}
bb11 = {
(*_1) = _9.0.0 as i32;
_14.fld1 = [_9.0.2,_9.0.2,(*_1),(*_1)];
_14.fld0 = [_3,_3,_3,_3,_3,_3,_3,_3];
_9.0.1 = _11 as i16;
_13 = _2.fld0.0 * _2.fld0.0;
_2.fld1.1 = _8;
_2.fld2 = core::ptr::addr_of!(_9.0.2);
_14.fld0 = [_3,_3,_3,_3,_3,_3,_3,_3];
Goto(bb10)
}
bb12 = {
Return()
}
bb13 = {
Return()
}
bb14 = {
Return()
}
bb15 = {
_7 = _2.fld3 as i32;
_2.fld1.1 = core::ptr::addr_of_mut!((*_8));
_22.0 = _13;
_17.fld3 = core::ptr::addr_of_mut!(_2.fld1.2);
_19.2 = '\u{1099d4}';
(*_1) = !_19.0;
_9.0.1 = _9.2 + _2.fld3;
_21 = -_18;
_22 = (_13,);
_25.0.2 = -(*_6);
_19.0 = _9.0.2;
_2.fld2 = core::ptr::addr_of!(_19.0);
_17.fld1 = [_3,_3,_3,_3,_17.fld5.0,_3];
_25.1 = 25039923734395156151284692781479757348_u128;
_4.0 = _22.0;
_4.0 = _13 ^ _13;
Goto(bb16)
}
bb16 = {
Call(_26 = dump_var(Move(_13), Move(_4), Move(_10), Move(_12)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn16(mut _1: *const u8,mut _2: i16,mut _3: f32,mut _4: u8) -> *mut f64 {
mir! {
type RET = *mut f64;
let _5: Adt60;
let _6: (i32, *mut f64, char);
let _7: usize;
let _8: *mut f64;
let _9: i64;
let _10: u64;
let _11: [char; 8];
let _12: [u32; 6];
let _13: i8;
let _14: ((f32, i16, i32, i8), bool, i16);
let _15: *mut *const (f32, i16, i32, i8);
let _16: (f32, i16, i32, i8);
let _17: usize;
let _18: isize;
let _19: *const ((f32, i16, i32, i8), bool, i16);
let _20: Adt58;
let _21: char;
let _22: (f32, i16, i32, i8);
let _23: Adt59;
let _24: bool;
let _25: u32;
let _26: bool;
let _27: (f32, i16, i32, i8);
let _28: i128;
let _29: Adt54;
let _30: Adt60;
let _31: Adt62;
let _32: i32;
let _33: isize;
let _34: Adt60;
let _35: u64;
let _36: ((f32, i16, i32, i8), bool, i16);
let _37: Adt59;
let _38: [i32; 4];
let _39: [u32; 6];
let _40: u32;
let _41: Adt60;
let _42: isize;
let _43: u64;
let _44: f32;
let _45: [char; 8];
let _46: [i16; 4];
let _47: u128;
let _48: i32;
let _49: u16;
let _50: ([i32; 4],);
let _51: [i16; 4];
let _52: *mut f64;
let _53: Adt59;
let _54: u64;
let _55: f32;
let _56: f64;
let _57: u32;
let _58: Adt59;
let _59: u32;
let _60: Adt56;
let _61: Adt55;
let _62: f64;
let _63: [i32; 4];
let _64: Adt52;
let _65: isize;
let _66: u128;
let _67: *mut u128;
let _68: f64;
let _69: u128;
let _70: usize;
let _71: f32;
let _72: i64;
let _73: isize;
let _74: ();
let _75: ();
{
(*_1) = _4;
_1 = core::ptr::addr_of!((*_1));
(*_1) = (-253056689_i32) as u8;
_3 = _4 as f32;
_3 = (*_1) as f32;
_1 = core::ptr::addr_of!((*_1));
(*_1) = !_4;
_4 = (*_1);
(*_1) = !_4;
_5.fld2 = !(-9223372036854775808_isize);
_5.fld6 = (_3, _3, false, '\u{80569}', _3);
_5.fld1.0.1 = -_2;
_5.fld2 = _5.fld1.0.1 as isize;
_5.fld6.3 = '\u{bfdfc}';
_5.fld4 = (*_1) as u32;
_5.fld1.0 = (_5.fld6.1, _2, 1609338946_i32, (-27_i8));
_5.fld0.0 = -_5.fld6.0;
_5.fld0.2 = _5.fld1.0.2;
_3 = (*_1) as f32;
_5.fld1.2 = -_2;
_5.fld1.2 = !_5.fld1.0.1;
(*_1) = !_4;
_5.fld0.2 = _5.fld2 as i32;
_3 = -_5.fld6.0;
_5.fld3 = _4;
Goto(bb1)
}
bb1 = {
_5.fld2 = 9223372036854775807_isize * 9223372036854775807_isize;
_6.0 = !_5.fld1.0.2;
_5.fld6.1 = -_5.fld1.0.0;
_5.fld1.0.1 = -_2;
_5.fld1.0.3 = (-7783495300197351782_i64) as i8;
_5.fld0 = _5.fld1.0;
_5.fld6.4 = _5.fld0.0 - _5.fld6.0;
_5.fld1.1 = !_5.fld6.2;
_4 = _5.fld6.2 as u8;
match _5.fld1.0.2 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
1609338946 => bb7,
_ => bb6
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
_5.fld5 = [_5.fld1.0.3,_5.fld1.0.3,_5.fld0.3,_5.fld0.3,_5.fld1.0.3,_5.fld1.0.3,_5.fld0.3];
_10 = !10844976164281451494_u64;
_5.fld1.0.0 = _5.fld0.0 * _5.fld6.4;
_2 = _5.fld0.1;
_5.fld1.0.0 = _5.fld6.0;
_7 = !4_usize;
_5.fld6.3 = '\u{b5472}';
(*_1) = !_4;
_5.fld0.0 = -_3;
_5.fld0.3 = _4 as i8;
Goto(bb8)
}
bb8 = {
_5.fld6.3 = '\u{ba1ae}';
_6.2 = _5.fld6.3;
_5.fld0.1 = !_5.fld1.2;
_5.fld6.4 = _3 * _5.fld6.0;
_5.fld6.2 = _5.fld1.1 & _5.fld1.1;
_10 = _5.fld6.0 as u64;
_11 = [_5.fld6.3,_6.2,_6.2,_6.2,_5.fld6.3,_6.2,_6.2,_5.fld6.3];
_2 = _5.fld1.2 << _4;
_13 = _5.fld0.3 + _5.fld0.3;
_5.fld1.1 = _5.fld6.2 ^ _5.fld6.2;
_9 = 2637737129021004726_i64;
_14.0.3 = _13;
_14.0 = _5.fld1.0;
_5.fld1.0 = (_5.fld6.4, _5.fld1.2, _14.0.2, _5.fld0.3);
_14.0.1 = 138747322820362650618383411437079742025_u128 as i16;
_5.fld0 = (_5.fld6.4, _5.fld1.0.1, _5.fld1.0.2, _13);
_1 = core::ptr::addr_of!((*_1));
_6.0 = -_5.fld0.2;
_5.fld1.0.0 = _5.fld6.4 / 1_f32;
_5.fld1.0.2 = _14.0.1 as i32;
_14.2 = _5.fld6.3 as i16;
_14.1 = !_5.fld1.1;
_12 = [_5.fld4,_5.fld4,_5.fld4,_5.fld4,_5.fld4,_5.fld4];
_5.fld6 = (_5.fld0.0, _14.0.0, _14.1, _6.2, _5.fld1.0.0);
Goto(bb9)
}
bb9 = {
_16.2 = _14.0.2 + _14.0.2;
_5.fld0.0 = _5.fld6.1;
_13 = _5.fld0.3 & _5.fld0.3;
_5.fld6.3 = _6.2;
_20.fld2 = _11;
_5.fld0.3 = 140176368437439847116226707982823906032_i128 as i8;
_16.0 = _5.fld1.0.0;
_2 = 119652282974807636081354302179436430159_i128 as i16;
_20.fld2 = [_5.fld6.3,_5.fld6.3,_6.2,_5.fld6.3,_6.2,_6.2,_6.2,_6.2];
_17 = !_7;
_14.0.1 = 85668468684217176623839530534138464027_i128 as i16;
_5.fld2 = _5.fld6.2 as isize;
_18 = -_5.fld2;
_7 = _17 | _17;
_5.fld1.0.0 = _16.0 / f32::INFINITY;
_1 = core::ptr::addr_of!(_4);
_16.0 = _14.0.0;
_13 = _5.fld1.0.3;
_16 = (_5.fld1.0.0, _5.fld1.2, _6.0, _13);
_22 = (_5.fld6.4, _5.fld1.2, _16.2, _13);
_5.fld4 = !36238556_u32;
_16.3 = _22.3 + _22.3;
_5.fld6.2 = _4 == _4;
_16.2 = !_22.2;
_14.0.3 = _14.1 as i8;
Call(_6.0 = fn17(_20.fld2, _6.2, _5.fld6, _16.1, _5.fld5, _14.0.2, _5.fld3, _22), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_14.0.1 = -_5.fld0.1;
_20.fld2 = [_6.2,_5.fld6.3,_5.fld6.3,_5.fld6.3,_6.2,_6.2,_5.fld6.3,_5.fld6.3];
_16.3 = -_13;
_4 = _5.fld3;
_14.0.1 = _22.1 * _5.fld1.2;
_23.fld0 = (_17,);
_23.fld1.2 = -_18;
_14.0.1 = _5.fld0.1 - _16.1;
_23.fld1.0 = -(-155348048392565764127890224728527033973_i128);
_5.fld1.0.3 = _23.fld1.2 as i8;
_16.1 = _5.fld6.3 as i16;
_22.3 = -_14.0.3;
_5.fld6.3 = _6.2;
_24 = _14.0.3 == _14.0.3;
_5.fld1.0.1 = _14.0.1;
_5.fld0.1 = _5.fld1.2 >> _5.fld2;
_27.3 = _13 + _22.3;
_5.fld0.0 = _5.fld1.0.0 * _5.fld1.0.0;
_20.fld2 = [_5.fld6.3,_5.fld6.3,_5.fld6.3,_6.2,_6.2,_5.fld6.3,_5.fld6.3,_5.fld6.3];
Goto(bb11)
}
bb11 = {
_5.fld1.1 = _24 > _24;
_27 = _22;
_24 = _5.fld1.1;
_22.0 = _5.fld6.4;
_23.fld3 = !_14.0.1;
_19 = core::ptr::addr_of!(_5.fld1);
_25 = 139782597399740833496366510154295324562_u128 as u32;
_5.fld2 = _23.fld1.2;
_25 = !_5.fld4;
_9 = _5.fld6.3 as i64;
(*_19).2 = _27.1 * _27.1;
_17 = _7;
_6.2 = _5.fld6.3;
_5.fld6.2 = (*_19).1 & (*_19).1;
_14.2 = _14.0.1 - _14.0.1;
_27.1 = _14.2;
_5.fld1.0 = _5.fld0;
_14.0.3 = _27.3;
_5.fld1.0.1 = _5.fld0.1 * (*_19).2;
_29.fld4 = core::ptr::addr_of!(_22.2);
_5.fld1.0.2 = !_14.0.2;
_16.1 = !(*_19).0.1;
_23.fld1.0 = (-65385794893227150694622683376464906178_i128);
Goto(bb12)
}
bb12 = {
_13 = -_27.3;
_16.3 = !_27.3;
_30.fld1.0 = _22;
_30.fld6.4 = _22.0;
_30.fld3 = (*_1) + (*_1);
_30.fld0.2 = !_6.0;
_16 = (*_19).0;
_23.fld1.3 = core::ptr::addr_of!(_4);
_30.fld1 = (*_19);
_11 = [_5.fld6.3,_5.fld6.3,_6.2,_6.2,_5.fld6.3,_5.fld6.3,_6.2,_6.2];
_31.fld1 = _5.fld6;
_33 = (*_1) as isize;
_5.fld1.0.0 = _5.fld0.0 + _27.0;
_5.fld1 = (_16, _31.fld1.2, _5.fld0.1);
_30.fld0.1 = -(*_19).0.1;
_30.fld3 = (*_1) & _5.fld3;
_30.fld3 = (*_1) - (*_1);
_24 = _5.fld1.1;
_14.0.3 = (*_19).0.3 - _22.3;
_29.fld4 = core::ptr::addr_of!(_27.2);
_16 = ((*_19).0.0, (*_19).0.1, (*_19).0.2, _27.3);
_30.fld0.2 = _25 as i32;
_23.fld2 = core::ptr::addr_of!(_14.0.2);
(*_19).0 = (_30.fld6.4, _5.fld1.2, _16.2, _27.3);
_14.0.3 = _10 as i8;
_5.fld0 = (_30.fld6.4, (*_19).2, _16.2, _27.3);
Goto(bb13)
}
bb13 = {
_30.fld6.4 = _5.fld6.4;
_5.fld1.0.2 = !_14.0.2;
_30.fld2 = -_23.fld1.2;
Call(_5.fld0.3 = core::intrinsics::bswap(_30.fld1.0.3), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
_26 = (*_19).2 == (*_19).0.1;
_30.fld6 = ((*_19).0.0, (*_19).0.0, _5.fld1.1, _31.fld1.3, _31.fld1.4);
_27.3 = _10 as i8;
_30.fld0.0 = _2 as f32;
_34.fld1.2 = _16.3 as i16;
_34.fld6.1 = _30.fld1.0.0 + _30.fld1.0.0;
_16.1 = (*_19).2 - _5.fld0.1;
Goto(bb15)
}
bb15 = {
_34.fld0.2 = (*_19).0.2;
_5.fld1 = (_30.fld1.0, _5.fld6.2, _14.0.1);
match _14.0.2 {
0 => bb7,
1 => bb6,
2 => bb9,
1609338946 => bb16,
_ => bb8
}
}
bb16 = {
_37.fld1.1 = core::ptr::addr_of_mut!(_34.fld1.0.3);
_4 = _5.fld3 >> _30.fld1.0.1;
_23.fld0 = (_7,);
_34.fld1.0 = (_34.fld6.1, _16.1, (*_19).0.2, _13);
_38 = [_6.0,_6.0,_27.2,_34.fld0.2];
_34.fld6.2 = !_26;
_30.fld1.0.1 = -_14.0.1;
_34.fld2 = _5.fld2;
_30.fld6 = _31.fld1;
_31.fld1.4 = (*_19).0.0;
_16.1 = (*_19).2;
(*_19).0.2 = _34.fld0.2 + _22.2;
match _14.0.2 {
0 => bb17,
1609338946 => bb19,
_ => bb18
}
}
bb17 = {
_34.fld0.2 = (*_19).0.2;
_5.fld1 = (_30.fld1.0, _5.fld6.2, _14.0.1);
match _14.0.2 {
0 => bb7,
1 => bb6,
2 => bb9,
1609338946 => bb16,
_ => bb8
}
}
bb18 = {
_5.fld6.3 = '\u{ba1ae}';
_6.2 = _5.fld6.3;
_5.fld0.1 = !_5.fld1.2;
_5.fld6.4 = _3 * _5.fld6.0;
_5.fld6.2 = _5.fld1.1 & _5.fld1.1;
_10 = _5.fld6.0 as u64;
_11 = [_5.fld6.3,_6.2,_6.2,_6.2,_5.fld6.3,_6.2,_6.2,_5.fld6.3];
_2 = _5.fld1.2 << _4;
_13 = _5.fld0.3 + _5.fld0.3;
_5.fld1.1 = _5.fld6.2 ^ _5.fld6.2;
_9 = 2637737129021004726_i64;
_14.0.3 = _13;
_14.0 = _5.fld1.0;
_5.fld1.0 = (_5.fld6.4, _5.fld1.2, _14.0.2, _5.fld0.3);
_14.0.1 = 138747322820362650618383411437079742025_u128 as i16;
_5.fld0 = (_5.fld6.4, _5.fld1.0.1, _5.fld1.0.2, _13);
_1 = core::ptr::addr_of!((*_1));
_6.0 = -_5.fld0.2;
_5.fld1.0.0 = _5.fld6.4 / 1_f32;
_5.fld1.0.2 = _14.0.1 as i32;
_14.2 = _5.fld6.3 as i16;
_14.1 = !_5.fld1.1;
_12 = [_5.fld4,_5.fld4,_5.fld4,_5.fld4,_5.fld4,_5.fld4];
_5.fld6 = (_5.fld0.0, _14.0.0, _14.1, _6.2, _5.fld1.0.0);
Goto(bb9)
}
bb19 = {
_34 = Adt60 { fld0: _5.fld1.0,fld1: (*_19),fld2: _23.fld1.2,fld3: _4,fld4: _5.fld4,fld5: _5.fld5,fld6: _5.fld6 };
_23.fld1.3 = core::ptr::addr_of!(_4);
_41.fld1.0 = _34.fld0;
_30.fld0.2 = _17 as i32;
_41.fld1.1 = !_34.fld6.2;
_37.fld1.0 = !_23.fld1.0;
_22.0 = -_34.fld0.0;
_41.fld2 = _34.fld2;
_30.fld1.2 = 44155903636859536205378214529476391113_u128 as i16;
_30.fld6.2 = (*_19).1;
(*_1) = !_34.fld3;
_41.fld1.0.3 = _22.3 * _13;
Goto(bb20)
}
bb20 = {
_13 = _16.3;
_22.1 = _41.fld1.0.3 as i16;
_41.fld1 = (_34.fld0, _24, _5.fld1.0.1);
_16.0 = (*_19).0.0;
_36.0.3 = _13;
_14.2 = (*_19).0.1 * _22.1;
_5.fld6.2 = _34.fld6.2;
_30.fld1.1 = _34.fld1.1;
_41.fld4 = !_25;
(*_1) = !_30.fld3;
_41.fld3 = _7 as u8;
_30.fld6 = (_30.fld1.0.0, _34.fld0.0, _41.fld1.1, _31.fld1.3, _22.0);
_28 = 20609552668290529735031848618618600709_u128 as i128;
_5.fld6.2 = !(*_19).1;
(*_19).0.2 = _34.fld1.0.2 | _6.0;
match _23.fld1.0 {
0 => bb10,
1 => bb2,
2 => bb11,
3 => bb19,
4 => bb5,
5 => bb21,
274896572027711312768751924055303305278 => bb23,
_ => bb22
}
}
bb21 = {
_14.0.1 = -_5.fld0.1;
_20.fld2 = [_6.2,_5.fld6.3,_5.fld6.3,_5.fld6.3,_6.2,_6.2,_5.fld6.3,_5.fld6.3];
_16.3 = -_13;
_4 = _5.fld3;
_14.0.1 = _22.1 * _5.fld1.2;
_23.fld0 = (_17,);
_23.fld1.2 = -_18;
_14.0.1 = _5.fld0.1 - _16.1;
_23.fld1.0 = -(-155348048392565764127890224728527033973_i128);
_5.fld1.0.3 = _23.fld1.2 as i8;
_16.1 = _5.fld6.3 as i16;
_22.3 = -_14.0.3;
_5.fld6.3 = _6.2;
_24 = _14.0.3 == _14.0.3;
_5.fld1.0.1 = _14.0.1;
_5.fld0.1 = _5.fld1.2 >> _5.fld2;
_27.3 = _13 + _22.3;
_5.fld0.0 = _5.fld1.0.0 * _5.fld1.0.0;
_20.fld2 = [_5.fld6.3,_5.fld6.3,_5.fld6.3,_6.2,_6.2,_5.fld6.3,_5.fld6.3,_5.fld6.3];
Goto(bb11)
}
bb22 = {
Return()
}
bb23 = {
(*_19).0.2 = _16.2 - _22.2;
_34.fld1.0.0 = (*_19).0.3 as f32;
_5.fld1.0.3 = _22.3 - _34.fld0.3;
_31.fld1.4 = -(*_19).0.0;
_29.fld3 = core::ptr::addr_of_mut!(_23.fld1.2);
_34.fld0 = (_31.fld1.4, (*_19).0.1, (*_19).0.2, _13);
_23.fld1.3 = core::ptr::addr_of!(_34.fld3);
_41.fld6.3 = _31.fld1.3;
_22 = _34.fld0;
_34.fld1.0.1 = !_30.fld0.1;
_41.fld5 = [(*_19).0.3,_16.3,(*_19).0.3,(*_19).0.3,_5.fld1.0.3,_5.fld0.3,_16.3];
_2 = 63014276521321446282739897343766892886_u128 as i16;
_34.fld0.1 = _5.fld6.2 as i16;
_36.0.3 = _22.3;
_36.1 = _34.fld6.2;
_34.fld5 = _41.fld5;
_30.fld6 = (_5.fld1.0.0, _22.0, _41.fld1.1, _31.fld1.3, (*_19).0.0);
_41.fld5 = _34.fld5;
_31.fld1.4 = _30.fld6.4 + (*_19).0.0;
_30.fld1.0 = (_34.fld0.0, _30.fld0.1, _34.fld0.2, _5.fld1.0.3);
_30.fld0.3 = _27.0 as i8;
_51 = [_22.1,_5.fld0.1,_27.1,_14.0.1];
_5.fld0 = (_34.fld0.0, _34.fld0.1, _41.fld1.0.2, _5.fld1.0.3);
_50 = (_38,);
_23.fld1.3 = core::ptr::addr_of!(_4);
Goto(bb24)
}
bb24 = {
(*_19).1 = _30.fld1.1 | _34.fld6.2;
_34.fld6.1 = _30.fld6.0;
_22.1 = _17 as i16;
_30.fld5 = [_22.3,(*_19).0.3,_36.0.3,_34.fld0.3,_22.3,_36.0.3,(*_19).0.3];
_5.fld6 = (_30.fld6.1, (*_19).0.0, _34.fld6.2, _34.fld6.3, _22.0);
_29.fld5.0 = _41.fld4;
_5.fld4 = !_29.fld5.0;
(*_19) = _30.fld1;
_36.0.1 = _5.fld0.1 & _30.fld0.1;
_34.fld6.4 = _23.fld0.0 as f32;
_30.fld6.0 = _16.0 * _31.fld1.0;
_39 = [_5.fld4,_29.fld5.0,_25,_5.fld4,_29.fld5.0,_5.fld4];
_21 = _30.fld6.3;
(*_19).0.1 = -_34.fld0.1;
_34.fld6 = (_22.0, _5.fld6.0, _31.fld1.2, _21, _34.fld0.0);
_37.fld1.2 = !_30.fld2;
_37.fld2 = core::ptr::addr_of!(_41.fld0.2);
_37.fld3 = _5.fld0.3 as i16;
_53.fld0.0 = _41.fld6.3 as usize;
_23.fld1.1 = _37.fld1.1;
_30.fld6.1 = -_34.fld6.4;
_29.fld5 = (_25,);
_22.3 = _37.fld1.0 as i8;
_5.fld1.0 = _5.fld0;
_5.fld1.1 = _41.fld1.1;
_44 = _22.0;
_41.fld1.0.2 = _5.fld0.2 >> _14.2;
_27.3 = 261515341321252704688226441109194806765_u128 as i8;
Call(_5.fld1 = fn18(_29.fld4, _16.0, _23, _30.fld1.0.3, _34.fld6.0), ReturnTo(bb25), UnwindUnreachable())
}
bb25 = {
match _23.fld1.0 {
0 => bb26,
274896572027711312768751924055303305278 => bb28,
_ => bb27
}
}
bb26 = {
Return()
}
bb27 = {
_5.fld6.3 = '\u{ba1ae}';
_6.2 = _5.fld6.3;
_5.fld0.1 = !_5.fld1.2;
_5.fld6.4 = _3 * _5.fld6.0;
_5.fld6.2 = _5.fld1.1 & _5.fld1.1;
_10 = _5.fld6.0 as u64;
_11 = [_5.fld6.3,_6.2,_6.2,_6.2,_5.fld6.3,_6.2,_6.2,_5.fld6.3];
_2 = _5.fld1.2 << _4;
_13 = _5.fld0.3 + _5.fld0.3;
_5.fld1.1 = _5.fld6.2 ^ _5.fld6.2;
_9 = 2637737129021004726_i64;
_14.0.3 = _13;
_14.0 = _5.fld1.0;
_5.fld1.0 = (_5.fld6.4, _5.fld1.2, _14.0.2, _5.fld0.3);
_14.0.1 = 138747322820362650618383411437079742025_u128 as i16;
_5.fld0 = (_5.fld6.4, _5.fld1.0.1, _5.fld1.0.2, _13);
_1 = core::ptr::addr_of!((*_1));
_6.0 = -_5.fld0.2;
_5.fld1.0.0 = _5.fld6.4 / 1_f32;
_5.fld1.0.2 = _14.0.1 as i32;
_14.2 = _5.fld6.3 as i16;
_14.1 = !_5.fld1.1;
_12 = [_5.fld4,_5.fld4,_5.fld4,_5.fld4,_5.fld4,_5.fld4];
_5.fld6 = (_5.fld0.0, _14.0.0, _14.1, _6.2, _5.fld1.0.0);
Goto(bb9)
}
bb28 = {
_42 = !_5.fld2;
_17 = !_23.fld0.0;
_41.fld6.2 = _41.fld1.0.0 >= (*_19).0.0;
_5.fld1.1 = !_31.fld1.2;
_30.fld1.2 = -_5.fld0.1;
_53.fld1.1 = core::ptr::addr_of_mut!(_36.0.3);
_12 = [_34.fld4,_25,_25,_34.fld4,_5.fld4,_29.fld5.0];
_35 = !_10;
(*_1) = _34.fld3 * _30.fld3;
_29.fld1 = _12;
_34.fld1.0.0 = (*_19).0.0 * _31.fld1.0;
_34.fld1 = (_5.fld0, _5.fld1.1, _30.fld1.2);
_5.fld0 = (_34.fld0.0, (*_19).2, _41.fld1.0.2, _13);
Call(_30.fld4 = core::intrinsics::transmute((*_19).0.2), ReturnTo(bb29), UnwindUnreachable())
}
bb29 = {
_31 = Adt62 { fld0: _38,fld1: _5.fld6 };
(*_1) = _44 as u8;
_34.fld4 = !_41.fld4;
_12 = [_29.fld5.0,_5.fld4,_29.fld5.0,_34.fld4,_5.fld4,_25];
_30.fld5 = [_16.3,_13,_5.fld0.3,_34.fld0.3,_5.fld0.3,_34.fld0.3,_5.fld0.3];
_5.fld6.2 = !_30.fld6.2;
_53.fld3 = _34.fld1.0.1 | _36.0.1;
_41.fld6 = _5.fld6;
_41.fld0.1 = _22.1;
_5.fld1 = (_5.fld0, _30.fld6.2, _34.fld1.2);
_5.fld6 = _34.fld6;
_37.fld1.0 = 308435980909117392122321681176192806579_u128 as i128;
_30.fld5 = _34.fld5;
_53.fld1.1 = _23.fld1.1;
_20.fld0 = core::ptr::addr_of_mut!(_56);
_34.fld6.1 = _22.0 / f32::INFINITY;
_30.fld0.2 = 5578967958765709169919550933364613583_u128 as i32;
Goto(bb30)
}
bb30 = {
_34.fld1 = (*_19);
_7 = _23.fld1.0 as usize;
Goto(bb31)
}
bb31 = {
_53.fld2 = core::ptr::addr_of!(_41.fld0.2);
_59 = _41.fld4 >> _36.0.3;
_15 = core::ptr::addr_of_mut!(_61.fld6);
_34.fld0.3 = (*_19).0.3;
_58.fld0.0 = _17;
_36.0.3 = _30.fld1.0.3 >> _16.2;
_29.fld1 = _39;
_55 = -_30.fld6.1;
_39 = _12;
_48 = -_30.fld1.0.2;
_58 = Adt59 { fld0: _23.fld0,fld1: _23.fld1,fld2: _23.fld2,fld3: _36.0.1 };
_22.1 = _34.fld0.1 << _34.fld1.2;
_14.1 = _5.fld1.1;
_25 = _34.fld4;
_40 = _42 as u32;
(*_15) = core::ptr::addr_of!(_36.0);
_64.fld4.fld1 = _10 as f64;
_61.fld4 = (*_19).2;
_62 = -_64.fld4.fld1;
_36.2 = _5.fld0.2 as i16;
_23.fld1.0 = _58.fld1.0 >> _22.1;
_41.fld6 = _34.fld6;
_64.fld4.fld2 = _9;
_36.0 = _30.fld1.0;
_5.fld6 = (_30.fld6.0, _36.0.0, (*_19).1, _31.fld1.3, _34.fld0.0);
_30.fld6.2 = !_5.fld6.2;
_30.fld0 = (_41.fld6.4, (*_19).2, _41.fld1.0.2, _13);
_41.fld6.0 = -_36.0.0;
_60.fld0.0 = (_30.fld6.0, _34.fld1.2, _5.fld1.0.2, _5.fld0.3);
match _14.0.2 {
0 => bb9,
1 => bb4,
2 => bb32,
1609338946 => bb34,
_ => bb33
}
}
bb32 = {
_5.fld5 = [_5.fld1.0.3,_5.fld1.0.3,_5.fld0.3,_5.fld0.3,_5.fld1.0.3,_5.fld1.0.3,_5.fld0.3];
_10 = !10844976164281451494_u64;
_5.fld1.0.0 = _5.fld0.0 * _5.fld6.4;
_2 = _5.fld0.1;
_5.fld1.0.0 = _5.fld6.0;
_7 = !4_usize;
_5.fld6.3 = '\u{b5472}';
(*_1) = !_4;
_5.fld0.0 = -_3;
_5.fld0.3 = _4 as i8;
Goto(bb8)
}
bb33 = {
Return()
}
bb34 = {
_64.fld4.fld4.0 = _7 * _7;
_31.fld1 = (_41.fld6.4, (*_19).0.0, _41.fld1.1, _6.2, _44);
_5.fld1 = (_41.fld1.0, _34.fld6.2, _30.fld1.2);
(*_19).2 = 27144_u16 as i16;
_6.2 = _30.fld6.3;
_64.fld4.fld0 = (_41.fld6.0, _61.fld4, _41.fld1.0.2, _30.fld1.0.3);
_66 = 49139_u16 as u128;
_57 = _5.fld4;
_5.fld2 = _41.fld2 * _37.fld1.2;
_67 = core::ptr::addr_of_mut!(_66);
_38 = [_5.fld0.2,_60.fld0.0.2,_30.fld0.2,_36.0.2];
_64.fld0 = _30.fld5;
match _14.0.2 {
1609338946 => bb36,
_ => bb35
}
}
bb35 = {
_14.0.1 = -_5.fld0.1;
_20.fld2 = [_6.2,_5.fld6.3,_5.fld6.3,_5.fld6.3,_6.2,_6.2,_5.fld6.3,_5.fld6.3];
_16.3 = -_13;
_4 = _5.fld3;
_14.0.1 = _22.1 * _5.fld1.2;
_23.fld0 = (_17,);
_23.fld1.2 = -_18;
_14.0.1 = _5.fld0.1 - _16.1;
_23.fld1.0 = -(-155348048392565764127890224728527033973_i128);
_5.fld1.0.3 = _23.fld1.2 as i8;
_16.1 = _5.fld6.3 as i16;
_22.3 = -_14.0.3;
_5.fld6.3 = _6.2;
_24 = _14.0.3 == _14.0.3;
_5.fld1.0.1 = _14.0.1;
_5.fld0.1 = _5.fld1.2 >> _5.fld2;
_27.3 = _13 + _22.3;
_5.fld0.0 = _5.fld1.0.0 * _5.fld1.0.0;
_20.fld2 = [_5.fld6.3,_5.fld6.3,_5.fld6.3,_6.2,_6.2,_5.fld6.3,_5.fld6.3,_5.fld6.3];
Goto(bb11)
}
bb36 = {
_41.fld6.4 = -_31.fld1.0;
_41.fld1.0.2 = !(*_19).0.2;
_41.fld0.3 = _60.fld0.0.3;
RET = core::ptr::addr_of_mut!(_68);
Goto(bb37)
}
bb37 = {
Call(_74 = dump_var(Move(_25), Move(_18), Move(_51), Move(_11)), ReturnTo(bb38), UnwindUnreachable())
}
bb38 = {
Call(_74 = dump_var(Move(_40), Move(_9), Move(_12), Move(_48)), ReturnTo(bb39), UnwindUnreachable())
}
bb39 = {
Call(_74 = dump_var(Move(_21), Move(_17), Move(_7), Move(_24)), ReturnTo(bb40), UnwindUnreachable())
}
bb40 = {
Call(_74 = dump_var(Move(_50), _75, _75, _75), ReturnTo(bb41), UnwindUnreachable())
}
bb41 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn17(mut _1: [char; 8],mut _2: char,mut _3: (f32, f32, bool, char, f32),mut _4: i16,mut _5: [i8; 7],mut _6: i32,mut _7: u8,mut _8: (f32, i16, i32, i8)) -> i32 {
mir! {
type RET = i32;
let _9: bool;
let _10: (bool, (i32, *mut f64, char));
let _11: bool;
let _12: Adt49;
let _13: [i16; 4];
let _14: f64;
let _15: Adt55;
let _16: (char,);
let _17: *mut f64;
let _18: u64;
let _19: i128;
let _20: usize;
let _21: Adt50;
let _22: *mut u128;
let _23: ();
let _24: ();
{
_8.1 = !_4;
_5 = [_8.3,_8.3,_8.3,_8.3,_8.3,_8.3,_8.3];
_3 = (_8.0, _8.0, false, _2, _8.0);
_11 = _3.2;
_5 = [_8.3,_8.3,_8.3,_8.3,_8.3,_8.3,_8.3];
_11 = !_3.2;
_8.0 = _6 as f32;
_11 = _3.2;
_3 = (_8.0, _8.0, _11, _2, _8.0);
_10.1.0 = !_6;
_13 = [_8.1,_4,_8.1,_4];
_6 = _8.2 - _10.1.0;
_9 = !_3.2;
Goto(bb1)
}
bb1 = {
_5 = [_8.3,_8.3,_8.3,_8.3,_8.3,_8.3,_8.3];
_12.fld2.fld0.0 = [_6,_10.1.0,_6,_6];
_3.4 = _8.0 / f32::NEG_INFINITY;
_3 = (_8.0, _8.0, _9, _2, _8.0);
_1 = [_2,_3.3,_3.3,_2,_3.3,_3.3,_3.3,_3.3];
_15.fld4 = -_4;
_10.0 = _3.3 != _2;
_7 = 131_u8 + 21_u8;
_5 = [_8.3,_8.3,_8.3,_8.3,_8.3,_8.3,_8.3];
_4 = _8.0 as i16;
_8 = (_3.0, _15.fld4, _6, (-56_i8));
_8 = (_3.1, _15.fld4, _6, 20_i8);
_15.fld3 = 188627096305832004800841126958204483495_u128 | 50978348580175616735136462181852224878_u128;
_10.1.1 = core::ptr::addr_of_mut!(_14);
_11 = _9;
_15.fld2 = [2420022817_u32,1373672570_u32,868676798_u32,1452847142_u32,1483332271_u32,1353940909_u32,1261026342_u32,1877450627_u32];
_14 = _10.1.0 as f64;
match _8.3 {
0 => bb2,
1 => bb3,
2 => bb4,
20 => bb6,
_ => bb5
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
_12.fld1 = (_12.fld2.fld0.0,);
_15.fld0.fld0 = [_15.fld3,_15.fld3,_15.fld3,_15.fld3,_15.fld3];
_15.fld1.fld0 = (_12.fld2.fld0.0,);
_15.fld1 = Move(_12.fld2);
_10.1.0 = _6;
_8.2 = _3.0 as i32;
_17 = core::ptr::addr_of_mut!(_14);
_1 = [_2,_3.3,_3.3,_2,_3.3,_2,_2,_3.3];
_6 = _8.2;
RET = _8.2 & _8.2;
_4 = (-7709414118044560604864931323060559254_i128) as i16;
_8 = (_3.4, _4, _10.1.0, 77_i8);
_10.0 = !_3.2;
_10.1.2 = _3.3;
_3.0 = _3.4;
_16 = (_2,);
_13 = [_15.fld4,_8.1,_15.fld4,_15.fld4];
_15.fld1.fld0.0 = [_8.2,_8.2,_8.2,_8.2];
(*_17) = _15.fld3 as f64;
_12.fld0 = [3686726301_u32,921840293_u32,1533360583_u32,2677236330_u32,918872476_u32,1595754283_u32];
_10.1 = (_6, _17, _3.3);
_3.3 = _16.0;
_18 = 1113129031752445017_u64 >> _10.1.0;
_16 = (_3.3,);
_12.fld0 = [2476253126_u32,927697411_u32,2947903814_u32,1609423831_u32,3930467396_u32,38609691_u32];
Goto(bb7)
}
bb7 = {
Call(_23 = dump_var(Move(_2), Move(_11), Move(_9), Move(_13)), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
Call(_23 = dump_var(Move(_4), _24, _24, _24), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn18(mut _1: *const i32,mut _2: f32,mut _3: Adt59,mut _4: i8,mut _5: f32) -> ((f32, i16, i32, i8), bool, i16) {
mir! {
type RET = ((f32, i16, i32, i8), bool, i16);
let _6: i32;
let _7: [i8; 7];
let _8: *const ((f32, i16, i32, i8), bool, i16);
let _9: Adt58;
let _10: isize;
let _11: [i32; 3];
let _12: (f32, i16, i32, i8);
let _13: isize;
let _14: ();
let _15: ();
{
_3.fld1.2 = -(-87_isize);
RET.0.2 = (*_1);
_3.fld0 = (12865405841344785276_usize,);
RET.1 = !true;
RET.1 = !true;
(*_1) = _4 as i32;
_5 = _4 as f32;
_4 = (*_1) as i8;
_4 = 115_i8 | (-36_i8);
RET.2 = _3.fld3 + _3.fld3;
RET.0.2 = !(*_1);
RET.0.1 = 13366156737566800254_u64 as i16;
_5 = -_2;
RET.0.1 = '\u{7c3e7}' as i16;
_3.fld1.2 = 4262940756402864553_u64 as isize;
_3.fld0 = (4_usize,);
RET.0.0 = (*_1) as f32;
RET.2 = _3.fld3 * _3.fld3;
Goto(bb1)
}
bb1 = {
_3.fld1.0 = (-8701246733944433156375923583085907964_i128) & (-89068780989508568475280965114405307495_i128);
_5 = 16519_u16 as f32;
RET.0 = (_2, _3.fld3, (*_1), _4);
_9.fld2 = ['\u{2b7fb}','\u{b0388}','\u{5f47f}','\u{10e2ca}','\u{de5bf}','\u{abb2c}','\u{7e061}','\u{49a39}'];
_2 = _4 as f32;
RET.0.3 = _4 - _4;
RET.0.2 = (*_1) | (*_1);
RET.0.3 = _5 as i8;
_3.fld0.0 = 13585_u16 as usize;
RET.0 = (_2, _3.fld3, (*_1), _4);
(*_1) = 35716_u16 as i32;
RET.0.3 = _2 as i8;
_7 = [_4,_4,_4,_4,_4,_4,_4];
RET.0.3 = -_4;
_3.fld1.1 = core::ptr::addr_of_mut!(_4);
RET.0.0 = _5 * _2;
_3.fld0 = (1_usize,);
_11 = [(*_1),(*_1),(*_1)];
_10 = !_3.fld1.2;
RET.0.2 = (*_1);
_12.0 = -_2;
RET.0.1 = _3.fld3 | _3.fld3;
(*_1) = -(-1376732969_i32);
Goto(bb2)
}
bb2 = {
Call(_14 = dump_var(Move(_7), Move(_11), _15, _15), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Return()
}

}
}
pub fn main() {
                println!("{:?}", fn0(std::hint::black_box(27_u8), std::hint::black_box(16683_u16), std::hint::black_box(10796686848953033040_u64)));
                
                unsafe {
                    println!("hash: {}", H.finish());
                }
            
            }
#[derive(Debug,Copy,Clone)]
pub struct Adt47 {
fld0: [u32; 8],
fld1: [i32; 4],
fld2: i64,
}
#[derive(Debug)]
pub struct Adt48 {
fld0: ([i32; 4],),
}
#[derive(Debug)]
pub struct Adt49 {
fld0: [u32; 6],
fld1: ([i32; 4],),
fld2: Adt48,
}
#[derive(Debug)]
pub struct Adt50 {
fld0: (f32, i16, i32, i8),
fld1: f64,
fld2: i64,
fld3: [u128; 5],
fld4: (usize,),
}
#[derive(Debug)]
pub struct Adt51 {
fld0: [u128; 5],
}
#[derive(Debug)]
pub struct Adt52 {
fld0: [i8; 7],
fld1: *const u8,
fld2: [i32; 3],
fld3: [u32; 6],
fld4: Adt50,
}
#[derive(Debug)]
pub struct Adt53 {
fld0: Adt51,
fld1: f32,
}
#[derive(Debug,Copy,Clone)]
pub struct Adt54 {
fld0: *const ((f32, i16, i32, i8), bool, i16),
fld1: [u32; 6],
fld2: u64,
fld3: *mut isize,
fld4: *const i32,
fld5: (u32,),
}
#[derive(Debug)]
pub struct Adt55 {
fld0: Adt51,
fld1: Adt48,
fld2: [u32; 8],
fld3: u128,
fld4: i16,
fld5: *const ((f32, i16, i32, i8), bool, i16),
fld6: *const (f32, i16, i32, i8),
}
#[derive(Debug,Copy,Clone)]
pub struct Adt56 {
fld0: ((f32, i16, i32, i8), bool, i16),
fld1: u16,
}
#[derive(Debug)]
pub struct Adt57 {
fld0: *mut f64,
fld1: u32,
fld2: ((f32, i16, i32, i8), u128),
fld3: *mut *const (f32, i16, i32, i8),
fld4: [char; 8],
}
#[derive(Debug)]
pub struct Adt58 {
fld0: *mut f64,
fld1: [i32; 4],
fld2: [char; 8],
}
#[derive(Debug,Copy,Clone)]
pub struct Adt59 {
fld0: (usize,),
fld1: (i128, *mut i8, isize, *const u8),
fld2: *const i32,
fld3: i16,
}
#[derive(Debug)]
pub struct Adt60 {
fld0: (f32, i16, i32, i8),
fld1: ((f32, i16, i32, i8), bool, i16),
fld2: isize,
fld3: u8,
fld4: u32,
fld5: [i8; 7],
fld6: (f32, f32, bool, char, f32),
}
#[derive(Debug)]
pub struct Adt61 {
fld0: u16,
fld1: u32,
fld2: isize,
fld3: Adt53,
fld4: (bool, (i32, *mut f64, char)),
fld5: [u32; 6],
fld6: Adt56,
fld7: *mut f64,
}
#[derive(Debug,Copy,Clone)]
pub struct Adt62 {
fld0: [i32; 4],
fld1: (f32, f32, bool, char, f32),
}
#[derive(Debug,Copy,Clone)]
pub struct Adt63 {
fld0: Adt56,
}

