#![recursion_limit = "1024"]
    #![feature(custom_mir, core_intrinsics, const_hash)]
    #![allow(unused_parens, unused_assignments, overflowing_literals)]
    extern crate core;
    use core::intrinsics::mir::*;

    use std::fmt::Debug;

    #[inline(never)]
    pub fn dump_var<T: Debug, U: Debug, V: Debug, W: Debug>(f: usize,
        var0: usize, val0: T,
        var1: usize, val1: U,
        var2: usize, val2: V,
        var3: usize, val3: W,
    ) {
        println!("fn{f}:_{var0} = {val0:?}\n_{var1} = {val1:?}\n_{var2} = {val2:?}\n_{var3} = {val3:?}");
    }
    #[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn0(mut _1: bool,mut _2: u16,mut _3: u8,mut _4: i8,mut _5: i32) -> isize {
mir! {
type RET = isize;
let _6: ((u8,), *mut i32);
let _7: isize;
let _8: char;
let _9: ((u128, u32), (*mut i32, [isize; 3], bool, (u128, u32), u8), *mut (u8,));
let _10: [u64; 6];
let _11: bool;
let _12: Adt52;
let _13: isize;
let _14: i128;
let _15: u64;
let _16: Adt64;
let _17: f64;
let _18: isize;
let _19: char;
let _20: Adt61;
let _21: f32;
let _22: Adt60;
let _23: Adt55;
let _24: f32;
let _25: [char; 3];
let _26: usize;
let _27: *mut i32;
let _28: isize;
let _29: isize;
let _30: bool;
let _31: [usize; 2];
let _32: i128;
let _33: (u64, usize, f32, u8, i128);
let _34: Adt54;
let _35: isize;
let _36: bool;
let _37: [isize; 3];
let _38: ();
let _39: ();
{
_2 = 25251_u16 / 31063_u16;
_5 = (-320197536_i32) >> _2;
RET = _5 as isize;
Goto(bb1)
}
bb1 = {
_6.0.0 = 19_u8;
_6.0.0 = 3408325987_u32 as u8;
_1 = false;
_1 = false;
_7 = 3599665077077027928_usize as isize;
_3 = !_6.0.0;
Goto(bb2)
}
bb2 = {
_5 = !824726677_i32;
Goto(bb3)
}
bb3 = {
RET = _7 >> _6.0.0;
_9.0.1 = 1258723257_u32;
_6.1 = core::ptr::addr_of_mut!(_5);
_9.0.1 = 1335848204_u32;
RET = _7 + _7;
RET = _7 - _7;
_9.0.0 = 322984214170292449292984579317229790331_u128;
_9.0 = (195204108696045374011197018948682017634_u128, 2511709960_u32);
_6.1 = core::ptr::addr_of_mut!(_5);
_9.1.4 = !_3;
_13 = _7 + _7;
_12.fld4.fld4 = _9.0.0 as i16;
_12.fld4.fld3.1.2 = _2 - _2;
_12.fld0 = [_13,_13,_7];
_12.fld4.fld5 = _9.0;
match _9.0.0 {
0 => bb1,
1 => bb4,
195204108696045374011197018948682017634 => bb6,
_ => bb5
}
}
bb4 = {
_5 = !824726677_i32;
Goto(bb3)
}
bb5 = {
_6.0.0 = 19_u8;
_6.0.0 = 3408325987_u32 as u8;
_1 = false;
_1 = false;
_7 = 3599665077077027928_usize as isize;
_3 = !_6.0.0;
Goto(bb2)
}
bb6 = {
_16.fld0 = _3 as i32;
_9.1 = (_6.1, _12.fld0, _1, _9.0, _3);
_3 = !_9.1.4;
_10 = [16999922596797272123_u64,9038987176681057833_u64,18177123379675713517_u64,17582267338158298236_u64,18247607452708575793_u64,2681815673296917752_u64];
_8 = '\u{41802}';
_12.fld4.fld5.0 = _9.1.3.0;
_12.fld6 = core::ptr::addr_of_mut!(_12.fld4.fld5.0);
_12.fld4.fld3.1.1 = (-98_i8) ^ 82_i8;
_1 = !_9.1.2;
_9.1.1 = _12.fld0;
_12.fld4.fld2 = core::ptr::addr_of_mut!(_12.fld4.fld3);
_12.fld4.fld3.0 = !8036640770375757302_u64;
_1 = _9.1.2 | _9.1.2;
_9.1.3.1 = _12.fld4.fld5.1 / 3604902427_u32;
_16 = Adt64 { fld0: _5 };
_9.2 = core::ptr::addr_of_mut!(_6.0);
_12.fld1 = core::ptr::addr_of!(_2);
match _12.fld4.fld5.1 {
2511709960 => bb8,
_ => bb7
}
}
bb7 = {
_5 = !824726677_i32;
Goto(bb3)
}
bb8 = {
_12.fld4.fld3.1.2 = _2 * _2;
_12.fld5 = _16.fld0 << _9.0.0;
Call(_12.fld4.fld3.0 = fn1(_9, _12.fld4.fld5, _9.0.1, _9, _12.fld5, _9.1, _12.fld6, _7, _9, _7, _7, _9, _6, _9.1.3.0), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
_6.0 = (_9.1.4,);
_12.fld6 = core::ptr::addr_of_mut!(_9.0.0);
_12.fld7 = [_8,_8,_8];
_9.1.3.0 = !_12.fld4.fld5.0;
_9.1 = (_6.1, _12.fld0, _1, _9.0, _3);
_12.fld3 = [_8,_8,_8,_8,_8];
_9.1.4 = _8 as u8;
_2 = !_12.fld4.fld3.1.2;
_9.1 = (_6.1, _12.fld0, _1, _9.0, _3);
RET = 28048812259659438854717924707772241903_i128 as isize;
_14 = (-31455954831785342084873242903677549828_i128) + 126035350168840017608389815329867413757_i128;
RET = _13 >> _9.0.0;
_12.fld4.fld4 = !(-27022_i16);
_9.1 = (_6.1, _12.fld0, _1, _9.0, _3);
_12.fld4.fld3.4 = 7_usize as i128;
_12.fld4.fld3.3 = _8 as u128;
_9.1.4 = _3 & _6.0.0;
_9.1.0 = _6.1;
_9.2 = core::ptr::addr_of_mut!(_6.0);
_12.fld4.fld0 = !_12.fld4.fld5.1;
_5 = 4916296901552204117_i64 as i32;
_22.fld1.fld2.1 = !8532010889447308421_usize;
_22.fld1.fld3 = -_12.fld4.fld3.1.1;
_22.fld5 = core::ptr::addr_of!(_2);
_4 = !_22.fld1.fld3;
_12.fld4.fld0 = _9.1.3.1 / 1390988419_u32;
_22.fld1.fld0.0 = _9.1.4 + _6.0.0;
match _12.fld4.fld5.0 {
195204108696045374011197018948682017634 => bb11,
_ => bb10
}
}
bb10 = {
_5 = !824726677_i32;
Goto(bb3)
}
bb11 = {
_8 = '\u{9f6f0}';
_22.fld1.fld4.2 = _1;
_23.fld1.fld4.fld3.4 = _22.fld1.fld3 as i128;
_8 = '\u{28aa8}';
_23.fld1.fld0 = [_7,_13,_7];
_22.fld1.fld4.4 = _8 as u8;
_22.fld1.fld4.3.1 = _8 as u32;
_20.fld0 = !_12.fld4.fld3.1.2;
_20.fld0 = _12.fld4.fld3.1.2;
_25 = [_8,_8,_8];
_17 = _6.0.0 as f64;
_9.1.3.0 = _12.fld4.fld3.3 | _9.0.0;
_17 = _12.fld4.fld3.0 as f64;
_12.fld4.fld1 = [_12.fld5,_16.fld0,_12.fld5,_12.fld5,_12.fld5];
_9.1.4 = _3 & _22.fld1.fld4.4;
_12.fld4.fld3.1.0 = core::ptr::addr_of_mut!(_22.fld1.fld4.3);
match _12.fld4.fld5.0 {
0 => bb10,
1 => bb5,
195204108696045374011197018948682017634 => bb12,
_ => bb3
}
}
bb12 = {
_22.fld1.fld4.1 = [_13,_7,_7];
_23.fld1.fld4.fld3.1 = _12.fld4.fld3.1;
_23.fld1.fld5 = _2 as i32;
_28 = _13;
_9.0.0 = !_9.1.3.0;
_9.0.0 = _9.1.3.0 - _12.fld4.fld5.0;
_15 = 4197888908798444253_i64 as u64;
_9.1.3 = (_9.0.0, _12.fld4.fld0);
_22.fld1.fld2.2 = _22.fld1.fld3 as u16;
_23.fld1.fld4.fld3.2 = !_22.fld1.fld3;
_31 = [_22.fld1.fld2.1,_22.fld1.fld2.1];
_29 = -_13;
_20 = Adt61 { fld0: _23.fld1.fld4.fld3.1.2 };
_9.1.2 = !_1;
_23.fld1.fld4.fld3.1 = (_12.fld4.fld3.1.0, _22.fld1.fld3, _20.fld0);
_22.fld1.fld4 = (_9.1.0, _23.fld1.fld0, _1, _9.0, _3);
_14 = _12.fld4.fld3.4 & _12.fld4.fld3.4;
_9.0.0 = _12.fld4.fld3.0 as u128;
_12.fld2 = _13 + _13;
_8 = '\u{65a5b}';
_23.fld1.fld4.fld2 = core::ptr::addr_of_mut!(_23.fld1.fld4.fld3);
_23.fld1.fld4.fld3.0 = _12.fld4.fld3.0 & _12.fld4.fld3.0;
_12.fld4.fld3.2 = _15 as i8;
_19 = _8;
_22.fld2 = core::ptr::addr_of_mut!(_9.0.1);
_7 = _13;
Goto(bb13)
}
bb13 = {
_9.1.3 = (_22.fld1.fld4.3.0, _22.fld1.fld4.3.1);
_13 = _12.fld2 << _22.fld1.fld0.0;
_33.1 = _23.fld1.fld4.fld3.0 as usize;
_12.fld4.fld0 = _9.1.3.1 * _9.1.3.1;
_24 = _9.1.3.0 as f32;
_8 = _19;
_35 = _13;
_9.1.2 = _1;
match _9.0.1 {
0 => bb7,
2511709960 => bb14,
_ => bb12
}
}
bb14 = {
_16 = Adt64 { fld0: _23.fld1.fld5 };
_19 = _8;
_23.fld1.fld4.fld3.4 = _14;
_23.fld1.fld2 = -_35;
_22.fld1.fld4.1 = [_13,_35,_28];
_22.fld1.fld0.0 = !_9.1.4;
_23.fld0 = _9.1.3.0 != _9.1.3.0;
_33 = (_23.fld1.fld4.fld3.0, _22.fld1.fld2.1, _24, _22.fld1.fld0.0, _14);
_23.fld1.fld3 = [_19,_19,_8,_8,_19];
_12.fld0 = [_13,_13,_35];
_6.0.0 = _33.3 - _3;
_12.fld4.fld3 = (_23.fld1.fld4.fld3.0, _23.fld1.fld4.fld3.1, _23.fld1.fld4.fld3.1.1, _9.1.3.0, _23.fld1.fld4.fld3.4);
_17 = _33.2 as f64;
_34.fld0 = (_12.fld4.fld3.1.1, _22.fld1.fld2.1, _12.fld4.fld3.1.2);
_23.fld1.fld4.fld3 = (_33.0, _12.fld4.fld3.1, _22.fld1.fld3, _9.0.0, _12.fld4.fld3.4);
Goto(bb15)
}
bb15 = {
Call(_38 = dump_var(0_usize, 29_usize, Move(_29), 4_usize, Move(_4), 13_usize, Move(_13), 14_usize, Move(_14)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_38 = dump_var(0_usize, 15_usize, Move(_15), 7_usize, Move(_7), 8_usize, Move(_8), 2_usize, Move(_2)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn1(mut _1: ((u128, u32), (*mut i32, [isize; 3], bool, (u128, u32), u8), *mut (u8,)),mut _2: (u128, u32),mut _3: u32,mut _4: ((u128, u32), (*mut i32, [isize; 3], bool, (u128, u32), u8), *mut (u8,)),mut _5: i32,mut _6: (*mut i32, [isize; 3], bool, (u128, u32), u8),mut _7: *mut u128,mut _8: isize,mut _9: ((u128, u32), (*mut i32, [isize; 3], bool, (u128, u32), u8), *mut (u8,)),mut _10: isize,mut _11: isize,mut _12: ((u128, u32), (*mut i32, [isize; 3], bool, (u128, u32), u8), *mut (u8,)),mut _13: ((u8,), *mut i32),mut _14: u128) -> u64 {
mir! {
type RET = u64;
let _15: usize;
let _16: Adt53;
let _17: Adt56;
let _18: isize;
let _19: *mut i64;
let _20: Adt63;
let _21: f64;
let _22: i8;
let _23: [char; 5];
let _24: [usize; 2];
let _25: f32;
let _26: Adt50;
let _27: u8;
let _28: u8;
let _29: (u32, isize, [usize; 2], i32);
let _30: bool;
let _31: f64;
let _32: i128;
let _33: Adt64;
let _34: u32;
let _35: i8;
let _36: char;
let _37: Adt55;
let _38: f32;
let _39: [char; 5];
let _40: f32;
let _41: i128;
let _42: ();
let _43: ();
{
_12.1.3.1 = _6.3.1 - _12.0.1;
_9.1.2 = !_4.1.2;
_4.0 = (_14, _9.1.3.1);
_6.3.0 = _1.0.0 % 252813906492401663849569461019647087139_u128;
_6.4 = !_1.1.4;
_1.1.3.0 = (*_7) | _9.1.3.0;
_4.1.0 = core::ptr::addr_of_mut!(_5);
_1.0.0 = 7663361795523858991_i64 as u128;
_9.1.3.1 = 13596022230447175949_usize as u32;
Goto(bb1)
}
bb1 = {
_9.1.3 = (_9.0.0, _4.0.1);
Goto(bb2)
}
bb2 = {
_12.0.0 = !_2.0;
_9.0.0 = _2.0 % 237614241085596780315378989032336969972_u128;
_19 = core::ptr::addr_of_mut!(_20.fld1);
_7 = core::ptr::addr_of_mut!(_12.1.3.0);
_20.fld0.fld1.fld4.fld3.0 = _11 as u64;
_4.1.4 = _1.1.4;
_20.fld3.1.1 = !(-108_i8);
_20.fld0.fld1.fld1 = core::ptr::addr_of!(_20.fld0.fld1.fld4.fld3.1.2);
Call(_9.0 = fn2(_4.0.1, _4.1, _9.1.0, _3, _4.1.3.0, _4.1, _1.1.1, _4, _1, _1.0.0, _4.1.3.0, _4.1.1, _1.1.3, _8), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_1.1.3.1 = _3;
_20.fld0.fld0 = _6.2;
_20.fld0.fld2 = Adt53 { fld0: _1.2 };
_12.0.1 = _20.fld3.1.1 as u32;
_15 = !4_usize;
_20.fld2.fld5 = core::ptr::addr_of!(_20.fld0.fld1.fld4.fld3);
_4.1.0 = _9.1.0;
_6.4 = !_13.0.0;
_9.0.0 = (*_7) & _4.1.3.0;
_6.2 = !_1.1.2;
(*_19) = (-7246279855501044474_i64);
_20.fld0.fld1.fld6 = core::ptr::addr_of_mut!(_9.1.3.0);
_12.1.3 = (_4.0.0, _3);
_20.fld2.fld0 = core::ptr::addr_of_mut!(_13);
Call(_4.1.3 = fn3(_9, _4.1.2, _8, _4.2, _2.0, _9.1, _12.1.3.0, _4.2, _4.0.1), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_11 = !_10;
_26.fld5.3.1 = !_9.0.1;
_1.1 = (_4.1.0, _6.1, _6.2, _9.0, _12.1.4);
_20.fld2.fld5 = core::ptr::addr_of!(_26.fld0.4);
_9.1.3 = (_4.1.3.0, _26.fld5.3.1);
_26.fld0.4.4 = (-57964255744093552310323576422371842719_i128) | (-135581268411576798117827120221756491776_i128);
_26.fld5.0 = core::ptr::addr_of_mut!(_5);
_9.1.1 = [_8,_11,_10];
_26.fld0.3 = [_5,_5,_5,_5,_5];
_24 = [_15,_15];
match _14 {
0 => bb5,
1 => bb6,
2 => bb7,
3 => bb8,
4 => bb9,
5 => bb10,
195204108696045374011197018948682017634 => bb12,
_ => bb11
}
}
bb5 = {
_1.1.3.1 = _3;
_20.fld0.fld0 = _6.2;
_20.fld0.fld2 = Adt53 { fld0: _1.2 };
_12.0.1 = _20.fld3.1.1 as u32;
_15 = !4_usize;
_20.fld2.fld5 = core::ptr::addr_of!(_20.fld0.fld1.fld4.fld3);
_4.1.0 = _9.1.0;
_6.4 = !_13.0.0;
_9.0.0 = (*_7) & _4.1.3.0;
_6.2 = !_1.1.2;
(*_19) = (-7246279855501044474_i64);
_20.fld0.fld1.fld6 = core::ptr::addr_of_mut!(_9.1.3.0);
_12.1.3 = (_4.0.0, _3);
_20.fld2.fld0 = core::ptr::addr_of_mut!(_13);
Call(_4.1.3 = fn3(_9, _4.1.2, _8, _4.2, _2.0, _9.1, _12.1.3.0, _4.2, _4.0.1), ReturnTo(bb4), UnwindUnreachable())
}
bb6 = {
_12.0.0 = !_2.0;
_9.0.0 = _2.0 % 237614241085596780315378989032336969972_u128;
_19 = core::ptr::addr_of_mut!(_20.fld1);
_7 = core::ptr::addr_of_mut!(_12.1.3.0);
_20.fld0.fld1.fld4.fld3.0 = _11 as u64;
_4.1.4 = _1.1.4;
_20.fld3.1.1 = !(-108_i8);
_20.fld0.fld1.fld1 = core::ptr::addr_of!(_20.fld0.fld1.fld4.fld3.1.2);
Call(_9.0 = fn2(_4.0.1, _4.1, _9.1.0, _3, _4.1.3.0, _4.1, _1.1.1, _4, _1, _1.0.0, _4.1.3.0, _4.1.1, _1.1.3, _8), ReturnTo(bb3), UnwindUnreachable())
}
bb7 = {
_9.1.3 = (_9.0.0, _4.0.1);
Goto(bb2)
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
Return()
}
bb12 = {
_20.fld0.fld1.fld4.fld3.3 = _2.0 - _12.1.3.0;
_9.1.0 = _4.1.0;
_9.1 = _1.1;
(*_19) = (-8808509028990320880_i64) - 7886324626797100297_i64;
_20.fld0.fld1.fld4.fld3.1.2 = !57781_u16;
_18 = -_8;
_20.fld4 = ['\u{cd7a}','\u{39bbd}','\u{bc2b0}','\u{a552b}','\u{6f4a1}'];
_12.1.3 = (_9.1.3.0, _4.1.3.1);
_9.1.0 = core::ptr::addr_of_mut!(_20.fld0.fld1.fld5);
_9.1.1 = [_11,_8,_18];
_1.1.3.1 = _9.1.3.1 | _9.0.1;
_2 = (_1.1.3.0, _26.fld5.3.1);
_13.0 = (_1.1.4,);
_9.2 = core::ptr::addr_of_mut!(_13.0);
_6.3.0 = _1.1.3.0;
_20.fld0.fld1.fld4.fld3.1.0 = core::ptr::addr_of_mut!(_12.0);
match _3 {
0 => bb9,
1 => bb2,
2 => bb8,
3 => bb10,
2511709960 => bb13,
_ => bb7
}
}
bb13 = {
_26.fld5.1 = [_8,_11,_10];
_20.fld0.fld1.fld6 = _7;
_9.2 = core::ptr::addr_of_mut!(_13.0);
_26.fld5.3 = _1.1.3;
_12 = (_9.0, _1.1, _20.fld0.fld2.fld0);
_26.fld4.3 = (*_7) as i32;
_6.3.0 = _9.1.3.0 | _12.0.0;
_1.1.1 = [_10,_11,_18];
_20.fld2.fld4 = !_15;
_20.fld0.fld4 = _26.fld4.3 as i16;
RET = _20.fld0.fld1.fld4.fld3.0;
_20.fld0.fld1.fld4.fld5 = (_2.0, _9.0.1);
_37.fld3 = _19;
_1.2 = _4.2;
_21 = _20.fld0.fld4 as f64;
_20.fld0.fld1.fld4.fld5.0 = _20.fld0.fld1.fld4.fld3.3;
_20.fld0.fld2.fld0 = core::ptr::addr_of_mut!(_13.0);
_4.2 = core::ptr::addr_of_mut!(_13.0);
_20.fld3.4 = !_26.fld0.4.4;
_15 = !_20.fld2.fld4;
_26.fld4 = (_2.1, _18, _24, _5);
_29 = (_9.0.1, _10, _24, _26.fld4.3);
Goto(bb14)
}
bb14 = {
_26.fld5.2 = _4.1.2;
_39 = ['\u{ad38f}','\u{fdd81}','\u{60596}','\u{5c885}','\u{38697}'];
_1.1.3 = (_26.fld5.3.0, _26.fld4.0);
_20.fld0.fld3 = _37.fld3;
_37.fld1.fld4.fld3.0 = _20.fld0.fld1.fld4.fld3.0 << _20.fld0.fld1.fld4.fld5.1;
_20.fld0.fld1.fld7 = ['\u{f41c}','\u{a5e09}','\u{e40e5}'];
_37.fld1.fld4.fld5.0 = !_12.0.0;
_20.fld2.fld3 = _26.fld4.2;
_37.fld1.fld6 = _20.fld0.fld1.fld6;
Goto(bb15)
}
bb15 = {
Call(_42 = dump_var(1_usize, 10_usize, Move(_10), 15_usize, Move(_15), 39_usize, Move(_39), 3_usize, Move(_3)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_42 = dump_var(1_usize, 24_usize, Move(_24), 29_usize, Move(_29), 43_usize, _43, 43_usize, _43), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn2(mut _1: u32,mut _2: (*mut i32, [isize; 3], bool, (u128, u32), u8),mut _3: *mut i32,mut _4: u32,mut _5: u128,mut _6: (*mut i32, [isize; 3], bool, (u128, u32), u8),mut _7: [isize; 3],mut _8: ((u128, u32), (*mut i32, [isize; 3], bool, (u128, u32), u8), *mut (u8,)),mut _9: ((u128, u32), (*mut i32, [isize; 3], bool, (u128, u32), u8), *mut (u8,)),mut _10: u128,mut _11: u128,mut _12: [isize; 3],mut _13: (u128, u32),mut _14: isize) -> (u128, u32) {
mir! {
type RET = (u128, u32);
let _15: Adt57;
let _16: isize;
let _17: isize;
let _18: [i32; 5];
let _19: f32;
let _20: (u8,);
let _21: u16;
let _22: (i8, i128, u64, f32, u16);
let _23: char;
let _24: isize;
let _25: u16;
let _26: (u64, usize, f32, u8, i128);
let _27: isize;
let _28: Adt58;
let _29: i8;
let _30: char;
let _31: isize;
let _32: f32;
let _33: f32;
let _34: (u8,);
let _35: *const u16;
let _36: [char; 3];
let _37: u8;
let _38: char;
let _39: u64;
let _40: *mut (u64, (*mut (u128, u32), i8, u16), i8, u128, i128);
let _41: ();
let _42: ();
{
_9.1.1 = _2.1;
_9.1.3.1 = _13.1 % 826600918_u32;
_13.0 = _11;
RET.1 = !_13.1;
_16 = -_14;
_17 = _14;
_9.0 = (_13.0, _8.1.3.1);
Goto(bb1)
}
bb1 = {
_9.1.2 = !_8.1.2;
_6.3 = _8.0;
_18 = [(*_3),(*_3),(*_3),(*_3),(*_3)];
_15.fld2.fld0 = (-160465805694182094313199842709568923811_i128) as f64;
_15.fld1 = -(-12711424803289941947458090937159992124_i128);
_10 = !_8.1.3.0;
RET.0 = !_10;
_15.fld4 = _2.3.0 as usize;
_15.fld2.fld0 = (*_3) as f64;
_19 = _15.fld1 as f32;
_15.fld3 = [_15.fld4,_15.fld4];
_15.fld4 = 0_usize;
_8.1 = (_6.0, _12, _9.1.2, _13, _9.1.4);
_2.0 = _6.0;
_8.1.3 = (_5, _2.3.1);
RET.1 = _8.1.4 as u32;
match _2.3.0 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
195204108696045374011197018948682017634 => bb7,
_ => bb6
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
_6.3.1 = _13.1;
_9.1.3.1 = _2.3.1 / 1710442206_u32;
_22.1 = _15.fld1;
_9 = _8;
_21 = _19 as u16;
_22.3 = _11 as f32;
_20 = (_6.4,);
_9.0 = (_2.3.0, _9.1.3.1);
_8.1.4 = !_20.0;
_22.0 = (-37_i8) - (-115_i8);
_2.3.1 = !_9.0.1;
_9.1.4 = !_8.1.4;
_2.4 = _20.0;
_9.1.0 = core::ptr::addr_of_mut!((*_3));
_23 = '\u{10b40f}';
Goto(bb8)
}
bb8 = {
_22.4 = _6.4 as u16;
_22.2 = !2429923089878377118_u64;
_6.4 = _15.fld4 as u8;
RET = (_11, _4);
Goto(bb9)
}
bb9 = {
_26.0 = _22.2;
_9.1.1 = [_16,_17,_14];
_12 = [_17,_14,_17];
_9.1.2 = _9.0.1 >= _8.1.3.1;
_20.0 = _2.4 / 146_u8;
_8.1.2 = _17 <= _14;
_26.2 = _22.3;
_2.1 = [_14,_16,_14];
_25 = _21;
_25 = !_21;
_25 = _8.1.2 as u16;
RET.0 = _8.1.3.0 << _9.0.0;
_26.3 = _6.4 - _6.4;
_1 = _15.fld2.fld0 as u32;
_2.3.1 = _26.2 as u32;
_9.1.3.1 = _8.1.3.1 << _5;
match _15.fld4 {
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb7,
0 => bb10,
_ => bb6
}
}
bb10 = {
_9.1.2 = !_8.1.2;
_8.0.0 = _9.0.0 % 52885313332505666640196735104851032692_u128;
_32 = _19 / (-0.00000000000000000000000000000000000001106653321684788_f32);
_13.1 = _8.0.1;
_28.fld2 = _15.fld4 * _15.fld4;
_15.fld3 = [_28.fld2,_15.fld4];
_9.1.3.0 = _5 << _8.0.1;
_8.1.3.1 = _2.3.1;
_8.1.3.1 = _9.1.3.1 & _13.1;
_8.1.4 = _20.0 << _8.0.1;
_22.3 = -_19;
_9.1.4 = _2.4;
_34.0 = _2.4 >> _9.1.3.0;
_20 = _34;
_22.3 = (-4816931152828027143_i64) as f32;
_21 = _25 * _22.4;
_2.1 = _7;
_9.2 = _8.2;
_2.0 = core::ptr::addr_of_mut!((*_3));
_15.fld1 = _22.1 | _22.1;
_15.fld2.fld0 = _22.0 as f64;
_9.1.1 = _8.1.1;
_24 = (*_3) as isize;
_34.0 = !_2.4;
_5 = _6.3.0;
_20.0 = _22.0 as u8;
match _13.0 {
0 => bb1,
1 => bb5,
2 => bb6,
3 => bb11,
195204108696045374011197018948682017634 => bb13,
_ => bb12
}
}
bb11 = {
Return()
}
bb12 = {
_9.1.2 = !_8.1.2;
_6.3 = _8.0;
_18 = [(*_3),(*_3),(*_3),(*_3),(*_3)];
_15.fld2.fld0 = (-160465805694182094313199842709568923811_i128) as f64;
_15.fld1 = -(-12711424803289941947458090937159992124_i128);
_10 = !_8.1.3.0;
RET.0 = !_10;
_15.fld4 = _2.3.0 as usize;
_15.fld2.fld0 = (*_3) as f64;
_19 = _15.fld1 as f32;
_15.fld3 = [_15.fld4,_15.fld4];
_15.fld4 = 0_usize;
_8.1 = (_6.0, _12, _9.1.2, _13, _9.1.4);
_2.0 = _6.0;
_8.1.3 = (_5, _2.3.1);
RET.1 = _8.1.4 as u32;
match _2.3.0 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
195204108696045374011197018948682017634 => bb7,
_ => bb6
}
}
bb13 = {
_8.1.3.0 = _8.0.0 / 72531656158433749802568190558493967020_u128;
RET.1 = _8.1.3.1 << _8.0.0;
_6 = (_8.1.0, _2.1, _9.1.2, _2.3, _8.1.4);
_30 = _23;
_26.2 = _22.3 + _32;
_23 = _30;
Goto(bb14)
}
bb14 = {
Call(_41 = dump_var(2_usize, 16_usize, Move(_16), 17_usize, Move(_17), 1_usize, Move(_1), 34_usize, Move(_34)), ReturnTo(bb15), UnwindUnreachable())
}
bb15 = {
Call(_41 = dump_var(2_usize, 14_usize, Move(_14), 25_usize, Move(_25), 7_usize, Move(_7), 10_usize, Move(_10)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_41 = dump_var(2_usize, 23_usize, Move(_23), 42_usize, _42, 42_usize, _42, 42_usize, _42), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn3(mut _1: ((u128, u32), (*mut i32, [isize; 3], bool, (u128, u32), u8), *mut (u8,)),mut _2: bool,mut _3: isize,mut _4: *mut (u8,),mut _5: u128,mut _6: (*mut i32, [isize; 3], bool, (u128, u32), u8),mut _7: u128,mut _8: *mut (u8,),mut _9: u32) -> (u128, u32) {
mir! {
type RET = (u128, u32);
let _10: f32;
let _11: Adt49;
let _12: ((u128, u32), (*mut i32, [isize; 3], bool, (u128, u32), u8), *mut (u8,));
let _13: Adt60;
let _14: char;
let _15: *mut u128;
let _16: isize;
let _17: Adt58;
let _18: *mut u128;
let _19: *mut u32;
let _20: Adt58;
let _21: isize;
let _22: Adt52;
let _23: u64;
let _24: [u64; 6];
let _25: (i8, i128, u64, f32, u16);
let _26: *const (u64, (*mut (u128, u32), i8, u16), i8, u128, i128);
let _27: i32;
let _28: char;
let _29: Adt54;
let _30: (u128, u32);
let _31: *mut (u8,);
let _32: [usize; 2];
let _33: (u64, usize, f32, u8, i128);
let _34: i128;
let _35: [usize; 2];
let _36: bool;
let _37: i32;
let _38: f32;
let _39: u8;
let _40: (i8, usize, u16);
let _41: [usize; 2];
let _42: *mut ((u8,), *mut i32);
let _43: ();
let _44: ();
{
RET.1 = (-899664007_i32) as u32;
_6.4 = (*_4).0 / 99_u8;
_1.1.3.0 = !_5;
_11.fld3.0 = 2087374063896645310_u64;
_6.1 = [_3,_3,_3];
match _7 {
195204108696045374011197018948682017634 => bb2,
_ => bb1
}
}
bb1 = {
Return()
}
bb2 = {
_1.1.3 = (_7, _1.0.1);
(*_4).0 = !_1.1.4;
_11.fld3.4 = 936368424936333379_usize as i128;
_11.fld5 = _1.0;
_1.1.0 = _6.0;
_12.1.3.0 = _7;
_12.0.0 = _6.3.0 - _1.0.0;
_6.3 = (_5, _1.1.3.1);
_9 = !_6.3.1;
_6 = (_1.1.0, _1.1.1, _2, _1.1.3, (*_8).0);
_11.fld1 = [(-1880579980_i32),(-1167858232_i32),(-1540715581_i32),669362806_i32,67645782_i32];
_4 = _1.2;
_12.0 = _1.0;
_1.2 = core::ptr::addr_of_mut!((*_8));
_1.1.3 = (_11.fld5.0, _6.3.1);
_13.fld1.fld2.1 = 12833994822163011106_usize - 4_usize;
_11.fld5.0 = _1.0.1 as u128;
RET.1 = _11.fld3.0 as u32;
_13.fld1.fld0 = ((*_8).0,);
_11.fld3.2 = (-65_i8) * (-63_i8);
_13.fld1.fld2 = (_11.fld3.2, 1_usize, 5620_u16);
_13.fld0 = _6.2;
RET.0 = !_1.0.0;
Call(_13.fld1 = fn4(_1.0, _6, _5, _1.1, _1.0.0, _11.fld3.2, _1.1.1, (*_4).0, _1.1.3, _1), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_13.fld1.fld4.3.0 = _5 + _7;
_13.fld1.fld5 = [(-542741068_i32),(-534081090_i32),1737099111_i32,510458744_i32,(-1475222578_i32)];
_5 = !_11.fld5.0;
_6.2 = !_2;
(*_4).0 = _13.fld1.fld4.4;
_11.fld3.1.0 = core::ptr::addr_of_mut!(_11.fld5);
_12.1.3.1 = _13.fld1.fld4.3.1 + _11.fld5.1;
_13.fld2 = core::ptr::addr_of_mut!(_12.1.3.1);
Call(_1.1.1 = core::intrinsics::transmute(_6.1), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_1.0.1 = _1.1.3.1;
_12.1 = (_6.0, _13.fld1.fld4.1, _2, _11.fld5, _6.4);
_4 = core::ptr::addr_of_mut!((*_8));
_4 = _1.2;
_11.fld2 = core::ptr::addr_of_mut!(_11.fld3);
_13.fld1.fld1 = !_13.fld1.fld2.2;
_11.fld3.3 = _13.fld1.fld1 as u128;
_1.1.4 = _6.4 << _1.0.0;
_13.fld1.fld4.2 = !_12.1.2;
_13.fld1.fld4.1 = [_3,_3,_3];
(*_4).0 = _11.fld3.4 as u8;
RET.1 = 8776953533950540532_i64 as u32;
_11.fld3.1.1 = _13.fld1.fld3 + _11.fld3.2;
(*_8) = _13.fld1.fld0;
_1 = (_12.0, _13.fld1.fld4, _4);
(*_8) = (_13.fld1.fld0.0,);
_1.0.1 = _1.1.3.1 + _9;
_6.3.0 = !_5;
_13.fld5 = core::ptr::addr_of!(_13.fld1.fld2.2);
match _7 {
0 => bb1,
1 => bb2,
195204108696045374011197018948682017634 => bb5,
_ => bb3
}
}
bb5 = {
_12.0 = (_12.1.3.0, _1.0.1);
_11.fld3.3 = _5 % 161650473813617136830578753224601544393_u128;
_6.2 = !_13.fld1.fld4.2;
_13.fld1.fld2.0 = _11.fld3.2 - _13.fld1.fld3;
RET.1 = _13.fld1.fld4.3.1;
_18 = core::ptr::addr_of_mut!(_1.0.0);
_13.fld1.fld4.1 = [_3,_3,_3];
(*_18) = _12.1.3.0;
_11.fld0 = _12.0.1 - _12.0.1;
_13.fld1.fld0.0 = _1.1.4;
(*_4).0 = _13.fld1.fld0.0;
_6.3.0 = _11.fld3.0 as u128;
_11.fld3.1.0 = core::ptr::addr_of_mut!(_1.0);
_14 = '\u{cfc6e}';
_13.fld0 = _13.fld1.fld4.2;
_12.2 = core::ptr::addr_of_mut!(_13.fld1.fld0);
_1.1.2 = !_13.fld0;
_11.fld3.0 = !5546988702393285657_u64;
_11.fld3.0 = 13695250783320517856_u64 + 7737897094924582538_u64;
_22.fld1 = core::ptr::addr_of!(_13.fld1.fld2.2);
_22.fld4.fld3.1.2 = _13.fld1.fld2.2;
_22.fld2 = _3;
_20.fld1 = [_14,_14,_14];
RET.1 = _22.fld4.fld3.1.2 as u32;
_20.fld0 = [_11.fld3.0,_11.fld3.0,_11.fld3.0,_11.fld3.0,_11.fld3.0,_11.fld3.0];
Call(_22.fld4.fld3 = fn6(_1, _22.fld1, _11.fld3.1.0, _11.fld0, _6.3.0, _11.fld3.0, _11.fld3.1.0, _18, _11.fld3.3, _6.0, _13.fld1.fld4.3, _13.fld1.fld1, (*_8).0, _1.1.0, _13.fld1.fld0, _11.fld1), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
(*_8) = (_1.1.4,);
_17.fld1 = _20.fld1;
_17 = Adt58 { fld0: _20.fld0,fld1: _20.fld1,fld2: _13.fld1.fld2.1 };
_17 = Adt58 { fld0: _20.fld0,fld1: _20.fld1,fld2: _13.fld1.fld2.1 };
_11.fld3.1 = _22.fld4.fld3.1;
_12.1.3.1 = _22.fld4.fld3.4 as u32;
_27 = _22.fld4.fld3.0 as i32;
_6.3.1 = _11.fld0;
Goto(bb7)
}
bb7 = {
_22.fld4.fld3.4 = _22.fld2 as i128;
_13.fld1.fld4.3 = _6.3;
_12.1.3 = (_11.fld3.3, _11.fld0);
_22.fld4.fld5.1 = _12.0.1;
_1.1.2 = !_13.fld0;
_12.1.3.1 = _11.fld5.1;
_22.fld0 = [_22.fld2,_22.fld2,_22.fld2];
_5 = _11.fld0 as u128;
_11.fld3.0 = !_22.fld4.fld3.0;
_12.1.3.1 = _13.fld1.fld4.3.1 | _6.3.1;
_25.1 = 372_i16 as i128;
_1.1 = (_13.fld1.fld4.0, _6.1, _13.fld1.fld4.2, _12.1.3, (*_8).0);
_11.fld5.1 = _13.fld1.fld0.0 as u32;
_1.0 = (_5, _12.1.3.1);
_13.fld2 = core::ptr::addr_of_mut!(_6.3.1);
_1.1.3.0 = _5 >> _6.3.1;
_13.fld1.fld4.3.0 = !_1.1.3.0;
_22.fld4.fld3 = (_11.fld3.0, _11.fld3.1, _11.fld3.1.1, _5, _25.1);
_22.fld4.fld4 = 694510940666831083_i64 as i16;
_25.0 = _11.fld3.2;
_13.fld1.fld0.0 = (*_8).0;
_23 = _11.fld3.0;
_22.fld4.fld3.3 = !_13.fld1.fld4.3.0;
match _13.fld1.fld2.1 {
0 => bb6,
1 => bb2,
2 => bb5,
1775993762431912711 => bb9,
_ => bb8
}
}
bb8 = {
(*_8) = (_1.1.4,);
_17.fld1 = _20.fld1;
_17 = Adt58 { fld0: _20.fld0,fld1: _20.fld1,fld2: _13.fld1.fld2.1 };
_17 = Adt58 { fld0: _20.fld0,fld1: _20.fld1,fld2: _13.fld1.fld2.1 };
_11.fld3.1 = _22.fld4.fld3.1;
_12.1.3.1 = _22.fld4.fld3.4 as u32;
_27 = _22.fld4.fld3.0 as i32;
_6.3.1 = _11.fld0;
Goto(bb7)
}
bb9 = {
_4 = core::ptr::addr_of_mut!((*_4));
_22.fld6 = core::ptr::addr_of_mut!(_1.0.0);
_13.fld1.fld4 = _12.1;
_6 = (_13.fld1.fld4.0, _13.fld1.fld4.1, _12.1.2, _1.1.3, (*_4).0);
_6.2 = _13.fld1.fld4.2;
_1.0 = _12.1.3;
_33.1 = !_17.fld2;
_13.fld1.fld4.4 = (*_8).0 - (*_8).0;
_1.0 = (_22.fld4.fld3.3, _1.1.3.1);
_33.3 = _14 as u8;
_11.fld3.1.1 = _22.fld4.fld3.1.1;
_13.fld1.fld4.3 = _1.0;
_22.fld7 = [_14,_14,_14];
_20.fld1 = [_14,_14,_14];
_13.fld3 = [_14,_14,_14];
_30 = _12.1.3;
_22.fld4.fld3.1 = (_11.fld3.1.0, _22.fld4.fld3.2, _11.fld3.1.2);
_35 = [_17.fld2,_33.1];
match _22.fld4.fld3.2 {
0 => bb6,
1 => bb2,
2 => bb4,
340282366920938463463374607431768211419 => bb11,
_ => bb10
}
}
bb10 = {
_12.0 = (_12.1.3.0, _1.0.1);
_11.fld3.3 = _5 % 161650473813617136830578753224601544393_u128;
_6.2 = !_13.fld1.fld4.2;
_13.fld1.fld2.0 = _11.fld3.2 - _13.fld1.fld3;
RET.1 = _13.fld1.fld4.3.1;
_18 = core::ptr::addr_of_mut!(_1.0.0);
_13.fld1.fld4.1 = [_3,_3,_3];
(*_18) = _12.1.3.0;
_11.fld0 = _12.0.1 - _12.0.1;
_13.fld1.fld0.0 = _1.1.4;
(*_4).0 = _13.fld1.fld0.0;
_6.3.0 = _11.fld3.0 as u128;
_11.fld3.1.0 = core::ptr::addr_of_mut!(_1.0);
_14 = '\u{cfc6e}';
_13.fld0 = _13.fld1.fld4.2;
_12.2 = core::ptr::addr_of_mut!(_13.fld1.fld0);
_1.1.2 = !_13.fld0;
_11.fld3.0 = !5546988702393285657_u64;
_11.fld3.0 = 13695250783320517856_u64 + 7737897094924582538_u64;
_22.fld1 = core::ptr::addr_of!(_13.fld1.fld2.2);
_22.fld4.fld3.1.2 = _13.fld1.fld2.2;
_22.fld2 = _3;
_20.fld1 = [_14,_14,_14];
RET.1 = _22.fld4.fld3.1.2 as u32;
_20.fld0 = [_11.fld3.0,_11.fld3.0,_11.fld3.0,_11.fld3.0,_11.fld3.0,_11.fld3.0];
Call(_22.fld4.fld3 = fn6(_1, _22.fld1, _11.fld3.1.0, _11.fld0, _6.3.0, _11.fld3.0, _11.fld3.1.0, _18, _11.fld3.3, _6.0, _13.fld1.fld4.3, _13.fld1.fld1, (*_8).0, _1.1.0, _13.fld1.fld0, _11.fld1), ReturnTo(bb6), UnwindUnreachable())
}
bb11 = {
_15 = _22.fld6;
_15 = core::ptr::addr_of_mut!(_22.fld4.fld5.0);
(*_4).0 = _13.fld1.fld0.0 << _1.0.1;
_12.1.3.0 = _27 as u128;
match _11.fld3.1.1 {
340282366920938463463374607431768211419 => bb12,
_ => bb3
}
}
bb12 = {
_11.fld3 = (_23, _22.fld4.fld3.1, _22.fld4.fld3.1.1, _1.1.3.0, _22.fld4.fld3.4);
_20.fld0 = [_22.fld4.fld3.0,_11.fld3.0,_23,_11.fld3.0,_23,_11.fld3.0];
_33.2 = _3 as f32;
_31 = _8;
_20.fld0 = _17.fld0;
_22.fld4.fld3.1.2 = !_11.fld3.1.2;
_22.fld3 = [_14,_14,_14,_14,_14];
_11.fld3.1.0 = core::ptr::addr_of_mut!(_11.fld5);
_26 = core::ptr::addr_of!(_11.fld3);
_11.fld5 = ((*_18), _1.0.1);
_13.fld1.fld4.0 = _1.1.0;
_24 = [(*_26).0,_23,_22.fld4.fld3.0,_11.fld3.0,_11.fld3.0,(*_26).0];
_17.fld2 = !_33.1;
_12.1.4 = _13.fld1.fld2.1 as u8;
_33.1 = !_13.fld1.fld2.1;
_22.fld4 = Adt49 { fld0: _11.fld5.1,fld1: _11.fld1,fld2: _11.fld2,fld3: (*_26),fld4: (-15535_i16),fld5: _1.0 };
(*_26).2 = _22.fld4.fld3.2;
_1.1 = (_13.fld1.fld4.0, _13.fld1.fld4.1, _2, _11.fld5, (*_31).0);
_25.3 = _33.2 + _33.2;
_12.0 = ((*_18), _30.1);
(*_26).1 = (_22.fld4.fld3.1.0, _11.fld3.2, _13.fld1.fld1);
Goto(bb13)
}
bb13 = {
_21 = -_3;
_17 = Adt58 { fld0: _20.fld0,fld1: _22.fld7,fld2: _13.fld1.fld2.1 };
_39 = (*_4).0 ^ (*_31).0;
_11.fld1 = [_27,_27,_27,_27,_27];
_30.0 = (*_26).3 & _11.fld3.3;
_11.fld3.1.0 = core::ptr::addr_of_mut!(_30);
(*_26).1.2 = !_13.fld1.fld1;
_12.1.3.0 = (*_26).3;
_13.fld2 = core::ptr::addr_of_mut!(_1.1.3.1);
_1.1.1 = [_21,_22.fld2,_3];
(*_26).1.1 = !_22.fld4.fld3.2;
_18 = _15;
_13.fld5 = core::ptr::addr_of!((*_26).1.2);
_33.1 = !_13.fld1.fld2.1;
_11.fld3.1.2 = _13.fld1.fld1;
_13.fld1.fld2.0 = -(*_26).1.1;
_22.fld4.fld1 = [_27,_27,_27,_27,_27];
_1.0 = (_12.0.0, _6.3.1);
_20.fld2 = _33.1;
_11.fld3.0 = _22.fld4.fld3.0;
_25.3 = _33.2 - _33.2;
_11.fld3.2 = _11.fld3.1.1 + _22.fld4.fld3.2;
_10 = _25.3 * _33.2;
_13.fld1.fld2.1 = _27 as usize;
_29.fld0.2 = _13.fld1.fld2.2;
Call(_6.4 = fn14(_22.fld4.fld3.1.2, _22.fld4.fld5, _13.fld1.fld4, _11.fld3.0, _13.fld1.fld4, Move(_17), _22.fld4.fld3.1.0, _1.0.0), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
_20 = Adt58 { fld0: _24,fld1: _22.fld7,fld2: _13.fld1.fld2.1 };
Goto(bb15)
}
bb15 = {
Call(_43 = dump_var(3_usize, 35_usize, Move(_35), 3_usize, Move(_3), 23_usize, Move(_23), 27_usize, Move(_27)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_43 = dump_var(3_usize, 2_usize, Move(_2), 21_usize, Move(_21), 44_usize, _44, 44_usize, _44), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn4(mut _1: (u128, u32),mut _2: (*mut i32, [isize; 3], bool, (u128, u32), u8),mut _3: u128,mut _4: (*mut i32, [isize; 3], bool, (u128, u32), u8),mut _5: u128,mut _6: i8,mut _7: [isize; 3],mut _8: u8,mut _9: (u128, u32),mut _10: ((u128, u32), (*mut i32, [isize; 3], bool, (u128, u32), u8), *mut (u8,))) -> Adt51 {
mir! {
type RET = Adt51;
let _11: (i8, i128, u64, f32, u16);
let _12: usize;
let _13: [char; 3];
let _14: [usize; 2];
let _15: usize;
let _16: isize;
let _17: bool;
let _18: Adt59;
let _19: bool;
let _20: ();
let _21: ();
{
RET.fld0 = (_2.4,);
RET.fld4.0 = _2.0;
_11.4 = 28364_u16 % 39341_u16;
RET.fld4 = (_10.1.0, _4.1, _4.2, _10.0, _2.4);
RET.fld0 = (_8,);
RET.fld2.1 = 2_usize >> _1.0;
_11.2 = _10.1.2 as u64;
RET.fld4.3 = (_10.0.0, _1.1);
_9.0 = !_10.1.3.0;
RET.fld3 = 1763938972_i32 as i8;
_11.1 = 85877141020095402544549738401832206795_i128;
_9 = (_10.1.3.0, _1.1);
RET.fld0 = (_2.4,);
_13 = ['\u{58a4c}','\u{3297f}','\u{da752}'];
RET.fld2 = (_6, 14472129515400029634_usize, _11.4);
_2.2 = _4.2 | _4.2;
RET.fld2.1 = 1775993762431912711_usize;
_1.0 = _6 as u128;
_10.1.3.0 = _10.0.0;
match _3 {
0 => bb1,
1 => bb2,
2 => bb3,
195204108696045374011197018948682017634 => bb5,
_ => bb4
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
_2.2 = !_4.2;
_2.1 = [(-9223372036854775808_isize),88_isize,(-9223372036854775808_isize)];
RET.fld4.3.1 = _9.1 / 2354544830_u32;
RET.fld4.0 = _4.0;
RET.fld5 = [456360117_i32,1086909064_i32,642233736_i32,1583131950_i32,(-1253222319_i32)];
_11.3 = _4.4 as f32;
RET.fld4.1 = [68_isize,(-9223372036854775808_isize),78_isize];
RET.fld4.2 = _4.2 | _10.1.2;
RET.fld5 = [1324718319_i32,(-436410336_i32),1076012461_i32,(-2021386186_i32),(-1160008406_i32)];
RET.fld2.0 = _6;
_10.0.1 = _11.4 as u32;
Call(_8 = fn5(_1.1, _9.1), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
_10.0 = (_4.3.0, _9.1);
_2.4 = _4.2 as u8;
RET.fld1 = _11.4;
_18.fld3.0 = _11.2 | _11.2;
Goto(bb7)
}
bb7 = {
Call(_20 = dump_var(4_usize, 1_usize, Move(_1), 5_usize, Move(_5), 8_usize, Move(_8), 13_usize, Move(_13)), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn5(mut _1: u32,mut _2: u32) -> u8 {
mir! {
type RET = u8;
let _3: *mut ((u8,), *mut i32);
let _4: char;
let _5: Adt56;
let _6: f32;
let _7: i128;
let _8: Adt54;
let _9: f64;
let _10: *mut (u64, (*mut (u128, u32), i8, u16), i8, u128, i128);
let _11: bool;
let _12: *mut (u64, usize, f32, u8, i128);
let _13: usize;
let _14: f64;
let _15: isize;
let _16: *const (u64, (*mut (u128, u32), i8, u16), i8, u128, i128);
let _17: char;
let _18: (u32, isize, [usize; 2], i32);
let _19: (i16, *mut (u64, (*mut (u128, u32), i8, u16), i8, u128, i128), i64, [i32; 5], (u64, (*mut (u128, u32), i8, u16), i8, u128, i128));
let _20: char;
let _21: u16;
let _22: [usize; 2];
let _23: [usize; 2];
let _24: [isize; 3];
let _25: ();
let _26: ();
{
RET = 18_u8;
RET = 113_u8 + 4_u8;
Goto(bb1)
}
bb1 = {
_2 = !_1;
Goto(bb2)
}
bb2 = {
_2 = _1 / 2793916954_u32;
_1 = !_2;
RET = 250_u8 ^ 252_u8;
_1 = _2;
_2 = _1 * _1;
_2 = (-68357279992340861283634629250801033465_i128) as u32;
_1 = !_2;
_4 = '\u{ec8e6}';
RET = !18_u8;
_4 = '\u{ab900}';
Goto(bb3)
}
bb3 = {
_5.fld0 = 93546861848966737616087706567752600221_u128 as f64;
_2 = 111442692786271753442778882793837405270_i128 as u32;
_1 = _5.fld0 as u32;
_6 = 17094656002834612515_u64 as f32;
RET = !35_u8;
_5.fld0 = 3349898357070040523_usize as f64;
RET = 130_u8;
_1 = _2 >> _2;
_1 = !_2;
_1 = _2;
RET = _1 as u8;
RET = 96_u8 & 74_u8;
RET = !196_u8;
_4 = '\u{3653c}';
_4 = '\u{af205}';
_2 = 61004083644079712760336712182666799037_i128 as u32;
RET = 76_u8 + 182_u8;
_2 = _1;
RET = 17_u8;
_2 = _1 & _1;
_6 = 65265_u16 as f32;
RET = 217_u8;
Goto(bb4)
}
bb4 = {
RET = (-5430084543164825732_i64) as u8;
_6 = 156788030639789538861409909538975635086_i128 as f32;
RET = 37_u8;
RET = _6 as u8;
RET = 42_u8;
_5.fld0 = 12846_u16 as f64;
Goto(bb5)
}
bb5 = {
_1 = 27_i8 as u32;
_6 = 302540041741695319729811360697674496910_u128 as f32;
_4 = '\u{767c2}';
_4 = '\u{8c1fe}';
RET = 174_u8 & 50_u8;
_5.fld0 = 7486_i16 as f64;
RET = 163_u8;
_7 = (-26393515781490981794928764628819147531_i128);
_2 = !_1;
_7 = 33545963514362766501433591096970777335_i128 + (-153522083636092217365361040060119671962_i128);
RET = 20_u8 - 106_u8;
_8.fld0.0 = 27083_u16 as i8;
_8.fld0.2 = 22418_u16 & 3672_u16;
_11 = false;
_8.fld0.1 = 0_usize + 5_usize;
_5.fld0 = _2 as f64;
Goto(bb6)
}
bb6 = {
_7 = (-118299169964445415601422759055824626294_i128) << _8.fld0.2;
_2 = _1 | _1;
_5.fld0 = _8.fld0.1 as f64;
_2 = !_1;
_8.fld0.2 = _11 as u16;
_5.fld0 = 35_u8 as f64;
RET = 134_u8;
_4 = '\u{13ca2}';
_15 = 26_isize;
_8.fld0 = (41_i8, 0_usize, 54029_u16);
_15 = (-9223372036854775808_isize) ^ 123_isize;
_14 = _5.fld0 - _5.fld0;
_8.fld0.1 = 4612716667915330880_usize;
_14 = -_5.fld0;
_8.fld0.1 = _15 as usize;
_8.fld0.1 = _15 as usize;
_8.fld0.1 = !3583675651076154113_usize;
_9 = _14 - _5.fld0;
_18.2 = [_8.fld0.1,_8.fld0.1];
_13 = !_8.fld0.1;
_17 = _4;
_15 = 27815_i16 as isize;
_18.3 = 104_u8 as i32;
Call(_19.4.2 = core::intrinsics::transmute(_11), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
_16 = core::ptr::addr_of!(_19.4);
_18.3 = -(-1359313167_i32);
match _8.fld0.0 {
0 => bb8,
1 => bb9,
2 => bb10,
3 => bb11,
4 => bb12,
41 => bb14,
_ => bb13
}
}
bb8 = {
_7 = (-118299169964445415601422759055824626294_i128) << _8.fld0.2;
_2 = _1 | _1;
_5.fld0 = _8.fld0.1 as f64;
_2 = !_1;
_8.fld0.2 = _11 as u16;
_5.fld0 = 35_u8 as f64;
RET = 134_u8;
_4 = '\u{13ca2}';
_15 = 26_isize;
_8.fld0 = (41_i8, 0_usize, 54029_u16);
_15 = (-9223372036854775808_isize) ^ 123_isize;
_14 = _5.fld0 - _5.fld0;
_8.fld0.1 = 4612716667915330880_usize;
_14 = -_5.fld0;
_8.fld0.1 = _15 as usize;
_8.fld0.1 = _15 as usize;
_8.fld0.1 = !3583675651076154113_usize;
_9 = _14 - _5.fld0;
_18.2 = [_8.fld0.1,_8.fld0.1];
_13 = !_8.fld0.1;
_17 = _4;
_15 = 27815_i16 as isize;
_18.3 = 104_u8 as i32;
Call(_19.4.2 = core::intrinsics::transmute(_11), ReturnTo(bb7), UnwindUnreachable())
}
bb9 = {
_1 = 27_i8 as u32;
_6 = 302540041741695319729811360697674496910_u128 as f32;
_4 = '\u{767c2}';
_4 = '\u{8c1fe}';
RET = 174_u8 & 50_u8;
_5.fld0 = 7486_i16 as f64;
RET = 163_u8;
_7 = (-26393515781490981794928764628819147531_i128);
_2 = !_1;
_7 = 33545963514362766501433591096970777335_i128 + (-153522083636092217365361040060119671962_i128);
RET = 20_u8 - 106_u8;
_8.fld0.0 = 27083_u16 as i8;
_8.fld0.2 = 22418_u16 & 3672_u16;
_11 = false;
_8.fld0.1 = 0_usize + 5_usize;
_5.fld0 = _2 as f64;
Goto(bb6)
}
bb10 = {
RET = (-5430084543164825732_i64) as u8;
_6 = 156788030639789538861409909538975635086_i128 as f32;
RET = 37_u8;
RET = _6 as u8;
RET = 42_u8;
_5.fld0 = 12846_u16 as f64;
Goto(bb5)
}
bb11 = {
_5.fld0 = 93546861848966737616087706567752600221_u128 as f64;
_2 = 111442692786271753442778882793837405270_i128 as u32;
_1 = _5.fld0 as u32;
_6 = 17094656002834612515_u64 as f32;
RET = !35_u8;
_5.fld0 = 3349898357070040523_usize as f64;
RET = 130_u8;
_1 = _2 >> _2;
_1 = !_2;
_1 = _2;
RET = _1 as u8;
RET = 96_u8 & 74_u8;
RET = !196_u8;
_4 = '\u{3653c}';
_4 = '\u{af205}';
_2 = 61004083644079712760336712182666799037_i128 as u32;
RET = 76_u8 + 182_u8;
_2 = _1;
RET = 17_u8;
_2 = _1 & _1;
_6 = 65265_u16 as f32;
RET = 217_u8;
Goto(bb4)
}
bb12 = {
_2 = _1 / 2793916954_u32;
_1 = !_2;
RET = 250_u8 ^ 252_u8;
_1 = _2;
_2 = _1 * _1;
_2 = (-68357279992340861283634629250801033465_i128) as u32;
_1 = !_2;
_4 = '\u{ec8e6}';
RET = !18_u8;
_4 = '\u{ab900}';
Goto(bb3)
}
bb13 = {
_2 = !_1;
Goto(bb2)
}
bb14 = {
_19.4.3 = !57882409927860638759643855349017583284_u128;
_19.1 = core::ptr::addr_of_mut!(_19.4);
_11 = false;
RET = !164_u8;
_6 = _5.fld0 as f32;
_18.1 = _15;
(*_16).1.2 = _8.fld0.2;
_19.4.1.1 = !_8.fld0.0;
_18.2 = [_13,_13];
_18.0 = !_1;
RET = 225_u8;
_5.fld0 = _13 as f64;
RET = !153_u8;
(*_16).4 = _7 ^ _7;
(*_16).0 = 13271769264299771296_u64 >> (*_16).1.1;
_13 = _8.fld0.1 * _8.fld0.1;
_21 = _8.fld0.2;
_19.4.2 = !(*_16).1.1;
_18.1 = -_15;
_19.4.3 = !42950312788185420405503368726837378073_u128;
(*_16).1.2 = _19.4.0 as u16;
(*_16).2 = _18.3 as i8;
_9 = _5.fld0 * _14;
Goto(bb15)
}
bb15 = {
Call(_25 = dump_var(5_usize, 7_usize, Move(_7), 13_usize, Move(_13), 4_usize, Move(_4), 21_usize, Move(_21)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_25 = dump_var(5_usize, 17_usize, Move(_17), 26_usize, _26, 26_usize, _26, 26_usize, _26), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn6(mut _1: ((u128, u32), (*mut i32, [isize; 3], bool, (u128, u32), u8), *mut (u8,)),mut _2: *const u16,mut _3: *mut (u128, u32),mut _4: u32,mut _5: u128,mut _6: u64,mut _7: *mut (u128, u32),mut _8: *mut u128,mut _9: u128,mut _10: *mut i32,mut _11: (u128, u32),mut _12: u16,mut _13: u8,mut _14: *mut i32,mut _15: (u8,),mut _16: [i32; 5]) -> (u64, (*mut (u128, u32), i8, u16), i8, u128, i128) {
mir! {
type RET = (u64, (*mut (u128, u32), i8, u16), i8, u128, i128);
let _17: f32;
let _18: Adt56;
let _19: [i32; 5];
let _20: *mut ((u8,), *mut i32);
let _21: i32;
let _22: [i32; 5];
let _23: Adt56;
let _24: u64;
let _25: [u64; 1];
let _26: ();
let _27: ();
{
_1.0 = (_1.1.3.0, (*_7).1);
(*_2) = (*_10) as u16;
_3 = _7;
RET.0 = 3309817419457911274_i64 as u64;
_6 = 17115481230620741100_u64;
_4 = (*_7).1 << (*_3).1;
Call(RET.2 = fn7(_9, (*_8), (*_3).1, _2), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_1.1.3.0 = (*_8);
(*_2) = _12;
_12 = (*_2) % 62551_u16;
(*_7).0 = _1.1.3.0 ^ _9;
RET.0 = _6 & _6;
(*_7).0 = _9 * _1.0.0;
_15 = (_1.1.4,);
(*_7).1 = !_1.0.1;
_1.0.1 = (*_7).0 as u32;
_9 = _1.1.3.0;
RET.1 = (_3, (-14_i8), _12);
_18.fld0 = (-18103_i16) as f64;
RET.0 = !_6;
_11 = (*_7);
RET.1.2 = (-25_i8) as u16;
(*_2) = !_12;
_12 = (*_2) + (*_2);
(*_3).1 = _1.0.1 % 3536833647_u32;
_1.0.0 = (*_3).0;
(*_3).0 = _1.0.0 ^ _11.0;
(*_14) = 964077912_i32 >> (*_8);
_1.1.1 = [101_isize,(-9223372036854775808_isize),9223372036854775807_isize];
_15.0 = !_13;
_18.fld0 = (*_8) as f64;
_5 = _1.1.2 as u128;
RET.4 = (-59153986700078807435327416531838183252_i128);
_8 = core::ptr::addr_of_mut!((*_7).0);
RET.1 = (_3, (-37_i8), (*_2));
_19 = _16;
Goto(bb2)
}
bb2 = {
(*_3).1 = !_4;
(*_3).1 = _1.1.2 as u32;
Call((*_7).1 = fn13(_8, _1.1.0, _1, _15.0, _2, _10, (*_2), _1.1.3.0), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_1.1.1 = [9223372036854775807_isize,9223372036854775807_isize,(-79_isize)];
_1.1.1 = [(-9223372036854775808_isize),84_isize,9223372036854775807_isize];
(*_8) = !_11.0;
(*_14) = !570955090_i32;
RET.3 = 7499393786153085799_i64 as u128;
(*_14) = !598599835_i32;
(*_7).1 = _4;
(*_10) = (-1350688102_i32) * (-136904474_i32);
_1.1.3 = ((*_3).0, _4);
RET.1.0 = core::ptr::addr_of_mut!((*_3));
_25 = [_6];
_1.1.2 = _4 <= (*_3).1;
_1.1.4 = _13;
_13 = !_15.0;
_12 = (*_2);
Goto(bb4)
}
bb4 = {
Call(_26 = dump_var(6_usize, 13_usize, Move(_13), 19_usize, Move(_19), 12_usize, Move(_12), 5_usize, Move(_5)), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
Call(_26 = dump_var(6_usize, 25_usize, Move(_25), 27_usize, _27, 27_usize, _27, 27_usize, _27), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn7(mut _1: u128,mut _2: u128,mut _3: u32,mut _4: *const u16) -> i8 {
mir! {
type RET = i8;
let _5: (u8,);
let _6: (*mut (u128, u32), i8, u16);
let _7: Adt49;
let _8: Adt54;
let _9: i16;
let _10: (i16, *mut (u64, (*mut (u128, u32), i8, u16), i8, u128, i128), i64, [i32; 5], (u64, (*mut (u128, u32), i8, u16), i8, u128, i128));
let _11: char;
let _12: [isize; 3];
let _13: [u64; 1];
let _14: Adt54;
let _15: (u64, usize, f32, u8, i128);
let _16: (u32, isize, [usize; 2], i32);
let _17: Adt54;
let _18: ();
let _19: ();
{
(*_4) = 42562_u16 * 12761_u16;
_4 = core::ptr::addr_of!((*_4));
_2 = _1 | _1;
RET = (-103_i8);
_3 = !3275887222_u32;
(*_4) = _2 as u16;
Call((*_4) = fn8(_2, _4, _2, _3, _4, _4, _3, _2, _4, _1, _2, _3, _2, _3, _1), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_3 = (*_4) as u32;
_5 = (224_u8,);
(*_4) = 47519_u16;
_3 = 585001559_u32 & 203891882_u32;
_4 = core::ptr::addr_of!((*_4));
_6.2 = (*_4) % 55496_u16;
_7.fld5 = (_2, _3);
RET = (-7246_i16) as i8;
_6.2 = 2316924436338133786_usize as u16;
_7.fld3.4 = 38148628854808497866878606067599379238_i128 * (-168171583387009875658073589901954942424_i128);
_8.fld0 = (87_i8, 0_usize, (*_4));
_4 = core::ptr::addr_of!((*_4));
_4 = core::ptr::addr_of!(_7.fld3.1.2);
(*_4) = _8.fld0.2 >> _7.fld5.0;
_7.fld3.0 = !18385536062609315644_u64;
match _8.fld0.1 {
0 => bb4,
_ => bb3
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
RET = _8.fld0.0;
_7.fld3.3 = !_1;
_8.fld0.1 = 15721860134671413921_usize >> (*_4);
_10.4.1.1 = !_8.fld0.0;
_6.2 = (*_4);
_10.4.2 = '\u{8a06b}' as i8;
_1 = _7.fld3.4 as u128;
_10.0 = _7.fld5.1 as i16;
_7.fld3.2 = !_8.fld0.0;
_10.4.1.0 = core::ptr::addr_of_mut!(_7.fld5);
_10.4.4 = (-8139838746403141307_i64) as i128;
_2 = _7.fld5.0 % 276909934106158705497434821124597658658_u128;
Goto(bb5)
}
bb5 = {
_10.1 = core::ptr::addr_of_mut!(_7.fld3);
(*_4) = '\u{6ef73}' as u16;
RET = _6.2 as i8;
_14.fld0.1 = _7.fld3.3 as usize;
_8.fld0 = (_10.4.2, _14.fld0.1, _6.2);
_4 = core::ptr::addr_of!(_6.2);
_14.fld0.2 = _8.fld0.2 - _8.fld0.2;
_7.fld5.1 = _10.0 as u32;
_16.3 = !1983309130_i32;
_12 = [9223372036854775807_isize,(-103_isize),9223372036854775807_isize];
_7.fld3.1 = (_10.4.1.0, _7.fld3.2, _14.fld0.2);
_8.fld0.0 = _10.4.1.1 * _7.fld3.2;
_3 = _7.fld5.1 << _7.fld3.1.2;
_8.fld0.2 = false as u16;
_10.4.3 = !_7.fld5.0;
_7.fld1 = [_16.3,_16.3,_16.3,_16.3,_16.3];
_7.fld5.1 = _3;
_6 = _7.fld3.1;
Goto(bb6)
}
bb6 = {
Call(_18 = dump_var(7_usize, 1_usize, Move(_1), 3_usize, Move(_3), 19_usize, _19, 19_usize, _19), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn8(mut _1: u128,mut _2: *const u16,mut _3: u128,mut _4: u32,mut _5: *const u16,mut _6: *const u16,mut _7: u32,mut _8: u128,mut _9: *const u16,mut _10: u128,mut _11: u128,mut _12: u32,mut _13: u128,mut _14: u32,mut _15: u128) -> u16 {
mir! {
type RET = u16;
let _16: bool;
let _17: [u64; 1];
let _18: [u64; 6];
let _19: char;
let _20: Adt61;
let _21: usize;
let _22: *mut (u8,);
let _23: [i32; 5];
let _24: char;
let _25: (i8, usize, u16);
let _26: isize;
let _27: *mut (u8,);
let _28: i128;
let _29: char;
let _30: usize;
let _31: char;
let _32: i128;
let _33: *mut i64;
let _34: f32;
let _35: char;
let _36: isize;
let _37: ((u128, u32), (*mut i32, [isize; 3], bool, (u128, u32), u8), *mut (u8,));
let _38: (u128, u32);
let _39: (u32, isize, [usize; 2], i32);
let _40: (i8, i128, u64, f32, u16);
let _41: i32;
let _42: f32;
let _43: u64;
let _44: u16;
let _45: f32;
let _46: Adt59;
let _47: *mut (u64, usize, f32, u8, i128);
let _48: i32;
let _49: u128;
let _50: Adt51;
let _51: bool;
let _52: i16;
let _53: [usize; 2];
let _54: f64;
let _55: usize;
let _56: ();
let _57: ();
{
_10 = _1;
RET = 12660_u16;
_4 = !_14;
_13 = _1;
_2 = _6;
_16 = true;
_17 = [11872388172685013815_u64];
RET = 6803_u16 % 49705_u16;
_5 = _2;
_14 = _12;
_17 = [11466129051932800168_u64];
RET = (-10343_i16) as u16;
_3 = !_11;
_1 = _11 * _11;
_8 = _1 >> _10;
_6 = _2;
RET = (-5455417761293963403_i64) as u16;
_3 = !_8;
_2 = _5;
RET = 52143_u16;
Goto(bb1)
}
bb1 = {
_14 = !_7;
RET = 20105_u16 << _10;
_5 = _6;
RET = 29146_u16 * 45692_u16;
_14 = !_7;
_18 = [10355653967678069756_u64,8500134412732097143_u64,9564003267494331673_u64,13952912483189291109_u64,6458919739307823925_u64,5908393129364933351_u64];
_18 = [15012597938354504997_u64,9226006880986833405_u64,4987711108761834719_u64,12476131452829143221_u64,8287576993491565538_u64,14478380682922067887_u64];
_13 = 115_i8 as u128;
_20 = Adt61 { fld0: 24003_u16 };
_11 = _3;
_5 = core::ptr::addr_of!(_20.fld0);
_13 = !_3;
_3 = 111_u8 as u128;
_19 = '\u{7a3fe}';
_14 = _4;
_4 = _14;
_17 = [4026817965509349751_u64];
_20 = Adt61 { fld0: 25022_u16 };
_2 = core::ptr::addr_of!((*_5));
Call(_2 = fn9(_15, _20, _11, _16, _3, _17, (*_2), _6, _15, _5, (*_2), (*_2), _9, _18, _20.fld0, _12), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_20 = Adt61 { fld0: 15665_u16 };
match _20.fld0 {
15665 => bb4,
_ => bb3
}
}
bb3 = {
_14 = !_7;
RET = 20105_u16 << _10;
_5 = _6;
RET = 29146_u16 * 45692_u16;
_14 = !_7;
_18 = [10355653967678069756_u64,8500134412732097143_u64,9564003267494331673_u64,13952912483189291109_u64,6458919739307823925_u64,5908393129364933351_u64];
_18 = [15012597938354504997_u64,9226006880986833405_u64,4987711108761834719_u64,12476131452829143221_u64,8287576993491565538_u64,14478380682922067887_u64];
_13 = 115_i8 as u128;
_20 = Adt61 { fld0: 24003_u16 };
_11 = _3;
_5 = core::ptr::addr_of!(_20.fld0);
_13 = !_3;
_3 = 111_u8 as u128;
_19 = '\u{7a3fe}';
_14 = _4;
_4 = _14;
_17 = [4026817965509349751_u64];
_20 = Adt61 { fld0: 25022_u16 };
_2 = core::ptr::addr_of!((*_5));
Call(_2 = fn9(_15, _20, _11, _16, _3, _17, (*_2), _6, _15, _5, (*_2), (*_2), _9, _18, _20.fld0, _12), ReturnTo(bb2), UnwindUnreachable())
}
bb4 = {
_13 = !_11;
_2 = core::ptr::addr_of!((*_5));
_23 = [(-1089245489_i32),1926211749_i32,508784508_i32,130139266_i32,1424633348_i32];
_1 = _8;
_4 = (*_5) as u32;
(*_2) = 46413_u16;
(*_5) = !41106_u16;
RET = _20.fld0;
_9 = core::ptr::addr_of!(_20.fld0);
_21 = !4_usize;
_17 = [8134582756918779566_u64];
_20 = Adt61 { fld0: 56596_u16 };
RET = (*_2);
(*_9) = 5756933727125686634_i64 as u16;
_3 = !_8;
_5 = core::ptr::addr_of!((*_5));
(*_2) = _19 as u16;
_25.0 = (-92_i8);
_12 = _7 << _4;
_6 = _5;
_11 = _3 ^ _1;
_11 = !_3;
match _25.0 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb5,
4 => bb6,
340282366920938463463374607431768211364 => bb8,
_ => bb7
}
}
bb5 = {
_14 = !_7;
RET = 20105_u16 << _10;
_5 = _6;
RET = 29146_u16 * 45692_u16;
_14 = !_7;
_18 = [10355653967678069756_u64,8500134412732097143_u64,9564003267494331673_u64,13952912483189291109_u64,6458919739307823925_u64,5908393129364933351_u64];
_18 = [15012597938354504997_u64,9226006880986833405_u64,4987711108761834719_u64,12476131452829143221_u64,8287576993491565538_u64,14478380682922067887_u64];
_13 = 115_i8 as u128;
_20 = Adt61 { fld0: 24003_u16 };
_11 = _3;
_5 = core::ptr::addr_of!(_20.fld0);
_13 = !_3;
_3 = 111_u8 as u128;
_19 = '\u{7a3fe}';
_14 = _4;
_4 = _14;
_17 = [4026817965509349751_u64];
_20 = Adt61 { fld0: 25022_u16 };
_2 = core::ptr::addr_of!((*_5));
Call(_2 = fn9(_15, _20, _11, _16, _3, _17, (*_2), _6, _15, _5, (*_2), (*_2), _9, _18, _20.fld0, _12), ReturnTo(bb2), UnwindUnreachable())
}
bb6 = {
_20 = Adt61 { fld0: 15665_u16 };
match _20.fld0 {
15665 => bb4,
_ => bb3
}
}
bb7 = {
_14 = !_7;
RET = 20105_u16 << _10;
_5 = _6;
RET = 29146_u16 * 45692_u16;
_14 = !_7;
_18 = [10355653967678069756_u64,8500134412732097143_u64,9564003267494331673_u64,13952912483189291109_u64,6458919739307823925_u64,5908393129364933351_u64];
_18 = [15012597938354504997_u64,9226006880986833405_u64,4987711108761834719_u64,12476131452829143221_u64,8287576993491565538_u64,14478380682922067887_u64];
_13 = 115_i8 as u128;
_20 = Adt61 { fld0: 24003_u16 };
_11 = _3;
_5 = core::ptr::addr_of!(_20.fld0);
_13 = !_3;
_3 = 111_u8 as u128;
_19 = '\u{7a3fe}';
_14 = _4;
_4 = _14;
_17 = [4026817965509349751_u64];
_20 = Adt61 { fld0: 25022_u16 };
_2 = core::ptr::addr_of!((*_5));
Call(_2 = fn9(_15, _20, _11, _16, _3, _17, (*_2), _6, _15, _5, (*_2), (*_2), _9, _18, _20.fld0, _12), ReturnTo(bb2), UnwindUnreachable())
}
bb8 = {
_25 = (42_i8, _21, (*_5));
_24 = _19;
_21 = !_25.1;
_11 = _1;
(*_9) = !_25.2;
_26 = !(-9223372036854775808_isize);
_15 = _13;
(*_2) = !_25.2;
_19 = _24;
_7 = _4;
(*_2) = !_25.2;
RET = !_25.2;
(*_9) = _25.2 ^ _25.2;
_25.0 = (-100_i8) - (-23_i8);
_25.0 = (-86_i8);
_25 = (31_i8, _21, (*_5));
_14 = !_7;
_8 = !_13;
(*_9) = !_25.2;
_25 = ((-1_i8), _21, (*_2));
_25.0 = 57_i8 & 99_i8;
Call(_2 = fn10(_16, (*_2), _9, _5, _21, _7), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
_2 = core::ptr::addr_of!(_20.fld0);
(*_5) = _25.2 ^ _25.2;
_4 = _12 >> _11;
_28 = _4 as i128;
(*_2) = !_25.2;
(*_2) = _28 as u16;
(*_9) = _4 as u16;
Call((*_2) = fn11(_19, _6, _2, _21, _21, _11, _16, _16, _26, _5, _2, _19, _25.0, _19), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
(*_6) = _25.2 * _25.2;
_9 = core::ptr::addr_of!((*_2));
(*_9) = _25.0 as u16;
_7 = 1099850409_i32 as u32;
_10 = !_1;
_37.1.3 = (_11, _4);
(*_9) = !_25.2;
_20 = Adt61 { fld0: _25.2 };
_30 = _25.1 / 15829855966015447038_usize;
_15 = _8 ^ _13;
_13 = !_15;
_14 = _16 as u32;
_17 = [9639784671910540051_u64];
_17 = [14216005500912573185_u64];
_10 = _11 * _37.1.3.0;
_35 = _24;
_28 = !38878467641398634737745220807691547709_i128;
Goto(bb11)
}
bb11 = {
_36 = _26;
_37.0 = _37.1.3;
_6 = _5;
(*_9) = !_25.2;
_37.1.1 = [_26,_26,_26];
_11 = _13 - _3;
_4 = _37.1.3.1 ^ _37.1.3.1;
_21 = _30;
_28 = !73698640294554335640785327227635691481_i128;
RET = (*_5);
_37.1.4 = 38_u8 << _37.1.3.1;
Goto(bb12)
}
bb12 = {
_39.3 = 1544785089_i32;
_5 = core::ptr::addr_of!((*_6));
_5 = core::ptr::addr_of!((*_5));
_39.3 = -1278314011_i32;
_19 = _24;
_38.1 = !_4;
_43 = 8155433373339104963_u64 << _1;
_40.1 = _28 & _28;
_32 = _36 as i128;
_39.0 = _38.1 % 2249046815_u32;
_34 = _40.1 as f32;
_3 = _37.1.3.0 & _37.1.3.0;
_4 = _37.0.1 / 3675691892_u32;
_40 = (_25.0, _32, _43, _34, (*_6));
_2 = _9;
_45 = -_40.3;
_40.2 = !_43;
_46.fld3.4 = (*_9) as i128;
_39.1 = _36 + _36;
Goto(bb13)
}
bb13 = {
_37.1.0 = core::ptr::addr_of_mut!(_41);
_40.4 = (*_2);
_36 = _39.1 - _26;
_44 = (*_6) / 8573_u16;
(*_2) = _44;
_40 = (_25.0, _46.fld3.4, _43, _45, (*_2));
_38.0 = _10 & _10;
_6 = _2;
_44 = (*_2) | (*_6);
_10 = _15;
_40.4 = (*_2) % 45107_u16;
_34 = -_45;
_46.fld3.4 = (*_6) as i128;
_34 = -_45;
_16 = !true;
_40.1 = _28;
_5 = core::ptr::addr_of!((*_2));
_40.0 = _43 as i8;
(*_6) = _39.3 as u16;
_38 = (_15, _37.1.3.1);
RET = !_20.fld0;
_46.fld3.1 = _4 as usize;
Goto(bb14)
}
bb14 = {
_9 = core::ptr::addr_of!((*_6));
_50.fld0 = (_37.1.4,);
_46.fld7 = _46.fld3.4 | _46.fld3.4;
_39.3 = (-881220180_i32) + (-859954460_i32);
_52 = -4510_i16;
_25 = (_40.0, _46.fld3.1, (*_2));
_22 = core::ptr::addr_of_mut!(_50.fld0);
_24 = _35;
_50.fld2.1 = _46.fld3.1;
_12 = _37.1.3.1 << _1;
_46.fld3.0 = !_40.2;
_46.fld2 = [_19,_35,_35,_19,_19];
_50.fld3 = _25.0;
_25.0 = _50.fld3 >> _38.0;
_37.1.3.0 = !_3;
_50.fld4.0 = core::ptr::addr_of_mut!(_48);
_20.fld0 = _44 - _44;
(*_2) = _40.4 & _44;
_40.2 = _46.fld3.0 & _46.fld3.0;
_25 = (_50.fld3, _46.fld3.1, _44);
_50.fld0 = (_37.1.4,);
_48 = _50.fld2.1 as i32;
_9 = core::ptr::addr_of!(_40.4);
_50.fld1 = (*_2);
Goto(bb15)
}
bb15 = {
Call(_56 = dump_var(8_usize, 15_usize, Move(_15), 36_usize, Move(_36), 14_usize, Move(_14), 1_usize, Move(_1)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_56 = dump_var(8_usize, 28_usize, Move(_28), 11_usize, Move(_11), 21_usize, Move(_21), 16_usize, Move(_16)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_56 = dump_var(8_usize, 25_usize, Move(_25), 4_usize, Move(_4), 44_usize, Move(_44), 18_usize, Move(_18)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_56 = dump_var(8_usize, 8_usize, Move(_8), 10_usize, Move(_10), 43_usize, Move(_43), 57_usize, _57), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn9(mut _1: u128,mut _2: Adt61,mut _3: u128,mut _4: bool,mut _5: u128,mut _6: [u64; 1],mut _7: u16,mut _8: *const u16,mut _9: u128,mut _10: *const u16,mut _11: u16,mut _12: u16,mut _13: *const u16,mut _14: [u64; 6],mut _15: u16,mut _16: u32) -> *const u16 {
mir! {
type RET = *const u16;
let _17: *mut ((u8,), *mut i32);
let _18: [isize; 3];
let _19: (i8, i128, u64, f32, u16);
let _20: Adt63;
let _21: ();
let _22: ();
{
_6 = [10544578761345244829_u64];
_13 = _8;
_9 = _1;
(*_10) = _11 & _15;
_4 = _3 <= _1;
(*_10) = _2.fld0;
_4 = !true;
_2 = Adt61 { fld0: (*_10) };
_2.fld0 = (-8999043217396936396_i64) as u16;
_11 = (*_10) * (*_10);
_2 = Adt61 { fld0: (*_10) };
(*_10) = !_7;
(*_10) = _11;
RET = _13;
_20.fld0.fld1.fld0 = [(-9223372036854775808_isize),105_isize,30_isize];
_15 = !_12;
_20.fld0.fld4 = -(-12228_i16);
_14 = [15939064646064364880_u64,3533134793770368271_u64,17677276368720705636_u64,10501336953529180605_u64,4533497346195230430_u64,15850562456576534923_u64];
_20.fld0.fld1.fld4.fld1 = [256178264_i32,(-1054001170_i32),(-227603391_i32),2007793982_i32,(-140773309_i32)];
_20.fld2.fld6 = core::ptr::addr_of_mut!(_20.fld3);
(*_10) = !_2.fld0;
_20.fld2.fld6 = core::ptr::addr_of_mut!(_20.fld3);
_19.0 = (-84_i8) & (-83_i8);
_10 = _13;
Goto(bb1)
}
bb1 = {
Call(_21 = dump_var(9_usize, 12_usize, Move(_12), 5_usize, Move(_5), 16_usize, Move(_16), 14_usize, Move(_14)), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Call(_21 = dump_var(9_usize, 1_usize, Move(_1), 7_usize, Move(_7), 22_usize, _22, 22_usize, _22), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn10(mut _1: bool,mut _2: u16,mut _3: *const u16,mut _4: *const u16,mut _5: usize,mut _6: u32) -> *const u16 {
mir! {
type RET = *const u16;
let _7: bool;
let _8: isize;
let _9: *mut u128;
let _10: i8;
let _11: Adt59;
let _12: Adt64;
let _13: Adt57;
let _14: Adt50;
let _15: isize;
let _16: (u8,);
let _17: f32;
let _18: Adt54;
let _19: u128;
let _20: *mut (u128, u32);
let _21: Adt64;
let _22: Adt51;
let _23: u8;
let _24: i32;
let _25: isize;
let _26: char;
let _27: [isize; 3];
let _28: [usize; 2];
let _29: bool;
let _30: f32;
let _31: i8;
let _32: [u64; 6];
let _33: ();
let _34: ();
{
_3 = core::ptr::addr_of!((*_4));
RET = core::ptr::addr_of!((*_4));
(*_4) = !_2;
_3 = _4;
_1 = !true;
_4 = _3;
(*RET) = _2;
(*RET) = _2 & _2;
_10 = (-132514839084463225875612276194179680068_i128) as i8;
RET = core::ptr::addr_of!((*_4));
_11.fld3.3 = !180_u8;
_7 = !_1;
_11.fld6 = core::ptr::addr_of_mut!(_12.fld0);
_12 = Adt64 { fld0: (-876694908_i32) };
_11.fld0 = core::ptr::addr_of_mut!(_11.fld3);
_4 = core::ptr::addr_of!((*_4));
_12.fld0 = !(-1253220423_i32);
_11.fld3.1 = '\u{58369}' as usize;
_4 = core::ptr::addr_of!((*_3));
_3 = core::ptr::addr_of!((*_4));
Goto(bb1)
}
bb1 = {
_11.fld3.4 = (-7630688402372722674472203943016308566_i128);
_1 = _7;
_11.fld1 = '\u{cb4c1}';
_13.fld1 = _11.fld3.4 << (*_3);
RET = core::ptr::addr_of!((*_3));
_11.fld2 = [_11.fld1,_11.fld1,_11.fld1,_11.fld1,_11.fld1];
_14.fld0.3 = [_12.fld0,_12.fld0,_12.fld0,_12.fld0,_12.fld0];
_14.fld0.1 = core::ptr::addr_of_mut!(_14.fld0.4);
_14.fld0.4.1.0 = core::ptr::addr_of_mut!(_14.fld5.3);
_14.fld5.3.1 = _6;
(*RET) = _2 | _2;
_14.fld5.1 = [(-9223372036854775808_isize),9223372036854775807_isize,9223372036854775807_isize];
match _11.fld3.4 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
332651678518565740788902403488751902890 => bb9,
_ => bb8
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
_13.fld6 = core::ptr::addr_of_mut!(_14.fld0.4);
_14.fld0.4.4 = _13.fld1;
_14.fld5.3.0 = 270061571862069319454943885114904278755_u128 | 193259155693202740744866357340570637085_u128;
match _11.fld3.4 {
0 => bb1,
332651678518565740788902403488751902890 => bb10,
_ => bb8
}
}
bb10 = {
_11.fld3.0 = 4571662679568479889_u64 << (*RET);
(*RET) = _2;
_12.fld0 = 1958356011_i32 + 1404984121_i32;
_14.fld5.3 = (223990674424590333793483108214329408183_u128, _6);
_11.fld3.2 = _5 as f32;
_18.fld0 = (_10, _5, (*_4));
_14.fld4.2 = [_5,_5];
_12 = Adt64 { fld0: (-721444658_i32) };
Goto(bb11)
}
bb11 = {
_13.fld6 = _14.fld0.1;
(*RET) = _18.fld0.0 as u16;
_7 = _1;
_11.fld3.2 = _13.fld1 as f32;
_11.fld3.4 = !_13.fld1;
(*_4) = _1 as u16;
_7 = _1;
_11.fld0 = core::ptr::addr_of_mut!(_11.fld3);
_14.fld5.3.1 = _6 | _6;
_14.fld0.4.2 = -_10;
_16 = (_11.fld3.3,);
_13.fld3 = _14.fld4.2;
_14.fld5.2 = !_7;
_15 = !(-9223372036854775808_isize);
Goto(bb12)
}
bb12 = {
_18.fld0.0 = _12.fld0 as i8;
_14.fld0.0 = !(-23470_i16);
_14.fld4 = (_14.fld5.3.1, _15, _13.fld3, _12.fld0);
_8 = _14.fld4.1;
(*_3) = _2 / 34942_u16;
_14.fld1 = [_11.fld3.0,_11.fld3.0,_11.fld3.0,_11.fld3.0,_11.fld3.0,_11.fld3.0];
_21 = _12;
_14.fld3 = -_18.fld0.0;
Call((*RET) = core::intrinsics::bswap(_2), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
_14.fld0.2 = -8377407138592744510_i64;
_22.fld2.2 = !(*_4);
_13.fld4 = _11.fld3.1 - _5;
_8 = _14.fld4.1;
_22.fld4.3 = (_14.fld5.3.0, _14.fld4.0);
(*_3) = _14.fld5.3.1 as u16;
_5 = _13.fld4;
_22.fld4.3.0 = _14.fld5.3.0 << _13.fld4;
_3 = core::ptr::addr_of!((*RET));
_20 = _14.fld0.4.1.0;
_11.fld3.2 = (*_20).0 as f32;
_14.fld0.2 = 4690174244655091087_i64 ^ 7952485918750829496_i64;
_21.fld0 = _12.fld0 >> _2;
_11.fld3.1 = _5 * _13.fld4;
_16.0 = _11.fld3.3;
_18.fld0 = (_14.fld3, _13.fld4, _22.fld2.2);
_11.fld6 = core::ptr::addr_of_mut!(_12.fld0);
_11.fld4 = _20;
_13.fld2.fld0 = _11.fld3.0 as f64;
_22.fld4.4 = _14.fld0.2 as u8;
_11.fld7 = -_13.fld1;
_22.fld4.1 = [_15,_8,_15];
_14.fld0.4.1 = (_11.fld4, _18.fld0.0, _22.fld2.2);
_9 = core::ptr::addr_of_mut!((*_20).0);
_5 = _13.fld4;
(*_20) = (_22.fld4.3.0, _14.fld4.0);
_11.fld3.2 = _5 as f32;
match _12.fld0 {
0 => bb4,
1 => bb2,
2 => bb14,
340282366920938463463374607431046766798 => bb16,
_ => bb15
}
}
bb14 = {
_18.fld0.0 = _12.fld0 as i8;
_14.fld0.0 = !(-23470_i16);
_14.fld4 = (_14.fld5.3.1, _15, _13.fld3, _12.fld0);
_8 = _14.fld4.1;
(*_3) = _2 / 34942_u16;
_14.fld1 = [_11.fld3.0,_11.fld3.0,_11.fld3.0,_11.fld3.0,_11.fld3.0,_11.fld3.0];
_21 = _12;
_14.fld3 = -_18.fld0.0;
Call((*RET) = core::intrinsics::bswap(_2), ReturnTo(bb13), UnwindUnreachable())
}
bb15 = {
_11.fld3.4 = (-7630688402372722674472203943016308566_i128);
_1 = _7;
_11.fld1 = '\u{cb4c1}';
_13.fld1 = _11.fld3.4 << (*_3);
RET = core::ptr::addr_of!((*_3));
_11.fld2 = [_11.fld1,_11.fld1,_11.fld1,_11.fld1,_11.fld1];
_14.fld0.3 = [_12.fld0,_12.fld0,_12.fld0,_12.fld0,_12.fld0];
_14.fld0.1 = core::ptr::addr_of_mut!(_14.fld0.4);
_14.fld0.4.1.0 = core::ptr::addr_of_mut!(_14.fld5.3);
_14.fld5.3.1 = _6;
(*RET) = _2 | _2;
_14.fld5.1 = [(-9223372036854775808_isize),9223372036854775807_isize,9223372036854775807_isize];
match _11.fld3.4 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
332651678518565740788902403488751902890 => bb9,
_ => bb8
}
}
bb16 = {
_22.fld2.0 = _14.fld0.4.2;
_5 = !_13.fld4;
_14.fld5.3.1 = _14.fld4.0;
_21.fld0 = _14.fld4.3;
(*_9) = _22.fld4.3.0 / 289570549441640489391472222250745265966_u128;
_21.fld0 = _11.fld1 as i32;
_14.fld0.4.1.0 = _20;
(*_20).0 = (*RET) as u128;
_24 = -_14.fld4.3;
_14.fld0.4.4 = -_11.fld7;
_13.fld5 = core::ptr::addr_of!(_14.fld0.4);
_14.fld0.3 = [_21.fld0,_12.fld0,_12.fld0,_14.fld4.3,_12.fld0];
_12.fld0 = !_24;
_14.fld5.0 = core::ptr::addr_of_mut!(_21.fld0);
_14.fld5 = (_11.fld6, _22.fld4.1, _1, _22.fld4.3, _11.fld3.3);
Goto(bb17)
}
bb17 = {
Call(_33 = dump_var(10_usize, 8_usize, Move(_8), 2_usize, Move(_2), 10_usize, Move(_10), 24_usize, Move(_24)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_33 = dump_var(10_usize, 15_usize, Move(_15), 34_usize, _34, 34_usize, _34, 34_usize, _34), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn11(mut _1: char,mut _2: *const u16,mut _3: *const u16,mut _4: usize,mut _5: usize,mut _6: u128,mut _7: bool,mut _8: bool,mut _9: isize,mut _10: *const u16,mut _11: *const u16,mut _12: char,mut _13: i8,mut _14: char) -> u16 {
mir! {
type RET = u16;
let _15: u64;
let _16: [isize; 3];
let _17: Adt64;
let _18: bool;
let _19: f32;
let _20: Adt57;
let _21: [u64; 1];
let _22: f32;
let _23: i8;
let _24: i32;
let _25: isize;
let _26: char;
let _27: Adt56;
let _28: Adt58;
let _29: i32;
let _30: ();
let _31: ();
{
_7 = _6 >= _6;
_5 = _4 | _4;
_9 = 9223372036854775807_isize * 9223372036854775807_isize;
_5 = !_4;
RET = !25498_u16;
_11 = _10;
_3 = _10;
RET = 62103_u16;
_6 = _9 as u128;
_5 = 538810881_i32 as usize;
_16 = [_9,_9,_9];
Goto(bb1)
}
bb1 = {
_11 = _3;
_2 = _10;
_8 = _7 | _7;
_9 = 9223372036854775807_isize << _6;
_11 = _2;
_11 = _3;
_8 = _7 != _7;
_1 = _14;
_10 = _3;
_15 = !2777436070227375902_u64;
_5 = _4 + _4;
_6 = !295624345962394271597747862401513946573_u128;
_5 = _15 as usize;
_17 = Adt64 { fld0: (-829881483_i32) };
_3 = _10;
Call(_4 = fn12(_17, _12, _3, _17.fld0, _2, _10, _16, _7), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_14 = _12;
_14 = _12;
_6 = _12 as u128;
_13 = 102_i8;
_15 = _17.fld0 as u64;
_3 = _10;
RET = 48758_u16 << _13;
_4 = !_5;
_4 = !_5;
_16 = [_9,_9,_9];
_9 = (-9223372036854775808_isize) - (-9223372036854775808_isize);
RET = 230_u8 as u16;
_2 = _3;
_11 = _2;
_7 = _8;
_8 = _7;
_5 = !_4;
_19 = 60595_u16 as f32;
Call(_5 = core::intrinsics::transmute(_9), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_20.fld3 = [_4,_4];
_20.fld4 = _5 + _4;
_22 = _19 + _19;
_21 = [_15];
_16 = [_9,_9,_9];
_20.fld2.fld0 = _6 as f64;
_11 = _3;
_16 = [_9,_9,_9];
_6 = 15094_u16 as u128;
_3 = _10;
_3 = _11;
_20.fld1 = (-26173406514806542382797853121755414559_i128);
_20.fld1 = _13 as i128;
_13 = _7 as i8;
_2 = _11;
_20.fld1 = (-36198038063267262388151817348279824724_i128) * (-93175303963316175550308444942383104786_i128);
_20.fld1 = -(-47627962432861495492823507428359251686_i128);
_25 = 98_u8 as isize;
_14 = _1;
_20.fld4 = _4;
_20.fld3 = [_4,_5];
_3 = _2;
_20.fld3 = [_20.fld4,_4];
_22 = _19;
match _17.fld0 {
0 => bb2,
1 => bb4,
2 => bb5,
3 => bb6,
4 => bb7,
5 => bb8,
340282366920938463463374607430938329973 => bb10,
_ => bb9
}
}
bb4 = {
_14 = _12;
_14 = _12;
_6 = _12 as u128;
_13 = 102_i8;
_15 = _17.fld0 as u64;
_3 = _10;
RET = 48758_u16 << _13;
_4 = !_5;
_4 = !_5;
_16 = [_9,_9,_9];
_9 = (-9223372036854775808_isize) - (-9223372036854775808_isize);
RET = 230_u8 as u16;
_2 = _3;
_11 = _2;
_7 = _8;
_8 = _7;
_5 = !_4;
_19 = 60595_u16 as f32;
Call(_5 = core::intrinsics::transmute(_9), ReturnTo(bb3), UnwindUnreachable())
}
bb5 = {
_11 = _3;
_2 = _10;
_8 = _7 | _7;
_9 = 9223372036854775807_isize << _6;
_11 = _2;
_11 = _3;
_8 = _7 != _7;
_1 = _14;
_10 = _3;
_15 = !2777436070227375902_u64;
_5 = _4 + _4;
_6 = !295624345962394271597747862401513946573_u128;
_5 = _15 as usize;
_17 = Adt64 { fld0: (-829881483_i32) };
_3 = _10;
Call(_4 = fn12(_17, _12, _3, _17.fld0, _2, _10, _16, _7), ReturnTo(bb2), UnwindUnreachable())
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_5 = !_4;
_11 = _3;
_12 = _14;
_15 = !8894848884640294635_u64;
match _17.fld0 {
0 => bb5,
1 => bb8,
2 => bb11,
3 => bb12,
4 => bb13,
340282366920938463463374607430938329973 => bb15,
_ => bb14
}
}
bb11 = {
Return()
}
bb12 = {
Return()
}
bb13 = {
_11 = _3;
_2 = _10;
_8 = _7 | _7;
_9 = 9223372036854775807_isize << _6;
_11 = _2;
_11 = _3;
_8 = _7 != _7;
_1 = _14;
_10 = _3;
_15 = !2777436070227375902_u64;
_5 = _4 + _4;
_6 = !295624345962394271597747862401513946573_u128;
_5 = _15 as usize;
_17 = Adt64 { fld0: (-829881483_i32) };
_3 = _10;
Call(_4 = fn12(_17, _12, _3, _17.fld0, _2, _10, _16, _7), ReturnTo(bb2), UnwindUnreachable())
}
bb14 = {
_14 = _12;
_14 = _12;
_6 = _12 as u128;
_13 = 102_i8;
_15 = _17.fld0 as u64;
_3 = _10;
RET = 48758_u16 << _13;
_4 = !_5;
_4 = !_5;
_16 = [_9,_9,_9];
_9 = (-9223372036854775808_isize) - (-9223372036854775808_isize);
RET = 230_u8 as u16;
_2 = _3;
_11 = _2;
_7 = _8;
_8 = _7;
_5 = !_4;
_19 = 60595_u16 as f32;
Call(_5 = core::intrinsics::transmute(_9), ReturnTo(bb3), UnwindUnreachable())
}
bb15 = {
_26 = _1;
_19 = _22 * _22;
_5 = _4 + _4;
_9 = _25;
_20.fld1 = (-17190846272259626217620381812524355105_i128);
RET = !13123_u16;
_27.fld0 = _20.fld2.fld0 - _20.fld2.fld0;
_23 = _13 - _13;
_26 = _12;
_6 = 40299738065364368498589178672959271185_u128;
_16 = [_25,_9,_25];
_1 = _14;
_28.fld1 = [_12,_14,_12];
_21 = [_15];
_28.fld2 = _1 as usize;
_13 = _23 << _23;
_4 = _20.fld4 & _20.fld4;
_26 = _14;
_5 = !_28.fld2;
_13 = _23 - _23;
_13 = 98_u8 as i8;
Goto(bb16)
}
bb16 = {
Call(_30 = dump_var(11_usize, 15_usize, Move(_15), 23_usize, Move(_23), 13_usize, Move(_13), 14_usize, Move(_14)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_30 = dump_var(11_usize, 12_usize, Move(_12), 26_usize, Move(_26), 4_usize, Move(_4), 16_usize, Move(_16)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn12(mut _1: Adt64,mut _2: char,mut _3: *const u16,mut _4: i32,mut _5: *const u16,mut _6: *const u16,mut _7: [isize; 3],mut _8: bool) -> usize {
mir! {
type RET = usize;
let _9: Adt58;
let _10: i128;
let _11: isize;
let _12: Adt52;
let _13: *mut (u64, (*mut (u128, u32), i8, u16), i8, u128, i128);
let _14: bool;
let _15: Adt52;
let _16: [isize; 3];
let _17: [char; 5];
let _18: Adt57;
let _19: i32;
let _20: Adt64;
let _21: usize;
let _22: u64;
let _23: bool;
let _24: bool;
let _25: bool;
let _26: i32;
let _27: Adt61;
let _28: isize;
let _29: (u8,);
let _30: [u64; 6];
let _31: f32;
let _32: *const (u64, (*mut (u128, u32), i8, u16), i8, u128, i128);
let _33: [i32; 5];
let _34: u8;
let _35: Adt49;
let _36: *const u16;
let _37: ();
let _38: ();
{
_3 = _5;
_4 = _1.fld0 + _1.fld0;
RET = 1_usize >> _4;
_3 = _5;
_1 = Adt64 { fld0: _4 };
_5 = _3;
_6 = _5;
_1.fld0 = -_4;
_8 = !true;
_3 = _6;
_2 = '\u{e2343}';
_9.fld1 = [_2,_2,_2];
_1.fld0 = _4 >> _4;
_8 = false;
_8 = true;
Goto(bb1)
}
bb1 = {
_1 = Adt64 { fld0: _4 };
_1 = Adt64 { fld0: _4 };
Goto(bb2)
}
bb2 = {
_6 = _5;
_8 = false;
RET = !2555127382990171480_usize;
_9.fld0 = [8966849802987319128_u64,7709846972119870667_u64,10608661767766490287_u64,3758270539959559098_u64,16530885776802950445_u64,3500012210926245408_u64];
_6 = _5;
_4 = _1.fld0 << _1.fld0;
_10 = 25717_u16 as i128;
Goto(bb3)
}
bb3 = {
_8 = _4 > _1.fld0;
_9.fld2 = 0_usize;
_6 = _5;
Goto(bb4)
}
bb4 = {
_6 = _3;
_7 = [24_isize,(-21_isize),(-9223372036854775808_isize)];
_6 = _5;
_4 = _1.fld0;
_7 = [9223372036854775807_isize,(-84_isize),(-9223372036854775808_isize)];
_12.fld4.fld1 = [_4,_1.fld0,_4,_4,_1.fld0];
_4 = _1.fld0 + _1.fld0;
_12.fld4.fld5.1 = 3416947240_u32;
_12.fld4.fld4 = 19704_i16 + 27936_i16;
_12.fld5 = !_4;
_1.fld0 = _4 << _4;
_12.fld4.fld3.1.2 = 65010_u16;
_12.fld4.fld3.0 = 234_u8 as u64;
_12.fld4.fld5.0 = 291989911766403755653898330616334923176_u128;
_12.fld4.fld5.1 = 1618959583_u32 ^ 1149598378_u32;
_12.fld7 = _9.fld1;
_12.fld4.fld3.2 = (-106_i8);
_1.fld0 = _4;
_15.fld4.fld3.0 = _9.fld2 as u64;
Goto(bb5)
}
bb5 = {
_15.fld6 = core::ptr::addr_of_mut!(_12.fld4.fld5.0);
_9.fld0 = [_15.fld4.fld3.0,_12.fld4.fld3.0,_12.fld4.fld3.0,_15.fld4.fld3.0,_12.fld4.fld3.0,_15.fld4.fld3.0];
_14 = _8 | _8;
RET = !_9.fld2;
_15.fld4.fld4 = _12.fld4.fld4;
Goto(bb6)
}
bb6 = {
_15.fld1 = _5;
_15.fld3 = [_2,_2,_2,_2,_2];
match _12.fld4.fld5.0 {
0 => bb1,
1 => bb5,
2 => bb3,
3 => bb4,
291989911766403755653898330616334923176 => bb8,
_ => bb7
}
}
bb7 = {
_1 = Adt64 { fld0: _4 };
_1 = Adt64 { fld0: _4 };
Goto(bb2)
}
bb8 = {
_15.fld4.fld0 = !_12.fld4.fld5.1;
_15.fld4.fld1 = [_12.fld5,_12.fld5,_12.fld5,_1.fld0,_4];
_15.fld5 = !_4;
_7 = [9223372036854775807_isize,12_isize,(-9223372036854775808_isize)];
_12.fld4.fld2 = core::ptr::addr_of_mut!(_15.fld4.fld3);
_12.fld4.fld3.4 = _10;
_16 = [9223372036854775807_isize,113_isize,(-9223372036854775808_isize)];
_12.fld4.fld3.3 = _12.fld4.fld5.0;
_12.fld0 = [(-9223372036854775808_isize),(-9223372036854775808_isize),(-9223372036854775808_isize)];
_15.fld4.fld3.2 = _12.fld4.fld3.2 >> _1.fld0;
_1 = Adt64 { fld0: _15.fld5 };
_15.fld4.fld5.1 = _15.fld4.fld3.2 as u32;
_15.fld4.fld0 = _8 as u32;
_12.fld4.fld3.3 = !_12.fld4.fld5.0;
_15.fld6 = core::ptr::addr_of_mut!(_12.fld4.fld5.0);
_12.fld4.fld5.0 = _12.fld4.fld3.3;
_9.fld2 = 5_usize;
_15.fld0 = [9223372036854775807_isize,(-9223372036854775808_isize),(-9223372036854775808_isize)];
_15.fld4.fld0 = _15.fld4.fld5.1;
_17 = _15.fld3;
Goto(bb9)
}
bb9 = {
_20 = Adt64 { fld0: _4 };
_12.fld4.fld5 = (_12.fld4.fld3.3, _15.fld4.fld0);
_12.fld4.fld3.1.1 = _15.fld4.fld3.2 << _1.fld0;
_15.fld4.fld3.3 = _8 as u128;
_15.fld6 = core::ptr::addr_of_mut!(_12.fld4.fld5.0);
_15.fld4.fld3.3 = _12.fld4.fld3.3 | _12.fld4.fld3.3;
_15.fld4.fld3.3 = _12.fld4.fld5.0;
_11 = 9223372036854775807_isize;
_18.fld3 = [_9.fld2,_9.fld2];
_12.fld4.fld3.1.0 = core::ptr::addr_of_mut!(_15.fld4.fld5);
_12.fld0 = [_11,_11,_11];
Goto(bb10)
}
bb10 = {
_18.fld1 = _12.fld4.fld3.4 ^ _10;
_12.fld6 = core::ptr::addr_of_mut!(_15.fld4.fld3.3);
_15.fld4.fld3.1.2 = _12.fld4.fld3.1.2;
_15.fld4.fld3.3 = _12.fld4.fld3.3;
RET = _15.fld4.fld4 as usize;
_12.fld4.fld1 = [_15.fld5,_12.fld5,_15.fld5,_15.fld5,_20.fld0];
_15.fld7 = [_2,_2,_2];
_18.fld3 = [_9.fld2,_9.fld2];
_15.fld7 = _12.fld7;
_12.fld4.fld3.1.0 = core::ptr::addr_of_mut!(_12.fld4.fld5);
_15.fld1 = core::ptr::addr_of!(_15.fld4.fld3.1.2);
_21 = _9.fld2 >> _12.fld4.fld3.1.1;
_18.fld6 = _12.fld4.fld2;
_24 = !_14;
_12.fld4.fld0 = _15.fld4.fld3.1.2 as u32;
_18.fld3 = [_21,_21];
_15.fld4.fld1 = _12.fld4.fld1;
_22 = _1.fld0 as u64;
_18.fld3 = [_21,_21];
_12.fld4.fld5.0 = !_12.fld4.fld3.3;
_18.fld2.fld0 = _12.fld4.fld5.1 as f64;
_12.fld4.fld5.1 = _15.fld4.fld5.1;
_15.fld5 = !_20.fld0;
_15.fld4.fld1 = _12.fld4.fld1;
_15.fld4.fld5.0 = _12.fld4.fld3.3;
_12.fld4.fld5.1 = _15.fld4.fld5.1 - _15.fld4.fld5.1;
_26 = _4;
Goto(bb11)
}
bb11 = {
_18.fld5 = core::ptr::addr_of!(_12.fld4.fld3);
Goto(bb12)
}
bb12 = {
_27.fld0 = _15.fld4.fld4 as u16;
Goto(bb13)
}
bb13 = {
_14 = !_24;
_15.fld4.fld3.1.2 = _12.fld4.fld3.1.2;
_3 = _5;
_8 = !_14;
_13 = core::ptr::addr_of_mut!(_12.fld4.fld3);
_23 = _14 & _8;
_28 = _11;
_25 = _23;
_32 = core::ptr::addr_of!((*_13));
_18.fld2.fld0 = (*_32).4 as f64;
_12.fld2 = _15.fld5 as isize;
(*_32).2 = !(*_13).1.1;
_27.fld0 = _15.fld4.fld3.1.2;
(*_32).1.0 = core::ptr::addr_of_mut!(_15.fld4.fld5);
(*_32).1.0 = core::ptr::addr_of_mut!(_12.fld4.fld5);
_15.fld0 = [_12.fld2,_12.fld2,_12.fld2];
(*_13).2 = _12.fld4.fld4 as i8;
Goto(bb14)
}
bb14 = {
_5 = _3;
_9.fld0 = [_22,_22,_22,(*_13).0,_12.fld4.fld3.0,_22];
_12.fld5 = (*_32).1.2 as i32;
_19 = _15.fld5 >> (*_32).1.1;
(*_13).0 = _22;
RET = !_21;
_15.fld4.fld3.1.1 = _21 as i8;
Goto(bb15)
}
bb15 = {
Call(_37 = dump_var(12_usize, 16_usize, Move(_16), 25_usize, Move(_25), 14_usize, Move(_14), 11_usize, Move(_11)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_37 = dump_var(12_usize, 10_usize, Move(_10), 4_usize, Move(_4), 24_usize, Move(_24), 7_usize, Move(_7)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn13(mut _1: *mut u128,mut _2: *mut i32,mut _3: ((u128, u32), (*mut i32, [isize; 3], bool, (u128, u32), u8), *mut (u8,)),mut _4: u8,mut _5: *const u16,mut _6: *mut i32,mut _7: u16,mut _8: u128) -> u32 {
mir! {
type RET = u32;
let _9: (u32, isize, [usize; 2], i32);
let _10: f32;
let _11: f32;
let _12: isize;
let _13: ();
let _14: ();
{
_1 = core::ptr::addr_of_mut!((*_1));
_3.1.3.0 = !_3.0.0;
_8 = (*_1);
_3.0.1 = (-9223372036854775808_isize) as u32;
(*_5) = _7 + _7;
RET = _3.1.3.1;
_3.0.1 = _3.1.3.1 % 1569815947_u32;
_3.1.3 = ((*_1), _3.0.1);
_6 = core::ptr::addr_of_mut!((*_6));
_3.0.0 = _3.1.4 as u128;
_3.1.0 = core::ptr::addr_of_mut!((*_2));
_9.1 = (-9223372036854775808_isize);
(*_2) = 6905355301872562604044296725637003028_i128 as i32;
_2 = _6;
_8 = (*_5) as u128;
_10 = 6193070454883696503_i64 as f32;
(*_2) = (-679737815_i32);
_9.3 = (*_2);
_3.1.3.0 = !(*_1);
_3.1.4 = _4 + _4;
_8 = (*_1);
_9.0 = _3.1.3.1 * _3.1.3.1;
_6 = core::ptr::addr_of_mut!((*_6));
_12 = _9.1;
_3.1.0 = core::ptr::addr_of_mut!((*_2));
Goto(bb1)
}
bb1 = {
Call(_13 = dump_var(13_usize, 7_usize, Move(_7), 8_usize, Move(_8), 14_usize, _14, 14_usize, _14), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn14(mut _1: u16,mut _2: (u128, u32),mut _3: (*mut i32, [isize; 3], bool, (u128, u32), u8),mut _4: u64,mut _5: (*mut i32, [isize; 3], bool, (u128, u32), u8),mut _6: Adt58,mut _7: *mut (u128, u32),mut _8: u128) -> u8 {
mir! {
type RET = u8;
let _9: i16;
let _10: *mut i64;
let _11: f32;
let _12: *mut i32;
let _13: f32;
let _14: [u64; 1];
let _15: usize;
let _16: f32;
let _17: (*mut i32, [isize; 3], bool, (u128, u32), u8);
let _18: Adt49;
let _19: ();
let _20: ();
{
RET = _5.4;
_3.0 = _5.0;
_3.2 = !_5.2;
_6.fld0 = [_4,_4,_4,_4,_4,_4];
(*_7).1 = !_2.1;
_2.1 = (*_7).1 >> _3.3.0;
_6.fld1 = ['\u{2dae1}','\u{b5f65}','\u{26861}'];
_2 = ((*_7).0, _3.3.1);
_3.1 = [85_isize,(-9223372036854775808_isize),9223372036854775807_isize];
_3.3 = (_5.3.0, _2.1);
_6.fld1 = ['\u{53133}','\u{109540}','\u{149f5}'];
_3 = (_5.0, _5.1, _5.2, _2, _5.4);
_6.fld0 = [_4,_4,_4,_4,_4,_4];
_8 = !(*_7).0;
match _6.fld2 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb5,
5 => bb6,
6 => bb7,
1775993762431912711 => bb9,
_ => bb8
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
_3.3.1 = !(*_7).1;
_5.3 = ((*_7).0, (*_7).1);
(*_7).0 = _3.3.0 + _8;
_3.1 = [(-9223372036854775808_isize),(-40_isize),9223372036854775807_isize];
RET = !_3.4;
RET = _3.4 & _3.4;
_2 = _3.3;
_9 = 5580_i16;
(*_7) = (_2.0, _2.1);
_11 = _1 as f32;
_3.2 = !_5.2;
match _9 {
5580 => bb10,
_ => bb8
}
}
bb10 = {
_2.1 = !(*_7).1;
_3.3.0 = _5.4 as u128;
_6.fld0 = [_4,_4,_4,_4,_4,_4];
_6.fld1 = ['\u{7b0e}','\u{e7223}','\u{35a2d}'];
_3.3.0 = !(*_7).0;
_3.3.1 = _3.2 as u32;
match _9 {
0 => bb9,
1 => bb6,
5580 => bb11,
_ => bb3
}
}
bb11 = {
_3.2 = _5.2;
_5 = _3;
_7 = core::ptr::addr_of_mut!(_2);
_3.0 = _5.0;
_4 = 7947498145175791798_u64 ^ 15325849894205073795_u64;
_12 = _3.0;
(*_7).0 = !_8;
_6.fld1 = ['\u{eb633}','\u{c2408}','\u{b12c5}'];
(*_12) = !(-1634416384_i32);
_3.3.1 = _6.fld2 as u32;
_6.fld1 = ['\u{63c78}','\u{77131}','\u{11eb8}'];
Goto(bb12)
}
bb12 = {
_3.2 = _5.2 & _5.2;
_11 = (*_12) as f32;
match _9 {
0 => bb7,
1 => bb13,
2 => bb14,
3 => bb15,
5580 => bb17,
_ => bb16
}
}
bb13 = {
Return()
}
bb14 = {
_2.1 = !(*_7).1;
_3.3.0 = _5.4 as u128;
_6.fld0 = [_4,_4,_4,_4,_4,_4];
_6.fld1 = ['\u{7b0e}','\u{e7223}','\u{35a2d}'];
_3.3.0 = !(*_7).0;
_3.3.1 = _3.2 as u32;
match _9 {
0 => bb9,
1 => bb6,
5580 => bb11,
_ => bb3
}
}
bb15 = {
Return()
}
bb16 = {
Return()
}
bb17 = {
_14 = [_4];
_12 = core::ptr::addr_of_mut!((*_12));
_6.fld1 = ['\u{a91cb}','\u{7587b}','\u{a4985}'];
_15 = _3.2 as usize;
_18.fld3.0 = _4 ^ _4;
Goto(bb18)
}
bb18 = {
Call(_19 = dump_var(14_usize, 9_usize, Move(_9), 15_usize, Move(_15), 14_usize, Move(_14), 20_usize, _20), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
pub fn main() {
                println!("{:?}", fn0(std::hint::black_box(false), std::hint::black_box(31555_u16), std::hint::black_box(107_u8), std::hint::black_box((-125_i8)), std::hint::black_box(1679269554_i32)));
                
            }
#[derive(Debug,Copy,Clone)]
pub struct Adt49 {
fld0: u32,
fld1: [i32; 5],
fld2: *mut (u64, (*mut (u128, u32), i8, u16), i8, u128, i128),
fld3: (u64, (*mut (u128, u32), i8, u16), i8, u128, i128),
fld4: i16,
fld5: (u128, u32),
}
#[derive(Debug)]
pub struct Adt50 {
fld0: (i16, *mut (u64, (*mut (u128, u32), i8, u16), i8, u128, i128), i64, [i32; 5], (u64, (*mut (u128, u32), i8, u16), i8, u128, i128)),
fld1: [u64; 6],
fld2: [char; 5],
fld3: i8,
fld4: (u32, isize, [usize; 2], i32),
fld5: (*mut i32, [isize; 3], bool, (u128, u32), u8),
}
#[derive(Debug,Copy,Clone)]
pub struct Adt51 {
fld0: (u8,),
fld1: u16,
fld2: (i8, usize, u16),
fld3: i8,
fld4: (*mut i32, [isize; 3], bool, (u128, u32), u8),
fld5: [i32; 5],
}
#[derive(Debug,Copy,Clone)]
pub struct Adt52 {
fld0: [isize; 3],
fld1: *const u16,
fld2: isize,
fld3: [char; 5],
fld4: Adt49,
fld5: i32,
fld6: *mut u128,
fld7: [char; 3],
}
#[derive(Debug)]
pub struct Adt53 {
fld0: *mut (u8,),
}
#[derive(Debug)]
pub struct Adt54 {
fld0: (i8, usize, u16),
}
#[derive(Debug)]
pub struct Adt55 {
fld0: bool,
fld1: Adt52,
fld2: Adt53,
fld3: *mut i64,
fld4: i16,
fld5: i128,
}
#[derive(Debug,Copy,Clone)]
pub struct Adt56 {
fld0: f64,
}
#[derive(Debug,Copy,Clone)]
pub struct Adt57 {
fld0: *mut ((u8,), *mut i32),
fld1: i128,
fld2: Adt56,
fld3: [usize; 2],
fld4: usize,
fld5: *const (u64, (*mut (u128, u32), i8, u16), i8, u128, i128),
fld6: *mut (u64, (*mut (u128, u32), i8, u16), i8, u128, i128),
}
#[derive(Debug)]
pub struct Adt58 {
fld0: [u64; 6],
fld1: [char; 3],
fld2: usize,
}
#[derive(Debug)]
pub struct Adt59 {
fld0: *mut (u64, usize, f32, u8, i128),
fld1: char,
fld2: [char; 5],
fld3: (u64, usize, f32, u8, i128),
fld4: *mut (u128, u32),
fld5: *const (u64, (*mut (u128, u32), i8, u16), i8, u128, i128),
fld6: *mut i32,
fld7: i128,
}
#[derive(Debug)]
pub struct Adt60 {
fld0: bool,
fld1: Adt51,
fld2: *mut u32,
fld3: [char; 3],
fld4: u32,
fld5: *const u16,
}
#[derive(Debug,Copy,Clone)]
pub struct Adt61 {
fld0: u16,
}
#[derive(Debug)]
pub struct Adt62 {
fld0: [char; 3],
fld1: (i8, usize, u16),
fld2: ((u8,), *mut i32),
fld3: Adt51,
fld4: ((u128, u32), (*mut i32, [isize; 3], bool, (u128, u32), u8), *mut (u8,)),
}
#[derive(Debug)]
pub struct Adt63 {
fld0: Adt55,
fld1: i64,
fld2: Adt57,
fld3: (u64, (*mut (u128, u32), i8, u16), i8, u128, i128),
fld4: [char; 5],
fld5: Adt56,
}
#[derive(Debug,Copy,Clone)]
pub struct Adt64 {
fld0: i32,
}
#[derive(Debug)]
pub struct Adt65 {
fld0: bool,
fld1: (u8,),
fld2: ((u8,), *mut i32),
fld3: *mut u128,
fld4: f32,
fld5: i32,
fld6: Adt61,
}

