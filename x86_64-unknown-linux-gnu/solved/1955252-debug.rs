#![recursion_limit = "1024"]
    #![feature(custom_mir, core_intrinsics, const_hash)]
    #![allow(unused_parens, unused_assignments, overflowing_literals)]
    extern crate core;
    use core::intrinsics::mir::*;

    use std::fmt::Debug;

    #[inline(never)]
    fn dump_var(
        f: usize,
        var0: usize, val0: impl Debug,
        var1: usize, val1: impl Debug,
        var2: usize, val2: impl Debug,
        var3: usize, val3: impl Debug,
    ) {
        println!("fn{f}:_{var0} = {val0:?}\n_{var1} = {val1:?}\n_{var2} = {val2:?}\n_{var3} = {val3:?}");
    }
    #[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn0(mut _1: i128,mut _2: usize) -> isize {
mir! {
type RET = isize;
let _3: isize;
let _4: u16;
let _5: char;
let _6: Adt54;
let _7: Adt47;
let _8: bool;
let _9: isize;
let _10: char;
let _11: ((char, bool, (usize, char, isize), u32, u16),);
let _12: f32;
let _13: (u128,);
let _14: char;
let _15: u128;
let _16: i16;
let _17: f32;
let _18: *const u128;
let _19: f64;
let _20: Adt44;
let _21: Adt49;
let _22: (char, bool, (usize, char, isize), u32, u16);
let _23: bool;
let _24: [u64; 6];
let _25: usize;
let _26: ();
let _27: ();
{
RET = (-39_isize);
_2 = !5_usize;
_1 = (-84635618045484567420220680138716842561_i128) | (-107872952455968687227912737414254663869_i128);
RET = (-9223372036854775808_isize);
RET = (-9223372036854775808_isize) << _1;
RET = (-9223372036854775808_isize);
_2 = 6_usize;
_3 = RET;
RET = _3;
RET = _3;
Goto(bb1)
}
bb1 = {
RET = _3 ^ _3;
_4 = 55563_u16 + 19238_u16;
RET = !_3;
_4 = !7574_u16;
_3 = RET << _1;
RET = _3 & _3;
_1 = -88005899395874129363616007976830783893_i128;
RET = _3;
_2 = 9683478234202528878_usize ^ 4_usize;
Goto(bb2)
}
bb2 = {
RET = !_3;
_4 = !42966_u16;
RET = _3;
RET = '\u{54432}' as isize;
_3 = -RET;
_5 = '\u{b1a40}';
_3 = RET >> _1;
_7.fld2 = [_4,_4,_4,_4,_4];
_6.fld0 = _1 as f64;
_7.fld2 = [_4,_4,_4,_4,_4];
_6.fld0 = 3048678257_u32 as f64;
RET = _3 & _3;
_7.fld1 = _5 as u64;
_8 = !false;
RET = _3;
_7.fld1 = 7856872138030872996_u64;
_11.0.2.1 = _5;
_11.0.4 = _4 << _4;
_9 = _3;
_7.fld2 = [_11.0.4,_4,_11.0.4,_11.0.4,_4];
_11.0.2 = (_2, _5, _9);
_7.fld0 = Adt45::Variant0 { fld0: _11.0.2.1 };
_5 = _11.0.2.1;
match _7.fld1 {
0 => bb1,
7856872138030872996 => bb4,
_ => bb3
}
}
bb3 = {
RET = _3 ^ _3;
_4 = 55563_u16 + 19238_u16;
RET = !_3;
_4 = !7574_u16;
_3 = RET << _1;
RET = _3 & _3;
_1 = -88005899395874129363616007976830783893_i128;
RET = _3;
_2 = 9683478234202528878_usize ^ 4_usize;
Goto(bb2)
}
bb4 = {
_4 = _11.0.4 >> _1;
_10 = Field::<char>(Variant(_7.fld0, 0), 0);
SetDiscriminant(_7.fld0, 2);
Goto(bb5)
}
bb5 = {
_9 = RET ^ _3;
_4 = _2 as u16;
_11.0.0 = _11.0.2.1;
_6.fld2 = (-758232248747046190_i64);
place!(Field::<(i64, [bool; 4])>(Variant(_7.fld0, 2), 1)).0 = _6.fld2;
_11.0.3 = 3093131769_u32;
RET = _11.0.2.2 & _9;
match _11.0.3 {
0 => bb3,
1 => bb6,
3093131769 => bb8,
_ => bb7
}
}
bb6 = {
RET = _3 ^ _3;
_4 = 55563_u16 + 19238_u16;
RET = !_3;
_4 = !7574_u16;
_3 = RET << _1;
RET = _3 & _3;
_1 = -88005899395874129363616007976830783893_i128;
RET = _3;
_2 = 9683478234202528878_usize ^ 4_usize;
Goto(bb2)
}
bb7 = {
RET = _3 ^ _3;
_4 = 55563_u16 + 19238_u16;
RET = !_3;
_4 = !7574_u16;
_3 = RET << _1;
RET = _3 & _3;
_1 = -88005899395874129363616007976830783893_i128;
RET = _3;
_2 = 9683478234202528878_usize ^ 4_usize;
Goto(bb2)
}
bb8 = {
_11.0.2.0 = _11.0.4 as usize;
_8 = !false;
place!(Field::<[usize; 4]>(Variant(_7.fld0, 2), 7)) = [_11.0.2.0,_2,_11.0.2.0,_11.0.2.0];
_5 = _11.0.0;
_6.fld2 = Field::<(i64, [bool; 4])>(Variant(_7.fld0, 2), 1).0;
_11.0.4 = _4 - _4;
_9 = !_11.0.2.2;
_9 = _3;
_9 = !RET;
_11.0.2 = (_2, _5, RET);
place!(Field::<[bool; 4]>(Variant(_7.fld0, 2), 3)) = [_8,_8,_8,_8];
place!(Field::<(i64, [bool; 4])>(Variant(_7.fld0, 2), 1)) = (_6.fld2, Field::<[bool; 4]>(Variant(_7.fld0, 2), 3));
Goto(bb9)
}
bb9 = {
place!(Field::<[i8; 7]>(Variant(_7.fld0, 2), 4)) = [(-14_i8),(-24_i8),44_i8,9_i8,99_i8,84_i8,(-61_i8)];
_7.fld2 = [_11.0.4,_4,_4,_4,_11.0.4];
_9 = (-6416_i16) as isize;
place!(Field::<[i16; 5]>(Variant(_7.fld0, 2), 0)) = [(-71_i16),19279_i16,32620_i16,(-1150_i16),(-12094_i16)];
_4 = _7.fld1 as u16;
_11.0.1 = !_8;
_13 = (319895139290735530702179183701490315922_u128,);
_7.fld2 = [_11.0.4,_11.0.4,_11.0.4,_11.0.4,_11.0.4];
_1 = _7.fld1 as i128;
place!(Field::<(i64, [bool; 4])>(Variant(_7.fld0, 2), 1)).0 = !_6.fld2;
match _6.fld2 {
0 => bb7,
340282366920938463462616375183021165266 => bb10,
_ => bb5
}
}
bb10 = {
place!(Field::<(i64, [bool; 4])>(Variant(_7.fld0, 2), 1)).1 = [_8,_11.0.1,_11.0.1,_11.0.1];
place!(Field::<u128>(Variant(_7.fld0, 2), 6)) = _11.0.2.2 as u128;
_11.0.1 = _8 & _8;
_14 = _11.0.0;
place!(Field::<*mut i16>(Variant(_7.fld0, 2), 5)) = core::ptr::addr_of_mut!(_16);
_11.0.2.2 = -_3;
_6.fld2 = -Field::<(i64, [bool; 4])>(Variant(_7.fld0, 2), 1).0;
_11.0.2.0 = RET as usize;
_10 = _11.0.0;
_12 = 125_u8 as f32;
match _11.0.3 {
0 => bb8,
1 => bb5,
2 => bb7,
3 => bb4,
3093131769 => bb12,
_ => bb11
}
}
bb11 = {
_9 = RET ^ _3;
_4 = _2 as u16;
_11.0.0 = _11.0.2.1;
_6.fld2 = (-758232248747046190_i64);
place!(Field::<(i64, [bool; 4])>(Variant(_7.fld0, 2), 1)).0 = _6.fld2;
_11.0.3 = 3093131769_u32;
RET = _11.0.2.2 & _9;
match _11.0.3 {
0 => bb3,
1 => bb6,
3093131769 => bb8,
_ => bb7
}
}
bb12 = {
_10 = _14;
place!(Field::<*mut i16>(Variant(_7.fld0, 2), 5)) = core::ptr::addr_of_mut!(_16);
_11.0.0 = _14;
place!(Field::<isize>(Variant(_7.fld0, 2), 2)) = _1 as isize;
_2 = _6.fld0 as usize;
_11.0.2.2 = RET;
_11.0.3 = 3082892465_u32 << _11.0.2.2;
_12 = (-1654051310_i32) as f32;
Call(_11 = fn1(_14, _10, Move(_7.fld0), _7.fld2, RET, _6.fld0, _10, _5, _3, _2, RET, _10, RET, _7.fld2, _9), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
_13 = (227200300736514035594326695998813354943_u128,);
_1 = -12265865921993113517980857508457651224_i128;
_17 = _6.fld0 as f32;
_1 = (-104819502406412736704378456078465833205_i128);
_11.0.4 = _4;
_11.0.2.2 = !_3;
_15 = _1 as u128;
_3 = _11.0.2.2 | RET;
_22.2.0 = _2;
_22.2 = _11.0.2;
_22.1 = !_11.0.1;
_24 = [_7.fld1,_7.fld1,_7.fld1,_7.fld1,_7.fld1,_7.fld1];
_2 = _11.0.2.0;
_11.0.3 = 177_u8 as u32;
RET = !_11.0.2.2;
_12 = _17;
Goto(bb14)
}
bb14 = {
_11.0.2 = (_22.2.0, _14, RET);
_22.4 = 20_u8 as u16;
Goto(bb15)
}
bb15 = {
Call(_26 = dump_var(0_usize, 24_usize, Move(_24), 15_usize, Move(_15), 14_usize, Move(_14), 2_usize, Move(_2)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_26 = dump_var(0_usize, 1_usize, Move(_1), 5_usize, Move(_5), 27_usize, _27, 27_usize, _27), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn1(mut _1: char,mut _2: char,mut _3: Adt45,mut _4: [u16; 5],mut _5: isize,mut _6: f64,mut _7: char,mut _8: char,mut _9: isize,mut _10: usize,mut _11: isize,mut _12: char,mut _13: isize,mut _14: [u16; 5],mut _15: isize) -> ((char, bool, (usize, char, isize), u32, u16),) {
mir! {
type RET = ((char, bool, (usize, char, isize), u32, u16),);
let _16: [bool; 4];
let _17: Adt56;
let _18: (u64, [usize; 4], i32, isize, u8, &'static isize, u8, [u32; 2]);
let _19: Adt55;
let _20: Adt50;
let _21: [usize; 4];
let _22: Adt59;
let _23: (char, bool, (usize, char, isize), u32, u16);
let _24: usize;
let _25: char;
let _26: (u8, i16, i64);
let _27: f32;
let _28: bool;
let _29: isize;
let _30: u32;
let _31: f64;
let _32: (f32, f32, i8);
let _33: *const f64;
let _34: Adt52;
let _35: isize;
let _36: f32;
let _37: Adt50;
let _38: ();
let _39: ();
{
RET.0.2.1 = _7;
RET.0.2.0 = _10;
RET.0.2 = (_10, _8, _13);
place!(Field::<[i16; 5]>(Variant(_3, 2), 0)) = [11672_i16,(-9396_i16),22393_i16,(-13958_i16),5396_i16];
RET.0.1 = false | true;
RET.0.0 = _1;
_16 = [RET.0.1,RET.0.1,RET.0.1,RET.0.1];
place!(Field::<isize>(Variant(_3, 2), 2)) = RET.0.2.0 as isize;
place!(Field::<u128>(Variant(_3, 2), 6)) = 309287746702249042477122787245002968807_u128;
place!(Field::<u128>(Variant(_3, 2), 6)) = 147776215750608823255683929524999363210_u128;
_18.2 = 418754187_i32 | (-1113215682_i32);
_2 = RET.0.0;
RET.0.2.0 = _10 - _10;
_17 = Adt56::Variant3 { fld0: Field::<u128>(Variant(_3, 2), 6),fld1: _6 };
RET.0.1 = _13 == _9;
_18.0 = 1052102947584096981_u64 ^ 2200435226568352660_u64;
_6 = Field::<f64>(Variant(_17, 3), 1);
_18.2 = 54544974_i32 * (-1958902883_i32);
RET.0.3 = _1 as u32;
_18.2 = -(-1864526411_i32);
RET.0.2 = (_10, _2, _5);
_19.fld0.0.2 = (RET.0.2.0, _12, Field::<isize>(Variant(_3, 2), 2));
RET.0.0 = _19.fld0.0.2.1;
_18.5 = &RET.0.2.2;
Call(_18.0 = fn2(Field::<[i16; 5]>(Variant(_3, 2), 0), _19.fld0.0.2, Move(_3), _9, _14, _11, _19.fld0.0.2, RET.0.2), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
SetDiscriminant(_17, 0);
Goto(bb2)
}
bb2 = {
_19.fld0.0.3 = RET.0.3;
_18.1 = [_10,_19.fld0.0.2.0,_19.fld0.0.2.0,_19.fld0.0.2.0];
RET.0.2.0 = !_10;
_18.6 = _6 as u8;
_19.fld1 = _18.0;
_18.1 = [_19.fld0.0.2.0,_19.fld0.0.2.0,_10,RET.0.2.0];
_19.fld0.0.2.0 = _10;
_15 = -RET.0.2.2;
_18.2 = (-818039890_i32) ^ (-97569475_i32);
_18.7 = [RET.0.3,RET.0.3];
_16 = [RET.0.1,RET.0.1,RET.0.1,RET.0.1];
RET.0.2.2 = !_11;
RET.0.2 = _19.fld0.0.2;
_14 = [17462_u16,23673_u16,3731_u16,44122_u16,20106_u16];
Call(_23.2.0 = fn3(_19.fld0.0.2.0, _19.fld1, _19.fld0.0.2), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_18.6 = !37_u8;
_19.fld0.0.1 = RET.0.2.0 >= _19.fld0.0.2.0;
_18.5 = &_19.fld0.0.2.2;
_23.2.1 = _2;
place!(Field::<Adt49>(Variant(_17, 0), 0)).fld0 = [_18.6,_18.6,_18.6,_18.6,_18.6,_18.6,_18.6,_18.6];
_23.0 = RET.0.0;
_23.1 = RET.0.2.0 <= _19.fld0.0.2.0;
_19.fld0.0.3 = RET.0.3 & RET.0.3;
RET.0.4 = 1512031193794404020_i64 as u16;
place!(Field::<Adt49>(Variant(_17, 0), 0)).fld0 = [_18.6,_18.6,_18.6,_18.6,_18.6,_18.6,_18.6,_18.6];
Goto(bb4)
}
bb4 = {
_18.4 = _18.6;
place!(Field::<Adt49>(Variant(_17, 0), 0)).fld0 = [_18.6,_18.4,_18.6,_18.4,_18.6,_18.4,_18.6,_18.4];
_30 = !RET.0.3;
_2 = _8;
_19.fld5 = _18.2;
_31 = _6 - _6;
_19.fld0.0.3 = _18.4 as u32;
_23.4 = RET.0.4;
RET.0 = (_23.2.1, _23.1, _19.fld0.0.2, _30, _23.4);
_19.fld0 = RET;
_19.fld0 = (RET.0,);
_19.fld5 = 292357532256854889503537705696120907166_u128 as i32;
_21 = [_10,_23.2.0,_23.2.0,_19.fld0.0.2.0];
RET.0 = (_1, _23.1, _19.fld0.0.2, _19.fld0.0.3, _19.fld0.0.4);
_32.1 = _19.fld5 as f32;
Goto(bb5)
}
bb5 = {
_19.fld0 = (RET.0,);
_16 = [_19.fld0.0.1,_19.fld0.0.1,_19.fld0.0.1,_19.fld0.0.1];
_31 = _6 - _6;
_33 = core::ptr::addr_of!(_31);
_11 = RET.0.2.2;
_23.4 = 34_i8 as u16;
_19.fld0.0.2.2 = _13 << _18.0;
_26 = (_18.4, 20310_i16, (-7776300599762182535_i64));
_23.2.1 = _7;
_28 = RET.0.1;
_23.0 = _2;
_26.0 = _18.6;
RET = (_19.fld0.0,);
_24 = _19.fld0.0.1 as usize;
_19.fld0.0.0 = _7;
_18.3 = RET.0.2.2;
place!(Field::<*mut i16>(Variant(_17, 0), 1)) = core::ptr::addr_of_mut!(_26.1);
Goto(bb6)
}
bb6 = {
Call(_38 = dump_var(1_usize, 16_usize, Move(_16), 8_usize, Move(_8), 7_usize, Move(_7), 5_usize, Move(_5)), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
Call(_38 = dump_var(1_usize, 28_usize, Move(_28), 1_usize, Move(_1), 12_usize, Move(_12), 26_usize, Move(_26)), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
Call(_38 = dump_var(1_usize, 15_usize, Move(_15), 39_usize, _39, 39_usize, _39, 39_usize, _39), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn2(mut _1: [i16; 5],mut _2: (usize, char, isize),mut _3: Adt45,mut _4: isize,mut _5: [u16; 5],mut _6: isize,mut _7: (usize, char, isize),mut _8: (usize, char, isize)) -> u64 {
mir! {
type RET = u64;
let _9: Adt59;
let _10: Adt58;
let _11: Adt53;
let _12: (char, bool, (usize, char, isize), u32, u16);
let _13: ();
let _14: ();
{
_5 = [4497_u16,19995_u16,25492_u16,32103_u16,3432_u16];
_8 = (_7.0, _2.1, _6);
RET = _7.1 as u64;
_2.1 = _8.1;
_4 = _6 * _6;
_2.2 = 1670267642_u32 as isize;
RET = 3244160907705746313_u64 - 13418008696595597322_u64;
place!(Field::<[i8; 7]>(Variant(_3, 2), 4)) = [(-113_i8),(-114_i8),83_i8,(-67_i8),32_i8,18_i8,45_i8];
RET = 8819204286715717232_u64;
_2.0 = _7.0 & _7.0;
place!(Field::<[i8; 7]>(Variant(_3, 2), 4)) = [119_i8,(-61_i8),(-110_i8),(-59_i8),40_i8,53_i8,73_i8];
Goto(bb1)
}
bb1 = {
_7 = _2;
_8.2 = (-16624_i16) as isize;
_7 = (_2.0, _8.1, _2.2);
_7 = (_2.0, _2.1, _4);
_7.1 = _2.1;
Goto(bb2)
}
bb2 = {
_2.0 = !_7.0;
_2.1 = _8.1;
place!(Field::<isize>(Variant(_3, 2), 2)) = !_4;
_5 = [38623_u16,36972_u16,60812_u16,34909_u16,58766_u16];
place!(Field::<[bool; 4]>(Variant(_3, 2), 3)) = [true,false,false,false];
RET = _7.1 as u64;
_7.1 = _8.1;
_10.fld6.fld0.0.2.2 = _7.2 ^ _6;
_10.fld6.fld0.0.1 = true ^ true;
place!(Field::<[i8; 7]>(Variant(_3, 2), 4)) = [(-109_i8),(-58_i8),(-124_i8),(-74_i8),(-116_i8),(-117_i8),(-66_i8)];
place!(Field::<u128>(Variant(_3, 2), 6)) = 278875339003443843283141464217714386647_u128;
_10.fld6.fld0.0.4 = _10.fld6.fld0.0.1 as u16;
_10.fld6.fld0.0.3 = 4073493812_u32;
_10.fld6.fld0.0.4 = 27549_i16 as u16;
_10.fld6.fld0.0.2 = (_7.0, _7.1, Field::<isize>(Variant(_3, 2), 2));
_2.0 = Field::<isize>(Variant(_3, 2), 2) as usize;
place!(Field::<[bool; 4]>(Variant(_3, 2), 3)) = Field::<(i64, [bool; 4])>(Variant(_3, 2), 1).1;
place!(Field::<isize>(Variant(_3, 2), 2)) = !_7.2;
SetDiscriminant(_3, 1);
RET = 5517925618197964431_u64 >> _4;
place!(Field::<u16>(Variant(_3, 1), 1)) = _10.fld6.fld0.0.4 * _10.fld6.fld0.0.4;
Goto(bb3)
}
bb3 = {
Call(_13 = dump_var(2_usize, 7_usize, Move(_7), 2_usize, Move(_2), 4_usize, Move(_4), 14_usize, _14), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn3(mut _1: usize,mut _2: u64,mut _3: (usize, char, isize)) -> usize {
mir! {
type RET = usize;
let _4: usize;
let _5: (u128,);
let _6: isize;
let _7: isize;
let _8: isize;
let _9: isize;
let _10: (u128,);
let _11: usize;
let _12: u32;
let _13: f64;
let _14: ((char, bool, (usize, char, isize), u32, u16),);
let _15: Adt44;
let _16: ((char, bool, (usize, char, isize), u32, u16),);
let _17: Adt49;
let _18: [u32; 4];
let _19: Adt45;
let _20: f64;
let _21: bool;
let _22: [u32; 2];
let _23: (u64, [usize; 4], i32, isize, u8, &'static isize, u8, [u32; 2]);
let _24: char;
let _25: (u128,);
let _26: ((char, bool, (usize, char, isize), u32, u16),);
let _27: [bool; 4];
let _28: ((char, bool, (usize, char, isize), u32, u16),);
let _29: (f32, f32, i8);
let _30: ();
let _31: ();
{
RET = _3.0 ^ _1;
_3 = (RET, '\u{b157d}', 9223372036854775807_isize);
_3 = (RET, '\u{79ff1}', (-9223372036854775808_isize));
_3.0 = _1 - _1;
_3 = (RET, '\u{9f8d7}', (-73_isize));
RET = !_1;
_2 = (-3345820244305093538_i64) as u64;
_1 = RET;
_5.0 = 173203386149974908297287928784573491951_u128;
_3.2 = 87_isize | 9223372036854775807_isize;
_3 = (RET, '\u{cd6a8}', 41_isize);
_3.2 = 689741941_u32 as isize;
Call(RET = fn4(_3.1, _1, _3, _1, _3, _3.2, _3.1, _3, _3.1), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_5.0 = !176486608506575797345849902445102125926_u128;
_3.2 = 88_isize;
_1 = _3.2 as usize;
RET = !_3.0;
_4 = _1;
_5 = (299719821395593442886093506369953013571_u128,);
_5 = (84232305298038757618917024900053519493_u128,);
_5.0 = 145248332431225440580961029449478347199_u128;
RET = !_1;
Goto(bb2)
}
bb2 = {
_5.0 = false as u128;
_6 = -_3.2;
Goto(bb3)
}
bb3 = {
_3.0 = RET;
_5 = (314550921665180863689158686706246279439_u128,);
_7 = false as isize;
_3.0 = !RET;
_3.0 = _4 >> RET;
_8 = _7;
RET = (-16573851803304542272274904089435452860_i128) as usize;
RET = _1 ^ _1;
_7 = (-86_i8) as isize;
_6 = _7 & _8;
_1 = !_3.0;
RET = _1 << _8;
_5.0 = (-6453_i16) as u128;
_3 = (_1, '\u{106894}', _6);
_9 = 56710639_i32 as isize;
_5 = (54889829059416445709726539835672501481_u128,);
RET = _4;
Goto(bb4)
}
bb4 = {
_3.2 = _9;
_6 = -_8;
_5.0 = 7172437196630755631_i64 as u128;
_8 = _6;
_10 = (_5.0,);
_12 = _6 as u32;
_5 = (_10.0,);
_9 = _7 >> _3.2;
_5 = (_10.0,);
_1 = _4;
_3.2 = _10.0 as isize;
_8 = !_7;
_5.0 = 13624_u16 as u128;
_8 = _7 + _9;
Goto(bb5)
}
bb5 = {
_9 = !_3.2;
_3.1 = '\u{8129b}';
_12 = !1923902396_u32;
_10.0 = _5.0;
_11 = !_4;
_5.0 = _10.0;
RET = _11;
_5.0 = _10.0;
_8 = 32_u8 as isize;
_1 = _3.0;
_14.0.2 = _3;
_14.0.0 = _3.1;
_12 = !2967271809_u32;
_14.0.2.0 = _11;
_10 = (_5.0,);
_6 = _3.2;
_4 = !_14.0.2.0;
_7 = (-5421327329389038314569272520402275043_i128) as isize;
_2 = !8925109472192406849_u64;
_14.0.4 = 17444_u16;
RET = 132479191063382166565573959546201683409_i128 as usize;
_14.0.0 = _3.1;
match _14.0.4 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb6,
4 => bb7,
5 => bb8,
6 => bb9,
17444 => bb11,
_ => bb10
}
}
bb6 = {
_3.2 = _9;
_6 = -_8;
_5.0 = 7172437196630755631_i64 as u128;
_8 = _6;
_10 = (_5.0,);
_12 = _6 as u32;
_5 = (_10.0,);
_9 = _7 >> _3.2;
_5 = (_10.0,);
_1 = _4;
_3.2 = _10.0 as isize;
_8 = !_7;
_5.0 = 13624_u16 as u128;
_8 = _7 + _9;
Goto(bb5)
}
bb7 = {
_3.0 = RET;
_5 = (314550921665180863689158686706246279439_u128,);
_7 = false as isize;
_3.0 = !RET;
_3.0 = _4 >> RET;
_8 = _7;
RET = (-16573851803304542272274904089435452860_i128) as usize;
RET = _1 ^ _1;
_7 = (-86_i8) as isize;
_6 = _7 & _8;
_1 = !_3.0;
RET = _1 << _8;
_5.0 = (-6453_i16) as u128;
_3 = (_1, '\u{106894}', _6);
_9 = 56710639_i32 as isize;
_5 = (54889829059416445709726539835672501481_u128,);
RET = _4;
Goto(bb4)
}
bb8 = {
_5.0 = false as u128;
_6 = -_3.2;
Goto(bb3)
}
bb9 = {
_5.0 = !176486608506575797345849902445102125926_u128;
_3.2 = 88_isize;
_1 = _3.2 as usize;
RET = !_3.0;
_4 = _1;
_5 = (299719821395593442886093506369953013571_u128,);
_5 = (84232305298038757618917024900053519493_u128,);
_5.0 = 145248332431225440580961029449478347199_u128;
RET = !_1;
Goto(bb2)
}
bb10 = {
Return()
}
bb11 = {
_5 = (_10.0,);
_17.fld0 = [196_u8,170_u8,154_u8,59_u8,208_u8,6_u8,96_u8,103_u8];
_14.0.1 = false;
_14.0.4 = 21727_u16;
_18 = [_12,_12,_12,_12];
_14.0.2.2 = _3.2 << _1;
_15.fld0 = core::ptr::addr_of!(_10);
RET = _14.0.2.0;
_14.0.3 = _12;
_12 = _14.0.3;
RET = 23_i8 as usize;
_16.0.3 = !_14.0.3;
_4 = RET + _1;
_16.0.2.0 = _4 & _3.0;
_16.0.2.1 = _14.0.2.1;
_16.0.2 = (_3.0, _14.0.0, _14.0.2.2);
match _14.0.4 {
0 => bb1,
1 => bb9,
21727 => bb12,
_ => bb8
}
}
bb12 = {
_16 = (_14.0,);
_3 = (_16.0.2.0, _16.0.2.1, _14.0.2.2);
_16.0.2.1 = _3.1;
_16 = _14;
_16.0.1 = _14.0.1;
_16.0.3 = _12;
_16.0.4 = _14.0.4;
_14.0.4 = (-29705_i16) as u16;
_13 = _14.0.4 as f64;
RET = (-112_i8) as usize;
_14.0 = _16.0;
_16.0.3 = _14.0.3;
_4 = 56_i8 as usize;
_16.0 = (_3.1, _14.0.1, _14.0.2, _12, _14.0.4);
_14.0.2.0 = (-6003563453357616281_i64) as usize;
_16.0.0 = _14.0.2.1;
_23.1 = [_16.0.2.0,_14.0.2.0,_11,_16.0.2.0];
_14.0.2.1 = _16.0.0;
_14.0 = (_3.1, _16.0.1, _16.0.2, _12, _16.0.4);
_10 = (_5.0,);
_4 = _3.0;
_23.3 = _14.0.2.2 ^ _7;
_24 = _3.1;
_22 = [_12,_14.0.3];
match _16.0.4 {
21727 => bb13,
_ => bb8
}
}
bb13 = {
_14 = (_16.0,);
_14.0.2.2 = _4 as isize;
_14.0.2.1 = _16.0.0;
_16.0.1 = _16.0.2.2 < _8;
_1 = _16.0.2.2 as usize;
_16.0.1 = _14.0.1;
_24 = _14.0.0;
_23.3 = -_16.0.2.2;
_22 = [_12,_12];
Call(_22 = core::intrinsics::transmute(_3.2), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
_21 = _14.0.2.1 == _14.0.2.1;
_4 = !_1;
_20 = -_13;
_23.6 = 60879706015715849704116346892191976434_i128 as u8;
_10.0 = 673199266_i32 as u128;
_26.0.1 = !_16.0.1;
_26.0.3 = _14.0.3 << _4;
_14.0.2.2 = _16.0.2.2;
_26.0.2.1 = _16.0.0;
RET = _1;
_14.0.2.1 = _16.0.0;
_21 = !_26.0.1;
_12 = _16.0.3;
_17.fld0 = [_23.6,_23.6,_23.6,_23.6,_23.6,_23.6,_23.6,_23.6];
_6 = -_16.0.2.2;
_16 = (_14.0,);
_26.0.0 = _24;
_28.0 = (_16.0.0, _26.0.1, _3, _26.0.3, _16.0.4);
_6 = !_14.0.2.2;
_28.0.2.0 = _6 as usize;
RET = _4;
_6 = -_28.0.2.2;
_26.0.2.2 = -_7;
_26.0.2 = _3;
_27 = [_14.0.1,_26.0.1,_14.0.1,_28.0.1];
_14.0.0 = _28.0.0;
_23.0 = !_2;
Goto(bb15)
}
bb15 = {
Call(_30 = dump_var(3_usize, 10_usize, Move(_10), 18_usize, Move(_18), 8_usize, Move(_8), 1_usize, Move(_1)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_30 = dump_var(3_usize, 9_usize, Move(_9), 16_usize, Move(_16), 7_usize, Move(_7), 4_usize, Move(_4)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_30 = dump_var(3_usize, 5_usize, Move(_5), 21_usize, Move(_21), 31_usize, _31, 31_usize, _31), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn4(mut _1: char,mut _2: usize,mut _3: (usize, char, isize),mut _4: usize,mut _5: (usize, char, isize),mut _6: isize,mut _7: char,mut _8: (usize, char, isize),mut _9: char) -> usize {
mir! {
type RET = usize;
let _10: Adt46;
let _11: *const (u128,);
let _12: u64;
let _13: isize;
let _14: [i16; 5];
let _15: (u8, i16, i64);
let _16: Adt46;
let _17: i8;
let _18: Adt49;
let _19: u16;
let _20: Adt52;
let _21: Adt47;
let _22: (f32, i32, isize, char);
let _23: Adt49;
let _24: ([u8; 8],);
let _25: *mut i16;
let _26: (i64, [bool; 4]);
let _27: [u32; 4];
let _28: ();
let _29: ();
{
_8 = (_2, _9, _6);
_3.0 = !_2;
_8.2 = -_6;
_8.0 = _5.0 << _5.2;
_4 = !_8.0;
Call(_1 = fn5(_4, _8.1, _3, _7, _7, _9, _7), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_3 = _8;
_6 = -_3.2;
_8.0 = _2 << _5.2;
_9 = _5.1;
_5.2 = _8.2;
RET = !_2;
_8.0 = 37829382421770031899660498604950135578_u128 as usize;
_3.0 = _5.0 - _4;
_3.2 = -_6;
_3 = (_4, _7, _6);
_3.0 = 242375287375355005163218028601066856257_u128 as usize;
_8.1 = _1;
_5 = (_3.0, _7, _8.2);
Goto(bb2)
}
bb2 = {
_6 = !_5.2;
_3.2 = _6 >> _5.0;
_3 = _8;
_3.2 = !_5.2;
RET = !_4;
_4 = _2;
_5.1 = _9;
_3.2 = -_5.2;
RET = _4;
_2 = !RET;
_12 = _5.1 as u64;
_6 = 244708286852774404093158399414792585993_u128 as isize;
_5.2 = _12 as isize;
RET = !_4;
_5.0 = RET ^ _3.0;
_3.0 = _12 as usize;
_6 = -_5.2;
_8.0 = _3.0;
RET = _8.0 & _5.0;
_3.0 = !_8.0;
_2 = RET << _3.0;
_13 = _5.2;
_5.1 = _1;
Goto(bb3)
}
bb3 = {
_5.2 = _12 as isize;
_8.0 = _2 & _3.0;
_8.2 = 110_u8 as isize;
_14 = [(-1079_i16),22816_i16,14275_i16,(-4841_i16),(-80_i16)];
_5.0 = !_3.0;
_18.fld0 = [8_u8,52_u8,182_u8,2_u8,244_u8,225_u8,76_u8,244_u8];
_15.1 = !9939_i16;
_6 = !_5.2;
_8.0 = !_2;
RET = !_2;
_15 = (141_u8, (-18286_i16), 707312210526615133_i64);
_1 = _5.1;
_3.2 = _6;
_4 = RET ^ _8.0;
_18.fld0 = [_15.0,_15.0,_15.0,_15.0,_15.0,_15.0,_15.0,_15.0];
_17 = 111_i8 | (-72_i8);
_15.1 = -(-7767_i16);
_15 = (186_u8, (-8819_i16), (-4609007394839981633_i64));
_7 = _3.1;
_4 = _8.0;
_5.2 = _3.2 & _3.2;
_6 = _8.2;
_14 = [_15.1,_15.1,_15.1,_15.1,_15.1];
_15.0 = 81_u8 << _12;
_3 = (_2, _9, _8.2);
Goto(bb4)
}
bb4 = {
_1 = _9;
_19 = 44693_u16 ^ 9474_u16;
_3.1 = _5.1;
_5.0 = _2 * _2;
_17 = (-125_i8) * 98_i8;
_5.0 = _15.1 as usize;
_21.fld2 = [_19,_19,_19,_19,_19];
_7 = _5.1;
_18.fld0 = [_15.0,_15.0,_15.0,_15.0,_15.0,_15.0,_15.0,_15.0];
_5.0 = !_8.0;
_8.1 = _5.1;
_22.0 = _19 as f32;
_21.fld1 = !_12;
_8.0 = _3.0;
_22.1 = _15.0 as i32;
_22.1 = _7 as i32;
_8.2 = _2 as isize;
_8.1 = _9;
RET = !_3.0;
_8.1 = _5.1;
_5.2 = _3.2;
_9 = _1;
_5.2 = -_13;
_12 = !_21.fld1;
match _15.2 {
0 => bb2,
1 => bb5,
2 => bb6,
3 => bb7,
340282366920938463458765600036928229823 => bb9,
_ => bb8
}
}
bb5 = {
_5.2 = _12 as isize;
_8.0 = _2 & _3.0;
_8.2 = 110_u8 as isize;
_14 = [(-1079_i16),22816_i16,14275_i16,(-4841_i16),(-80_i16)];
_5.0 = !_3.0;
_18.fld0 = [8_u8,52_u8,182_u8,2_u8,244_u8,225_u8,76_u8,244_u8];
_15.1 = !9939_i16;
_6 = !_5.2;
_8.0 = !_2;
RET = !_2;
_15 = (141_u8, (-18286_i16), 707312210526615133_i64);
_1 = _5.1;
_3.2 = _6;
_4 = RET ^ _8.0;
_18.fld0 = [_15.0,_15.0,_15.0,_15.0,_15.0,_15.0,_15.0,_15.0];
_17 = 111_i8 | (-72_i8);
_15.1 = -(-7767_i16);
_15 = (186_u8, (-8819_i16), (-4609007394839981633_i64));
_7 = _3.1;
_4 = _8.0;
_5.2 = _3.2 & _3.2;
_6 = _8.2;
_14 = [_15.1,_15.1,_15.1,_15.1,_15.1];
_15.0 = 81_u8 << _12;
_3 = (_2, _9, _8.2);
Goto(bb4)
}
bb6 = {
_6 = !_5.2;
_3.2 = _6 >> _5.0;
_3 = _8;
_3.2 = !_5.2;
RET = !_4;
_4 = _2;
_5.1 = _9;
_3.2 = -_5.2;
RET = _4;
_2 = !RET;
_12 = _5.1 as u64;
_6 = 244708286852774404093158399414792585993_u128 as isize;
_5.2 = _12 as isize;
RET = !_4;
_5.0 = RET ^ _3.0;
_3.0 = _12 as usize;
_6 = -_5.2;
_8.0 = _3.0;
RET = _8.0 & _5.0;
_3.0 = !_8.0;
_2 = RET << _3.0;
_13 = _5.2;
_5.1 = _1;
Goto(bb3)
}
bb7 = {
_3 = _8;
_6 = -_3.2;
_8.0 = _2 << _5.2;
_9 = _5.1;
_5.2 = _8.2;
RET = !_2;
_8.0 = 37829382421770031899660498604950135578_u128 as usize;
_3.0 = _5.0 - _4;
_3.2 = -_6;
_3 = (_4, _7, _6);
_3.0 = 242375287375355005163218028601066856257_u128 as usize;
_8.1 = _1;
_5 = (_3.0, _7, _8.2);
Goto(bb2)
}
bb8 = {
Return()
}
bb9 = {
_15.2 = !3043505529855490983_i64;
_4 = _15.0 as usize;
_23.fld0 = [_15.0,_15.0,_15.0,_15.0,_15.0,_15.0,_15.0,_15.0];
_7 = _3.1;
_13 = 1369891006_u32 as isize;
_24 = (_23.fld0,);
_8.1 = _5.1;
_24 = (_18.fld0,);
_22.3 = _1;
_9 = _22.3;
_22.2 = _5.2 + _6;
_21.fld1 = 2642660040_u32 as u64;
_26.1 = [false,false,false,true];
_9 = _22.3;
_3.1 = _7;
match _15.1 {
0 => bb1,
1 => bb4,
2 => bb10,
3 => bb11,
4 => bb12,
340282366920938463463374607431768202637 => bb14,
_ => bb13
}
}
bb10 = {
_3 = _8;
_6 = -_3.2;
_8.0 = _2 << _5.2;
_9 = _5.1;
_5.2 = _8.2;
RET = !_2;
_8.0 = 37829382421770031899660498604950135578_u128 as usize;
_3.0 = _5.0 - _4;
_3.2 = -_6;
_3 = (_4, _7, _6);
_3.0 = 242375287375355005163218028601066856257_u128 as usize;
_8.1 = _1;
_5 = (_3.0, _7, _8.2);
Goto(bb2)
}
bb11 = {
_5.2 = _12 as isize;
_8.0 = _2 & _3.0;
_8.2 = 110_u8 as isize;
_14 = [(-1079_i16),22816_i16,14275_i16,(-4841_i16),(-80_i16)];
_5.0 = !_3.0;
_18.fld0 = [8_u8,52_u8,182_u8,2_u8,244_u8,225_u8,76_u8,244_u8];
_15.1 = !9939_i16;
_6 = !_5.2;
_8.0 = !_2;
RET = !_2;
_15 = (141_u8, (-18286_i16), 707312210526615133_i64);
_1 = _5.1;
_3.2 = _6;
_4 = RET ^ _8.0;
_18.fld0 = [_15.0,_15.0,_15.0,_15.0,_15.0,_15.0,_15.0,_15.0];
_17 = 111_i8 | (-72_i8);
_15.1 = -(-7767_i16);
_15 = (186_u8, (-8819_i16), (-4609007394839981633_i64));
_7 = _3.1;
_4 = _8.0;
_5.2 = _3.2 & _3.2;
_6 = _8.2;
_14 = [_15.1,_15.1,_15.1,_15.1,_15.1];
_15.0 = 81_u8 << _12;
_3 = (_2, _9, _8.2);
Goto(bb4)
}
bb12 = {
_1 = _9;
_19 = 44693_u16 ^ 9474_u16;
_3.1 = _5.1;
_5.0 = _2 * _2;
_17 = (-125_i8) * 98_i8;
_5.0 = _15.1 as usize;
_21.fld2 = [_19,_19,_19,_19,_19];
_7 = _5.1;
_18.fld0 = [_15.0,_15.0,_15.0,_15.0,_15.0,_15.0,_15.0,_15.0];
_5.0 = !_8.0;
_8.1 = _5.1;
_22.0 = _19 as f32;
_21.fld1 = !_12;
_8.0 = _3.0;
_22.1 = _15.0 as i32;
_22.1 = _7 as i32;
_8.2 = _2 as isize;
_8.1 = _9;
RET = !_3.0;
_8.1 = _5.1;
_5.2 = _3.2;
_9 = _1;
_5.2 = -_13;
_12 = !_21.fld1;
match _15.2 {
0 => bb2,
1 => bb5,
2 => bb6,
3 => bb7,
340282366920938463458765600036928229823 => bb9,
_ => bb8
}
}
bb13 = {
_6 = !_5.2;
_3.2 = _6 >> _5.0;
_3 = _8;
_3.2 = !_5.2;
RET = !_4;
_4 = _2;
_5.1 = _9;
_3.2 = -_5.2;
RET = _4;
_2 = !RET;
_12 = _5.1 as u64;
_6 = 244708286852774404093158399414792585993_u128 as isize;
_5.2 = _12 as isize;
RET = !_4;
_5.0 = RET ^ _3.0;
_3.0 = _12 as usize;
_6 = -_5.2;
_8.0 = _3.0;
RET = _8.0 & _5.0;
_3.0 = !_8.0;
_2 = RET << _3.0;
_13 = _5.2;
_5.1 = _1;
Goto(bb3)
}
bb14 = {
_8 = _3;
_27 = [4227341505_u32,3595247818_u32,602000172_u32,1786077146_u32];
_18 = Adt49 { fld0: _24.0 };
RET = _3.0 | _3.0;
_5 = (_8.0, _8.1, _8.2);
Goto(bb15)
}
bb15 = {
Call(_28 = dump_var(4_usize, 19_usize, Move(_19), 13_usize, Move(_13), 5_usize, Move(_5), 14_usize, Move(_14)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_28 = dump_var(4_usize, 2_usize, Move(_2), 12_usize, Move(_12), 15_usize, Move(_15), 1_usize, Move(_1)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn5(mut _1: usize,mut _2: char,mut _3: (usize, char, isize),mut _4: char,mut _5: char,mut _6: char,mut _7: char) -> char {
mir! {
type RET = char;
let _8: bool;
let _9: i64;
let _10: isize;
let _11: u64;
let _12: (usize, char, isize);
let _13: f32;
let _14: *const &'static isize;
let _15: [u32; 2];
let _16: Adt47;
let _17: char;
let _18: Adt59;
let _19: bool;
let _20: ();
let _21: ();
{
_3.0 = _1 << _1;
_7 = _5;
_7 = _5;
_6 = _2;
_3 = (_1, _4, (-91_isize));
_7 = _6;
_5 = _4;
_2 = _4;
_3.0 = 4022868441_u32 as usize;
_7 = _4;
RET = _4;
_1 = 31_u8 as usize;
RET = _6;
RET = _3.1;
_2 = RET;
_7 = _5;
_3 = (_1, _7, (-80_isize));
_7 = RET;
_3 = (_1, RET, 9223372036854775807_isize);
_1 = _3.0 ^ _3.0;
_3.0 = _1 >> _3.2;
match _3.2 {
0 => bb1,
1 => bb2,
2 => bb3,
9223372036854775807 => bb5,
_ => bb4
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
_9 = 1155435173_u32 as i64;
_3.0 = _1;
_5 = _3.1;
Goto(bb6)
}
bb6 = {
_8 = !false;
_4 = _7;
_6 = _4;
_1 = _3.0;
_1 = _8 as usize;
_1 = _3.0;
_3.0 = _1;
_8 = true & true;
_10 = (-985934124_i32) as isize;
_12.2 = _3.2 + _3.2;
RET = _5;
_11 = 13774864747371849322_u64 - 6512722533209035203_u64;
RET = _6;
Call(_12 = fn6(_3.2, _1, _6, _3.2, _2, _3, _11, _3.1, _2, _5, _2, _4), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
_4 = _5;
RET = _3.1;
_3 = (_12.0, _7, _12.2);
_15 = [899559866_u32,1086357808_u32];
_11 = 6124965532132656098_u64 & 14926518332309368014_u64;
_5 = _4;
_3.0 = _12.0;
_4 = _2;
Goto(bb8)
}
bb8 = {
_3.1 = _7;
_6 = _3.1;
_13 = 1173448770_i32 as f32;
RET = _12.1;
RET = _12.1;
Goto(bb9)
}
bb9 = {
_9 = -5143135784108898467_i64;
_3 = (_1, _2, _12.2);
_3 = (_1, _2, _12.2);
_11 = _13 as u64;
_3.2 = _12.2 - _12.2;
_13 = (-68_i8) as f32;
_12 = _3;
_11 = !17597179127261958266_u64;
_12.1 = RET;
_12.1 = _5;
_12 = (_3.0, _6, _3.2);
_12 = (_1, RET, _3.2);
_3.0 = _1;
_2 = RET;
_6 = _2;
_16.fld2 = [58935_u16,32484_u16,33548_u16,43048_u16,43286_u16];
_12 = (_1, _2, _3.2);
_11 = 18196108591927734350_u64;
_9 = 64873321865494082431954844812329355448_i128 as i64;
match _11 {
0 => bb7,
1 => bb10,
2 => bb11,
3 => bb12,
4 => bb13,
5 => bb14,
18196108591927734350 => bb16,
_ => bb15
}
}
bb10 = {
Return()
}
bb11 = {
_4 = _5;
RET = _3.1;
_3 = (_12.0, _7, _12.2);
_15 = [899559866_u32,1086357808_u32];
_11 = 6124965532132656098_u64 & 14926518332309368014_u64;
_5 = _4;
_3.0 = _12.0;
_4 = _2;
Goto(bb8)
}
bb12 = {
_8 = !false;
_4 = _7;
_6 = _4;
_1 = _3.0;
_1 = _8 as usize;
_1 = _3.0;
_3.0 = _1;
_8 = true & true;
_10 = (-985934124_i32) as isize;
_12.2 = _3.2 + _3.2;
RET = _5;
_11 = 13774864747371849322_u64 - 6512722533209035203_u64;
RET = _6;
Call(_12 = fn6(_3.2, _1, _6, _3.2, _2, _3, _11, _3.1, _2, _5, _2, _4), ReturnTo(bb7), UnwindUnreachable())
}
bb13 = {
_9 = 1155435173_u32 as i64;
_3.0 = _1;
_5 = _3.1;
Goto(bb6)
}
bb14 = {
Return()
}
bb15 = {
Return()
}
bb16 = {
_16.fld1 = _11 | _11;
_11 = _16.fld1;
_1 = _12.0 >> _12.2;
RET = _5;
RET = _6;
_11 = _10 as u64;
_12.1 = _4;
_10 = _3.2 - _3.2;
_12.2 = -_10;
_12.0 = _1;
_4 = _2;
_16.fld1 = _11 | _11;
_16.fld2 = [48239_u16,48165_u16,5670_u16,21638_u16,22182_u16];
_4 = _7;
_17 = _4;
RET = _2;
_11 = _16.fld1;
_16.fld0 = Adt45::Variant0 { fld0: _12.1 };
Goto(bb17)
}
bb17 = {
Call(_20 = dump_var(5_usize, 15_usize, Move(_15), 3_usize, Move(_3), 5_usize, Move(_5), 1_usize, Move(_1)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_20 = dump_var(5_usize, 6_usize, Move(_6), 10_usize, Move(_10), 7_usize, Move(_7), 21_usize, _21), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn6(mut _1: isize,mut _2: usize,mut _3: char,mut _4: isize,mut _5: char,mut _6: (usize, char, isize),mut _7: u64,mut _8: char,mut _9: char,mut _10: char,mut _11: char,mut _12: char) -> (usize, char, isize) {
mir! {
type RET = (usize, char, isize);
let _13: char;
let _14: isize;
let _15: Adt56;
let _16: f32;
let _17: i32;
let _18: f32;
let _19: f32;
let _20: Adt54;
let _21: Adt53;
let _22: (u64, [usize; 4], i32, isize, u8, &'static isize, u8, [u32; 2]);
let _23: f64;
let _24: isize;
let _25: f64;
let _26: isize;
let _27: (usize, char, isize);
let _28: i64;
let _29: ((char, bool, (usize, char, isize), u32, u16),);
let _30: isize;
let _31: [u64; 6];
let _32: *mut [i8; 7];
let _33: bool;
let _34: u128;
let _35: bool;
let _36: ();
let _37: ();
{
RET = (_6.0, _8, _1);
RET.1 = _10;
RET.2 = _4 >> _2;
RET.1 = _11;
_9 = _11;
_6.2 = _1 | RET.2;
_6.2 = !_1;
_5 = _11;
_5 = _8;
_6 = (RET.0, _8, _1);
_6 = (_2, _11, RET.2);
_4 = 19_u8 as isize;
_1 = !_6.2;
_6.0 = 55_i8 as usize;
_1 = _7 as isize;
_7 = 46961678535256348296758283071783972482_u128 as u64;
_11 = _12;
_6.0 = !RET.0;
_6.0 = 34_i8 as usize;
_11 = _12;
_11 = _12;
Call(_15 = fn7(_8, RET.2, _6.2, RET.2, _3, _6.2, _6, _10, _6, _1, _6.2, _11), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_1 = Field::<f64>(Variant(_15, 3), 1) as isize;
RET = _6;
RET.0 = _6.0;
SetDiscriminant(_15, 2);
_8 = _3;
_11 = _3;
_6 = RET;
_11 = _10;
RET.0 = !_6.0;
_6.2 = _1 | RET.2;
place!(Field::<char>(Variant(_15, 2), 1)) = _8;
_3 = _12;
_1 = -RET.2;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_15, 2), 0)).0.3 = (-155507087710152533_i64) as u32;
_10 = Field::<char>(Variant(_15, 2), 1);
Goto(bb2)
}
bb2 = {
_20.fld0 = (-90403921030358570344826546673981294209_i128) as f64;
_22.6 = 160_u8 | 173_u8;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_15, 2), 0)).0.4 = 24582_u16;
_17 = 1437470378_i32 + 510684771_i32;
_22.4 = _22.6 ^ _22.6;
_22.7 = [Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_15, 2), 0).0.3,Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_15, 2), 0).0.3];
_6 = RET;
_20.fld2 = !(-4564604161910037588_i64);
_16 = _17 as f32;
_18 = -_16;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_15, 2), 0)).0.2.2 = RET.2;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_15, 2), 0)).0.0 = _11;
_22.1 = [_2,_6.0,RET.0,_2];
Goto(bb3)
}
bb3 = {
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_15, 2), 0)).0.3 = 3183834433_u32 - 3713933006_u32;
_22.7 = [Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_15, 2), 0).0.3,Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_15, 2), 0).0.3];
_4 = _22.4 as isize;
_14 = _1;
_27.2 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_15, 2), 0).0.2.2;
_22.5 = &_4;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_15, 2), 0)).0.0 = _9;
_11 = _9;
_13 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_15, 2), 0).0.0;
_5 = _9;
_4 = RET.2 * RET.2;
_25 = _20.fld0;
_29.0.0 = Field::<char>(Variant(_15, 2), 1);
_29.0 = (_12, false, _6, Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_15, 2), 0).0.3, Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_15, 2), 0).0.4);
_27.1 = _11;
_29.0.2.1 = _3;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_15, 2), 0)).0.2.0 = _29.0.2.0 | _6.0;
_19 = (-2827_i16) as f32;
_14 = _29.0.2.2 & _29.0.2.2;
Goto(bb4)
}
bb4 = {
_23 = -_20.fld0;
_19 = _20.fld2 as f32;
_27.0 = _6.0 - _2;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_15, 2), 0)).0.2.0 = _2;
RET.1 = _29.0.2.1;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_15, 2), 0)).0.4 = _29.0.4 ^ _29.0.4;
_7 = !4639626202242688707_u64;
_2 = RET.0 << _27.2;
_8 = _11;
Goto(bb5)
}
bb5 = {
place!(Field::<char>(Variant(_15, 2), 1)) = _6.1;
_29.0.2.2 = _27.2;
RET.2 = -_14;
_24 = _1 & _29.0.2.2;
_29.0 = (_11, false, _6, Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_15, 2), 0).0.3, Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_15, 2), 0).0.4);
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_15, 2), 0)).0.2 = (_2, Field::<char>(Variant(_15, 2), 1), _14);
_9 = _3;
RET = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_15, 2), 0).0.2;
_26 = _24 * _4;
_6 = (_2, _5, _1);
_29.0.2.2 = -_26;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_15, 2), 0)).0.2.2 = _29.0.2.2;
_7 = 1025123435681394165_u64;
_22.3 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_15, 2), 0).0.2.2 | _29.0.2.2;
_20.fld2 = _16 as i64;
_29.0.2.1 = _5;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_15, 2), 0)).0.1 = _24 > Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_15, 2), 0).0.2.2;
Goto(bb6)
}
bb6 = {
Call(_36 = dump_var(6_usize, 27_usize, Move(_27), 7_usize, Move(_7), 4_usize, Move(_4), 5_usize, Move(_5)), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
Call(_36 = dump_var(6_usize, 9_usize, Move(_9), 12_usize, Move(_12), 11_usize, Move(_11), 10_usize, Move(_10)), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
Call(_36 = dump_var(6_usize, 8_usize, Move(_8), 37_usize, _37, 37_usize, _37, 37_usize, _37), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn7(mut _1: char,mut _2: isize,mut _3: isize,mut _4: isize,mut _5: char,mut _6: isize,mut _7: (usize, char, isize),mut _8: char,mut _9: (usize, char, isize),mut _10: isize,mut _11: isize,mut _12: char) -> Adt56 {
mir! {
type RET = Adt56;
let _13: [u8; 8];
let _14: f64;
let _15: Adt59;
let _16: bool;
let _17: f32;
let _18: isize;
let _19: Adt49;
let _20: *const (u128,);
let _21: Adt45;
let _22: i16;
let _23: (u8, i16, i64);
let _24: *const (u128,);
let _25: ([u8; 8],);
let _26: u128;
let _27: Adt47;
let _28: Adt56;
let _29: *const (u128,);
let _30: isize;
let _31: *const f64;
let _32: bool;
let _33: isize;
let _34: [i8; 7];
let _35: (i64, [bool; 4]);
let _36: u64;
let _37: [i8; 7];
let _38: char;
let _39: *const u128;
let _40: Adt46;
let _41: [i16; 5];
let _42: Adt48;
let _43: i16;
let _44: f64;
let _45: bool;
let _46: Adt56;
let _47: [i8; 7];
let _48: isize;
let _49: i8;
let _50: Adt51;
let _51: f32;
let _52: Adt55;
let _53: Adt49;
let _54: u16;
let _55: [i16; 5];
let _56: ();
let _57: ();
{
_7 = (_9.0, _1, _4);
_7.1 = _8;
_7.1 = _5;
_10 = !_2;
_10 = 7155_i16 as isize;
_6 = _2;
_14 = 135364704434205529546994206534395962062_u128 as f64;
_2 = 292184436931452844948205021454693837756_u128 as isize;
_5 = _8;
_2 = _9.2 + _7.2;
_10 = false as isize;
_5 = _12;
_7 = (_9.0, _5, _2);
_12 = _5;
_3 = 85404677764379667873588271237092201163_i128 as isize;
_9.2 = 811388037_i32 as isize;
_9.0 = _7.0;
_2 = _4;
_13 = [167_u8,53_u8,225_u8,99_u8,171_u8,40_u8,108_u8,247_u8];
_16 = true;
_12 = _5;
_5 = _8;
_2 = !_7.2;
Call(_13 = fn8(_7.2, _2, _9, _7, _7.1, _4, _1, _7, _12, _7.1, _11, _10, _11), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_3 = _14 as isize;
_16 = _8 <= _1;
_1 = _7.1;
_14 = 5916545714585512419_u64 as f64;
_17 = 1788029421_i32 as f32;
_7.1 = _9.1;
_11 = 5690158245543532863_i64 as isize;
_19.fld0 = [204_u8,202_u8,79_u8,150_u8,181_u8,219_u8,146_u8,86_u8];
_9.1 = _8;
_7.1 = _9.1;
_6 = -_9.2;
_7.0 = _9.0;
_7 = (_9.0, _1, _2);
_9.0 = !_7.0;
_18 = (-50599248855565000739990282846068470564_i128) as isize;
_7.0 = _9.0;
_19.fld0 = [11_u8,34_u8,36_u8,70_u8,224_u8,208_u8,105_u8,44_u8];
_7.1 = _12;
_7 = (_9.0, _8, _3);
_17 = _14 as f32;
_9.0 = 227_u8 as usize;
_9.1 = _12;
Goto(bb2)
}
bb2 = {
_12 = _9.1;
_10 = !_3;
_16 = true & false;
Call(_20 = fn13(_8, _13, _12, _4, _2, _7, _13, _2, Move(_19), _10, _18, _5), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_21 = Adt45::Variant1 { fld0: _20,fld1: 4062_u16 };
_16 = true;
_12 = _1;
_4 = 50_i8 as isize;
_9 = (_7.0, _7.1, _11);
_8 = _5;
_16 = !true;
Goto(bb4)
}
bb4 = {
_5 = _7.1;
_9 = (_7.0, _7.1, _2);
_22 = 13833_i16;
_7.0 = 128_u8 as usize;
_9.2 = _6;
_16 = _2 == _2;
_3 = 548628753_u32 as isize;
_16 = _7.0 >= _9.0;
_19.fld0 = [51_u8,0_u8,84_u8,206_u8,165_u8,116_u8,81_u8,98_u8];
_9.2 = _7.2;
_21 = Adt45::Variant1 { fld0: _20,fld1: 20210_u16 };
_17 = 1889140043_u32 as f32;
place!(Field::<*const (u128,)>(Variant(_21, 1), 0)) = _20;
_16 = !true;
_7.1 = _9.1;
_19 = Adt49 { fld0: _13 };
place!(Field::<u16>(Variant(_21, 1), 1)) = !53432_u16;
RET = Adt56::Variant3 { fld0: 202953506071079411887162120987702931532_u128,fld1: _14 };
SetDiscriminant(_21, 0);
_10 = _7.2;
_25.0 = [178_u8,191_u8,118_u8,170_u8,87_u8,163_u8,176_u8,20_u8];
_12 = _7.1;
_17 = 37024295965207064285513292618490725009_u128 as f32;
_17 = 32427_u16 as f32;
Call(place!(Field::<u128>(Variant(RET, 3), 0)) = core::intrinsics::bswap(75960435900616639050923024862096448433_u128), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
_17 = 63716_u16 as f32;
place!(Field::<[u64; 6]>(Variant(RET, 1), 6)) = [11481147786830958076_u64,9577071639702331170_u64,12999812924425346392_u64,2875900683897084923_u64,1365858779472987889_u64,4720106649090725336_u64];
_10 = _18 << _2;
place!(Field::<char>(Variant(_21, 0), 0)) = _9.1;
_10 = _2;
_10 = Field::<char>(Variant(_21, 0), 0) as isize;
_14 = _22 as f64;
_5 = _12;
_18 = _7.2;
_19 = Adt49 { fld0: _13 };
place!(Field::<bool>(Variant(RET, 1), 0)) = !_16;
_2 = _18;
_7 = _9;
_23.0 = !244_u8;
_26 = 125486991586866005662448076193113150837_u128;
_21 = Adt45::Variant1 { fld0: _20,fld1: 8257_u16 };
Goto(bb6)
}
bb6 = {
_7.0 = _9.0;
place!(Field::<i16>(Variant(RET, 1), 4)) = _22;
_23.2 = !5948630728712100965_i64;
place!(Field::<i16>(Variant(RET, 1), 4)) = _9.1 as i16;
_24 = Field::<*const (u128,)>(Variant(_21, 1), 0);
place!(Field::<*const (u128,)>(Variant(_21, 1), 0)) = _20;
_9.1 = _12;
Goto(bb7)
}
bb7 = {
_33 = _2 & _18;
_7 = _9;
_9.0 = !_7.0;
place!(Field::<[u64; 6]>(Variant(RET, 1), 6)) = [14146669358531901182_u64,8147976249718789655_u64,3311518473637102150_u64,12019011847158342177_u64,9496027306335604293_u64,2696017415213832033_u64];
_31 = core::ptr::addr_of!(_14);
_35.0 = _23.2;
_27.fld1 = 15636102068883338417_u64;
_25 = (_13,);
_30 = _23.0 as isize;
match _27.fld1 {
0 => bb1,
1 => bb2,
15636102068883338417 => bb8,
_ => bb5
}
}
bb8 = {
_9.2 = _14 as isize;
_16 = _27.fld1 == _27.fld1;
place!(Field::<*const (u128,)>(Variant(RET, 1), 1)) = _24;
place!(Field::<*const (u128,)>(Variant(_21, 1), 0)) = _20;
_20 = _24;
_38 = _7.1;
_7.1 = _9.1;
_35.1 = [_16,Field::<bool>(Variant(RET, 1), 0),_16,Field::<bool>(Variant(RET, 1), 0)];
_20 = _24;
place!(Field::<[u16; 5]>(Variant(RET, 1), 3)) = [22381_u16,1232_u16,43649_u16,46281_u16,13061_u16];
_29 = _24;
_2 = (*_31) as isize;
place!(Field::<*const (u128,)>(Variant(RET, 1), 1)) = Field::<*const (u128,)>(Variant(_21, 1), 0);
_23.2 = _35.0 + _35.0;
Goto(bb9)
}
bb9 = {
_9.1 = _8;
place!(Field::<bool>(Variant(RET, 1), 0)) = !_16;
_26 = !210768351195155205140054219001366669207_u128;
_35.1 = [_16,Field::<bool>(Variant(RET, 1), 0),Field::<bool>(Variant(RET, 1), 0),Field::<bool>(Variant(RET, 1), 0)];
_23.1 = Field::<i16>(Variant(RET, 1), 4) * Field::<i16>(Variant(RET, 1), 4);
_7.1 = _5;
place!(Field::<bool>(Variant(RET, 1), 0)) = _33 >= _33;
place!(Field::<[u64; 6]>(Variant(RET, 1), 6)) = [_27.fld1,_27.fld1,_27.fld1,_27.fld1,_27.fld1,_27.fld1];
Call(_33 = core::intrinsics::transmute(_13), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_24 = _29;
_35.1 = [Field::<bool>(Variant(RET, 1), 0),Field::<bool>(Variant(RET, 1), 0),_16,_16];
_25.0 = [_23.0,_23.0,_23.0,_23.0,_23.0,_23.0,_23.0,_23.0];
_39 = core::ptr::addr_of!(_26);
place!(Field::<u16>(Variant(_21, 1), 1)) = 18182_u16;
RET = Adt56::Variant3 { fld0: _26,fld1: _14 };
_14 = Field::<f64>(Variant(RET, 3), 1);
_26 = _17 as u128;
place!(Field::<f64>(Variant(RET, 3), 1)) = _33 as f64;
_41 = [_23.1,_23.1,_23.1,_23.1,_23.1];
_14 = -Field::<f64>(Variant(RET, 3), 1);
_7 = _9;
_28 = Move(RET);
_1 = _7.1;
place!(Field::<u128>(Variant(_28, 3), 0)) = (*_31) as u128;
_7.0 = Field::<u128>(Variant(_28, 3), 0) as usize;
_6 = _33 << _23.1;
place!(Field::<*const (u128,)>(Variant(_21, 1), 0)) = _29;
Call(_27.fld1 = core::intrinsics::transmute(_7.0), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_23.0 = 179_u8;
_27.fld1 = !17097262908630013700_u64;
_34 = [(-22_i8),(-102_i8),(-98_i8),52_i8,68_i8,(-2_i8),(-7_i8)];
_24 = Field::<*const (u128,)>(Variant(_21, 1), 0);
_7 = (_9.0, _8, _33);
_16 = false;
_23.2 = _16 as i64;
_35.0 = !_23.2;
_27.fld0 = Adt45::Variant1 { fld0: Field::<*const (u128,)>(Variant(_21, 1), 0),fld1: Field::<u16>(Variant(_21, 1), 1) };
place!(Field::<u16>(Variant(_21, 1), 1)) = (-5_i8) as u16;
_2 = _33 ^ _33;
match _23.0 {
0 => bb12,
179 => bb14,
_ => bb13
}
}
bb12 = {
_12 = _9.1;
_10 = !_3;
_16 = true & false;
Call(_20 = fn13(_8, _13, _12, _4, _2, _7, _13, _2, Move(_19), _10, _18, _5), ReturnTo(bb3), UnwindUnreachable())
}
bb13 = {
_21 = Adt45::Variant1 { fld0: _20,fld1: 4062_u16 };
_16 = true;
_12 = _1;
_4 = 50_i8 as isize;
_9 = (_7.0, _7.1, _11);
_8 = _5;
_16 = !true;
Goto(bb4)
}
bb14 = {
_45 = _16 | _16;
_7.1 = _8;
_5 = _12;
place!(Field::<u16>(Variant(_27.fld0, 1), 1)) = _17 as u16;
_27.fld2 = [Field::<u16>(Variant(_21, 1), 1),Field::<u16>(Variant(_27.fld0, 1), 1),Field::<u16>(Variant(_21, 1), 1),Field::<u16>(Variant(_27.fld0, 1), 1),Field::<u16>(Variant(_21, 1), 1)];
_23.0 = !4_u8;
_43 = _23.1;
_40 = Adt46::Variant1 { fld0: 10593009389768922529771138078480420974_i128,fld1: _35,fld2: _7.2,fld3: 1845911015_u32 };
_20 = _29;
_36 = _27.fld1 ^ _27.fld1;
place!(Field::<(i64, [bool; 4])>(Variant(_40, 1), 1)) = (_35.0, _35.1);
_12 = _1;
place!(Field::<*const (u128,)>(Variant(_27.fld0, 1), 0)) = _20;
place!(Field::<u32>(Variant(_40, 1), 3)) = 1628472437_u32;
_39 = core::ptr::addr_of!(place!(Field::<u128>(Variant(_28, 3), 0)));
_15 = Adt59::Variant1 { fld0: Field::<u32>(Variant(_40, 1), 3),fld1: _41 };
_22 = !_43;
_23 = (174_u8, _22, _35.0);
_20 = Field::<*const (u128,)>(Variant(_21, 1), 0);
_37 = [66_i8,(-118_i8),(-110_i8),(-2_i8),(-38_i8),(-44_i8),122_i8];
_7.1 = _12;
_27.fld1 = _36 + _36;
_2 = !_7.2;
_5 = _12;
_9.1 = _7.1;
_23.0 = !125_u8;
Goto(bb15)
}
bb15 = {
place!(Field::<u128>(Variant(_28, 3), 0)) = !_26;
_9.0 = _7.0 << _6;
_7.2 = Field::<isize>(Variant(_40, 1), 2);
_19.fld0 = [_23.0,_23.0,_23.0,_23.0,_23.0,_23.0,_23.0,_23.0];
_9 = (_7.0, _7.1, _33);
_27.fld2 = [Field::<u16>(Variant(_21, 1), 1),Field::<u16>(Variant(_27.fld0, 1), 1),Field::<u16>(Variant(_27.fld0, 1), 1),Field::<u16>(Variant(_21, 1), 1),Field::<u16>(Variant(_21, 1), 1)];
_23.1 = _22 << _9.2;
_17 = 1011349505_i32 as f32;
RET = Move(_28);
RET = Adt56::Variant3 { fld0: _26,fld1: (*_31) };
_26 = !Field::<u128>(Variant(RET, 3), 0);
_35 = (Field::<(i64, [bool; 4])>(Variant(_40, 1), 1).0, Field::<(i64, [bool; 4])>(Variant(_40, 1), 1).1);
_52.fld0.0.3 = Field::<u32>(Variant(_40, 1), 3) % Field::<u32>(Variant(_40, 1), 3);
place!(Field::<Adt55>(Variant(_15, 0), 1)).fld3 = [_36,_27.fld1,_27.fld1,_27.fld1,_27.fld1,_27.fld1];
_1 = _12;
Goto(bb16)
}
bb16 = {
Call(_56 = dump_var(7_usize, 16_usize, Move(_16), 11_usize, Move(_11), 26_usize, Move(_26), 23_usize, Move(_23)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_56 = dump_var(7_usize, 8_usize, Move(_8), 41_usize, Move(_41), 25_usize, Move(_25), 38_usize, Move(_38)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_56 = dump_var(7_usize, 34_usize, Move(_34), 10_usize, Move(_10), 2_usize, Move(_2), 4_usize, Move(_4)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_56 = dump_var(7_usize, 3_usize, Move(_3), 9_usize, Move(_9), 57_usize, _57, 57_usize, _57), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn8(mut _1: isize,mut _2: isize,mut _3: (usize, char, isize),mut _4: (usize, char, isize),mut _5: char,mut _6: isize,mut _7: char,mut _8: (usize, char, isize),mut _9: char,mut _10: char,mut _11: isize,mut _12: isize,mut _13: isize) -> [u8; 8] {
mir! {
type RET = [u8; 8];
let _14: (f32, i32, isize, char);
let _15: i8;
let _16: isize;
let _17: isize;
let _18: (u8, i16, i64);
let _19: *mut i16;
let _20: ((char, bool, (usize, char, isize), u32, u16),);
let _21: *const u128;
let _22: [u32; 2];
let _23: [u16; 5];
let _24: [i8; 7];
let _25: char;
let _26: isize;
let _27: isize;
let _28: u8;
let _29: char;
let _30: ();
let _31: ();
{
RET = [0_u8,227_u8,67_u8,23_u8,2_u8,14_u8,7_u8,235_u8];
_5 = _9;
_7 = _9;
_11 = 7304094285253458755_i64 as isize;
_9 = _5;
_9 = _7;
_11 = _13 * _2;
_3 = (_4.0, _5, _8.2);
_14.1 = -(-1028870850_i32);
_4 = _8;
_6 = _11;
_16 = !_4.2;
_4 = (_8.0, _10, _2);
_3.0 = _8.0;
_9 = _3.1;
_3 = (_8.0, _5, _8.2);
_17 = 140801882015363950326370438317968380543_i128 as isize;
_8.1 = _9;
_8.1 = _5;
_14.2 = 73168491537308010810566437486261547827_u128 as isize;
_14.3 = _7;
_14.3 = _7;
_15 = 125_i8 + 58_i8;
Call(_14 = fn9(_8.2, _4.2, _6, _3.2, _4, _16, _3.2, _1, _10), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_3.0 = !_4.0;
_4.0 = !_8.0;
RET = [202_u8,209_u8,108_u8,218_u8,125_u8,113_u8,213_u8,156_u8];
_8.0 = 26594_i16 as usize;
_3.1 = _4.1;
_18 = (183_u8, (-19437_i16), (-7262630145838055307_i64));
_8.0 = _4.0 + _3.0;
_14.1 = _3.0 as i32;
_8.1 = _5;
_15 = -57_i8;
_5 = _4.1;
_3 = (_8.0, _5, _16);
Goto(bb2)
}
bb2 = {
RET = [_18.0,_18.0,_18.0,_18.0,_18.0,_18.0,_18.0,_18.0];
_20.0.2.1 = _8.1;
RET = [_18.0,_18.0,_18.0,_18.0,_18.0,_18.0,_18.0,_18.0];
_9 = _14.3;
_3.1 = _9;
RET = [_18.0,_18.0,_18.0,_18.0,_18.0,_18.0,_18.0,_18.0];
_4.0 = !_3.0;
_20.0 = (_5, false, _4, 3734452218_u32, 25976_u16);
Goto(bb3)
}
bb3 = {
_20.0 = (_8.1, false, _3, 3251083570_u32, 20096_u16);
_6 = _20.0.2.2;
_7 = _10;
_8.1 = _9;
_3.0 = _20.0.2.0 + _4.0;
_8.2 = _2;
_3.1 = _7;
_7 = _20.0.0;
_22 = [_20.0.3,_20.0.3];
_2 = _3.2 >> _14.2;
_5 = _20.0.2.1;
_7 = _9;
_5 = _10;
Goto(bb4)
}
bb4 = {
_18.0 = 219_u8 >> _20.0.3;
_20.0.2 = (_4.0, _9, _2);
_20.0.0 = _4.1;
_9 = _20.0.2.1;
_18.2 = (-3199920916503140468_i64);
_24 = [_15,_15,_15,_15,_15,_15,_15];
_14.3 = _20.0.0;
match _20.0.3 {
0 => bb5,
1 => bb6,
2 => bb7,
3 => bb8,
3251083570 => bb10,
_ => bb9
}
}
bb5 = {
_20.0 = (_8.1, false, _3, 3251083570_u32, 20096_u16);
_6 = _20.0.2.2;
_7 = _10;
_8.1 = _9;
_3.0 = _20.0.2.0 + _4.0;
_8.2 = _2;
_3.1 = _7;
_7 = _20.0.0;
_22 = [_20.0.3,_20.0.3];
_2 = _3.2 >> _14.2;
_5 = _20.0.2.1;
_7 = _9;
_5 = _10;
Goto(bb4)
}
bb6 = {
RET = [_18.0,_18.0,_18.0,_18.0,_18.0,_18.0,_18.0,_18.0];
_20.0.2.1 = _8.1;
RET = [_18.0,_18.0,_18.0,_18.0,_18.0,_18.0,_18.0,_18.0];
_9 = _14.3;
_3.1 = _9;
RET = [_18.0,_18.0,_18.0,_18.0,_18.0,_18.0,_18.0,_18.0];
_4.0 = !_3.0;
_20.0 = (_5, false, _4, 3734452218_u32, 25976_u16);
Goto(bb3)
}
bb7 = {
_3.0 = !_4.0;
_4.0 = !_8.0;
RET = [202_u8,209_u8,108_u8,218_u8,125_u8,113_u8,213_u8,156_u8];
_8.0 = 26594_i16 as usize;
_3.1 = _4.1;
_18 = (183_u8, (-19437_i16), (-7262630145838055307_i64));
_8.0 = _4.0 + _3.0;
_14.1 = _3.0 as i32;
_8.1 = _5;
_15 = -57_i8;
_5 = _4.1;
_3 = (_8.0, _5, _16);
Goto(bb2)
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_14.3 = _9;
Call(_14.3 = fn10(_17, _20, _16, _4.2), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_22 = [_20.0.3,_20.0.3];
_19 = core::ptr::addr_of_mut!(_18.1);
_14.1 = -2066108500_i32;
_15 = 78_i8;
_1 = _14.2;
RET = [_18.0,_18.0,_18.0,_18.0,_18.0,_18.0,_18.0,_18.0];
_9 = _20.0.0;
_3.1 = _20.0.2.1;
_24 = [_15,_15,_15,_15,_15,_15,_15];
_14.0 = 118857298543880887656624205850644682411_u128 as f32;
_14.3 = _8.1;
_20.0.2.0 = _18.0 as usize;
_1 = !_2;
RET = [_18.0,_18.0,_18.0,_18.0,_18.0,_18.0,_18.0,_18.0];
_26 = _11 >> _1;
_28 = _18.0 * _18.0;
_6 = _11;
RET = [_18.0,_28,_28,_18.0,_28,_28,_18.0,_28];
_20.0.1 = false;
_17 = _6;
_25 = _8.1;
_20.0.4 = 102103194998334616124644819230911498535_i128 as u16;
_15 = (-23_i8) - 65_i8;
Goto(bb12)
}
bb12 = {
Call(_30 = dump_var(8_usize, 28_usize, Move(_28), 8_usize, Move(_8), 17_usize, Move(_17), 3_usize, Move(_3)), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
Call(_30 = dump_var(8_usize, 5_usize, Move(_5), 24_usize, Move(_24), 16_usize, Move(_16), 10_usize, Move(_10)), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
Call(_30 = dump_var(8_usize, 12_usize, Move(_12), 15_usize, Move(_15), 4_usize, Move(_4), 31_usize, _31), ReturnTo(bb15), UnwindUnreachable())
}
bb15 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn9(mut _1: isize,mut _2: isize,mut _3: isize,mut _4: isize,mut _5: (usize, char, isize),mut _6: isize,mut _7: isize,mut _8: isize,mut _9: char) -> (f32, i32, isize, char) {
mir! {
type RET = (f32, i32, isize, char);
let _10: ();
let _11: ();
{
_5.0 = 0_usize;
_5 = (12862059746002137868_usize, _9, _4);
RET.0 = 251209161607037196093106419003577172256_u128 as f32;
_4 = 16489068958601927136_u64 as isize;
RET.3 = _5.1;
RET.1 = _8 as i32;
_6 = (-24133_i16) as isize;
_5.1 = RET.3;
RET.2 = !_1;
_5.1 = RET.3;
_5.2 = _1;
RET.1 = 14214_i16 as i32;
RET.1 = 41943_u16 as i32;
_4 = _3;
_2 = -_4;
_5 = (4_usize, _9, _8);
Goto(bb1)
}
bb1 = {
Call(_10 = dump_var(9_usize, 4_usize, Move(_4), 6_usize, Move(_6), 3_usize, Move(_3), 7_usize, Move(_7)), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn10(mut _1: isize,mut _2: ((char, bool, (usize, char, isize), u32, u16),),mut _3: isize,mut _4: isize) -> char {
mir! {
type RET = char;
let _5: (u8, i16, i64);
let _6: Adt56;
let _7: *mut [i8; 7];
let _8: Adt46;
let _9: [u32; 4];
let _10: i128;
let _11: ([u8; 8],);
let _12: f32;
let _13: Adt53;
let _14: ();
let _15: ();
{
RET = _2.0.2.1;
RET = _2.0.0;
_2.0.3 = 2248404656_u32;
_2.0.2.2 = !_4;
Goto(bb1)
}
bb1 = {
_2.0.2.2 = -_4;
_5.2 = 7055257827661147889_i64 << _2.0.4;
_5.1 = -(-32644_i16);
_2.0.2.0 = 17179163431931162343_usize;
_2.0.0 = _2.0.2.1;
_2.0.2.0 = 4_usize + 4_usize;
RET = _2.0.2.1;
_2.0.0 = _2.0.2.1;
_2.0.2.1 = _2.0.0;
_3 = !_4;
_1 = _4;
Call(RET = fn11(_2.0, _2.0.1, _2.0.2), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_2.0.3 = 3183506628_u32;
_2.0.3 = 3388010464_u32;
_2.0.4 = 4727_u16;
_5.0 = 88_u8;
_5.0 = _2.0.3 as u8;
match _2.0.3 {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
4 => bb7,
5 => bb8,
3388010464 => bb10,
_ => bb9
}
}
bb3 = {
_2.0.2.2 = -_4;
_5.2 = 7055257827661147889_i64 << _2.0.4;
_5.1 = -(-32644_i16);
_2.0.2.0 = 17179163431931162343_usize;
_2.0.0 = _2.0.2.1;
_2.0.2.0 = 4_usize + 4_usize;
RET = _2.0.2.1;
_2.0.0 = _2.0.2.1;
_2.0.2.1 = _2.0.0;
_3 = !_4;
_1 = _4;
Call(RET = fn11(_2.0, _2.0.1, _2.0.2), ReturnTo(bb2), UnwindUnreachable())
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
RET = _2.0.0;
_4 = _2.0.2.2;
_9 = [_2.0.3,_2.0.3,_2.0.3,_2.0.3];
_5 = (206_u8, 26615_i16, (-1651522614237544416_i64));
_2.0.3 = 1499154074_u32 & 491273982_u32;
_2.0.2 = (0_usize, _2.0.0, _1);
_2.0.2 = (7_usize, RET, _4);
_2.0.2.0 = _2.0.3 as usize;
_1 = _4;
_5.1 = _2.0.1 as i16;
match _5.2 {
0 => bb5,
340282366920938463461723084817530667040 => bb11,
_ => bb3
}
}
bb11 = {
_2.0.0 = RET;
_2.0.3 = 2501775701_u32;
_3 = _4;
_5.1 = !(-29163_i16);
_1 = (-1891050099_i32) as isize;
match _2.0.3 {
0 => bb3,
1 => bb2,
2 => bb12,
3 => bb13,
4 => bb14,
2501775701 => bb16,
_ => bb15
}
}
bb12 = {
_2.0.2.2 = -_4;
_5.2 = 7055257827661147889_i64 << _2.0.4;
_5.1 = -(-32644_i16);
_2.0.2.0 = 17179163431931162343_usize;
_2.0.0 = _2.0.2.1;
_2.0.2.0 = 4_usize + 4_usize;
RET = _2.0.2.1;
_2.0.0 = _2.0.2.1;
_2.0.2.1 = _2.0.0;
_3 = !_4;
_1 = _4;
Call(RET = fn11(_2.0, _2.0.1, _2.0.2), ReturnTo(bb2), UnwindUnreachable())
}
bb13 = {
_2.0.3 = 3183506628_u32;
_2.0.3 = 3388010464_u32;
_2.0.4 = 4727_u16;
_5.0 = 88_u8;
_5.0 = _2.0.3 as u8;
match _2.0.3 {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
4 => bb7,
5 => bb8,
3388010464 => bb10,
_ => bb9
}
}
bb14 = {
Return()
}
bb15 = {
_2.0.2.2 = -_4;
_5.2 = 7055257827661147889_i64 << _2.0.4;
_5.1 = -(-32644_i16);
_2.0.2.0 = 17179163431931162343_usize;
_2.0.0 = _2.0.2.1;
_2.0.2.0 = 4_usize + 4_usize;
RET = _2.0.2.1;
_2.0.0 = _2.0.2.1;
_2.0.2.1 = _2.0.0;
_3 = !_4;
_1 = _4;
Call(RET = fn11(_2.0, _2.0.1, _2.0.2), ReturnTo(bb2), UnwindUnreachable())
}
bb16 = {
_2.0.2.1 = RET;
_2.0.2 = (5_usize, _2.0.0, _3);
_2.0.2.0 = !9975285054941942928_usize;
_5.1 = -6960_i16;
_9 = [_2.0.3,_2.0.3,_2.0.3,_2.0.3];
_2.0.1 = true;
_2.0.4 = 28525_u16 << _4;
_2.0.4 = 98218238306277870005407142484724315597_u128 as u16;
_2.0.2.2 = (-119_i8) as isize;
_2.0.3 = !2738160715_u32;
_3 = _4;
_2.0.2.2 = _3;
_2.0.2 = (0_usize, RET, _4);
RET = _2.0.0;
_2.0.4 = _2.0.2.2 as u16;
_2.0.2.1 = RET;
_2.0.3 = !1159824593_u32;
_10 = (-25360290852409652455151933243080482569_i128) & (-47381986326583346797907968495218186189_i128);
Goto(bb17)
}
bb17 = {
Call(_14 = dump_var(10_usize, 5_usize, Move(_5), 4_usize, Move(_4), 10_usize, Move(_10), 15_usize, _15), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn11(mut _1: (char, bool, (usize, char, isize), u32, u16),mut _2: bool,mut _3: (usize, char, isize)) -> char {
mir! {
type RET = char;
let _4: Adt49;
let _5: char;
let _6: bool;
let _7: isize;
let _8: Adt56;
let _9: Adt49;
let _10: [u64; 6];
let _11: isize;
let _12: (f32, i32, isize, char);
let _13: f64;
let _14: Adt44;
let _15: Adt52;
let _16: i64;
let _17: [i8; 7];
let _18: [u16; 5];
let _19: f64;
let _20: (u8, i16, i64);
let _21: i32;
let _22: [u16; 5];
let _23: [u16; 5];
let _24: char;
let _25: Adt45;
let _26: f32;
let _27: Adt49;
let _28: Adt54;
let _29: u64;
let _30: ();
let _31: ();
{
_1.3 = 2177573877_u32;
_1.2.0 = _3.0 >> _3.2;
_2 = _1.1;
_1.2.0 = !_3.0;
RET = _1.0;
_3.0 = _1.2.0;
_4.fld0 = [215_u8,178_u8,34_u8,15_u8,113_u8,235_u8,59_u8,18_u8];
_3.1 = _1.0;
RET = _3.1;
_6 = !_2;
Goto(bb1)
}
bb1 = {
_1.2.1 = _1.0;
_1.3 = 2653621860_u32 | 2278817292_u32;
_7 = _3.2;
_1.3 = 6222970_u32 - 654378827_u32;
_3.2 = _1.3 as isize;
_2 = _1.4 >= _1.4;
_1.1 = _2 ^ _2;
RET = _3.1;
_1.2.1 = RET;
_1.2.2 = 57887942121824129260055134497601587412_u128 as isize;
_4.fld0 = [175_u8,70_u8,40_u8,20_u8,28_u8,153_u8,176_u8,119_u8];
_1.1 = _6 ^ _6;
_1.2 = _3;
_1.2.0 = _7 as usize;
_2 = !_6;
_9 = Adt49 { fld0: _4.fld0 };
_1 = (RET, _6, _3, 66926588_u32, 50790_u16);
_1.2.2 = _7 - _7;
_5 = _3.1;
_4.fld0 = [206_u8,5_u8,101_u8,168_u8,222_u8,164_u8,66_u8,50_u8];
_1.3 = !3142166153_u32;
Call(_9 = fn12(_1.2.2, _1.4), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_1.2.2 = _7;
_2 = _6;
RET = _5;
_1.4 = !11010_u16;
RET = _3.1;
_9 = Adt49 { fld0: _4.fld0 };
_1.2.2 = _7;
_1.0 = RET;
_1 = (_3.1, _6, _3, 987704852_u32, 8305_u16);
_7 = _1.2.2;
_6 = !_1.1;
_2 = _1.3 >= _1.3;
_10 = [3016826405674390356_u64,6801387070157980330_u64,4371904197508264814_u64,16740195791863647059_u64,3707666217666572495_u64,11487878521180750019_u64];
_9.fld0 = [16_u8,104_u8,57_u8,219_u8,169_u8,90_u8,87_u8,113_u8];
_4 = Adt49 { fld0: _9.fld0 };
_9.fld0 = [234_u8,186_u8,22_u8,110_u8,247_u8,246_u8,59_u8,34_u8];
_13 = (-112_i8) as f64;
_5 = _1.2.1;
_12.3 = RET;
_8 = Adt56::Variant3 { fld0: 302406867567244664547182290584903949522_u128,fld1: _13 };
_7 = _1.2.2 ^ _3.2;
_12.3 = _1.0;
_4.fld0 = [170_u8,134_u8,120_u8,36_u8,81_u8,31_u8,45_u8,157_u8];
_3.2 = _1.2.2;
match _1.3 {
0 => bb3,
987704852 => bb5,
_ => bb4
}
}
bb3 = {
_1.2.1 = _1.0;
_1.3 = 2653621860_u32 | 2278817292_u32;
_7 = _3.2;
_1.3 = 6222970_u32 - 654378827_u32;
_3.2 = _1.3 as isize;
_2 = _1.4 >= _1.4;
_1.1 = _2 ^ _2;
RET = _3.1;
_1.2.1 = RET;
_1.2.2 = 57887942121824129260055134497601587412_u128 as isize;
_4.fld0 = [175_u8,70_u8,40_u8,20_u8,28_u8,153_u8,176_u8,119_u8];
_1.1 = _6 ^ _6;
_1.2 = _3;
_1.2.0 = _7 as usize;
_2 = !_6;
_9 = Adt49 { fld0: _4.fld0 };
_1 = (RET, _6, _3, 66926588_u32, 50790_u16);
_1.2.2 = _7 - _7;
_5 = _3.1;
_4.fld0 = [206_u8,5_u8,101_u8,168_u8,222_u8,164_u8,66_u8,50_u8];
_1.3 = !3142166153_u32;
Call(_9 = fn12(_1.2.2, _1.4), ReturnTo(bb2), UnwindUnreachable())
}
bb4 = {
Return()
}
bb5 = {
RET = _1.0;
_9.fld0 = [187_u8,136_u8,92_u8,5_u8,159_u8,115_u8,69_u8,126_u8];
_11 = _3.2 - _3.2;
_12.2 = _1.2.2;
_12.3 = RET;
_11 = _1.4 as isize;
place!(Field::<u128>(Variant(_8, 3), 0)) = !230237607108650962738745016348063488281_u128;
_12.1 = 34866394_i32;
_3 = (_1.2.0, _12.3, _11);
_3.0 = _1.2.0 + _1.2.0;
_1.2.0 = _3.0 * _3.0;
_12.1 = (-2127845079_i32) - (-61401685_i32);
place!(Field::<[u16; 5]>(Variant(_8, 1), 3)) = [_1.4,_1.4,_1.4,_1.4,_1.4];
_1.0 = _5;
_1.2.1 = _5;
_1.2 = (_3.0, _5, _11);
place!(Field::<[u16; 5]>(Variant(_8, 1), 3)) = [_1.4,_1.4,_1.4,_1.4,_1.4];
_1.3 = _1.4 as u32;
_4.fld0 = _9.fld0;
_12.0 = _12.1 as f32;
match _1.4 {
0 => bb4,
1 => bb3,
8305 => bb7,
_ => bb6
}
}
bb6 = {
_1.2.1 = _1.0;
_1.3 = 2653621860_u32 | 2278817292_u32;
_7 = _3.2;
_1.3 = 6222970_u32 - 654378827_u32;
_3.2 = _1.3 as isize;
_2 = _1.4 >= _1.4;
_1.1 = _2 ^ _2;
RET = _3.1;
_1.2.1 = RET;
_1.2.2 = 57887942121824129260055134497601587412_u128 as isize;
_4.fld0 = [175_u8,70_u8,40_u8,20_u8,28_u8,153_u8,176_u8,119_u8];
_1.1 = _6 ^ _6;
_1.2 = _3;
_1.2.0 = _7 as usize;
_2 = !_6;
_9 = Adt49 { fld0: _4.fld0 };
_1 = (RET, _6, _3, 66926588_u32, 50790_u16);
_1.2.2 = _7 - _7;
_5 = _3.1;
_4.fld0 = [206_u8,5_u8,101_u8,168_u8,222_u8,164_u8,66_u8,50_u8];
_1.3 = !3142166153_u32;
Call(_9 = fn12(_1.2.2, _1.4), ReturnTo(bb2), UnwindUnreachable())
}
bb7 = {
_16 = 2293191419423163698_i64;
_4.fld0 = [113_u8,142_u8,157_u8,0_u8,39_u8,206_u8,224_u8,218_u8];
_1.2.0 = _3.0;
_11 = _3.2 | _1.2.2;
_1.2.1 = _5;
_9.fld0 = _4.fld0;
_8 = Adt56::Variant3 { fld0: 224033665483234842676454754420249733309_u128,fld1: _13 };
_11 = _3.2 & _3.2;
_1.0 = _5;
_12.3 = RET;
_3.0 = _1.2.0 | _1.2.0;
_9.fld0 = [73_u8,230_u8,241_u8,241_u8,101_u8,3_u8,246_u8,248_u8];
_16 = (-1700_i16) as i64;
_8 = Adt56::Variant3 { fld0: 173317975673870622446854734598036495456_u128,fld1: _13 };
_9 = Adt49 { fld0: _4.fld0 };
_1.4 = 60416_u16 & 40577_u16;
_3.0 = _1.2.0;
_12.1 = (-783838695_i32) & 1848362267_i32;
_4 = Adt49 { fld0: _9.fld0 };
Goto(bb8)
}
bb8 = {
_1.1 = !_2;
_1.2.0 = _3.0;
_5 = RET;
_9 = Move(_4);
_17 = [(-90_i8),(-9_i8),(-55_i8),22_i8,(-45_i8),(-68_i8),120_i8];
_3 = (_1.2.0, _1.2.1, _1.2.2);
_2 = _1.1 & _6;
place!(Field::<u128>(Variant(_8, 3), 0)) = (-121118510881561642752002411677197341086_i128) as u128;
_4.fld0 = _9.fld0;
_3.0 = _1.2.0;
place!(Field::<f64>(Variant(_8, 3), 1)) = _13 - _13;
_1.3 = !496654472_u32;
RET = _1.0;
_3.2 = _13 as isize;
_4 = Adt49 { fld0: _9.fld0 };
_1 = (_12.3, _2, _3, 3529558218_u32, 53910_u16);
_1.2.0 = _3.0 * _3.0;
_1.2.0 = _13 as usize;
_1.2 = (_3.0, _3.1, _7);
Call(_21 = core::intrinsics::bswap(_12.1), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
_1.0 = _12.3;
_12.0 = 12991268401904061004_u64 as f32;
_20 = (170_u8, 29552_i16, _16);
_3 = (_1.2.0, _12.3, _11);
_18 = [_1.4,_1.4,_1.4,_1.4,_1.4];
_20.2 = -_16;
SetDiscriminant(_8, 2);
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_8, 2), 0)).0.2.2 = _11 & _11;
_12.3 = _1.0;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_8, 2), 0)).0 = (_12.3, _2, _3, _1.3, _1.4);
place!(Field::<char>(Variant(_8, 2), 1)) = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_8, 2), 0).0.2.1;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_8, 2), 0)).0.1 = _1.1 & _6;
_1.2.1 = Field::<char>(Variant(_8, 2), 1);
_9.fld0 = [_20.0,_20.0,_20.0,_20.0,_20.0,_20.0,_20.0,_20.0];
_11 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_8, 2), 0).0.2.2;
place!(Field::<char>(Variant(_8, 2), 1)) = _1.2.1;
_1.4 = !Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_8, 2), 0).0.4;
_7 = 297441983575963183780369504151200423885_u128 as isize;
_4.fld0 = [_20.0,_20.0,_20.0,_20.0,_20.0,_20.0,_20.0,_20.0];
_3.1 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_8, 2), 0).0.0;
_1.0 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_8, 2), 0).0.0;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_8, 2), 0)).0.2 = (_3.0, RET, _3.2);
_16 = _20.0 as i64;
_1.2.2 = -_11;
match Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_8, 2), 0).0.4 {
0 => bb8,
1 => bb3,
2 => bb10,
3 => bb11,
53910 => bb13,
_ => bb12
}
}
bb10 = {
_1.2.2 = _7;
_2 = _6;
RET = _5;
_1.4 = !11010_u16;
RET = _3.1;
_9 = Adt49 { fld0: _4.fld0 };
_1.2.2 = _7;
_1.0 = RET;
_1 = (_3.1, _6, _3, 987704852_u32, 8305_u16);
_7 = _1.2.2;
_6 = !_1.1;
_2 = _1.3 >= _1.3;
_10 = [3016826405674390356_u64,6801387070157980330_u64,4371904197508264814_u64,16740195791863647059_u64,3707666217666572495_u64,11487878521180750019_u64];
_9.fld0 = [16_u8,104_u8,57_u8,219_u8,169_u8,90_u8,87_u8,113_u8];
_4 = Adt49 { fld0: _9.fld0 };
_9.fld0 = [234_u8,186_u8,22_u8,110_u8,247_u8,246_u8,59_u8,34_u8];
_13 = (-112_i8) as f64;
_5 = _1.2.1;
_12.3 = RET;
_8 = Adt56::Variant3 { fld0: 302406867567244664547182290584903949522_u128,fld1: _13 };
_7 = _1.2.2 ^ _3.2;
_12.3 = _1.0;
_4.fld0 = [170_u8,134_u8,120_u8,36_u8,81_u8,31_u8,45_u8,157_u8];
_3.2 = _1.2.2;
match _1.3 {
0 => bb3,
987704852 => bb5,
_ => bb4
}
}
bb11 = {
Return()
}
bb12 = {
RET = _1.0;
_9.fld0 = [187_u8,136_u8,92_u8,5_u8,159_u8,115_u8,69_u8,126_u8];
_11 = _3.2 - _3.2;
_12.2 = _1.2.2;
_12.3 = RET;
_11 = _1.4 as isize;
place!(Field::<u128>(Variant(_8, 3), 0)) = !230237607108650962738745016348063488281_u128;
_12.1 = 34866394_i32;
_3 = (_1.2.0, _12.3, _11);
_3.0 = _1.2.0 + _1.2.0;
_1.2.0 = _3.0 * _3.0;
_12.1 = (-2127845079_i32) - (-61401685_i32);
SetDiscriminant(_8, 1);
place!(Field::<[u16; 5]>(Variant(_8, 1), 3)) = [_1.4,_1.4,_1.4,_1.4,_1.4];
_1.0 = _5;
_1.2.1 = _5;
_1.2 = (_3.0, _5, _11);
place!(Field::<[u16; 5]>(Variant(_8, 1), 3)) = [_1.4,_1.4,_1.4,_1.4,_1.4];
_1.3 = _1.4 as u32;
_4.fld0 = _9.fld0;
_12.0 = _12.1 as f32;
match _1.4 {
0 => bb4,
1 => bb3,
8305 => bb7,
_ => bb6
}
}
bb13 = {
RET = _12.3;
_1.3 = _13 as u32;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_8, 2), 0)).0.2.0 = _3.0;
_13 = _11 as f64;
_24 = Field::<char>(Variant(_8, 2), 1);
_19 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_8, 2), 0).0.3 as f64;
_20.1 = 1566225217133404047_u64 as i16;
_17 = [(-47_i8),(-118_i8),(-121_i8),(-39_i8),48_i8,(-102_i8),108_i8];
_12.0 = _3.0 as f32;
_4 = Move(_9);
Goto(bb14)
}
bb14 = {
_6 = !Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_8, 2), 0).0.1;
_12.1 = _1.2.0 as i32;
_27 = Adt49 { fld0: _4.fld0 };
Goto(bb15)
}
bb15 = {
Call(_30 = dump_var(11_usize, 17_usize, Move(_17), 21_usize, Move(_21), 18_usize, Move(_18), 3_usize, Move(_3)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_30 = dump_var(11_usize, 24_usize, Move(_24), 20_usize, Move(_20), 5_usize, Move(_5), 31_usize, _31), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn12(mut _1: isize,mut _2: u16) -> Adt49 {
mir! {
type RET = Adt49;
let _3: u64;
let _4: Adt55;
let _5: f64;
let _6: bool;
let _7: f32;
let _8: isize;
let _9: bool;
let _10: bool;
let _11: u128;
let _12: Adt59;
let _13: usize;
let _14: isize;
let _15: (f32, f32, i8);
let _16: u16;
let _17: [u16; 5];
let _18: i32;
let _19: (u64, [usize; 4], i32, isize, u8, &'static isize, u8, [u32; 2]);
let _20: (i64, [bool; 4]);
let _21: Adt51;
let _22: ();
let _23: ();
{
RET.fld0 = [74_u8,56_u8,48_u8,16_u8,90_u8,68_u8,89_u8,39_u8];
_2 = 36170_u16;
RET.fld0 = [73_u8,117_u8,179_u8,122_u8,169_u8,173_u8,144_u8,222_u8];
RET.fld0 = [90_u8,66_u8,187_u8,101_u8,43_u8,37_u8,27_u8,193_u8];
_1 = 24_u8 as isize;
_4.fld0.0.2.2 = !_1;
RET.fld0 = [135_u8,108_u8,227_u8,160_u8,39_u8,46_u8,182_u8,122_u8];
_5 = 10453_i16 as f64;
_4.fld0.0.4 = _2;
_4.fld1 = 9592960950424926904_u64 >> _1;
Goto(bb1)
}
bb1 = {
_4.fld0.0.2.1 = '\u{bcea0}';
_4.fld0.0.3 = !3683333486_u32;
_6 = false ^ false;
_6 = !false;
_4.fld3 = [_4.fld1,_4.fld1,_4.fld1,_4.fld1,_4.fld1,_4.fld1];
_4.fld1 = 136_u8 as u64;
_3 = _4.fld1;
_4.fld3 = [_3,_3,_4.fld1,_3,_4.fld1,_3];
_4.fld0.0.2.2 = _1 + _1;
_3 = _4.fld1;
_4.fld0.0.1 = _6;
_4.fld5 = !(-703354216_i32);
_4.fld0.0.3 = !1288803411_u32;
_4.fld0.0.2.0 = !2_usize;
_4.fld0.0.2.0 = 172_u8 as usize;
RET.fld0 = [49_u8,192_u8,230_u8,80_u8,241_u8,251_u8,148_u8,192_u8];
_7 = _4.fld0.0.2.0 as f32;
RET.fld0 = [189_u8,162_u8,28_u8,238_u8,33_u8,12_u8,16_u8,204_u8];
_7 = _4.fld0.0.3 as f32;
_2 = _4.fld0.0.4 >> _3;
_4.fld0.0.2.0 = 7_usize;
_3 = _4.fld1;
_10 = _1 >= _1;
_9 = _6;
_3 = 18_i8 as u64;
_4.fld3 = [_4.fld1,_3,_3,_3,_4.fld1,_4.fld1];
Goto(bb2)
}
bb2 = {
_11 = _4.fld0.0.2.0 as u128;
_15.2 = _4.fld1 as i8;
_4.fld0.0.0 = _4.fld0.0.2.1;
RET.fld0 = [78_u8,249_u8,74_u8,39_u8,136_u8,33_u8,202_u8,226_u8];
_11 = !179061159480543972759690622695884387445_u128;
match _4.fld0.0.4 {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
4 => bb7,
36170 => bb9,
_ => bb8
}
}
bb3 = {
_4.fld0.0.2.1 = '\u{bcea0}';
_4.fld0.0.3 = !3683333486_u32;
_6 = false ^ false;
_6 = !false;
_4.fld3 = [_4.fld1,_4.fld1,_4.fld1,_4.fld1,_4.fld1,_4.fld1];
_4.fld1 = 136_u8 as u64;
_3 = _4.fld1;
_4.fld3 = [_3,_3,_4.fld1,_3,_4.fld1,_3];
_4.fld0.0.2.2 = _1 + _1;
_3 = _4.fld1;
_4.fld0.0.1 = _6;
_4.fld5 = !(-703354216_i32);
_4.fld0.0.3 = !1288803411_u32;
_4.fld0.0.2.0 = !2_usize;
_4.fld0.0.2.0 = 172_u8 as usize;
RET.fld0 = [49_u8,192_u8,230_u8,80_u8,241_u8,251_u8,148_u8,192_u8];
_7 = _4.fld0.0.2.0 as f32;
RET.fld0 = [189_u8,162_u8,28_u8,238_u8,33_u8,12_u8,16_u8,204_u8];
_7 = _4.fld0.0.3 as f32;
_2 = _4.fld0.0.4 >> _3;
_4.fld0.0.2.0 = 7_usize;
_3 = _4.fld1;
_10 = _1 >= _1;
_9 = _6;
_3 = 18_i8 as u64;
_4.fld3 = [_4.fld1,_3,_3,_3,_4.fld1,_4.fld1];
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
_15.1 = _7;
_2 = !_4.fld0.0.4;
_13 = _15.2 as usize;
_13 = _4.fld0.0.2.0 & _4.fld0.0.2.0;
_3 = _5 as u64;
_16 = _4.fld0.0.4 * _4.fld0.0.4;
Goto(bb10)
}
bb10 = {
_9 = _4.fld0.0.1;
_3 = _4.fld0.0.2.2 as u64;
_4.fld0.0.1 = !_10;
_4.fld0.0.2.2 = !_1;
_17 = [_2,_4.fld0.0.4,_4.fld0.0.4,_4.fld0.0.4,_2];
_13 = _4.fld5 as usize;
_4.fld0.0.1 = !_10;
_4.fld6 = core::ptr::addr_of!(_5);
_4.fld3 = [_4.fld1,_3,_3,_3,_4.fld1,_3];
_4.fld0.0.4 = 58269725933716845831605683756523448377_i128 as u16;
RET.fld0 = [243_u8,37_u8,196_u8,49_u8,132_u8,152_u8,109_u8,213_u8];
_15.1 = -_7;
_4.fld1 = _3;
RET.fld0 = [104_u8,44_u8,93_u8,11_u8,134_u8,41_u8,193_u8,84_u8];
_19.7 = [_4.fld0.0.3,_4.fld0.0.3];
_2 = _16;
_15.2 = -(-64_i8);
_15 = (_7, _7, (-46_i8));
_14 = _1 | _1;
_20.0 = (-9145272971664240515_i64) << _2;
_16 = _2 | _2;
_10 = _6 | _6;
_4.fld0.0.0 = _4.fld0.0.2.1;
match _15.2 {
0 => bb3,
1 => bb2,
2 => bb11,
340282366920938463463374607431768211410 => bb13,
_ => bb12
}
}
bb11 = {
Return()
}
bb12 = {
Return()
}
bb13 = {
_4.fld0.0.1 = _6;
_14 = _4.fld5 as isize;
_13 = _11 as usize;
_15.0 = _7;
_19.0 = !_4.fld1;
_4.fld0.0.2.2 = (-167935127625462686951163867995674147954_i128) as isize;
_16 = !_2;
_4.fld1 = !_19.0;
_19.2 = !_4.fld5;
_16 = _2 & _2;
_18 = _19.2 << _4.fld5;
_18 = -_19.2;
Goto(bb14)
}
bb14 = {
_4.fld5 = -_18;
_4.fld0.0.0 = _4.fld0.0.2.1;
_1 = !_14;
_10 = !_4.fld0.0.1;
_14 = _1 >> _20.0;
_4.fld0.0.1 = _20.0 < _20.0;
_19.6 = 121_u8 << _19.2;
_19.3 = _14 >> _19.0;
_4.fld1 = _3 - _19.0;
_14 = _19.3;
_19.1 = [_13,_13,_4.fld0.0.2.0,_13];
_20.0 = 2830862268031540477_i64;
_19.5 = &_4.fld0.0.2.2;
_8 = _4.fld0.0.4 as isize;
Goto(bb15)
}
bb15 = {
Call(_22 = dump_var(12_usize, 14_usize, Move(_14), 9_usize, Move(_9), 2_usize, Move(_2), 16_usize, Move(_16)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_22 = dump_var(12_usize, 10_usize, Move(_10), 8_usize, Move(_8), 23_usize, _23, 23_usize, _23), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn13(mut _1: char,mut _2: [u8; 8],mut _3: char,mut _4: isize,mut _5: isize,mut _6: (usize, char, isize),mut _7: [u8; 8],mut _8: isize,mut _9: Adt49,mut _10: isize,mut _11: isize,mut _12: char) -> *const (u128,) {
mir! {
type RET = *const (u128,);
let _13: [usize; 4];
let _14: (f32, i32, isize, char);
let _15: isize;
let _16: Adt43;
let _17: [u16; 5];
let _18: (f32, i32, isize, char);
let _19: f64;
let _20: f64;
let _21: u128;
let _22: Adt46;
let _23: isize;
let _24: *const &'static isize;
let _25: f64;
let _26: u32;
let _27: [u32; 4];
let _28: f64;
let _29: *mut [i8; 7];
let _30: &'static isize;
let _31: (u64, [usize; 4], i32, isize, u8, &'static isize, u8, [u32; 2]);
let _32: bool;
let _33: [u8; 8];
let _34: Adt45;
let _35: Adt49;
let _36: [u64; 6];
let _37: Adt55;
let _38: char;
let _39: Adt51;
let _40: Adt47;
let _41: char;
let _42: *mut [i8; 7];
let _43: *mut [i8; 7];
let _44: *const f64;
let _45: usize;
let _46: *const (u128,);
let _47: (f32, i32, isize, char);
let _48: Adt57;
let _49: (usize, char, isize);
let _50: isize;
let _51: f64;
let _52: Adt45;
let _53: Adt43;
let _54: isize;
let _55: (f32, f32, i8);
let _56: [i8; 7];
let _57: f32;
let _58: Adt48;
let _59: f32;
let _60: (i64, [bool; 4]);
let _61: Adt59;
let _62: &'static isize;
let _63: *const (u128,);
let _64: Adt49;
let _65: Adt49;
let _66: (char, bool, (usize, char, isize), u32, u16);
let _67: f64;
let _68: Adt52;
let _69: i8;
let _70: [bool; 4];
let _71: u128;
let _72: Adt50;
let _73: [bool; 4];
let _74: (char, bool, (usize, char, isize), u32, u16);
let _75: *const f64;
let _76: isize;
let _77: (f32, f32, i8);
let _78: i128;
let _79: i32;
let _80: Adt55;
let _81: Adt55;
let _82: Adt46;
let _83: u128;
let _84: Adt56;
let _85: u16;
let _86: ((char, bool, (usize, char, isize), u32, u16),);
let _87: usize;
let _88: [u32; 4];
let _89: [u32; 4];
let _90: [i8; 7];
let _91: usize;
let _92: *const &'static isize;
let _93: ();
let _94: ();
{
_1 = _12;
_6 = (3_usize, _12, _8);
_11 = _6.2 & _5;
_6.0 = (-5518444590024445496_i64) as usize;
_6 = (5_usize, _3, _8);
_3 = _12;
_14.0 = 177468337581392868414258817935056071030_u128 as f32;
_11 = _8;
_6.0 = 1_usize;
_9.fld0 = _7;
_15 = !_11;
_8 = true as isize;
Goto(bb1)
}
bb1 = {
_9 = Adt49 { fld0: _7 };
_14.2 = _11 >> _6.2;
_5 = _6.0 as isize;
_14.1 = 11835411077107960716_u64 as i32;
_17 = [60197_u16,17044_u16,60824_u16,28233_u16,30663_u16];
_6.2 = !_14.2;
_10 = (-19572_i16) as isize;
_15 = _6.2;
_14.3 = _12;
_9 = Adt49 { fld0: _2 };
_13 = [_6.0,_6.0,_6.0,_6.0];
Goto(bb2)
}
bb2 = {
_18 = (_14.0, _14.1, _6.2, _3);
_18.3 = _6.1;
match _6.0 {
0 => bb3,
2 => bb5,
3 => bb6,
4 => bb7,
5 => bb8,
1 => bb10,
_ => bb9
}
}
bb3 = {
_9 = Adt49 { fld0: _7 };
_14.2 = _11 >> _6.2;
_5 = _6.0 as isize;
_14.1 = 11835411077107960716_u64 as i32;
_17 = [60197_u16,17044_u16,60824_u16,28233_u16,30663_u16];
_6.2 = !_14.2;
_10 = (-19572_i16) as isize;
_15 = _6.2;
_14.3 = _12;
_9 = Adt49 { fld0: _2 };
_13 = [_6.0,_6.0,_6.0,_6.0];
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_14.2 = _6.2;
_14.0 = _18.0 + _18.0;
_9 = Adt49 { fld0: _2 };
_6 = (7_usize, _1, _14.2);
_18 = (_14.0, _14.1, _15, _14.3);
_2 = [168_u8,75_u8,161_u8,92_u8,54_u8,10_u8,154_u8,109_u8];
_6.0 = !3_usize;
_2 = _9.fld0;
_14 = (_18.0, _18.1, _18.2, _12);
_9 = Adt49 { fld0: _7 };
_6.1 = _12;
_8 = _14.2 - _6.2;
_6.1 = _14.3;
_14.3 = _6.1;
_18.2 = _14.0 as isize;
_1 = _6.1;
_10 = _11 ^ _15;
_4 = (-8482515605163914997_i64) as isize;
_10 = _14.2;
_18.1 = _14.1 - _14.1;
_6.0 = 11463426205059537113_usize & 1_usize;
_17 = [36599_u16,1998_u16,11654_u16,19250_u16,47139_u16];
_18.3 = _3;
_18.3 = _14.3;
_18.0 = _14.0;
_19 = 32695_u16 as f64;
_18 = (_14.0, _14.1, _14.2, _6.1);
Goto(bb11)
}
bb11 = {
_9 = Adt49 { fld0: _2 };
_14.2 = _8 + _10;
_14.2 = _10;
Goto(bb12)
}
bb12 = {
_18.2 = _19 as isize;
_17 = [42458_u16,25668_u16,12469_u16,53537_u16,29634_u16];
_14.2 = _8 & _8;
_20 = _19 - _19;
_18.1 = _14.1 | _14.1;
_6.0 = 0_usize;
_20 = _14.0 as f64;
_14.2 = _11 - _6.2;
_18.2 = _4 + _4;
_14.3 = _1;
_7 = _2;
_18.2 = _8 >> _10;
_21 = 171230234247019016416244287621125293385_u128 & 330685311949500077051864238714887704915_u128;
_21 = 25804_u16 as u128;
_18.1 = _14.1 - _14.1;
_18.1 = _14.1;
_23 = _6.2;
_4 = -_14.2;
_21 = _1 as u128;
_23 = _18.2;
_18.3 = _3;
_2 = [110_u8,226_u8,116_u8,237_u8,4_u8,198_u8,95_u8,161_u8];
_19 = _20;
_9 = Adt49 { fld0: _7 };
_17 = [15925_u16,41657_u16,21794_u16,43881_u16,35636_u16];
_14 = (_18.0, _18.1, _4, _12);
_2 = _9.fld0;
match _6.0 {
1 => bb2,
0 => bb13,
_ => bb4
}
}
bb13 = {
_5 = _18.2 ^ _4;
_9 = Adt49 { fld0: _2 };
Goto(bb14)
}
bb14 = {
_18.1 = _12 as i32;
_6.0 = 837998903696642273_u64 as usize;
_14.3 = _6.1;
Goto(bb15)
}
bb15 = {
_2 = [169_u8,134_u8,186_u8,5_u8,252_u8,56_u8,141_u8,40_u8];
_20 = _19;
_17 = [17393_u16,58316_u16,41829_u16,3835_u16,13503_u16];
_14.3 = _12;
_14.1 = _18.1 * _18.1;
_25 = -_20;
_26 = 4289580993_u32;
_30 = &_5;
_20 = -_19;
_14.1 = 189_u8 as i32;
_14 = _18;
_24 = core::ptr::addr_of!(_30);
_18.2 = 119795206503613528098957375868567942776_i128 as isize;
_25 = -_19;
_28 = _25 + _20;
_18.3 = _3;
_27 = [_26,_26,_26,_26];
_18.3 = _12;
_14.1 = 4682_u16 as i32;
_31.1 = [_6.0,_6.0,_6.0,_6.0];
_18.3 = _14.3;
_19 = 65_u8 as f64;
_31.6 = 96_u8;
_9.fld0 = _7;
_18.0 = -_14.0;
_32 = !false;
match _31.6 {
0 => bb3,
1 => bb12,
2 => bb16,
3 => bb17,
4 => bb18,
96 => bb20,
_ => bb19
}
}
bb16 = {
Return()
}
bb17 = {
Return()
}
bb18 = {
_18 = (_14.0, _14.1, _6.2, _3);
_18.3 = _6.1;
match _6.0 {
0 => bb3,
2 => bb5,
3 => bb6,
4 => bb7,
5 => bb8,
1 => bb10,
_ => bb9
}
}
bb19 = {
_14.2 = _6.2;
_14.0 = _18.0 + _18.0;
_9 = Adt49 { fld0: _2 };
_6 = (7_usize, _1, _14.2);
_18 = (_14.0, _14.1, _15, _14.3);
_2 = [168_u8,75_u8,161_u8,92_u8,54_u8,10_u8,154_u8,109_u8];
_6.0 = !3_usize;
_2 = _9.fld0;
_14 = (_18.0, _18.1, _18.2, _12);
_9 = Adt49 { fld0: _7 };
_6.1 = _12;
_8 = _14.2 - _6.2;
_6.1 = _14.3;
_14.3 = _6.1;
_18.2 = _14.0 as isize;
_1 = _6.1;
_10 = _11 ^ _15;
_4 = (-8482515605163914997_i64) as isize;
_10 = _14.2;
_18.1 = _14.1 - _14.1;
_6.0 = 11463426205059537113_usize & 1_usize;
_17 = [36599_u16,1998_u16,11654_u16,19250_u16,47139_u16];
_18.3 = _3;
_18.3 = _14.3;
_18.0 = _14.0;
_19 = 32695_u16 as f64;
_18 = (_14.0, _14.1, _14.2, _6.1);
Goto(bb11)
}
bb20 = {
_13 = _31.1;
_11 = _5 | _23;
_31.4 = !_31.6;
_30 = &(*_30);
_6 = (2_usize, _1, (*_30));
_31.5 = &_6.2;
_14.0 = _18.0;
_3 = _1;
_21 = _32 as u128;
_11 = _5;
_31.5 = &_4;
_36 = [8754129020151821532_u64,8329360641688598125_u64,8246055050517846499_u64,9359273596205826902_u64,941005659829236206_u64,1884849739087630187_u64];
_28 = 27_i8 as f64;
_33 = _9.fld0;
_31.5 = &_14.2;
_14.1 = _6.2 as i32;
Goto(bb21)
}
bb21 = {
_18.2 = _5;
match _6.0 {
2 => bb22,
_ => bb1
}
}
bb22 = {
_6 = (5067769748918580094_usize, _14.3, (*_30));
_37.fld0.0.4 = 3281_i16 as u16;
_4 = (*_30);
_18.3 = _14.3;
_25 = _21 as f64;
_33 = [_31.6,_31.6,_31.6,_31.6,_31.4,_31.6,_31.6,_31.6];
_6.1 = _3;
_38 = _3;
_31.4 = _37.fld0.0.4 as u8;
_34 = Adt45::Variant0 { fld0: _3 };
_38 = _12;
match _6.0 {
5067769748918580094 => bb23,
_ => bb21
}
}
bb23 = {
_5 = _6.2;
_38 = _3;
Call(_18.1 = core::intrinsics::bswap(_14.1), ReturnTo(bb24), UnwindUnreachable())
}
bb24 = {
_30 = &_37.fld0.0.2.2;
SetDiscriminant(_34, 1);
_4 = -_6.2;
_9.fld0 = [_31.4,_31.6,_31.6,_31.4,_31.4,_31.4,_31.6,_31.6];
_49 = (_6.0, _12, _8);
_14.0 = _26 as f32;
_8 = _6.2 + _4;
_15 = -_23;
_37.fld3 = [17981296159706841998_u64,8549874193234073290_u64,6391686714933494603_u64,8051586302211412454_u64,12545736039192828165_u64,6246788254131450102_u64];
Goto(bb25)
}
bb25 = {
_37.fld0.0.4 = _21 as u16;
_37.fld0.0.2.1 = _38;
_6.1 = _3;
_24 = core::ptr::addr_of!(_30);
_6.1 = _3;
_6.1 = _14.3;
_40.fld1 = 17687649956752687001_u64 ^ 14039683189590690203_u64;
_30 = &_49.2;
_6.1 = _12;
_37.fld0.0.2 = _49;
_31.3 = _32 as isize;
_37.fld0.0.0 = _37.fld0.0.2.1;
_18.0 = _14.0 * _14.0;
_37.fld0.0.1 = !_32;
_11 = _14.2 | _23;
_47.2 = _26 as isize;
place!(Field::<u16>(Variant(_34, 1), 1)) = _21 as u16;
Call(_23 = core::intrinsics::bswap(_4), ReturnTo(bb26), UnwindUnreachable())
}
bb26 = {
_21 = 148118462194750209486254175628621173194_u128 - 143654230203476713053825769550675629162_u128;
_47.3 = _37.fld0.0.2.1;
_9 = Adt49 { fld0: _7 };
_14.0 = _37.fld0.0.4 as f32;
_47.2 = (-47_i8) as isize;
_36 = [_40.fld1,_40.fld1,_40.fld1,_40.fld1,_40.fld1,_40.fld1];
_59 = -_18.0;
_9.fld0 = [_31.4,_31.6,_31.4,_31.6,_31.6,_31.6,_31.6,_31.6];
Goto(bb27)
}
bb27 = {
_31.7 = [_26,_26];
_50 = _49.2;
_19 = _20 * _25;
_41 = _38;
_37.fld0.0.3 = _26;
_40.fld2 = [_37.fld0.0.4,Field::<u16>(Variant(_34, 1), 1),_37.fld0.0.4,_37.fld0.0.4,_37.fld0.0.4];
_54 = -_6.2;
_45 = _19 as usize;
_18.2 = _49.2 ^ _11;
_31.3 = _14.1 as isize;
_8 = _4;
_44 = core::ptr::addr_of!(_20);
_57 = _14.1 as f32;
_37.fld0.0.2.0 = _40.fld1 as usize;
_56 = [83_i8,97_i8,(-25_i8),45_i8,94_i8,(-32_i8),19_i8];
_14.3 = _12;
_31.3 = _57 as isize;
_24 = core::ptr::addr_of!(_31.5);
_57 = -_18.0;
_31.7 = [_26,_26];
_31.6 = _31.4 | _31.4;
_33 = _7;
_49 = (_45, _47.3, _15);
_60.1 = [_32,_32,_37.fld0.0.1,_37.fld0.0.1];
_47.2 = _23;
_64 = Adt49 { fld0: _33 };
_7 = _64.fld0;
_55.1 = _57 - _14.0;
Goto(bb28)
}
bb28 = {
_20 = _25 * _25;
_55 = (_57, _14.0, 24_i8);
_6.1 = _1;
_66.2 = (_6.0, _47.3, _5);
_35.fld0 = _7;
_35 = Adt49 { fld0: _7 };
_66.0 = _49.1;
_14.0 = _18.0;
_65.fld0 = _9.fld0;
_57 = 9605744303206290694467536168867423249_i128 as f32;
_40.fld0 = Adt45::Variant0 { fld0: _49.1 };
_66.1 = _47.2 == _47.2;
_12 = _47.3;
_29 = core::ptr::addr_of_mut!(_56);
_34 = Adt45::Variant0 { fld0: _66.2.1 };
_37.fld0.0.1 = _66.1 & _66.1;
_49.0 = !_6.0;
_44 = core::ptr::addr_of!(_25);
_31.1 = _13;
_37.fld0.0.1 = _66.1;
_66.2 = (_6.0, _18.3, _23);
Call(_49.2 = core::intrinsics::bswap(_23), ReturnTo(bb29), UnwindUnreachable())
}
bb29 = {
_31.5 = &_6.2;
_25 = _28 - _20;
_31.5 = &_6.2;
_64 = Adt49 { fld0: _35.fld0 };
_40 = Adt47 { fld0: Move(_34),fld1: 2912894421406703987_u64,fld2: _17 };
_50 = 6141235684981497360_i64 as isize;
_14 = (_55.0, _18.1, _8, _1);
_55.2 = (-98_i8);
_6 = _49;
_12 = _66.0;
_64.fld0 = [_31.6,_31.6,_31.6,_31.6,_31.4,_31.6,_31.4,_31.6];
_54 = !_15;
_66.3 = !_37.fld0.0.3;
_37.fld0.0.2 = (_49.0, _49.1, _11);
_64.fld0 = _35.fld0;
_4 = _14.2 & _5;
_74.2.2 = _18.2;
_74.1 = _37.fld0.0.1;
_3 = _37.fld0.0.2.1;
match _55.2 {
0 => bb27,
1 => bb13,
2 => bb28,
3 => bb14,
340282366920938463463374607431768211358 => bb31,
_ => bb30
}
}
bb30 = {
Return()
}
bb31 = {
_18.1 = _14.1 | _14.1;
_74.2.0 = !_49.0;
_31.1 = [_66.2.0,_6.0,_74.2.0,_37.fld0.0.2.0];
_74.4 = !_37.fld0.0.4;
_31.4 = !_31.6;
_47.1 = _14.1 + _14.1;
_6 = (_74.2.0, _66.0, _23);
_74.0 = _18.3;
SetDiscriminant(_40.fld0, 1);
_73 = [_74.1,_74.1,_66.1,_37.fld0.0.1];
_55.2 = 65_i8 << _74.2.2;
_37.fld3 = _36;
_74.3 = _37.fld0.0.4 as u32;
_31.2 = _18.1 - _47.1;
_74.2.1 = _47.3;
_47.3 = _74.0;
_66 = (_1, _37.fld0.0.1, _37.fld0.0.2, _26, _74.4);
_37.fld0 = (_66,);
_62 = &_74.2.2;
Goto(bb32)
}
bb32 = {
_31.2 = _47.1;
_37.fld0.0.2.0 = _40.fld1 as usize;
_66 = (_37.fld0.0.2.1, _74.1, _74.2, _37.fld0.0.3, _37.fld0.0.4);
place!(Field::<u16>(Variant(_40.fld0, 1), 1)) = _37.fld0.0.3 as u16;
_60.0 = 7949883739714483156_i64 * (-7809113201478787508_i64);
_54 = _47.2 + _5;
_14.2 = -(*_62);
_66.2.1 = _3;
_77.2 = -_55.2;
_37.fld0.0.2 = (_49.0, _41, _5);
_35.fld0 = _64.fld0;
_37.fld5 = _47.1;
_37.fld0.0.2.0 = _6.0;
_14.3 = _41;
_71 = _21;
_75 = _44;
_3 = _6.1;
_66.2 = (_37.fld0.0.2.0, _37.fld0.0.2.1, _15);
match _40.fld1 {
0 => bb13,
1 => bb33,
2 => bb34,
3 => bb35,
4 => bb36,
2912894421406703987 => bb38,
_ => bb37
}
}
bb33 = {
Return()
}
bb34 = {
Return()
}
bb35 = {
_31.5 = &_6.2;
_25 = _28 - _20;
_31.5 = &_6.2;
_64 = Adt49 { fld0: _35.fld0 };
_40 = Adt47 { fld0: Move(_34),fld1: 2912894421406703987_u64,fld2: _17 };
_50 = 6141235684981497360_i64 as isize;
_14 = (_55.0, _18.1, _8, _1);
_55.2 = (-98_i8);
_6 = _49;
_12 = _66.0;
_64.fld0 = [_31.6,_31.6,_31.6,_31.6,_31.4,_31.6,_31.4,_31.6];
_54 = !_15;
_66.3 = !_37.fld0.0.3;
_37.fld0.0.2 = (_49.0, _49.1, _11);
_64.fld0 = _35.fld0;
_4 = _14.2 & _5;
_74.2.2 = _18.2;
_74.1 = _37.fld0.0.1;
_3 = _37.fld0.0.2.1;
match _55.2 {
0 => bb27,
1 => bb13,
2 => bb28,
3 => bb14,
340282366920938463463374607431768211358 => bb31,
_ => bb30
}
}
bb36 = {
_21 = 148118462194750209486254175628621173194_u128 - 143654230203476713053825769550675629162_u128;
_47.3 = _37.fld0.0.2.1;
_9 = Adt49 { fld0: _7 };
_14.0 = _37.fld0.0.4 as f32;
_47.2 = (-47_i8) as isize;
_36 = [_40.fld1,_40.fld1,_40.fld1,_40.fld1,_40.fld1,_40.fld1];
_59 = -_18.0;
_9.fld0 = [_31.4,_31.6,_31.4,_31.6,_31.6,_31.6,_31.6,_31.6];
Goto(bb27)
}
bb37 = {
_37.fld0.0.4 = _21 as u16;
_37.fld0.0.2.1 = _38;
_6.1 = _3;
_24 = core::ptr::addr_of!(_30);
_6.1 = _3;
_6.1 = _14.3;
_40.fld1 = 17687649956752687001_u64 ^ 14039683189590690203_u64;
_30 = &_49.2;
_6.1 = _12;
_37.fld0.0.2 = _49;
_31.3 = _32 as isize;
_37.fld0.0.0 = _37.fld0.0.2.1;
_18.0 = _14.0 * _14.0;
_37.fld0.0.1 = !_32;
_11 = _14.2 | _23;
_47.2 = _26 as isize;
place!(Field::<u16>(Variant(_34, 1), 1)) = _21 as u16;
Call(_23 = core::intrinsics::bswap(_4), ReturnTo(bb26), UnwindUnreachable())
}
bb38 = {
_43 = _29;
_67 = (*_44) + _20;
_41 = _66.2.1;
_81.fld1 = _40.fld1 % _40.fld1;
_4 = _66.0 as isize;
_5 = _18.0 as isize;
_80.fld3 = [_40.fld1,_81.fld1,_81.fld1,_81.fld1,_81.fld1,_81.fld1];
_49.0 = _37.fld0.0.2.0 + _74.2.0;
_31.0 = 25735599980985571753298074776019194242_i128 as u64;
_12 = _1;
_38 = _37.fld0.0.0;
_74.2 = (_49.0, _66.2.1, _11);
_78 = _55.2 as i128;
_79 = -_47.1;
_39 = Adt51::Variant0 { fld0: _37.fld0 };
_79 = _37.fld5;
_14.3 = _3;
_1 = _74.0;
_81.fld1 = _31.0 | _31.0;
_30 = &_54;
Call(RET = fn14(_74.2.0, _74.2, _37.fld0.0.2.2, _23, _8, Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_39, 0), 0).0.2, (*_30), _6.2, _74.2.2, Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_39, 0), 0).0, _14, Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_39, 0), 0).0.2, Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_39, 0), 0).0, _10, _6.0, _49), ReturnTo(bb39), UnwindUnreachable())
}
bb39 = {
_10 = !_54;
_81.fld5 = _47.1;
_81.fld0.0.3 = _37.fld0.0.3;
_73 = [_37.fld0.0.1,_37.fld0.0.1,Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_39, 0), 0).0.1,_66.1];
_37.fld6 = core::ptr::addr_of!(_28);
_14 = _18;
_81.fld0.0.0 = _6.1;
_86.0.0 = _37.fld0.0.2.1;
_7 = _33;
_70 = _73;
Goto(bb40)
}
bb40 = {
Call(_93 = dump_var(13_usize, 17_usize, Move(_17), 71_usize, Move(_71), 1_usize, Move(_1), 78_usize, Move(_78)), ReturnTo(bb41), UnwindUnreachable())
}
bb41 = {
Call(_93 = dump_var(13_usize, 10_usize, Move(_10), 33_usize, Move(_33), 4_usize, Move(_4), 54_usize, Move(_54)), ReturnTo(bb42), UnwindUnreachable())
}
bb42 = {
Call(_93 = dump_var(13_usize, 13_usize, Move(_13), 41_usize, Move(_41), 50_usize, Move(_50), 2_usize, Move(_2)), ReturnTo(bb43), UnwindUnreachable())
}
bb43 = {
Call(_93 = dump_var(13_usize, 60_usize, Move(_60), 23_usize, Move(_23), 45_usize, Move(_45), 79_usize, Move(_79)), ReturnTo(bb44), UnwindUnreachable())
}
bb44 = {
Call(_93 = dump_var(13_usize, 15_usize, Move(_15), 7_usize, Move(_7), 94_usize, _94, 94_usize, _94), ReturnTo(bb45), UnwindUnreachable())
}
bb45 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn14(mut _1: usize,mut _2: (usize, char, isize),mut _3: isize,mut _4: isize,mut _5: isize,mut _6: (usize, char, isize),mut _7: isize,mut _8: isize,mut _9: isize,mut _10: (char, bool, (usize, char, isize), u32, u16),mut _11: (f32, i32, isize, char),mut _12: (usize, char, isize),mut _13: (char, bool, (usize, char, isize), u32, u16),mut _14: isize,mut _15: usize,mut _16: (usize, char, isize)) -> *const (u128,) {
mir! {
type RET = *const (u128,);
let _17: char;
let _18: (u8, i16, i64);
let _19: Adt46;
let _20: Adt57;
let _21: [bool; 4];
let _22: bool;
let _23: isize;
let _24: Adt55;
let _25: &'static isize;
let _26: (u8, i16, i64);
let _27: f64;
let _28: Adt46;
let _29: bool;
let _30: char;
let _31: Adt47;
let _32: u8;
let _33: ([u8; 8],);
let _34: Adt47;
let _35: Adt51;
let _36: *mut i16;
let _37: ([u8; 8],);
let _38: u32;
let _39: bool;
let _40: (f32, f32, i8);
let _41: i64;
let _42: u8;
let _43: Adt55;
let _44: Adt55;
let _45: Adt53;
let _46: Adt59;
let _47: [i8; 7];
let _48: isize;
let _49: i128;
let _50: (i64, [bool; 4]);
let _51: [u32; 2];
let _52: [u16; 5];
let _53: Adt55;
let _54: [bool; 4];
let _55: [i8; 7];
let _56: Adt51;
let _57: u128;
let _58: bool;
let _59: isize;
let _60: isize;
let _61: Adt59;
let _62: u128;
let _63: [i8; 7];
let _64: u128;
let _65: f64;
let _66: bool;
let _67: Adt52;
let _68: Adt44;
let _69: Adt50;
let _70: ([u8; 8],);
let _71: *mut [i8; 7];
let _72: (u8, i16, i64);
let _73: f64;
let _74: char;
let _75: [u32; 2];
let _76: ([u8; 8],);
let _77: i128;
let _78: u16;
let _79: ();
let _80: ();
{
_2.1 = _13.0;
_6 = (_2.0, _10.0, _13.2.2);
_3 = 104883582523710170214627418836223550561_i128 as isize;
_16 = _6;
_13.0 = _2.1;
_11.0 = _13.4 as f32;
_6.2 = _5 ^ _10.2.2;
_12.0 = !_10.2.0;
_17 = _2.1;
_10.4 = _10.3 as u16;
_16.0 = _10.2.0;
_4 = -_6.2;
_10.4 = !_13.4;
Goto(bb1)
}
bb1 = {
_10.0 = _17;
_7 = _12.2 << _16.2;
_13 = (_16.1, _10.1, _12, _10.3, _10.4);
_10.0 = _13.0;
_16.1 = _11.3;
Goto(bb2)
}
bb2 = {
_2.1 = _17;
_13.4 = _10.4;
_18 = (44_u8, (-9614_i16), 6041605325774731407_i64);
_17 = _13.0;
_5 = -_4;
_10.1 = !_13.1;
_10 = _13;
_13.2.0 = _10.2.0;
match _18.1 {
0 => bb1,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
340282366920938463463374607431768201842 => bb9,
_ => bb8
}
}
bb3 = {
_10.0 = _17;
_7 = _12.2 << _16.2;
_13 = (_16.1, _10.1, _12, _10.3, _10.4);
_10.0 = _13.0;
_16.1 = _11.3;
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
_7 = _16.2;
_18.0 = !215_u8;
_6 = _2;
_13.2 = (_6.0, _6.1, _9);
_11.1 = (-8_i8) as i32;
_9 = _10.2.1 as isize;
_7 = _4 & _16.2;
_16 = (_13.2.0, _13.2.1, _12.2);
Goto(bb10)
}
bb10 = {
_11.0 = 3362597414367264992_u64 as f32;
_13.4 = _10.4;
_23 = _16.2;
_10 = (_16.1, _13.1, _2, _13.3, _13.4);
_18.1 = !(-27724_i16);
_2 = (_12.0, _6.1, _11.2);
_24.fld0.0.2.2 = _13.2.2 - _10.2.2;
_10.2.0 = _16.0 | _2.0;
_26.1 = _18.1;
_26 = (_18.0, _18.1, _18.2);
_24.fld5 = !_11.1;
_14 = -_8;
_24.fld1 = 17626899965421867053_u64;
match _26.2 {
0 => bb5,
6041605325774731407 => bb12,
_ => bb11
}
}
bb11 = {
Return()
}
bb12 = {
_24.fld0.0.2.2 = _16.2 ^ _16.2;
_10.2.0 = _26.1 as usize;
_12 = _13.2;
_24.fld0.0.0 = _16.1;
_24.fld0.0 = _10;
_24.fld0.0.2.2 = _16.2 ^ _16.2;
_24.fld3 = [_24.fld1,_24.fld1,_24.fld1,_24.fld1,_24.fld1,_24.fld1];
_2.0 = 247139963107415762756886888276778196402_u128 as usize;
_24.fld0.0.2.0 = _12.0 + _16.0;
_18 = _26;
_30 = _24.fld0.0.2.1;
match _18.2 {
0 => bb1,
1 => bb2,
2 => bb10,
6041605325774731407 => bb13,
_ => bb9
}
}
bb13 = {
_2.1 = _16.1;
_12.2 = _5;
_5 = !_12.2;
_10 = _13;
_9 = -_23;
_24.fld6 = core::ptr::addr_of!(_27);
_10.2 = (_13.2.0, _6.1, _9);
_24.fld0.0 = _13;
_24.fld0.0.3 = _10.3;
_24.fld0.0.1 = !_13.1;
_26.2 = _18.2;
_31.fld2 = [_13.4,_13.4,_24.fld0.0.4,_24.fld0.0.4,_10.4];
_17 = _24.fld0.0.2.1;
_10.2 = _16;
_16.2 = _24.fld0.0.2.2 >> _10.2.0;
_24.fld1 = !1034974873626708621_u64;
_13.2.0 = !_6.0;
_10 = _24.fld0.0;
_8 = _26.2 as isize;
_11.1 = _24.fld5;
_24.fld0.0.2 = (_6.0, _30, _7);
_31.fld1 = _24.fld1;
_18.1 = _26.1 + _26.1;
Goto(bb14)
}
bb14 = {
_2.2 = _14 | _7;
_25 = &_23;
Goto(bb15)
}
bb15 = {
_16.0 = _11.1 as usize;
_16.0 = _24.fld0.0.2.0 - _12.0;
_21 = [_10.1,_10.1,_24.fld0.0.1,_10.1];
_10.2.0 = !_6.0;
_12.1 = _30;
_10 = (_24.fld0.0.0, _24.fld0.0.1, _24.fld0.0.2, _24.fld0.0.3, _13.4);
_24.fld6 = core::ptr::addr_of!(_27);
_24.fld0.0.1 = _13.1;
_7 = (*_25);
_12.0 = _15;
_34.fld2 = [_10.4,_24.fld0.0.4,_10.4,_24.fld0.0.4,_13.4];
_13.2.2 = (*_25) ^ _4;
_10.2.2 = !_9;
_27 = _26.0 as f64;
_10.3 = _24.fld0.0.3;
_10.1 = !_24.fld0.0.1;
_2.0 = _10.2.0 | _24.fld0.0.2.0;
_5 = _12.2 & _9;
_5 = _10.2.2;
_24.fld0.0.3 = 245407583590421336223917892470222084607_u128 as u32;
_13.0 = _17;
Goto(bb16)
}
bb16 = {
_24.fld0 = (_13,);
_13.2 = _6;
_32 = !_18.0;
match _26.2 {
0 => bb17,
6041605325774731407 => bb19,
_ => bb18
}
}
bb17 = {
_2.1 = _17;
_13.4 = _10.4;
_18 = (44_u8, (-9614_i16), 6041605325774731407_i64);
_17 = _13.0;
_5 = -_4;
_10.1 = !_13.1;
_10 = _13;
_13.2.0 = _10.2.0;
match _18.1 {
0 => bb1,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
340282366920938463463374607431768201842 => bb9,
_ => bb8
}
}
bb18 = {
Return()
}
bb19 = {
_10 = (_13.2.1, _24.fld0.0.1, _24.fld0.0.2, _13.3, _24.fld0.0.4);
_34.fld1 = _24.fld5 as u64;
_29 = _24.fld0.0.1;
_15 = _10.2.0 - _2.0;
_16.2 = _13.2.2;
_13.2.2 = _18.0 as isize;
_24.fld0.0.0 = _24.fld0.0.2.1;
_34.fld2 = [_13.4,_13.4,_10.4,_13.4,_10.4];
_26.0 = _34.fld1 as u8;
_24.fld0.0.2.1 = _12.1;
_26.2 = _24.fld1 as i64;
_37.0 = [_18.0,_26.0,_18.0,_32,_32,_32,_26.0,_18.0];
_12 = _10.2;
_40.1 = _11.0;
_10 = _24.fld0.0;
_2.2 = _4;
_33.0 = [_18.0,_32,_26.0,_18.0,_26.0,_18.0,_18.0,_32];
_32 = _26.0;
_24.fld1 = _31.fld1;
_13.1 = !_24.fld0.0.1;
_18 = _26;
_39 = _24.fld0.0.1;
_11.3 = _6.1;
_36 = core::ptr::addr_of_mut!(_18.1);
_14 = !_4;
Goto(bb20)
}
bb20 = {
_24.fld0 = (_10,);
_24.fld0.0.2 = _2;
_24.fld0.0.2.0 = _18.0 as usize;
_9 = !_12.2;
_34.fld1 = _24.fld1;
_13 = (_16.1, _24.fld0.0.1, _6, _10.3, _24.fld0.0.4);
_24.fld0.0.4 = _13.4;
_6 = _16;
_40 = (_11.0, _11.0, 2_i8);
_33 = _37;
_10.2.1 = _13.2.1;
_10.2.2 = _12.2 - _5;
_3 = _14 | _11.2;
_24.fld0 = (_10,);
_36 = core::ptr::addr_of_mut!(_18.1);
match _24.fld0.0.3 {
0 => bb14,
1 => bb6,
2 => bb11,
3 => bb21,
4289580993 => bb23,
_ => bb22
}
}
bb21 = {
Return()
}
bb22 = {
_2.1 = _16.1;
_12.2 = _5;
_5 = !_12.2;
_10 = _13;
_9 = -_23;
_24.fld6 = core::ptr::addr_of!(_27);
_10.2 = (_13.2.0, _6.1, _9);
_24.fld0.0 = _13;
_24.fld0.0.3 = _10.3;
_24.fld0.0.1 = !_13.1;
_26.2 = _18.2;
_31.fld2 = [_13.4,_13.4,_24.fld0.0.4,_24.fld0.0.4,_10.4];
_17 = _24.fld0.0.2.1;
_10.2 = _16;
_16.2 = _24.fld0.0.2.2 >> _10.2.0;
_24.fld1 = !1034974873626708621_u64;
_13.2.0 = !_6.0;
_10 = _24.fld0.0;
_8 = _26.2 as isize;
_11.1 = _24.fld5;
_24.fld0.0.2 = (_6.0, _30, _7);
_31.fld1 = _24.fld1;
_18.1 = _26.1 + _26.1;
Goto(bb14)
}
bb23 = {
_13.0 = _10.0;
_10.0 = _6.1;
_31.fld2 = _34.fld2;
Goto(bb24)
}
bb24 = {
_9 = -_11.2;
_31.fld2 = _34.fld2;
_7 = _13.1 as isize;
_7 = _11.2;
_39 = _10.1 | _29;
_25 = &_16.2;
_16.0 = _10.2.0 << _24.fld0.0.2.0;
_21 = [_10.1,_13.1,_13.1,_39];
_12.2 = _9 << _15;
_42 = !_26.0;
_18.0 = _26.0;
_9 = _2.2 >> _26.0;
_22 = _29;
_12.1 = _10.0;
_26.0 = _32;
_24.fld6 = core::ptr::addr_of!(_27);
_32 = !_26.0;
_10.4 = !_24.fld0.0.4;
_23 = _2.2 * _2.2;
_13.4 = _10.4;
_2.1 = _10.2.1;
_24.fld1 = _31.fld1;
_41 = _26.2 - _18.2;
_28 = Adt46::Variant0 { fld0: (-72142452340634136719951977369499804996_i128),fld1: _37,fld2: _10,fld3: _21 };
_6.1 = _10.0;
_43.fld0.0.2.0 = !_12.0;
_44.fld0.0.3 = Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_28, 0), 2).3;
_35 = Adt51::Variant0 { fld0: _24.fld0 };
_43.fld6 = _24.fld6;
match _13.3 {
0 => bb1,
1 => bb25,
2 => bb26,
4289580993 => bb28,
_ => bb27
}
}
bb25 = {
Return()
}
bb26 = {
_7 = _16.2;
_18.0 = !215_u8;
_6 = _2;
_13.2 = (_6.0, _6.1, _9);
_11.1 = (-8_i8) as i32;
_9 = _10.2.1 as isize;
_7 = _4 & _16.2;
_16 = (_13.2.0, _13.2.1, _12.2);
Goto(bb10)
}
bb27 = {
_16.0 = _11.1 as usize;
_16.0 = _24.fld0.0.2.0 - _12.0;
_21 = [_10.1,_10.1,_24.fld0.0.1,_10.1];
_10.2.0 = !_6.0;
_12.1 = _30;
_10 = (_24.fld0.0.0, _24.fld0.0.1, _24.fld0.0.2, _24.fld0.0.3, _13.4);
_24.fld6 = core::ptr::addr_of!(_27);
_24.fld0.0.1 = _13.1;
_7 = (*_25);
_12.0 = _15;
_34.fld2 = [_10.4,_24.fld0.0.4,_10.4,_24.fld0.0.4,_13.4];
_13.2.2 = (*_25) ^ _4;
_10.2.2 = !_9;
_27 = _26.0 as f64;
_10.3 = _24.fld0.0.3;
_10.1 = !_24.fld0.0.1;
_2.0 = _10.2.0 | _24.fld0.0.2.0;
_5 = _12.2 & _9;
_5 = _10.2.2;
_24.fld0.0.3 = 245407583590421336223917892470222084607_u128 as u32;
_13.0 = _17;
Goto(bb16)
}
bb28 = {
_12.2 = _22 as isize;
SetDiscriminant(_35, 1);
place!(Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_28, 0), 2)).2.1 = _24.fld0.0.2.1;
_13.0 = _10.0;
_41 = _18.1 as i64;
place!(Field::<[usize; 4]>(Variant(_35, 1), 0)) = [_6.0,_12.0,_43.fld0.0.2.0,_15];
_21 = Field::<[bool; 4]>(Variant(_28, 0), 3);
_18.0 = !_32;
_44.fld6 = _24.fld6;
_40.1 = _40.0;
_24.fld0.0.2.0 = _15 - _16.0;
SetDiscriminant(_35, 1);
_19 = Adt46::Variant0 { fld0: (-161928107753215046363683310817985737633_i128),fld1: Field::<([u8; 8],)>(Variant(_28, 0), 1),fld2: _10,fld3: _21 };
_18.0 = !_42;
_44.fld0.0.2.2 = _4;
_12.0 = _26.0 as usize;
place!(Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_28, 0), 2)).1 = !Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_19, 0), 2).1;
place!(Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_19, 0), 2)).2.2 = _13.3 as isize;
place!(Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_19, 0), 2)).3 = (*_36) as u32;
_13.4 = !Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_28, 0), 2).4;
_47 = [_40.2,_40.2,_40.2,_40.2,_40.2,_40.2,_40.2];
_43.fld1 = _31.fld1 + _31.fld1;
_38 = !_10.3;
match _40.2 {
0 => bb29,
1 => bb30,
3 => bb32,
4 => bb33,
5 => bb34,
2 => bb36,
_ => bb35
}
}
bb29 = {
_2.2 = _14 | _7;
_25 = &_23;
Goto(bb15)
}
bb30 = {
_10.0 = _17;
_7 = _12.2 << _16.2;
_13 = (_16.1, _10.1, _12, _10.3, _10.4);
_10.0 = _13.0;
_16.1 = _11.3;
Goto(bb2)
}
bb31 = {
_10.0 = _17;
_7 = _12.2 << _16.2;
_13 = (_16.1, _10.1, _12, _10.3, _10.4);
_10.0 = _13.0;
_16.1 = _11.3;
Goto(bb2)
}
bb32 = {
Return()
}
bb33 = {
Return()
}
bb34 = {
Return()
}
bb35 = {
Return()
}
bb36 = {
_43.fld0 = (Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_28, 0), 2),);
_48 = (*_25);
_12.2 = !_10.2.2;
_18.2 = _26.2 * _41;
_38 = Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_28, 0), 2).4 as u32;
_44.fld0.0.2.0 = !_15;
_35 = Adt51::Variant0 { fld0: _43.fld0 };
_10.0 = _2.1;
_18.1 = !_26.1;
_13.1 = _29;
_53.fld0.0.4 = _43.fld0.0.4 << _2.0;
_53.fld6 = core::ptr::addr_of!(_27);
_43.fld3 = _24.fld3;
_53.fld0.0.2.0 = 199178621443445513924322228764991107969_u128 as usize;
_43.fld0.0.1 = !_29;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_35, 0), 0)).0.3 = (*_36) as u32;
SetDiscriminant(_35, 0);
_32 = !_26.0;
place!(Field::<[bool; 4]>(Variant(_19, 0), 3)) = Field::<[bool; 4]>(Variant(_28, 0), 3);
_24.fld0 = (_43.fld0.0,);
_12.2 = _18.2 as isize;
_24.fld3 = [_31.fld1,_31.fld1,_24.fld1,_43.fld1,_43.fld1,_31.fld1];
Goto(bb37)
}
bb37 = {
_32 = !_18.0;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_35, 0), 0)).0.0 = _43.fld0.0.2.1;
_43.fld0.0.2.2 = _32 as isize;
_24.fld0.0.2.2 = -_10.2.2;
_44.fld1 = _13.3 as u64;
_50.1 = [Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_19, 0), 2).1,_22,_39,_39];
_44.fld6 = _53.fld6;
place!(Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_28, 0), 2)).3 = !_44.fld0.0.3;
_38 = !Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_19, 0), 2).3;
_12.1 = _13.0;
_3 = _9;
_27 = Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_28, 0), 2).3 as f64;
_44.fld0.0.2 = (_15, _10.2.1, _13.2.2);
_3 = _53.fld0.0.4 as isize;
Call(place!(Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_28, 0), 2)).4 = core::intrinsics::bswap(_53.fld0.0.4), ReturnTo(bb38), UnwindUnreachable())
}
bb38 = {
place!(Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_28, 0), 2)).2.2 = _4;
place!(Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_19, 0), 2)).2 = (_44.fld0.0.2.0, _13.2.1, _7);
_12.2 = -_2.2;
_11.0 = _40.1;
place!(Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_28, 0), 2)).2.1 = _24.fld0.0.0;
_2.1 = _17;
_11.2 = _4;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_35, 0), 0)).0.2 = (_10.2.0, _10.2.1, _48);
match _24.fld0.0.3 {
0 => bb16,
1 => bb25,
2 => bb6,
4289580993 => bb40,
_ => bb39
}
}
bb39 = {
_16.0 = _11.1 as usize;
_16.0 = _24.fld0.0.2.0 - _12.0;
_21 = [_10.1,_10.1,_24.fld0.0.1,_10.1];
_10.2.0 = !_6.0;
_12.1 = _30;
_10 = (_24.fld0.0.0, _24.fld0.0.1, _24.fld0.0.2, _24.fld0.0.3, _13.4);
_24.fld6 = core::ptr::addr_of!(_27);
_24.fld0.0.1 = _13.1;
_7 = (*_25);
_12.0 = _15;
_34.fld2 = [_10.4,_24.fld0.0.4,_10.4,_24.fld0.0.4,_13.4];
_13.2.2 = (*_25) ^ _4;
_10.2.2 = !_9;
_27 = _26.0 as f64;
_10.3 = _24.fld0.0.3;
_10.1 = !_24.fld0.0.1;
_2.0 = _10.2.0 | _24.fld0.0.2.0;
_5 = _12.2 & _9;
_5 = _10.2.2;
_24.fld0.0.3 = 245407583590421336223917892470222084607_u128 as u32;
_13.0 = _17;
Goto(bb16)
}
bb40 = {
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_35, 0), 0)).0.2.1 = _43.fld0.0.0;
_44.fld0.0.2.1 = _30;
_44.fld0.0 = (_11.3, _22, _43.fld0.0.2, Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_28, 0), 2).3, _53.fld0.0.4);
_6.1 = _10.0;
_24.fld0.0.1 = !_29;
_11.2 = _7;
_19 = Adt46::Variant0 { fld0: (-143393680184022566326632028138206410371_i128),fld1: Field::<([u8; 8],)>(Variant(_28, 0), 1),fld2: _44.fld0.0,fld3: Field::<[bool; 4]>(Variant(_28, 0), 3) };
place!(Field::<i128>(Variant(_19, 0), 0)) = 146999471604568611981010619977665559930_i128;
_44.fld0.0.2.1 = Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_28, 0), 2).2.1;
_24.fld0.0.2.2 = -Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_28, 0), 2).2.2;
_18.1 = _26.1;
_42 = !_26.0;
_53.fld0.0.1 = _10.1;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_35, 0), 0)).0.2 = _6;
_29 = !_43.fld0.0.1;
_54 = Field::<[bool; 4]>(Variant(_19, 0), 3);
_11.0 = _40.0 * _40.1;
_28 = Move(_19);
_43.fld0.0.3 = _10.3;
_66 = _43.fld0.0.1;
_44.fld0.0.0 = _13.2.1;
_60 = _2.2;
Call(_45 = fn15(_11.2, _6.0, _2, Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_35, 0), 0).0.2), ReturnTo(bb41), UnwindUnreachable())
}
bb41 = {
_18.0 = Field::<u8>(Variant(_45, 1), 1);
_63 = _47;
_58 = !_22;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_35, 0), 0)).0 = Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_28, 0), 2);
_53.fld0.0.2 = (_2.0, _13.2.1, _16.2);
place!(Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_28, 0), 2)).2.1 = _17;
_24.fld1 = _31.fld1;
Call(_38 = core::intrinsics::bswap(_24.fld0.0.3), ReturnTo(bb42), UnwindUnreachable())
}
bb42 = {
_38 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_35, 0), 0).0.3 * _44.fld0.0.3;
_31.fld1 = _44.fld1;
_12.2 = _60 ^ _48;
place!(Field::<[bool; 4]>(Variant(_28, 0), 3)) = [Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_35, 0), 0).0.1,_10.1,Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_28, 0), 2).1,_44.fld0.0.1];
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_35, 0), 0)).0.2.0 = !_1;
_40.0 = -_40.1;
_56 = Move(_35);
_43.fld0.0.0 = _53.fld0.0.2.1;
_53.fld5 = _18.0 as i32;
_32 = 27997171279001268254302582609737262949_u128 as u8;
_70.0 = [Field::<u8>(Variant(_45, 1), 1),_42,_26.0,_18.0,Field::<u8>(Variant(_45, 1), 1),_18.0,_18.0,_26.0];
_24.fld0.0.1 = _44.fld0.0.0 == _17;
_16.1 = _13.0;
_37 = (_70.0,);
_57 = 280703230266272997107908941047015405825_u128;
_19 = Move(_28);
_7 = _23 | _3;
_43.fld5 = !_53.fld5;
place!(Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_19, 0), 2)) = (_44.fld0.0.0, _53.fld0.0.1, Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_56, 0), 0).0.2, _44.fld0.0.3, _53.fld0.0.4);
_43.fld3 = [_43.fld1,_44.fld1,_34.fld1,_43.fld1,_43.fld1,_34.fld1];
_18.2 = _43.fld0.0.2.1 as i64;
_50.0 = _18.2;
_12.1 = _53.fld0.0.2.1;
_43.fld1 = !_34.fld1;
_31.fld0 = Adt45::Variant0 { fld0: _6.1 };
_8 = _12.2 << _13.2.0;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_56, 0), 0)).0 = (Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_19, 0), 2).0, Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_19, 0), 2).1, Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_19, 0), 2).2, _24.fld0.0.3, _44.fld0.0.4);
match _40.2 {
0 => bb8,
1 => bb43,
2 => bb45,
_ => bb44
}
}
bb43 = {
place!(Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_28, 0), 2)).2.2 = _4;
place!(Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_19, 0), 2)).2 = (_44.fld0.0.2.0, _13.2.1, _7);
_12.2 = -_2.2;
_11.0 = _40.1;
place!(Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_28, 0), 2)).2.1 = _24.fld0.0.0;
_2.1 = _17;
_11.2 = _4;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_35, 0), 0)).0.2 = (_10.2.0, _10.2.1, _48);
match _24.fld0.0.3 {
0 => bb16,
1 => bb25,
2 => bb6,
4289580993 => bb40,
_ => bb39
}
}
bb44 = {
_10 = (_13.2.1, _24.fld0.0.1, _24.fld0.0.2, _13.3, _24.fld0.0.4);
_34.fld1 = _24.fld5 as u64;
_29 = _24.fld0.0.1;
_15 = _10.2.0 - _2.0;
_16.2 = _13.2.2;
_13.2.2 = _18.0 as isize;
_24.fld0.0.0 = _24.fld0.0.2.1;
_34.fld2 = [_13.4,_13.4,_10.4,_13.4,_10.4];
_26.0 = _34.fld1 as u8;
_24.fld0.0.2.1 = _12.1;
_26.2 = _24.fld1 as i64;
_37.0 = [_18.0,_26.0,_18.0,_32,_32,_32,_26.0,_18.0];
_12 = _10.2;
_40.1 = _11.0;
_10 = _24.fld0.0;
_2.2 = _4;
_33.0 = [_18.0,_32,_26.0,_18.0,_26.0,_18.0,_18.0,_32];
_32 = _26.0;
_24.fld1 = _31.fld1;
_13.1 = !_24.fld0.0.1;
_18 = _26;
_39 = _24.fld0.0.1;
_11.3 = _6.1;
_36 = core::ptr::addr_of_mut!(_18.1);
_14 = !_4;
Goto(bb20)
}
bb45 = {
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_56, 0), 0)).0 = (_2.1, _13.1, _10.2, _43.fld0.0.3, _44.fld0.0.4);
_43.fld0.0.0 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_56, 0), 0).0.0;
_10.1 = !_53.fld0.0.1;
_18.0 = !Field::<u8>(Variant(_45, 1), 1);
_53.fld0 = (Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_19, 0), 2),);
_44.fld0.0.3 = _27 as u32;
place!(Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_19, 0), 2)).2.0 = _10.2.0;
_53.fld0.0 = (_24.fld0.0.0, _29, _13.2, _38, Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_56, 0), 0).0.4);
_35 = Move(_56);
_10.2.2 = _7;
_33.0 = Field::<Adt49>(Variant(_45, 1), 0).fld0;
_44.fld5 = _53.fld5 & _43.fld5;
_53.fld0 = _43.fld0;
_53.fld0 = (Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_19, 0), 2),);
_72 = (Field::<u8>(Variant(_45, 1), 1), (*_36), _26.2);
_2.2 = Field::<i128>(Variant(_19, 0), 0) as isize;
_56 = Adt51::Variant0 { fld0: Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_35, 0), 0) };
Call(_53 = fn16(_24.fld0.0.2.2, _15, _13, Move(_35), Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_19, 0), 2).4, _16, _60, _10.1, _8, Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_56, 0), 0).0.2, Move(_56), _24.fld0, _24.fld0, _23, _10.2), ReturnTo(bb46), UnwindUnreachable())
}
bb46 = {
place!(Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_19, 0), 2)).3 = _53.fld0.0.3 >> _48;
place!(Field::<char>(Variant(_53.fld4, 1), 1)) = _53.fld0.0.0;
_42 = !_18.0;
place!(Field::<u8>(Variant(_45, 1), 1)) = !_42;
_36 = Field::<*mut i16>(Variant(_53.fld2, 0), 1);
_18.1 = _72.1 * _26.1;
_44.fld4 = Move(_53.fld4);
_24.fld0.0.0 = _43.fld0.0.2.1;
_24.fld0.0 = (_44.fld0.0.2.1, _58, _13.2, Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_19, 0), 2).3, _44.fld0.0.4);
place!(Field::<(u128,)>(Variant(_53.fld2, 0), 2)) = (_57,);
match _40.2 {
0 => bb33,
1 => bb24,
2 => bb47,
_ => bb34
}
}
bb47 = {
place!(Field::<*const (u128,)>(Variant(_44.fld4, 1), 0)) = core::ptr::addr_of!(place!(Field::<(u128,)>(Variant(_53.fld2, 0), 2)));
_34.fld2 = [Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_19, 0), 2).4,_44.fld0.0.4,_53.fld0.0.4,Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_19, 0), 2).4,_24.fld0.0.4];
_10.2.0 = _40.1 as usize;
_53.fld0.0.2.1 = _44.fld0.0.2.1;
Goto(bb48)
}
bb48 = {
_18.1 = !_72.1;
_43.fld2 = Adt43::Variant0 { fld0: _13.1,fld1: _36,fld2: Field::<(u128,)>(Variant(_53.fld2, 0), 2),fld3: Field::<f64>(Variant(_53.fld2, 0), 3),fld4: Field::<usize>(Variant(_53.fld2, 0), 4) };
_53.fld0.0.0 = Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_19, 0), 2).2.1;
SetDiscriminant(_19, 1);
_28 = Adt46::Variant0 { fld0: 57902099638430088336068178048933265697_i128,fld1: _33,fld2: _10,fld3: _50.1 };
_23 = Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_28, 0), 2).2.2 + Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_28, 0), 2).2.2;
place!(Field::<*mut i16>(Variant(_43.fld2, 0), 1)) = Field::<*mut i16>(Variant(_53.fld2, 0), 1);
_18.2 = _26.2 - _41;
_10.2.0 = Field::<f64>(Variant(_53.fld2, 0), 3) as usize;
_44.fld3 = _53.fld3;
SetDiscriminant(_43.fld2, 1);
_62 = _57;
place!(Field::<isize>(Variant(_19, 1), 2)) = _8;
place!(Field::<u32>(Variant(_43.fld2, 1), 2)) = !_53.fld0.0.3;
_43.fld0.0 = (Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_28, 0), 2).0, _22, _10.2, Field::<u32>(Variant(_43.fld2, 1), 2), _44.fld0.0.4);
_24.fld0.0.4 = _11.0 as u16;
_73 = _72.2 as f64;
place!(Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_28, 0), 2)).2 = _44.fld0.0.2;
SetDiscriminant(_53.fld2, 1);
place!(Field::<(char, bool, (usize, char, isize), u32, u16)>(Variant(_28, 0), 2)).2.1 = _10.0;
_68 = Adt44 { fld0: Field::<*const (u128,)>(Variant(_44.fld4, 1), 0) };
place!(Field::<(i64, [bool; 4])>(Variant(_19, 1), 1)) = (_26.2, Field::<[bool; 4]>(Variant(_28, 0), 3));
RET = _68.fld0;
_53.fld1 = !_24.fld1;
_24.fld1 = !_31.fld1;
SetDiscriminant(_31.fld0, 1);
place!(Field::<*const u128>(Variant(_53.fld2, 1), 0)) = core::ptr::addr_of!(_62);
_44.fld0.0.3 = Field::<u32>(Variant(_43.fld2, 1), 2);
Goto(bb49)
}
bb49 = {
Call(_79 = dump_var(14_usize, 62_usize, Move(_62), 50_usize, Move(_50), 17_usize, Move(_17), 41_usize, Move(_41)), ReturnTo(bb50), UnwindUnreachable())
}
bb50 = {
Call(_79 = dump_var(14_usize, 10_usize, Move(_10), 58_usize, Move(_58), 38_usize, Move(_38), 23_usize, Move(_23)), ReturnTo(bb51), UnwindUnreachable())
}
bb51 = {
Call(_79 = dump_var(14_usize, 37_usize, Move(_37), 21_usize, Move(_21), 48_usize, Move(_48), 13_usize, Move(_13)), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
Call(_79 = dump_var(14_usize, 7_usize, Move(_7), 29_usize, Move(_29), 54_usize, Move(_54), 63_usize, Move(_63)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Call(_79 = dump_var(14_usize, 22_usize, Move(_22), 15_usize, Move(_15), 2_usize, Move(_2), 72_usize, Move(_72)), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Call(_79 = dump_var(14_usize, 33_usize, Move(_33), 80_usize, _80, 80_usize, _80, 80_usize, _80), ReturnTo(bb55), UnwindUnreachable())
}
bb55 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn15(mut _1: isize,mut _2: usize,mut _3: (usize, char, isize),mut _4: (usize, char, isize)) -> Adt53 {
mir! {
type RET = Adt53;
let _5: isize;
let _6: Adt56;
let _7: [u32; 4];
let _8: f32;
let _9: (u8, i16, i64);
let _10: (u64, [usize; 4], i32, isize, u8, &'static isize, u8, [u32; 2]);
let _11: *const &'static isize;
let _12: [i16; 5];
let _13: char;
let _14: (i64, [bool; 4]);
let _15: bool;
let _16: f32;
let _17: (u8, i16, i64);
let _18: Adt49;
let _19: ();
let _20: ();
{
_4 = (_3.0, _3.1, _3.2);
_3 = (_4.0, _4.1, _4.2);
_1 = _4.2;
_3.2 = 132_u8 as isize;
_5 = -_4.2;
_5 = _3.1 as isize;
_1 = 25335_u16 as isize;
_1 = _4.2 | _4.2;
_3.0 = _4.0 & _4.0;
_3.0 = !_4.0;
_5 = _1 + _4.2;
_4.0 = 17463_u16 as usize;
_3 = _4;
_4.1 = _3.1;
_2 = 99_i8 as usize;
_8 = 15979126757006979186_u64 as f32;
_2 = !_4.0;
_10.6 = 378593424_i32 as u8;
_10.5 = &_5;
Goto(bb1)
}
bb1 = {
_10.6 = 81_u8 * 240_u8;
_10.1 = [_4.0,_4.0,_3.0,_4.0];
_10.3 = -_1;
_10.7 = [854506671_u32,3546925692_u32];
_9 = (_10.6, (-32504_i16), 391818741762254447_i64);
_10.0 = 15944518251275684699_u64 >> _5;
_10.4 = _9.0 - _9.0;
_10.6 = !_9.0;
_3.0 = _4.0 * _2;
_8 = _9.2 as f32;
_3.0 = 43857135549393077518500727448657876685_i128 as usize;
_12 = [_9.1,_9.1,_9.1,_9.1,_9.1];
_10.3 = (-1715508228_i32) as isize;
_13 = _4.1;
_3 = (_2, _4.1, _1);
match _9.2 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
391818741762254447 => bb8,
_ => bb7
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_9.1 = -24501_i16;
_10.2 = 125443871996807492636977037735758724392_u128 as i32;
_10.0 = 7424919582487399243_u64 - 17895657333688215132_u64;
Call(_3.0 = core::intrinsics::transmute(_1), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
_14.0 = _9.2 - _9.2;
_9 = (_10.6, (-3010_i16), _14.0);
_10.6 = !_10.4;
_15 = !true;
_3.1 = _4.1;
_17.2 = _9.2 & _9.2;
_10.6 = _10.4;
_10.6 = _9.0 << _10.4;
_18.fld0 = [_10.4,_10.6,_10.6,_10.4,_10.4,_10.6,_10.6,_10.6];
_4.0 = 267938819477610972571354812607478536652_u128 as usize;
_4.1 = _3.1;
_8 = 17_i8 as f32;
_11 = core::ptr::addr_of!(_10.5);
_17 = _9;
_4.1 = _3.1;
RET = Adt53::Variant1 { fld0: Move(_18),fld1: _10.6 };
_10.7 = [1046896979_u32,2483090908_u32];
_3.0 = 1571910240_u32 as usize;
_14.0 = 93173709974180198039288613019517563019_u128 as i64;
Goto(bb10)
}
bb10 = {
Call(_19 = dump_var(15_usize, 15_usize, Move(_15), 3_usize, Move(_3), 13_usize, Move(_13), 2_usize, Move(_2)), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
Call(_19 = dump_var(15_usize, 17_usize, Move(_17), 20_usize, _20, 20_usize, _20, 20_usize, _20), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn16(mut _1: isize,mut _2: usize,mut _3: (char, bool, (usize, char, isize), u32, u16),mut _4: Adt51,mut _5: u16,mut _6: (usize, char, isize),mut _7: isize,mut _8: bool,mut _9: isize,mut _10: (usize, char, isize),mut _11: Adt51,mut _12: ((char, bool, (usize, char, isize), u32, u16),),mut _13: ((char, bool, (usize, char, isize), u32, u16),),mut _14: isize,mut _15: (usize, char, isize)) -> Adt55 {
mir! {
type RET = Adt55;
let _16: Adt49;
let _17: u128;
let _18: [u64; 6];
let _19: (u128,);
let _20: isize;
let _21: char;
let _22: Adt59;
let _23: i128;
let _24: f64;
let _25: *mut i16;
let _26: [u32; 2];
let _27: (i64, [bool; 4]);
let _28: isize;
let _29: [u16; 5];
let _30: (u64, [usize; 4], i32, isize, u8, &'static isize, u8, [u32; 2]);
let _31: bool;
let _32: [u64; 6];
let _33: Adt59;
let _34: [u32; 4];
let _35: i128;
let _36: [u32; 4];
let _37: u32;
let _38: Adt55;
let _39: isize;
let _40: i128;
let _41: Adt43;
let _42: (u8, i16, i64);
let _43: [u64; 6];
let _44: isize;
let _45: *const u128;
let _46: Adt43;
let _47: f32;
let _48: (u128,);
let _49: [u8; 8];
let _50: char;
let _51: Adt43;
let _52: Adt44;
let _53: i16;
let _54: usize;
let _55: f32;
let _56: [u32; 4];
let _57: *const &'static isize;
let _58: f64;
let _59: [u32; 4];
let _60: Adt59;
let _61: (u128,);
let _62: Adt45;
let _63: Adt50;
let _64: Adt45;
let _65: *const f64;
let _66: ();
let _67: ();
{
_13.0.0 = _6.1;
RET.fld0.0.1 = !Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_11, 0), 0).0.1;
RET.fld0.0 = _12.0;
RET.fld0.0.3 = (-1939856424_i32) as u32;
RET.fld0.0 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_11, 0), 0).0;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_11, 0), 0)).0.1 = RET.fld0.0.1;
_6.1 = _15.1;
_4 = Adt51::Variant0 { fld0: Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_11, 0), 0) };
_5 = !Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_11, 0), 0).0.4;
_10.0 = !_13.0.2.0;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0)).0.2.2 = RET.fld0.0.2.2;
_12.0 = (Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_11, 0), 0).0.0, Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.1, _13.0.2, Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.3, RET.fld0.0.4);
_3.1 = _8 & Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_11, 0), 0).0.1;
_10.1 = RET.fld0.0.0;
RET.fld0.0.3 = !_3.3;
_12.0.3 = !RET.fld0.0.3;
RET.fld1 = 316723762_i32 as u64;
RET.fld0.0.3 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.1 as u32;
_6.0 = !_10.0;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0)).0 = (_6.1, RET.fld0.0.1, _15, RET.fld0.0.3, _5);
_3.2.1 = RET.fld0.0.0;
RET.fld3 = [RET.fld1,RET.fld1,RET.fld1,RET.fld1,RET.fld1,RET.fld1];
SetDiscriminant(_11, 1);
_12.0.4 = RET.fld0.0.4;
Goto(bb1)
}
bb1 = {
_15.1 = _3.2.1;
_3.4 = 140758104455739344090251525528035437244_u128 as u16;
_6 = (_2, _12.0.0, _14);
_14 = _3.1 as isize;
_12 = (_13.0,);
_13.0.2.2 = -_6.2;
Goto(bb2)
}
bb2 = {
RET.fld0.0.2.0 = !_10.0;
RET.fld6 = core::ptr::addr_of!(_24);
_3.4 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.4;
_19.0 = 92889009439415972731647845794838460594_u128 - 135768963974657867017486849348578856868_u128;
_14 = _12.0.2.2 + _3.2.2;
_10.1 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.0;
_12.0.2.2 = _6.2 - _9;
_13.0.2.1 = _13.0.0;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0)).0.2.1 = _12.0.2.1;
_3.0 = _13.0.2.1;
RET.fld0.0.1 = _3.1 ^ _8;
_7 = _13.0.2.2 >> _12.0.2.0;
_16.fld0 = [61_u8,115_u8,46_u8,120_u8,199_u8,97_u8,63_u8,19_u8];
_7 = (-4861181511454007071_i64) as isize;
_3.3 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.3 ^ RET.fld0.0.3;
_13.0.1 = _3.1;
SetDiscriminant(_4, 1);
RET.fld0.0 = _3;
match _13.0.3 {
0 => bb1,
4289580993 => bb4,
_ => bb3
}
}
bb3 = {
_15.1 = _3.2.1;
_3.4 = 140758104455739344090251525528035437244_u128 as u16;
_6 = (_2, _12.0.0, _14);
_14 = _3.1 as isize;
_12 = (_13.0,);
_13.0.2.2 = -_6.2;
Goto(bb2)
}
bb4 = {
RET.fld0.0 = _3;
RET.fld5 = RET.fld0.0.4 as i32;
_26 = [RET.fld0.0.3,_3.3];
_7 = 204_u8 as isize;
_13.0.2.2 = _6.2 & _15.2;
RET.fld0.0.3 = _3.3 / _12.0.3;
_12.0.3 = RET.fld0.0.3 % _13.0.3;
_12.0.1 = _13.0.1;
_21 = _3.0;
_9 = _14;
_2 = 224_u8 as usize;
_12.0.3 = _3.3 | RET.fld0.0.3;
_16.fld0 = [43_u8,38_u8,177_u8,21_u8,211_u8,133_u8,83_u8,246_u8];
_28 = RET.fld0.0.2.2;
_12.0.0 = _6.1;
RET.fld0.0.2.0 = !_12.0.2.0;
RET.fld0.0.2.0 = 246_u8 as usize;
_4 = Adt51::Variant0 { fld0: _12 };
RET.fld0.0.3 = _12.0.3 >> _1;
RET.fld0.0.2.1 = _3.2.1;
_24 = _28 as f64;
Goto(bb5)
}
bb5 = {
_10.2 = !_9;
_6.1 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.2.1;
_32 = RET.fld3;
_12.0.1 = RET.fld0.0.1;
place!(Field::<[usize; 4]>(Variant(_11, 1), 0)) = [_6.0,Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.2.0,Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.2.0,_15.0];
_10.1 = _12.0.2.1;
_12.0.2.2 = !_6.2;
_13.0.0 = _12.0.0;
_23 = (-44423404637170473092351677321396132966_i128) | (-124831666283159067221588481172012358685_i128);
_3.4 = RET.fld0.0.4;
_28 = _14;
_3.3 = _23 as u32;
_27.1 = [_13.0.1,_13.0.1,RET.fld0.0.1,_12.0.1];
RET.fld0.0 = _3;
_13.0.3 = _10.1 as u32;
Call(_7 = fn17(RET.fld0.0.2, Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.2.2, _12.0.2, Move(_11), _13.0.2.2, _13, _3.4, _15.2), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
_20 = !_9;
_11 = Adt51::Variant0 { fld0: _13 };
RET.fld0.0.4 = !_3.4;
_7 = RET.fld0.0.4 as isize;
_4 = Move(_11);
_30.1 = [Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.2.0,_10.0,_15.0,RET.fld0.0.2.0];
_36 = [_12.0.3,_12.0.3,_12.0.3,_12.0.3];
RET.fld0.0.3 = !_12.0.3;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0)).0.2.2 = _6.2 & _7;
RET.fld0.0.0 = _3.0;
RET.fld5 = _24 as i32;
RET.fld0.0.2 = _12.0.2;
_35 = _23;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0)).0.3 = _19.0 as u32;
Call(_30.6 = fn18(_13.0.2, _6, _10, _20, RET.fld0.0.2.2, RET.fld0.0.2.2, _10.2, _10.0), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
_35 = !_23;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0)).0.2 = RET.fld0.0.2;
_13.0 = (_15.1, Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.1, _15, Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.3, RET.fld0.0.4);
RET.fld0.0.2.0 = _15.0;
_4 = Adt51::Variant1 { fld0: _30.1 };
Goto(bb8)
}
bb8 = {
_6.2 = _15.2 * _15.2;
_13.0.2.2 = !_10.2;
RET.fld3 = _32;
RET.fld0.0.2.2 = _6.2 & _6.2;
_35 = _23 >> _10.0;
RET.fld0.0.0 = _6.1;
_12.0.1 = RET.fld0.0.2.2 == _12.0.2.2;
SetDiscriminant(_4, 1);
_15 = (_13.0.2.0, _13.0.0, _9);
_38.fld0.0.2.1 = _12.0.0;
_30.4 = !_30.6;
_38.fld3 = [RET.fld1,RET.fld1,RET.fld1,RET.fld1,RET.fld1,RET.fld1];
Goto(bb9)
}
bb9 = {
_23 = _35;
_13.0.2 = (_3.2.0, RET.fld0.0.0, _20);
_15.1 = _3.0;
_38.fld0.0.0 = _12.0.0;
_1 = (-94_i8) as isize;
_37 = RET.fld0.0.4 as u32;
RET.fld5 = !(-1825071854_i32);
place!(Field::<[usize; 4]>(Variant(_4, 1), 0)) = [RET.fld0.0.2.0,_13.0.2.0,_13.0.2.0,_15.0];
_30.3 = !RET.fld0.0.2.2;
RET.fld0.0.2.0 = _15.0;
_18 = [RET.fld1,RET.fld1,RET.fld1,RET.fld1,RET.fld1,RET.fld1];
_15.2 = _28;
_6.1 = _13.0.2.1;
_14 = _10.0 as isize;
_37 = _12.0.3 + RET.fld0.0.3;
_42 = (_30.4, 17012_i16, (-2156636415053765541_i64));
_27.0 = RET.fld5 as i64;
match _42.2 {
0 => bb7,
1 => bb2,
2 => bb8,
3 => bb6,
340282366920938463461217971016714445915 => bb11,
_ => bb10
}
}
bb10 = {
RET.fld0.0.2.0 = !_10.0;
RET.fld6 = core::ptr::addr_of!(_24);
_3.4 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.4;
_19.0 = 92889009439415972731647845794838460594_u128 - 135768963974657867017486849348578856868_u128;
_14 = _12.0.2.2 + _3.2.2;
_10.1 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.0;
_12.0.2.2 = _6.2 - _9;
_13.0.2.1 = _13.0.0;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0)).0.2.1 = _12.0.2.1;
_3.0 = _13.0.2.1;
RET.fld0.0.1 = _3.1 ^ _8;
_7 = _13.0.2.2 >> _12.0.2.0;
_16.fld0 = [61_u8,115_u8,46_u8,120_u8,199_u8,97_u8,63_u8,19_u8];
_7 = (-4861181511454007071_i64) as isize;
_3.3 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.3 ^ RET.fld0.0.3;
_13.0.1 = _3.1;
SetDiscriminant(_4, 1);
RET.fld0.0 = _3;
match _13.0.3 {
0 => bb1,
4289580993 => bb4,
_ => bb3
}
}
bb11 = {
_5 = RET.fld0.0.4;
_29 = [_13.0.4,_3.4,RET.fld0.0.4,_5,_5];
_12.0.0 = RET.fld0.0.2.1;
_42.2 = _27.0 * _27.0;
RET.fld0.0.4 = _42.1 as u16;
SetDiscriminant(_4, 0);
_43 = _18;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0)).0.3 = _37;
_38.fld3 = [RET.fld1,RET.fld1,RET.fld1,RET.fld1,RET.fld1,RET.fld1];
_13.0.2.2 = !_9;
_32 = _18;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0)).0.2.0 = RET.fld0.0.2.0;
_12.0.3 = RET.fld0.0.3 | _37;
_15.1 = _12.0.0;
_21 = _3.0;
_30.1 = [_13.0.2.0,_3.2.0,_12.0.2.0,_3.2.0];
_25 = core::ptr::addr_of_mut!(_42.1);
_8 = _12.0.1;
_34 = _36;
_38.fld0.0.1 = !_8;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0)).0 = (_6.1, _3.1, _15, RET.fld0.0.3, _13.0.4);
_22 = Adt59::Variant2 { fld0: _42,fld1: _19.0,fld2: Move(_16) };
Call(place!(Field::<(u8, i16, i64)>(Variant(_22, 2), 0)).1 = core::intrinsics::bswap((*_25)), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
_3.2 = (_12.0.2.0, RET.fld0.0.2.1, _10.2);
RET.fld0.0.2 = (_6.0, Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.0, _30.3);
_12.0.2.1 = _13.0.2.1;
place!(Field::<(u8, i16, i64)>(Variant(_22, 2), 0)) = (_42.0, _42.1, _42.2);
_6.2 = _28;
place!(Field::<Adt49>(Variant(_22, 2), 2)).fld0 = [Field::<(u8, i16, i64)>(Variant(_22, 2), 0).0,Field::<(u8, i16, i64)>(Variant(_22, 2), 0).0,_30.6,_30.4,_42.0,_30.4,_42.0,_42.0];
match (*_25) {
0 => bb10,
1 => bb13,
2 => bb14,
3 => bb15,
4 => bb16,
17012 => bb18,
_ => bb17
}
}
bb13 = {
_5 = RET.fld0.0.4;
_29 = [_13.0.4,_3.4,RET.fld0.0.4,_5,_5];
_12.0.0 = RET.fld0.0.2.1;
_42.2 = _27.0 * _27.0;
RET.fld0.0.4 = _42.1 as u16;
SetDiscriminant(_4, 0);
_43 = _18;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0)).0.3 = _37;
_38.fld3 = [RET.fld1,RET.fld1,RET.fld1,RET.fld1,RET.fld1,RET.fld1];
_13.0.2.2 = !_9;
_32 = _18;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0)).0.2.0 = RET.fld0.0.2.0;
_12.0.3 = RET.fld0.0.3 | _37;
_15.1 = _12.0.0;
_21 = _3.0;
_30.1 = [_13.0.2.0,_3.2.0,_12.0.2.0,_3.2.0];
_25 = core::ptr::addr_of_mut!(_42.1);
_8 = _12.0.1;
_34 = _36;
_38.fld0.0.1 = !_8;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0)).0 = (_6.1, _3.1, _15, RET.fld0.0.3, _13.0.4);
_22 = Adt59::Variant2 { fld0: _42,fld1: _19.0,fld2: Move(_16) };
Call(place!(Field::<(u8, i16, i64)>(Variant(_22, 2), 0)).1 = core::intrinsics::bswap((*_25)), ReturnTo(bb12), UnwindUnreachable())
}
bb14 = {
RET.fld0.0.2.0 = !_10.0;
RET.fld6 = core::ptr::addr_of!(_24);
_3.4 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.4;
_19.0 = 92889009439415972731647845794838460594_u128 - 135768963974657867017486849348578856868_u128;
_14 = _12.0.2.2 + _3.2.2;
_10.1 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.0;
_12.0.2.2 = _6.2 - _9;
_13.0.2.1 = _13.0.0;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0)).0.2.1 = _12.0.2.1;
_3.0 = _13.0.2.1;
RET.fld0.0.1 = _3.1 ^ _8;
_7 = _13.0.2.2 >> _12.0.2.0;
_16.fld0 = [61_u8,115_u8,46_u8,120_u8,199_u8,97_u8,63_u8,19_u8];
_7 = (-4861181511454007071_i64) as isize;
_3.3 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.3 ^ RET.fld0.0.3;
_13.0.1 = _3.1;
SetDiscriminant(_4, 1);
RET.fld0.0 = _3;
match _13.0.3 {
0 => bb1,
4289580993 => bb4,
_ => bb3
}
}
bb15 = {
_15.1 = _3.2.1;
_3.4 = 140758104455739344090251525528035437244_u128 as u16;
_6 = (_2, _12.0.0, _14);
_14 = _3.1 as isize;
_12 = (_13.0,);
_13.0.2.2 = -_6.2;
Goto(bb2)
}
bb16 = {
RET.fld0.0 = _3;
RET.fld5 = RET.fld0.0.4 as i32;
_26 = [RET.fld0.0.3,_3.3];
_7 = 204_u8 as isize;
_13.0.2.2 = _6.2 & _15.2;
RET.fld0.0.3 = _3.3 / _12.0.3;
_12.0.3 = RET.fld0.0.3 % _13.0.3;
_12.0.1 = _13.0.1;
_21 = _3.0;
_9 = _14;
_2 = 224_u8 as usize;
_12.0.3 = _3.3 | RET.fld0.0.3;
_16.fld0 = [43_u8,38_u8,177_u8,21_u8,211_u8,133_u8,83_u8,246_u8];
_28 = RET.fld0.0.2.2;
_12.0.0 = _6.1;
RET.fld0.0.2.0 = !_12.0.2.0;
RET.fld0.0.2.0 = 246_u8 as usize;
_4 = Adt51::Variant0 { fld0: _12 };
RET.fld0.0.3 = _12.0.3 >> _1;
RET.fld0.0.2.1 = _3.2.1;
_24 = _28 as f64;
Goto(bb5)
}
bb17 = {
_20 = !_9;
_11 = Adt51::Variant0 { fld0: _13 };
RET.fld0.0.4 = !_3.4;
_7 = RET.fld0.0.4 as isize;
_4 = Move(_11);
_30.1 = [Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.2.0,_10.0,_15.0,RET.fld0.0.2.0];
_36 = [_12.0.3,_12.0.3,_12.0.3,_12.0.3];
RET.fld0.0.3 = !_12.0.3;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0)).0.2.2 = _6.2 & _7;
RET.fld0.0.0 = _3.0;
RET.fld5 = _24 as i32;
RET.fld0.0.2 = _12.0.2;
_35 = _23;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0)).0.3 = _19.0 as u32;
Call(_30.6 = fn18(_13.0.2, _6, _10, _20, RET.fld0.0.2.2, RET.fld0.0.2.2, _10.2, _10.0), ReturnTo(bb7), UnwindUnreachable())
}
bb18 = {
_3.2.2 = _9 << (*_25);
_26 = [RET.fld0.0.3,_12.0.3];
_38.fld0.0.2 = (_13.0.2.0, _12.0.2.1, RET.fld0.0.2.2);
_20 = _30.3;
_10 = (_12.0.2.0, Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.0, _15.2);
SetDiscriminant(_4, 1);
_3.2.0 = !_15.0;
_6.0 = !_13.0.2.0;
_39 = !_7;
_38.fld0.0.1 = !_8;
place!(Field::<(u8, i16, i64)>(Variant(_22, 2), 0)).0 = !_42.0;
_51 = Adt43::Variant0 { fld0: _8,fld1: _25,fld2: _19,fld3: _24,fld4: _38.fld0.0.2.0 };
_6.0 = _15.0;
_48.0 = !Field::<(u128,)>(Variant(_51, 0), 2).0;
RET.fld0.0.2.0 = _15.0 - _12.0.2.0;
_38.fld0.0.1 = RET.fld0.0.2.0 > _6.0;
RET.fld2 = _51;
place!(Field::<*mut i16>(Variant(_51, 0), 1)) = core::ptr::addr_of_mut!((*_25));
_30.2 = RET.fld5;
_30.4 = _42.0;
_21 = _3.0;
RET.fld0.0.4 = _3.4 >> RET.fld0.0.3;
_3.4 = _5 - _13.0.4;
_53 = Field::<(u8, i16, i64)>(Variant(_22, 2), 0).2 as i16;
_31 = !_13.0.1;
Call(_37 = core::intrinsics::bswap(RET.fld0.0.3), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
place!(Field::<(u128,)>(Variant(_51, 0), 2)) = _19;
_38.fld5 = _30.2 + _30.2;
_52.fld0 = core::ptr::addr_of!(_48);
_45 = core::ptr::addr_of!(place!(Field::<u128>(Variant(_22, 2), 1)));
_38.fld6 = RET.fld6;
_51 = Adt43::Variant1 { fld0: _45,fld1: _25,fld2: RET.fld0.0.3,fld3: 76_i8,fld4: RET.fld3 };
_47 = Field::<(u8, i16, i64)>(Variant(_22, 2), 0).0 as f32;
_3.2 = (_2, _3.0, _38.fld0.0.2.2);
_42 = Field::<(u8, i16, i64)>(Variant(_22, 2), 0);
place!(Field::<*const u128>(Variant(_51, 1), 0)) = _45;
_25 = core::ptr::addr_of_mut!((*_25));
_50 = _12.0.0;
_15.0 = RET.fld0.0.2.0 >> _10.0;
Goto(bb20)
}
bb20 = {
_4 = Adt51::Variant0 { fld0: _12 };
Goto(bb21)
}
bb21 = {
place!(Field::<*const u128>(Variant(_51, 1), 0)) = core::ptr::addr_of!(_17);
_3.2.1 = _50;
match (*_25) {
0 => bb18,
1 => bb22,
2 => bb23,
3 => bb24,
4 => bb25,
5 => bb26,
6 => bb27,
17012 => bb29,
_ => bb28
}
}
bb22 = {
RET.fld0.0.2.0 = !_10.0;
RET.fld6 = core::ptr::addr_of!(_24);
_3.4 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.4;
_19.0 = 92889009439415972731647845794838460594_u128 - 135768963974657867017486849348578856868_u128;
_14 = _12.0.2.2 + _3.2.2;
_10.1 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.0;
_12.0.2.2 = _6.2 - _9;
_13.0.2.1 = _13.0.0;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0)).0.2.1 = _12.0.2.1;
_3.0 = _13.0.2.1;
RET.fld0.0.1 = _3.1 ^ _8;
_7 = _13.0.2.2 >> _12.0.2.0;
_16.fld0 = [61_u8,115_u8,46_u8,120_u8,199_u8,97_u8,63_u8,19_u8];
_7 = (-4861181511454007071_i64) as isize;
_3.3 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.3 ^ RET.fld0.0.3;
_13.0.1 = _3.1;
SetDiscriminant(_4, 1);
RET.fld0.0 = _3;
match _13.0.3 {
0 => bb1,
4289580993 => bb4,
_ => bb3
}
}
bb23 = {
_5 = RET.fld0.0.4;
_29 = [_13.0.4,_3.4,RET.fld0.0.4,_5,_5];
_12.0.0 = RET.fld0.0.2.1;
_42.2 = _27.0 * _27.0;
RET.fld0.0.4 = _42.1 as u16;
SetDiscriminant(_4, 0);
_43 = _18;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0)).0.3 = _37;
_38.fld3 = [RET.fld1,RET.fld1,RET.fld1,RET.fld1,RET.fld1,RET.fld1];
_13.0.2.2 = !_9;
_32 = _18;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0)).0.2.0 = RET.fld0.0.2.0;
_12.0.3 = RET.fld0.0.3 | _37;
_15.1 = _12.0.0;
_21 = _3.0;
_30.1 = [_13.0.2.0,_3.2.0,_12.0.2.0,_3.2.0];
_25 = core::ptr::addr_of_mut!(_42.1);
_8 = _12.0.1;
_34 = _36;
_38.fld0.0.1 = !_8;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0)).0 = (_6.1, _3.1, _15, RET.fld0.0.3, _13.0.4);
_22 = Adt59::Variant2 { fld0: _42,fld1: _19.0,fld2: Move(_16) };
Call(place!(Field::<(u8, i16, i64)>(Variant(_22, 2), 0)).1 = core::intrinsics::bswap((*_25)), ReturnTo(bb12), UnwindUnreachable())
}
bb24 = {
_3.2.2 = _9 << (*_25);
_26 = [RET.fld0.0.3,_12.0.3];
_38.fld0.0.2 = (_13.0.2.0, _12.0.2.1, RET.fld0.0.2.2);
_20 = _30.3;
_10 = (_12.0.2.0, Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.0, _15.2);
SetDiscriminant(_4, 1);
_3.2.0 = !_15.0;
_6.0 = !_13.0.2.0;
_39 = !_7;
_38.fld0.0.1 = !_8;
place!(Field::<(u8, i16, i64)>(Variant(_22, 2), 0)).0 = !_42.0;
_51 = Adt43::Variant0 { fld0: _8,fld1: _25,fld2: _19,fld3: _24,fld4: _38.fld0.0.2.0 };
_6.0 = _15.0;
_48.0 = !Field::<(u128,)>(Variant(_51, 0), 2).0;
RET.fld0.0.2.0 = _15.0 - _12.0.2.0;
_38.fld0.0.1 = RET.fld0.0.2.0 > _6.0;
RET.fld2 = _51;
place!(Field::<*mut i16>(Variant(_51, 0), 1)) = core::ptr::addr_of_mut!((*_25));
_30.2 = RET.fld5;
_30.4 = _42.0;
_21 = _3.0;
RET.fld0.0.4 = _3.4 >> RET.fld0.0.3;
_3.4 = _5 - _13.0.4;
_53 = Field::<(u8, i16, i64)>(Variant(_22, 2), 0).2 as i16;
_31 = !_13.0.1;
Call(_37 = core::intrinsics::bswap(RET.fld0.0.3), ReturnTo(bb19), UnwindUnreachable())
}
bb25 = {
RET.fld0.0.2.0 = !_10.0;
RET.fld6 = core::ptr::addr_of!(_24);
_3.4 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.4;
_19.0 = 92889009439415972731647845794838460594_u128 - 135768963974657867017486849348578856868_u128;
_14 = _12.0.2.2 + _3.2.2;
_10.1 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.0;
_12.0.2.2 = _6.2 - _9;
_13.0.2.1 = _13.0.0;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0)).0.2.1 = _12.0.2.1;
_3.0 = _13.0.2.1;
RET.fld0.0.1 = _3.1 ^ _8;
_7 = _13.0.2.2 >> _12.0.2.0;
_16.fld0 = [61_u8,115_u8,46_u8,120_u8,199_u8,97_u8,63_u8,19_u8];
_7 = (-4861181511454007071_i64) as isize;
_3.3 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.3 ^ RET.fld0.0.3;
_13.0.1 = _3.1;
SetDiscriminant(_4, 1);
RET.fld0.0 = _3;
match _13.0.3 {
0 => bb1,
4289580993 => bb4,
_ => bb3
}
}
bb26 = {
_35 = !_23;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0)).0.2 = RET.fld0.0.2;
_13.0 = (_15.1, Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.1, _15, Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.3, RET.fld0.0.4);
RET.fld0.0.2.0 = _15.0;
_4 = Adt51::Variant1 { fld0: _30.1 };
Goto(bb8)
}
bb27 = {
_15.1 = _3.2.1;
_3.4 = 140758104455739344090251525528035437244_u128 as u16;
_6 = (_2, _12.0.0, _14);
_14 = _3.1 as isize;
_12 = (_13.0,);
_13.0.2.2 = -_6.2;
Goto(bb2)
}
bb28 = {
RET.fld0.0.2.0 = !_10.0;
RET.fld6 = core::ptr::addr_of!(_24);
_3.4 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.4;
_19.0 = 92889009439415972731647845794838460594_u128 - 135768963974657867017486849348578856868_u128;
_14 = _12.0.2.2 + _3.2.2;
_10.1 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.0;
_12.0.2.2 = _6.2 - _9;
_13.0.2.1 = _13.0.0;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0)).0.2.1 = _12.0.2.1;
_3.0 = _13.0.2.1;
RET.fld0.0.1 = _3.1 ^ _8;
_7 = _13.0.2.2 >> _12.0.2.0;
_16.fld0 = [61_u8,115_u8,46_u8,120_u8,199_u8,97_u8,63_u8,19_u8];
_7 = (-4861181511454007071_i64) as isize;
_3.3 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.3 ^ RET.fld0.0.3;
_13.0.1 = _3.1;
SetDiscriminant(_4, 1);
RET.fld0.0 = _3;
match _13.0.3 {
0 => bb1,
4289580993 => bb4,
_ => bb3
}
}
bb29 = {
place!(Field::<f64>(Variant(RET.fld2, 0), 3)) = -_24;
_55 = -_47;
_51 = Adt43::Variant0 { fld0: Field::<bool>(Variant(RET.fld2, 0), 0),fld1: Field::<*mut i16>(Variant(RET.fld2, 0), 1),fld2: _48,fld3: Field::<f64>(Variant(RET.fld2, 0), 3),fld4: Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.2.0 };
_36 = [Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.3,Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.3,_37,_37];
RET.fld0.0.0 = _3.2.1;
_11 = Adt51::Variant1 { fld0: _30.1 };
_41 = _51;
_42.2 = RET.fld0.0.2.0 as i64;
_13.0.2.0 = Field::<usize>(Variant(_41, 0), 4) | RET.fld0.0.2.0;
_17 = !Field::<(u128,)>(Variant(_41, 0), 2).0;
_3.4 = _12.0.3 as u16;
_38.fld3 = [RET.fld1,RET.fld1,RET.fld1,RET.fld1,RET.fld1,RET.fld1];
_26 = [Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.3,RET.fld0.0.3];
place!(Field::<(u8, i16, i64)>(Variant(_22, 2), 0)).1 = _42.2 as i16;
_38.fld4 = Adt48::Variant1 { fld0: _52.fld0,fld1: _3.0 };
_6 = _10;
_6.2 = _5 as isize;
_10 = _3.2;
_36 = [Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.3,_12.0.3,Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.3,_37];
RET.fld2 = Adt43::Variant0 { fld0: _38.fld0.0.1,fld1: Field::<*mut i16>(Variant(_51, 0), 1),fld2: Field::<(u128,)>(Variant(_41, 0), 2),fld3: Field::<f64>(Variant(_51, 0), 3),fld4: _13.0.2.0 };
_3.0 = Field::<char>(Variant(_38.fld4, 1), 1);
SetDiscriminant(RET.fld2, 1);
Call(_38.fld0.0.4 = fn19(RET.fld0.0.2.2, Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.2), ReturnTo(bb30), UnwindUnreachable())
}
bb30 = {
_31 = _38.fld0.0.1;
place!(Field::<(u8, i16, i64)>(Variant(_22, 2), 0)).2 = _42.2 << Field::<usize>(Variant(_41, 0), 4);
place!(Field::<(u8, i16, i64)>(Variant(_22, 2), 0)).0 = _30.6 - _42.0;
_32 = _38.fld3;
_32 = [RET.fld1,RET.fld1,RET.fld1,RET.fld1,RET.fld1,RET.fld1];
RET.fld2 = Adt43::Variant0 { fld0: Field::<bool>(Variant(_51, 0), 0),fld1: _25,fld2: Field::<(u128,)>(Variant(_41, 0), 2),fld3: Field::<f64>(Variant(_51, 0), 3),fld4: RET.fld0.0.2.0 };
_56 = [_37,Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.3,_12.0.3,_37];
match (*_25) {
17012 => bb32,
_ => bb31
}
}
bb31 = {
RET.fld0.0 = _3;
RET.fld5 = RET.fld0.0.4 as i32;
_26 = [RET.fld0.0.3,_3.3];
_7 = 204_u8 as isize;
_13.0.2.2 = _6.2 & _15.2;
RET.fld0.0.3 = _3.3 / _12.0.3;
_12.0.3 = RET.fld0.0.3 % _13.0.3;
_12.0.1 = _13.0.1;
_21 = _3.0;
_9 = _14;
_2 = 224_u8 as usize;
_12.0.3 = _3.3 | RET.fld0.0.3;
_16.fld0 = [43_u8,38_u8,177_u8,21_u8,211_u8,133_u8,83_u8,246_u8];
_28 = RET.fld0.0.2.2;
_12.0.0 = _6.1;
RET.fld0.0.2.0 = !_12.0.2.0;
RET.fld0.0.2.0 = 246_u8 as usize;
_4 = Adt51::Variant0 { fld0: _12 };
RET.fld0.0.3 = _12.0.3 >> _1;
RET.fld0.0.2.1 = _3.2.1;
_24 = _28 as f64;
Goto(bb5)
}
bb32 = {
_18 = [RET.fld1,RET.fld1,RET.fld1,RET.fld1,RET.fld1,RET.fld1];
place!(Field::<usize>(Variant(_51, 0), 4)) = _6.0 << _38.fld0.0.2.0;
_38.fld2 = _41;
place!(Field::<*mut i16>(Variant(RET.fld2, 0), 1)) = Field::<*mut i16>(Variant(_41, 0), 1);
_13.0.3 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.3;
_15.1 = RET.fld0.0.2.1;
_9 = _28 - _30.3;
_18 = RET.fld3;
_38.fld6 = core::ptr::addr_of!(place!(Field::<f64>(Variant(_51, 0), 3)));
_41 = Adt43::Variant0 { fld0: _8,fld1: Field::<*mut i16>(Variant(_51, 0), 1),fld2: Field::<(u128,)>(Variant(_38.fld2, 0), 2),fld3: _24,fld4: RET.fld0.0.2.0 };
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0)).0.1 = !_13.0.1;
_54 = Field::<usize>(Variant(RET.fld2, 0), 4);
match (*_25) {
0 => bb33,
1 => bb34,
2 => bb35,
17012 => bb37,
_ => bb36
}
}
bb33 = {
RET.fld0.0.2.0 = !_10.0;
RET.fld6 = core::ptr::addr_of!(_24);
_3.4 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.4;
_19.0 = 92889009439415972731647845794838460594_u128 - 135768963974657867017486849348578856868_u128;
_14 = _12.0.2.2 + _3.2.2;
_10.1 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.0;
_12.0.2.2 = _6.2 - _9;
_13.0.2.1 = _13.0.0;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0)).0.2.1 = _12.0.2.1;
_3.0 = _13.0.2.1;
RET.fld0.0.1 = _3.1 ^ _8;
_7 = _13.0.2.2 >> _12.0.2.0;
_16.fld0 = [61_u8,115_u8,46_u8,120_u8,199_u8,97_u8,63_u8,19_u8];
_7 = (-4861181511454007071_i64) as isize;
_3.3 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.3 ^ RET.fld0.0.3;
_13.0.1 = _3.1;
SetDiscriminant(_4, 1);
RET.fld0.0 = _3;
match _13.0.3 {
0 => bb1,
4289580993 => bb4,
_ => bb3
}
}
bb34 = {
_31 = _38.fld0.0.1;
place!(Field::<(u8, i16, i64)>(Variant(_22, 2), 0)).2 = _42.2 << Field::<usize>(Variant(_41, 0), 4);
place!(Field::<(u8, i16, i64)>(Variant(_22, 2), 0)).0 = _30.6 - _42.0;
_32 = _38.fld3;
_32 = [RET.fld1,RET.fld1,RET.fld1,RET.fld1,RET.fld1,RET.fld1];
RET.fld2 = Adt43::Variant0 { fld0: Field::<bool>(Variant(_51, 0), 0),fld1: _25,fld2: Field::<(u128,)>(Variant(_41, 0), 2),fld3: Field::<f64>(Variant(_51, 0), 3),fld4: RET.fld0.0.2.0 };
_56 = [_37,Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.3,_12.0.3,_37];
match (*_25) {
17012 => bb32,
_ => bb31
}
}
bb35 = {
_3.2 = (_12.0.2.0, RET.fld0.0.2.1, _10.2);
RET.fld0.0.2 = (_6.0, Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.0, _30.3);
_12.0.2.1 = _13.0.2.1;
place!(Field::<(u8, i16, i64)>(Variant(_22, 2), 0)) = (_42.0, _42.1, _42.2);
_6.2 = _28;
place!(Field::<Adt49>(Variant(_22, 2), 2)).fld0 = [Field::<(u8, i16, i64)>(Variant(_22, 2), 0).0,Field::<(u8, i16, i64)>(Variant(_22, 2), 0).0,_30.6,_30.4,_42.0,_30.4,_42.0,_42.0];
match (*_25) {
0 => bb10,
1 => bb13,
2 => bb14,
3 => bb15,
4 => bb16,
17012 => bb18,
_ => bb17
}
}
bb36 = {
RET.fld0.0 = _3;
RET.fld5 = RET.fld0.0.4 as i32;
_26 = [RET.fld0.0.3,_3.3];
_7 = 204_u8 as isize;
_13.0.2.2 = _6.2 & _15.2;
RET.fld0.0.3 = _3.3 / _12.0.3;
_12.0.3 = RET.fld0.0.3 % _13.0.3;
_12.0.1 = _13.0.1;
_21 = _3.0;
_9 = _14;
_2 = 224_u8 as usize;
_12.0.3 = _3.3 | RET.fld0.0.3;
_16.fld0 = [43_u8,38_u8,177_u8,21_u8,211_u8,133_u8,83_u8,246_u8];
_28 = RET.fld0.0.2.2;
_12.0.0 = _6.1;
RET.fld0.0.2.0 = !_12.0.2.0;
RET.fld0.0.2.0 = 246_u8 as usize;
_4 = Adt51::Variant0 { fld0: _12 };
RET.fld0.0.3 = _12.0.3 >> _1;
RET.fld0.0.2.1 = _3.2.1;
_24 = _28 as f64;
Goto(bb5)
}
bb37 = {
_30.6 = !Field::<(u8, i16, i64)>(Variant(_22, 2), 0).0;
_50 = Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.0;
_49 = [Field::<(u8, i16, i64)>(Variant(_22, 2), 0).0,_30.6,Field::<(u8, i16, i64)>(Variant(_22, 2), 0).0,_30.6,Field::<(u8, i16, i64)>(Variant(_22, 2), 0).0,Field::<(u8, i16, i64)>(Variant(_22, 2), 0).0,_42.0,_42.0];
place!(Field::<bool>(Variant(_51, 0), 0)) = _3.2.2 >= _28;
_46 = Adt43::Variant1 { fld0: _45,fld1: Field::<*mut i16>(Variant(_38.fld2, 0), 1),fld2: _12.0.3,fld3: 16_i8,fld4: RET.fld3 };
_13.0.1 = _3.1 ^ Field::<bool>(Variant(_38.fld2, 0), 0);
SetDiscriminant(_11, 1);
_51 = _38.fld2;
_29 = [_3.4,_3.4,_5,RET.fld0.0.4,_13.0.4];
place!(Field::<i8>(Variant(_46, 1), 3)) = 19_i8;
_13 = _12;
_35 = !_23;
_15.0 = RET.fld0.0.2.0 + _12.0.2.0;
_38.fld1 = Field::<i8>(Variant(_46, 1), 3) as u64;
_39 = !_15.2;
_30.5 = &_13.0.2.2;
RET.fld4 = Move(_38.fld4);
place!(Field::<bool>(Variant(_51, 0), 0)) = _13.0.1;
_64 = Adt45::Variant1 { fld0: _52.fld0,fld1: _3.4 };
_51 = Adt43::Variant0 { fld0: Field::<bool>(Variant(RET.fld2, 0), 0),fld1: Field::<*mut i16>(Variant(_38.fld2, 0), 1),fld2: Field::<(u128,)>(Variant(_41, 0), 2),fld3: Field::<f64>(Variant(_38.fld2, 0), 3),fld4: _38.fld0.0.2.0 };
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0)) = (RET.fld0.0,);
_13.0.1 = Field::<u16>(Variant(_64, 1), 1) >= _38.fld0.0.4;
RET.fld0.0.2 = _10;
place!(Field::<bool>(Variant(_38.fld2, 0), 0)) = !RET.fld0.0.1;
RET.fld2 = Adt43::Variant0 { fld0: _8,fld1: Field::<*mut i16>(Variant(_38.fld2, 0), 1),fld2: Field::<(u128,)>(Variant(_41, 0), 2),fld3: Field::<f64>(Variant(_41, 0), 3),fld4: Field::<usize>(Variant(_38.fld2, 0), 4) };
_38.fld0.0.3 = !Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0).0.3;
place!(Field::<usize>(Variant(RET.fld2, 0), 4)) = _6.0;
_7 = _54 as isize;
_5 = RET.fld0.0.4;
Goto(bb38)
}
bb38 = {
Call(_66 = dump_var(16_usize, 36_usize, Move(_36), 48_usize, Move(_48), 42_usize, Move(_42), 32_usize, Move(_32)), ReturnTo(bb39), UnwindUnreachable())
}
bb39 = {
Call(_66 = dump_var(16_usize, 1_usize, Move(_1), 43_usize, Move(_43), 56_usize, Move(_56), 49_usize, Move(_49)), ReturnTo(bb40), UnwindUnreachable())
}
bb40 = {
Call(_66 = dump_var(16_usize, 7_usize, Move(_7), 21_usize, Move(_21), 9_usize, Move(_9), 8_usize, Move(_8)), ReturnTo(bb41), UnwindUnreachable())
}
bb41 = {
Call(_66 = dump_var(16_usize, 14_usize, Move(_14), 20_usize, Move(_20), 50_usize, Move(_50), 35_usize, Move(_35)), ReturnTo(bb42), UnwindUnreachable())
}
bb42 = {
Call(_66 = dump_var(16_usize, 37_usize, Move(_37), 39_usize, Move(_39), 23_usize, Move(_23), 67_usize, _67), ReturnTo(bb43), UnwindUnreachable())
}
bb43 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn17(mut _1: (usize, char, isize),mut _2: isize,mut _3: (usize, char, isize),mut _4: Adt51,mut _5: isize,mut _6: ((char, bool, (usize, char, isize), u32, u16),),mut _7: u16,mut _8: isize) -> isize {
mir! {
type RET = isize;
let _9: f64;
let _10: char;
let _11: ();
let _12: ();
{
_7 = !_6.0.4;
_6.0.2.0 = 93579158777105967959153436575663271721_u128 as usize;
_6.0.2.2 = _2 | _2;
_6.0.3 = 358181461_u32 << _8;
_6.0.2.0 = 115_u8 as usize;
_1.2 = (-88_i8) as isize;
_6.0.2.1 = _3.1;
_1.1 = _6.0.0;
_6.0.2.0 = _1.0;
SetDiscriminant(_4, 1);
_1.1 = _6.0.2.1;
RET = -_3.2;
place!(Field::<[usize; 4]>(Variant(_4, 1), 0)) = [_3.0,_3.0,_3.0,_3.0];
_10 = _3.1;
_2 = _8 * _3.2;
_1.1 = _10;
_4 = Adt51::Variant0 { fld0: _6 };
RET = -_6.0.2.2;
SetDiscriminant(_4, 0);
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0)).0.3 = _6.0.3;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0)).0.4 = !_7;
place!(Field::<((char, bool, (usize, char, isize), u32, u16),)>(Variant(_4, 0), 0)).0.2 = _1;
Goto(bb1)
}
bb1 = {
Call(_11 = dump_var(17_usize, 8_usize, Move(_8), 10_usize, Move(_10), 2_usize, Move(_2), 5_usize, Move(_5)), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn18(mut _1: (usize, char, isize),mut _2: (usize, char, isize),mut _3: (usize, char, isize),mut _4: isize,mut _5: isize,mut _6: isize,mut _7: isize,mut _8: usize) -> u8 {
mir! {
type RET = u8;
let _9: [bool; 4];
let _10: char;
let _11: [u32; 4];
let _12: i128;
let _13: isize;
let _14: [u8; 8];
let _15: i32;
let _16: (u8, i16, i64);
let _17: isize;
let _18: *const &'static isize;
let _19: u8;
let _20: f64;
let _21: (i64, [bool; 4]);
let _22: i128;
let _23: f64;
let _24: isize;
let _25: u16;
let _26: i8;
let _27: ();
let _28: ();
{
_4 = -_1.2;
_2 = (_3.0, _3.1, _5);
_5 = _2.2 >> _1.2;
_1.1 = _3.1;
RET = 153_u8 - 195_u8;
_3 = _2;
_2.0 = _8;
_2.0 = 22677_u16 as usize;
Goto(bb1)
}
bb1 = {
_5 = _4;
_3.2 = 49075_u16 as isize;
_7 = 9297_i16 as isize;
RET = 42_u8;
_8 = _1.0 | _3.0;
_3.0 = _1.0;
_7 = _6;
_8 = _3.0 - _3.0;
_2.0 = _1.0;
_8 = _2.2 as usize;
_1.0 = _3.0;
_1.0 = _3.0 << _2.0;
_8 = _1.0 * _2.0;
_6 = 578130797_i32 as isize;
match RET {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
42 => bb8,
_ => bb7
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_2 = (_3.0, _1.1, _1.2);
_3.1 = _2.1;
_3 = (_2.0, _2.1, _7);
_6 = !_1.2;
_9 = [true,false,true,true];
_3.2 = !_6;
RET = 29_u8 | 108_u8;
_8 = _2.0;
_10 = _2.1;
RET = 185_u8 + 110_u8;
_1.1 = _3.1;
_4 = true as isize;
_4 = (-9098153702508175421_i64) as isize;
_12 = 58923608123016267206413472412915493398_i128;
_2.1 = _3.1;
RET = 3843666054_u32 as u8;
Goto(bb9)
}
bb9 = {
_2.0 = _1.0;
_11 = [4109540864_u32,3123910940_u32,434569844_u32,1479163576_u32];
_3.1 = _1.1;
Goto(bb10)
}
bb10 = {
_2.1 = _3.1;
_1.0 = !_2.0;
_11 = [1865338193_u32,2684639691_u32,685484654_u32,2862500022_u32];
_12 = (-5202416920111802274_i64) as i128;
_9 = [true,true,false,false];
RET = 13_u8;
_2.1 = _10;
_1 = (_3.0, _10, _7);
_1.0 = !_3.0;
RET = 1_u8 * 4_u8;
_16.2 = (-6814944863797483418_i64);
_6 = (-9_i8) as isize;
_12 = (-131096693804194631185288788420682351762_i128) - (-119874322888359226248382900023140365390_i128);
_10 = _1.1;
_16.1 = 10945_i16;
_15 = !1389744812_i32;
_2.1 = _1.1;
_6 = _3.2;
_9 = [false,true,false,false];
Goto(bb11)
}
bb11 = {
_4 = !_6;
_1.0 = 34_i8 as usize;
_7 = _4 * _2.2;
_10 = _3.1;
_13 = (-104_i8) as isize;
_19 = RET;
_4 = !_7;
_12 = (-17595814143745581281865977844248348626_i128) << _4;
_1 = (_3.0, _10, _2.2);
_8 = 310859402374489495936321581495248532181_u128 as usize;
_3.2 = _5;
_4 = _7;
_17 = (-36_i8) as isize;
_9 = [false,false,false,true];
_2 = (_1.0, _1.1, _3.2);
_21.1 = [false,false,false,false];
_22 = -_12;
_21.0 = _16.2;
_2 = (_1.0, _3.1, _7);
_2.2 = _4 * _1.2;
_20 = _16.2 as f64;
_3.0 = _1.0;
_16.2 = _5 as i64;
match _16.1 {
0 => bb2,
1 => bb12,
2 => bb13,
3 => bb14,
4 => bb15,
5 => bb16,
6 => bb17,
10945 => bb19,
_ => bb18
}
}
bb12 = {
_2.1 = _3.1;
_1.0 = !_2.0;
_11 = [1865338193_u32,2684639691_u32,685484654_u32,2862500022_u32];
_12 = (-5202416920111802274_i64) as i128;
_9 = [true,true,false,false];
RET = 13_u8;
_2.1 = _10;
_1 = (_3.0, _10, _7);
_1.0 = !_3.0;
RET = 1_u8 * 4_u8;
_16.2 = (-6814944863797483418_i64);
_6 = (-9_i8) as isize;
_12 = (-131096693804194631185288788420682351762_i128) - (-119874322888359226248382900023140365390_i128);
_10 = _1.1;
_16.1 = 10945_i16;
_15 = !1389744812_i32;
_2.1 = _1.1;
_6 = _3.2;
_9 = [false,true,false,false];
Goto(bb11)
}
bb13 = {
Return()
}
bb14 = {
_2 = (_3.0, _1.1, _1.2);
_3.1 = _2.1;
_3 = (_2.0, _2.1, _7);
_6 = !_1.2;
_9 = [true,false,true,true];
_3.2 = !_6;
RET = 29_u8 | 108_u8;
_8 = _2.0;
_10 = _2.1;
RET = 185_u8 + 110_u8;
_1.1 = _3.1;
_4 = true as isize;
_4 = (-9098153702508175421_i64) as isize;
_12 = 58923608123016267206413472412915493398_i128;
_2.1 = _3.1;
RET = 3843666054_u32 as u8;
Goto(bb9)
}
bb15 = {
_5 = _4;
_3.2 = 49075_u16 as isize;
_7 = 9297_i16 as isize;
RET = 42_u8;
_8 = _1.0 | _3.0;
_3.0 = _1.0;
_7 = _6;
_8 = _3.0 - _3.0;
_2.0 = _1.0;
_8 = _2.2 as usize;
_1.0 = _3.0;
_1.0 = _3.0 << _2.0;
_8 = _1.0 * _2.0;
_6 = 578130797_i32 as isize;
match RET {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
42 => bb8,
_ => bb7
}
}
bb16 = {
Return()
}
bb17 = {
Return()
}
bb18 = {
Return()
}
bb19 = {
_14 = [RET,_19,RET,_19,RET,_19,_19,RET];
_6 = _4 + _7;
_20 = _2.0 as f64;
_17 = _1.0 as isize;
_7 = _1.1 as isize;
_16.0 = _16.2 as u8;
_1.0 = _3.0;
_16.1 = false as i16;
_5 = _6 * _3.2;
_1.1 = _2.1;
_2.1 = _10;
_16 = (_19, (-25117_i16), _21.0);
_16 = (RET, 22445_i16, _21.0);
RET = !_19;
_1.2 = !_6;
_14 = [RET,RET,_16.0,_16.0,_19,RET,_16.0,_16.0];
_6 = 3933382149_u32 as isize;
_26 = (-18_i8);
_26 = 38_i8;
_23 = RET as f64;
Goto(bb20)
}
bb20 = {
Call(_27 = dump_var(18_usize, 1_usize, Move(_1), 9_usize, Move(_9), 10_usize, Move(_10), 4_usize, Move(_4)), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
Call(_27 = dump_var(18_usize, 11_usize, Move(_11), 8_usize, Move(_8), 5_usize, Move(_5), 2_usize, Move(_2)), ReturnTo(bb22), UnwindUnreachable())
}
bb22 = {
Call(_27 = dump_var(18_usize, 16_usize, Move(_16), 13_usize, Move(_13), 28_usize, _28, 28_usize, _28), ReturnTo(bb23), UnwindUnreachable())
}
bb23 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn19(mut _1: isize,mut _2: (usize, char, isize)) -> u16 {
mir! {
type RET = u16;
let _3: [usize; 4];
let _4: usize;
let _5: [u8; 8];
let _6: bool;
let _7: u128;
let _8: *const u128;
let _9: char;
let _10: char;
let _11: Adt54;
let _12: i32;
let _13: (char, bool, (usize, char, isize), u32, u16);
let _14: (f32, i32, isize, char);
let _15: [u16; 5];
let _16: f32;
let _17: (i64, [bool; 4]);
let _18: usize;
let _19: usize;
let _20: isize;
let _21: Adt49;
let _22: Adt48;
let _23: Adt53;
let _24: [bool; 4];
let _25: ([u8; 8],);
let _26: f32;
let _27: (f32, f32, i8);
let _28: Adt49;
let _29: ();
let _30: ();
{
_2.2 = !_1;
_2 = (0_usize, '\u{abe9e}', _1);
_1 = _2.2;
_5 = [131_u8,238_u8,232_u8,17_u8,185_u8,171_u8,213_u8,128_u8];
_2.2 = !_1;
RET = 36724_u16;
_2.2 = (-2008276355_i32) as isize;
_3 = [_2.0,_2.0,_2.0,_2.0];
_2 = (17675453877910926011_usize, '\u{10741e}', _1);
_3 = [_2.0,_2.0,_2.0,_2.0];
_5 = [233_u8,226_u8,111_u8,196_u8,129_u8,127_u8,32_u8,203_u8];
Goto(bb1)
}
bb1 = {
_2.1 = '\u{dc598}';
_2.1 = '\u{39c48}';
_2.0 = !3_usize;
match RET {
0 => bb2,
1 => bb3,
36724 => bb5,
_ => bb4
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
_6 = !true;
_2 = (16770086038120750277_usize, '\u{4e3c6}', _1);
_2 = (2_usize, '\u{49cdd}', _1);
RET = 13278_u16;
RET = !6640_u16;
_2.1 = '\u{fe8e9}';
_1 = _2.2;
_2.2 = _1;
_6 = false;
_2.0 = 47929895128691069893848225386972099292_i128 as usize;
_5 = [232_u8,53_u8,33_u8,148_u8,170_u8,226_u8,252_u8,154_u8];
_3 = [_2.0,_2.0,_2.0,_2.0];
_1 = _2.2;
_2.0 = _2.1 as usize;
_1 = !_2.2;
_4 = _2.0;
Call(_7 = core::intrinsics::bswap(47723970607159454449103632248313041942_u128), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
_6 = false ^ true;
_6 = true;
RET = 47035_u16;
Call(RET = core::intrinsics::bswap(24113_u16), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
_8 = core::ptr::addr_of!(_7);
_2.0 = _4;
_9 = _2.1;
Goto(bb8)
}
bb8 = {
_4 = !_2.0;
_9 = _2.1;
_7 = 277940998703992051776699200862732694811_u128;
_2 = (_4, _9, _1);
_2.0 = (-62_i8) as usize;
_10 = _2.1;
_2.1 = _10;
Goto(bb9)
}
bb9 = {
_2.2 = _1 & _1;
_5 = [161_u8,251_u8,66_u8,192_u8,29_u8,228_u8,152_u8,135_u8];
_11.fld0 = (*_8) as f64;
_11.fld0 = (-155030276583103082987812616134398954587_i128) as f64;
_13.2.2 = _2.2 & _1;
_13.2.1 = _10;
_13.4 = RET;
_14.1 = !(-1811090854_i32);
_13.2.0 = _4 + _4;
_14.0 = _2.0 as f32;
RET = _13.4 * _13.4;
_13.4 = RET - RET;
_15 = [RET,RET,RET,_13.4,RET];
_11.fld2 = (-9042523857685317380_i64);
_2.0 = _13.2.0 * _13.2.0;
_13.2.1 = _2.1;
Goto(bb10)
}
bb10 = {
_17.1 = [_6,_6,_6,_6];
_18 = 33890617278171610798875418928922386792_i128 as usize;
_13.0 = _9;
_6 = false;
_13.2.2 = !_2.2;
_13 = (_9, _6, _2, 2039101817_u32, RET);
_13.1 = _1 >= _1;
_13.0 = _2.1;
_14.2 = _11.fld2 as isize;
_18 = _1 as usize;
_16 = _14.0 - _14.0;
_2.0 = _1 as usize;
_14.2 = _14.1 as isize;
_7 = !9900640806437923739133071753002161001_u128;
match _13.3 {
0 => bb6,
2039101817 => bb11,
_ => bb7
}
}
bb11 = {
_19 = _18 << _2.2;
_7 = 260546853751633428372957003029992152903_u128 >> _13.3;
_14.3 = _2.1;
_7 = 110_u8 as u128;
_14.0 = -_16;
_21.fld0 = _5;
_12 = !_14.1;
_16 = -_14.0;
_13.1 = _6;
_13.2.1 = _9;
_13.1 = _6 & _6;
Call(_13.4 = core::intrinsics::transmute(RET), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
_6 = !_13.1;
_10 = _14.3;
_24 = [_6,_6,_13.1,_6];
_15 = [_13.4,_13.4,RET,RET,_13.4];
_1 = _13.2.2 ^ _2.2;
RET = _13.4 + _13.4;
_13.4 = RET - RET;
_4 = _19 ^ _13.2.0;
_3 = [_19,_4,_19,_18];
_14.0 = -_16;
_27.2 = !7_i8;
_14.3 = _10;
_13.2 = (_2.0, _2.1, _1);
_23 = Adt53::Variant1 { fld0: Move(_21),fld1: 202_u8 };
_17 = (_11.fld2, _24);
_15 = [RET,_13.4,_13.4,RET,RET];
_2.2 = _13.2.2 & _13.2.2;
Goto(bb13)
}
bb13 = {
_14 = (_16, _12, _2.2, _13.2.1);
_27.2 = -(-19_i8);
RET = _13.4 ^ _13.4;
_27.2 = 5_i8 * (-88_i8);
_25 = (_5,);
place!(Field::<Adt49>(Variant(_23, 1), 0)).fld0 = _5;
RET = _13.4 * _13.4;
_25 = (Field::<Adt49>(Variant(_23, 1), 0).fld0,);
_25 = (_5,);
_14.0 = RET as f32;
_12 = _14.1 * _14.1;
_17.0 = _11.fld2;
_27.2 = 124_i8 + 13_i8;
_13.0 = _9;
_28 = Adt49 { fld0: _25.0 };
_7 = _27.2 as u128;
_13.1 = !_6;
_13 = (_10, _6, _2, 379587756_u32, RET);
_27.0 = _14.0 * _14.0;
_21.fld0 = [155_u8,145_u8,154_u8,112_u8,108_u8,247_u8,243_u8,101_u8];
_16 = _14.0 - _27.0;
_13.3 = _27.2 as u32;
_2.0 = !_19;
_27 = (_16, _16, 104_i8);
_17.0 = _11.fld2;
_7 = 18779538507222318803889298973317990791_u128 | 335831668749484751411131496346777896536_u128;
Goto(bb14)
}
bb14 = {
Call(_29 = dump_var(19_usize, 12_usize, Move(_12), 5_usize, Move(_5), 1_usize, Move(_1), 7_usize, Move(_7)), ReturnTo(bb15), UnwindUnreachable())
}
bb15 = {
Call(_29 = dump_var(19_usize, 4_usize, Move(_4), 2_usize, Move(_2), 3_usize, Move(_3), 9_usize, Move(_9)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Return()
}

}
}
pub fn main() {
                fn0(std::hint::black_box(20558915892624491464539347573930379372_i128), std::hint::black_box(3_usize));
                
            }
#[derive(Debug,Copy,Clone)]
pub enum Adt43 {
Variant0{
fld0: bool,
fld1: *mut i16,
fld2: (u128,),
fld3: f64,
fld4: usize,

},
Variant1{
fld0: *const u128,
fld1: *mut i16,
fld2: u32,
fld3: i8,
fld4: [u64; 6],

}}
#[derive(Debug)]
pub struct Adt44 {
fld0: *const (u128,),
}
#[derive(Debug)]
pub enum Adt45 {
Variant0{
fld0: char,

},
Variant1{
fld0: *const (u128,),
fld1: u16,

},
Variant2{
fld0: [i16; 5],
fld1: (i64, [bool; 4]),
fld2: isize,
fld3: [bool; 4],
fld4: [i8; 7],
fld5: *mut i16,
fld6: u128,
fld7: [usize; 4],

}}
#[derive(Debug)]
pub enum Adt46 {
Variant0{
fld0: i128,
fld1: ([u8; 8],),
fld2: (char, bool, (usize, char, isize), u32, u16),
fld3: [bool; 4],

},
Variant1{
fld0: i128,
fld1: (i64, [bool; 4]),
fld2: isize,
fld3: u32,

}}
#[derive(Debug)]
pub struct Adt47 {
fld0: Adt45,
fld1: u64,
fld2: [u16; 5],
}
#[derive(Debug)]
pub enum Adt48 {
Variant0{
fld0: *mut [i8; 7],
fld1: [u8; 8],
fld2: Adt45,
fld3: ([u8; 8],),
fld4: usize,

},
Variant1{
fld0: *const (u128,),
fld1: char,

}}
#[derive(Debug)]
pub struct Adt49 {
fld0: [u8; 8],
}
#[derive(Debug)]
pub enum Adt50 {
Variant0{
fld0: bool,
fld1: [u32; 2],
fld2: [u32; 4],
fld3: (i64, [bool; 4]),
fld4: *const (u128,),
fld5: i32,

},
Variant1{
fld0: bool,
fld1: Adt48,
fld2: ((char, bool, (usize, char, isize), u32, u16),),

},
Variant2{
fld0: [u64; 6],

}}
#[derive(Debug)]
pub enum Adt51 {
Variant0{
fld0: ((char, bool, (usize, char, isize), u32, u16),),

},
Variant1{
fld0: [usize; 4],

}}
#[derive(Debug)]
pub enum Adt52 {
Variant0{
fld0: Adt47,
fld1: i64,
fld2: i32,

},
Variant1{
fld0: *mut i16,
fld1: i64,
fld2: [i8; 7],

},
Variant2{
fld0: *const u128,
fld1: ((char, bool, (usize, char, isize), u32, u16),),
fld2: [i8; 7],
fld3: Adt46,
fld4: (u128,),
fld5: i32,
fld6: u128,
fld7: [u32; 2],

}}
#[derive(Debug)]
pub enum Adt53 {
Variant0{
fld0: *mut i16,
fld1: [i8; 7],
fld2: *const u128,
fld3: [u32; 2],
fld4: [u64; 6],
fld5: Adt49,

},
Variant1{
fld0: Adt49,
fld1: u8,

},
Variant2{
fld0: u64,
fld1: [usize; 4],
fld2: Adt44,
fld3: (usize, char, isize),
fld4: Adt47,
fld5: Adt50,
fld6: Adt51,
fld7: [bool; 4],

}}
#[derive(Debug,Copy,Clone)]
pub struct Adt54 {
fld0: f64,
fld1: Adt43,
fld2: i64,
}
#[derive(Debug)]
pub struct Adt55 {
fld0: ((char, bool, (usize, char, isize), u32, u16),),
fld1: u64,
fld2: Adt43,
fld3: [u64; 6],
fld4: Adt48,
fld5: i32,
fld6: *const f64,
}
#[derive(Debug)]
pub enum Adt56 {
Variant0{
fld0: Adt49,
fld1: *mut i16,

},
Variant1{
fld0: bool,
fld1: *const (u128,),
fld2: Adt50,
fld3: [u16; 5],
fld4: i16,
fld5: Adt53,
fld6: [u64; 6],

},
Variant2{
fld0: ((char, bool, (usize, char, isize), u32, u16),),
fld1: char,
fld2: *const u128,

},
Variant3{
fld0: u128,
fld1: f64,

}}
#[derive(Debug)]
pub enum Adt57 {
Variant0{
fld0: Adt55,
fld1: [u16; 5],
fld2: u128,
fld3: Adt45,
fld4: Adt49,

},
Variant1{
fld0: Adt47,
fld1: *const u128,
fld2: u64,
fld3: Adt43,
fld4: Adt46,
fld5: i32,
fld6: f32,
fld7: [bool; 4],

}}
#[derive(Debug)]
pub struct Adt58 {
fld0: Adt52,
fld1: u16,
fld2: isize,
fld3: i8,
fld4: [bool; 4],
fld5: *mut [i8; 7],
fld6: Adt55,
}
#[derive(Debug)]
pub enum Adt59 {
Variant0{
fld0: Adt58,
fld1: Adt55,
fld2: Adt45,
fld3: *const f64,
fld4: u32,
fld5: [bool; 4],

},
Variant1{
fld0: u32,
fld1: [i16; 5],

},
Variant2{
fld0: (u8, i16, i64),
fld1: u128,
fld2: Adt49,

}}

