#![recursion_limit = "1024"]
    #![feature(custom_mir, core_intrinsics, const_hash)]
    #![allow(unused_parens, unused_assignments, overflowing_literals)]
    extern crate core;
    use core::intrinsics::mir::*;

    use std::fmt::Debug;

    #[inline(never)]
    fn dump_var(
        f: usize,
        var0: usize, val0: impl Debug,
        var1: usize, val1: impl Debug,
        var2: usize, val2: impl Debug,
        var3: usize, val3: impl Debug,
    ) {
        println!("fn{f}:_{var0} = {val0:?}\n_{var1} = {val1:?}\n_{var2} = {val2:?}\n_{var3} = {val3:?}");
    }
    #[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn0(mut _1: bool,mut _2: char,mut _3: isize,mut _4: i32,mut _5: i16) -> u128 {
mir! {
type RET = u128;
let _6: Adt49;
let _7: (i16, (bool, i64, i32));
let _8: (u32, i128, [usize; 8]);
let _9: Adt53;
let _10: [i32; 1];
let _11: char;
let _12: Adt59;
let _13: f64;
let _14: u64;
let _15: i32;
let _16: bool;
let _17: u64;
let _18: [u64; 7];
let _19: isize;
let _20: isize;
let _21: i128;
let _22: [i32; 1];
let _23: [i32; 1];
let _24: ([i32; 5], u8);
let _25: [u64; 6];
let _26: [isize; 8];
let _27: u32;
let _28: (isize, u64, char);
let _29: Adt50;
let _30: [i32; 1];
let _31: f32;
let _32: [isize; 8];
let _33: ();
let _34: ();
{
_5 = (-18980_i16) >> 1007767662_u32;
_1 = true & true;
_2 = '\u{84718}';
RET = !182978632171818275283160084397955485640_u128;
_2 = '\u{68456}';
_7.0 = _5;
_1 = _7.0 < _5;
_8.1 = (-3096191934134736363537808535691060250_i128) << _5;
_4 = 54601_u16 as i32;
_7.1.2 = _4;
_5 = !_7.0;
_8.0 = 32_i8 as u32;
_5 = _7.0 + _7.0;
_8.2 = [448918111261818600_usize,3_usize,4111701334356260719_usize,2251376948218586136_usize,0_usize,0_usize,3447084992296002670_usize,5_usize];
_8.1 = _7.1.2 as i128;
_7.1 = (_1, 4439041513295221127_i64, _4);
_5 = !_7.0;
_10 = [_4];
_5 = _7.0 + _7.0;
_13 = _7.1.1 as f64;
_7.1.0 = _1;
_2 = '\u{233ae}';
match _7.1.1 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb5,
4439041513295221127 => bb7,
_ => bb6
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
_7.1 = (_1, 1653713788233150197_i64, _4);
_7.1.0 = _1 != _1;
_7.1 = (_1, (-6736300878148484444_i64), _4);
_3 = (-73_isize);
RET = !144427129953389252549643176151781263234_u128;
_7.1.2 = 11386531790284418142_u64 as i32;
_7.1.1 = 42884_u16 as i64;
match _3 {
0 => bb6,
1 => bb2,
340282366920938463463374607431768211383 => bb9,
_ => bb8
}
}
bb8 = {
Return()
}
bb9 = {
_4 = _7.1.2 - _7.1.2;
_3 = 9223372036854775807_isize;
_8.1 = (-21228134377251023204897529691143476015_i128);
_7.1.0 = _1;
_7.1 = (_1, 2014888929081529635_i64, _4);
_17 = 16047344400783886868_u64 | 6528020640588370964_u64;
_7.1.2 = RET as i32;
_7.1 = (_1, (-4653126746615510938_i64), _4);
_15 = _7.1.2 + _4;
_1 = _7.1.0;
_7.0 = -_5;
_4 = _7.1.2 ^ _15;
_5 = _7.0 + _7.0;
_8.1 = _2 as i128;
_7.1.2 = _4 | _15;
Call(_16 = fn1(_5, _7, _4, _8), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_19 = _3 - _3;
_8.1 = (-104678288730903683393149473590329784776_i128);
_7.1.1 = 8845072097383607222_i64;
_11 = _2;
_7.1.2 = _4;
_2 = _11;
_20 = _19 << _5;
_7.0 = -_5;
_3 = _1 as isize;
_4 = _15;
_7.1 = (_16, 7614418817604275484_i64, _15);
_7.1.2 = _7.1.1 as i32;
_7.0 = _5;
_18 = [_17,_17,_17,_17,_17,_17,_17];
_15 = -_7.1.2;
match _7.1.1 {
0 => bb8,
7614418817604275484 => bb12,
_ => bb11
}
}
bb11 = {
_4 = _7.1.2 - _7.1.2;
_3 = 9223372036854775807_isize;
_8.1 = (-21228134377251023204897529691143476015_i128);
_7.1.0 = _1;
_7.1 = (_1, 2014888929081529635_i64, _4);
_17 = 16047344400783886868_u64 | 6528020640588370964_u64;
_7.1.2 = RET as i32;
_7.1 = (_1, (-4653126746615510938_i64), _4);
_15 = _7.1.2 + _4;
_1 = _7.1.0;
_7.0 = -_5;
_4 = _7.1.2 ^ _15;
_5 = _7.0 + _7.0;
_8.1 = _2 as i128;
_7.1.2 = _4 | _15;
Call(_16 = fn1(_5, _7, _4, _8), ReturnTo(bb10), UnwindUnreachable())
}
bb12 = {
_3 = _20 | _20;
_14 = !_17;
_13 = 3484_u16 as f64;
_7.1.1 = -(-4047523859977497207_i64);
_18 = [_17,_17,_17,_14,_14,_17,_14];
_8.2 = [7_usize,7_usize,16628479494457815673_usize,8748186401045272904_usize,10668186781124865291_usize,4_usize,7_usize,6_usize];
_17 = _14;
_24.1 = _7.1.2 as u8;
_20 = _3;
_25 = [_17,_17,_17,_17,_14,_17];
_3 = RET as isize;
_7.1 = (_16, 2664906480298820742_i64, _15);
RET = !303139738958024366623486268454276572777_u128;
_1 = !_16;
_28 = (_20, _14, _2);
_28.2 = _11;
_17 = _28.1 + _28.1;
_18 = [_28.1,_28.1,_28.1,_14,_14,_17,_17];
_28.1 = !_17;
_28.1 = _17 | _17;
match _7.1.1 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb10,
2664906480298820742 => bb13,
_ => bb5
}
}
bb13 = {
_7.0 = _5;
_18 = [_17,_17,_28.1,_28.1,_28.1,_17,_28.1];
_28.1 = _17;
_17 = _28.1;
_2 = _28.2;
_23 = [_7.1.2];
_28 = (_20, _17, _11);
_7.0 = _5;
_1 = _16;
_8.0 = 58447425_u32 & 2901250495_u32;
_30 = [_7.1.2];
_7.0 = -_5;
_21 = !_8.1;
_28.2 = _11;
_17 = _14;
_28.0 = _20 << _7.1.1;
_27 = _8.0;
_14 = !_17;
_17 = 4_usize as u64;
_10 = [_15];
_1 = !_7.1.0;
_4 = -_7.1.2;
_5 = _14 as i16;
_8.2 = [0_usize,0_usize,3608571090709526996_usize,2_usize,14470115208379852276_usize,9690902971457344818_usize,1_usize,4_usize];
_20 = _28.0 - _28.0;
_25 = [_28.1,_28.1,_28.1,_17,_28.1,_28.1];
RET = _21 as u128;
match _7.1.1 {
0 => bb1,
1 => bb11,
2 => bb3,
3 => bb9,
2664906480298820742 => bb14,
_ => bb8
}
}
bb14 = {
_8.0 = _27 >> _4;
_14 = _16 as u64;
_10 = _30;
_22 = [_4];
_10 = _22;
_7.0 = _5 * _5;
_24.1 = _14 as u8;
RET = 54_u16 as u128;
Goto(bb15)
}
bb15 = {
Call(_33 = dump_var(0_usize, 3_usize, Move(_3), 23_usize, Move(_23), 22_usize, Move(_22), 27_usize, Move(_27)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_33 = dump_var(0_usize, 15_usize, Move(_15), 18_usize, Move(_18), 7_usize, Move(_7), 17_usize, Move(_17)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_33 = dump_var(0_usize, 30_usize, Move(_30), 11_usize, Move(_11), 25_usize, Move(_25), 34_usize, _34), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn1(mut _1: i16,mut _2: (i16, (bool, i64, i32)),mut _3: i32,mut _4: (u32, i128, [usize; 8])) -> bool {
mir! {
type RET = bool;
let _5: [usize; 8];
let _6: Adt56;
let _7: [i32; 1];
let _8: *mut usize;
let _9: Adt58;
let _10: Adt48;
let _11: *const i64;
let _12: f64;
let _13: Adt58;
let _14: f64;
let _15: f32;
let _16: u64;
let _17: [usize; 8];
let _18: bool;
let _19: [u64; 7];
let _20: *mut i8;
let _21: ();
let _22: ();
{
_2.1.1 = (-2662098785765397660_i64) | (-7263233016812828569_i64);
_7 = [_2.1.2];
_6 = Adt56 { fld0: _4 };
Call(_7 = fn2(_6, _2.1.2, _2.1.0, _2.1, _6.fld0.2, _4, _4, _2.1.0, _4, _3, _2, _2.1.2, _2.1), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
RET = _2.1.0 & _2.1.0;
_1 = _6.fld0.0 as i16;
_6.fld0 = _4;
RET = _2.1.0;
_4.1 = _6.fld0.1 - _6.fld0.1;
RET = _2.1.0;
_4 = (_6.fld0.0, _6.fld0.1, _6.fld0.2);
_2.1.2 = !_3;
_6.fld0.0 = '\u{de4a3}' as u32;
_3 = _2.1.2;
_6 = Adt56 { fld0: _4 };
_6.fld0.0 = _4.0 | _4.0;
_1 = _2.0;
Goto(bb2)
}
bb2 = {
_6.fld0.2 = _4.2;
Goto(bb3)
}
bb3 = {
_6 = Adt56 { fld0: _4 };
_2.0 = -_1;
_2.1 = (RET, (-8844151081492261690_i64), _3);
_6 = Adt56 { fld0: _4 };
_2.1.1 = (-3690549455807408940_i64);
_4 = (_6.fld0.0, _6.fld0.1, _6.fld0.2);
_12 = _2.1.1 as f64;
_4.1 = _6.fld0.1;
_1 = _2.0 << _2.1.2;
_6.fld0.1 = !_4.1;
_2.1.2 = _3 + _3;
match _2.1.1 {
0 => bb4,
1 => bb5,
2 => bb6,
340282366920938463459684057975960802516 => bb8,
_ => bb7
}
}
bb4 = {
_6.fld0.2 = _4.2;
Goto(bb3)
}
bb5 = {
RET = _2.1.0 & _2.1.0;
_1 = _6.fld0.0 as i16;
_6.fld0 = _4;
RET = _2.1.0;
_4.1 = _6.fld0.1 - _6.fld0.1;
RET = _2.1.0;
_4 = (_6.fld0.0, _6.fld0.1, _6.fld0.2);
_2.1.2 = !_3;
_6.fld0.0 = '\u{de4a3}' as u32;
_3 = _2.1.2;
_6 = Adt56 { fld0: _4 };
_6.fld0.0 = _4.0 | _4.0;
_1 = _2.0;
Goto(bb2)
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_4.2 = [17234838106883517090_usize,5_usize,11345501867066240495_usize,0_usize,2_usize,7514930961893232751_usize,4_usize,6_usize];
_6.fld0 = (_4.0, _4.1, _4.2);
_3 = _2.1.2;
_6.fld0.0 = _4.0;
_11 = core::ptr::addr_of!(_2.1.1);
_11 = core::ptr::addr_of!((*_11));
_2.1.2 = _3 >> _3;
_6.fld0.1 = _4.1 * _4.1;
RET = _1 != _1;
_3 = _2.1.2 & _2.1.2;
_2.1.2 = -_3;
_1 = _2.0 ^ _2.0;
_2.1 = (RET, (-7844628874078271278_i64), _3);
_18 = !RET;
_17 = [2_usize,2_usize,447689756687237325_usize,1_usize,10703140617394546696_usize,17556240674122685478_usize,1_usize,1_usize];
_2.1.0 = RET & RET;
_6.fld0.0 = _4.0 >> (*_11);
_12 = 209710303682140756097355452821298677032_u128 as f64;
_11 = core::ptr::addr_of!(_2.1.1);
RET = (*_11) <= _2.1.1;
_5 = [0_usize,17531262216785748532_usize,11698664897257388411_usize,2_usize,1_usize,4_usize,1826147557841644923_usize,11473962653709811345_usize];
_19 = [14066402792608387297_u64,8642793659437838748_u64,3814452198778058883_u64,18376285040942277719_u64,4521688199865984424_u64,11210107882747561051_u64,10559991632420051706_u64];
Goto(bb9)
}
bb9 = {
Call(_21 = dump_var(1_usize, 1_usize, Move(_1), 17_usize, Move(_17), 2_usize, Move(_2), 19_usize, Move(_19)), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn2(mut _1: Adt56,mut _2: i32,mut _3: bool,mut _4: (bool, i64, i32),mut _5: [usize; 8],mut _6: (u32, i128, [usize; 8]),mut _7: (u32, i128, [usize; 8]),mut _8: bool,mut _9: (u32, i128, [usize; 8]),mut _10: i32,mut _11: (i16, (bool, i64, i32)),mut _12: i32,mut _13: (bool, i64, i32)) -> [i32; 1] {
mir! {
type RET = [i32; 1];
let _14: char;
let _15: Adt57;
let _16: u8;
let _17: char;
let _18: Adt55;
let _19: *const u16;
let _20: f64;
let _21: (u32, i128, [usize; 8]);
let _22: *mut i8;
let _23: u16;
let _24: f32;
let _25: *const i128;
let _26: usize;
let _27: i8;
let _28: (u32, i128, [usize; 8]);
let _29: i64;
let _30: *mut usize;
let _31: (i16, (bool, i64, i32));
let _32: i8;
let _33: [isize; 8];
let _34: i32;
let _35: [isize; 8];
let _36: Adt56;
let _37: f32;
let _38: u32;
let _39: (bool, i64, i32);
let _40: ();
let _41: ();
{
RET = [_4.2];
_10 = (-9223372036854775808_isize) as i32;
_11.1.0 = !_3;
_13.0 = _7.1 < _9.1;
_1.fld0.1 = !_7.1;
_14 = '\u{55592}';
_7.1 = _9.1;
_13.0 = _3;
RET = [_13.2];
_4.1 = _13.1;
_11.1.2 = !_2;
Call(_4.1 = core::intrinsics::bswap(_11.1.1), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_7.2 = _5;
_1.fld0 = (_6.0, _7.1, _5);
Goto(bb2)
}
bb2 = {
_11.1.1 = _13.1;
Call(_11.1.0 = fn3(_13, _9.2, _6.2, _6, _12, _13, _1.fld0, _5, _12, _6.2), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_1.fld0.0 = _13.1 as u32;
_11.1 = _13;
_13.0 = !_8;
_11.1.2 = _4.2 & _4.2;
RET = [_10];
_11.1 = _13;
_7 = (_9.0, _1.fld0.1, _6.2);
_4.0 = _12 <= _13.2;
_11.1.0 = _13.0 | _4.0;
_11 = ((-383_i16), _4);
_16 = 215_u8 + 83_u8;
_13.0 = !_4.0;
_1 = Adt56 { fld0: _6 };
_9 = (_7.0, _7.1, _7.2);
_3 = _11.1.0;
_11.1.0 = _4.0 | _13.0;
_13.0 = !_11.1.0;
_1.fld0.1 = _7.1;
match _11.0 {
340282366920938463463374607431768211073 => bb4,
_ => bb2
}
}
bb4 = {
RET = [_2];
_11.1.2 = _12;
_21.1 = -_7.1;
_17 = _14;
match _11.0 {
340282366920938463463374607431768211073 => bb6,
_ => bb5
}
}
bb5 = {
_11.1.1 = _13.1;
Call(_11.1.0 = fn3(_13, _9.2, _6.2, _6, _12, _13, _1.fld0, _5, _12, _6.2), ReturnTo(bb3), UnwindUnreachable())
}
bb6 = {
_6 = (_7.0, _7.1, _5);
_20 = _7.0 as f64;
_6.0 = _9.0 ^ _7.0;
_21.0 = _7.0 + _6.0;
_8 = _11.1.0;
_21 = (_9.0, _1.fld0.1, _1.fld0.2);
_9.2 = _21.2;
_9 = (_7.0, _1.fld0.1, _7.2);
_6.1 = _21.1 * _1.fld0.1;
_6.2 = [4_usize,1727729368466449036_usize,12548320513420733811_usize,4639185074271358898_usize,10371652127692676756_usize,12967599227824340392_usize,4412821077129957759_usize,7_usize];
_21.0 = !_1.fld0.0;
_6.1 = _9.1;
_11.0 = 24667_i16;
_17 = _14;
_13 = (_3, _11.1.1, _2);
_17 = _14;
Goto(bb7)
}
bb7 = {
_7 = _21;
_4.2 = _1.fld0.0 as i32;
_21 = (_6.0, _7.1, _9.2);
_9 = (_7.0, _21.1, _7.2);
_6 = (_7.0, _1.fld0.1, _9.2);
_7.0 = !_6.0;
_17 = _14;
_6.2 = [7_usize,5507842594678483490_usize,7110631504318001962_usize,5546852410834450856_usize,12433556228561350513_usize,3871089920882062896_usize,2467685407466427692_usize,17009839818817131475_usize];
Goto(bb8)
}
bb8 = {
_7 = _21;
RET = [_2];
_4.1 = _11.1.1;
_21.1 = _7.1;
_1.fld0.0 = _21.1 as u32;
_13.0 = _3;
_5 = [1_usize,2_usize,2286424681329177953_usize,12925608906611478872_usize,5_usize,16217581922630577848_usize,1_usize,1_usize];
_21 = (_7.0, _9.1, _7.2);
_11.1.0 = !_4.0;
_1 = Adt56 { fld0: _9 };
_28.1 = -_1.fld0.1;
Goto(bb9)
}
bb9 = {
_13.1 = _11.1.1;
_8 = _3 | _3;
_10 = _13.1 as i32;
_28 = (_1.fld0.0, _21.1, _1.fld0.2);
_28.0 = _21.0;
_1 = Adt56 { fld0: _21 };
_19 = core::ptr::addr_of!(_23);
_31.1.1 = -_13.1;
RET = [_11.1.2];
_19 = core::ptr::addr_of!(_23);
_16 = _11.0 as u8;
Goto(bb10)
}
bb10 = {
_24 = 11209164947385754109_u64 as f32;
_1.fld0.1 = _17 as i128;
_13.0 = !_3;
RET = [_13.2];
match _11.0 {
0 => bb1,
1 => bb2,
2 => bb9,
3 => bb11,
24667 => bb13,
_ => bb12
}
}
bb11 = {
_13.1 = _11.1.1;
_8 = _3 | _3;
_10 = _13.1 as i32;
_28 = (_1.fld0.0, _21.1, _1.fld0.2);
_28.0 = _21.0;
_1 = Adt56 { fld0: _21 };
_19 = core::ptr::addr_of!(_23);
_31.1.1 = -_13.1;
RET = [_11.1.2];
_19 = core::ptr::addr_of!(_23);
_16 = _11.0 as u8;
Goto(bb10)
}
bb12 = {
_6 = (_7.0, _7.1, _5);
_20 = _7.0 as f64;
_6.0 = _9.0 ^ _7.0;
_21.0 = _7.0 + _6.0;
_8 = _11.1.0;
_21 = (_9.0, _1.fld0.1, _1.fld0.2);
_9.2 = _21.2;
_9 = (_7.0, _1.fld0.1, _7.2);
_6.1 = _21.1 * _1.fld0.1;
_6.2 = [4_usize,1727729368466449036_usize,12548320513420733811_usize,4639185074271358898_usize,10371652127692676756_usize,12967599227824340392_usize,4412821077129957759_usize,7_usize];
_21.0 = !_1.fld0.0;
_6.1 = _9.1;
_11.0 = 24667_i16;
_17 = _14;
_13 = (_3, _11.1.1, _2);
_17 = _14;
Goto(bb7)
}
bb13 = {
_9.1 = _1.fld0.1;
_13.2 = _12 << _1.fld0.1;
_11 = (30097_i16, _4);
_32 = (-17_i8);
_13 = _4;
_31.1.1 = -_4.1;
_1.fld0.0 = _28.0;
_1 = Adt56 { fld0: _9 };
match _11.0 {
0 => bb1,
1 => bb12,
2 => bb3,
3 => bb7,
30097 => bb14,
_ => bb9
}
}
bb14 = {
_36.fld0.2 = [7_usize,5379485739980617592_usize,7_usize,7_usize,8057365101647097432_usize,2_usize,5_usize,16352693019067803208_usize];
_36 = Adt56 { fld0: _1.fld0 };
_23 = (-9223372036854775808_isize) as u16;
_25 = core::ptr::addr_of!(_21.1);
_11.1.1 = -_4.1;
_39.0 = _13.0;
_4.0 = _3;
_35 = [9223372036854775807_isize,(-51_isize),(-9223372036854775808_isize),(-125_isize),9223372036854775807_isize,9223372036854775807_isize,(-17_isize),(-46_isize)];
Goto(bb15)
}
bb15 = {
Call(_40 = dump_var(2_usize, 23_usize, Move(_23), 10_usize, Move(_10), 13_usize, Move(_13), 8_usize, Move(_8)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_40 = dump_var(2_usize, 32_usize, Move(_32), 28_usize, Move(_28), 35_usize, Move(_35), 5_usize, Move(_5)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_40 = dump_var(2_usize, 2_usize, Move(_2), 12_usize, Move(_12), 41_usize, _41, 41_usize, _41), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn3(mut _1: (bool, i64, i32),mut _2: [usize; 8],mut _3: [usize; 8],mut _4: (u32, i128, [usize; 8]),mut _5: i32,mut _6: (bool, i64, i32),mut _7: (u32, i128, [usize; 8]),mut _8: [usize; 8],mut _9: i32,mut _10: [usize; 8]) -> bool {
mir! {
type RET = bool;
let _11: Adt61;
let _12: [u64; 7];
let _13: char;
let _14: Adt60;
let _15: f64;
let _16: bool;
let _17: [u64; 6];
let _18: [u64; 6];
let _19: f64;
let _20: Adt50;
let _21: *mut [i32; 5];
let _22: Adt55;
let _23: isize;
let _24: (i64, (isize, u64, char), i8, [usize; 4], char, f32, *const i128, u128);
let _25: [isize; 3];
let _26: f32;
let _27: [bool; 7];
let _28: [bool; 7];
let _29: i32;
let _30: Adt46;
let _31: [u64; 6];
let _32: ();
let _33: ();
{
_6.2 = _5;
_1.2 = _9 & _5;
_9 = _1.2 >> _1.2;
_4.1 = _7.1 & _7.1;
_1.0 = !_6.0;
_11.fld6.0 = _1.1;
RET = _1.0;
_11.fld6.5 = 6601287163059944750_u64 as f32;
_11.fld6.4 = '\u{1b166}';
_11.fld6.1.2 = _11.fld6.4;
_11.fld6.1.0 = 9223372036854775807_isize & 9223372036854775807_isize;
_4.1 = _7.1;
_6.0 = RET;
_1 = _6;
_11.fld6.7 = 130735957099754102181705055344815519130_u128;
_11.fld0 = [1886675601096853002_u64,1530777120397571130_u64,12239871036488552142_u64,4315015059111968967_u64,18350233550029096727_u64,5310743339684715517_u64];
_11.fld5 = [_9,_9,_9,_9,_9];
_11.fld2 = !45314_u16;
_11.fld6.1.0 = (-15_isize) ^ (-23_isize);
_2 = _7.2;
_11.fld6.1.1 = !5339048613690510573_u64;
_4.2 = [999735000753026049_usize,6_usize,2_usize,1753959729019703610_usize,13877226863398786365_usize,7728144032014136442_usize,14468438263933803333_usize,1_usize];
Call(_11.fld6.1 = fn4(_10, _1, _7, _9, _7.2, _1.0, _6, _7.2, _9, _11.fld5, _7, _9, _9, _5), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_11.fld2 = !59138_u16;
_7.1 = _11.fld6.1.2 as i128;
_8 = [1_usize,15739466785629020672_usize,10277719300014809716_usize,8692779872613606467_usize,2115226469975815778_usize,16022694954739070609_usize,5_usize,1_usize];
_1.2 = _9 * _9;
_19 = (-23258_i16) as f64;
_1.2 = -_6.2;
_6 = _1;
_1 = _6;
match _11.fld6.7 {
0 => bb2,
130735957099754102181705055344815519130 => bb4,
_ => bb3
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
_7.2 = [7_usize,2_usize,5_usize,5718531798623884387_usize,1612498089057617511_usize,4645223822959320389_usize,7_usize,15665793559668131472_usize];
_6.0 = RET;
_11.fld3 = _11.fld2 as f32;
_6.1 = _4.0 as i64;
_11.fld6.0 = !_6.1;
_11.fld2 = 25747_u16 | 40818_u16;
match _11.fld6.7 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb5,
4 => bb6,
5 => bb7,
130735957099754102181705055344815519130 => bb9,
_ => bb8
}
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
_11.fld2 = !59138_u16;
_7.1 = _11.fld6.1.2 as i128;
_8 = [1_usize,15739466785629020672_usize,10277719300014809716_usize,8692779872613606467_usize,2115226469975815778_usize,16022694954739070609_usize,5_usize,1_usize];
_1.2 = _9 * _9;
_19 = (-23258_i16) as f64;
_1.2 = -_6.2;
_6 = _1;
_1 = _6;
match _11.fld6.7 {
0 => bb2,
130735957099754102181705055344815519130 => bb4,
_ => bb3
}
}
bb8 = {
Return()
}
bb9 = {
_15 = _19 + _19;
_11.fld6.6 = core::ptr::addr_of!(_7.1);
_15 = _19 + _19;
_11.fld6.3 = [2_usize,2635366715298425332_usize,9082735541040150915_usize,4_usize];
_6.0 = _1.0 | RET;
_6.1 = _1.1 * _1.1;
_11.fld6.4 = _11.fld6.1.2;
_18 = [_11.fld6.1.1,_11.fld6.1.1,_11.fld6.1.1,_11.fld6.1.1,_11.fld6.1.1,_11.fld6.1.1];
_18 = _11.fld0;
Call(_11.fld6.5 = fn6(_6.1, _3, _6.2, _11.fld5, _3, _11.fld5, _9, _11.fld5, _11.fld6.1.0, _11.fld5, _6, _11.fld5, _11.fld5), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_24.7 = _11.fld6.7;
_4.2 = [9633134086924267894_usize,13947800475867768241_usize,18031925595341617693_usize,16165962280488291930_usize,2_usize,16450814166591640241_usize,17918348640955162963_usize,18433755851779254112_usize];
_23 = _11.fld6.1.0;
_24.2 = (-45_i8) - (-94_i8);
_15 = _23 as f64;
_24.1.1 = !_11.fld6.1.1;
_11.fld6.1.0 = _23;
_25 = [_11.fld6.1.0,_11.fld6.1.0,_11.fld6.1.0];
_11.fld0 = _18;
_24.2 = 202_u8 as i8;
_6 = (RET, _11.fld6.0, _9);
_7.0 = _4.0 & _4.0;
RET = !_6.0;
_7.1 = 1347_i16 as i128;
match _24.7 {
0 => bb3,
1 => bb2,
2 => bb11,
3 => bb12,
130735957099754102181705055344815519130 => bb14,
_ => bb13
}
}
bb11 = {
_15 = _19 + _19;
_11.fld6.6 = core::ptr::addr_of!(_7.1);
_15 = _19 + _19;
_11.fld6.3 = [2_usize,2635366715298425332_usize,9082735541040150915_usize,4_usize];
_6.0 = _1.0 | RET;
_6.1 = _1.1 * _1.1;
_11.fld6.4 = _11.fld6.1.2;
_18 = [_11.fld6.1.1,_11.fld6.1.1,_11.fld6.1.1,_11.fld6.1.1,_11.fld6.1.1,_11.fld6.1.1];
_18 = _11.fld0;
Call(_11.fld6.5 = fn6(_6.1, _3, _6.2, _11.fld5, _3, _11.fld5, _9, _11.fld5, _11.fld6.1.0, _11.fld5, _6, _11.fld5, _11.fld5), ReturnTo(bb10), UnwindUnreachable())
}
bb12 = {
_7.2 = [7_usize,2_usize,5_usize,5718531798623884387_usize,1612498089057617511_usize,4645223822959320389_usize,7_usize,15665793559668131472_usize];
_6.0 = RET;
_11.fld3 = _11.fld2 as f32;
_6.1 = _4.0 as i64;
_11.fld6.0 = !_6.1;
_11.fld2 = 25747_u16 | 40818_u16;
match _11.fld6.7 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb5,
4 => bb6,
5 => bb7,
130735957099754102181705055344815519130 => bb9,
_ => bb8
}
}
bb13 = {
Return()
}
bb14 = {
_24.3 = [2_usize,156464966323344674_usize,844647261244882659_usize,2333121614725231828_usize];
_13 = _11.fld6.1.2;
_4.1 = _7.1 | _7.1;
_8 = [6_usize,7_usize,10527145630275805944_usize,2_usize,6099336122079844972_usize,0_usize,7_usize,5430060187449565442_usize];
_4.0 = _7.0;
_11.fld6.1.2 = _13;
_12 = [_11.fld6.1.1,_11.fld6.1.1,_24.1.1,_24.1.1,_11.fld6.1.1,_11.fld6.1.1,_24.1.1];
_27 = [_6.0,RET,_6.0,_1.0,_6.0,_6.0,_1.0];
_24.4 = _13;
_11.fld6.2 = _24.2;
_11.fld6.1.1 = _11.fld6.5 as u64;
_3 = [5_usize,7_usize,1182940764042224703_usize,0_usize,5_usize,18418233618274348595_usize,7_usize,7932578608992743598_usize];
_24.1 = (_23, _11.fld6.1.1, _11.fld6.4);
_11.fld6.1.1 = !_24.1.1;
_11.fld6.1.0 = _11.fld6.0 as isize;
_29 = _9 ^ _9;
Goto(bb15)
}
bb15 = {
Call(_32 = dump_var(3_usize, 23_usize, Move(_23), 27_usize, Move(_27), 5_usize, Move(_5), 1_usize, Move(_1)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_32 = dump_var(3_usize, 25_usize, Move(_25), 18_usize, Move(_18), 6_usize, Move(_6), 2_usize, Move(_2)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn4(mut _1: [usize; 8],mut _2: (bool, i64, i32),mut _3: (u32, i128, [usize; 8]),mut _4: i32,mut _5: [usize; 8],mut _6: bool,mut _7: (bool, i64, i32),mut _8: [usize; 8],mut _9: i32,mut _10: [i32; 5],mut _11: (u32, i128, [usize; 8]),mut _12: i32,mut _13: i32,mut _14: i32) -> (isize, u64, char) {
mir! {
type RET = (isize, u64, char);
let _15: Adt62;
let _16: ([i32; 5], u8);
let _17: f64;
let _18: Adt56;
let _19: Adt58;
let _20: (i64, (isize, u64, char), i8, [usize; 4], char, f32, *const i128, u128);
let _21: (bool, i64, i32);
let _22: [usize; 4];
let _23: u8;
let _24: [i32; 5];
let _25: u128;
let _26: [i16; 7];
let _27: (isize, u64, char);
let _28: u16;
let _29: [u128; 7];
let _30: bool;
let _31: bool;
let _32: [i32; 1];
let _33: bool;
let _34: ();
let _35: ();
{
RET.2 = '\u{12713}';
_11.2 = _8;
Call(RET = fn5(_4, _10, _10, _14, _5, _4, _9, _1, _7), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_1 = [7_usize,4_usize,6_usize,5514047853438606505_usize,2789523130400554429_usize,0_usize,4_usize,1_usize];
_2 = (_6, _7.1, _13);
_1 = _11.2;
_11.2 = _1;
_14 = _2.2;
_7 = _2;
_4 = _2.2;
_8 = _5;
_2.0 = !_6;
_18.fld0.1 = !_11.1;
RET.0 = (-9223372036854775808_isize);
_16.1 = RET.2 as u8;
_16.1 = 72_u8;
_18 = Adt56 { fld0: _3 };
RET.1 = !5496623628734163031_u64;
RET.0 = !9223372036854775807_isize;
_2.0 = !_6;
_16.0 = _10;
RET = ((-35_isize), 6989430300313959535_u64, '\u{8b4b8}');
_4 = RET.0 as i32;
RET.1 = 32392_i16 as u64;
_11 = _3;
Goto(bb2)
}
bb2 = {
_7 = _2;
_11 = (_18.fld0.0, _3.1, _5);
_16.0 = [_14,_12,_12,_12,_2.2];
_20.6 = core::ptr::addr_of!(_18.fld0.1);
_3.2 = [3_usize,14166696130359823442_usize,3347596348586820419_usize,2_usize,7_usize,6242515533785864925_usize,0_usize,0_usize];
RET.2 = '\u{324fb}';
_16 = (_10, 46_u8);
_20.1.1 = RET.1 | RET.1;
Goto(bb3)
}
bb3 = {
_20.0 = _2.2 as i64;
_3 = (_11.0, _11.1, _18.fld0.2);
_21.0 = _2.0;
_11.1 = !_3.1;
RET = ((-9223372036854775808_isize), _20.1.1, '\u{d259a}');
_20.1.2 = RET.2;
_16 = (_10, 48_u8);
_7.0 = _20.0 == _20.0;
_3.2 = [6_usize,4_usize,6742781291268273475_usize,4_usize,3496815893965386311_usize,15023946929059867657_usize,9574298611548241326_usize,2_usize];
match _16.1 {
0 => bb1,
1 => bb2,
2 => bb4,
3 => bb5,
4 => bb6,
48 => bb8,
_ => bb7
}
}
bb4 = {
_7 = _2;
_11 = (_18.fld0.0, _3.1, _5);
_16.0 = [_14,_12,_12,_12,_2.2];
_20.6 = core::ptr::addr_of!(_18.fld0.1);
_3.2 = [3_usize,14166696130359823442_usize,3347596348586820419_usize,2_usize,7_usize,6242515533785864925_usize,0_usize,0_usize];
RET.2 = '\u{324fb}';
_16 = (_10, 46_u8);
_20.1.1 = RET.1 | RET.1;
Goto(bb3)
}
bb5 = {
_1 = [7_usize,4_usize,6_usize,5514047853438606505_usize,2789523130400554429_usize,0_usize,4_usize,1_usize];
_2 = (_6, _7.1, _13);
_1 = _11.2;
_11.2 = _1;
_14 = _2.2;
_7 = _2;
_4 = _2.2;
_8 = _5;
_2.0 = !_6;
_18.fld0.1 = !_11.1;
RET.0 = (-9223372036854775808_isize);
_16.1 = RET.2 as u8;
_16.1 = 72_u8;
_18 = Adt56 { fld0: _3 };
RET.1 = !5496623628734163031_u64;
RET.0 = !9223372036854775807_isize;
_2.0 = !_6;
_16.0 = _10;
RET = ((-35_isize), 6989430300313959535_u64, '\u{8b4b8}');
_4 = RET.0 as i32;
RET.1 = 32392_i16 as u64;
_11 = _3;
Goto(bb2)
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_16.1 = 79_u8;
_23 = 26887_u16 as u8;
_14 = _9;
Call(RET.1 = core::intrinsics::bswap(_20.1.1), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
_24 = _16.0;
_20.2 = (-32_i8);
_18.fld0.0 = _20.1.1 as u32;
_3.0 = _18.fld0.0;
_11.0 = _18.fld0.0 * _3.0;
_4 = _7.0 as i32;
_12 = _14 * _4;
_21 = (_7.0, _20.0, _13);
_20.2 = -(-63_i8);
_25 = _20.0 as u128;
_23 = _20.1.2 as u8;
_20.1.0 = RET.0 ^ RET.0;
_2 = (_7.0, _21.1, _21.2);
_7.2 = _16.1 as i32;
_18.fld0.1 = _11.0 as i128;
_24 = [_13,_21.2,_2.2,_2.2,_9];
_21.0 = !_2.0;
_10 = [_4,_12,_14,_4,_4];
_3.0 = !_11.0;
_20.3 = [5_usize,7384499084426587445_usize,10034506576028170708_usize,16724713462713010529_usize];
_5 = [6702503947503970367_usize,3475228840141864328_usize,2_usize,1717708195717279192_usize,1482899439574794270_usize,14865613898615118088_usize,4_usize,6_usize];
_1 = [4_usize,10925499274344160887_usize,7_usize,0_usize,29259055064755003_usize,8771284968575073590_usize,2_usize,3_usize];
match RET.0 {
0 => bb10,
1 => bb11,
2 => bb12,
340282366920938463454151235394913435648 => bb14,
_ => bb13
}
}
bb10 = {
_16.1 = 79_u8;
_23 = 26887_u16 as u8;
_14 = _9;
Call(RET.1 = core::intrinsics::bswap(_20.1.1), ReturnTo(bb9), UnwindUnreachable())
}
bb11 = {
_7 = _2;
_11 = (_18.fld0.0, _3.1, _5);
_16.0 = [_14,_12,_12,_12,_2.2];
_20.6 = core::ptr::addr_of!(_18.fld0.1);
_3.2 = [3_usize,14166696130359823442_usize,3347596348586820419_usize,2_usize,7_usize,6242515533785864925_usize,0_usize,0_usize];
RET.2 = '\u{324fb}';
_16 = (_10, 46_u8);
_20.1.1 = RET.1 | RET.1;
Goto(bb3)
}
bb12 = {
Return()
}
bb13 = {
_7 = _2;
_11 = (_18.fld0.0, _3.1, _5);
_16.0 = [_14,_12,_12,_12,_2.2];
_20.6 = core::ptr::addr_of!(_18.fld0.1);
_3.2 = [3_usize,14166696130359823442_usize,3347596348586820419_usize,2_usize,7_usize,6242515533785864925_usize,0_usize,0_usize];
RET.2 = '\u{324fb}';
_16 = (_10, 46_u8);
_20.1.1 = RET.1 | RET.1;
Goto(bb3)
}
bb14 = {
_28 = 44928_u16 * 37387_u16;
_22 = _20.3;
_27.1 = 430364714287282374_usize as u64;
_1 = [16129961131523071533_usize,17502871767263975558_usize,6_usize,18066518409193119958_usize,7_usize,7_usize,306801734230343676_usize,13663370896547356242_usize];
_3 = (_11.0, _18.fld0.1, _8);
_16.1 = _23 ^ _23;
_6 = _21.0 | _21.0;
_26 = [(-12631_i16),24775_i16,(-25920_i16),20627_i16,8965_i16,(-29163_i16),(-72_i16)];
_5 = _1;
_3.2 = _18.fld0.2;
_20.6 = core::ptr::addr_of!(_11.1);
_24 = [_4,_4,_2.2,_9,_9];
_20.2 = (-83_i8) ^ (-19_i8);
_22 = [0_usize,17516396456741930290_usize,2892043081905086154_usize,7_usize];
RET = _20.1;
_18.fld0.2 = _8;
_8 = _18.fld0.2;
_31 = !_6;
_18 = Adt56 { fld0: _11 };
_23 = _16.1;
_18 = Adt56 { fld0: _3 };
Goto(bb15)
}
bb15 = {
Call(_34 = dump_var(4_usize, 5_usize, Move(_5), 2_usize, Move(_2), 11_usize, Move(_11), 9_usize, Move(_9)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_34 = dump_var(4_usize, 3_usize, Move(_3), 22_usize, Move(_22), 25_usize, Move(_25), 4_usize, Move(_4)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_34 = dump_var(4_usize, 14_usize, Move(_14), 21_usize, Move(_21), 1_usize, Move(_1), 35_usize, _35), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn5(mut _1: i32,mut _2: [i32; 5],mut _3: [i32; 5],mut _4: i32,mut _5: [usize; 8],mut _6: i32,mut _7: i32,mut _8: [usize; 8],mut _9: (bool, i64, i32)) -> (isize, u64, char) {
mir! {
type RET = (isize, u64, char);
let _10: (u32, i128, [usize; 8]);
let _11: *const u16;
let _12: (f32, i8, usize, i128, u8, u32);
let _13: ((bool, i64, i32), *const i64, i8, *mut usize, (isize, u64, char), u64, *const u16, i8, i32);
let _14: u32;
let _15: ();
let _16: ();
{
RET.2 = '\u{9a083}';
_9.0 = true;
_9 = (true, 8756716029596880695_i64, _6);
_7 = _6 | _1;
RET = ((-102_isize), 3619956462804404880_u64, '\u{16257}');
RET.2 = '\u{44ba3}';
_2 = [_1,_7,_9.2,_7,_9.2];
_12.5 = 152_u8 as u32;
_10.0 = _12.5;
Call(_13.5 = core::intrinsics::bswap(RET.1), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_13.4.2 = RET.2;
RET.2 = _13.4.2;
_2 = [_1,_1,_6,_7,_9.2];
RET.2 = _13.4.2;
_13.2 = _9.0 as i8;
_13.3 = core::ptr::addr_of_mut!(_12.2);
_13.1 = core::ptr::addr_of!(_13.0.1);
_13.5 = _9.1 as u64;
_13.0.0 = _9.1 <= _9.1;
_10.1 = -6730397504836825677242457348309542753_i128;
RET.1 = _13.5 - _13.5;
RET = (42_isize, _13.5, _13.4.2);
_7 = -_6;
Goto(bb2)
}
bb2 = {
Call(_15 = dump_var(5_usize, 1_usize, Move(_1), 6_usize, Move(_6), 9_usize, Move(_9), 3_usize, Move(_3)), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn6(mut _1: i64,mut _2: [usize; 8],mut _3: i32,mut _4: [i32; 5],mut _5: [usize; 8],mut _6: [i32; 5],mut _7: i32,mut _8: [i32; 5],mut _9: isize,mut _10: [i32; 5],mut _11: (bool, i64, i32),mut _12: [i32; 5],mut _13: [i32; 5]) -> f32 {
mir! {
type RET = f32;
let _14: Adt50;
let _15: Adt59;
let _16: i32;
let _17: [u64; 7];
let _18: f64;
let _19: ();
let _20: ();
{
_4 = [_3,_7,_11.2,_7,_3];
_9 = 42_isize & 9223372036854775807_isize;
RET = 52781_u16 as f32;
_4 = [_7,_7,_7,_7,_7];
_10 = [_11.2,_7,_7,_7,_7];
_11.0 = _7 == _11.2;
_11.1 = _1 << _7;
_5 = [8198536737699670398_usize,5_usize,7303474379430759292_usize,4_usize,7_usize,7_usize,16312699537503900591_usize,5_usize];
_11 = (true, _1, _7);
_8 = [_11.2,_7,_7,_11.2,_7];
_3 = 12255099331842970617_usize as i32;
_6 = [_11.2,_7,_7,_11.2,_11.2];
_4 = [_7,_11.2,_7,_11.2,_11.2];
Call(_15 = fn7(_11.0, _7, _11.2, _10), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_16 = _7 | _7;
RET = 1342476400_u32 as f32;
_3 = _11.2 ^ _16;
_5 = [1_usize,4255852332512354486_usize,9311741788539315894_usize,3_usize,15732518223735377435_usize,9269626056274447617_usize,14569621537135906352_usize,11243058227589062657_usize];
_4 = _10;
_8 = _13;
_1 = -_11.1;
_12 = _10;
_4 = [_16,_7,_11.2,_7,_3];
RET = _3 as f32;
_17 = [5123173867649346322_u64,11073082231418017763_u64,11642134698651604711_u64,15734091667735016356_u64,10213779645954736547_u64,15425251378331639223_u64,16556750554588177425_u64];
_11.0 = _16 < _11.2;
Goto(bb2)
}
bb2 = {
Call(_19 = dump_var(6_usize, 3_usize, Move(_3), 10_usize, Move(_10), 13_usize, Move(_13), 11_usize, Move(_11)), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Call(_19 = dump_var(6_usize, 7_usize, Move(_7), 8_usize, Move(_8), 4_usize, Move(_4), 20_usize, _20), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn7(mut _1: bool,mut _2: i32,mut _3: i32,mut _4: [i32; 5]) -> Adt59 {
mir! {
type RET = Adt59;
let _5: usize;
let _6: usize;
let _7: *const i64;
let _8: [bool; 7];
let _9: isize;
let _10: (isize, u64, char);
let _11: f32;
let _12: u128;
let _13: u128;
let _14: *const i128;
let _15: [bool; 7];
let _16: i128;
let _17: [u64; 6];
let _18: f64;
let _19: bool;
let _20: [i32; 1];
let _21: [u128; 7];
let _22: Adt48;
let _23: bool;
let _24: usize;
let _25: bool;
let _26: [i32; 5];
let _27: usize;
let _28: [u64; 6];
let _29: char;
let _30: usize;
let _31: *mut u64;
let _32: *mut [i32; 5];
let _33: Adt50;
let _34: [u128; 7];
let _35: isize;
let _36: isize;
let _37: [isize; 3];
let _38: *mut [i32; 5];
let _39: Adt62;
let _40: i64;
let _41: u128;
let _42: isize;
let _43: Adt54;
let _44: isize;
let _45: u128;
let _46: Adt62;
let _47: isize;
let _48: isize;
let _49: [bool; 7];
let _50: u128;
let _51: bool;
let _52: i8;
let _53: f64;
let _54: isize;
let _55: isize;
let _56: &'static *mut [i32; 5];
let _57: i8;
let _58: Adt59;
let _59: *mut u64;
let _60: char;
let _61: [usize; 4];
let _62: Adt61;
let _63: u128;
let _64: char;
let _65: ();
let _66: ();
{
_2 = _3;
_4 = [_3,_2,_3,_3,_3];
_2 = -_3;
_3 = _2;
_2 = 2704836017918348552_u64 as i32;
_4 = [_2,_3,_3,_3,_3];
Goto(bb1)
}
bb1 = {
_3 = _2 | _2;
_4 = [_2,_3,_3,_3,_2];
_2 = _3;
_2 = _3 ^ _3;
_2 = _3 | _3;
_3 = _2;
_3 = _2 >> _2;
_5 = 0_usize;
_1 = _2 <= _3;
match _5 {
1 => bb3,
2 => bb4,
0 => bb6,
_ => bb5
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
_2 = !_3;
_2 = _3 | _3;
_2 = _3;
_1 = _2 < _2;
_1 = true;
_6 = _5 & _5;
_4 = [_2,_2,_2,_2,_3];
_3 = !_2;
_8[_5] = !_1;
_6 = _5 - _5;
_10.0 = !9223372036854775807_isize;
_5 = _6;
_1 = true;
_11 = 113031865237873597822392078231040442754_i128 as f32;
_10.0 = _1 as isize;
_4 = [_2,_3,_2,_2,_2];
_12 = 119428771111958817126432333112575850197_i128 as u128;
_9 = _10.0 + _10.0;
Call(_10.1 = fn8(_4, _2, _9, _3, _9, _2, _3, _4), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
_10.0 = -_9;
_5 = _6 << _10.1;
_5 = !_6;
_13 = _12 * _12;
_4 = [_3,_3,_2,_3,_2];
_10.0 = _9 * _9;
_10.0 = _9;
_16 = 44215442632071384344898895195849739248_i128 - (-52149861593726818243302934338926142996_i128);
_15 = [_1,_1,_1,_1,_1,_1,_1];
_10.0 = _9;
_16 = (-6223982882471344803522677097137797341_i128);
_10 = (_9, 11424147170810094266_u64, '\u{147a3}');
_10.2 = '\u{101637}';
_18 = 3605721158_u32 as f64;
_8 = [_1,_1,_1,_1,_1,_1,_1];
_13 = _18 as u128;
_10.0 = !_9;
_9 = _10.0;
_2 = 1067461850_u32 as i32;
Goto(bb8)
}
bb8 = {
_18 = _12 as f64;
_3 = _2;
_19 = !_1;
_21 = [_12,_13,_12,_13,_13,_12,_12];
_10.0 = _16 as isize;
_19 = !_1;
_17 = [_10.1,_10.1,_10.1,_10.1,_10.1,_10.1];
_20 = [_3];
_10.0 = _9 | _9;
_10.0 = _9;
Goto(bb9)
}
bb9 = {
_10.2 = '\u{1e138}';
_2 = _3 ^ _3;
_24 = _6 ^ _5;
_18 = _11 as f64;
_13 = _12 * _12;
_4 = [_2,_2,_2,_2,_3];
_25 = _19 & _1;
_10.2 = '\u{102847}';
_4 = [_3,_2,_3,_2,_2];
_23 = _25;
_10.2 = '\u{d53fa}';
Goto(bb10)
}
bb10 = {
_28 = [_10.1,_10.1,_10.1,_10.1,_10.1,_10.1];
_17 = [_10.1,_10.1,_10.1,_10.1,_10.1,_10.1];
_12 = _13 >> _3;
_17 = [_10.1,_10.1,_10.1,_10.1,_10.1,_10.1];
_9 = _10.2 as isize;
_17 = [_10.1,_10.1,_10.1,_10.1,_10.1,_10.1];
_14 = core::ptr::addr_of!(_16);
_3 = -_2;
_25 = _3 > _2;
_27 = _5;
_20 = [_3];
_28 = [_10.1,_10.1,_10.1,_10.1,_10.1,_10.1];
_10.2 = '\u{b31d7}';
_6 = _24 ^ _27;
_20 = [_2];
_29 = _10.2;
Goto(bb11)
}
bb11 = {
_23 = _11 <= _11;
_3 = !_2;
Goto(bb12)
}
bb12 = {
_27 = !_6;
_4 = [_3,_3,_2,_3,_3];
_23 = !_1;
_14 = core::ptr::addr_of!(_16);
_19 = !_25;
_21 = [_12,_13,_12,_12,_12,_13,_12];
_21 = [_12,_13,_13,_12,_13,_12,_13];
_9 = _10.0;
_17 = [_10.1,_10.1,_10.1,_10.1,_10.1,_10.1];
_10 = (_9, 10006851490169539379_u64, _29);
_26 = [_2,_3,_2,_2,_3];
_16 = 139765545059428203159839765909492004615_i128 << _27;
_2 = (*_14) as i32;
_10.1 = 16783971365845472923_u64;
_18 = 11097_u16 as f64;
_5 = _6;
_24 = _6;
_1 = _2 > _2;
_16 = 94457984358250429552711867388366601637_i128;
_36 = _10.0 * _10.0;
_10.2 = _29;
_2 = !_3;
_26 = [_3,_3,_2,_2,_2];
_32 = core::ptr::addr_of_mut!(_26);
Call(_36 = core::intrinsics::bswap(_9), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
_28 = [_10.1,_10.1,_10.1,_10.1,_10.1,_10.1];
_11 = 109_i8 as f32;
_30 = _5;
_10.0 = _36 >> _3;
_26 = [_2,_2,_3,_2,_3];
_4 = [_2,_2,_3,_3,_2];
_19 = !_1;
_16 = (-115509332240127959610018904513422671652_i128);
_14 = core::ptr::addr_of!((*_14));
_31 = core::ptr::addr_of_mut!(_10.1);
_3 = _11 as i32;
Goto(bb14)
}
bb14 = {
_26 = [_2,_3,_2,_3,_2];
_12 = (-5445189451092086622_i64) as u128;
_8 = [_1,_1,_19,_1,_25,_19,_1];
_31 = core::ptr::addr_of_mut!((*_31));
_25 = _36 != _36;
_9 = !_10.0;
_19 = !_25;
_27 = _11 as usize;
_25 = !_1;
_37 = [_9,_10.0,_10.0];
Goto(bb15)
}
bb15 = {
_18 = 52_i8 as f64;
_6 = _24;
Goto(bb16)
}
bb16 = {
_2 = _12 as i32;
_10.1 = _6 as u64;
_41 = _12;
_40 = 5150175432967367474_i64 ^ (-2717072630347304929_i64);
_34 = _21;
_7 = core::ptr::addr_of!(_40);
_18 = (*_7) as f64;
_30 = _24;
_16 = (*_7) as i128;
_11 = _3 as f32;
_5 = _30 + _30;
_19 = !_1;
_2 = 2927778909_u32 as i32;
_41 = _6 as u128;
_10.0 = -_9;
_35 = _10.0 - _10.0;
_35 = -_9;
_28 = [(*_31),(*_31),_10.1,_10.1,(*_31),_10.1];
_2 = _10.2 as i32;
_8 = [_25,_1,_25,_25,_1,_1,_25];
_44 = -_36;
_4 = [_2,_2,_3,_3,_3];
Goto(bb17)
}
bb17 = {
_19 = _1;
_10.2 = _29;
Call(RET = fn18((*_32), _32, _13, _6, _37, (*_31), _9, _1, _41, _9), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
_50 = _12 & _41;
_38 = _32;
SetDiscriminant(RET, 2);
_45 = _35 as u128;
_10.2 = _29;
_6 = _24 - _30;
_49 = [_1,_19,_1,_19,_25,_25,_25];
_32 = _38;
_14 = core::ptr::addr_of!((*_14));
_10.1 = 11199406457755966750_u64 ^ 3972237384294916877_u64;
_51 = !_19;
_40 = -8101276854130973062_i64;
_18 = (-14_i8) as f64;
_51 = _19 < _25;
_25 = !_19;
_25 = _19;
_10 = (_9, 6513727583156350375_u64, _29);
_11 = _10.0 as f32;
_11 = 47_i8 as f32;
_38 = _32;
_12 = !_45;
_47 = _9;
_31 = core::ptr::addr_of_mut!(_10.1);
_32 = core::ptr::addr_of_mut!(_4);
_14 = core::ptr::addr_of!(_16);
_11 = _5 as f32;
Goto(bb19)
}
bb19 = {
_28 = _17;
match (*_31) {
0 => bb20,
6513727583156350375 => bb22,
_ => bb21
}
}
bb20 = {
_18 = 52_i8 as f64;
_6 = _24;
Goto(bb16)
}
bb21 = {
Return()
}
bb22 = {
_11 = 113_i8 as f32;
_18 = _35 as f64;
place!(Field::<[isize; 3]>(Variant(RET, 2), 0)) = _37;
_29 = _10.2;
SetDiscriminant(RET, 1);
_21 = [_50,_41,_45,_45,_41,_41,_45];
_20 = [_2];
Goto(bb23)
}
bb23 = {
_55 = !_9;
_10.1 = 51_i8 as u64;
_31 = core::ptr::addr_of_mut!((*_31));
_24 = _6 | _5;
_38 = _32;
_7 = core::ptr::addr_of!(_40);
_9 = !_44;
_39 = Adt62::Variant2 { fld0: 12155_u16,fld1: _29,fld2: _10.1,fld3: 124_i8 };
_3 = _2 >> _55;
_20 = [_2];
_18 = 194_u8 as f64;
Goto(bb24)
}
bb24 = {
_48 = _55;
place!(Field::<u16>(Variant(_39, 2), 0)) = _40 as u16;
_1 = _51;
_44 = Field::<u16>(Variant(_39, 2), 0) as isize;
_53 = _18 * _18;
_4 = [_3,_3,_3,_3,_3];
_52 = 21_i8;
match _52 {
0 => bb17,
1 => bb25,
2 => bb26,
3 => bb27,
4 => bb28,
21 => bb30,
_ => bb29
}
}
bb25 = {
Return()
}
bb26 = {
_11 = 113_i8 as f32;
_18 = _35 as f64;
place!(Field::<[isize; 3]>(Variant(RET, 2), 0)) = _37;
_29 = _10.2;
SetDiscriminant(RET, 1);
_21 = [_50,_41,_45,_45,_41,_41,_45];
_20 = [_2];
Goto(bb23)
}
bb27 = {
_18 = 52_i8 as f64;
_6 = _24;
Goto(bb16)
}
bb28 = {
_18 = 52_i8 as f64;
_6 = _24;
Goto(bb16)
}
bb29 = {
_2 = _12 as i32;
_10.1 = _6 as u64;
_41 = _12;
_40 = 5150175432967367474_i64 ^ (-2717072630347304929_i64);
_34 = _21;
_7 = core::ptr::addr_of!(_40);
_18 = (*_7) as f64;
_30 = _24;
_16 = (*_7) as i128;
_11 = _3 as f32;
_5 = _30 + _30;
_19 = !_1;
_2 = 2927778909_u32 as i32;
_41 = _6 as u128;
_10.0 = -_9;
_35 = _10.0 - _10.0;
_35 = -_9;
_28 = [(*_31),(*_31),_10.1,_10.1,(*_31),_10.1];
_2 = _10.2 as i32;
_8 = [_25,_1,_25,_25,_1,_1,_25];
_44 = -_36;
_4 = [_2,_2,_3,_3,_3];
Goto(bb17)
}
bb30 = {
_29 = _10.2;
place!(Field::<u64>(Variant(_39, 2), 2)) = (*_31) - (*_31);
_16 = (-156323966706218932515403904041116732952_i128);
_25 = !_19;
_5 = _6;
_57 = -_52;
_55 = -_35;
match (*_14) {
0 => bb20,
1 => bb19,
2 => bb21,
3 => bb23,
4 => bb8,
5 => bb6,
183958400214719530947970703390651478504 => bb31,
_ => bb9
}
}
bb31 = {
_52 = _57 & _57;
place!(Field::<i8>(Variant(_39, 2), 3)) = _57;
_17 = [_10.1,Field::<u64>(Variant(_39, 2), 2),Field::<u64>(Variant(_39, 2), 2),(*_31),Field::<u64>(Variant(_39, 2), 2),_10.1];
_55 = _47;
place!(Field::<[usize; 4]>(Variant(RET, 1), 0)) = [_6,_5,_5,_30];
_58 = Adt59::Variant2 { fld0: _37 };
_29 = _10.2;
_27 = Field::<u16>(Variant(_39, 2), 0) as usize;
_49 = _8;
_7 = core::ptr::addr_of!(_40);
place!(Field::<u8>(Variant(RET, 0), 4)) = 13287_i16 as u8;
place!(Field::<i8>(Variant(RET, 0), 3)) = Field::<i8>(Variant(_39, 2), 3) | _52;
place!(Field::<i64>(Variant(RET, 0), 5)) = _40 - _40;
_26 = _4;
_24 = !_6;
_8 = _49;
_24 = !_6;
place!(Field::<i8>(Variant(RET, 0), 3)) = _52;
Goto(bb32)
}
bb32 = {
RET = Move(_58);
_26 = [_3,_3,_3,_3,_3];
_11 = _52 as f32;
_5 = !_24;
_24 = _30 | _5;
place!(Field::<i8>(Variant(_39, 2), 3)) = _52;
_62.fld1 = Adt59::Variant2 { fld0: Field::<[isize; 3]>(Variant(RET, 2), 0) };
_13 = !_12;
_37 = Field::<[isize; 3]>(Variant(_62.fld1, 2), 0);
_9 = _36;
Goto(bb33)
}
bb33 = {
Call(_65 = dump_var(7_usize, 6_usize, Move(_6), 26_usize, Move(_26), 1_usize, Move(_1), 15_usize, Move(_15)), ReturnTo(bb34), UnwindUnreachable())
}
bb34 = {
Call(_65 = dump_var(7_usize, 25_usize, Move(_25), 4_usize, Move(_4), 41_usize, Move(_41), 47_usize, Move(_47)), ReturnTo(bb35), UnwindUnreachable())
}
bb35 = {
Call(_65 = dump_var(7_usize, 55_usize, Move(_55), 37_usize, Move(_37), 12_usize, Move(_12), 45_usize, Move(_45)), ReturnTo(bb36), UnwindUnreachable())
}
bb36 = {
Call(_65 = dump_var(7_usize, 57_usize, Move(_57), 50_usize, Move(_50), 20_usize, Move(_20), 13_usize, Move(_13)), ReturnTo(bb37), UnwindUnreachable())
}
bb37 = {
Call(_65 = dump_var(7_usize, 29_usize, Move(_29), 27_usize, Move(_27), 28_usize, Move(_28), 24_usize, Move(_24)), ReturnTo(bb38), UnwindUnreachable())
}
bb38 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn8(mut _1: [i32; 5],mut _2: i32,mut _3: isize,mut _4: i32,mut _5: isize,mut _6: i32,mut _7: i32,mut _8: [i32; 5]) -> u64 {
mir! {
type RET = u64;
let _9: (bool, i64, i32);
let _10: isize;
let _11: i64;
let _12: isize;
let _13: Adt46;
let _14: (i16, (bool, i64, i32));
let _15: (isize, u64, char);
let _16: [i32; 1];
let _17: bool;
let _18: f64;
let _19: [usize; 8];
let _20: ((bool, i64, i32), *const i64, i8, *mut usize, (isize, u64, char), u64, *const u16, i8, i32);
let _21: f32;
let _22: f64;
let _23: [i32; 5];
let _24: u8;
let _25: isize;
let _26: [i32; 1];
let _27: [u64; 6];
let _28: bool;
let _29: u64;
let _30: [i16; 7];
let _31: (bool, i64, i32);
let _32: char;
let _33: (i16, (bool, i64, i32));
let _34: *mut u64;
let _35: f64;
let _36: [u64; 6];
let _37: u32;
let _38: u64;
let _39: ();
let _40: ();
{
_1 = _8;
_4 = _7 << _7;
_4 = _6 << _3;
RET = 14538466113321874400_u64;
RET = !5765737407598286607_u64;
_6 = _2 ^ _4;
_2 = -_6;
_11 = _5 as i64;
_3 = _5 - _5;
_9.2 = '\u{504d0}' as i32;
Goto(bb1)
}
bb1 = {
_4 = _2 >> _2;
_10 = _5 + _3;
_8 = [_4,_2,_2,_4,_4];
_1 = _8;
_4 = _7;
_2 = !_9.2;
_7 = _6;
_14.0 = (-4789_i16) & (-3270_i16);
_14.1 = (false, _11, _4);
_10 = _3;
_14.1.2 = _7 ^ _6;
_15.1 = RET;
_15 = (_10, RET, '\u{19e7f}');
_9 = (_14.1.0, _14.1.1, _6);
_12 = 4233992542_u32 as isize;
_14.1.2 = _7 >> _6;
_4 = -_14.1.2;
_14.0 = 2_usize as i16;
_9.1 = _15.2 as i64;
_9.1 = _11 & _14.1.1;
_10 = _15.0;
RET = _15.1;
Call(_15 = fn9(_1, _14.1, _1, _11, _14.1.0, _6, _4, _6, _14.1.2, _8, _10, _14, _9, _4), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_14.1 = _9;
_9.1 = (-106_i8) as i64;
_20.0.2 = 40_u8 as i32;
_20.4.0 = _14.1.0 as isize;
_20.1 = core::ptr::addr_of!(_14.1.1);
_20.4.2 = _15.2;
Goto(bb3)
}
bb3 = {
_20.2 = 56_i8;
_11 = 56_u8 as i64;
_14.0 = (-8721_i16) << _4;
_5 = _14.0 as isize;
_20.4 = (_10, _15.1, _15.2);
_11 = -_9.1;
_9.2 = _6 * _4;
_17 = _14.1.0;
_20.7 = !_20.2;
_5 = _15.0;
_20.0.1 = _14.1.1;
_1 = [_7,_14.1.2,_4,_14.1.2,_9.2];
_20.4 = _15;
_20.4.1 = 62_u8 as u64;
_22 = _14.0 as f64;
RET = !_15.1;
_14.0 = 6508_i16 * 2041_i16;
_20.4.0 = _5 >> _14.1.2;
_22 = 3_usize as f64;
_15.2 = _20.4.2;
_9.2 = _6;
_9.0 = !_14.1.0;
_20.4.2 = _15.2;
_24 = !182_u8;
_20.2 = _20.7 * _20.7;
_20.5 = _15.1 * RET;
_20.4.0 = _5;
Call(_16 = core::intrinsics::transmute(_7), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_20.8 = _6 + _14.1.2;
_21 = _14.1.1 as f32;
Goto(bb5)
}
bb5 = {
_26 = [_7];
_20.4.0 = -_5;
_23 = [_4,_20.8,_14.1.2,_4,_14.1.2];
_14.1.2 = 44542_u16 as i32;
_27 = [_20.5,_20.4.1,_20.5,_20.5,_15.1,_15.1];
_17 = _20.8 <= _9.2;
_14.1 = (_9.0, _11, _20.8);
_21 = _14.0 as f32;
_17 = _4 < _20.8;
_28 = _17 >= _17;
_20.4.1 = _15.1 + RET;
_10 = _5 ^ _15.0;
_8 = [_14.1.2,_7,_6,_20.8,_20.8];
_18 = 47047775831097282313079857310521973981_i128 as f64;
_23 = _8;
_10 = _21 as isize;
_14.1.0 = _17;
_9 = _14.1;
_14.1 = (_28, _20.0.1, _9.2);
RET = !_20.4.1;
_20.4.1 = _15.1 + RET;
_8 = [_7,_4,_14.1.2,_9.2,_20.8];
_6 = _14.1.2;
_4 = _14.1.2;
Goto(bb6)
}
bb6 = {
_25 = 149236332194225580354160467019289692401_i128 as isize;
_15.0 = _20.4.0;
_17 = !_14.1.0;
_15.2 = _20.4.2;
_20.0.0 = _17;
_20.0.2 = _20.8 & _4;
_3 = _15.0;
_29 = _22 as u64;
_33.1.0 = _17 ^ _17;
_33.1.2 = 146948495287772327419422238450129045634_i128 as i32;
_15.2 = _20.4.2;
_16 = [_14.1.2];
_33 = (_14.0, _9);
_24 = !52_u8;
Call(_20 = fn11(_16, _14.1, _8, _9, _33, _33.1.0, _17, _33, _9.0, _9.0), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
_2 = !_7;
_31.2 = _33.1.2 & _9.2;
_3 = _20.4.0 | _5;
_19 = [7494682727003672906_usize,3077928709907923201_usize,7_usize,12766552420645540659_usize,2508642761460345132_usize,7_usize,4_usize,3_usize];
_14.1.2 = _18 as i32;
_32 = _15.2;
_11 = _20.0.1 | _14.1.1;
RET = _18 as u64;
_29 = _21 as u64;
Goto(bb8)
}
bb8 = {
_27 = [_20.4.1,_20.5,_20.4.1,_20.4.1,_20.5,_20.4.1];
_33.1 = (_28, _20.0.1, _20.8);
_31.1 = _20.0.1;
_10 = -_20.4.0;
_20.4 = _15;
_20.0 = (_9.0, _11, _4);
_14.0 = 202810461053537897514148762168519688374_u128 as i16;
_20.4.1 = _20.5 ^ _20.5;
_9.1 = -_31.1;
_20.5 = _20.4.1;
_6 = _20.8;
_15.2 = _20.4.2;
_11 = _28 as i64;
_18 = _22 * _22;
_20.4.0 = _22 as isize;
_9.2 = _4 ^ _2;
_3 = _18 as isize;
_16 = [_2];
_18 = -_22;
_23 = _1;
RET = _20.7 as u64;
_14.1.2 = _6 ^ _33.1.2;
_3 = -_5;
_16 = [_9.2];
Goto(bb9)
}
bb9 = {
Call(_39 = dump_var(8_usize, 4_usize, Move(_4), 5_usize, Move(_5), 6_usize, Move(_6), 15_usize, Move(_15)), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
Call(_39 = dump_var(8_usize, 11_usize, Move(_11), 7_usize, Move(_7), 29_usize, Move(_29), 8_usize, Move(_8)), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
Call(_39 = dump_var(8_usize, 24_usize, Move(_24), 16_usize, Move(_16), 12_usize, Move(_12), 33_usize, Move(_33)), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
Call(_39 = dump_var(8_usize, 25_usize, Move(_25), 40_usize, _40, 40_usize, _40, 40_usize, _40), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn9(mut _1: [i32; 5],mut _2: (bool, i64, i32),mut _3: [i32; 5],mut _4: i64,mut _5: bool,mut _6: i32,mut _7: i32,mut _8: i32,mut _9: i32,mut _10: [i32; 5],mut _11: isize,mut _12: (i16, (bool, i64, i32)),mut _13: (bool, i64, i32),mut _14: i32) -> (isize, u64, char) {
mir! {
type RET = (isize, u64, char);
let _15: i64;
let _16: i64;
let _17: isize;
let _18: u64;
let _19: [i16; 7];
let _20: Adt49;
let _21: [u64; 6];
let _22: Adt57;
let _23: f32;
let _24: isize;
let _25: bool;
let _26: Adt59;
let _27: Adt54;
let _28: ([i32; 5], u8);
let _29: f64;
let _30: bool;
let _31: usize;
let _32: ();
let _33: ();
{
_2.1 = _4 ^ _4;
RET.2 = '\u{f80dd}';
_13.2 = _12.0 as i32;
_12 = ((-17836_i16), _2);
_12 = ((-26079_i16), _2);
_15 = _12.1.1;
_5 = _2.0;
RET.1 = !7781490977457013096_u64;
RET = (_11, 10724999105766627555_u64, '\u{ac1a3}');
_13.0 = !_5;
_15 = _12.1.1;
_1 = [_7,_14,_12.1.2,_12.1.2,_7];
RET = (_11, 5156461416081092059_u64, '\u{36eae}');
_7 = _2.2 - _12.1.2;
_14 = _12.1.1 as i32;
_5 = !_13.0;
_11 = RET.0 | RET.0;
_13 = (_5, _4, _9);
_10 = [_8,_6,_6,_8,_7];
_8 = _13.2;
Call(_6 = fn10(_12.1, _2.2, _10, _12.1, _13, _12, _7), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
RET.1 = 18081215319867111740_u64 & 1216864165988702125_u64;
_12.1.2 = _6 + _7;
_6 = _7;
_3 = [_12.1.2,_9,_7,_6,_12.1.2];
_16 = _2.1 >> _7;
_9 = 4207995402_u32 as i32;
RET.2 = '\u{3ea05}';
_13.0 = _7 == _6;
match _12.0 {
0 => bb2,
340282366920938463463374607431768185377 => bb4,
_ => bb3
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
RET.2 = '\u{f40f1}';
_6 = !_2.2;
RET = (_11, 10100645191913299051_u64, '\u{22253}');
_9 = _8 << _7;
_19 = [_12.0,_12.0,_12.0,_12.0,_12.0,_12.0,_12.0];
_3 = _1;
_3 = [_2.2,_12.1.2,_12.1.2,_13.2,_7];
_1 = [_8,_6,_9,_12.1.2,_9];
_2 = (_13.0, _16, _9);
_2.1 = RET.0 as i64;
RET.2 = '\u{fcbf7}';
RET.1 = 708075742234231997_u64;
_12.1 = _2;
RET = (_11, 6222172308180473372_u64, '\u{3ed08}');
_17 = -RET.0;
Goto(bb5)
}
bb5 = {
_7 = !_9;
_3 = [_12.1.2,_9,_6,_2.2,_2.2];
_18 = RET.1;
_24 = -RET.0;
_1 = _3;
_4 = _16 | _12.1.1;
_12.1.1 = _4 >> _7;
_23 = 2044921829_u32 as f32;
_2.2 = 106_i8 as i32;
RET.1 = !_18;
_18 = RET.1 ^ RET.1;
RET.2 = '\u{104b4e}';
_23 = 88_u8 as f32;
_25 = _13.0;
_13.0 = _2.0;
_13.1 = _12.1.1;
_12 = ((-27997_i16), _2);
RET.1 = 113_u8 as u64;
_15 = _4 ^ _12.1.1;
_7 = _9;
_6 = !_9;
Goto(bb6)
}
bb6 = {
RET.1 = RET.2 as u64;
_13 = (_25, _4, _7);
_28 = (_10, 20_u8);
_24 = RET.0;
_12.0 = 16673_i16 << _4;
_14 = _12.0 as i32;
_6 = _13.2 << RET.0;
RET.0 = _11 * _11;
_29 = _12.0 as f64;
Goto(bb7)
}
bb7 = {
Call(_32 = dump_var(9_usize, 13_usize, Move(_13), 11_usize, Move(_11), 12_usize, Move(_12), 16_usize, Move(_16)), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
Call(_32 = dump_var(9_usize, 4_usize, Move(_4), 14_usize, Move(_14), 6_usize, Move(_6), 15_usize, Move(_15)), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
Call(_32 = dump_var(9_usize, 17_usize, Move(_17), 3_usize, Move(_3), 5_usize, Move(_5), 33_usize, _33), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn10(mut _1: (bool, i64, i32),mut _2: i32,mut _3: [i32; 5],mut _4: (bool, i64, i32),mut _5: (bool, i64, i32),mut _6: (i16, (bool, i64, i32)),mut _7: i32) -> i32 {
mir! {
type RET = i32;
let _8: char;
let _9: Adt52;
let _10: [char; 4];
let _11: f64;
let _12: f32;
let _13: (usize, u128);
let _14: [isize; 3];
let _15: (i64, (isize, u64, char), i8, [usize; 4], char, f32, *const i128, u128);
let _16: ();
let _17: ();
{
_6.1.1 = 32543_u16 as i64;
_1.2 = -_7;
RET = _5.2 + _7;
_5.0 = _1.0;
_4 = (_1.0, _1.1, _1.2);
_6.1.1 = !_5.1;
_1 = (_5.0, _5.1, RET);
RET = _7 << _7;
_6.1.2 = _7 >> RET;
_6.1 = _1;
_6.1 = _1;
_5.2 = _1.2;
_6.1.1 = !_4.1;
_2 = -_1.2;
_5.1 = 2_usize as i64;
_6 = ((-21972_i16), _4);
_5.2 = 333839425623855241638847514300681769992_u128 as i32;
_4 = (_1.0, _5.1, RET);
_8 = '\u{d4606}';
_2 = _8 as i32;
RET = _6.1.1 as i32;
match _6.0 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb5,
5 => bb6,
6 => bb7,
340282366920938463463374607431768189484 => bb9,
_ => bb8
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
_1 = (_5.0, _6.1.1, _4.2);
RET = _4.2 ^ _7;
_4.0 = _1.0;
_4.0 = !_5.0;
_7 = _8 as i32;
_6.1.1 = _4.1 & _1.1;
_6.1.0 = !_4.0;
_11 = 123564666350532348831066548218025466836_i128 as f64;
_1.2 = -_4.2;
_15.1 = ((-90_isize), 3738522184518226004_u64, _8);
_6.1 = (_4.0, _1.1, RET);
_13 = (10014667169027717880_usize, 35663269282620590125112101457504743493_u128);
Goto(bb10)
}
bb10 = {
Call(_16 = dump_var(10_usize, 1_usize, Move(_1), 2_usize, Move(_2), 4_usize, Move(_4), 3_usize, Move(_3)), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn11(mut _1: [i32; 1],mut _2: (bool, i64, i32),mut _3: [i32; 5],mut _4: (bool, i64, i32),mut _5: (i16, (bool, i64, i32)),mut _6: bool,mut _7: bool,mut _8: (i16, (bool, i64, i32)),mut _9: bool,mut _10: bool) -> ((bool, i64, i32), *const i64, i8, *mut usize, (isize, u64, char), u64, *const u16, i8, i32) {
mir! {
type RET = ((bool, i64, i32), *const i64, i8, *mut usize, (isize, u64, char), u64, *const u16, i8, i32);
let _11: [u128; 7];
let _12: &'static *mut [i32; 5];
let _13: isize;
let _14: [isize; 3];
let _15: char;
let _16: f32;
let _17: [bool; 7];
let _18: isize;
let _19: *mut [i32; 5];
let _20: Adt52;
let _21: Adt59;
let _22: f32;
let _23: bool;
let _24: Adt48;
let _25: ([i32; 5], u8);
let _26: [usize; 8];
let _27: [isize; 8];
let _28: (f32, i8, usize, i128, u8, u32);
let _29: f64;
let _30: Adt52;
let _31: [u128; 7];
let _32: [i32; 5];
let _33: Adt60;
let _34: Adt49;
let _35: usize;
let _36: [usize; 4];
let _37: [i32; 1];
let _38: char;
let _39: Adt49;
let _40: bool;
let _41: f64;
let _42: i128;
let _43: [u128; 7];
let _44: char;
let _45: Adt46;
let _46: isize;
let _47: [i32; 5];
let _48: char;
let _49: bool;
let _50: Adt59;
let _51: isize;
let _52: (i64, (isize, u64, char), i8, [usize; 4], char, f32, *const i128, u128);
let _53: [usize; 4];
let _54: Adt58;
let _55: [u128; 7];
let _56: isize;
let _57: isize;
let _58: f64;
let _59: i16;
let _60: *mut usize;
let _61: u16;
let _62: u64;
let _63: (u32, i128, [usize; 8]);
let _64: [u64; 7];
let _65: ();
let _66: ();
{
RET.8 = 4321724227851943465_usize as i32;
RET.4.0 = _5.1.0 as isize;
RET.4.2 = '\u{a8c02}';
RET.5 = 14487810818615201975_u64 >> _8.1.2;
RET.0.0 = RET.5 != RET.5;
RET.8 = _4.2 & _2.2;
RET.5 = 6548447705768585983_u64;
_4.2 = _8.1.2;
_5.1.1 = _2.1 * _8.1.1;
RET.7 = -(-28_i8);
RET.0.2 = -_8.1.2;
RET.4.1 = 7087_u16 as u64;
_8.1 = _2;
_2.2 = -RET.0.2;
_6 = _5.1.0;
_6 = _2.0;
_7 = RET.0.0;
_3 = [_8.1.2,_8.1.2,_8.1.2,RET.0.2,_5.1.2];
_2.0 = !_6;
_4.1 = 191_u8 as i64;
_2.0 = RET.0.0 != _8.1.0;
_8.1.0 = _10;
RET.4 = (92_isize, RET.5, '\u{d868e}');
Call(_8 = fn12(_9, _2, _2.2, _10), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
RET.4.1 = RET.5;
_16 = RET.7 as f32;
Goto(bb2)
}
bb2 = {
_5.1 = _8.1;
RET.4.2 = '\u{ce8d0}';
RET.0.0 = !_4.0;
RET.0 = (_6, _5.1.1, _8.1.2);
_10 = _4.0 > _6;
_2.2 = _5.0 as i32;
RET.1 = core::ptr::addr_of!(_8.1.1);
_8 = (_5.0, _2);
Goto(bb3)
}
bb3 = {
_2.1 = _5.1.1 | RET.0.1;
_5 = (_8.0, RET.0);
RET.7 = 76_i8;
RET.7 = (-12_i8) ^ 117_i8;
RET.0 = (_9, _5.1.1, _5.1.2);
_12 = &_19;
RET.5 = RET.4.1 ^ RET.4.1;
_14 = [RET.4.0,RET.4.0,RET.4.0];
_17 = [_4.0,_2.0,_5.1.0,_8.1.0,_7,_6,_5.1.0];
RET.4.1 = RET.5;
_15 = RET.4.2;
_11 = [226859629795832803057791371432044808774_u128,47366391859267138416986262162587629915_u128,60624534393578991867001000864040068257_u128,159422759117805429707087152979600936388_u128,206955287812154151590767666323862436041_u128,138035463760706070164978990188044665077_u128,234073324497344876649076654011749363277_u128];
RET.2 = RET.7;
RET.0.2 = _8.0 as i32;
_5.1.1 = !_2.1;
_2.1 = -_5.1.1;
_13 = !RET.4.0;
_22 = _16;
RET.5 = RET.4.1;
_2.0 = RET.0.0 & _5.1.0;
_8.0 = !_5.0;
_18 = _13;
_5.1 = RET.0;
RET.4.2 = _15;
RET.4.2 = _15;
_23 = _10;
Goto(bb4)
}
bb4 = {
_16 = _22;
_4.0 = !_7;
_3 = [RET.8,_4.2,RET.8,_4.2,_4.2];
RET.8 = _5.1.2 | _4.2;
_18 = _13 << RET.0.2;
RET.4 = (_18, RET.5, _15);
RET.0 = (_9, _2.1, _4.2);
Call(_4.1 = fn13(_1, _9, _8, _10, _10, _8.1.0, _2.0), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
RET.4.0 = !_18;
_2.1 = _5.1.1 ^ RET.0.1;
_5.1.2 = -RET.8;
RET.0.0 = _5.1.0;
RET.4.0 = _13 | _18;
_9 = !_23;
_5 = (_8.0, _2);
Goto(bb6)
}
bb6 = {
_27 = [RET.4.0,_18,_18,RET.4.0,RET.4.0,RET.4.0,RET.4.0,RET.4.0];
_10 = _23 < _9;
_5.1.1 = !_2.1;
_5.1.1 = RET.0.1;
_8.1.0 = _5.1.1 < _5.1.1;
RET.0 = (_4.0, _2.1, RET.8);
_25.1 = RET.7 as u8;
Goto(bb7)
}
bb7 = {
RET.4.1 = 2611256586_u32 as u64;
_28.0 = _16 * _16;
_11 = [156577238037806224712736609001041627651_u128,74266182081124962794793466757262988592_u128,109447965209036594793862550967065384339_u128,322458916965307314165776283007703544951_u128,73144948900956414451276173092597201498_u128,60627039575596104450659422609083241800_u128,252404760234279690627471871550402017919_u128];
RET.4.2 = _15;
RET.0.2 = _4.2;
_29 = _28.0 as f64;
_28.4 = _25.1;
_28.3 = 35329030754045368912721574007157896837_i128;
_8.1.1 = _28.3 as i64;
_5.1.0 = _6;
_5.1.1 = !RET.0.1;
_4.0 = RET.0.0;
RET.4.0 = _13;
RET.0.1 = _5.1.1;
RET.4.2 = _15;
RET.4.2 = _15;
RET.5 = !RET.4.1;
RET.8 = !_4.2;
_28.1 = RET.2 + RET.2;
_10 = _2.0;
_18 = RET.4.0 & _13;
RET.4.2 = _15;
_4 = (_9, _5.1.1, RET.8);
_28.1 = RET.2;
RET.4.1 = !RET.5;
_8.0 = _5.0;
match _28.3 {
35329030754045368912721574007157896837 => bb8,
_ => bb2
}
}
bb8 = {
_8.1.0 = RET.0.0;
RET.4.1 = RET.5 >> RET.8;
_14 = [RET.4.0,_18,_18];
RET.4 = (_18, RET.5, _15);
_31 = _11;
RET.3 = core::ptr::addr_of_mut!(_28.2);
RET.0.2 = RET.8;
_12 = &(*_12);
RET.4.0 = RET.4.2 as isize;
RET.8 = 62574_u16 as i32;
RET.1 = core::ptr::addr_of!(_4.1);
_15 = RET.4.2;
RET.4.0 = _13 << RET.0.1;
RET.1 = core::ptr::addr_of!(_4.1);
match _28.3 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb7,
5 => bb6,
6 => bb9,
35329030754045368912721574007157896837 => bb11,
_ => bb10
}
}
bb9 = {
RET.4.1 = 2611256586_u32 as u64;
_28.0 = _16 * _16;
_11 = [156577238037806224712736609001041627651_u128,74266182081124962794793466757262988592_u128,109447965209036594793862550967065384339_u128,322458916965307314165776283007703544951_u128,73144948900956414451276173092597201498_u128,60627039575596104450659422609083241800_u128,252404760234279690627471871550402017919_u128];
RET.4.2 = _15;
RET.0.2 = _4.2;
_29 = _28.0 as f64;
_28.4 = _25.1;
_28.3 = 35329030754045368912721574007157896837_i128;
_8.1.1 = _28.3 as i64;
_5.1.0 = _6;
_5.1.1 = !RET.0.1;
_4.0 = RET.0.0;
RET.4.0 = _13;
RET.0.1 = _5.1.1;
RET.4.2 = _15;
RET.4.2 = _15;
RET.5 = !RET.4.1;
RET.8 = !_4.2;
_28.1 = RET.2 + RET.2;
_10 = _2.0;
_18 = RET.4.0 & _13;
RET.4.2 = _15;
_4 = (_9, _5.1.1, RET.8);
_28.1 = RET.2;
RET.4.1 = !RET.5;
_8.0 = _5.0;
match _28.3 {
35329030754045368912721574007157896837 => bb8,
_ => bb2
}
}
bb10 = {
RET.4.1 = RET.5;
_16 = RET.7 as f32;
Goto(bb2)
}
bb11 = {
RET.8 = _4.2 << RET.0.1;
match _28.3 {
0 => bb12,
1 => bb13,
35329030754045368912721574007157896837 => bb15,
_ => bb14
}
}
bb12 = {
RET.4.0 = !_18;
_2.1 = _5.1.1 ^ RET.0.1;
_5.1.2 = -RET.8;
RET.0.0 = _5.1.0;
RET.4.0 = _13 | _18;
_9 = !_23;
_5 = (_8.0, _2);
Goto(bb6)
}
bb13 = {
_5.1 = _8.1;
RET.4.2 = '\u{ce8d0}';
RET.0.0 = !_4.0;
RET.0 = (_6, _5.1.1, _8.1.2);
_10 = _4.0 > _6;
_2.2 = _5.0 as i32;
RET.1 = core::ptr::addr_of!(_8.1.1);
_8 = (_5.0, _2);
Goto(bb3)
}
bb14 = {
RET.4.1 = 2611256586_u32 as u64;
_28.0 = _16 * _16;
_11 = [156577238037806224712736609001041627651_u128,74266182081124962794793466757262988592_u128,109447965209036594793862550967065384339_u128,322458916965307314165776283007703544951_u128,73144948900956414451276173092597201498_u128,60627039575596104450659422609083241800_u128,252404760234279690627471871550402017919_u128];
RET.4.2 = _15;
RET.0.2 = _4.2;
_29 = _28.0 as f64;
_28.4 = _25.1;
_28.3 = 35329030754045368912721574007157896837_i128;
_8.1.1 = _28.3 as i64;
_5.1.0 = _6;
_5.1.1 = !RET.0.1;
_4.0 = RET.0.0;
RET.4.0 = _13;
RET.0.1 = _5.1.1;
RET.4.2 = _15;
RET.4.2 = _15;
RET.5 = !RET.4.1;
RET.8 = !_4.2;
_28.1 = RET.2 + RET.2;
_10 = _2.0;
_18 = RET.4.0 & _13;
RET.4.2 = _15;
_4 = (_9, _5.1.1, RET.8);
_28.1 = RET.2;
RET.4.1 = !RET.5;
_8.0 = _5.0;
match _28.3 {
35329030754045368912721574007157896837 => bb8,
_ => bb2
}
}
bb15 = {
_31 = [233191148483461035273970505518126513273_u128,294561668389946787957710426581719213197_u128,154854495824666460510048116133554807322_u128,53681691651504555030432165651889450437_u128,4721784362824676912285681920781830743_u128,253709384782237322423215659110354111575_u128,195664351397032161938518983828989002274_u128];
RET.1 = core::ptr::addr_of!(_5.1.1);
_8.1.0 = !_4.0;
Call(RET.0.1 = core::intrinsics::transmute(_2.1), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
RET.7 = RET.2 & _28.1;
_4.0 = !_10;
_12 = &(*_12);
_5.1.1 = _4.1 & RET.0.1;
_4.2 = RET.0.2 & RET.0.2;
RET.4.0 = -_18;
_35 = RET.4.2 as usize;
RET.0.2 = -RET.8;
_22 = _28.0 + _28.0;
RET.4 = (_13, RET.5, _15);
match _28.3 {
0 => bb9,
1 => bb17,
2 => bb18,
3 => bb19,
35329030754045368912721574007157896837 => bb21,
_ => bb20
}
}
bb17 = {
_5.1 = _8.1;
RET.4.2 = '\u{ce8d0}';
RET.0.0 = !_4.0;
RET.0 = (_6, _5.1.1, _8.1.2);
_10 = _4.0 > _6;
_2.2 = _5.0 as i32;
RET.1 = core::ptr::addr_of!(_8.1.1);
_8 = (_5.0, _2);
Goto(bb3)
}
bb18 = {
_2.1 = _5.1.1 | RET.0.1;
_5 = (_8.0, RET.0);
RET.7 = 76_i8;
RET.7 = (-12_i8) ^ 117_i8;
RET.0 = (_9, _5.1.1, _5.1.2);
_12 = &_19;
RET.5 = RET.4.1 ^ RET.4.1;
_14 = [RET.4.0,RET.4.0,RET.4.0];
_17 = [_4.0,_2.0,_5.1.0,_8.1.0,_7,_6,_5.1.0];
RET.4.1 = RET.5;
_15 = RET.4.2;
_11 = [226859629795832803057791371432044808774_u128,47366391859267138416986262162587629915_u128,60624534393578991867001000864040068257_u128,159422759117805429707087152979600936388_u128,206955287812154151590767666323862436041_u128,138035463760706070164978990188044665077_u128,234073324497344876649076654011749363277_u128];
RET.2 = RET.7;
RET.0.2 = _8.0 as i32;
_5.1.1 = !_2.1;
_2.1 = -_5.1.1;
_13 = !RET.4.0;
_22 = _16;
RET.5 = RET.4.1;
_2.0 = RET.0.0 & _5.1.0;
_8.0 = !_5.0;
_18 = _13;
_5.1 = RET.0;
RET.4.2 = _15;
RET.4.2 = _15;
_23 = _10;
Goto(bb4)
}
bb19 = {
RET.4.1 = RET.5;
_16 = RET.7 as f32;
Goto(bb2)
}
bb20 = {
_16 = _22;
_4.0 = !_7;
_3 = [RET.8,_4.2,RET.8,_4.2,_4.2];
RET.8 = _5.1.2 | _4.2;
_18 = _13 << RET.0.2;
RET.4 = (_18, RET.5, _15);
RET.0 = (_9, _2.1, _4.2);
Call(_4.1 = fn13(_1, _9, _8, _10, _10, _8.1.0, _2.0), ReturnTo(bb5), UnwindUnreachable())
}
bb21 = {
_4.1 = _5.1.1;
_28.2 = _35 ^ _35;
_12 = &(*_12);
RET.4.0 = _18;
RET.0.1 = _4.1;
RET.0.1 = !_4.1;
_4.1 = _22 as i64;
_2.1 = _5.1.1 + RET.0.1;
RET.4.0 = _18 - _13;
RET.0.1 = _2.1 & _5.1.1;
RET.1 = core::ptr::addr_of!(_5.1.1);
_5.1 = (_6, RET.0.1, RET.8);
_25 = (_3, _28.4);
_28 = (_16, RET.2, _35, (-101333321212942080847490060830802810704_i128), _25.1, 3742194056_u32);
_4.2 = -RET.0.2;
_28.3 = (-67188233378626934770446341007810381406_i128) | 140515012586411396522851630360922250576_i128;
_22 = -_28.0;
_12 = &(*_12);
_4.2 = RET.0.2 ^ _5.1.2;
_22 = _16 * _16;
_13 = RET.5 as isize;
_8.1.0 = _4.0 < _7;
_4.1 = _2.1 & _2.1;
RET.4.0 = -_18;
match _28.5 {
0 => bb14,
3742194056 => bb22,
_ => bb2
}
}
bb22 = {
_5 = (_8.0, RET.0);
_12 = &(*_12);
RET.5 = _28.5 as u64;
RET.2 = !_28.1;
_8.1.2 = _4.2;
_1 = [_8.1.2];
_36 = [_35,_35,_35,_35];
_4.1 = _2.1;
_8.0 = _5.0 >> _4.1;
_35 = RET.4.0 as usize;
_25.0 = [_4.2,_5.1.2,_5.1.2,_5.1.2,RET.0.2];
RET.1 = core::ptr::addr_of!(RET.0.1);
RET.1 = core::ptr::addr_of!(_5.1.1);
_44 = _15;
_28 = (_22, RET.2, _35, 3503710598320413061742081557101998636_i128, _25.1, 1191720603_u32);
_21 = Adt59::Variant2 { fld0: _14 };
_31 = [59799216947940877879037284912792773653_u128,132873454601935270651521829378775630988_u128,274228250884045839295763049378773381085_u128,203051016917592470078968539250924347864_u128,212484253940732239442380289814708568246_u128,203485162527297808473541694158757779401_u128,202616509846626797072633399031223092210_u128];
_27 = [RET.4.0,_18,_18,_18,_18,_18,_18,_18];
_4.1 = _5.1.1 & RET.0.1;
RET.1 = core::ptr::addr_of!(_4.1);
SetDiscriminant(_21, 1);
_28.5 = 912913306_u32 ^ 2809100118_u32;
_27 = [_18,RET.4.0,_18,RET.4.0,RET.4.0,RET.4.0,RET.4.0,_18];
_4 = RET.0;
match _28.3 {
0 => bb16,
1 => bb7,
2 => bb6,
3 => bb5,
3503710598320413061742081557101998636 => bb24,
_ => bb23
}
}
bb23 = {
_4.1 = _5.1.1;
_28.2 = _35 ^ _35;
_12 = &(*_12);
RET.4.0 = _18;
RET.0.1 = _4.1;
RET.0.1 = !_4.1;
_4.1 = _22 as i64;
_2.1 = _5.1.1 + RET.0.1;
RET.4.0 = _18 - _13;
RET.0.1 = _2.1 & _5.1.1;
RET.1 = core::ptr::addr_of!(_5.1.1);
_5.1 = (_6, RET.0.1, RET.8);
_25 = (_3, _28.4);
_28 = (_16, RET.2, _35, (-101333321212942080847490060830802810704_i128), _25.1, 3742194056_u32);
_4.2 = -RET.0.2;
_28.3 = (-67188233378626934770446341007810381406_i128) | 140515012586411396522851630360922250576_i128;
_22 = -_28.0;
_12 = &(*_12);
_4.2 = RET.0.2 ^ _5.1.2;
_22 = _16 * _16;
_13 = RET.5 as isize;
_8.1.0 = _4.0 < _7;
_4.1 = _2.1 & _2.1;
RET.4.0 = -_18;
match _28.5 {
0 => bb14,
3742194056 => bb22,
_ => bb2
}
}
bb24 = {
_10 = _8.1.0;
_40 = _10 ^ _5.1.0;
RET.4 = (_18, RET.5, _44);
RET.4 = (_18, RET.5, _15);
_14 = [_18,RET.4.0,RET.4.0];
_2 = (_9, RET.0.1, _8.1.2);
_2.2 = _8.0 as i32;
_42 = -_28.3;
match _28.3 {
0 => bb6,
1 => bb12,
2 => bb16,
3 => bb10,
4 => bb5,
3503710598320413061742081557101998636 => bb26,
_ => bb25
}
}
bb25 = {
RET.4.0 = !_18;
_2.1 = _5.1.1 ^ RET.0.1;
_5.1.2 = -RET.8;
RET.0.0 = _5.1.0;
RET.4.0 = _13 | _18;
_9 = !_23;
_5 = (_8.0, _2);
Goto(bb6)
}
bb26 = {
_8.0 = _29 as i16;
_8 = (_5.0, _2);
_46 = RET.4.0 >> _2.2;
_28.3 = _42 ^ _42;
_21 = Adt59::Variant2 { fld0: _14 };
Call(RET.5 = core::intrinsics::transmute(_46), ReturnTo(bb27), UnwindUnreachable())
}
bb27 = {
_8.1.1 = RET.7 as i64;
_49 = _40;
_27 = [_46,RET.4.0,_46,_18,_46,_46,_46,_46];
_18 = -_13;
_52.1 = (_46, RET.5, _44);
_48 = _15;
_12 = &(*_12);
RET.3 = core::ptr::addr_of_mut!(_28.2);
_9 = _2.1 >= RET.0.1;
RET.2 = _28.1;
RET.8 = _4.2;
_14 = [_52.1.0,_52.1.0,_52.1.0];
_28.2 = _35;
_50 = Move(_21);
_19 = core::ptr::addr_of_mut!(_25.0);
_55 = _31;
Goto(bb28)
}
bb28 = {
_4 = (_10, RET.0.1, _2.2);
_51 = -_52.1.0;
RET.3 = core::ptr::addr_of_mut!(_35);
RET.5 = _52.1.1;
_28.5 = _28.2 as u32;
_52.1.2 = _15;
_2 = (_9, _5.1.1, _8.1.2);
RET.1 = core::ptr::addr_of!(_5.1.1);
_52.2 = _28.5 as i8;
RET.4 = _52.1;
_57 = _46 >> _46;
_27 = [_51,_57,_51,_51,_52.1.0,_46,_57,_57];
_8.1.1 = _5.1.1 | _2.1;
_52.5 = _22 + _28.0;
_5.1 = (_40, _8.1.1, _8.1.2);
RET.7 = _4.1 as i8;
_56 = _52.1.0;
RET.3 = core::ptr::addr_of_mut!(_35);
_52.4 = _44;
_22 = _52.5;
RET.5 = _52.1.1 - RET.4.1;
_52.3 = [_28.2,_28.2,_35,_35];
_52.6 = core::ptr::addr_of!(_42);
Call(_14 = fn16(_46, _52.1, _19, _4.2), ReturnTo(bb29), UnwindUnreachable())
}
bb29 = {
_52.4 = RET.4.2;
Goto(bb30)
}
bb30 = {
RET.4.2 = _52.1.2;
_60 = core::ptr::addr_of_mut!(_35);
_50 = Adt59::Variant1 { fld0: _52.3 };
_52.5 = _22;
_53 = _36;
Call(_36 = fn17(_46, (*_19)), ReturnTo(bb31), UnwindUnreachable())
}
bb31 = {
RET.4.2 = _52.4;
_9 = RET.8 <= _4.2;
RET.6 = core::ptr::addr_of!(_61);
Goto(bb32)
}
bb32 = {
Call(_65 = dump_var(11_usize, 9_usize, Move(_9), 18_usize, Move(_18), 27_usize, Move(_27), 40_usize, Move(_40)), ReturnTo(bb33), UnwindUnreachable())
}
bb33 = {
Call(_65 = dump_var(11_usize, 5_usize, Move(_5), 6_usize, Move(_6), 53_usize, Move(_53), 55_usize, Move(_55)), ReturnTo(bb34), UnwindUnreachable())
}
bb34 = {
Call(_65 = dump_var(11_usize, 31_usize, Move(_31), 44_usize, Move(_44), 14_usize, Move(_14), 1_usize, Move(_1)), ReturnTo(bb35), UnwindUnreachable())
}
bb35 = {
Call(_65 = dump_var(11_usize, 10_usize, Move(_10), 46_usize, Move(_46), 15_usize, Move(_15), 25_usize, Move(_25)), ReturnTo(bb36), UnwindUnreachable())
}
bb36 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn12(mut _1: bool,mut _2: (bool, i64, i32),mut _3: i32,mut _4: bool) -> (i16, (bool, i64, i32)) {
mir! {
type RET = (i16, (bool, i64, i32));
let _5: u32;
let _6: (f32, i8, usize, i128, u8, u32);
let _7: char;
let _8: ();
let _9: ();
{
RET.1 = (_4, _2.1, _3);
_1 = _3 == RET.1.2;
RET.1.2 = _2.2;
_2.1 = 6_usize as i64;
RET.1.1 = _2.2 as i64;
RET.1.2 = _3;
RET.0 = !(-30034_i16);
RET.1.2 = -_2.2;
RET.0 = -(-9966_i16);
_2 = (RET.1.0, RET.1.1, _3);
_3 = 54707_u16 as i32;
RET.1.2 = -_2.2;
_4 = _2.0 ^ _2.0;
RET.1.2 = _2.2 - _2.2;
_1 = _2.0 <= _2.0;
RET.1 = _2;
_2.1 = !RET.1.1;
_6.0 = RET.1.2 as f32;
_2.0 = _1 < _1;
RET.1.2 = RET.1.1 as i32;
_2.0 = RET.1.1 <= RET.1.1;
RET.1.2 = _2.2 >> _2.1;
_6.1 = (-169593629799468331603556202118145151444_i128) as i8;
_6.3 = -159165153222714707171349800017363069600_i128;
RET.1.0 = _2.0 != _1;
_7 = '\u{b0a5b}';
Goto(bb1)
}
bb1 = {
Call(_8 = dump_var(12_usize, 4_usize, Move(_4), 2_usize, Move(_2), 9_usize, _9, 9_usize, _9), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn13(mut _1: [i32; 1],mut _2: bool,mut _3: (i16, (bool, i64, i32)),mut _4: bool,mut _5: bool,mut _6: bool,mut _7: bool) -> i64 {
mir! {
type RET = i64;
let _8: i32;
let _9: [isize; 8];
let _10: Adt51;
let _11: (usize, u128);
let _12: isize;
let _13: isize;
let _14: [i32; 5];
let _15: i16;
let _16: u8;
let _17: isize;
let _18: [i32; 5];
let _19: usize;
let _20: ();
let _21: ();
{
RET = -_3.1.1;
_6 = !_5;
_7 = _5 < _4;
_4 = _6;
_3.1.0 = _6;
_2 = _5;
_3.1.1 = !RET;
Call(_3.1 = fn14(_7, _4, _5, _1, _7, _4), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_7 = !_4;
_5 = _4;
_5 = _2;
_3.1 = (_2, RET, 693171368_i32);
_2 = !_6;
_3.0 = (-25078_i16) - 10278_i16;
_3.0 = (-28458_i16) << _3.1.1;
_3.1.2 = 15987346251662634553_u64 as i32;
RET = -_3.1.1;
_3.1.2 = 1223327015_i32;
_3.1 = (_6, RET, 824421527_i32);
_5 = !_4;
_3.1.2 = 9223372036854775807_isize as i32;
_3.1.1 = RET;
_7 = _4 & _4;
RET = _3.1.1;
_2 = _5 >= _6;
_3.1 = (_5, RET, (-1206160765_i32));
_1 = [_3.1.2];
_3.1.2 = 9223372036854775807_isize as i32;
_3.0 = (-12601_i16);
_3.1.0 = _6 > _6;
_3.1 = (_2, RET, (-1278444558_i32));
match _3.1.2 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
340282366920938463463374607430489766898 => bb7,
_ => bb6
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
_3.1 = (_4, RET, (-1279790606_i32));
_3.1 = (_5, RET, 1887668457_i32);
_3.1.0 = RET <= RET;
_11.1 = 255_u8 as u128;
_8 = 71_i8 as i32;
_6 = !_5;
_11.0 = 2_usize & 4_usize;
_11.1 = 138071370101294412118937995012010273946_u128 >> _3.1.2;
_3.0 = 17573_i16;
_7 = _5;
_13 = !9223372036854775807_isize;
_3.1.1 = '\u{779f5}' as i64;
_8 = '\u{fef2e}' as i32;
_2 = _3.1.2 < _3.1.2;
_9 = [_13,_13,_13,_13,_13,_13,_13,_13];
_7 = !_5;
_3.0 = 13781_i16 * 15144_i16;
_3.1.0 = _2;
_3.1.1 = RET;
Call(_11.0 = core::intrinsics::transmute(_3.1.1), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
_13 = 56102_u16 as isize;
_3.1 = (_7, RET, _8);
_3.1.0 = _7;
_1 = [_3.1.2];
_5 = !_2;
_2 = !_6;
_3.1.2 = _8;
_11.1 = !239180960347980012486267030949367468496_u128;
_9 = [_13,_13,_13,_13,_13,_13,_13,_13];
RET = -_3.1.1;
_2 = _4;
Goto(bb9)
}
bb9 = {
_4 = _6;
_6 = _7;
_9 = [_13,_13,_13,_13,_13,_13,_13,_13];
RET = _3.1.1 ^ _3.1.1;
_3.1 = (_5, RET, _8);
_12 = _13;
_11.0 = 4_usize ^ 5284972976583982990_usize;
_3.1.2 = _8 - _8;
_3.1 = (_4, RET, _8);
_14 = [_3.1.2,_3.1.2,_3.1.2,_8,_3.1.2];
RET = _11.0 as i64;
_11 = (9065159381851703542_usize, 104402642715079801071614661438582529666_u128);
_15 = _3.0;
_7 = !_5;
match _11.1 {
0 => bb6,
1 => bb7,
2 => bb3,
3 => bb4,
4 => bb10,
104402642715079801071614661438582529666 => bb12,
_ => bb11
}
}
bb10 = {
Return()
}
bb11 = {
_7 = !_4;
_5 = _4;
_5 = _2;
_3.1 = (_2, RET, 693171368_i32);
_2 = !_6;
_3.0 = (-25078_i16) - 10278_i16;
_3.0 = (-28458_i16) << _3.1.1;
_3.1.2 = 15987346251662634553_u64 as i32;
RET = -_3.1.1;
_3.1.2 = 1223327015_i32;
_3.1 = (_6, RET, 824421527_i32);
_5 = !_4;
_3.1.2 = 9223372036854775807_isize as i32;
_3.1.1 = RET;
_7 = _4 & _4;
RET = _3.1.1;
_2 = _5 >= _6;
_3.1 = (_5, RET, (-1206160765_i32));
_1 = [_3.1.2];
_3.1.2 = 9223372036854775807_isize as i32;
_3.0 = (-12601_i16);
_3.1.0 = _6 > _6;
_3.1 = (_2, RET, (-1278444558_i32));
match _3.1.2 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
340282366920938463463374607430489766898 => bb7,
_ => bb6
}
}
bb12 = {
_7 = !_4;
Call(_11.0 = fn15(_5, _3, _2, _3, _3, _2, _7, _6, _4, _3, _3.1, _3), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
_3.1.1 = RET;
_11.0 = 13424077819040710774_usize;
_12 = 16193342525517002835_u64 as isize;
_3.1.0 = !_4;
_1 = [_3.1.2];
_1 = [_8];
match _11.1 {
0 => bb1,
1 => bb8,
2 => bb6,
3 => bb7,
104402642715079801071614661438582529666 => bb15,
_ => bb14
}
}
bb14 = {
_3.1 = (_4, RET, (-1279790606_i32));
_3.1 = (_5, RET, 1887668457_i32);
_3.1.0 = RET <= RET;
_11.1 = 255_u8 as u128;
_8 = 71_i8 as i32;
_6 = !_5;
_11.0 = 2_usize & 4_usize;
_11.1 = 138071370101294412118937995012010273946_u128 >> _3.1.2;
_3.0 = 17573_i16;
_7 = _5;
_13 = !9223372036854775807_isize;
_3.1.1 = '\u{779f5}' as i64;
_8 = '\u{fef2e}' as i32;
_2 = _3.1.2 < _3.1.2;
_9 = [_13,_13,_13,_13,_13,_13,_13,_13];
_7 = !_5;
_3.0 = 13781_i16 * 15144_i16;
_3.1.0 = _2;
_3.1.1 = RET;
Call(_11.0 = core::intrinsics::transmute(_3.1.1), ReturnTo(bb8), UnwindUnreachable())
}
bb15 = {
RET = !_3.1.1;
RET = _3.1.1 * _3.1.1;
_12 = !_13;
_8 = _3.1.2;
_1 = [_8];
_6 = _2 & _2;
_7 = _4;
_11 = (4207523285270694900_usize, 223462342182404813891656340537277043910_u128);
RET = _3.1.1 | _3.1.1;
_9 = [_12,_12,_12,_13,_12,_12,_13,_12];
_9 = [_13,_13,_12,_12,_13,_12,_13,_13];
_17 = _12 * _12;
_3.0 = _15 | _15;
Goto(bb16)
}
bb16 = {
Call(_20 = dump_var(13_usize, 4_usize, Move(_4), 1_usize, Move(_1), 14_usize, Move(_14), 17_usize, Move(_17)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_20 = dump_var(13_usize, 8_usize, Move(_8), 2_usize, Move(_2), 13_usize, Move(_13), 21_usize, _21), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn14(mut _1: bool,mut _2: bool,mut _3: bool,mut _4: [i32; 1],mut _5: bool,mut _6: bool) -> (bool, i64, i32) {
mir! {
type RET = (bool, i64, i32);
let _7: (bool, i64, i32);
let _8: [isize; 8];
let _9: char;
let _10: ();
let _11: ();
{
_1 = !_2;
RET.0 = _1 & _5;
RET.1 = -(-2058555214136665616_i64);
RET.2 = 1122920948808458659_usize as i32;
RET.2 = 628591023_i32;
_4 = [RET.2];
_7.2 = '\u{10e579}' as i32;
_5 = !_2;
_6 = !_5;
Goto(bb1)
}
bb1 = {
Call(_10 = dump_var(14_usize, 3_usize, Move(_3), 4_usize, Move(_4), 2_usize, Move(_2), 11_usize, _11), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn15(mut _1: bool,mut _2: (i16, (bool, i64, i32)),mut _3: bool,mut _4: (i16, (bool, i64, i32)),mut _5: (i16, (bool, i64, i32)),mut _6: bool,mut _7: bool,mut _8: bool,mut _9: bool,mut _10: (i16, (bool, i64, i32)),mut _11: (bool, i64, i32),mut _12: (i16, (bool, i64, i32))) -> usize {
mir! {
type RET = usize;
let _13: Adt52;
let _14: Adt56;
let _15: [isize; 3];
let _16: (f32, i8, usize, i128, u8, u32);
let _17: [usize; 4];
let _18: i64;
let _19: Adt49;
let _20: Adt61;
let _21: [u128; 7];
let _22: (bool, i64, i32);
let _23: [usize; 4];
let _24: isize;
let _25: f32;
let _26: [char; 4];
let _27: bool;
let _28: Adt46;
let _29: (u32, i128, [usize; 8]);
let _30: bool;
let _31: char;
let _32: u8;
let _33: Adt58;
let _34: bool;
let _35: f64;
let _36: (usize, u128);
let _37: (usize, u128);
let _38: [u64; 7];
let _39: isize;
let _40: (i64, (isize, u64, char), i8, [usize; 4], char, f32, *const i128, u128);
let _41: i16;
let _42: *mut [i32; 5];
let _43: (u32, i128, [usize; 8]);
let _44: (usize, u128);
let _45: [usize; 4];
let _46: u32;
let _47: isize;
let _48: ();
let _49: ();
{
_7 = _1;
_2.1.2 = !_5.1.2;
Goto(bb1)
}
bb1 = {
RET = !2_usize;
_14.fld0.2 = [RET,RET,RET,RET,RET,RET,RET,RET];
_2.1.0 = _7;
_4.1.0 = !_8;
_2.1.0 = !_1;
_12.1.1 = !_4.1.1;
_4.0 = _2.0;
_14.fld0.1 = 142710367210856007190358704039474440765_i128 & (-4199020085637467331192081016793567081_i128);
_11.0 = !_3;
_8 = _10.1.0;
_14.fld0.2 = [RET,RET,RET,RET,RET,RET,RET,RET];
_3 = !_1;
_5.1 = _2.1;
_11 = (_2.1.0, _5.1.1, _5.1.2);
Goto(bb2)
}
bb2 = {
_17 = [RET,RET,RET,RET];
_14.fld0.2 = [RET,RET,RET,RET,RET,RET,RET,RET];
_12.1.0 = !_9;
_10.1.1 = _10.1.2 as i64;
_4.1.0 = _9 | _8;
_14.fld0.1 = (-113931274754436654141591537186417225933_i128) & 91007218529355829625248852648456264828_i128;
_12.1 = (_3, _2.1.1, _5.1.2);
_5 = (_12.0, _4.1);
Goto(bb3)
}
bb3 = {
_12.1 = _2.1;
_14.fld0.2 = [RET,RET,RET,RET,RET,RET,RET,RET];
_5.1 = (_6, _12.1.1, _4.1.2);
_5.1.0 = _2.1.0 >= _3;
_7 = !_6;
_16.3 = -_14.fld0.1;
_20.fld6.6 = core::ptr::addr_of!(_14.fld0.1);
_5.1.0 = _3;
_18 = 70_i8 as i64;
_5 = _10;
_10 = (_4.0, _12.1);
_12.1.2 = _11.2 << _10.1.1;
_11.2 = RET as i32;
_14.fld0.0 = _4.0 as u32;
_21 = [40433079649142814428728355249390621774_u128,36193887381137711073338289723842056894_u128,64689491740821259212041311826621279143_u128,247053493515167236455183562777703609954_u128,157413649852694355045557438277835689656_u128,79377886862203965206948663445942073006_u128,199568906192142607696026020246272397558_u128];
_16.2 = RET;
_12.0 = _4.0;
_20.fld6.1.0 = 9223372036854775807_isize;
_9 = _8 & _7;
_12.1 = (_3, _10.1.1, _5.1.2);
match _20.fld6.1.0 {
9223372036854775807 => bb4,
_ => bb2
}
}
bb4 = {
_10.1.0 = _1 >= _1;
_20.fld6.6 = core::ptr::addr_of!(_16.3);
_4.1.0 = !_9;
_4 = _12;
_20.fld6.1.2 = '\u{b6637}';
_14.fld0.2 = [_16.2,_16.2,_16.2,RET,RET,_16.2,RET,RET];
_25 = 118_u8 as f32;
_12 = _2;
_20.fld6.6 = core::ptr::addr_of!(_16.3);
_20.fld6.1 = ((-9223372036854775808_isize), 9676623149440307174_u64, '\u{4dee1}');
_15 = [_20.fld6.1.0,_20.fld6.1.0,_20.fld6.1.0];
_4.1.0 = !_5.1.0;
_10.1.0 = _8 >= _11.0;
_2 = (_4.0, _12.1);
_20.fld6.6 = core::ptr::addr_of!(_14.fld0.1);
_20.fld6.7 = !226149485393016774499867347761439424839_u128;
_15 = [_20.fld6.1.0,_20.fld6.1.0,_20.fld6.1.0];
_16.4 = _10.0 as u8;
_24 = _20.fld6.1.0 + _20.fld6.1.0;
Goto(bb5)
}
bb5 = {
_20.fld0 = [_20.fld6.1.1,_20.fld6.1.1,_20.fld6.1.1,_20.fld6.1.1,_20.fld6.1.1,_20.fld6.1.1];
_20.fld2 = !45220_u16;
_14.fld0.2 = [RET,RET,RET,RET,_16.2,_16.2,RET,_16.2];
_17 = [_16.2,RET,_16.2,RET];
_22.0 = _7;
_17 = [RET,_16.2,_16.2,RET];
_30 = _12.1.0;
Call(_2.1.1 = core::intrinsics::bswap(_10.1.1), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
_20.fld6.4 = _20.fld6.1.2;
_4.0 = _12.0;
_20.fld0 = [_20.fld6.1.1,_20.fld6.1.1,_20.fld6.1.1,_20.fld6.1.1,_20.fld6.1.1,_20.fld6.1.1];
_23 = [RET,_16.2,RET,_16.2];
_2.1 = _12.1;
_23 = _17;
_26 = [_20.fld6.1.2,_20.fld6.4,_20.fld6.4,_20.fld6.1.2];
_22.1 = _11.1;
_2.1.0 = _22.0;
_2 = (_12.0, _10.1);
_5.1 = _11;
_26 = [_20.fld6.1.2,_20.fld6.1.2,_20.fld6.4,_20.fld6.1.2];
_22 = _10.1;
_12.1.1 = !_11.1;
_12.1.1 = _11.1;
_12.1.1 = _10.1.1;
_16.0 = _25;
_20.fld6.5 = -_25;
_16.4 = _20.fld6.7 as u8;
_20.fld6.6 = core::ptr::addr_of!(_16.3);
_22.2 = _4.1.2;
_16 = (_20.fld6.5, (-64_i8), RET, _14.fld0.1, 162_u8, _14.fld0.0);
Goto(bb7)
}
bb7 = {
_36 = (_16.2, _20.fld6.7);
_35 = _16.1 as f64;
_26 = [_20.fld6.4,_20.fld6.4,_20.fld6.1.2,_20.fld6.1.2];
_1 = _9 ^ _10.1.0;
_10.1 = _5.1;
_20.fld6.6 = core::ptr::addr_of!(_29.1);
_22.1 = _5.1.1 | _10.1.1;
_2.0 = _10.0;
_29.1 = !_16.3;
_29.1 = !_14.fld0.1;
_9 = _11.0 >= _10.1.0;
_10 = (_4.0, _4.1);
_31 = _20.fld6.4;
_5.1.2 = _12.1.0 as i32;
_4.0 = _10.0 & _10.0;
_24 = _20.fld6.1.0 >> _5.1.2;
_14.fld0.2 = [RET,RET,RET,_36.0,_36.0,_16.2,_36.0,RET];
Goto(bb8)
}
bb8 = {
_40.4 = _31;
_15 = [_24,_24,_24];
_10.1 = (_1, _2.1.1, _5.1.2);
_12.1.2 = _16.5 as i32;
_36 = (RET, _20.fld6.7);
_40.0 = _22.1 << _24;
_24 = -_20.fld6.1.0;
_20.fld6.1.0 = _24 * _24;
_40 = (_4.1.1, _20.fld6.1, _16.1, _17, _20.fld6.1.2, _20.fld6.5, _20.fld6.6, _36.1);
_16.0 = _20.fld6.5 + _40.5;
_4.1.2 = _24 as i32;
_5.1.0 = !_8;
_5.1.0 = !_3;
_20.fld4 = Adt55::Variant2 { fld0: _15,fld1: _4.0 };
match _20.fld6.1.1 {
0 => bb9,
1 => bb10,
2 => bb11,
3 => bb12,
9676623149440307174 => bb14,
_ => bb13
}
}
bb9 = {
RET = !2_usize;
_14.fld0.2 = [RET,RET,RET,RET,RET,RET,RET,RET];
_2.1.0 = _7;
_4.1.0 = !_8;
_2.1.0 = !_1;
_12.1.1 = !_4.1.1;
_4.0 = _2.0;
_14.fld0.1 = 142710367210856007190358704039474440765_i128 & (-4199020085637467331192081016793567081_i128);
_11.0 = !_3;
_8 = _10.1.0;
_14.fld0.2 = [RET,RET,RET,RET,RET,RET,RET,RET];
_3 = !_1;
_5.1 = _2.1;
_11 = (_2.1.0, _5.1.1, _5.1.2);
Goto(bb2)
}
bb10 = {
_17 = [RET,RET,RET,RET];
_14.fld0.2 = [RET,RET,RET,RET,RET,RET,RET,RET];
_12.1.0 = !_9;
_10.1.1 = _10.1.2 as i64;
_4.1.0 = _9 | _8;
_14.fld0.1 = (-113931274754436654141591537186417225933_i128) & 91007218529355829625248852648456264828_i128;
_12.1 = (_3, _2.1.1, _5.1.2);
_5 = (_12.0, _4.1);
Goto(bb3)
}
bb11 = {
_20.fld0 = [_20.fld6.1.1,_20.fld6.1.1,_20.fld6.1.1,_20.fld6.1.1,_20.fld6.1.1,_20.fld6.1.1];
_20.fld2 = !45220_u16;
_14.fld0.2 = [RET,RET,RET,RET,_16.2,_16.2,RET,_16.2];
_17 = [_16.2,RET,_16.2,RET];
_22.0 = _7;
_17 = [RET,_16.2,_16.2,RET];
_30 = _12.1.0;
Call(_2.1.1 = core::intrinsics::bswap(_10.1.1), ReturnTo(bb6), UnwindUnreachable())
}
bb12 = {
_10.1.0 = _1 >= _1;
_20.fld6.6 = core::ptr::addr_of!(_16.3);
_4.1.0 = !_9;
_4 = _12;
_20.fld6.1.2 = '\u{b6637}';
_14.fld0.2 = [_16.2,_16.2,_16.2,RET,RET,_16.2,RET,RET];
_25 = 118_u8 as f32;
_12 = _2;
_20.fld6.6 = core::ptr::addr_of!(_16.3);
_20.fld6.1 = ((-9223372036854775808_isize), 9676623149440307174_u64, '\u{4dee1}');
_15 = [_20.fld6.1.0,_20.fld6.1.0,_20.fld6.1.0];
_4.1.0 = !_5.1.0;
_10.1.0 = _8 >= _11.0;
_2 = (_4.0, _12.1);
_20.fld6.6 = core::ptr::addr_of!(_14.fld0.1);
_20.fld6.7 = !226149485393016774499867347761439424839_u128;
_15 = [_20.fld6.1.0,_20.fld6.1.0,_20.fld6.1.0];
_16.4 = _10.0 as u8;
_24 = _20.fld6.1.0 + _20.fld6.1.0;
Goto(bb5)
}
bb13 = {
_12.1 = _2.1;
_14.fld0.2 = [RET,RET,RET,RET,RET,RET,RET,RET];
_5.1 = (_6, _12.1.1, _4.1.2);
_5.1.0 = _2.1.0 >= _3;
_7 = !_6;
_16.3 = -_14.fld0.1;
_20.fld6.6 = core::ptr::addr_of!(_14.fld0.1);
_5.1.0 = _3;
_18 = 70_i8 as i64;
_5 = _10;
_10 = (_4.0, _12.1);
_12.1.2 = _11.2 << _10.1.1;
_11.2 = RET as i32;
_14.fld0.0 = _4.0 as u32;
_21 = [40433079649142814428728355249390621774_u128,36193887381137711073338289723842056894_u128,64689491740821259212041311826621279143_u128,247053493515167236455183562777703609954_u128,157413649852694355045557438277835689656_u128,79377886862203965206948663445942073006_u128,199568906192142607696026020246272397558_u128];
_16.2 = RET;
_12.0 = _4.0;
_20.fld6.1.0 = 9223372036854775807_isize;
_9 = _8 & _7;
_12.1 = (_3, _10.1.1, _5.1.2);
match _20.fld6.1.0 {
9223372036854775807 => bb4,
_ => bb2
}
}
bb14 = {
_32 = !_16.4;
_20.fld6 = (_40.0, _40.1, _16.1, _17, _40.1.2, _40.5, _40.6, _36.1);
_43 = (_14.fld0.0, _16.3, _14.fld0.2);
_16.0 = _20.fld6.5 + _20.fld6.5;
_34 = !_5.1.0;
_10.1.1 = !_5.1.1;
_40.7 = !_36.1;
_22.1 = _5.1.1;
_40.2 = _20.fld6.2 * _16.1;
_36.0 = RET >> _2.1.1;
_19 = Adt49::Variant2 { fld0: _26,fld1: _20.fld6.6,fld2: _20.fld6 };
_42 = core::ptr::addr_of_mut!(_20.fld5);
_16.3 = -_14.fld0.1;
place!(Field::<(isize, u64, char)>(Variant(_19, 1), 3)) = _20.fld6.1;
_27 = !_8;
_16.1 = _40.2 * _20.fld6.2;
_38 = [_40.1.1,_40.1.1,_20.fld6.1.1,_40.1.1,_40.1.1,_20.fld6.1.1,_40.1.1];
place!(Field::<(isize, u64, char)>(Variant(_19, 1), 3)).2 = _31;
_20.fld6.0 = _4.1.1 << _5.1.2;
_2.1.0 = !_9;
Goto(bb15)
}
bb15 = {
Call(_48 = dump_var(15_usize, 31_usize, Move(_31), 4_usize, Move(_4), 7_usize, Move(_7), 30_usize, Move(_30)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_48 = dump_var(15_usize, 21_usize, Move(_21), 15_usize, Move(_15), 3_usize, Move(_3), 26_usize, Move(_26)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_48 = dump_var(15_usize, 22_usize, Move(_22), 43_usize, Move(_43), 11_usize, Move(_11), 1_usize, Move(_1)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_48 = dump_var(15_usize, 23_usize, Move(_23), 5_usize, Move(_5), 49_usize, _49, 49_usize, _49), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn16(mut _1: isize,mut _2: (isize, u64, char),mut _3: *mut [i32; 5],mut _4: i32) -> [isize; 3] {
mir! {
type RET = [isize; 3];
let _5: isize;
let _6: ();
let _7: ();
{
RET = [_2.0,_1,_2.0];
_4 = 1448246009_i32;
_2.1 = !11397753370508979354_u64;
_2.0 = !_1;
RET = [_1,_2.0,_2.0];
_2.1 = 2235267582844223205_i64 as u64;
RET = [_2.0,_2.0,_1];
_1 = 19948342161655458265828895360563312057_i128 as isize;
_2.1 = 6924551284078315190_u64 - 10374616250976643463_u64;
RET = [_2.0,_2.0,_2.0];
_1 = 3673005097735205781_i64 as isize;
_4 = !1533490444_i32;
_2.2 = '\u{d42bd}';
_2.0 = _2.2 as isize;
_2.2 = '\u{777c1}';
_2 = (_1, 7402861923974441339_u64, '\u{6c326}');
_2 = (_1, 4787562066391409886_u64, '\u{b7412}');
_2 = (_1, 8698813759541750197_u64, '\u{4c9d0}');
Goto(bb1)
}
bb1 = {
Call(_6 = dump_var(16_usize, 1_usize, Move(_1), 7_usize, _7, 7_usize, _7, 7_usize, _7), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn17(mut _1: isize,mut _2: [i32; 5]) -> [usize; 4] {
mir! {
type RET = [usize; 4];
let _3: [u128; 7];
let _4: usize;
let _5: [usize; 4];
let _6: Adt47;
let _7: *mut usize;
let _8: Adt52;
let _9: f64;
let _10: i32;
let _11: f32;
let _12: usize;
let _13: ();
let _14: ();
{
RET = [4_usize,9170714680696062471_usize,18241151488692053277_usize,4_usize];
_1 = (-61_isize);
RET = [2_usize,6_usize,6_usize,4_usize];
RET = [12750922445160710967_usize,6_usize,6_usize,0_usize];
RET = [14753922780241391665_usize,8805106692777679338_usize,3492276413219638975_usize,2_usize];
_3 = [242032928474608322350567113980033532462_u128,293300342912217525361288925266092063629_u128,146181774371161236604389847379840768814_u128,210672651338337678048805447396855402921_u128,176523629890620293909242142413756844956_u128,108497249497746889482692942972992217254_u128,142131172287508901923354862126320273119_u128];
_2 = [1846380620_i32,(-67571262_i32),(-1986813230_i32),1302041647_i32,1921463615_i32];
_1 = 57_isize;
_2 = [587292460_i32,2120699229_i32,(-1070368849_i32),(-1856466463_i32),2045633266_i32];
_2 = [651507149_i32,1570132589_i32,2115963719_i32,157810904_i32,121846673_i32];
match _1 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
57 => bb6,
_ => bb5
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
_1 = !(-9223372036854775808_isize);
_3 = [178013859305367524105514361178395839727_u128,95969011711306845304928677342481587013_u128,240383201457236882047187340532191621457_u128,19517984946087538873240763684496024526_u128,316186398728663451269609659408342301364_u128,291300681466181741866060633625343610003_u128,167390959321095335290998939376227798497_u128];
_4 = 7_usize;
RET = [_4,_4,_4,_4];
_2 = [826043649_i32,1460578528_i32,116660431_i32,1976420460_i32,1749987302_i32];
RET = [_4,_4,_4,_4];
RET = [_4,_4,_4,_4];
_5 = RET;
RET = _5;
_7 = core::ptr::addr_of_mut!(_4);
_3 = [182773267228762933310132759287393811424_u128,12758117413780732846383827944533383385_u128,202758581958292508626245429562851920426_u128,137591284336584939511425660533749301326_u128,39775323293518715396819403466568204259_u128,211950906367085174990113920134399393474_u128,283004198443969513043198934516668464970_u128];
_1 = 19_isize << (*_7);
_7 = core::ptr::addr_of_mut!((*_7));
_7 = core::ptr::addr_of_mut!(_4);
_5 = RET;
RET = _5;
_1 = (-9223372036854775808_isize);
_9 = _1 as f64;
_4 = 16394282964012429919_usize;
RET = [(*_7),(*_7),(*_7),(*_7)];
_2 = [(-1869418647_i32),1694368843_i32,621346172_i32,1173263373_i32,531680010_i32];
RET = [_4,_4,_4,(*_7)];
_7 = core::ptr::addr_of_mut!((*_7));
_1 = 124_isize;
match _4 {
0 => bb5,
1 => bb7,
2 => bb8,
3 => bb9,
4 => bb10,
5 => bb11,
16394282964012429919 => bb13,
_ => bb12
}
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
Return()
}
bb12 = {
Return()
}
bb13 = {
RET = [_4,_4,_4,_4];
_10 = (-98790103_i32);
_5 = [(*_7),(*_7),_4,(*_7)];
_3 = [25434921550281346626209747083744346850_u128,56545023841876747905184692952582629860_u128,169987086801193408588045103183161646832_u128,272051733546946638382397479372815830540_u128,248205819818876690383926325071043459653_u128,244615664085302253293676827344905941243_u128,85477576341554066069310646527041207562_u128];
RET = [(*_7),(*_7),_4,(*_7)];
_4 = 14170331336920999123_usize;
Goto(bb14)
}
bb14 = {
_10 = 1885429498_i32;
_4 = 1_usize;
_7 = core::ptr::addr_of_mut!(RET[_4]);
RET[_4] = _4;
_5 = RET;
_5 = RET;
_5[_4] = !_4;
_7 = core::ptr::addr_of_mut!(_5[_4]);
_10 = _2[_4] << _2[_4];
RET = [(*_7),(*_7),(*_7),_4];
Goto(bb15)
}
bb15 = {
Call(_13 = dump_var(17_usize, 4_usize, Move(_4), 1_usize, Move(_1), 2_usize, Move(_2), 14_usize, _14), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn18(mut _1: [i32; 5],mut _2: *mut [i32; 5],mut _3: u128,mut _4: usize,mut _5: [isize; 3],mut _6: u64,mut _7: isize,mut _8: bool,mut _9: u128,mut _10: isize) -> Adt59 {
mir! {
type RET = Adt59;
let _11: i8;
let _12: f32;
let _13: (usize, u128);
let _14: Adt59;
let _15: [isize; 8];
let _16: f32;
let _17: f32;
let _18: f64;
let _19: f64;
let _20: Adt57;
let _21: (bool, i64, i32);
let _22: Adt58;
let _23: bool;
let _24: bool;
let _25: f64;
let _26: char;
let _27: Adt61;
let _28: [usize; 4];
let _29: u8;
let _30: Adt51;
let _31: (usize, u128);
let _32: (i16, (bool, i64, i32));
let _33: i8;
let _34: f64;
let _35: [u64; 6];
let _36: bool;
let _37: bool;
let _38: i128;
let _39: *const i128;
let _40: isize;
let _41: [usize; 8];
let _42: [i32; 1];
let _43: u16;
let _44: [i32; 5];
let _45: bool;
let _46: char;
let _47: (i64, (isize, u64, char), i8, [usize; 4], char, f32, *const i128, u128);
let _48: *const i64;
let _49: ();
let _50: ();
{
_2 = core::ptr::addr_of_mut!(_1);
RET = Adt59::Variant2 { fld0: _5 };
_3 = _9 ^ _9;
_2 = core::ptr::addr_of_mut!((*_2));
_9 = _4 as u128;
_8 = true;
_6 = 9301510398970795185_u64;
_8 = _10 > _10;
_4 = !11567749243240670861_usize;
place!(Field::<bool>(Variant(RET, 0), 0)) = !_8;
place!(Field::<u8>(Variant(RET, 0), 4)) = !248_u8;
_5 = [_7,_7,_10];
place!(Field::<u8>(Variant(RET, 0), 4)) = _6 as u8;
_6 = !15430758742887663077_u64;
_1 = [(-1006895030_i32),44483908_i32,(-867299992_i32),285795507_i32,1680026545_i32];
_2 = core::ptr::addr_of_mut!((*_2));
place!(Field::<i8>(Variant(RET, 0), 3)) = (-109_i8);
_2 = core::ptr::addr_of_mut!((*_2));
place!(Field::<f64>(Variant(RET, 0), 1)) = 39354_u16 as f64;
_8 = Field::<bool>(Variant(RET, 0), 0);
_13.0 = (-129069405304857031216925213732327832756_i128) as usize;
place!(Field::<f64>(Variant(RET, 0), 1)) = (-3043144188454494855_i64) as f64;
place!(Field::<i64>(Variant(RET, 0), 5)) = (-4529671655684668317_i64);
RET = Adt59::Variant2 { fld0: _5 };
Goto(bb1)
}
bb1 = {
_4 = !_13.0;
_3 = _9 << _10;
_12 = _10 as f32;
SetDiscriminant(RET, 1);
place!(Field::<[usize; 4]>(Variant(RET, 1), 0)) = [_13.0,_13.0,_13.0,_4];
place!(Field::<u8>(Variant(RET, 0), 4)) = 179_u8 >> _3;
place!(Field::<f64>(Variant(RET, 0), 1)) = _6 as f64;
place!(Field::<i8>(Variant(RET, 0), 3)) = (-46908451807184794306979850603811435231_i128) as i8;
place!(Field::<i64>(Variant(RET, 0), 5)) = -(-1691655785978466025_i64);
_15 = [_10,_10,_10,_7,_10,_10,_10,_10];
place!(Field::<bool>(Variant(RET, 0), 0)) = _8;
place!(Field::<i64>(Variant(RET, 0), 5)) = 8325476824536518652_i64 >> _3;
_10 = _7 & _7;
place!(Field::<i8>(Variant(RET, 0), 3)) = -5_i8;
_13.1 = (-548261769_i32) as u128;
_9 = !_3;
_2 = core::ptr::addr_of_mut!(_1);
_14 = Adt59::Variant2 { fld0: _5 };
SetDiscriminant(_14, 1);
Goto(bb2)
}
bb2 = {
_13.0 = !_4;
Call(_9 = core::intrinsics::bswap(_3), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_14 = Adt59::Variant2 { fld0: _5 };
_16 = _12;
place!(Field::<u8>(Variant(RET, 0), 4)) = 12_u8;
_18 = Field::<f64>(Variant(RET, 0), 1) - Field::<f64>(Variant(RET, 0), 1);
_19 = _18;
_9 = _3 >> _13.0;
_19 = -_18;
place!(Field::<[isize; 3]>(Variant(_14, 2), 0)) = _5;
_17 = -_12;
_7 = 2855677929_u32 as isize;
RET = Move(_14);
_17 = _16;
_15 = [_10,_10,_10,_7,_10,_7,_10,_10];
_14 = Adt59::Variant2 { fld0: _5 };
_18 = -_19;
_7 = _10;
SetDiscriminant(RET, 1);
_13.0 = !_4;
_17 = 3275598951_u32 as f32;
place!(Field::<bool>(Variant(_14, 0), 0)) = _8;
_2 = core::ptr::addr_of_mut!((*_2));
place!(Field::<i8>(Variant(_14, 0), 3)) = _8 as i8;
_10 = _7;
_13.0 = _4 ^ _4;
_11 = Field::<i8>(Variant(_14, 0), 3) << Field::<i8>(Variant(_14, 0), 3);
Goto(bb4)
}
bb4 = {
_21.1 = (-1268354303107258011_i64);
_8 = _10 == _7;
place!(Field::<[usize; 4]>(Variant(RET, 1), 0)) = [_13.0,_13.0,_13.0,_13.0];
place!(Field::<f64>(Variant(_14, 0), 1)) = _19;
_4 = _13.0;
_15 = [_10,_10,_7,_7,_7,_10,_10,_10];
_24 = _8;
_6 = !14389807781283202669_u64;
_26 = '\u{f24a8}';
_27.fld1 = Move(RET);
_25 = 126_u8 as f64;
_21.0 = _8;
_8 = !_24;
_14 = Move(_27.fld1);
_27.fld6.2 = _10 as i8;
_27.fld6.3 = Field::<[usize; 4]>(Variant(_14, 1), 0);
_13.1 = _9;
_7 = _10 & _10;
place!(Field::<u8>(Variant(_14, 0), 4)) = _7 as u8;
_13.0 = !_4;
_27.fld6.1 = (_7, _6, _26);
match _21.1 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb5,
4 => bb6,
340282366920938463462106253128660953445 => bb8,
_ => bb7
}
}
bb5 = {
_14 = Adt59::Variant2 { fld0: _5 };
_16 = _12;
place!(Field::<u8>(Variant(RET, 0), 4)) = 12_u8;
_18 = Field::<f64>(Variant(RET, 0), 1) - Field::<f64>(Variant(RET, 0), 1);
_19 = _18;
_9 = _3 >> _13.0;
_19 = -_18;
place!(Field::<[isize; 3]>(Variant(_14, 2), 0)) = _5;
_17 = -_12;
_7 = 2855677929_u32 as isize;
RET = Move(_14);
_17 = _16;
_15 = [_10,_10,_10,_7,_10,_7,_10,_10];
_14 = Adt59::Variant2 { fld0: _5 };
_18 = -_19;
_7 = _10;
SetDiscriminant(_14, 0);
SetDiscriminant(RET, 1);
_13.0 = !_4;
_17 = 3275598951_u32 as f32;
place!(Field::<bool>(Variant(_14, 0), 0)) = _8;
_2 = core::ptr::addr_of_mut!((*_2));
place!(Field::<i8>(Variant(_14, 0), 3)) = _8 as i8;
_10 = _7;
_13.0 = _4 ^ _4;
_11 = Field::<i8>(Variant(_14, 0), 3) << Field::<i8>(Variant(_14, 0), 3);
Goto(bb4)
}
bb6 = {
_13.0 = !_4;
Call(_9 = core::intrinsics::bswap(_3), ReturnTo(bb3), UnwindUnreachable())
}
bb7 = {
_4 = !_13.0;
_3 = _9 << _10;
_12 = _10 as f32;
SetDiscriminant(RET, 1);
place!(Field::<[usize; 4]>(Variant(RET, 1), 0)) = [_13.0,_13.0,_13.0,_4];
SetDiscriminant(RET, 0);
place!(Field::<u8>(Variant(RET, 0), 4)) = 179_u8 >> _3;
place!(Field::<f64>(Variant(RET, 0), 1)) = _6 as f64;
place!(Field::<i8>(Variant(RET, 0), 3)) = (-46908451807184794306979850603811435231_i128) as i8;
place!(Field::<i64>(Variant(RET, 0), 5)) = -(-1691655785978466025_i64);
_15 = [_10,_10,_10,_7,_10,_10,_10,_10];
place!(Field::<bool>(Variant(RET, 0), 0)) = _8;
place!(Field::<i64>(Variant(RET, 0), 5)) = 8325476824536518652_i64 >> _3;
_10 = _7 & _7;
place!(Field::<i8>(Variant(RET, 0), 3)) = -5_i8;
_13.1 = (-548261769_i32) as u128;
_9 = !_3;
_2 = core::ptr::addr_of_mut!(_1);
_14 = Adt59::Variant2 { fld0: _5 };
SetDiscriminant(_14, 1);
Goto(bb2)
}
bb8 = {
_27.fld3 = _19 as f32;
_29 = !Field::<u8>(Variant(_14, 0), 4);
place!(Field::<bool>(Variant(_14, 0), 0)) = !_8;
_13 = (_4, _3);
_13.1 = _3 << Field::<u8>(Variant(_14, 0), 4);
_23 = !Field::<bool>(Variant(_14, 0), 0);
_21 = (_23, (-3975144487207918135_i64), 1390413947_i32);
_9 = _18 as u128;
_27.fld6.0 = _21.1;
_32.0 = !18069_i16;
_21 = (_8, _27.fld6.0, 1218569526_i32);
_5 = [_7,_7,_27.fld6.1.0];
_27.fld6.5 = _13.1 as f32;
place!(Field::<i8>(Variant(_14, 0), 3)) = _13.1 as i8;
_31.1 = _3 << _27.fld6.2;
_27.fld0 = [_6,_27.fld6.1.1,_27.fld6.1.1,_27.fld6.1.1,_6,_27.fld6.1.1];
_27.fld1 = Adt59::Variant2 { fld0: _5 };
_32 = ((-21489_i16), _21);
_17 = -_27.fld6.5;
_27.fld6.1 = (_7, _6, _26);
_14 = Adt59::Variant1 { fld0: _27.fld6.3 };
RET = Move(_27.fld1);
_33 = _4 as i8;
_23 = _24;
_33 = 2836739395_u32 as i8;
_27.fld6.3 = Field::<[usize; 4]>(Variant(_14, 1), 0);
SetDiscriminant(RET, 2);
_18 = -_19;
_15 = [_27.fld6.1.0,_10,_7,_7,_7,_10,_10,_27.fld6.1.0];
Goto(bb9)
}
bb9 = {
_27.fld0 = [_6,_6,_6,_6,_6,_6];
_32.1 = (_21.0, _27.fld6.0, _21.2);
_8 = !_21.0;
_27.fld6.1 = (_7, _6, _26);
_14 = Adt59::Variant1 { fld0: _27.fld6.3 };
Goto(bb10)
}
bb10 = {
_32 = ((-7827_i16), _21);
_18 = 27098_u16 as f64;
_34 = -_19;
_10 = _32.1.2 as isize;
_32.1 = _21;
_21 = _32.1;
_27.fld6.3 = Field::<[usize; 4]>(Variant(_14, 1), 0);
_27.fld6.1.2 = _26;
SetDiscriminant(_14, 2);
_27.fld6.2 = _11 - _11;
_21.2 = _18 as i32;
_27.fld3 = 398_u16 as f32;
_11 = _32.1.2 as i8;
_27.fld6.1.2 = _26;
match _32.1.2 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb7,
5 => bb6,
1218569526 => bb12,
_ => bb11
}
}
bb11 = {
_13.0 = !_4;
Call(_9 = core::intrinsics::bswap(_3), ReturnTo(bb3), UnwindUnreachable())
}
bb12 = {
_37 = _32.1.2 >= _32.1.2;
_27.fld6.3 = [_4,_4,_4,_4];
_27.fld6.5 = _17 + _17;
_31 = (_13.0, _13.1);
_27.fld6.6 = core::ptr::addr_of!(_38);
_17 = 397951167_u32 as f32;
_5 = [_7,_7,_10];
_27.fld2 = 4024_u16 + 39710_u16;
_27.fld6.2 = _27.fld6.5 as i8;
place!(Field::<[isize; 3]>(Variant(RET, 2), 0)) = [_7,_10,_10];
_32.0 = 24774_i16 - 4326_i16;
_26 = _27.fld6.1.2;
_27.fld6.1.2 = _26;
_24 = _21.0;
_32 = (20510_i16, _21);
_21 = (_32.1.0, _27.fld6.0, _32.1.2);
_27.fld1 = Move(RET);
_26 = _27.fld6.1.2;
_17 = _27.fld6.5;
_18 = _11 as f64;
_37 = _23 > _32.1.0;
_39 = core::ptr::addr_of!(_38);
Goto(bb13)
}
bb13 = {
_32.1.1 = -_27.fld6.0;
_21 = _32.1;
SetDiscriminant(_27.fld1, 1);
_27.fld6.1.1 = !_6;
_27.fld6.1.2 = _26;
_18 = _25;
_35 = _27.fld0;
place!(Field::<[usize; 4]>(Variant(_27.fld1, 1), 0)) = [_13.0,_4,_13.0,_13.0];
RET = Move(_27.fld1);
_21.2 = -_32.1.2;
_3 = _7 as u128;
_6 = _27.fld2 as u64;
_40 = _32.1.1 as isize;
_7 = _17 as isize;
_27.fld6.3 = [_31.0,_13.0,_4,_13.0];
_27.fld1 = Move(RET);
_47.1 = (_7, _6, _26);
_47.3 = [_31.0,_31.0,_4,_4];
_32.0 = (-13993_i16) ^ (-19557_i16);
_27.fld6.2 = _11 << _7;
_27.fld1 = Adt59::Variant1 { fld0: _47.3 };
Goto(bb14)
}
bb14 = {
_27.fld6.1.1 = _6 << _27.fld6.1.0;
_47.0 = _21.1;
_13.1 = _31.1 * _9;
_27.fld4 = Adt55::Variant2 { fld0: _5,fld1: _32.0 };
_18 = _25;
_47.1.2 = _27.fld6.1.2;
_47.2 = _27.fld6.1.2 as i8;
match _27.fld6.0 {
0 => bb9,
1 => bb11,
2 => bb15,
3 => bb16,
4 => bb17,
5 => bb18,
340282366920938463459399462944560293321 => bb20,
_ => bb19
}
}
bb15 = {
_13.0 = !_4;
Call(_9 = core::intrinsics::bswap(_3), ReturnTo(bb3), UnwindUnreachable())
}
bb16 = {
_37 = _32.1.2 >= _32.1.2;
_27.fld6.3 = [_4,_4,_4,_4];
_27.fld6.5 = _17 + _17;
_31 = (_13.0, _13.1);
_27.fld6.6 = core::ptr::addr_of!(_38);
_17 = 397951167_u32 as f32;
_5 = [_7,_7,_10];
_27.fld2 = 4024_u16 + 39710_u16;
_27.fld6.2 = _27.fld6.5 as i8;
place!(Field::<[isize; 3]>(Variant(RET, 2), 0)) = [_7,_10,_10];
_32.0 = 24774_i16 - 4326_i16;
_26 = _27.fld6.1.2;
_27.fld6.1.2 = _26;
_24 = _21.0;
_32 = (20510_i16, _21);
_21 = (_32.1.0, _27.fld6.0, _32.1.2);
_27.fld1 = Move(RET);
_26 = _27.fld6.1.2;
_17 = _27.fld6.5;
_18 = _11 as f64;
_37 = _23 > _32.1.0;
_39 = core::ptr::addr_of!(_38);
Goto(bb13)
}
bb17 = {
_4 = !_13.0;
_3 = _9 << _10;
_12 = _10 as f32;
SetDiscriminant(RET, 1);
place!(Field::<[usize; 4]>(Variant(RET, 1), 0)) = [_13.0,_13.0,_13.0,_4];
SetDiscriminant(RET, 0);
place!(Field::<u8>(Variant(RET, 0), 4)) = 179_u8 >> _3;
place!(Field::<f64>(Variant(RET, 0), 1)) = _6 as f64;
place!(Field::<i8>(Variant(RET, 0), 3)) = (-46908451807184794306979850603811435231_i128) as i8;
place!(Field::<i64>(Variant(RET, 0), 5)) = -(-1691655785978466025_i64);
_15 = [_10,_10,_10,_7,_10,_10,_10,_10];
place!(Field::<bool>(Variant(RET, 0), 0)) = _8;
place!(Field::<i64>(Variant(RET, 0), 5)) = 8325476824536518652_i64 >> _3;
_10 = _7 & _7;
place!(Field::<i8>(Variant(RET, 0), 3)) = -5_i8;
_13.1 = (-548261769_i32) as u128;
_9 = !_3;
_2 = core::ptr::addr_of_mut!(_1);
_14 = Adt59::Variant2 { fld0: _5 };
SetDiscriminant(_14, 1);
Goto(bb2)
}
bb18 = {
_21.1 = (-1268354303107258011_i64);
_8 = _10 == _7;
place!(Field::<[usize; 4]>(Variant(RET, 1), 0)) = [_13.0,_13.0,_13.0,_13.0];
place!(Field::<f64>(Variant(_14, 0), 1)) = _19;
_4 = _13.0;
_15 = [_10,_10,_7,_7,_7,_10,_10,_10];
_24 = _8;
_6 = !14389807781283202669_u64;
_26 = '\u{f24a8}';
_27.fld1 = Move(RET);
_25 = 126_u8 as f64;
_21.0 = _8;
_8 = !_24;
_14 = Move(_27.fld1);
_27.fld6.2 = _10 as i8;
_27.fld6.3 = Field::<[usize; 4]>(Variant(_14, 1), 0);
_13.1 = _9;
_7 = _10 & _10;
SetDiscriminant(_14, 0);
place!(Field::<u8>(Variant(_14, 0), 4)) = _7 as u8;
_13.0 = !_4;
_27.fld6.1 = (_7, _6, _26);
match _21.1 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb5,
4 => bb6,
340282366920938463462106253128660953445 => bb8,
_ => bb7
}
}
bb19 = {
_27.fld0 = [_6,_6,_6,_6,_6,_6];
_32.1 = (_21.0, _27.fld6.0, _21.2);
_8 = !_21.0;
_27.fld6.1 = (_7, _6, _26);
_14 = Adt59::Variant1 { fld0: _27.fld6.3 };
Goto(bb10)
}
bb20 = {
RET = Adt59::Variant2 { fld0: _5 };
Goto(bb21)
}
bb21 = {
Call(_49 = dump_var(18_usize, 9_usize, Move(_9), 1_usize, Move(_1), 4_usize, Move(_4), 21_usize, Move(_21)), ReturnTo(bb22), UnwindUnreachable())
}
bb22 = {
Call(_49 = dump_var(18_usize, 29_usize, Move(_29), 11_usize, Move(_11), 7_usize, Move(_7), 40_usize, Move(_40)), ReturnTo(bb23), UnwindUnreachable())
}
bb23 = {
Call(_49 = dump_var(18_usize, 32_usize, Move(_32), 37_usize, Move(_37), 24_usize, Move(_24), 50_usize, _50), ReturnTo(bb24), UnwindUnreachable())
}
bb24 = {
Return()
}

}
}
pub fn main() {
                fn0(std::hint::black_box(false), std::hint::black_box('\u{92c50}'), std::hint::black_box((-9223372036854775808_isize)), std::hint::black_box(674478346_i32), std::hint::black_box((-27538_i16)));
                
            }
#[derive(Debug)]
pub enum Adt46 {
Variant0{
fld0: i128,
fld1: *mut u64,
fld2: u128,
fld3: [usize; 8],

},
Variant1{
fld0: *mut u64,
fld1: [u64; 7],
fld2: isize,
fld3: *const i64,
fld4: [isize; 8],
fld5: [i16; 7],
fld6: i64,
fld7: *const i128,

},
Variant2{
fld0: (f32, i8, usize, i128, u8, u32),
fld1: *const u16,
fld2: (u32, i128, [usize; 8]),
fld3: u32,

},
Variant3{
fld0: ([i32; 5], u8),
fld1: u16,
fld2: [usize; 8],

}}
#[derive(Debug)]
pub enum Adt47 {
Variant0{
fld0: [isize; 8],
fld1: [usize; 8],
fld2: isize,
fld3: u32,
fld4: u8,
fld5: *const i128,
fld6: *const u16,
fld7: [bool; 7],

},
Variant1{
fld0: [isize; 8],
fld1: ([i32; 5], u8),
fld2: Adt46,
fld3: i8,
fld4: u32,
fld5: (usize, u128),
fld6: u8,

},
Variant2{
fld0: bool,
fld1: [i32; 5],
fld2: [usize; 8],
fld3: (u32, i128, [usize; 8]),
fld4: f32,
fld5: (usize, u128),

},
Variant3{
fld0: [usize; 8],
fld1: (isize, u64, char),
fld2: [i32; 1],

}}
#[derive(Debug)]
pub enum Adt48 {
Variant0{
fld0: u64,
fld1: [usize; 8],
fld2: Adt46,
fld3: *mut u64,
fld4: (i16, (bool, i64, i32)),

},
Variant1{
fld0: (isize, u64, char),
fld1: char,
fld2: [usize; 8],
fld3: usize,

},
Variant2{
fld0: (i16, (bool, i64, i32)),
fld1: (f32, i8, usize, i128, u8, u32),
fld2: u32,
fld3: (bool, i64, i32),
fld4: u16,
fld5: [i32; 1],
fld6: i64,

}}
#[derive(Debug)]
pub enum Adt49 {
Variant0{
fld0: [usize; 8],
fld1: *const u16,
fld2: isize,
fld3: usize,
fld4: *mut usize,
fld5: (bool, i64, i32),

},
Variant1{
fld0: [i16; 7],
fld1: *const i128,
fld2: u128,
fld3: (isize, u64, char),
fld4: i16,
fld5: Adt48,
fld6: (bool, i64, i32),

},
Variant2{
fld0: [char; 4],
fld1: *const i128,
fld2: (i64, (isize, u64, char), i8, [usize; 4], char, f32, *const i128, u128),

}}
#[derive(Debug)]
pub enum Adt50 {
Variant0{
fld0: f32,
fld1: *const i64,
fld2: [usize; 4],
fld3: *const u16,
fld4: i16,

},
Variant1{
fld0: [u64; 6],
fld1: u32,
fld2: isize,
fld3: i8,
fld4: u16,
fld5: *mut i8,
fld6: [char; 4],

},
Variant2{
fld0: [u64; 7],
fld1: u8,
fld2: f64,
fld3: i8,
fld4: ((bool, i64, i32), *const i64, i8, *mut usize, (isize, u64, char), u64, *const u16, i8, i32),

}}
#[derive(Debug)]
pub enum Adt51 {
Variant0{
fld0: (usize, u128),
fld1: (bool, i64, i32),
fld2: ([i32; 5], u8),
fld3: f32,
fld4: *const i64,
fld5: [i32; 1],

},
Variant1{
fld0: bool,
fld1: [isize; 8],
fld2: Adt46,
fld3: (usize, u128),
fld4: [usize; 4],
fld5: [i16; 7],
fld6: u8,

}}
#[derive(Debug)]
pub enum Adt52 {
Variant0{
fld0: [isize; 3],
fld1: usize,
fld2: Adt46,
fld3: f32,
fld4: [i32; 5],
fld5: u16,
fld6: Adt49,

},
Variant1{
fld0: ((bool, i64, i32), *const i64, i8, *mut usize, (isize, u64, char), u64, *const u16, i8, i32),
fld1: char,
fld2: usize,
fld3: (bool, i64, i32),

}}
#[derive(Debug)]
pub enum Adt53 {
Variant0{
fld0: [bool; 7],
fld1: [isize; 3],
fld2: u128,
fld3: (bool, i64, i32),
fld4: (usize, u128),
fld5: Adt52,
fld6: [u128; 7],
fld7: [char; 4],

},
Variant1{
fld0: bool,
fld1: [isize; 8],
fld2: u64,
fld3: *const i64,
fld4: *const i128,
fld5: i32,
fld6: (u32, i128, [usize; 8]),
fld7: i128,

},
Variant2{
fld0: *const i128,
fld1: Adt48,
fld2: *const i64,
fld3: [isize; 3],
fld4: i128,
fld5: Adt50,

}}
#[derive(Debug)]
pub struct Adt54 {
fld0: Adt47,
fld1: Adt48,
}
#[derive(Debug)]
pub enum Adt55 {
Variant0{
fld0: (i64, (isize, u64, char), i8, [usize; 4], char, f32, *const i128, u128),
fld1: f32,
fld2: [u64; 7],

},
Variant1{
fld0: [i32; 1],
fld1: [u64; 7],
fld2: Adt48,
fld3: Adt54,

},
Variant2{
fld0: [isize; 3],
fld1: i16,

},
Variant3{
fld0: (u32, i128, [usize; 8]),
fld1: *mut i8,
fld2: [bool; 7],
fld3: *mut u64,
fld4: *const u16,
fld5: [u64; 7],
fld6: u32,

}}
#[derive(Debug,Copy,Clone)]
pub struct Adt56 {
fld0: (u32, i128, [usize; 8]),
}
#[derive(Debug)]
pub enum Adt57 {
Variant0{
fld0: *const u16,
fld1: [i32; 1],
fld2: Adt54,
fld3: *const i64,
fld4: i16,
fld5: [i32; 5],
fld6: i64,
fld7: [isize; 3],

},
Variant1{
fld0: Adt51,
fld1: Adt50,

},
Variant2{
fld0: Adt47,
fld1: ([i32; 5], u8),
fld2: [char; 4],
fld3: i8,
fld4: [isize; 3],
fld5: *mut i8,
fld6: [u64; 7],
fld7: (usize, u128),

}}
#[derive(Debug)]
pub enum Adt58 {
Variant0{
fld0: (f32, i8, usize, i128, u8, u32),

},
Variant1{
fld0: bool,
fld1: [u128; 7],
fld2: Adt51,
fld3: Adt52,
fld4: [bool; 7],

}}
#[derive(Debug)]
pub enum Adt59 {
Variant0{
fld0: bool,
fld1: f64,
fld2: Adt47,
fld3: i8,
fld4: u8,
fld5: i64,

},
Variant1{
fld0: [usize; 4],

},
Variant2{
fld0: [isize; 3],

}}
#[derive(Debug)]
pub enum Adt60 {
Variant0{
fld0: *mut usize,
fld1: Adt53,
fld2: isize,
fld3: *mut u64,
fld4: u8,

},
Variant1{
fld0: *mut usize,
fld1: char,
fld2: ([i32; 5], u8),
fld3: (usize, u128),
fld4: u32,
fld5: u16,

}}
#[derive(Debug)]
pub struct Adt61 {
fld0: [u64; 6],
fld1: Adt59,
fld2: u16,
fld3: f32,
fld4: Adt55,
fld5: [i32; 5],
fld6: (i64, (isize, u64, char), i8, [usize; 4], char, f32, *const i128, u128),
}
#[derive(Debug)]
pub enum Adt62 {
Variant0{
fld0: u8,
fld1: Adt55,
fld2: Adt51,
fld3: (isize, u64, char),

},
Variant1{
fld0: (bool, i64, i32),
fld1: [u128; 7],
fld2: Adt48,
fld3: i8,
fld4: *const i128,
fld5: u32,
fld6: Adt50,

},
Variant2{
fld0: u16,
fld1: char,
fld2: u64,
fld3: i8,

}}

