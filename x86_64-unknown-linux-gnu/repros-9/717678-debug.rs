#![recursion_limit = "256"]
    #![feature(custom_mir, core_intrinsics, const_hash)]
    #![allow(unused_parens, unused_assignments, overflowing_literals)]
    extern crate core;
    use core::intrinsics::mir::*;

    use std::fmt::Debug;

    #[inline(never)]
    fn dump_var(
        f: usize,
        var0: usize, val0: impl Debug,
        var1: usize, val1: impl Debug,
        var2: usize, val2: impl Debug,
        var3: usize, val3: impl Debug,
    ) {
        println!("fn{f}:_{var0} = {val0:?}\n_{var1} = {val1:?}\n_{var2} = {val2:?}\n_{var3} = {val3:?}");
    }
    #[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn0(mut _1: bool,mut _2: char,mut _3: isize,mut _4: i8,mut _5: i16,mut _6: i32,mut _7: i64,mut _8: i128,mut _9: usize,mut _10: u8,mut _11: u16,mut _12: u32,mut _13: u64,mut _14: u128) -> ([u128; 8], (u32, u8, bool)) {
mir! {
type RET = ([u128; 8], (u32, u8, bool));
let _15: char;
let _16: bool;
let _17: [u8; 7];
let _18: isize;
let _19: usize;
let _20: Adt58;
let _21: Adt61;
let _22: (u16, i128);
let _23: *mut (i64, u32, i128, i32);
let _24: [u8; 1];
let _25: [u128; 2];
let _26: i32;
let _27: bool;
let _28: isize;
let _29: u8;
let _30: ();
let _31: ();
{
_13 = 5671531553115121780_u64 * 11102816809336272967_u64;
_6 = 444606565_i32;
Goto(bb1)
}
bb1 = {
_13 = 38_i8 as u64;
_2 = '\u{42fd1}';
Goto(bb2)
}
bb2 = {
_13 = 3526269031410793570_u64;
RET.0 = [296440873003484562603406144636413930968_u128,254840936397701510780089377859666798139_u128,31012919366331205165132468125547497595_u128,309652077357897242814145262221873292346_u128,87156775045753549884766502119701079809_u128,128461958778077675579078850656759586046_u128,76869113081808338708877038582527314557_u128,162538504598762095198028912734126351305_u128];
_7 = (-3475_i16) as i64;
_10 = !139_u8;
_10 = 122_u8;
Call(_5 = core::intrinsics::bswap((-29730_i16)), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
RET.1.2 = !false;
RET.1.0 = 3567164235_u32 / 4022082690_u32;
RET.1 = (195887363_u32, _10, true);
_4 = (-83_i8) << _7;
RET.1.1 = _10;
RET.1 = (3334054149_u32, _10, true);
_13 = 4334854639240686870_u64;
_2 = '\u{f7d1f}';
RET.1 = (2904813322_u32, _10, false);
_3 = (-47_isize);
_5 = 7_usize as i16;
_14 = 159842365204398389266597395141959713495_u128 | 264534387559113110341260984413529565548_u128;
RET.1 = (3309377443_u32, _10, false);
Call(_1 = fn1(_3, _6, _13, _3, _13, _3, _6, _4, _2, _3, _4, _3, _2, _3, _13), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_12 = 1563134633_u32 * 2526120904_u32;
_11 = 59782_u16;
_15 = _2;
_17 = [_10,_10,_10,_10,_10,_10,_10];
_11 = _15 as u16;
_14 = !321681215203397977432252858391262882360_u128;
_5 = 27693_i16;
_3 = (-9223372036854775808_isize) >> _5;
RET.0 = [_14,_14,_14,_14,_14,_14,_14,_14];
RET.1.1 = 84668321714312200809555952697429122091_i128 as u8;
_18 = _3 * _3;
_16 = _1;
_8 = 129095989467803657023057513194287128767_i128 ^ 70761977400012185202493480633607661721_i128;
_5 = _13 as i16;
RET.1 = (_12, _10, _16);
RET.1.2 = _16 & _16;
_3 = !_18;
RET.1 = (_12, _10, _1);
Goto(bb5)
}
bb5 = {
_12 = !3494547840_u32;
_2 = _15;
RET.0 = [_14,_14,_14,_14,_14,_14,_14,_14];
_4 = _5 as i8;
RET.1.0 = !_12;
_11 = 37729_u16 + 54520_u16;
RET.1.0 = _10 as u32;
_12 = 1746002964_u32;
_9 = 7_usize;
_5 = 5499_i16 - (-20409_i16);
RET.1.2 = !_1;
_9 = _12 as usize;
RET.1.1 = _10 >> _13;
RET.1.0 = _12;
_20.fld0.fld4 = [_8,_8];
_22 = (_11, _8);
RET.1.0 = _12 << _6;
RET.0 = [_14,_14,_14,_14,_14,_14,_14,_14];
_23 = core::ptr::addr_of_mut!(_20.fld0.fld2);
_22.1 = !_8;
(*_23).2 = _22.1;
Call(_18 = fn4(_2, _17, _23, _23, (*_23).2, _15, _15, _14), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
_20.fld0.fld2.0 = _7;
(*_23).0 = _7;
_11 = _14 as u16;
_12 = (*_23).1 ^ (*_23).1;
_24 = [_10];
_22.0 = _4 as u16;
_20.fld0.fld3 = _10 as usize;
RET.1.2 = _16;
(*_23).3 = _6;
Call(_9 = core::intrinsics::bswap(_20.fld0.fld3), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
RET.1.2 = !_1;
_20.fld0.fld2 = (_7, _12, _8, _6);
RET.1.2 = _16;
(*_23).0 = -_7;
_17 = [_10,_10,_10,_10,_10,_10,_10];
_12 = !(*_23).1;
_18 = _3 >> _20.fld0.fld2.1;
(*_23).2 = _7 as i128;
RET.0 = [_14,_14,_14,_14,_14,_14,_14,_14];
RET.0 = [_14,_14,_14,_14,_14,_14,_14,_14];
(*_23) = (_7, _12, _8, _6);
_20.fld0.fld2.0 = _7;
_20.fld0.fld1 = (*_23).3;
_21.fld0 = core::ptr::addr_of!(_20.fld0.fld4);
Call(RET.1.1 = fn6(_23, _22.0, _2, (*_23).3, _1, _20.fld0.fld2.1, _18, _10, _15, (*_23).0, (*_23).0, _20.fld0.fld1, _20.fld0.fld2, _5, Move(_21)), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
(*_23) = (_7, _12, _8, _20.fld0.fld1);
_1 = _18 < _18;
RET.1.2 = _1;
_20.fld0.fld2.1 = _12;
_20.fld0.fld2.3 = _6;
_20.fld0.fld4 = [_8,_8];
RET.1 = ((*_23).1, _10, _16);
RET.1.2 = !_1;
_18 = _3 - _3;
_10 = _12 as u8;
_20.fld0.fld2.2 = _8 | _8;
_8 = (*_23).2 & (*_23).2;
_6 = _13 as i32;
_23 = core::ptr::addr_of_mut!((*_23));
_18 = _3;
_20.fld0.fld2.3 = _5 as i32;
Goto(bb9)
}
bb9 = {
Call(_30 = dump_var(0_usize, 11_usize, Move(_11), 8_usize, Move(_8), 13_usize, Move(_13), 24_usize, Move(_24)), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
Call(_30 = dump_var(0_usize, 7_usize, Move(_7), 22_usize, Move(_22), 5_usize, Move(_5), 9_usize, Move(_9)), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
Call(_30 = dump_var(0_usize, 12_usize, Move(_12), 2_usize, Move(_2), 31_usize, _31, 31_usize, _31), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn1(mut _1: isize,mut _2: i32,mut _3: u64,mut _4: isize,mut _5: u64,mut _6: isize,mut _7: i32,mut _8: i8,mut _9: char,mut _10: isize,mut _11: i8,mut _12: isize,mut _13: char,mut _14: isize,mut _15: u64) -> bool {
mir! {
type RET = bool;
let _16: *mut (i64, u32, i128, i32);
let _17: [u128; 2];
let _18: f64;
let _19: char;
let _20: u16;
let _21: [char; 5];
let _22: [u8; 7];
let _23: bool;
let _24: [u128; 8];
let _25: isize;
let _26: [char; 7];
let _27: ([u128; 8], (u32, u8, bool));
let _28: u16;
let _29: u64;
let _30: bool;
let _31: Adt64;
let _32: (u16, i128);
let _33: ([u128; 8], (u32, u8, bool));
let _34: *mut char;
let _35: [char; 6];
let _36: [u8; 1];
let _37: (u32, u8, bool);
let _38: u8;
let _39: i8;
let _40: [u128; 1];
let _41: u32;
let _42: u16;
let _43: ();
let _44: ();
{
RET = true;
_11 = -_8;
_12 = -_1;
_1 = _4;
_5 = _13 as u64;
Goto(bb1)
}
bb1 = {
_13 = _9;
_8 = _9 as i8;
RET = _11 == _11;
_15 = 58768_u16 as u64;
_7 = (-4311_i16) as i32;
RET = _1 == _12;
_4 = _12 | _12;
_12 = 5511_i16 as isize;
_11 = !_8;
_11 = _5 as i8;
_4 = _14;
_3 = _15;
_7 = _2;
_9 = _13;
_4 = !_6;
_4 = (-3375057464892657767_i64) as isize;
_17 = [183310582632538065127504629653439102793_u128,315679264368708572623627512713940776184_u128];
_14 = !_1;
_7 = _2 & _2;
_2 = _7;
_3 = _15 * _15;
_12 = _1;
_18 = 139448109827206848250517322134777607151_u128 as f64;
_19 = _9;
_9 = _13;
_2 = _7;
_15 = _5 * _3;
Call(_12 = fn2(_7, _10, _4, _2, _13, _10, _19), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_11 = _8;
_2 = _18 as i32;
_1 = _4 - _14;
RET = _3 <= _15;
_6 = _5 as isize;
_3 = _15;
_2 = _7;
RET = !false;
_20 = 1207_u16;
match _10 {
340282366920938463463374607431768211409 => bb3,
_ => bb1
}
}
bb3 = {
_8 = -_11;
_11 = _8 ^ _8;
_21 = [_19,_9,_9,_19,_19];
_6 = _19 as isize;
match _20 {
1207 => bb4,
_ => bb2
}
}
bb4 = {
_21 = [_13,_9,_9,_9,_19];
_17 = [188224110835917191304211928521373966073_u128,172998395354385288331796082318679701432_u128];
_19 = _13;
_9 = _13;
_3 = 2270387269_u32 as u64;
_8 = _11 >> _10;
_5 = _15;
Goto(bb5)
}
bb5 = {
_20 = _19 as u16;
_10 = -_1;
_14 = _12;
RET = false ^ false;
_25 = _1 * _10;
_7 = 29944_i16 as i32;
_23 = _5 != _5;
_22 = [190_u8,112_u8,215_u8,145_u8,252_u8,127_u8,224_u8];
_10 = _25;
_25 = _7 as isize;
_24 = [250977496372426266842391755486066952967_u128,279914534456615290421521357532699476871_u128,246375854589549477800802334812336807930_u128,214765644317434283193208114197787180018_u128,17428368806739377979573757188831317740_u128,215649541041365377629339076192777392465_u128,99533020080114872928824195912378985846_u128,141971359805814584223867407839838043800_u128];
_1 = !_12;
RET = !_23;
_27.1.0 = !571572756_u32;
_28 = _9 as u16;
_12 = _10 << _20;
_26 = [_19,_13,_13,_13,_13,_9,_19];
_10 = _19 as isize;
_1 = (-24705_i16) as isize;
_10 = _18 as isize;
_1 = _23 as isize;
_4 = _15 as isize;
_7 = _2;
_8 = _11;
_28 = _18 as u16;
match _14 {
0 => bb2,
1 => bb6,
2 => bb7,
3 => bb8,
340282366920938463463374607431768211409 => bb10,
_ => bb9
}
}
bb6 = {
_21 = [_13,_9,_9,_9,_19];
_17 = [188224110835917191304211928521373966073_u128,172998395354385288331796082318679701432_u128];
_19 = _13;
_9 = _13;
_3 = 2270387269_u32 as u64;
_8 = _11 >> _10;
_5 = _15;
Goto(bb5)
}
bb7 = {
_8 = -_11;
_11 = _8 ^ _8;
_21 = [_19,_9,_9,_19,_19];
_6 = _19 as isize;
match _20 {
1207 => bb4,
_ => bb2
}
}
bb8 = {
_11 = _8;
_2 = _18 as i32;
_1 = _4 - _14;
RET = _3 <= _15;
_6 = _5 as isize;
_3 = _15;
_2 = _7;
RET = !false;
_20 = 1207_u16;
match _10 {
340282366920938463463374607431768211409 => bb3,
_ => bb1
}
}
bb9 = {
_13 = _9;
_8 = _9 as i8;
RET = _11 == _11;
_15 = 58768_u16 as u64;
_7 = (-4311_i16) as i32;
RET = _1 == _12;
_4 = _12 | _12;
_12 = 5511_i16 as isize;
_11 = !_8;
_11 = _5 as i8;
_4 = _14;
_3 = _15;
_7 = _2;
_9 = _13;
_4 = !_6;
_4 = (-3375057464892657767_i64) as isize;
_17 = [183310582632538065127504629653439102793_u128,315679264368708572623627512713940776184_u128];
_14 = !_1;
_7 = _2 & _2;
_2 = _7;
_3 = _15 * _15;
_12 = _1;
_18 = 139448109827206848250517322134777607151_u128 as f64;
_19 = _9;
_9 = _13;
_2 = _7;
_15 = _5 * _3;
Call(_12 = fn2(_7, _10, _4, _2, _13, _10, _19), ReturnTo(bb2), UnwindUnreachable())
}
bb10 = {
_23 = !true;
_23 = _12 < _12;
RET = _23;
_26 = [_13,_19,_9,_13,_13,_13,_19];
_8 = !_11;
_21 = [_19,_9,_19,_19,_19];
_31 = Adt64 { fld0: 206_u8 };
_21 = [_9,_13,_13,_9,_13];
_29 = !_5;
_27.1.0 = _9 as u32;
_6 = 158006428904988465430258624822365398647_u128 as isize;
Call(_27.1 = fn3(_1, _24, _7, _19, _19, _6, _14, _4, _19, _14, _4, _3, _14, _23, _23, _9), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_32.0 = _20 << _4;
_13 = _9;
_6 = _12 | _1;
_33.1.1 = !_27.1.1;
_33.1.0 = _15 as u32;
_19 = _9;
_6 = _27.1.0 as isize;
_31 = Adt64 { fld0: _33.1.1 };
_5 = !_29;
_13 = _19;
_31 = Adt64 { fld0: _33.1.1 };
_27.1.1 = _6 as u8;
RET = !_27.1.2;
_2 = 138923137213909324184919017630080331421_u128 as i32;
_14 = 5_usize as isize;
_18 = _33.1.1 as f64;
_30 = _27.1.2;
_28 = _20;
_27.1.2 = _23;
Goto(bb12)
}
bb12 = {
_32 = (_28, 17720767051099432542734011916916350651_i128);
_12 = _6 & _6;
_21 = [_9,_19,_13,_19,_19];
_35 = [_19,_13,_19,_13,_13,_9];
_33.1.1 = !_27.1.1;
_33.1 = (_27.1.0, _27.1.1, _30);
_34 = core::ptr::addr_of_mut!(_19);
_6 = !_4;
_2 = _20 as i32;
_20 = _28 / 56631_u16;
_13 = _9;
_5 = _29 >> _31.fld0;
_37.0 = 243247013179623327998065201004886124737_u128 as u32;
_37 = (_33.1.0, _31.fld0, _33.1.2);
_12 = -_6;
_17 = [334111886990115718402576476250107882322_u128,177441890702322182690823760180830151276_u128];
_36 = [_31.fld0];
_33.1.1 = !_31.fld0;
match _27.1.0 {
0 => bb4,
1 => bb13,
2 => bb14,
1457839173 => bb16,
_ => bb15
}
}
bb13 = {
_13 = _9;
_8 = _9 as i8;
RET = _11 == _11;
_15 = 58768_u16 as u64;
_7 = (-4311_i16) as i32;
RET = _1 == _12;
_4 = _12 | _12;
_12 = 5511_i16 as isize;
_11 = !_8;
_11 = _5 as i8;
_4 = _14;
_3 = _15;
_7 = _2;
_9 = _13;
_4 = !_6;
_4 = (-3375057464892657767_i64) as isize;
_17 = [183310582632538065127504629653439102793_u128,315679264368708572623627512713940776184_u128];
_14 = !_1;
_7 = _2 & _2;
_2 = _7;
_3 = _15 * _15;
_12 = _1;
_18 = 139448109827206848250517322134777607151_u128 as f64;
_19 = _9;
_9 = _13;
_2 = _7;
_15 = _5 * _3;
Call(_12 = fn2(_7, _10, _4, _2, _13, _10, _19), ReturnTo(bb2), UnwindUnreachable())
}
bb14 = {
_23 = !true;
_23 = _12 < _12;
RET = _23;
_26 = [_13,_19,_9,_13,_13,_13,_19];
_8 = !_11;
_21 = [_19,_9,_19,_19,_19];
_31 = Adt64 { fld0: 206_u8 };
_21 = [_9,_13,_13,_9,_13];
_29 = !_5;
_27.1.0 = _9 as u32;
_6 = 158006428904988465430258624822365398647_u128 as isize;
Call(_27.1 = fn3(_1, _24, _7, _19, _19, _6, _14, _4, _19, _14, _4, _3, _14, _23, _23, _9), ReturnTo(bb11), UnwindUnreachable())
}
bb15 = {
_21 = [_13,_9,_9,_9,_19];
_17 = [188224110835917191304211928521373966073_u128,172998395354385288331796082318679701432_u128];
_19 = _13;
_9 = _13;
_3 = 2270387269_u32 as u64;
_8 = _11 >> _10;
_5 = _15;
Goto(bb5)
}
bb16 = {
_27.1.2 = !_23;
_19 = _9;
_33.0 = _24;
_27 = (_33.0, _37);
_33.1.0 = _37.0 & _27.1.0;
_37.0 = _27.1.0;
_38 = _37.1;
_18 = _32.1 as f64;
_21 = [_13,(*_34),(*_34),(*_34),_9];
_23 = _30;
_33.1 = _37;
_8 = _19 as i8;
_27.1.1 = _4 as u8;
_22 = [_38,_33.1.1,_33.1.1,_33.1.1,_33.1.1,_31.fld0,_37.1];
_24 = _33.0;
_19 = _9;
_24 = _33.0;
_32.1 = _37.0 as i128;
_12 = -_1;
_11 = _1 as i8;
_19 = _9;
_41 = !_37.0;
_4 = -_1;
_18 = _20 as f64;
(*_34) = _13;
Goto(bb17)
}
bb17 = {
Call(_43 = dump_var(1_usize, 32_usize, Move(_32), 1_usize, Move(_1), 36_usize, Move(_36), 12_usize, Move(_12)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_43 = dump_var(1_usize, 26_usize, Move(_26), 19_usize, Move(_19), 20_usize, Move(_20), 27_usize, Move(_27)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_43 = dump_var(1_usize, 29_usize, Move(_29), 13_usize, Move(_13), 33_usize, Move(_33), 37_usize, Move(_37)), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Call(_43 = dump_var(1_usize, 30_usize, Move(_30), 35_usize, Move(_35), 17_usize, Move(_17), 28_usize, Move(_28)), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
Call(_43 = dump_var(1_usize, 5_usize, Move(_5), 44_usize, _44, 44_usize, _44, 44_usize, _44), ReturnTo(bb22), UnwindUnreachable())
}
bb22 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn2(mut _1: i32,mut _2: isize,mut _3: isize,mut _4: i32,mut _5: char,mut _6: isize,mut _7: char) -> isize {
mir! {
type RET = isize;
let _8: Adt64;
let _9: Adt50;
let _10: usize;
let _11: bool;
let _12: *mut u128;
let _13: [u128; 2];
let _14: (u16, i128);
let _15: [char; 6];
let _16: Adt54;
let _17: *const *mut u128;
let _18: char;
let _19: (u16, i128);
let _20: [char; 6];
let _21: char;
let _22: bool;
let _23: *mut *const *mut i128;
let _24: Adt60;
let _25: *const [i128; 2];
let _26: ();
let _27: ();
{
RET = !_6;
_5 = _7;
RET = _2;
RET = _2 * _2;
_1 = _4;
_8.fld0 = 15_u8 | 139_u8;
_8.fld0 = 59280_u16 as u8;
_5 = _7;
_8 = Adt64 { fld0: 180_u8 };
_3 = _2 ^ _2;
_9.fld4 = [_8.fld0];
_7 = _5;
_9.fld4 = [_8.fld0];
_4 = 121_i8 as i32;
_8 = Adt64 { fld0: 107_u8 };
_8 = Adt64 { fld0: 239_u8 };
_1 = 2001811318_u32 as i32;
_11 = _7 == _5;
match _8.fld0 {
239 => bb2,
_ => bb1
}
}
bb1 = {
Return()
}
bb2 = {
_8.fld0 = !146_u8;
RET = _8.fld0 as isize;
RET = _6;
RET = 133184432170894860455861161493504032393_u128 as isize;
_9.fld2 = [_8.fld0,_8.fld0,_8.fld0,_8.fld0,_8.fld0,_8.fld0,_8.fld0];
_3 = _2;
_2 = 1798442548_u32 as isize;
_4 = -_1;
_10 = 5495006673096377595_usize;
_13 = [10386901550166042209157277749429303444_u128,329723249659151643981500710952568568616_u128];
_9.fld0.0 = core::ptr::addr_of_mut!(_4);
_7 = _5;
_9.fld0.1 = 21444864559530365962148275683067385830_i128 as u128;
_2 = 7623581124949299785_i64 as isize;
_14.0 = 961540548_u32 as u16;
RET = _3 & _3;
_16.fld6 = _7 as i64;
_16.fld5 = core::ptr::addr_of_mut!(_5);
_16.fld1 = _9.fld4;
_16.fld2 = _8.fld0 as f32;
match _3 {
0 => bb1,
1 => bb3,
2 => bb4,
3 => bb5,
340282366920938463463374607431768211409 => bb7,
_ => bb6
}
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
_14.1 = (-105287372280078552131188537150652694397_i128);
_16.fld3 = core::ptr::addr_of!(_16.fld2);
_13 = [_9.fld0.1,_9.fld0.1];
_15 = [_7,_5,_5,_5,_5,_7];
_4 = -_1;
_16.fld1 = [_8.fld0];
_7 = _5;
_12 = core::ptr::addr_of_mut!(_9.fld0.1);
_14.1 = 98480705091791344727059869138077825132_i128 & (-102232441576178689787399148136345270243_i128);
_9.fld2 = [_8.fld0,_8.fld0,_8.fld0,_8.fld0,_8.fld0,_8.fld0,_8.fld0];
_5 = _7;
_16.fld4 = [_10,_10];
_1 = !_4;
match _3 {
0 => bb6,
1 => bb2,
2 => bb3,
340282366920938463463374607431768211409 => bb9,
_ => bb8
}
}
bb8 = {
Return()
}
bb9 = {
_15 = [_7,_5,_5,_7,_7,_5];
_5 = _7;
RET = _8.fld0 as isize;
_19.1 = _14.1 - _14.1;
_14.0 = 3752459878_u32 as u16;
_13 = [(*_12),_9.fld0.1];
_17 = core::ptr::addr_of!(_12);
_15 = [_7,_7,_7,_7,_5,_7];
_10 = 14801128280427287189_usize & 9361035047478107511_usize;
Goto(bb10)
}
bb10 = {
_5 = _7;
_20 = [_5,_5,_5,_5,_5,_7];
_3 = _14.0 as isize;
_16.fld0 = _20;
_10 = !3_usize;
_11 = !false;
_1 = _16.fld6 as i32;
(*_17) = core::ptr::addr_of_mut!((*_12));
_8 = Adt64 { fld0: 57_u8 };
_16.fld3 = core::ptr::addr_of!(_16.fld2);
_19 = (_14.0, _14.1);
_9.fld2 = [_8.fld0,_8.fld0,_8.fld0,_8.fld0,_8.fld0,_8.fld0,_8.fld0];
(*_17) = core::ptr::addr_of_mut!((*_12));
_19 = (_14.0, _14.1);
RET = _6;
_5 = _7;
(*_17) = core::ptr::addr_of_mut!((*_12));
_10 = 0_usize | 6460554212613861951_usize;
match _8.fld0 {
0 => bb3,
1 => bb5,
2 => bb11,
3 => bb12,
4 => bb13,
5 => bb14,
57 => bb16,
_ => bb15
}
}
bb11 = {
_15 = [_7,_5,_5,_7,_7,_5];
_5 = _7;
RET = _8.fld0 as isize;
_19.1 = _14.1 - _14.1;
_14.0 = 3752459878_u32 as u16;
_13 = [(*_12),_9.fld0.1];
_17 = core::ptr::addr_of!(_12);
_15 = [_7,_7,_7,_7,_5,_7];
_10 = 14801128280427287189_usize & 9361035047478107511_usize;
Goto(bb10)
}
bb12 = {
Return()
}
bb13 = {
_14.1 = (-105287372280078552131188537150652694397_i128);
_16.fld3 = core::ptr::addr_of!(_16.fld2);
_13 = [_9.fld0.1,_9.fld0.1];
_15 = [_7,_5,_5,_5,_5,_7];
_4 = -_1;
_16.fld1 = [_8.fld0];
_7 = _5;
_12 = core::ptr::addr_of_mut!(_9.fld0.1);
_14.1 = 98480705091791344727059869138077825132_i128 & (-102232441576178689787399148136345270243_i128);
_9.fld2 = [_8.fld0,_8.fld0,_8.fld0,_8.fld0,_8.fld0,_8.fld0,_8.fld0];
_5 = _7;
_16.fld4 = [_10,_10];
_1 = !_4;
match _3 {
0 => bb6,
1 => bb2,
2 => bb3,
340282366920938463463374607431768211409 => bb9,
_ => bb8
}
}
bb14 = {
_8.fld0 = !146_u8;
RET = _8.fld0 as isize;
RET = _6;
RET = 133184432170894860455861161493504032393_u128 as isize;
_9.fld2 = [_8.fld0,_8.fld0,_8.fld0,_8.fld0,_8.fld0,_8.fld0,_8.fld0];
_3 = _2;
_2 = 1798442548_u32 as isize;
_4 = -_1;
_10 = 5495006673096377595_usize;
_13 = [10386901550166042209157277749429303444_u128,329723249659151643981500710952568568616_u128];
_9.fld0.0 = core::ptr::addr_of_mut!(_4);
_7 = _5;
_9.fld0.1 = 21444864559530365962148275683067385830_i128 as u128;
_2 = 7623581124949299785_i64 as isize;
_14.0 = 961540548_u32 as u16;
RET = _3 & _3;
_16.fld6 = _7 as i64;
_16.fld5 = core::ptr::addr_of_mut!(_5);
_16.fld1 = _9.fld4;
_16.fld2 = _8.fld0 as f32;
match _3 {
0 => bb1,
1 => bb3,
2 => bb4,
3 => bb5,
340282366920938463463374607431768211409 => bb7,
_ => bb6
}
}
bb15 = {
Return()
}
bb16 = {
_24.fld1.fld2.fld0.0 = _3;
_16.fld4 = [_10,_10];
_4 = -_1;
_7 = _5;
(*_17) = core::ptr::addr_of_mut!(_24.fld1.fld1.1);
_16.fld1 = _9.fld4;
_24.fld0.fld1.fld0.1 = core::ptr::addr_of_mut!(_24.fld1.fld1.1);
(*_17) = core::ptr::addr_of_mut!((*_12));
Goto(bb17)
}
bb17 = {
Call(_26 = dump_var(2_usize, 11_usize, Move(_11), 20_usize, Move(_20), 5_usize, Move(_5), 10_usize, Move(_10)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_26 = dump_var(2_usize, 1_usize, Move(_1), 3_usize, Move(_3), 6_usize, Move(_6), 27_usize, _27), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn3(mut _1: isize,mut _2: [u128; 8],mut _3: i32,mut _4: char,mut _5: char,mut _6: isize,mut _7: isize,mut _8: isize,mut _9: char,mut _10: isize,mut _11: isize,mut _12: u64,mut _13: isize,mut _14: bool,mut _15: bool,mut _16: char) -> (u32, u8, bool) {
mir! {
type RET = (u32, u8, bool);
let _17: f32;
let _18: [char; 5];
let _19: ();
let _20: ();
{
RET.2 = _14;
_9 = _5;
_16 = _9;
RET = (798549622_u32, 1_u8, _14);
_15 = !_14;
RET.1 = 5878_u16 as u8;
_16 = _4;
_12 = !11378200814309988800_u64;
_6 = _3 as isize;
RET = (1457839173_u32, 22_u8, _15);
Goto(bb1)
}
bb1 = {
Call(_19 = dump_var(3_usize, 4_usize, Move(_4), 8_usize, Move(_8), 13_usize, Move(_13), 11_usize, Move(_11)), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Call(_19 = dump_var(3_usize, 12_usize, Move(_12), 16_usize, Move(_16), 10_usize, Move(_10), 14_usize, Move(_14)), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn4(mut _1: char,mut _2: [u8; 7],mut _3: *mut (i64, u32, i128, i32),mut _4: *mut (i64, u32, i128, i32),mut _5: i128,mut _6: char,mut _7: char,mut _8: u128) -> isize {
mir! {
type RET = isize;
let _9: *const f32;
let _10: Adt58;
let _11: *const [i128; 2];
let _12: f32;
let _13: (u32, u8, bool);
let _14: *mut char;
let _15: i32;
let _16: [usize; 2];
let _17: [u64; 6];
let _18: i16;
let _19: [i128; 2];
let _20: u128;
let _21: *mut i32;
let _22: [usize; 2];
let _23: *const *mut *const *mut i128;
let _24: char;
let _25: (u16, i128);
let _26: (i64, u32, i128, i32);
let _27: Adt58;
let _28: *mut (i64, u32, i128, i32);
let _29: [u64; 6];
let _30: bool;
let _31: ();
let _32: ();
{
(*_4).3 = (-966213998_i32);
(*_3).1 = !111276196_u32;
(*_3).0 = -(-792504172149970784_i64);
(*_3) = (4827574782857089402_i64, 2974153178_u32, _5, 49866845_i32);
_6 = _1;
(*_3).0 = (-2257650677030324898_i64);
(*_3).1 = 1642103731_u32 >> (*_3).3;
_1 = _6;
(*_3).0 = 6988767757388269073_i64;
(*_3).1 = 1937271818_u32 * 3254865428_u32;
(*_4).0 = -7754344278190130467_i64;
(*_3).2 = 197_u8 as i128;
(*_4) = ((-6822235273290878645_i64), 2066332683_u32, _5, (-1475475414_i32));
(*_4).3 = (-651954983_i32);
(*_4).0 = 245_u8 as i64;
RET = 9223372036854775807_isize;
(*_4).2 = _5;
(*_3).3 = !401606240_i32;
_1 = _7;
(*_3).2 = (*_3).0 as i128;
(*_3) = ((-2915057667988266944_i64), 2802191198_u32, _5, (-551698188_i32));
Goto(bb1)
}
bb1 = {
(*_3).1 = !1800508532_u32;
(*_4).1 = 3448946817_u32;
(*_4).0 = !(-5486990118910386978_i64);
RET = 9223372036854775807_isize ^ 34_isize;
_1 = _7;
(*_3).1 = 134755083_u32;
(*_3).2 = 10493882789455220870_usize as i128;
_11 = core::ptr::addr_of!(_10.fld0.fld4);
_7 = _6;
(*_3) = ((-304118691552081983_i64), 525084549_u32, _5, (-1833452182_i32));
(*_4).0 = 6196688012503398150_i64;
_10.fld0.fld1 = !(*_3).3;
RET = (-9223372036854775808_isize) | 9223372036854775807_isize;
Goto(bb2)
}
bb2 = {
_13.1 = 231_u8 | 110_u8;
_9 = core::ptr::addr_of!(_12);
(*_4).3 = !_10.fld0.fld1;
_6 = _7;
_13.0 = (*_4).1;
_3 = _4;
_10.fld0.fld2.0 = (*_3).0 | (*_4).0;
Call(_10.fld1 = fn5(_7, (*_3).1, _4, _4, _10.fld0.fld1, _3, (*_4), (*_3), _10.fld0.fld1, _13.0, _13.1, (*_3).2, _3, (*_4).2, (*_4).0, (*_3).1), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
(*_3) = (_10.fld1, _13.0, _5, _10.fld0.fld1);
_10.fld0.fld2.3 = -(*_3).3;
_10.fld0.fld2.0 = (*_3).1 as i64;
(*_11) = [(*_3).2,(*_4).2];
_15 = 2421_u16 as i32;
_10.fld0.fld2.1 = !(*_3).1;
_10.fld0.fld0 = _3;
(*_4).2 = -_5;
(*_9) = _10.fld1 as f32;
_14 = core::ptr::addr_of_mut!(_1);
_13.0 = (*_3).1;
_16 = [3711787028305069767_usize,18411127816022543221_usize];
_4 = core::ptr::addr_of_mut!((*_3));
(*_14) = _6;
(*_3).0 = _10.fld1;
_10.fld0.fld2.3 = _15 - (*_3).3;
_13 = ((*_3).1, 248_u8, false);
RET = (-9223372036854775808_isize);
(*_3).2 = _5 + _5;
match (*_3).1 {
0 => bb2,
1 => bb4,
2 => bb5,
3 => bb6,
525084549 => bb8,
_ => bb7
}
}
bb4 = {
_13.1 = 231_u8 | 110_u8;
_9 = core::ptr::addr_of!(_12);
(*_4).3 = !_10.fld0.fld1;
_6 = _7;
_13.0 = (*_4).1;
_3 = _4;
_10.fld0.fld2.0 = (*_3).0 | (*_4).0;
Call(_10.fld1 = fn5(_7, (*_3).1, _4, _4, _10.fld0.fld1, _3, (*_4), (*_3), _10.fld0.fld1, _13.0, _13.1, (*_3).2, _3, (*_4).2, (*_4).0, (*_3).1), ReturnTo(bb3), UnwindUnreachable())
}
bb5 = {
(*_3).1 = !1800508532_u32;
(*_4).1 = 3448946817_u32;
(*_4).0 = !(-5486990118910386978_i64);
RET = 9223372036854775807_isize ^ 34_isize;
_1 = _7;
(*_3).1 = 134755083_u32;
(*_3).2 = 10493882789455220870_usize as i128;
_11 = core::ptr::addr_of!(_10.fld0.fld4);
_7 = _6;
(*_3) = ((-304118691552081983_i64), 525084549_u32, _5, (-1833452182_i32));
(*_4).0 = 6196688012503398150_i64;
_10.fld0.fld1 = !(*_3).3;
RET = (-9223372036854775808_isize) | 9223372036854775807_isize;
Goto(bb2)
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_19 = [(*_3).2,(*_3).2];
(*_3).2 = _5 * _5;
(*_4).1 = 14_i8 as u32;
_9 = core::ptr::addr_of!(_12);
(*_3).0 = !_10.fld0.fld2.0;
(*_4).1 = !_13.0;
_13.1 = 116_u8 - 167_u8;
_13 = ((*_3).1, 35_u8, false);
(*_4).0 = _10.fld1 - _10.fld1;
_20 = (*_3).2 as u128;
(*_3).3 = !_10.fld0.fld2.3;
(*_4).0 = _10.fld1 - _10.fld1;
(*_9) = (*_3).0 as f32;
(*_3).0 = !_10.fld1;
_10.fld1 = _10.fld0.fld2.3 as i64;
_1 = _7;
(*_3).1 = 51984_u16 as u32;
(*_14) = _6;
_10.fld0.fld2.1 = (-32658_i16) as u32;
(*_3).0 = _10.fld1 | _10.fld1;
_4 = _10.fld0.fld0;
match _13.1 {
35 => bb10,
_ => bb9
}
}
bb9 = {
(*_3) = (_10.fld1, _13.0, _5, _10.fld0.fld1);
_10.fld0.fld2.3 = -(*_3).3;
_10.fld0.fld2.0 = (*_3).1 as i64;
(*_11) = [(*_3).2,(*_4).2];
_15 = 2421_u16 as i32;
_10.fld0.fld2.1 = !(*_3).1;
_10.fld0.fld0 = _3;
(*_4).2 = -_5;
(*_9) = _10.fld1 as f32;
_14 = core::ptr::addr_of_mut!(_1);
_13.0 = (*_3).1;
_16 = [3711787028305069767_usize,18411127816022543221_usize];
_4 = core::ptr::addr_of_mut!((*_3));
(*_14) = _6;
(*_3).0 = _10.fld1;
_10.fld0.fld2.3 = _15 - (*_3).3;
_13 = ((*_3).1, 248_u8, false);
RET = (-9223372036854775808_isize);
(*_3).2 = _5 + _5;
match (*_3).1 {
0 => bb2,
1 => bb4,
2 => bb5,
3 => bb6,
525084549 => bb8,
_ => bb7
}
}
bb10 = {
_10.fld0.fld3 = 6226902904335268007_usize % 10501828404558760283_usize;
(*_3).0 = _10.fld1;
(*_9) = 64_i8 as f32;
_10.fld0.fld2.1 = !_13.0;
_17 = [1583146931741013815_u64,13799771844928367331_u64,14907287844796926105_u64,6568550954935447051_u64,8412716668538054628_u64,14742875764223716183_u64];
(*_3).3 = _10.fld0.fld2.3 & _10.fld0.fld1;
(*_3).1 = _13.2 as u32;
match _13.1 {
0 => bb7,
1 => bb5,
2 => bb11,
3 => bb12,
35 => bb14,
_ => bb13
}
}
bb11 = {
(*_3) = (_10.fld1, _13.0, _5, _10.fld0.fld1);
_10.fld0.fld2.3 = -(*_3).3;
_10.fld0.fld2.0 = (*_3).1 as i64;
(*_11) = [(*_3).2,(*_4).2];
_15 = 2421_u16 as i32;
_10.fld0.fld2.1 = !(*_3).1;
_10.fld0.fld0 = _3;
(*_4).2 = -_5;
(*_9) = _10.fld1 as f32;
_14 = core::ptr::addr_of_mut!(_1);
_13.0 = (*_3).1;
_16 = [3711787028305069767_usize,18411127816022543221_usize];
_4 = core::ptr::addr_of_mut!((*_3));
(*_14) = _6;
(*_3).0 = _10.fld1;
_10.fld0.fld2.3 = _15 - (*_3).3;
_13 = ((*_3).1, 248_u8, false);
RET = (-9223372036854775808_isize);
(*_3).2 = _5 + _5;
match (*_3).1 {
0 => bb2,
1 => bb4,
2 => bb5,
3 => bb6,
525084549 => bb8,
_ => bb7
}
}
bb12 = {
(*_3) = (_10.fld1, _13.0, _5, _10.fld0.fld1);
_10.fld0.fld2.3 = -(*_3).3;
_10.fld0.fld2.0 = (*_3).1 as i64;
(*_11) = [(*_3).2,(*_4).2];
_15 = 2421_u16 as i32;
_10.fld0.fld2.1 = !(*_3).1;
_10.fld0.fld0 = _3;
(*_4).2 = -_5;
(*_9) = _10.fld1 as f32;
_14 = core::ptr::addr_of_mut!(_1);
_13.0 = (*_3).1;
_16 = [3711787028305069767_usize,18411127816022543221_usize];
_4 = core::ptr::addr_of_mut!((*_3));
(*_14) = _6;
(*_3).0 = _10.fld1;
_10.fld0.fld2.3 = _15 - (*_3).3;
_13 = ((*_3).1, 248_u8, false);
RET = (-9223372036854775808_isize);
(*_3).2 = _5 + _5;
match (*_3).1 {
0 => bb2,
1 => bb4,
2 => bb5,
3 => bb6,
525084549 => bb8,
_ => bb7
}
}
bb13 = {
(*_3).1 = !1800508532_u32;
(*_4).1 = 3448946817_u32;
(*_4).0 = !(-5486990118910386978_i64);
RET = 9223372036854775807_isize ^ 34_isize;
_1 = _7;
(*_3).1 = 134755083_u32;
(*_3).2 = 10493882789455220870_usize as i128;
_11 = core::ptr::addr_of!(_10.fld0.fld4);
_7 = _6;
(*_3) = ((-304118691552081983_i64), 525084549_u32, _5, (-1833452182_i32));
(*_4).0 = 6196688012503398150_i64;
_10.fld0.fld1 = !(*_3).3;
RET = (-9223372036854775808_isize) | 9223372036854775807_isize;
Goto(bb2)
}
bb14 = {
(*_14) = _7;
_10.fld0 = Adt53 { fld0: _3,fld1: (*_4).3,fld2: (*_3),fld3: 3028206716688856752_usize,fld4: _19 };
_27.fld0.fld1 = (*_3).3;
(*_4).1 = _13.1 as u32;
_13.0 = !(*_4).1;
_21 = core::ptr::addr_of_mut!(_10.fld0.fld2.3);
(*_3) = _10.fld0.fld2;
_24 = (*_14);
Goto(bb15)
}
bb15 = {
Call(_31 = dump_var(4_usize, 2_usize, Move(_2), 13_usize, Move(_13), 8_usize, Move(_8), 1_usize, Move(_1)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_31 = dump_var(4_usize, 6_usize, Move(_6), 15_usize, Move(_15), 32_usize, _32, 32_usize, _32), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn5(mut _1: char,mut _2: u32,mut _3: *mut (i64, u32, i128, i32),mut _4: *mut (i64, u32, i128, i32),mut _5: i32,mut _6: *mut (i64, u32, i128, i32),mut _7: (i64, u32, i128, i32),mut _8: (i64, u32, i128, i32),mut _9: i32,mut _10: u32,mut _11: u8,mut _12: i128,mut _13: *mut (i64, u32, i128, i32),mut _14: i128,mut _15: i64,mut _16: u32) -> i64 {
mir! {
type RET = i64;
let _17: isize;
let _18: Adt53;
let _19: f32;
let _20: i64;
let _21: Adt63;
let _22: (u32, u8, bool);
let _23: ();
let _24: ();
{
_15 = (*_13).0;
(*_13).0 = _8.0 >> _7.3;
(*_4).2 = !_14;
_12 = -(*_13).2;
(*_4).2 = 5_usize as i128;
_7 = ((*_6).0, (*_4).1, (*_3).2, (*_4).3);
RET = _8.0 & (*_3).0;
_12 = 91692990457361813667706924250930984107_u128 as i128;
_18.fld0 = _3;
(*_6) = _7;
_19 = (*_3).1 as f32;
(*_13).1 = _8.1 >> (*_3).3;
(*_13).2 = _8.2 << (*_4).1;
RET = (*_3).0;
(*_6).3 = _7.3 ^ _8.3;
(*_6).2 = _14 + _8.2;
_1 = '\u{2530e}';
_6 = core::ptr::addr_of_mut!(_8);
(*_3).3 = (-9223372036854775808_isize) as i32;
_18.fld2.0 = (*_3).0;
RET = !(*_3).0;
(*_4).3 = _5 * (*_6).3;
(*_13) = (_7.0, (*_6).1, (*_6).2, (*_6).3);
_21.fld0 = (_8.0, (*_13).1, (*_6).2, _9);
_21.fld3 = [7_usize,17431258885138852326_usize];
_18.fld2 = _21.fld0;
Goto(bb1)
}
bb1 = {
_18.fld2 = ((*_4).0, (*_4).1, (*_3).2, _7.3);
(*_6).1 = (*_3).1;
_6 = _3;
RET = (*_6).0 * (*_4).0;
_7.3 = !_8.3;
_22 = (_8.1, _11, false);
Goto(bb2)
}
bb2 = {
Call(_23 = dump_var(5_usize, 8_usize, Move(_8), 5_usize, Move(_5), 1_usize, Move(_1), 7_usize, Move(_7)), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Call(_23 = dump_var(5_usize, 11_usize, Move(_11), 16_usize, Move(_16), 24_usize, _24, 24_usize, _24), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn6(mut _1: *mut (i64, u32, i128, i32),mut _2: u16,mut _3: char,mut _4: i32,mut _5: bool,mut _6: u32,mut _7: isize,mut _8: u8,mut _9: char,mut _10: i64,mut _11: i64,mut _12: i32,mut _13: (i64, u32, i128, i32),mut _14: i16,mut _15: Adt61) -> u8 {
mir! {
type RET = u8;
let _16: isize;
let _17: i64;
let _18: usize;
let _19: Adt50;
let _20: f32;
let _21: [u128; 2];
let _22: u32;
let _23: Adt62;
let _24: i16;
let _25: Adt59;
let _26: Adt61;
let _27: (u16, i128);
let _28: [i128; 2];
let _29: ();
let _30: ();
{
_13.3 = (*_1).3 & (*_1).3;
_4 = (*_1).3;
_13.2 = _7 as i128;
RET = _8 & _8;
(*_1).1 = _13.1;
(*_1).3 = _4 * _13.3;
_13.0 = _11 << _13.1;
(*_1).1 = _5 as u32;
_14 = _2 as i16;
_13.0 = 178529895536059515187176196158324515418_u128 as i64;
_5 = !true;
_19.fld0.0 = core::ptr::addr_of_mut!((*_1).3);
_2 = 43680_u16 / 21027_u16;
_14 = !16301_i16;
(*_1).3 = _13.3;
_21 = [299067042636807248712650714809551099567_u128,108723726044960001983607063922766578399_u128];
_16 = !_7;
_13.0 = (*_1).0;
_20 = _16 as f32;
(*_1).0 = _13.1 as i64;
match _4 {
444606565 => bb2,
_ => bb1
}
}
bb1 = {
Return()
}
bb2 = {
_18 = 0_usize;
_9 = _3;
_14 = !(-21251_i16);
_24 = _14;
_23.fld0.3 = (*_1).3;
_5 = !true;
(*_1).2 = !_13.2;
_25.fld5[_18] = !_8;
_23.fld0.2 = (*_1).2 + _13.2;
_25.fld4 = -_24;
match _21[_18] {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
4 => bb7,
5 => bb8,
6 => bb9,
299067042636807248712650714809551099567 => bb11,
_ => bb10
}
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
_25.fld7.2 = (*_1).0 > (*_1).0;
_5 = !_25.fld7.2;
_23.fld0.3 = (*_1).3 << (*_1).0;
_25.fld6.fld0.0 = core::ptr::addr_of_mut!(_4);
_23.fld1[_18] = _3;
_23.fld3 = _8 as i64;
_8 = _25.fld5[_18] / 105_u8;
Goto(bb12)
}
bb12 = {
_19.fld2 = [_25.fld5[_18],_25.fld5[_18],_8,_8,_8,_25.fld5[_18],_8];
_25.fld2 = _21[_18] as f64;
_25.fld3 = -70_i8;
Call(_16 = fn7(_25.fld6.fld0.0, _11, _25.fld6.fld0.0, _6, _19.fld0.0, _25.fld6.fld0.0, (*_1).3, _10, _7, _4, _13, (*_1).2, _13.3, _25.fld2), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
_25.fld0 = core::ptr::addr_of_mut!((*_1).2);
_25.fld5 = _19.fld2;
_1 = core::ptr::addr_of_mut!((*_1));
_23.fld2 = [130544645809481457_u64,8305066562284372554_u64,7471798142538841283_u64,6102831761940465178_u64,9428227573397997931_u64];
_13.0 = _11;
_16 = _7;
_17 = -(*_1).0;
RET = _8 >> _13.2;
_25.fld6.fld2 = [_8,_8,_8,_8,_8,_8,_8];
_23.fld0.0 = (*_1).0;
_25.fld6.fld0.0 = _19.fld0.0;
Goto(bb14)
}
bb14 = {
Call(_29 = dump_var(6_usize, 9_usize, Move(_9), 16_usize, Move(_16), 11_usize, Move(_11), 17_usize, Move(_17)), ReturnTo(bb15), UnwindUnreachable())
}
bb15 = {
Call(_29 = dump_var(6_usize, 14_usize, Move(_14), 6_usize, Move(_6), 7_usize, Move(_7), 24_usize, Move(_24)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_29 = dump_var(6_usize, 21_usize, Move(_21), 30_usize, _30, 30_usize, _30, 30_usize, _30), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn7(mut _1: *mut i32,mut _2: i64,mut _3: *mut i32,mut _4: u32,mut _5: *mut i32,mut _6: *mut i32,mut _7: i32,mut _8: i64,mut _9: isize,mut _10: i32,mut _11: (i64, u32, i128, i32),mut _12: i128,mut _13: i32,mut _14: f64) -> isize {
mir! {
type RET = isize;
let _15: u64;
let _16: ([u128; 8], (u32, u8, bool));
let _17: *mut i128;
let _18: (u32, u8, bool);
let _19: f32;
let _20: [char; 6];
let _21: [u128; 8];
let _22: ([u128; 8], (u32, u8, bool));
let _23: ();
let _24: ();
{
_9 = 9223372036854775807_isize;
_12 = _11.2 << (*_1);
_11.0 = _8;
RET = _9 & _9;
(*_1) = !_13;
_6 = core::ptr::addr_of_mut!(_11.3);
_3 = core::ptr::addr_of_mut!((*_6));
match _9 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb5,
5 => bb6,
9223372036854775807 => bb8,
_ => bb7
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
(*_5) = _13;
_11.0 = _8 - _8;
_14 = _11.0 as f64;
(*_5) = _11.3 * (*_3);
_13 = -_10;
RET = '\u{eaae1}' as isize;
_5 = _3;
(*_3) = _9 as i32;
_7 = (*_6) ^ _10;
(*_3) = (*_1);
(*_5) = _11.1 as i32;
RET = _9 - _9;
_11.0 = _8 * _8;
_13 = (*_5) - (*_6);
_8 = !_11.0;
_11 = (_8, _4, _12, (*_1));
_15 = 1171585977780152555_u64 << _13;
(*_5) = 15079778334758319257259736192508357695_u128 as i32;
RET = _9;
RET = -_9;
_8 = _12 as i64;
RET = _9;
_3 = core::ptr::addr_of_mut!((*_5));
_7 = _13;
RET = _9;
_2 = _8;
Call(_14 = fn8(_11.3, _7, _12, _13, _7, _10, _11.2), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
_11.3 = '\u{b82da}' as i32;
_13 = _11.2 as i32;
RET = -_9;
_11.2 = (-5111_i16) as i128;
_16.1.2 = !false;
_2 = !_8;
_1 = core::ptr::addr_of_mut!((*_3));
_18 = (_11.1, 81_u8, _16.1.2);
_16.1.1 = _18.1;
_13 = _7 << _12;
_11 = (_8, _18.0, _12, _13);
_1 = _6;
_16.1.0 = (*_3) as u32;
_16.0 = [279965704513919074369852230127593470121_u128,82339785234148203366292851928929893542_u128,204361317067727744712004603342143616829_u128,67669253498513999885103448330137712850_u128,221062735044332379311791385955741365572_u128,155968833385649955779912237861973821839_u128,106255244371743521593013909013502728201_u128,63818135164174234979061942619035055974_u128];
_5 = _6;
(*_1) = -_7;
_13 = (*_6) - (*_6);
_11 = (_8, _4, _12, _13);
_18.0 = _9 as u32;
_8 = _11.0 ^ _11.0;
match _16.1.1 {
0 => bb10,
1 => bb11,
81 => bb13,
_ => bb12
}
}
bb10 = {
Return()
}
bb11 = {
Return()
}
bb12 = {
Return()
}
bb13 = {
_11.1 = _18.2 as u32;
_21 = [309279126313648802820872414698331801772_u128,17129846821535521924025245076360363347_u128,297993203736040638063316732721627693195_u128,227234957173681208610050599445696055946_u128,237260747958356791720141999809132895575_u128,147524295325154232157822284296194376885_u128,180492171713016853908515162340535683382_u128,275181433926938838783930098875556449109_u128];
_16.1.2 = (*_1) < (*_5);
_17 = core::ptr::addr_of_mut!(_12);
(*_17) = _14 as i128;
_16.1 = (_4, _18.1, _18.2);
_16.1.2 = (*_6) > _11.3;
_11 = (_2, _4, (*_17), _13);
RET = _9 + _9;
_16.1 = (_11.1, _18.1, _18.2);
_19 = _12 as f32;
(*_3) = _7 ^ _7;
_11.1 = !_4;
_11.0 = -_8;
RET = _18.1 as isize;
(*_5) = _13 + _13;
_15 = _18.2 as u64;
_13 = _15 as i32;
RET = _8 as isize;
(*_6) = !_7;
_18 = (_4, _16.1.1, _16.1.2);
(*_3) = _7;
_17 = core::ptr::addr_of_mut!((*_17));
_15 = !17674408083001185926_u64;
(*_6) = !_10;
_16 = (_21, _18);
_3 = core::ptr::addr_of_mut!((*_5));
Goto(bb14)
}
bb14 = {
Call(_23 = dump_var(7_usize, 10_usize, Move(_10), 13_usize, Move(_13), 18_usize, Move(_18), 7_usize, Move(_7)), ReturnTo(bb15), UnwindUnreachable())
}
bb15 = {
Call(_23 = dump_var(7_usize, 21_usize, Move(_21), 12_usize, Move(_12), 24_usize, _24, 24_usize, _24), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn8(mut _1: i32,mut _2: i32,mut _3: i128,mut _4: i32,mut _5: i32,mut _6: i32,mut _7: i128) -> f64 {
mir! {
type RET = f64;
let _8: [u8; 1];
let _9: isize;
let _10: f64;
let _11: [char; 7];
let _12: f32;
let _13: char;
let _14: (isize, *mut u128, u32);
let _15: Adt51;
let _16: char;
let _17: [u64; 5];
let _18: isize;
let _19: isize;
let _20: *mut i128;
let _21: [char; 6];
let _22: (u16, i128);
let _23: ([u128; 8], (u32, u8, bool));
let _24: i16;
let _25: f32;
let _26: i64;
let _27: *const *mut u128;
let _28: u128;
let _29: char;
let _30: ();
let _31: ();
{
RET = _2 as f64;
_8 = [116_u8];
_5 = _4 | _4;
_2 = !_5;
RET = 26202_i16 as f64;
_4 = -_2;
_6 = 18005964939867652401473280499021143076_u128 as i32;
_2 = '\u{4714a}' as i32;
_5 = 58_i8 as i32;
_9 = (-9223372036854775808_isize);
_5 = !_4;
_8 = [39_u8];
_11 = ['\u{21aa2}','\u{b2df9}','\u{b333c}','\u{d437}','\u{10f965}','\u{3da63}','\u{278a9}'];
RET = 13613804300821036566_u64 as f64;
_12 = 9208100349260895135_usize as f32;
_1 = -_4;
RET = _12 as f64;
_5 = _1;
_7 = _3 & _3;
_5 = _4 + _4;
_10 = _12 as f64;
_12 = _7 as f32;
_7 = _9 as i128;
RET = _10;
Call(_2 = core::intrinsics::transmute(_6), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_12 = _3 as f32;
_13 = '\u{fe181}';
_3 = _7;
_5 = _4 - _1;
_1 = _4 << _4;
_3 = -_7;
_10 = 5315288471728296083_i64 as f64;
_13 = '\u{3ad3e}';
_2 = _3 as i32;
RET = _10;
RET = -_10;
Goto(bb2)
}
bb2 = {
_14.2 = !2550751369_u32;
_5 = 1018338953081238951_i64 as i32;
RET = -_10;
RET = -_10;
_14.0 = _9;
_14.2 = 2241156991_u32 - 1788896251_u32;
_11 = [_13,_13,_13,_13,_13,_13,_13];
_13 = '\u{67f5}';
Call(_13 = fn9(_2, _4, _10, _9), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_1 = _4;
_8 = [247_u8];
_11 = [_13,_13,_13,_13,_13,_13,_13];
_12 = (-110_i8) as f32;
_16 = _13;
_10 = 76720450528353755754629146292027679366_u128 as f64;
_9 = _14.0;
_12 = (-5265_i16) as f32;
_15.fld0.0 = 1_usize as isize;
_16 = _13;
Goto(bb4)
}
bb4 = {
_3 = _7;
_3 = _7 ^ _7;
_11 = [_16,_16,_16,_16,_13,_13,_13];
_17 = [13651789431690507162_u64,16495855629615685107_u64,9393659167108652757_u64,5839714450528613369_u64,15057143044990878842_u64];
_3 = 55_i8 as i128;
Call(_14.0 = core::intrinsics::transmute(_9), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
_16 = _13;
_17 = [3267116935992021617_u64,1649061564267993329_u64,792146121036891952_u64,49384680970128058_u64,16297688512008372536_u64];
_1 = 216_u8 as i32;
Goto(bb6)
}
bb6 = {
_15.fld0.0 = -_9;
_7 = _3 << _4;
RET = _10 / 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001240511253904018_f64;
_16 = _13;
_13 = _16;
_6 = _4;
_1 = _4;
_13 = _16;
_3 = _7;
Call(_9 = fn12(_2, _11, _4), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
_5 = 3777399395835495427_u64 as i32;
_10 = 38847_u16 as f64;
_7 = _3;
_2 = _1;
_17 = [3667723892041135284_u64,9766410252330148320_u64,2188128736566507668_u64,14920398914685178455_u64,1711815884617549100_u64];
_18 = _10 as isize;
_12 = (-117_i8) as f32;
_5 = _6 >> _1;
_10 = _12 as f64;
_7 = _3 + _3;
_17 = [13455571399022593781_u64,11768586326548927268_u64,13747447908275163652_u64,8574705652676413256_u64,17530156029053034966_u64];
_12 = _10 as f32;
_15.fld0.0 = _18;
_4 = 3630632991273784686_usize as i32;
_3 = _7;
RET = _10 + _10;
Call(_20 = fn13(_16, _3, _17, _13, _17, _11, _4, _2, _7, _10, _15.fld0.0, _15.fld0.0), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
_11 = [_13,_16,_13,_16,_16,_13,_16];
_1 = _5 + _5;
RET = _10;
_1 = _2;
_19 = _12 as isize;
_7 = 37397109827438364449844326276737583087_u128 as i128;
_14.0 = _18;
_20 = core::ptr::addr_of_mut!(_7);
_19 = _14.0 ^ _18;
_15.fld0.0 = _13 as isize;
_20 = core::ptr::addr_of_mut!(_3);
_7 = (*_20) ^ (*_20);
_3 = _7 << _5;
_15.fld0.0 = 2645752699323020310_u64 as isize;
_21 = [_13,_13,_16,_13,_13,_13];
(*_20) = _7 >> _6;
_22.0 = 9875_u16 | 27497_u16;
_12 = 7_u8 as f32;
_16 = _13;
_11 = [_16,_13,_16,_13,_13,_16,_13];
_22 = (33686_u16, (*_20));
_16 = _13;
_8 = [159_u8];
_8 = [108_u8];
_23.1.2 = true;
_15.fld0.2 = _14.2 + _14.2;
_23.1.1 = 227_u8 ^ 242_u8;
_9 = _15.fld0.0;
_7 = _3;
match _22.0 {
33686 => bb9,
_ => bb2
}
}
bb9 = {
_1 = _5;
Goto(bb10)
}
bb10 = {
_19 = _12 as isize;
_8 = [_23.1.1];
_5 = _6;
_8 = [_23.1.1];
_14.2 = !_15.fld0.2;
_18 = -_9;
_22 = (13832_u16, _3);
_23.0 = [188202572082850555118576011907123006648_u128,107701123043844208930307789138082414181_u128,287426783219187870221215432573864255504_u128,76228232188677234695024922846758766221_u128,100343896650176911453605458417141506513_u128,219701388539930854972458412816712023483_u128,196881441384518679993116156891563568584_u128,64626282554796807107532339085222192937_u128];
_19 = _14.0 * _9;
_23.1 = (_15.fld0.2, 141_u8, true);
_26 = -9103290714527330970_i64;
_16 = _13;
_9 = _1 as isize;
_2 = _1 | _5;
_3 = _9 as i128;
_10 = 49043387051278468111768343484776957200_u128 as f64;
_14.1 = core::ptr::addr_of_mut!(_28);
_28 = _23.1.2 as u128;
match _22.0 {
0 => bb2,
1 => bb11,
2 => bb12,
13832 => bb14,
_ => bb13
}
}
bb11 = {
_1 = _5;
Goto(bb10)
}
bb12 = {
_14.2 = !2550751369_u32;
_5 = 1018338953081238951_i64 as i32;
RET = -_10;
RET = -_10;
_14.0 = _9;
_14.2 = 2241156991_u32 - 1788896251_u32;
_11 = [_13,_13,_13,_13,_13,_13,_13];
_13 = '\u{67f5}';
Call(_13 = fn9(_2, _4, _10, _9), ReturnTo(bb3), UnwindUnreachable())
}
bb13 = {
_5 = 3777399395835495427_u64 as i32;
_10 = 38847_u16 as f64;
_7 = _3;
_2 = _1;
_17 = [3667723892041135284_u64,9766410252330148320_u64,2188128736566507668_u64,14920398914685178455_u64,1711815884617549100_u64];
_18 = _10 as isize;
_12 = (-117_i8) as f32;
_5 = _6 >> _1;
_10 = _12 as f64;
_7 = _3 + _3;
_17 = [13455571399022593781_u64,11768586326548927268_u64,13747447908275163652_u64,8574705652676413256_u64,17530156029053034966_u64];
_12 = _10 as f32;
_15.fld0.0 = _18;
_4 = 3630632991273784686_usize as i32;
_3 = _7;
RET = _10 + _10;
Call(_20 = fn13(_16, _3, _17, _13, _17, _11, _4, _2, _7, _10, _15.fld0.0, _15.fld0.0), ReturnTo(bb8), UnwindUnreachable())
}
bb14 = {
_14.1 = core::ptr::addr_of_mut!(_28);
_7 = (*_20) & (*_20);
_18 = 16477351034552664020_usize as isize;
_15.fld0.1 = _14.1;
_17 = [824066190226789749_u64,15275736703570171607_u64,11543441290402697952_u64,11499009020548035973_u64,6260086642789168024_u64];
_23.1.1 = !101_u8;
_26 = 7276094261328989868_i64 >> _2;
_14.0 = _9 ^ _9;
_19 = !_9;
_14.0 = _19 >> _22.0;
_19 = _14.0 >> _22.0;
_3 = _23.1.1 as i128;
_3 = !_7;
_12 = (-32015_i16) as f32;
_23.1.0 = _14.2 * _14.2;
_2 = _12 as i32;
_28 = _26 as u128;
_20 = core::ptr::addr_of_mut!(_7);
_21 = [_16,_13,_13,_13,_13,_16];
_11 = [_13,_13,_13,_16,_13,_16,_16];
_15.fld0.1 = _14.1;
Goto(bb15)
}
bb15 = {
Call(_30 = dump_var(8_usize, 9_usize, Move(_9), 16_usize, Move(_16), 3_usize, Move(_3), 22_usize, Move(_22)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_30 = dump_var(8_usize, 23_usize, Move(_23), 5_usize, Move(_5), 19_usize, Move(_19), 6_usize, Move(_6)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_30 = dump_var(8_usize, 8_usize, Move(_8), 26_usize, Move(_26), 31_usize, _31, 31_usize, _31), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn9(mut _1: i32,mut _2: i32,mut _3: f64,mut _4: isize) -> char {
mir! {
type RET = char;
let _5: Adt62;
let _6: u8;
let _7: u32;
let _8: usize;
let _9: [bool; 4];
let _10: usize;
let _11: isize;
let _12: Adt64;
let _13: [u64; 6];
let _14: char;
let _15: *mut *const *mut i128;
let _16: isize;
let _17: [u64; 5];
let _18: (isize, *mut u128, u32);
let _19: *mut *const *mut i128;
let _20: Adt64;
let _21: ([u128; 8], (u32, u8, bool));
let _22: f64;
let _23: Adt51;
let _24: Adt50;
let _25: (f32, usize, i128, (u16, i128));
let _26: usize;
let _27: isize;
let _28: Adt64;
let _29: Adt62;
let _30: bool;
let _31: *const *mut i128;
let _32: [u8; 7];
let _33: i64;
let _34: u8;
let _35: isize;
let _36: Adt54;
let _37: u64;
let _38: (u16, i128);
let _39: [char; 6];
let _40: u32;
let _41: i64;
let _42: [u128; 8];
let _43: *const *mut *const *mut i128;
let _44: [char; 5];
let _45: bool;
let _46: Adt63;
let _47: ();
let _48: ();
{
RET = '\u{391f}';
_5.fld0.0 = (-5441351208172745280_i64);
_5.fld0.3 = -_2;
_2 = _5.fld0.3 >> _5.fld0.3;
_5.fld2 = [16481067711646384468_u64,9395885015717075610_u64,11993823965379620354_u64,13312570622313200239_u64,9888155798383772867_u64];
_5.fld3 = -_5.fld0.0;
_5.fld0 = (_5.fld3, 3877414947_u32, 39487457485045990008605532418867197306_i128, _2);
_6 = 143_u8 * 101_u8;
_5.fld0.2 = !(-99282991204428915880644809215179791313_i128);
RET = '\u{191eb}';
_5.fld3 = _5.fld0.0 - _5.fld0.0;
_5.fld0 = (_5.fld3, 3383833353_u32, (-60490084318438700990592882989499567013_i128), _2);
_5.fld0.0 = !_5.fld3;
_7 = _5.fld0.1;
_5.fld0.0 = _5.fld3;
Goto(bb1)
}
bb1 = {
_5.fld0 = (_5.fld3, _7, 19051846110718671561000097517910113662_i128, _2);
_7 = _5.fld0.1;
_5.fld0 = (_5.fld3, _7, (-100312783064399452113052755554268876564_i128), _2);
_8 = 5_usize;
_4 = _5.fld3 as isize;
_7 = !_5.fld0.1;
_5.fld0.0 = false as i64;
_9 = [true,false,true,false];
_11 = _4 ^ _4;
_5.fld1[_8] = '\u{35425}';
_11 = _4;
_10 = _5.fld0.2 as usize;
_5.fld0.0 = !_5.fld3;
_12.fld0 = _6;
_3 = 153736331923404548098740236542817758554_u128 as f64;
_6 = _5.fld0.2 as u8;
_9 = [false,true,false,true];
RET = _5.fld1[_8];
RET = _5.fld1[_8];
_5.fld0.3 = _2 & _2;
_2 = !_5.fld0.3;
_5.fld1 = ['\u{ff713}','\u{655e9}','\u{7b8fd}','\u{e6911}','\u{ff57a}','\u{c47cc}'];
Call(_5.fld0.3 = fn10(_5.fld1, _5.fld0.2, _11, _6, _1, _5.fld0.2, _6), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_5.fld1 = ['\u{5fdf7}','\u{4b63f}','\u{1006b2}','\u{26bde}','\u{aced6}','\u{ca8e7}'];
_3 = 7575177775000854999_u64 as f64;
_10 = _8;
_5.fld0.1 = _7;
_6 = _12.fld0;
_13 = [10833883153134103339_u64,5137114614623029510_u64,17462082146721014136_u64,16418485078439965375_u64,18056095127278122651_u64,839733170465372661_u64];
_8 = _10;
RET = _5.fld1[_10];
_5.fld0.2 = (-50207014656978352252676547654533478158_i128);
_7 = _5.fld0.1 ^ _5.fld0.1;
_5.fld0.3 = _3 as i32;
Call(_10 = core::intrinsics::transmute(_13[_10]), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_5.fld0.0 = !_5.fld3;
_5.fld1 = ['\u{aab31}','\u{f778f}','\u{2ecaa}','\u{1cdd9}','\u{5080a}','\u{29756}'];
RET = _5.fld1[_8];
_5.fld0.1 = _7;
_14 = _5.fld1[_8];
_5.fld0.2 = false as i128;
_5.fld1 = [_14,_14,_14,_14,_14,_14];
_6 = _12.fld0 + _12.fld0;
_3 = _13[_8] as f64;
_12.fld0 = !_6;
_9 = [false,false,false,true];
RET = _14;
_5.fld3 = _5.fld0.0 | _5.fld0.0;
_5.fld1[_8] = _14;
_10 = _8 >> _7;
_13[_8] = !2614593255549088471_u64;
_7 = !_5.fld0.1;
_12 = Adt64 { fld0: _6 };
Goto(bb4)
}
bb4 = {
RET = _5.fld1[_8];
_11 = (-5107_i16) as isize;
_5.fld0.1 = _7;
_17 = [_13[_8],_13[_8],_13[_8],_13[_8],_13[_8]];
_16 = _4;
_6 = !_12.fld0;
_5.fld0.2 = 64311763457248382642080233354424394242_i128;
_13 = [11223541886938586290_u64,9880390379408512124_u64,6618389916261297055_u64,5726346586217659360_u64,7503625206984650562_u64,6755896264762839866_u64];
_14 = _5.fld1[_8];
_4 = _5.fld0.2 as isize;
_16 = _7 as isize;
_5.fld0 = (_5.fld3, _7, (-64146497324151810606938714823293929576_i128), _2);
RET = _5.fld1[_8];
_7 = _5.fld0.1;
_6 = _12.fld0 + _12.fld0;
_8 = _3 as usize;
_3 = _5.fld0.0 as f64;
RET = _14;
_6 = !_12.fld0;
_18.0 = !_16;
_20.fld0 = _6;
_17 = [16355039356768062761_u64,11905445184564745935_u64,11334373696081674652_u64,1353758236700197547_u64,3237635797032527021_u64];
RET = _14;
_20 = Move(_12);
Goto(bb5)
}
bb5 = {
RET = _14;
_5.fld1 = [_14,_14,_14,_14,_14,_14];
_5.fld0.1 = _7 % 2162224067_u32;
_8 = _10 % 10844046654096548536_usize;
_11 = _5.fld0.0 as isize;
_5.fld0 = (_5.fld3, _7, (-71017308402937516076829102113179341569_i128), _2);
_21.1 = (_7, _20.fld0, true);
_3 = (-24396_i16) as f64;
_16 = _18.0 << _21.1.0;
_16 = _18.0 + _18.0;
_17 = _5.fld2;
_8 = _10 * _10;
RET = _14;
_4 = !_16;
_18.2 = _21.1.0;
_5.fld3 = _2 as i64;
_18.2 = !_21.1.0;
RET = _14;
_18.0 = _21.1.2 as isize;
_24.fld3 = core::ptr::addr_of_mut!(_18);
_22 = _3;
_10 = _8 | _8;
_5.fld2 = [6670377710927481876_u64,17469805780265785769_u64,14876914218212930543_u64,14141969150846844257_u64,2671147815554143884_u64];
_20.fld0 = _5.fld3 as u8;
_5.fld0 = (_5.fld3, _7, 123884258440773707486539384086166212314_i128, _2);
match _5.fld0.2 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb6,
5 => bb7,
6 => bb8,
123884258440773707486539384086166212314 => bb10,
_ => bb9
}
}
bb6 = {
RET = _5.fld1[_8];
_11 = (-5107_i16) as isize;
_5.fld0.1 = _7;
_17 = [_13[_8],_13[_8],_13[_8],_13[_8],_13[_8]];
_16 = _4;
_6 = !_12.fld0;
_5.fld0.2 = 64311763457248382642080233354424394242_i128;
_13 = [11223541886938586290_u64,9880390379408512124_u64,6618389916261297055_u64,5726346586217659360_u64,7503625206984650562_u64,6755896264762839866_u64];
_14 = _5.fld1[_8];
_4 = _5.fld0.2 as isize;
_16 = _7 as isize;
_5.fld0 = (_5.fld3, _7, (-64146497324151810606938714823293929576_i128), _2);
RET = _5.fld1[_8];
_7 = _5.fld0.1;
_6 = _12.fld0 + _12.fld0;
_8 = _3 as usize;
_3 = _5.fld0.0 as f64;
RET = _14;
_6 = !_12.fld0;
_18.0 = !_16;
_20.fld0 = _6;
_17 = [16355039356768062761_u64,11905445184564745935_u64,11334373696081674652_u64,1353758236700197547_u64,3237635797032527021_u64];
RET = _14;
_20 = Move(_12);
Goto(bb5)
}
bb7 = {
_5.fld0.0 = !_5.fld3;
_5.fld1 = ['\u{aab31}','\u{f778f}','\u{2ecaa}','\u{1cdd9}','\u{5080a}','\u{29756}'];
RET = _5.fld1[_8];
_5.fld0.1 = _7;
_14 = _5.fld1[_8];
_5.fld0.2 = false as i128;
_5.fld1 = [_14,_14,_14,_14,_14,_14];
_6 = _12.fld0 + _12.fld0;
_3 = _13[_8] as f64;
_12.fld0 = !_6;
_9 = [false,false,false,true];
RET = _14;
_5.fld3 = _5.fld0.0 | _5.fld0.0;
_5.fld1[_8] = _14;
_10 = _8 >> _7;
_13[_8] = !2614593255549088471_u64;
_7 = !_5.fld0.1;
_12 = Adt64 { fld0: _6 };
Goto(bb4)
}
bb8 = {
_5.fld1 = ['\u{5fdf7}','\u{4b63f}','\u{1006b2}','\u{26bde}','\u{aced6}','\u{ca8e7}'];
_3 = 7575177775000854999_u64 as f64;
_10 = _8;
_5.fld0.1 = _7;
_6 = _12.fld0;
_13 = [10833883153134103339_u64,5137114614623029510_u64,17462082146721014136_u64,16418485078439965375_u64,18056095127278122651_u64,839733170465372661_u64];
_8 = _10;
RET = _5.fld1[_10];
_5.fld0.2 = (-50207014656978352252676547654533478158_i128);
_7 = _5.fld0.1 ^ _5.fld0.1;
_5.fld0.3 = _3 as i32;
Call(_10 = core::intrinsics::transmute(_13[_10]), ReturnTo(bb3), UnwindUnreachable())
}
bb9 = {
_5.fld0 = (_5.fld3, _7, 19051846110718671561000097517910113662_i128, _2);
_7 = _5.fld0.1;
_5.fld0 = (_5.fld3, _7, (-100312783064399452113052755554268876564_i128), _2);
_8 = 5_usize;
_4 = _5.fld3 as isize;
_7 = !_5.fld0.1;
_5.fld0.0 = false as i64;
_9 = [true,false,true,false];
_11 = _4 ^ _4;
_5.fld1[_8] = '\u{35425}';
_11 = _4;
_10 = _5.fld0.2 as usize;
_5.fld0.0 = !_5.fld3;
_12.fld0 = _6;
_3 = 153736331923404548098740236542817758554_u128 as f64;
_6 = _5.fld0.2 as u8;
_9 = [false,true,false,true];
RET = _5.fld1[_8];
RET = _5.fld1[_8];
_5.fld0.3 = _2 & _2;
_2 = !_5.fld0.3;
_5.fld1 = ['\u{ff713}','\u{655e9}','\u{7b8fd}','\u{e6911}','\u{ff57a}','\u{c47cc}'];
Call(_5.fld0.3 = fn10(_5.fld1, _5.fld0.2, _11, _6, _1, _5.fld0.2, _6), ReturnTo(bb2), UnwindUnreachable())
}
bb10 = {
_6 = !_20.fld0;
_5.fld0 = (_5.fld3, _21.1.0, 25621619751108132373259060081033463378_i128, _2);
_3 = 83379172299409011371522660531454094741_u128 as f64;
_21.0 = [260483038414156141076856058249818512092_u128,285376561404313367001637577660830872064_u128,97818202985486997156846736800076585031_u128,301965480698321088744408701190467507028_u128,25160596950961227179077315662633632630_u128,214181564848862313994422618796633801703_u128,15794642322982951934632330291385931181_u128,326405590041085676200313847649986081897_u128];
_23.fld0.1 = core::ptr::addr_of_mut!(_24.fld0.1);
_4 = _18.0 + _18.0;
_24.fld4 = [_6];
_25.3.1 = _5.fld0.2;
Goto(bb11)
}
bb11 = {
_5.fld1 = [_14,_14,_14,_14,_14,_14];
_18.1 = core::ptr::addr_of_mut!(_24.fld0.1);
_23 = Adt51 { fld0: _18 };
_23.fld0.0 = 262231027606725974913806162676561417710_u128 as isize;
_5.fld3 = !_5.fld0.0;
_3 = _2 as f64;
_5.fld0.1 = _18.2 / 2264028906_u32;
_22 = 151724931954773434778294884286180811806_u128 as f64;
_5.fld0.1 = !_21.1.0;
_24.fld0.0 = core::ptr::addr_of_mut!(_2);
_18.1 = core::ptr::addr_of_mut!(_24.fld0.1);
_21.1 = (_18.2, _6, true);
_23.fld0.1 = core::ptr::addr_of_mut!(_24.fld0.1);
_13 = [3634885770883439532_u64,668628080776435849_u64,5315245898968108153_u64,9026077970101579030_u64,16405183465605073379_u64,2284038900157896520_u64];
_29.fld0.3 = _5.fld0.3 - _5.fld0.3;
_18.1 = core::ptr::addr_of_mut!(_24.fld0.1);
_25.3.0 = 18583_u16 % 64488_u16;
_29.fld0.0 = _5.fld3;
_30 = !_21.1.2;
_29 = Move(_5);
_4 = _18.0 - _16;
_24.fld2 = [_20.fld0,_6,_20.fld0,_20.fld0,_6,_20.fld0,_6];
_24.fld0.1 = 305463268126875488588029927464961587842_u128;
match _29.fld0.2 {
0 => bb1,
1 => bb9,
2 => bb3,
25621619751108132373259060081033463378 => bb12,
_ => bb4
}
}
bb12 = {
_29.fld0.2 = _25.3.1 << _18.2;
_28 = Adt64 { fld0: _20.fld0 };
_23.fld0.1 = core::ptr::addr_of_mut!(_24.fld0.1);
_3 = -_22;
_32 = _24.fld2;
_38 = (_25.3.0, _29.fld0.2);
_16 = _18.0 + _4;
_23.fld0.2 = _18.2 * _18.2;
_24.fld1 = core::ptr::addr_of_mut!(_31);
_35 = -_4;
_24.fld4 = [_6];
_43 = core::ptr::addr_of!(_15);
_36.fld4 = [_8,_8];
_29.fld2 = [2773248651794176679_u64,7864058900502886533_u64,12296213331637041550_u64,6383912863480083958_u64,3057721852189019534_u64];
_10 = _8 | _8;
_33 = _29.fld3;
_26 = _8;
match _25.3.1 {
25621619751108132373259060081033463378 => bb14,
_ => bb13
}
}
bb13 = {
_5.fld1 = [_14,_14,_14,_14,_14,_14];
_18.1 = core::ptr::addr_of_mut!(_24.fld0.1);
_23 = Adt51 { fld0: _18 };
_23.fld0.0 = 262231027606725974913806162676561417710_u128 as isize;
_5.fld3 = !_5.fld0.0;
_3 = _2 as f64;
_5.fld0.1 = _18.2 / 2264028906_u32;
_22 = 151724931954773434778294884286180811806_u128 as f64;
_5.fld0.1 = !_21.1.0;
_24.fld0.0 = core::ptr::addr_of_mut!(_2);
_18.1 = core::ptr::addr_of_mut!(_24.fld0.1);
_21.1 = (_18.2, _6, true);
_23.fld0.1 = core::ptr::addr_of_mut!(_24.fld0.1);
_13 = [3634885770883439532_u64,668628080776435849_u64,5315245898968108153_u64,9026077970101579030_u64,16405183465605073379_u64,2284038900157896520_u64];
_29.fld0.3 = _5.fld0.3 - _5.fld0.3;
_18.1 = core::ptr::addr_of_mut!(_24.fld0.1);
_25.3.0 = 18583_u16 % 64488_u16;
_29.fld0.0 = _5.fld3;
_30 = !_21.1.2;
_29 = Move(_5);
_4 = _18.0 - _16;
_24.fld2 = [_20.fld0,_6,_20.fld0,_20.fld0,_6,_20.fld0,_6];
_24.fld0.1 = 305463268126875488588029927464961587842_u128;
match _29.fld0.2 {
0 => bb1,
1 => bb9,
2 => bb3,
25621619751108132373259060081033463378 => bb12,
_ => bb4
}
}
bb14 = {
_18 = (_16, _23.fld0.1, _21.1.0);
_36.fld6 = _33;
_29.fld0.2 = _38.1;
_10 = _26 / 7_usize;
_41 = !_29.fld3;
_25.1 = _10 & _8;
_42 = [_24.fld0.1,_24.fld0.1,_24.fld0.1,_24.fld0.1,_24.fld0.1,_24.fld0.1,_24.fld0.1,_24.fld0.1];
_39 = [_14,_14,_14,_14,_14,_14];
_21.1.0 = _7 | _23.fld0.2;
_24.fld3 = core::ptr::addr_of_mut!(_18);
_46.fld0.2 = _38.1;
_36.fld3 = core::ptr::addr_of!(_25.0);
_27 = _16 >> _29.fld0.3;
(*_43) = core::ptr::addr_of_mut!(_31);
_40 = _23.fld0.2;
_29.fld0.1 = _40;
Goto(bb15)
}
bb15 = {
Call(_47 = dump_var(9_usize, 42_usize, Move(_42), 41_usize, Move(_41), 16_usize, Move(_16), 38_usize, Move(_38)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_47 = dump_var(9_usize, 26_usize, Move(_26), 33_usize, Move(_33), 9_usize, Move(_9), 6_usize, Move(_6)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_47 = dump_var(9_usize, 35_usize, Move(_35), 8_usize, Move(_8), 11_usize, Move(_11), 2_usize, Move(_2)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn10(mut _1: [char; 6],mut _2: i128,mut _3: isize,mut _4: u8,mut _5: i32,mut _6: i128,mut _7: u8) -> i32 {
mir! {
type RET = i32;
let _8: *mut u128;
let _9: [char; 6];
let _10: Adt55;
let _11: Adt62;
let _12: [u128; 8];
let _13: u16;
let _14: Adt57;
let _15: [bool; 4];
let _16: *mut i32;
let _17: isize;
let _18: Adt58;
let _19: (*mut i32, u128);
let _20: u64;
let _21: f32;
let _22: u16;
let _23: *const f32;
let _24: *mut (isize, *mut u128, u32);
let _25: [u8; 7];
let _26: [u64; 5];
let _27: f64;
let _28: Adt49;
let _29: (i64, u32, i128, i32);
let _30: char;
let _31: ();
let _32: ();
{
_5 = 1507349995_i32 * 1529594425_i32;
_4 = _7;
_2 = _6;
RET = (-89_i8) as i32;
_1 = ['\u{47517}','\u{a65c2}','\u{f38ae}','\u{94380}','\u{6d432}','\u{10369c}'];
_3 = 9223372036854775807_isize | (-29_isize);
_5 = 31_i8 as i32;
_1 = ['\u{c8d4e}','\u{3d57d}','\u{8012d}','\u{a0e4c}','\u{18dd7}','\u{83bfb}'];
_2 = _6 << _7;
_4 = 4251690973_u32 as u8;
_7 = !_4;
_5 = 1195419391_i32;
_10.fld2.fld0.1 = 15458_i16 as i128;
_10.fld5.3.0 = _5 as u16;
_10.fld6 = [_4];
_10.fld2.fld0 = (_10.fld5.3.0, _6);
_6 = _10.fld2.fld0.1 | _2;
_10.fld2.fld0.1 = '\u{68f2d}' as i128;
_9 = ['\u{11790}','\u{2ee9f}','\u{71f2b}','\u{282fa}','\u{df4e3}','\u{f39ca}'];
_6 = false as i128;
_10.fld5.0 = (-2736_i16) as f32;
_10.fld5.3.0 = !_10.fld2.fld0.0;
match _5 {
0 => bb1,
1195419391 => bb3,
_ => bb2
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
_10.fld0 = _10.fld5.0 as usize;
_10.fld6 = [_4];
_10.fld5.3.1 = -_2;
_6 = -_2;
_10.fld4 = 3294026339372044596_i64 as i16;
_10.fld2.fld0 = (_10.fld5.3.0, _6);
match _5 {
0 => bb4,
1195419391 => bb6,
_ => bb5
}
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
RET = -_5;
_10.fld1 = [104320833771625468855329416522169401480_u128];
_13 = true as u16;
_14.fld1.1 = 284903182038203200353149458068158985079_u128;
_14.fld2.fld0.2 = 860650562_u32;
_13 = _10.fld5.3.0;
_10.fld6 = [_7];
_10.fld5.3 = _10.fld2.fld0;
_11.fld0.1 = !_14.fld2.fld0.2;
_11.fld0 = ((-7930156266022509360_i64), _14.fld2.fld0.2, _6, _5);
_10.fld5.0 = _3 as f32;
_12 = [_14.fld1.1,_14.fld1.1,_14.fld1.1,_14.fld1.1,_14.fld1.1,_14.fld1.1,_14.fld1.1,_14.fld1.1];
_10.fld2.fld0.1 = _11.fld0.2 * _11.fld0.2;
_10.fld3 = ['\u{757f}','\u{ccf3d}','\u{5526a}','\u{889a1}','\u{cc383}','\u{109622}'];
_8 = core::ptr::addr_of_mut!(_14.fld1.1);
Call(_2 = fn11(_7, _14.fld1.1, _9, _11.fld0, _11.fld0.1, (*_8), (*_8), (*_8), (*_8), _6, _7, _13, _13, _11.fld0, _13, _5), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
_1 = ['\u{c0285}','\u{10d5e2}','\u{6d2cc}','\u{4f57c}','\u{3593a}','\u{ffdc8}'];
_10.fld5.1 = !_10.fld0;
_1 = ['\u{464bd}','\u{4c930}','\u{10c4ac}','\u{43836}','\u{32159}','\u{fbd46}'];
_16 = core::ptr::addr_of_mut!(_11.fld0.3);
_12 = [(*_8),(*_8),(*_8),(*_8),(*_8),(*_8),(*_8),(*_8)];
_10.fld5.1 = 15892714711021446197_u64 as usize;
_10.fld6 = [_7];
_10.fld5.3.1 = _3 as i128;
_18.fld0.fld3 = !_10.fld5.1;
_18.fld0.fld2 = (_11.fld0.0, _14.fld2.fld0.2, _11.fld0.2, (*_16));
RET = !(*_16);
_18.fld0.fld4 = [_18.fld0.fld2.2,_11.fld0.2];
_7 = 6918415880544470578_u64 as u8;
_14.fld0 = -_11.fld0.0;
RET = 122_i8 as i32;
_11.fld1 = ['\u{6f906}','\u{10aa5d}','\u{53d2b}','\u{bfb85}','\u{f5d11}','\u{c58a6}'];
_18.fld0.fld2 = (_11.fld0.0, _14.fld2.fld0.2, _2, (*_16));
_9 = ['\u{a57f2}','\u{68397}','\u{73f9c}','\u{10a95b}','\u{35b2c}','\u{647a6}'];
_10.fld5.2 = -_2;
_9 = ['\u{25c6}','\u{13dcd}','\u{eae6b}','\u{93006}','\u{32f0b}','\u{7dd4a}'];
_14.fld1.0 = core::ptr::addr_of_mut!(_11.fld0.3);
_10.fld6 = [_7];
_11.fld3 = !_11.fld0.0;
_18.fld1 = _18.fld0.fld2.2 as i64;
Goto(bb8)
}
bb8 = {
_18.fld0.fld4 = [_11.fld0.2,_10.fld2.fld0.1];
_11.fld0.2 = _10.fld4 as i128;
_9 = ['\u{9120}','\u{2062d}','\u{f63d8}','\u{41e1a}','\u{2028b}','\u{bc4dc}'];
_18.fld0.fld1 = -(*_16);
RET = !_11.fld0.3;
_11.fld0 = _18.fld0.fld2;
_19 = (_14.fld1.0, (*_8));
_12 = [(*_8),_19.1,(*_8),_14.fld1.1,(*_8),(*_8),_14.fld1.1,(*_8)];
_10.fld5.3.1 = -_2;
Goto(bb9)
}
bb9 = {
_10.fld3 = ['\u{c0a60}','\u{59c2c}','\u{3e1a8}','\u{76212}','\u{d671f}','\u{7e842}'];
_11.fld0.3 = _18.fld0.fld2.1 as i32;
_10.fld6 = [_4];
_1 = _10.fld3;
_5 = -_11.fld0.3;
(*_16) = _18.fld0.fld1;
_23 = core::ptr::addr_of!(_21);
_18.fld0.fld0 = core::ptr::addr_of_mut!(_18.fld0.fld2);
(*_23) = -_10.fld5.0;
(*_23) = -_10.fld5.0;
_14.fld1.0 = _19.0;
Goto(bb10)
}
bb10 = {
_24 = core::ptr::addr_of_mut!(_14.fld2.fld0);
_18.fld1 = _11.fld0.0 >> _14.fld0;
_10.fld6 = [_7];
(*_24) = (_3, _8, _11.fld0.1);
_17 = 8164898013572473743_u64 as isize;
_10.fld0 = _10.fld5.1 << _11.fld3;
_24 = core::ptr::addr_of_mut!((*_24));
_10.fld4 = (-32253_i16);
match _18.fld0.fld2.0 {
340282366920938463455444451165745702096 => bb12,
_ => bb11
}
}
bb11 = {
_1 = ['\u{c0285}','\u{10d5e2}','\u{6d2cc}','\u{4f57c}','\u{3593a}','\u{ffdc8}'];
_10.fld5.1 = !_10.fld0;
_1 = ['\u{464bd}','\u{4c930}','\u{10c4ac}','\u{43836}','\u{32159}','\u{fbd46}'];
_16 = core::ptr::addr_of_mut!(_11.fld0.3);
_12 = [(*_8),(*_8),(*_8),(*_8),(*_8),(*_8),(*_8),(*_8)];
_10.fld5.1 = 15892714711021446197_u64 as usize;
_10.fld6 = [_7];
_10.fld5.3.1 = _3 as i128;
_18.fld0.fld3 = !_10.fld5.1;
_18.fld0.fld2 = (_11.fld0.0, _14.fld2.fld0.2, _11.fld0.2, (*_16));
RET = !(*_16);
_18.fld0.fld4 = [_18.fld0.fld2.2,_11.fld0.2];
_7 = 6918415880544470578_u64 as u8;
_14.fld0 = -_11.fld0.0;
RET = 122_i8 as i32;
_11.fld1 = ['\u{6f906}','\u{10aa5d}','\u{53d2b}','\u{bfb85}','\u{f5d11}','\u{c58a6}'];
_18.fld0.fld2 = (_11.fld0.0, _14.fld2.fld0.2, _2, (*_16));
_9 = ['\u{a57f2}','\u{68397}','\u{73f9c}','\u{10a95b}','\u{35b2c}','\u{647a6}'];
_10.fld5.2 = -_2;
_9 = ['\u{25c6}','\u{13dcd}','\u{eae6b}','\u{93006}','\u{32f0b}','\u{7dd4a}'];
_14.fld1.0 = core::ptr::addr_of_mut!(_11.fld0.3);
_10.fld6 = [_7];
_11.fld3 = !_11.fld0.0;
_18.fld1 = _18.fld0.fld2.2 as i64;
Goto(bb8)
}
bb12 = {
_18.fld0.fld0 = core::ptr::addr_of_mut!(_18.fld0.fld2);
_10.fld5.3.0 = _10.fld5.0 as u16;
_11.fld3 = _18.fld0.fld2.0 << _18.fld0.fld2.2;
_22 = _11.fld0.0 as u16;
_7 = _4 % 38_u8;
RET = true as i32;
_25 = [_7,_4,_4,_7,_7,_7,_4];
(*_24).2 = _11.fld0.1 << _11.fld3;
_11.fld0.2 = _18.fld0.fld2.2;
_11.fld1 = ['\u{e9c32}','\u{f9608}','\u{b61b6}','\u{a0176}','\u{d8c74}','\u{2da4b}'];
_10.fld2.fld0 = (_22, _10.fld5.2);
_11.fld2 = [9884352424275095398_u64,16882306549435717337_u64,1044828243954194728_u64,1471884562904282187_u64,2161883541097176522_u64];
RET = _14.fld0 as i32;
_10.fld3 = ['\u{10ebad}','\u{b0d02}','\u{b8d9f}','\u{102f82}','\u{1cf7}','\u{4f1c8}'];
_15 = [true,false,false,false];
_29.1 = _10.fld0 as u32;
_22 = !_10.fld2.fld0.0;
Goto(bb13)
}
bb13 = {
Call(_31 = dump_var(10_usize, 5_usize, Move(_5), 17_usize, Move(_17), 3_usize, Move(_3), 9_usize, Move(_9)), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
Call(_31 = dump_var(10_usize, 25_usize, Move(_25), 2_usize, Move(_2), 4_usize, Move(_4), 32_usize, _32), ReturnTo(bb15), UnwindUnreachable())
}
bb15 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn11(mut _1: u8,mut _2: u128,mut _3: [char; 6],mut _4: (i64, u32, i128, i32),mut _5: u32,mut _6: u128,mut _7: u128,mut _8: u128,mut _9: u128,mut _10: i128,mut _11: u8,mut _12: u16,mut _13: u16,mut _14: (i64, u32, i128, i32),mut _15: u16,mut _16: i32) -> i128 {
mir! {
type RET = i128;
let _17: Adt57;
let _18: bool;
let _19: i16;
let _20: isize;
let _21: u16;
let _22: ();
let _23: ();
{
_4.0 = '\u{9bc32}' as i64;
_14.0 = (-9223372036854775808_isize) as i64;
_14.0 = _13 as i64;
_17.fld2.fld0.0 = _11 as isize;
_14.0 = _5 as i64;
_14.2 = _4.2 | _10;
RET = _4.2 + _4.2;
_17.fld1.0 = core::ptr::addr_of_mut!(_4.3);
_11 = _1 / 119_u8;
RET = _10;
_12 = _13 >> _4.2;
_12 = _15 * _15;
_4 = (_14.0, _14.1, _10, _14.3);
_3 = ['\u{12579}','\u{a3a9b}','\u{d9468}','\u{f396a}','\u{95b3}','\u{cd35e}'];
_17.fld0 = _9 as i64;
_14 = (_4.0, _5, _4.2, _16);
_18 = !false;
_6 = !_8;
_4.1 = _5 - _5;
_14 = _4;
_20 = _11 as isize;
Goto(bb1)
}
bb1 = {
Call(_22 = dump_var(11_usize, 3_usize, Move(_3), 1_usize, Move(_1), 6_usize, Move(_6), 16_usize, Move(_16)), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Call(_22 = dump_var(11_usize, 12_usize, Move(_12), 10_usize, Move(_10), 2_usize, Move(_2), 14_usize, Move(_14)), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Call(_22 = dump_var(11_usize, 18_usize, Move(_18), 23_usize, _23, 23_usize, _23, 23_usize, _23), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn12(mut _1: i32,mut _2: [char; 7],mut _3: i32) -> isize {
mir! {
type RET = isize;
let _4: isize;
let _5: Adt55;
let _6: i32;
let _7: u32;
let _8: *const f32;
let _9: u16;
let _10: i8;
let _11: u128;
let _12: u128;
let _13: bool;
let _14: isize;
let _15: *mut char;
let _16: char;
let _17: *const *mut u128;
let _18: [u128; 1];
let _19: Adt62;
let _20: i16;
let _21: i128;
let _22: [u8; 1];
let _23: Adt62;
let _24: *const *mut *const *mut i128;
let _25: [u8; 1];
let _26: i64;
let _27: *const [i128; 2];
let _28: [u8; 1];
let _29: *const f32;
let _30: (*mut i32, u128);
let _31: ();
let _32: ();
{
RET = 52267_u16 as isize;
_5.fld2.fld0.0 = 4086570312127191527_i64 as u16;
_3 = _1;
_5.fld1 = [145673345646459234746459772207668156202_u128];
_5.fld5.3.0 = _5.fld2.fld0.0 & _5.fld2.fld0.0;
_5.fld5.0 = 3016701700903038653_i64 as f32;
_5.fld2.fld0.1 = false as i128;
_5.fld5.3 = _5.fld2.fld0;
_5.fld0 = 8042287243945499204_usize;
_5.fld5.0 = _5.fld5.3.0 as f32;
_5.fld4 = 62061746666249711300400550707465892621_u128 as i16;
_5.fld6 = [167_u8];
_5.fld5.3.1 = !_5.fld2.fld0.1;
match _5.fld0 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb5,
8042287243945499204 => bb7,
_ => bb6
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
_5.fld5.1 = _5.fld0;
_5.fld3 = ['\u{8a8b1}','\u{a21f1}','\u{171cc}','\u{c54e3}','\u{e5d73}','\u{88ee0}'];
_1 = !_3;
_5.fld5.2 = _5.fld2.fld0.1 * _5.fld5.3.1;
_5.fld2.fld0 = (_5.fld5.3.0, _5.fld5.3.1);
_5.fld6 = [27_u8];
_3 = _1;
_5.fld6 = [82_u8];
_6 = -_1;
_2 = ['\u{60a8c}','\u{ddb3e}','\u{7b2bb}','\u{5c450}','\u{35030}','\u{370f5}','\u{6b87c}'];
_8 = core::ptr::addr_of!(_5.fld5.0);
_5.fld2.fld0.1 = _5.fld5.2;
_6 = 227_u8 as i32;
_8 = core::ptr::addr_of!(_5.fld5.0);
RET = (*_8) as isize;
_5.fld5.0 = (-37_i8) as f32;
_5.fld5.3.1 = _5.fld5.2 >> _1;
_5.fld0 = !_5.fld5.1;
_8 = core::ptr::addr_of!(_5.fld5.0);
_10 = (-116_i8);
match _5.fld5.1 {
0 => bb1,
1 => bb2,
2 => bb6,
3 => bb4,
8042287243945499204 => bb8,
_ => bb5
}
}
bb8 = {
_13 = !true;
_5.fld6 = [144_u8];
_13 = true;
_5.fld1 = [87258657526626892040595593194248794453_u128];
_13 = _10 >= _10;
_4 = 32_isize - 125_isize;
_7 = !1075907432_u32;
_12 = !152575920654267186074500476973533892675_u128;
_5.fld3 = ['\u{6cbda}','\u{b4a29}','\u{9e8f2}','\u{9c507}','\u{b56e1}','\u{e04e7}'];
(*_8) = _12 as f32;
_5.fld5.3.1 = _5.fld2.fld0.1 ^ _5.fld2.fld0.1;
_5.fld5.3.0 = _3 as u16;
(*_8) = _1 as f32;
_8 = core::ptr::addr_of!((*_8));
Goto(bb9)
}
bb9 = {
_7 = 1412088089_u32 ^ 547891797_u32;
_5.fld2.fld0.0 = !_5.fld5.3.0;
_11 = '\u{2c6d1}' as u128;
_16 = '\u{4199f}';
_5.fld3 = [_16,_16,_16,_16,_16,_16];
_5.fld3 = [_16,_16,_16,_16,_16,_16];
RET = 224_u8 as isize;
_10 = 107_i8;
_14 = _5.fld4 as isize;
_5.fld5.1 = _5.fld0;
_3 = 6_u8 as i32;
Goto(bb10)
}
bb10 = {
_5.fld6 = [92_u8];
_18 = [_12];
_2 = [_16,_16,_16,_16,_16,_16,_16];
_13 = false & true;
_19.fld1 = [_16,_16,_16,_16,_16,_16];
_19.fld0.1 = _5.fld2.fld0.0 as u32;
_19.fld0 = (1366246751584616138_i64, _7, _5.fld5.2, _6);
_19.fld0.2 = _5.fld5.3.1;
_20 = _19.fld0.1 as i16;
_19.fld0 = (9150201773558354177_i64, _7, _5.fld5.2, _6);
_13 = true;
_5.fld2.fld0.1 = -_19.fld0.2;
_5.fld5.2 = _5.fld5.3.1;
_5.fld0 = _5.fld5.1 << _5.fld5.2;
_5.fld2.fld0 = (_5.fld5.3.0, _5.fld5.2);
_4 = _5.fld4 as isize;
RET = !_14;
_12 = !_11;
_3 = _6 >> _20;
_20 = _5.fld4 & _5.fld4;
_13 = _5.fld4 != _20;
_5.fld5.3 = (_5.fld2.fld0.0, _5.fld5.2);
_21 = 13767442865585306206_u64 as i128;
_5.fld5.2 = _21;
_19.fld0.2 = _10 as i128;
_5.fld3 = _19.fld1;
Goto(bb11)
}
bb11 = {
_19.fld1 = [_16,_16,_16,_16,_16,_16];
_5.fld1 = [_11];
_8 = core::ptr::addr_of!((*_8));
_6 = _5.fld5.3.0 as i32;
RET = _19.fld0.1 as isize;
_5.fld6 = [37_u8];
_2 = [_16,_16,_16,_16,_16,_16,_16];
_23.fld3 = _19.fld0.0 + _19.fld0.0;
_8 = core::ptr::addr_of!(_5.fld5.0);
_5.fld2.fld0 = _5.fld5.3;
_23.fld2 = [395682661455561314_u64,15809464646362135842_u64,11917597624129176009_u64,1599381912185664154_u64,13353378835908654587_u64];
_5.fld2.fld0 = (_5.fld5.3.0, _5.fld5.3.1);
_19.fld1 = [_16,_16,_16,_16,_16,_16];
_5.fld0 = !_5.fld5.1;
_1 = -_6;
_5.fld5.1 = _5.fld5.3.1 as usize;
_19.fld3 = _23.fld3;
_9 = _5.fld5.3.0 + _5.fld5.3.0;
_5.fld5.3.1 = _19.fld0.2 - _19.fld0.2;
_5.fld1 = [_11];
_5.fld0 = !_5.fld5.1;
_22 = [52_u8];
_23.fld1 = [_16,_16,_16,_16,_16,_16];
_5.fld5.3 = (_9, _5.fld5.2);
match _19.fld0.0 {
9150201773558354177 => bb12,
_ => bb1
}
}
bb12 = {
_5.fld5.3.0 = _14 as u16;
Goto(bb13)
}
bb13 = {
_21 = !_5.fld2.fld0.1;
_5.fld2.fld0.1 = (*_8) as i128;
_23.fld2 = [16291439233890790328_u64,15343473306856992224_u64,10891651921779941347_u64,8177571120391517132_u64,4388197285734585572_u64];
_10 = (-42_i8) + 89_i8;
_4 = !_14;
_23.fld0.1 = !_7;
_18 = _5.fld1;
_15 = core::ptr::addr_of_mut!(_16);
_12 = !_11;
_7 = _23.fld0.1 + _19.fld0.1;
Goto(bb14)
}
bb14 = {
_23.fld0.0 = _19.fld0.0;
RET = _14;
_19.fld1 = _5.fld3;
_21 = _5.fld2.fld0.0 as i128;
_11 = _14 as u128;
_6 = _10 as i32;
_5.fld5.2 = _19.fld0.2;
_11 = _20 as u128;
_19.fld0 = (_19.fld3, _7, _21, _6);
_19.fld0.2 = _5.fld5.3.1;
_5.fld5.0 = _20 as f32;
_15 = core::ptr::addr_of_mut!(_16);
_23.fld3 = (*_8) as i64;
_28 = _22;
_19.fld0.0 = _23.fld0.0 >> _19.fld3;
_5.fld5.1 = !_5.fld0;
_23.fld0 = (_19.fld0.0, _7, _19.fld0.2, _1);
_19.fld0.2 = _5.fld2.fld0.1 * _5.fld2.fld0.1;
(*_8) = _10 as f32;
_23.fld0.3 = _6 ^ _19.fld0.3;
RET = _1 as isize;
_1 = !_19.fld0.3;
Goto(bb15)
}
bb15 = {
Call(_31 = dump_var(12_usize, 4_usize, Move(_4), 7_usize, Move(_7), 18_usize, Move(_18), 9_usize, Move(_9)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_31 = dump_var(12_usize, 10_usize, Move(_10), 11_usize, Move(_11), 6_usize, Move(_6), 22_usize, Move(_22)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_31 = dump_var(12_usize, 2_usize, Move(_2), 32_usize, _32, 32_usize, _32, 32_usize, _32), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn13(mut _1: char,mut _2: i128,mut _3: [u64; 5],mut _4: char,mut _5: [u64; 5],mut _6: [char; 7],mut _7: i32,mut _8: i32,mut _9: i128,mut _10: f64,mut _11: isize,mut _12: isize) -> *mut i128 {
mir! {
type RET = *mut i128;
let _13: *const *mut i128;
let _14: char;
let _15: isize;
let _16: Adt56;
let _17: [char; 7];
let _18: f64;
let _19: Adt59;
let _20: ([u128; 8], (u32, u8, bool));
let _21: f32;
let _22: usize;
let _23: ();
let _24: ();
{
_2 = !_9;
_3 = [16606371394940923524_u64,8007584383773729184_u64,9728548730585732183_u64,16500300215891064261_u64,6533139522466617348_u64];
_14 = _1;
_5 = [11811628678120352866_u64,2431670967898228415_u64,8393103585989183921_u64,594298262188278232_u64,11506686169433392917_u64];
_9 = 2029828425235718231_usize as i128;
_9 = _10 as i128;
RET = core::ptr::addr_of_mut!(_2);
(*RET) = _9;
_4 = _14;
_3 = [6515786709555889789_u64,15285860394479928517_u64,9751618152948707107_u64,11075224911952104233_u64,16892994196368623542_u64];
_11 = -_12;
_15 = _8 as isize;
_2 = !_9;
(*RET) = !_9;
_5 = _3;
_12 = -_15;
_2 = _9;
_1 = _4;
RET = core::ptr::addr_of_mut!((*RET));
(*RET) = -_9;
_3 = [3348849555291946898_u64,13839609859537061688_u64,11046318861919140178_u64,4163273442647124328_u64,10002305576513832167_u64];
(*RET) = -_9;
_12 = _15;
_10 = 193_i16 as f64;
_5 = _3;
Call(_12 = fn14((*RET), _6, _7, _1, _7, _7, _1, _3, _4, _8, (*RET), _11, _8, _4, _7, _7), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
(*RET) = _9 << _8;
_15 = _11 & _12;
_1 = _4;
RET = core::ptr::addr_of_mut!((*RET));
_20.1.0 = 4233625522_u32;
_11 = _12 * _15;
_20.1.2 = false;
_18 = 15308314926932044457_usize as f64;
RET = core::ptr::addr_of_mut!((*RET));
_4 = _14;
_21 = 43751136085367174522861273466504899108_u128 as f32;
_22 = !6_usize;
_22 = 7_usize;
_21 = 5946_u16 as f32;
_16.fld0 = [_4,_1,_1,_4,_1];
Goto(bb2)
}
bb2 = {
Call(_23 = dump_var(13_usize, 7_usize, Move(_7), 14_usize, Move(_14), 4_usize, Move(_4), 9_usize, Move(_9)), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Call(_23 = dump_var(13_usize, 22_usize, Move(_22), 15_usize, Move(_15), 12_usize, Move(_12), 24_usize, _24), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn14(mut _1: i128,mut _2: [char; 7],mut _3: i32,mut _4: char,mut _5: i32,mut _6: i32,mut _7: char,mut _8: [u64; 5],mut _9: char,mut _10: i32,mut _11: i128,mut _12: isize,mut _13: i32,mut _14: char,mut _15: i32,mut _16: i32) -> isize {
mir! {
type RET = isize;
let _17: char;
let _18: Adt53;
let _19: *mut (i64, u32, i128, i32);
let _20: isize;
let _21: [i128; 2];
let _22: f64;
let _23: isize;
let _24: isize;
let _25: f32;
let _26: i128;
let _27: isize;
let _28: [u64; 5];
let _29: isize;
let _30: u8;
let _31: Adt49;
let _32: char;
let _33: *mut (i64, u32, i128, i32);
let _34: bool;
let _35: f32;
let _36: Adt52;
let _37: [char; 5];
let _38: [char; 6];
let _39: Adt50;
let _40: *const *mut u128;
let _41: f32;
let _42: f64;
let _43: [u128; 2];
let _44: bool;
let _45: bool;
let _46: u128;
let _47: f32;
let _48: u32;
let _49: u16;
let _50: Adt59;
let _51: ([u128; 8], (u32, u8, bool));
let _52: (*mut i32, u128);
let _53: i8;
let _54: Adt52;
let _55: [u8; 7];
let _56: Adt61;
let _57: [u128; 1];
let _58: [u128; 1];
let _59: i32;
let _60: i64;
let _61: char;
let _62: [char; 6];
let _63: i64;
let _64: ();
let _65: ();
{
_10 = _13 | _13;
_3 = !_10;
_17 = _7;
RET = _12 ^ _12;
_18.fld2.3 = _10 << _13;
_19 = core::ptr::addr_of_mut!(_18.fld2);
(*_19).1 = !1799841015_u32;
_18.fld2.2 = _1 ^ _11;
(*_19).0 = (-3987971737196877321_i64) - 4543925883228697007_i64;
_15 = (*_19).3 | _18.fld2.3;
_12 = (*_19).1 as isize;
(*_19) = ((-6749322778251046883_i64), 4272236112_u32, _11, _3);
_18.fld2.1 = 2762107886_u32 ^ 1374245314_u32;
Call(_18.fld0 = fn15((*_19).3, _18.fld2.3, _1, _18.fld2.1), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_12 = (-31_isize) | 9223372036854775807_isize;
(*_19).0 = (-5321220446529557431_i64);
_4 = _9;
_5 = _15;
_12 = (-56_isize);
_15 = _18.fld2.0 as i32;
RET = _12;
_18.fld4 = [_11,_18.fld2.2];
_18.fld2.2 = _11;
_18.fld1 = _10 << _18.fld2.3;
_18.fld3 = 1127213496527126213_usize % 13838342974191642598_usize;
_8 = [10606654090701582056_u64,16234301659981428014_u64,9682056385454298929_u64,7794878260366603102_u64,2044402461246992269_u64];
_21 = [_18.fld2.2,_18.fld2.2];
_18.fld2.2 = 39721_u16 as i128;
_18.fld3 = (*_19).2 as usize;
_6 = _3 >> _5;
(*_19).2 = _11 & _11;
_13 = _18.fld1;
_18.fld2.1 = !138585921_u32;
_22 = (*_19).0 as f64;
(*_19).3 = _13;
_4 = _7;
_8 = [16659423722104889493_u64,7867688144431594868_u64,13239905877929966622_u64,7528011522434306936_u64,15663436493320688023_u64];
_19 = _18.fld0;
_5 = _18.fld1;
_22 = _5 as f64;
Goto(bb2)
}
bb2 = {
_17 = _7;
_15 = -_18.fld1;
_17 = _14;
_18.fld3 = 13528745728956291326_usize / 5764827627910745831_usize;
Goto(bb3)
}
bb3 = {
RET = -_12;
_24 = (-57_i8) as isize;
_3 = _10 ^ _13;
_9 = _14;
_24 = _12;
_18.fld3 = 1009228901365052186_usize + 2999133868703833583_usize;
_15 = _18.fld1 - _18.fld1;
_20 = !_12;
_10 = _18.fld1;
_25 = _18.fld2.0 as f32;
_27 = _24;
_18.fld1 = _18.fld3 as i32;
_22 = _11 as f64;
_11 = !_1;
_1 = !_18.fld2.2;
_17 = _14;
_3 = _15;
_18.fld2.1 = 1492074425_u32;
_9 = _7;
_29 = _24 >> _3;
match _18.fld2.1 {
0 => bb1,
1 => bb2,
1492074425 => bb5,
_ => bb4
}
}
bb4 = {
_17 = _7;
_15 = -_18.fld1;
_17 = _14;
_18.fld3 = 13528745728956291326_usize / 5764827627910745831_usize;
Goto(bb3)
}
bb5 = {
_14 = _7;
_1 = 13_u8 as i128;
_28 = _8;
_31.fld0.0 = !20798_u16;
_13 = false as i32;
_4 = _7;
_18.fld4 = [_1,_1];
_26 = !_18.fld2.2;
_11 = !_1;
_6 = _10;
_29 = -_12;
_22 = _31.fld0.0 as f64;
_18.fld4 = _21;
_13 = !_3;
_12 = _27 >> _13;
_5 = _6;
Goto(bb6)
}
bb6 = {
_29 = -_12;
_18.fld1 = 27381_i16 as i32;
_27 = _29;
_35 = -_25;
_9 = _4;
_4 = _7;
_14 = _17;
_34 = !false;
_34 = !false;
_33 = core::ptr::addr_of_mut!(_18.fld2);
(*_33).2 = _26;
(*_33).1 = 8970334777699912665_u64 as u32;
(*_33).1 = 32_u8 as u32;
(*_33).0 = -4351358650363115343_i64;
Goto(bb7)
}
bb7 = {
(*_33).3 = _5 * _15;
_20 = _29;
_32 = _17;
_3 = _15 - (*_33).3;
_31.fld0.1 = _31.fld0.0 as i128;
_15 = _5 - _3;
_35 = _25 / f32::INFINITY;
_19 = core::ptr::addr_of_mut!(_18.fld2);
_13 = (*_33).3 * _5;
_23 = -_20;
Call(_17 = fn16(_18, _32, _19, _29, (*_33).3, _13, (*_19).3, (*_19), _20, _4, _25, _19, (*_19).2), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
_8 = [5721461385576111094_u64,16856607354523356749_u64,8413427336322058793_u64,4036370664360396615_u64,10161157388614128908_u64];
_39.fld3 = core::ptr::addr_of_mut!(_36.fld1.fld0);
(*_19) = ((-1940730238215402061_i64), 2830943397_u32, _26, _15);
_3 = (*_19).3;
_13 = _10;
_19 = _33;
_34 = true & true;
_34 = _18.fld2.3 >= _3;
_36.fld1.fld0.2 = (*_33).1 - (*_19).1;
_18.fld2.3 = (*_19).0 as i32;
_23 = _12 - _27;
_18.fld2.2 = !_1;
_36.fld1.fld0.2 = _34 as u32;
_20 = (-1676_i16) as isize;
(*_33).3 = _3;
_31.fld0.1 = (*_33).2;
_18.fld2.1 = 300462446709223595106461065906871115210_u128 as u32;
_15 = _6;
(*_19) = ((-3434158371098646764_i64), _36.fld1.fld0.2, _1, _13);
_32 = _7;
_37 = [_14,_7,_7,_14,_32];
_30 = 28_u8;
_35 = -_25;
_14 = _4;
_25 = _35;
(*_19).2 = _11;
match (*_33).0 {
0 => bb2,
340282366920938463459940449060669564692 => bb10,
_ => bb9
}
}
bb9 = {
_29 = -_12;
_18.fld1 = 27381_i16 as i32;
_27 = _29;
_35 = -_25;
_9 = _4;
_4 = _7;
_14 = _17;
_34 = !false;
_34 = !false;
_33 = core::ptr::addr_of_mut!(_18.fld2);
(*_33).2 = _26;
(*_33).1 = 8970334777699912665_u64 as u32;
(*_33).1 = 32_u8 as u32;
(*_33).0 = -4351358650363115343_i64;
Goto(bb7)
}
bb10 = {
_6 = 11133_i16 as i32;
_10 = _13 - (*_33).3;
_4 = _14;
_38 = [_4,_17,_9,_14,_9,_14];
_36.fld0 = _30;
_25 = -_35;
_47 = -_35;
_39.fld2 = [_30,_30,_36.fld0,_30,_36.fld0,_30,_30];
_18.fld2.1 = !_36.fld1.fld0.2;
_45 = _34;
(*_33).3 = _12 as i32;
(*_33).3 = !_13;
_8 = _28;
_48 = (*_19).1 / 2023263791_u32;
_39.fld4 = [_36.fld0];
(*_19).3 = -_5;
_42 = (*_19).0 as f64;
_31.fld0.1 = _30 as i128;
_31.fld1 = core::ptr::addr_of!(_39.fld1);
_38 = [_17,_14,_32,_14,_7,_4];
_18.fld2.0 = 9150179855808968537_u64 as i64;
Goto(bb11)
}
bb11 = {
(*_33) = ((-8009157468097213954_i64), _48, _26, _3);
_20 = _27;
_18.fld2.0 = _23 as i64;
_22 = _42 + _42;
_39.fld0.1 = 142053136856152768318611022142977530368_u128;
_32 = _7;
_8 = [4199215294297257217_u64,1540152833210651846_u64,6329819169581635541_u64,8419497661336743579_u64,5118290503584465602_u64];
_50.fld3 = (-29_i8) + (-45_i8);
_39.fld3 = core::ptr::addr_of_mut!(_36.fld1.fld0);
_39.fld0.0 = core::ptr::addr_of_mut!((*_19).3);
_50.fld7.0 = (*_19).1;
Call((*_19).2 = core::intrinsics::transmute(_39.fld0.1), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
_40 = core::ptr::addr_of!(_36.fld1.fld0.1);
(*_33).2 = !_26;
_51.1.0 = (*_33).3 as u32;
(*_33).1 = !_51.1.0;
_52 = (_39.fld0.0, _39.fld0.1);
(*_19).2 = !_11;
_50.fld6.fld0.1 = !_52.1;
_11 = -(*_33).2;
_50.fld4 = !(-12448_i16);
_52.0 = core::ptr::addr_of_mut!(_10);
_50.fld6.fld3 = _39.fld3;
_6 = !(*_33).3;
_14 = _4;
_6 = _13;
_51.0 = [_50.fld6.fld0.1,_39.fld0.1,_39.fld0.1,_52.1,_50.fld6.fld0.1,_52.1,_50.fld6.fld0.1,_50.fld6.fld0.1];
_39.fld0 = _52;
_54.fld0 = _36.fld0 & _30;
_55 = [_54.fld0,_54.fld0,_54.fld0,_54.fld0,_54.fld0,_54.fld0,_30];
_18.fld2.1 = _50.fld7.0;
match _52.1 {
0 => bb10,
1 => bb8,
2 => bb13,
142053136856152768318611022142977530368 => bb15,
_ => bb14
}
}
bb13 = {
_29 = -_12;
_18.fld1 = 27381_i16 as i32;
_27 = _29;
_35 = -_25;
_9 = _4;
_4 = _7;
_14 = _17;
_34 = !false;
_34 = !false;
_33 = core::ptr::addr_of_mut!(_18.fld2);
(*_33).2 = _26;
(*_33).1 = 8970334777699912665_u64 as u32;
(*_33).1 = 32_u8 as u32;
(*_33).0 = -4351358650363115343_i64;
Goto(bb7)
}
bb14 = {
_8 = [5721461385576111094_u64,16856607354523356749_u64,8413427336322058793_u64,4036370664360396615_u64,10161157388614128908_u64];
_39.fld3 = core::ptr::addr_of_mut!(_36.fld1.fld0);
(*_19) = ((-1940730238215402061_i64), 2830943397_u32, _26, _15);
_3 = (*_19).3;
_13 = _10;
_19 = _33;
_34 = true & true;
_34 = _18.fld2.3 >= _3;
_36.fld1.fld0.2 = (*_33).1 - (*_19).1;
_18.fld2.3 = (*_19).0 as i32;
_23 = _12 - _27;
_18.fld2.2 = !_1;
_36.fld1.fld0.2 = _34 as u32;
_20 = (-1676_i16) as isize;
(*_33).3 = _3;
_31.fld0.1 = (*_33).2;
_18.fld2.1 = 300462446709223595106461065906871115210_u128 as u32;
_15 = _6;
(*_19) = ((-3434158371098646764_i64), _36.fld1.fld0.2, _1, _13);
_32 = _7;
_37 = [_14,_7,_7,_14,_32];
_30 = 28_u8;
_35 = -_25;
_14 = _4;
_25 = _35;
(*_19).2 = _11;
match (*_33).0 {
0 => bb2,
340282366920938463459940449060669564692 => bb10,
_ => bb9
}
}
bb15 = {
_36.fld1.fld0.1 = core::ptr::addr_of_mut!(_50.fld6.fld0.1);
_50.fld7.2 = !_34;
_51.1.2 = _6 < _13;
_39.fld4 = [_54.fld0];
_51.1.2 = !_34;
_38 = [_17,_7,_9,_9,_7,_14];
_50.fld7.1 = _54.fld0 << (*_33).3;
(*_33).1 = _48;
_14 = _9;
_30 = !_50.fld7.1;
_18.fld1 = _15;
_18.fld2.1 = !_48;
_54.fld1.fld0.1 = _36.fld1.fld0.1;
_18.fld2.1 = _51.1.0;
_39.fld4 = [_50.fld7.1];
_51.1.1 = _30 + _30;
_50.fld5 = [_30,_30,_30,_30,_50.fld7.1,_50.fld7.1,_50.fld7.1];
_62 = _38;
_3 = _12 as i32;
_35 = -_47;
(*_19) = ((-5473874588403721609_i64), _36.fld1.fld0.2, _11, _13);
_57 = [_52.1];
_43 = [_52.1,_50.fld6.fld0.1];
RET = _50.fld4 as isize;
_49 = _35 as u16;
Goto(bb16)
}
bb16 = {
Call(_64 = dump_var(14_usize, 45_usize, Move(_45), 2_usize, Move(_2), 4_usize, Move(_4), 48_usize, Move(_48)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_64 = dump_var(14_usize, 7_usize, Move(_7), 34_usize, Move(_34), 43_usize, Move(_43), 17_usize, Move(_17)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_64 = dump_var(14_usize, 21_usize, Move(_21), 37_usize, Move(_37), 32_usize, Move(_32), 5_usize, Move(_5)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_64 = dump_var(14_usize, 15_usize, Move(_15), 12_usize, Move(_12), 62_usize, Move(_62), 28_usize, Move(_28)), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Call(_64 = dump_var(14_usize, 51_usize, Move(_51), 16_usize, Move(_16), 38_usize, Move(_38), 65_usize, _65), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn15(mut _1: i32,mut _2: i32,mut _3: i128,mut _4: u32) -> *mut (i64, u32, i128, i32) {
mir! {
type RET = *mut (i64, u32, i128, i32);
let _5: *const *mut *const *mut i128;
let _6: u128;
let _7: [bool; 4];
let _8: (u32, u8, bool);
let _9: i64;
let _10: *mut i128;
let _11: f64;
let _12: [char; 6];
let _13: ([u128; 8], (u32, u8, bool));
let _14: [u128; 1];
let _15: [u64; 6];
let _16: [bool; 4];
let _17: f32;
let _18: i64;
let _19: f32;
let _20: i128;
let _21: [bool; 4];
let _22: Adt60;
let _23: *mut i128;
let _24: Adt51;
let _25: [char; 7];
let _26: isize;
let _27: Adt56;
let _28: [bool; 4];
let _29: [usize; 2];
let _30: bool;
let _31: isize;
let _32: *const f32;
let _33: *mut u128;
let _34: Adt65;
let _35: [u128; 8];
let _36: isize;
let _37: Adt60;
let _38: [bool; 4];
let _39: char;
let _40: isize;
let _41: char;
let _42: ();
let _43: ();
{
_1 = _2;
_2 = _1;
_1 = !_2;
_3 = 64070065260004714459981583199690038527_i128;
_1 = 4640701903326907013_i64 as i32;
_3 = false as i128;
_3 = '\u{59237}' as i128;
_2 = -_1;
_4 = !272304519_u32;
_2 = -_1;
_4 = !3112562029_u32;
_3 = 15280333820295309663261870905972628520_i128;
_1 = _2;
_6 = !285836604694219123871895572753306850510_u128;
_7 = [false,true,false,true];
_1 = -_2;
_3 = (-64123192998016714490798433925579001083_i128);
_3 = !30667615856549203741139350605189963206_i128;
_1 = (-6321707061881918599_i64) as i32;
_4 = 1411128983_u32 * 3666241149_u32;
_7 = [false,false,false,false];
_1 = _2 ^ _2;
_3 = '\u{4185a}' as i128;
_2 = _1 & _1;
_2 = _1 << _6;
_8.1 = !218_u8;
_8.1 = 60_u8 & 73_u8;
_8.2 = false;
Goto(bb1)
}
bb1 = {
_1 = 6990_i16 as i32;
_8.0 = 1292466802492918839_usize as u32;
_7 = [_8.2,_8.2,_8.2,_8.2];
_8 = (_4, 202_u8, true);
_9 = -(-3102784233174131391_i64);
_7 = [_8.2,_8.2,_8.2,_8.2];
_4 = !_8.0;
_11 = _3 as f64;
_8.0 = _4;
_10 = core::ptr::addr_of_mut!(_3);
_8.1 = 91_u8 >> _8.0;
(*_10) = 49816831583429158228485861280475685702_i128;
(*_10) = (-34472575339771655056461328584865850626_i128) + (-42842361340095486889361733474032347465_i128);
_10 = core::ptr::addr_of_mut!((*_10));
_8.1 = _9 as u8;
_7 = [_8.2,_8.2,_8.2,_8.2];
_8.1 = 116_u8;
_7 = [_8.2,_8.2,_8.2,_8.2];
_8 = (_4, 150_u8, false);
_8 = (_4, 39_u8, true);
_2 = (*_10) as i32;
_3 = _9 as i128;
_8 = (_4, 28_u8, true);
_1 = -_2;
_10 = core::ptr::addr_of_mut!(_3);
_10 = core::ptr::addr_of_mut!((*_10));
Call(_2 = core::intrinsics::transmute(_8.0), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_6 = _8.1 as u128;
_13.1 = (_4, _8.1, _8.2);
_13.1.0 = _4 % 2683924938_u32;
(*_10) = -(-72451669107954062212471372778866133639_i128);
_6 = !31451396624935821219090549111963428026_u128;
_13.1.2 = !_8.2;
_12 = ['\u{4900a}','\u{cf33e}','\u{61e7a}','\u{b4d3e}','\u{d0ea}','\u{9a629}'];
Goto(bb3)
}
bb3 = {
_6 = (*_10) as u128;
_11 = (-9223372036854775808_isize) as f64;
(*_10) = !26374233086774949330479559637333734054_i128;
_14 = [_6];
_2 = _13.1.2 as i32;
_1 = 22352_u16 as i32;
Goto(bb4)
}
bb4 = {
_12 = ['\u{49167}','\u{10e9ca}','\u{e2c32}','\u{f4c41}','\u{35e49}','\u{c041d}'];
_13.1.2 = _8.2;
_13.1.1 = !_8.1;
_13.1.2 = _11 >= _11;
_12 = ['\u{ae343}','\u{89045}','\u{7f238}','\u{9a04d}','\u{f0ee2}','\u{1032cf}'];
_8.0 = _13.1.0 | _13.1.0;
match _8.1 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb5,
4 => bb6,
5 => bb7,
28 => bb9,
_ => bb8
}
}
bb5 = {
_6 = (*_10) as u128;
_11 = (-9223372036854775808_isize) as f64;
(*_10) = !26374233086774949330479559637333734054_i128;
_14 = [_6];
_2 = _13.1.2 as i32;
_1 = 22352_u16 as i32;
Goto(bb4)
}
bb6 = {
_6 = _8.1 as u128;
_13.1 = (_4, _8.1, _8.2);
_13.1.0 = _4 % 2683924938_u32;
(*_10) = -(-72451669107954062212471372778866133639_i128);
_6 = !31451396624935821219090549111963428026_u128;
_13.1.2 = !_8.2;
_12 = ['\u{4900a}','\u{cf33e}','\u{61e7a}','\u{b4d3e}','\u{d0ea}','\u{9a629}'];
Goto(bb3)
}
bb7 = {
_1 = 6990_i16 as i32;
_8.0 = 1292466802492918839_usize as u32;
_7 = [_8.2,_8.2,_8.2,_8.2];
_8 = (_4, 202_u8, true);
_9 = -(-3102784233174131391_i64);
_7 = [_8.2,_8.2,_8.2,_8.2];
_4 = !_8.0;
_11 = _3 as f64;
_8.0 = _4;
_10 = core::ptr::addr_of_mut!(_3);
_8.1 = 91_u8 >> _8.0;
(*_10) = 49816831583429158228485861280475685702_i128;
(*_10) = (-34472575339771655056461328584865850626_i128) + (-42842361340095486889361733474032347465_i128);
_10 = core::ptr::addr_of_mut!((*_10));
_8.1 = _9 as u8;
_7 = [_8.2,_8.2,_8.2,_8.2];
_8.1 = 116_u8;
_7 = [_8.2,_8.2,_8.2,_8.2];
_8 = (_4, 150_u8, false);
_8 = (_4, 39_u8, true);
_2 = (*_10) as i32;
_3 = _9 as i128;
_8 = (_4, 28_u8, true);
_1 = -_2;
_10 = core::ptr::addr_of_mut!(_3);
_10 = core::ptr::addr_of_mut!((*_10));
Call(_2 = core::intrinsics::transmute(_8.0), ReturnTo(bb2), UnwindUnreachable())
}
bb8 = {
Return()
}
bb9 = {
_6 = 207947814126070220621900253073298333751_u128;
_8 = _13.1;
(*_10) = 88262412883560041555674477908946267746_i128 * (-116570990319415215786611182326935296528_i128);
(*_10) = -(-52601861277833756538067331499177025981_i128);
_13.0 = [_6,_6,_6,_6,_6,_6,_6,_6];
_4 = _8.0;
_16 = _7;
_8.1 = _13.1.1 + _13.1.1;
_14 = [_6];
_8 = (_13.1.0, _13.1.1, _13.1.2);
_10 = core::ptr::addr_of_mut!((*_10));
(*_10) = _2 as i128;
_17 = 18938_i16 as f32;
_15 = [17958361694024796679_u64,6445803916348144123_u64,16777370512849226920_u64,259002278130026812_u64,5556125026172784074_u64,2481353436409992957_u64];
_17 = 34_i8 as f32;
match _6 {
207947814126070220621900253073298333751 => bb10,
_ => bb4
}
}
bb10 = {
_8 = (_13.1.0, _13.1.1, _13.1.2);
_8 = (_13.1.0, _13.1.1, _13.1.2);
_18 = _9 - _9;
_3 = 37382_u16 as i128;
_9 = _18 ^ _18;
_7 = _16;
_17 = _9 as f32;
_16 = _7;
_11 = (-16373_i16) as f64;
_2 = 16239_i16 as i32;
_15 = [15405923324707255495_u64,9913561094447666139_u64,14129782990765252681_u64,15111092408963718086_u64,16427737277558193623_u64,2612254256623734078_u64];
_16 = [_8.2,_8.2,_13.1.2,_13.1.2];
_7 = _16;
_2 = _1 >> _18;
_15 = [2506460078690693630_u64,14635197214078686863_u64,6132601506993741928_u64,6737747062336570431_u64,12247816756111347454_u64,351166025398268911_u64];
_2 = _1 << _1;
_13.1.0 = _4 | _4;
_16 = [_8.2,_13.1.2,_13.1.2,_8.2];
_20 = !_3;
_16 = [_13.1.2,_8.2,_8.2,_8.2];
Goto(bb11)
}
bb11 = {
_8.1 = !_13.1.1;
_15 = [7167006521578876039_u64,6313473712849205678_u64,1276542300310652745_u64,15228533380342499578_u64,18189755596612954985_u64,9152835192780509672_u64];
_17 = 15919_u16 as f32;
_13.1.0 = _8.0 & _4;
_22.fld0.fld0 = _13.1.1 << _4;
_8.1 = _22.fld0.fld0;
_12 = ['\u{55b34}','\u{e483e}','\u{ca6af}','\u{d4601}','\u{397ac}','\u{71b44}'];
_2 = !_1;
_13.0 = [_6,_6,_6,_6,_6,_6,_6,_6];
_23 = _10;
_14 = [_6];
_8 = _13.1;
_22.fld1.fld2.fld0.2 = _4;
_13.1.1 = (*_23) as u8;
_15 = [16177922071075846426_u64,8652311808786214519_u64,17155809089447429258_u64,1619576486530191051_u64,17393428083721458334_u64,17702325366578216614_u64];
_3 = _20;
_22.fld0.fld1.fld0.2 = (-6_i8) as u32;
match _6 {
0 => bb7,
1 => bb12,
2 => bb13,
3 => bb14,
207947814126070220621900253073298333751 => bb16,
_ => bb15
}
}
bb12 = {
_8 = (_13.1.0, _13.1.1, _13.1.2);
_8 = (_13.1.0, _13.1.1, _13.1.2);
_18 = _9 - _9;
_3 = 37382_u16 as i128;
_9 = _18 ^ _18;
_7 = _16;
_17 = _9 as f32;
_16 = _7;
_11 = (-16373_i16) as f64;
_2 = 16239_i16 as i32;
_15 = [15405923324707255495_u64,9913561094447666139_u64,14129782990765252681_u64,15111092408963718086_u64,16427737277558193623_u64,2612254256623734078_u64];
_16 = [_8.2,_8.2,_13.1.2,_13.1.2];
_7 = _16;
_2 = _1 >> _18;
_15 = [2506460078690693630_u64,14635197214078686863_u64,6132601506993741928_u64,6737747062336570431_u64,12247816756111347454_u64,351166025398268911_u64];
_2 = _1 << _1;
_13.1.0 = _4 | _4;
_16 = [_8.2,_13.1.2,_13.1.2,_8.2];
_20 = !_3;
_16 = [_13.1.2,_8.2,_8.2,_8.2];
Goto(bb11)
}
bb13 = {
_6 = (*_10) as u128;
_11 = (-9223372036854775808_isize) as f64;
(*_10) = !26374233086774949330479559637333734054_i128;
_14 = [_6];
_2 = _13.1.2 as i32;
_1 = 22352_u16 as i32;
Goto(bb4)
}
bb14 = {
_6 = (*_10) as u128;
_11 = (-9223372036854775808_isize) as f64;
(*_10) = !26374233086774949330479559637333734054_i128;
_14 = [_6];
_2 = _13.1.2 as i32;
_1 = 22352_u16 as i32;
Goto(bb4)
}
bb15 = {
_1 = 6990_i16 as i32;
_8.0 = 1292466802492918839_usize as u32;
_7 = [_8.2,_8.2,_8.2,_8.2];
_8 = (_4, 202_u8, true);
_9 = -(-3102784233174131391_i64);
_7 = [_8.2,_8.2,_8.2,_8.2];
_4 = !_8.0;
_11 = _3 as f64;
_8.0 = _4;
_10 = core::ptr::addr_of_mut!(_3);
_8.1 = 91_u8 >> _8.0;
(*_10) = 49816831583429158228485861280475685702_i128;
(*_10) = (-34472575339771655056461328584865850626_i128) + (-42842361340095486889361733474032347465_i128);
_10 = core::ptr::addr_of_mut!((*_10));
_8.1 = _9 as u8;
_7 = [_8.2,_8.2,_8.2,_8.2];
_8.1 = 116_u8;
_7 = [_8.2,_8.2,_8.2,_8.2];
_8 = (_4, 150_u8, false);
_8 = (_4, 39_u8, true);
_2 = (*_10) as i32;
_3 = _9 as i128;
_8 = (_4, 28_u8, true);
_1 = -_2;
_10 = core::ptr::addr_of_mut!(_3);
_10 = core::ptr::addr_of_mut!((*_10));
Call(_2 = core::intrinsics::transmute(_8.0), ReturnTo(bb2), UnwindUnreachable())
}
bb16 = {
_22.fld1.fld1.1 = _18 as u128;
_7 = _16;
_19 = _9 as f32;
_19 = _17 + _17;
(*_23) = -_20;
_22.fld1.fld2.fld0.0 = 9223372036854775807_isize;
_21 = [_13.1.2,_8.2,_8.2,_13.1.2];
_22.fld0.fld1.fld0.1 = core::ptr::addr_of_mut!(_6);
_22.fld0.fld0 = (-5191_i16) as u8;
(*_23) = _20 >> _22.fld1.fld2.fld0.2;
_16 = [_8.2,_8.2,_13.1.2,_13.1.2];
_13.1.2 = _8.2;
_22.fld1.fld2.fld0.0 = 66_isize * 9223372036854775807_isize;
(*_10) = -_20;
_13.1.0 = _4 - _22.fld0.fld1.fld0.2;
_22.fld1.fld2.fld0.0 = (-22_isize) - (-9223372036854775808_isize);
_11 = _22.fld1.fld1.1 as f64;
_22.fld0.fld1.fld0.0 = _22.fld1.fld2.fld0.0;
_4 = _22.fld1.fld2.fld0.2;
_24.fld0.2 = _8.0 / 4042125481_u32;
_13.1 = (_24.fld0.2, _8.1, _8.2);
_14 = [_6];
_22.fld1.fld2.fld0.1 = core::ptr::addr_of_mut!(_6);
(*_10) = _20;
_24.fld0.0 = _22.fld0.fld1.fld0.0;
_22.fld0.fld1 = Adt51 { fld0: _22.fld1.fld2.fld0 };
_22.fld0.fld1.fld0 = (_22.fld1.fld2.fld0.0, _22.fld1.fld2.fld0.1, _8.0);
match _6 {
0 => bb6,
207947814126070220621900253073298333751 => bb17,
_ => bb10
}
}
bb17 = {
_1 = _2 & _2;
_22.fld0.fld1.fld0 = (_22.fld1.fld2.fld0.0, _22.fld1.fld2.fld0.1, _13.1.0);
_22.fld1.fld1.0 = core::ptr::addr_of_mut!(_2);
_24 = Adt51 { fld0: _22.fld0.fld1.fld0 };
_24 = Adt51 { fld0: _22.fld0.fld1.fld0 };
_21 = [_8.2,_13.1.2,_13.1.2,_8.2];
_2 = _19 as i32;
_12 = ['\u{ee461}','\u{c203a}','\u{1d101}','\u{b9508}','\u{549e1}','\u{c6c11}'];
_14 = [_22.fld1.fld1.1];
_22.fld0.fld0 = _8.1 - _8.1;
_22.fld0.fld1.fld0 = (_22.fld1.fld2.fld0.0, _22.fld1.fld2.fld0.1, _4);
_1 = _18 as i32;
_4 = _8.1 as u32;
_22.fld0.fld1.fld0.1 = _22.fld1.fld2.fld0.1;
_22.fld1.fld1.1 = 1250216828461224616_u64 as u128;
_19 = _17 * _17;
(*_10) = _20;
_13.1 = (_8.0, _22.fld0.fld0, _8.2);
_23 = core::ptr::addr_of_mut!((*_10));
_22.fld0.fld0 = _8.1 >> _22.fld0.fld1.fld0.2;
_22.fld0.fld1.fld0.0 = _22.fld1.fld2.fld0.0 >> _22.fld0.fld0;
_8.2 = !_13.1.2;
_24.fld0.0 = -_22.fld1.fld2.fld0.0;
_22.fld1.fld2.fld0.2 = !_24.fld0.2;
Goto(bb18)
}
bb18 = {
_13.1.0 = !_22.fld0.fld1.fld0.2;
_7 = _21;
_25 = ['\u{18942}','\u{39d8b}','\u{27174}','\u{87974}','\u{68444}','\u{1df0a}','\u{5400f}'];
_24.fld0.2 = !_22.fld0.fld1.fld0.2;
_26 = -_22.fld0.fld1.fld0.0;
_24.fld0.2 = !_4;
_1 = _2;
_16 = _7;
_19 = _2 as f32;
_22.fld0.fld0 = !_13.1.1;
_4 = _8.0;
_22.fld1.fld0 = _18;
_22.fld0 = Adt52 { fld0: _13.1.1,fld1: Move(_24) };
_20 = !(*_10);
_6 = _22.fld1.fld1.1 * _22.fld1.fld1.1;
_13.1 = (_22.fld1.fld2.fld0.2, _8.1, _8.2);
_6 = _22.fld1.fld1.1;
_27.fld0 = ['\u{7ee7f}','\u{15332}','\u{108de3}','\u{b88a8}','\u{a1901}'];
Goto(bb19)
}
bb19 = {
_12 = ['\u{d7eec}','\u{b27f8}','\u{19c97}','\u{28708}','\u{12f1c}','\u{2c028}'];
_8.1 = _22.fld0.fld0 ^ _22.fld0.fld0;
_22.fld1.fld2.fld0.2 = _22.fld0.fld1.fld0.2 * _8.0;
_22.fld0 = Adt52 { fld0: _8.1,fld1: Move(_22.fld1.fld2) };
_17 = 12277160963621771669_usize as f32;
_22.fld1.fld0 = _9;
_22.fld0.fld1.fld0.2 = !_4;
_10 = _23;
_12 = ['\u{622ee}','\u{90ba}','\u{a0523}','\u{90bdc}','\u{4b84f}','\u{83d1b}'];
_16 = [_8.2,_13.1.2,_8.2,_8.2];
_26 = -_22.fld0.fld1.fld0.0;
_2 = _1;
(*_23) = _20;
_22.fld0.fld0 = _8.1;
_19 = -_17;
_29 = [6_usize,13757737006011003645_usize];
_4 = '\u{866b7}' as u32;
(*_23) = !_20;
_8.2 = _18 == _22.fld1.fld0;
_4 = _8.0 << _13.1.1;
_8.2 = _13.1.2 | _13.1.2;
(*_10) = _20 & _20;
Goto(bb20)
}
bb20 = {
_34.fld6.1 = core::ptr::addr_of_mut!(_6);
(*_23) = !_20;
_34.fld5 = [_6,_22.fld1.fld1.1,_22.fld1.fld1.1,_6,_6,_22.fld1.fld1.1,_6,_6];
_8.1 = !_22.fld0.fld0;
_34.fld4.fld0.fld3 = !3_usize;
_12 = ['\u{68153}','\u{2dbd3}','\u{10dbe4}','\u{754fb}','\u{10ab6e}','\u{b7390}'];
_34.fld4.fld0.fld0 = core::ptr::addr_of_mut!(_34.fld4.fld0.fld2);
_34.fld4.fld0.fld2.1 = !_4;
_10 = core::ptr::addr_of_mut!((*_10));
_28 = _16;
_34.fld4.fld0.fld2.2 = _11 as i128;
_34.fld4.fld0.fld2 = (_9, _4, _20, _1);
Goto(bb21)
}
bb21 = {
RET = core::ptr::addr_of_mut!(_34.fld4.fld0.fld2);
_34.fld4.fld1 = !_18;
(*RET).0 = !_34.fld4.fld1;
_20 = _11 as i128;
(*RET).1 = _22.fld0.fld1.fld0.2;
_34.fld4.fld0.fld1 = !_1;
_26 = _22.fld0.fld1.fld0.0 | _22.fld0.fld1.fld0.0;
(*RET).0 = _9 ^ _34.fld4.fld1;
_34.fld6 = _22.fld0.fld1.fld0;
_33 = _34.fld6.1;
_34.fld6.2 = !(*RET).1;
_26 = _22.fld0.fld1.fld0.0;
_32 = core::ptr::addr_of!(_19);
_37.fld0.fld0 = !_22.fld0.fld0;
(*RET).0 = _9 >> _8.1;
_13.1.1 = !_22.fld0.fld0;
(*RET).0 = _9 - _22.fld1.fld0;
_12 = ['\u{de4e5}','\u{32155}','\u{f2b1f}','\u{6029b}','\u{535e0}','\u{f994c}'];
(*RET).1 = (*RET).2 as u32;
_35 = [(*_33),_6,_6,(*_33),(*_33),_6,(*_33),(*_33)];
_3 = _34.fld4.fld0.fld2.2 + (*RET).2;
_31 = !_34.fld6.0;
_37.fld0.fld1 = Move(_22.fld0.fld1);
_18 = (-19094_i16) as i64;
_8.0 = _37.fld0.fld1.fld0.2;
(*_32) = _17 / f32::NAN;
_7 = _16;
Goto(bb22)
}
bb22 = {
Call(_42 = dump_var(15_usize, 7_usize, Move(_7), 1_usize, Move(_1), 15_usize, Move(_15), 20_usize, Move(_20)), ReturnTo(bb23), UnwindUnreachable())
}
bb23 = {
Call(_42 = dump_var(15_usize, 18_usize, Move(_18), 21_usize, Move(_21), 25_usize, Move(_25), 12_usize, Move(_12)), ReturnTo(bb24), UnwindUnreachable())
}
bb24 = {
Call(_42 = dump_var(15_usize, 35_usize, Move(_35), 2_usize, Move(_2), 13_usize, Move(_13), 43_usize, _43), ReturnTo(bb25), UnwindUnreachable())
}
bb25 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn16(mut _1: Adt53,mut _2: char,mut _3: *mut (i64, u32, i128, i32),mut _4: isize,mut _5: i32,mut _6: i32,mut _7: i32,mut _8: (i64, u32, i128, i32),mut _9: isize,mut _10: char,mut _11: f32,mut _12: *mut (i64, u32, i128, i32),mut _13: i128) -> char {
mir! {
type RET = char;
let _14: Adt63;
let _15: Adt56;
let _16: u32;
let _17: *mut (isize, *mut u128, u32);
let _18: Adt63;
let _19: char;
let _20: f32;
let _21: (*mut i32, u128);
let _22: f32;
let _23: u8;
let _24: (f32, usize, i128, (u16, i128));
let _25: isize;
let _26: u8;
let _27: u128;
let _28: i128;
let _29: u8;
let _30: [i128; 2];
let _31: isize;
let _32: isize;
let _33: Adt62;
let _34: *const f32;
let _35: char;
let _36: i16;
let _37: [bool; 4];
let _38: u64;
let _39: Adt52;
let _40: f64;
let _41: (f32, usize, i128, (u16, i128));
let _42: u8;
let _43: bool;
let _44: (f32, usize, i128, (u16, i128));
let _45: (u32, u8, bool);
let _46: u64;
let _47: isize;
let _48: *mut *const *mut i128;
let _49: f32;
let _50: [char; 7];
let _51: Adt51;
let _52: [u128; 2];
let _53: Adt61;
let _54: (f32, usize, i128, (u16, i128));
let _55: Adt62;
let _56: f64;
let _57: i128;
let _58: [u128; 1];
let _59: ();
let _60: ();
{
_8 = ((*_3).0, (*_3).1, (*_3).2, (*_3).3);
_13 = !(*_3).2;
_14.fld0.3 = (*_12).3 ^ (*_3).3;
(*_12).1 = !_8.1;
(*_12).3 = _1.fld2.3;
(*_12).0 = _1.fld2.0;
_1.fld2.2 = (*_3).2 | (*_3).2;
_5 = 14214165048275857006_u64 as i32;
(*_3) = _1.fld2;
Goto(bb1)
}
bb1 = {
_14.fld3 = [_1.fld3,_1.fld3];
_1.fld1 = -_8.3;
RET = _2;
_14.fld0.3 = -_7;
(*_3).2 = _13 | _13;
(*_12).3 = _6 * _6;
(*_12).0 = _1.fld2.0 | _1.fld2.0;
_14.fld0.2 = 7806716110547784415_u64 as i128;
(*_3).2 = (*_12).0 as i128;
(*_3) = (_8.0, _1.fld2.1, _1.fld2.2, _1.fld1);
_14.fld0.1 = (*_12).1 ^ _1.fld2.1;
RET = _2;
(*_12).2 = _1.fld2.2;
_1.fld2 = ((*_3).0, _14.fld0.1, (*_3).2, _8.3);
(*_3).3 = _10 as i32;
_2 = _10;
(*_12).0 = _8.0;
_18.fld0.1 = (*_12).1 % 1501996863_u32;
_18.fld3 = [_1.fld3,_1.fld3];
_14.fld0 = _1.fld2;
Goto(bb2)
}
bb2 = {
_18.fld1 = _2;
_16 = (*_3).1;
(*_3).2 = _14.fld0.2 - _1.fld2.2;
_11 = (*_12).0 as f32;
_18.fld1 = _10;
_1.fld2.1 = !(*_3).1;
_18.fld0.0 = (*_12).1 as i64;
_6 = false as i32;
_18.fld0 = (_1.fld2.0, _16, _8.2, _14.fld0.3);
_1.fld2.3 = 44_i8 as i32;
(*_3).2 = _18.fld0.2 & _1.fld2.2;
(*_3).3 = _11 as i32;
_16 = (*_12).1 & _8.1;
_13 = (*_12).2;
Goto(bb3)
}
bb3 = {
_18.fld2 = core::ptr::addr_of!(_1.fld4);
_14.fld2 = core::ptr::addr_of!(_1.fld4);
_18.fld3 = [_1.fld3,_1.fld3];
RET = _2;
(*_12).2 = _14.fld0.2 ^ _14.fld0.2;
_19 = _2;
_14.fld2 = _18.fld2;
_15.fld0 = [_2,_10,_19,_19,_10];
(*_12).3 = _9 as i32;
_14.fld1 = _2;
RET = _10;
_1.fld2 = _8;
_24.1 = !_1.fld3;
Goto(bb4)
}
bb4 = {
(*_3).1 = !_16;
_1.fld2.3 = _18.fld0.0 as i32;
_3 = _12;
_21.0 = core::ptr::addr_of_mut!(_1.fld1);
_10 = _18.fld1;
(*_12).0 = _18.fld0.0 << (*_12).3;
_26 = 189_u8;
_1.fld2.0 = (*_12).0;
(*_12).1 = _18.fld0.1;
_24.1 = _1.fld3;
RET = _14.fld1;
_18.fld4 = [10063832617833263795_u64,749035813820454503_u64,4953341691467011228_u64,9647221673024776134_u64,10605106251946477807_u64,12488760015708442915_u64];
_18.fld4 = [4326440168979712353_u64,10409219211651377316_u64,9707651621032551494_u64,5240405036661063533_u64,11673578150456512077_u64,5947381531525662649_u64];
_1.fld2.0 = (*_3).0 ^ (*_12).0;
_14.fld0.1 = _16 + _18.fld0.1;
_18.fld0.2 = (*_12).2;
_1.fld2.0 = (*_12).0;
(*_3).0 = _1.fld2.0;
_14.fld5 = [_26,_26,_26,_26,_26,_26,_26];
_5 = 47783_u16 as i32;
(*_12).2 = -_18.fld0.2;
_8.2 = _13 + (*_3).2;
(*_12) = (_1.fld2.0, _18.fld0.1, _8.2, _14.fld0.3);
_1.fld3 = _7 as usize;
_18.fld5 = [_26,_26,_26,_26,_26,_26,_26];
_24.2 = _18.fld0.2;
Call(_25 = fn17(_18.fld3, _4, _14.fld0, (*_12).0, _8, (*_12).0, _9, (*_12).2, (*_3).2, _5, _4, (*_12).3), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
_8.1 = false as u32;
_27 = !35577570179357852063199364896428499147_u128;
_18.fld0.3 = _14.fld0.3 >> _1.fld3;
RET = _14.fld1;
_33.fld3 = (*_12).0;
_23 = !_26;
Goto(bb6)
}
bb6 = {
_14.fld0.2 = (*_3).2;
_1.fld3 = !_24.1;
_2 = _19;
_32 = _10 as isize;
(*_12).0 = _33.fld3 * _1.fld2.0;
_24.3 = (39985_u16, _24.2);
_1.fld2.0 = (*_3).0 + (*_12).0;
_33.fld0 = (_1.fld2.0, (*_3).1, _18.fld0.2, _14.fld0.3);
Goto(bb7)
}
bb7 = {
_33.fld0.0 = -_33.fld3;
_25 = _9 * _4;
_1.fld2.1 = true as u32;
_33.fld0.0 = _25 as i64;
_14.fld4 = [9626761580530920696_u64,9294351127873830763_u64,9230195752520982257_u64,9396026176994155169_u64,3334692530720515129_u64,4640040303125761287_u64];
_20 = -_11;
_1.fld3 = _24.1 / 3381746872876582169_usize;
_33.fld2 = [10852939922727590083_u64,11059955507522530895_u64,10325608769281457778_u64,6269787466003467114_u64,12068281301497842136_u64];
_8.2 = _27 as i128;
(*_12).3 = _25 as i32;
_8.2 = _23 as i128;
_14.fld0.2 = _18.fld0.2 | (*_3).2;
_18.fld1 = _14.fld1;
_17 = core::ptr::addr_of_mut!(_39.fld1.fld0);
_22 = _4 as f32;
_8 = (_1.fld2.0, _14.fld0.1, _33.fld0.2, _33.fld0.3);
_21.1 = !_27;
Goto(bb8)
}
bb8 = {
_29 = _26;
_19 = _14.fld1;
_1.fld2 = ((*_3).0, _8.1, (*_3).2, _1.fld1);
_1.fld0 = core::ptr::addr_of_mut!(_33.fld0);
_41.0 = _22;
match _24.3.0 {
0 => bb1,
1 => bb7,
2 => bb3,
3 => bb4,
4 => bb5,
5 => bb6,
39985 => bb10,
_ => bb9
}
}
bb9 = {
_14.fld0.2 = (*_3).2;
_1.fld3 = !_24.1;
_2 = _19;
_32 = _10 as isize;
(*_12).0 = _33.fld3 * _1.fld2.0;
_24.3 = (39985_u16, _24.2);
_1.fld2.0 = (*_3).0 + (*_12).0;
_33.fld0 = (_1.fld2.0, (*_3).1, _18.fld0.2, _14.fld0.3);
Goto(bb7)
}
bb10 = {
_22 = (-11830_i16) as f32;
_33.fld0 = (_33.fld3, _18.fld0.1, (*_12).2, _18.fld0.3);
_41.3.1 = (*_12).2 >> _1.fld2.0;
_1.fld2.1 = _8.1 / 331809742_u32;
_33.fld0 = _18.fld0;
_1.fld4 = [_41.3.1,_41.3.1];
_28 = (*_12).2 << _9;
_18.fld5 = [_29,_29,_26,_23,_29,_26,_29];
_18.fld0 = (_8.0, _8.1, _28, _14.fld0.3);
_14.fld3 = _18.fld3;
(*_17).2 = (*_12).1 & (*_3).1;
(*_12).1 = !_8.1;
_2 = _18.fld1;
_14.fld5 = _18.fld5;
_41.2 = _8.0 as i128;
_12 = core::ptr::addr_of_mut!(_33.fld0);
_39.fld0 = _8.0 as u8;
_18.fld2 = _14.fld2;
_8.1 = !(*_17).2;
_8.2 = !(*_12).2;
(*_3).3 = (*_12).3;
(*_12).3 = _41.0 as i32;
(*_3) = (_8.0, (*_12).1, _41.3.1, (*_12).3);
Call((*_17) = fn18(_18.fld1, (*_3), _33.fld0, _16, _18.fld4, _29, _33.fld0.1, _14.fld5), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_38 = 17126920247440324727_u64;
_44.2 = (-3_i8) as i128;
_47 = _24.3.0 as isize;
_44.0 = _41.0;
_44.3.0 = (*_12).3 as u16;
_33.fld0.3 = !_8.3;
_18.fld0.0 = (*_3).0 * _1.fld2.0;
_1.fld4 = [(*_3).2,_41.2];
_24.3 = (_44.3.0, (*_3).2);
(*_17).1 = core::ptr::addr_of_mut!(_27);
match _38 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb9,
5 => bb6,
6 => bb8,
17126920247440324727 => bb13,
_ => bb12
}
}
bb12 = {
_29 = _26;
_19 = _14.fld1;
_1.fld2 = ((*_3).0, _8.1, (*_3).2, _1.fld1);
_1.fld0 = core::ptr::addr_of_mut!(_33.fld0);
_41.0 = _22;
match _24.3.0 {
0 => bb1,
1 => bb7,
2 => bb3,
3 => bb4,
4 => bb5,
5 => bb6,
39985 => bb10,
_ => bb9
}
}
bb13 = {
_49 = -_41.0;
_28 = !_41.2;
(*_3).0 = _1.fld2.0 - _33.fld3;
_8.0 = 14292_i16 as i64;
match _38 {
0 => bb5,
1 => bb11,
2 => bb14,
3 => bb15,
4 => bb16,
5 => bb17,
6 => bb18,
17126920247440324727 => bb20,
_ => bb19
}
}
bb14 = {
_14.fld3 = [_1.fld3,_1.fld3];
_1.fld1 = -_8.3;
RET = _2;
_14.fld0.3 = -_7;
(*_3).2 = _13 | _13;
(*_12).3 = _6 * _6;
(*_12).0 = _1.fld2.0 | _1.fld2.0;
_14.fld0.2 = 7806716110547784415_u64 as i128;
(*_3).2 = (*_12).0 as i128;
(*_3) = (_8.0, _1.fld2.1, _1.fld2.2, _1.fld1);
_14.fld0.1 = (*_12).1 ^ _1.fld2.1;
RET = _2;
(*_12).2 = _1.fld2.2;
_1.fld2 = ((*_3).0, _14.fld0.1, (*_3).2, _8.3);
(*_3).3 = _10 as i32;
_2 = _10;
(*_12).0 = _8.0;
_18.fld0.1 = (*_12).1 % 1501996863_u32;
_18.fld3 = [_1.fld3,_1.fld3];
_14.fld0 = _1.fld2;
Goto(bb2)
}
bb15 = {
_8.1 = false as u32;
_27 = !35577570179357852063199364896428499147_u128;
_18.fld0.3 = _14.fld0.3 >> _1.fld3;
RET = _14.fld1;
_33.fld3 = (*_12).0;
_23 = !_26;
Goto(bb6)
}
bb16 = {
(*_3).1 = !_16;
_1.fld2.3 = _18.fld0.0 as i32;
_3 = _12;
_21.0 = core::ptr::addr_of_mut!(_1.fld1);
_10 = _18.fld1;
(*_12).0 = _18.fld0.0 << (*_12).3;
_26 = 189_u8;
_1.fld2.0 = (*_12).0;
(*_12).1 = _18.fld0.1;
_24.1 = _1.fld3;
RET = _14.fld1;
_18.fld4 = [10063832617833263795_u64,749035813820454503_u64,4953341691467011228_u64,9647221673024776134_u64,10605106251946477807_u64,12488760015708442915_u64];
_18.fld4 = [4326440168979712353_u64,10409219211651377316_u64,9707651621032551494_u64,5240405036661063533_u64,11673578150456512077_u64,5947381531525662649_u64];
_1.fld2.0 = (*_3).0 ^ (*_12).0;
_14.fld0.1 = _16 + _18.fld0.1;
_18.fld0.2 = (*_12).2;
_1.fld2.0 = (*_12).0;
(*_3).0 = _1.fld2.0;
_14.fld5 = [_26,_26,_26,_26,_26,_26,_26];
_5 = 47783_u16 as i32;
(*_12).2 = -_18.fld0.2;
_8.2 = _13 + (*_3).2;
(*_12) = (_1.fld2.0, _18.fld0.1, _8.2, _14.fld0.3);
_1.fld3 = _7 as usize;
_18.fld5 = [_26,_26,_26,_26,_26,_26,_26];
_24.2 = _18.fld0.2;
Call(_25 = fn17(_18.fld3, _4, _14.fld0, (*_12).0, _8, (*_12).0, _9, (*_12).2, (*_3).2, _5, _4, (*_12).3), ReturnTo(bb5), UnwindUnreachable())
}
bb17 = {
_14.fld0.2 = (*_3).2;
_1.fld3 = !_24.1;
_2 = _19;
_32 = _10 as isize;
(*_12).0 = _33.fld3 * _1.fld2.0;
_24.3 = (39985_u16, _24.2);
_1.fld2.0 = (*_3).0 + (*_12).0;
_33.fld0 = (_1.fld2.0, (*_3).1, _18.fld0.2, _14.fld0.3);
Goto(bb7)
}
bb18 = {
_29 = _26;
_19 = _14.fld1;
_1.fld2 = ((*_3).0, _8.1, (*_3).2, _1.fld1);
_1.fld0 = core::ptr::addr_of_mut!(_33.fld0);
_41.0 = _22;
match _24.3.0 {
0 => bb1,
1 => bb7,
2 => bb3,
3 => bb4,
4 => bb5,
5 => bb6,
39985 => bb10,
_ => bb9
}
}
bb19 = {
_33.fld0.0 = -_33.fld3;
_25 = _9 * _4;
_1.fld2.1 = true as u32;
_33.fld0.0 = _25 as i64;
_14.fld4 = [9626761580530920696_u64,9294351127873830763_u64,9230195752520982257_u64,9396026176994155169_u64,3334692530720515129_u64,4640040303125761287_u64];
_20 = -_11;
_1.fld3 = _24.1 / 3381746872876582169_usize;
_33.fld2 = [10852939922727590083_u64,11059955507522530895_u64,10325608769281457778_u64,6269787466003467114_u64,12068281301497842136_u64];
_8.2 = _27 as i128;
(*_12).3 = _25 as i32;
_8.2 = _23 as i128;
_14.fld0.2 = _18.fld0.2 | (*_3).2;
_18.fld1 = _14.fld1;
_17 = core::ptr::addr_of_mut!(_39.fld1.fld0);
_22 = _4 as f32;
_8 = (_1.fld2.0, _14.fld0.1, _33.fld0.2, _33.fld0.3);
_21.1 = !_27;
Goto(bb8)
}
bb20 = {
_45.2 = true;
_33.fld1 = [_2,_18.fld1,_14.fld1,_14.fld1,_14.fld1,_14.fld1];
_24.3.1 = (*_3).2;
_55.fld0.2 = _24.3.0 as i128;
_24.1 = _1.fld3 % 2_usize;
_8.0 = _1.fld2.2 as i64;
(*_12).1 = _14.fld0.1;
_39.fld0 = !_23;
_55.fld0.0 = _1.fld2.0 * _1.fld2.0;
_14.fld2 = _18.fld2;
_51.fld0 = (*_17);
_14.fld4 = [_38,_38,_38,_38,_38,_38];
_5 = _38 as i32;
(*_12).2 = _41.2 >> (*_3).3;
_45.2 = false;
_33.fld0.1 = _39.fld1.fld0.2;
_55.fld2 = [_38,_38,_38,_38,_38];
(*_12).2 = _55.fld0.2;
(*_17).2 = _51.fld0.2 % 1890885507_u32;
(*_12).3 = _1.fld3 as i32;
Goto(bb21)
}
bb21 = {
Call(_59 = dump_var(16_usize, 23_usize, Move(_23), 9_usize, Move(_9), 38_usize, Move(_38), 10_usize, Move(_10)), ReturnTo(bb22), UnwindUnreachable())
}
bb22 = {
Call(_59 = dump_var(16_usize, 19_usize, Move(_19), 4_usize, Move(_4), 8_usize, Move(_8), 6_usize, Move(_6)), ReturnTo(bb23), UnwindUnreachable())
}
bb23 = {
Call(_59 = dump_var(16_usize, 16_usize, Move(_16), 13_usize, Move(_13), 60_usize, _60, 60_usize, _60), ReturnTo(bb24), UnwindUnreachable())
}
bb24 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn17(mut _1: [usize; 2],mut _2: isize,mut _3: (i64, u32, i128, i32),mut _4: i64,mut _5: (i64, u32, i128, i32),mut _6: i64,mut _7: isize,mut _8: i128,mut _9: i128,mut _10: i32,mut _11: isize,mut _12: i32) -> isize {
mir! {
type RET = isize;
let _13: f64;
let _14: [u8; 1];
let _15: Adt65;
let _16: f32;
let _17: ();
let _18: ();
{
_2 = _11 - _7;
_12 = 304332912688715978875040824412035730571_u128 as i32;
Call(_12 = core::intrinsics::bswap(_5.3), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_5.1 = _3.1 & _3.1;
_3.0 = !_6;
_9 = _5.2 >> _3.3;
_7 = 1_usize as isize;
_11 = !_2;
_5.1 = _3.1 - _3.1;
_3.2 = 45_u8 as i128;
_15.fld2 = [79_u8];
_15.fld0 = 51080752718847596614263484466362482485_u128 - 116404896966433615518961974138864104609_u128;
_15.fld4.fld0.fld2.1 = !_5.1;
_7 = 68_i8 as isize;
_15.fld4.fld0.fld2.2 = 140_u8 as i128;
_15.fld4.fld0.fld4 = [_9,_8];
_15.fld4.fld0.fld0 = core::ptr::addr_of_mut!(_5);
RET = _11 | _11;
_15.fld4.fld0.fld3 = 5_usize << _5.3;
_8 = !_9;
_14 = [234_u8];
_14 = [112_u8];
_3.3 = '\u{6eb5f}' as i32;
_15.fld4.fld0.fld4 = [_8,_9];
Goto(bb2)
}
bb2 = {
Call(_17 = dump_var(17_usize, 4_usize, Move(_4), 3_usize, Move(_3), 14_usize, Move(_14), 11_usize, Move(_11)), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Call(_17 = dump_var(17_usize, 7_usize, Move(_7), 8_usize, Move(_8), 18_usize, _18, 18_usize, _18), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn18(mut _1: char,mut _2: (i64, u32, i128, i32),mut _3: (i64, u32, i128, i32),mut _4: u32,mut _5: [u64; 6],mut _6: u8,mut _7: u32,mut _8: [u8; 7]) -> (isize, *mut u128, u32) {
mir! {
type RET = (isize, *mut u128, u32);
let _9: Adt51;
let _10: u32;
let _11: [char; 6];
let _12: Adt64;
let _13: Adt60;
let _14: i64;
let _15: [char; 7];
let _16: ();
let _17: ();
{
_2.2 = _1 as i128;
_2.2 = -_3.2;
_2.3 = 2025112488927593849_u64 as i32;
_9.fld0.2 = !_4;
_1 = '\u{f59f5}';
RET.0 = !9223372036854775807_isize;
_2.0 = !_3.0;
RET.0 = (-125_isize) + (-31_isize);
_3.3 = _2.3;
RET.0 = -(-9223372036854775808_isize);
_8 = [_6,_6,_6,_6,_6,_6,_6];
_9.fld0.0 = -9223372036854775807_isize;
_9.fld0.0 = (-128_isize) & 9223372036854775807_isize;
_1 = '\u{d6e3d}';
_3 = (_2.0, _4, _2.2, _2.3);
RET.2 = _3.1;
RET.0 = _9.fld0.2 as isize;
_3.3 = _2.3;
_8 = [_6,_6,_6,_6,_6,_6,_6];
RET.2 = _2.3 as u32;
_3 = (_2.0, _9.fld0.2, _2.2, _2.3);
_2.3 = _3.1 as i32;
_2.3 = _6 as i32;
_2.2 = -_3.2;
_1 = '\u{8bd32}';
_9.fld0.2 = 2406_u16 as u32;
match _6 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
189 => bb6,
_ => bb5
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
_9.fld0.0 = -(-7_isize);
_4 = !_2.1;
Goto(bb7)
}
bb7 = {
_9.fld0.2 = true as u32;
_5 = [6861299507181358874_u64,7002022577257372996_u64,162226265758753351_u64,6164378810927393076_u64,8788954977837693237_u64,7140504971880117032_u64];
_10 = _9.fld0.2;
_10 = _3.1 << _2.2;
_9.fld0.0 = 9223372036854775807_isize ^ (-9223372036854775808_isize);
_2.2 = _3.2 | _3.2;
RET.2 = _10 | _9.fld0.2;
_3.1 = 31668_i16 as u32;
RET.2 = 11301315100704180208_u64 as u32;
_2 = (_3.0, _10, _3.2, _3.3);
_3.2 = !_2.2;
_3.1 = _7;
_7 = _10 + _10;
_7 = _6 as u32;
_3.3 = _2.3;
_2.3 = _3.3 & _3.3;
_2.0 = _3.0;
_3.1 = !_9.fld0.2;
RET.0 = _9.fld0.0;
_9.fld0.0 = !(-9223372036854775808_isize);
_10 = _2.2 as u32;
RET.2 = !_2.1;
_10 = _2.1 - _2.1;
_2.2 = _2.3 as i128;
_11 = [_1,_1,_1,_1,_1,_1];
_3.0 = 43_i8 as i64;
RET.0 = !_9.fld0.0;
_2.0 = _1 as i64;
_3.3 = (-86_i8) as i32;
_4 = _2.3 as u32;
_11 = [_1,_1,_1,_1,_1,_1];
Goto(bb8)
}
bb8 = {
_3.2 = _2.2;
_3.2 = 13688100404617620198196441919972530364_u128 as i128;
_9.fld0.0 = 125_isize >> _10;
_2.0 = 0_usize as i64;
RET.0 = !_9.fld0.0;
_4 = _10;
RET.1 = core::ptr::addr_of_mut!(_13.fld1.fld1.1);
_12.fld0 = !_6;
_13.fld1.fld2.fld0.0 = _9.fld0.0 + _9.fld0.0;
RET.1 = core::ptr::addr_of_mut!(_13.fld1.fld1.1);
_13.fld0.fld1.fld0.1 = core::ptr::addr_of_mut!(_13.fld1.fld1.1);
RET.0 = !_13.fld1.fld2.fld0.0;
_13.fld1.fld0 = !_2.0;
Goto(bb9)
}
bb9 = {
Call(_16 = dump_var(18_usize, 5_usize, Move(_5), 6_usize, Move(_6), 10_usize, Move(_10), 1_usize, Move(_1)), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
Call(_16 = dump_var(18_usize, 8_usize, Move(_8), 17_usize, _17, 17_usize, _17, 17_usize, _17), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
Return()
}

}
}
pub fn main() {
                fn0(std::hint::black_box(true), std::hint::black_box('\u{e8eff}'), std::hint::black_box(9223372036854775807_isize), std::hint::black_box(68_i8), std::hint::black_box((-12398_i16)), std::hint::black_box(341735526_i32), std::hint::black_box(8087165218852927814_i64), std::hint::black_box((-147608769593218914286163032458373954597_i128)), std::hint::black_box(4_usize), std::hint::black_box(176_u8), std::hint::black_box(57457_u16), std::hint::black_box(1975454017_u32), std::hint::black_box(9188555274581226912_u64), std::hint::black_box(225530180968583602099483154970849904248_u128));
                
            }
#[derive(Debug)]
pub struct Adt49 {
fld0: (u16, i128),
fld1: *const *mut *const *mut i128,
}
#[derive(Debug,Copy,Clone)]
pub struct Adt50 {
fld0: (*mut i32, u128),
fld1: *mut *const *mut i128,
fld2: [u8; 7],
fld3: *mut (isize, *mut u128, u32),
fld4: [u8; 1],
}
#[derive(Debug)]
pub struct Adt51 {
fld0: (isize, *mut u128, u32),
}
#[derive(Debug)]
pub struct Adt52 {
fld0: u8,
fld1: Adt51,
}
#[derive(Debug,Copy,Clone)]
pub struct Adt53 {
fld0: *mut (i64, u32, i128, i32),
fld1: i32,
fld2: (i64, u32, i128, i32),
fld3: usize,
fld4: [i128; 2],
}
#[derive(Debug)]
pub struct Adt54 {
fld0: [char; 6],
fld1: [u8; 1],
fld2: f32,
fld3: *const f32,
fld4: [usize; 2],
fld5: *mut char,
fld6: i64,
}
#[derive(Debug)]
pub struct Adt55 {
fld0: usize,
fld1: [u128; 1],
fld2: Adt49,
fld3: [char; 6],
fld4: i16,
fld5: (f32, usize, i128, (u16, i128)),
fld6: [u8; 1],
}
#[derive(Debug)]
pub struct Adt56 {
fld0: [char; 5],
}
#[derive(Debug)]
pub struct Adt57 {
fld0: i64,
fld1: (*mut i32, u128),
fld2: Adt51,
}
#[derive(Debug)]
pub struct Adt58 {
fld0: Adt53,
fld1: i64,
}
#[derive(Debug)]
pub struct Adt59 {
fld0: *mut i128,
fld1: *mut (i64, u32, i128, i32),
fld2: f64,
fld3: i8,
fld4: i16,
fld5: [u8; 7],
fld6: Adt50,
fld7: (u32, u8, bool),
}
#[derive(Debug)]
pub struct Adt60 {
fld0: Adt52,
fld1: Adt57,
}
#[derive(Debug)]
pub struct Adt61 {
fld0: *const [i128; 2],
}
#[derive(Debug)]
pub struct Adt62 {
fld0: (i64, u32, i128, i32),
fld1: [char; 6],
fld2: [u64; 5],
fld3: i64,
}
#[derive(Debug)]
pub struct Adt63 {
fld0: (i64, u32, i128, i32),
fld1: char,
fld2: *const [i128; 2],
fld3: [usize; 2],
fld4: [u64; 6],
fld5: [u8; 7],
}
#[derive(Debug)]
pub struct Adt64 {
fld0: u8,
}
#[derive(Debug)]
pub struct Adt65 {
fld0: u128,
fld1: *const [i128; 2],
fld2: [u8; 1],
fld3: u8,
fld4: Adt58,
fld5: [u128; 8],
fld6: (isize, *mut u128, u32),
}

