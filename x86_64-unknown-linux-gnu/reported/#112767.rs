#![recursion_limit = "256"]
    #![feature(custom_mir, core_intrinsics, const_hash)]
    #![allow(unused_parens, unused_assignments, overflowing_literals)]
    extern crate core;
    use core::intrinsics::mir::*;

    use std::fmt::Debug;

    #[inline(never)]
    pub fn dump_var<T: Debug, U: Debug, V: Debug, W: Debug>(f: usize,
        var0: usize, val0: T,
        var1: usize, val1: U,
        var2: usize, val2: V,
        var3: usize, val3: W,
    ) {
        println!("fn{f}:_{var0} = {val0:?}\n_{var1} = {val1:?}\n_{var2} = {val2:?}\n_{var3} = {val3:?}");
    }
    #[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn0(mut _1: bool,mut _2: char,mut _3: isize,mut _4: i8,mut _5: i16,mut _6: i32,mut _7: i64,mut _8: i128,mut _9: usize,mut _10: u8,mut _11: u16,mut _12: u32,mut _13: u64,mut _14: u128) -> Adt51 {
mir! {
type RET = Adt51;
let _15: Adt60;
let _16: *const i32;
let _17: u64;
let _18: i64;
let _19: usize;
let _20: f32;
let _21: Adt52;
let _22: isize;
let _23: isize;
let _24: [bool; 6];
let _25: isize;
let _26: i8;
let _27: isize;
let _28: Adt50;
let _29: f32;
let _30: f64;
let _31: ([char; 4], [i16; 4], u128, f32);
let _32: Adt54;
let _33: [u32; 2];
let _34: [i128; 7];
let _35: Adt62;
let _36: usize;
let _37: ([char; 4], [i16; 4], u128, f32);
let _38: *mut [bool; 6];
let _39: i64;
let _40: i64;
let _41: Adt52;
let _42: i32;
let _43: ();
let _44: ();
{
_7 = 4420706442941409177_i64;
_2 = '\u{1fbd8}';
_14 = (-98_i8) as u128;
RET = Adt51 { fld0: _14 };
_5 = (-9223372036854775808_isize) as i16;
_12 = 28639_u16 as u32;
_1 = true | false;
_4 = (-109_i8);
_16 = core::ptr::addr_of!(_6);
_13 = 8261828995691010326_u64;
_11 = 74_u8 as u16;
_9 = !5403677216183445625_usize;
_16 = core::ptr::addr_of!((*_16));
_12 = _1 as u32;
_13 = (-81637786283838556797066458141405218514_i128) as u64;
_18 = _7;
_20 = _12 as f32;
match _7 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb5,
4420706442941409177 => bb7,
_ => bb6
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
RET = Adt51 { fld0: _14 };
_13 = _2 as u64;
_10 = (-9223372036854775808_isize) as u8;
Call(_7, bb8, fn1(_18, _18, _13, _10, _5, _5, _11, _5, _4, _18, _16, _16, _5, _13, _11))
}
bb8 = {
_21.fld2 = [_11,_11,_11,_11,_11,_11,_11,_11];
_21.fld1 = _9 ^ _9;
_8 = _13 as i128;
_18 = -_7;
_8 = (-46476977446419226484005996586554075800_i128);
RET.fld0 = _14 * _14;
_17 = _13 + _13;
_7 = _11 as i64;
_8 = -59852179326589450537221181534996330641_i128;
_20 = _12 as f32;
_4 = 31_i8 & (-78_i8);
_8 = 106101396010229282758987430164508578362_i128 >> _6;
_21.fld2 = [_11,_11,_11,_11,_11,_11,_11,_11];
_21.fld1 = _11 as usize;
RET = Adt51 { fld0: _14 };
_22 = _17 as isize;
_18 = _7;
_22 = _12 as isize;
_18 = !_7;
_19 = !_21.fld1;
Call(RET.fld0, bb9, core::intrinsics::transmute(_8))
}
bb9 = {
RET.fld0 = !_14;
_1 = !true;
_21.fld0 = _22 > _22;
_15.fld1 = _19 as i16;
_20 = _11 as f32;
_15.fld1 = !_5;
_16 = core::ptr::addr_of!(_6);
_10 = 253_u8 - 164_u8;
_6 = 2006365988_i32 | 1429878705_i32;
_24 = [_1,_21.fld0,_21.fld0,_1,_1,_1];
_21.fld2 = [_11,_11,_11,_11,_11,_11,_11,_11];
_28.fld1 = [_12,_12];
_20 = _14 as f32;
RET.fld0 = _14 - _14;
_1 = _21.fld0;
_28.fld0 = [_1,_21.fld0,_21.fld0,_1,_21.fld0,_1,_1];
_11 = 34801_u16 >> _8;
_29 = _20;
_5 = _15.fld1 >> _4;
Goto(bb10)
}
bb10 = {
_11 = _1 as u16;
_24 = [_21.fld0,_1,_1,_21.fld0,_1,_21.fld0];
_5 = -_15.fld1;
_26 = _4 << _14;
_28.fld0 = [_21.fld0,_1,_1,_21.fld0,_1,_21.fld0,_21.fld0];
_10 = 43_u8;
_31.3 = _6 as f32;
Goto(bb11)
}
bb11 = {
_27 = _26 as isize;
_10 = 78_u8 << _27;
Goto(bb12)
}
bb12 = {
_25 = _22;
_20 = _12 as f32;
_30 = _4 as f64;
RET.fld0 = _14 + _14;
_26 = -_4;
RET = Adt51 { fld0: _14 };
_24 = [_1,_1,_1,_21.fld0,_1,_21.fld0];
_4 = _26;
_26 = _4 | _4;
_32.fld2 = core::ptr::addr_of_mut!(_21.fld0);
_35.fld0.fld3.2 = [_15.fld1,_15.fld1,_15.fld1,_15.fld1];
RET.fld0 = !_14;
Goto(bb13)
}
bb13 = {
_18 = -_7;
_31.3 = _10 as f32;
_37.1 = [_5,_15.fld1,_15.fld1,_15.fld1];
_35.fld0.fld5 = core::ptr::addr_of_mut!(_24);
_20 = _31.3 + _31.3;
_35.fld0.fld3.0 = core::ptr::addr_of!(_11);
_32.fld1 = _2;
_18 = _7 << _4;
_37.3 = _20 * _20;
_23 = !_27;
_37.0 = [_32.fld1,_2,_32.fld1,_32.fld1];
_37.2 = _14 << _12;
Call(_37.3, bb14, core::intrinsics::transmute(_32.fld1))
}
bb14 = {
_2 = _32.fld1;
_31 = (_37.0, _35.fld0.fld3.2, _37.2, _29);
_33 = [_12,_12];
_1 = _21.fld0;
_30 = _10 as f64;
_15.fld1 = _18 as i16;
_40 = _18 * _7;
_41.fld1 = _11 as usize;
_7 = _41.fld1 as i64;
RET.fld0 = !_37.2;
Goto(bb15)
}
bb15 = {
Call(_43, bb16, dump_var(0_usize, 33_usize, Move(_33), 40_usize, Move(_40), 26_usize, Move(_26), 24_usize, Move(_24)))
}
bb16 = {
Call(_43, bb17, dump_var(0_usize, 23_usize, Move(_23), 4_usize, Move(_4), 5_usize, Move(_5), 17_usize, Move(_17)))
}
bb17 = {
Call(_43, bb18, dump_var(0_usize, 7_usize, Move(_7), 18_usize, Move(_18), 2_usize, Move(_2), 13_usize, Move(_13)))
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn1(mut _1: i64,mut _2: i64,mut _3: u64,mut _4: u8,mut _5: i16,mut _6: i16,mut _7: u16,mut _8: i16,mut _9: i8,mut _10: i64,mut _11: *const i32,mut _12: *const i32,mut _13: i16,mut _14: u64,mut _15: u16) -> i64 {
mir! {
type RET = i64;
let _16: i8;
let _17: u32;
let _18: (f32, u16);
let _19: bool;
let _20: bool;
let _21: Adt58;
let _22: f32;
let _23: *const i128;
let _24: [bool; 7];
let _25: (f32, u16);
let _26: usize;
let _27: ();
let _28: ();
{
(*_11) = !1503815552_i32;
_1 = _3 as i64;
_9 = (-87_i8) >> _3;
_14 = _3 | _3;
_8 = true as i16;
_4 = 83_u8 << _2;
_10 = _2 << _13;
RET = _2;
Call(_15, bb1, fn2((*_12), _11, _2, _9, _4, _5, _4, _8, _3))
}
bb1 = {
RET = _1 ^ _10;
_10 = !_1;
_7 = _2 as u16;
match _2 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
6 => bb8,
4420706442941409177 => bb10,
_ => bb9
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_4 = 224_u8;
_13 = _5 | _8;
_5 = _13;
(*_12) = (-1753509925_i32);
_18.0 = _9 as f32;
(*_11) = 1589538256_i32 - (-1085862041_i32);
_9 = !88_i8;
_18.1 = _7 | _15;
_17 = _1 as u32;
(*_11) = 185655414_i32;
_3 = '\u{d893a}' as u64;
_14 = _3;
RET = _2;
_3 = _14;
_11 = _12;
match _4 {
0 => bb8,
1 => bb2,
2 => bb7,
3 => bb6,
4 => bb11,
224 => bb13,
_ => bb12
}
}
bb11 = {
Return()
}
bb12 = {
Return()
}
bb13 = {
_21.fld4 = _3 as i16;
_6 = _5 + _5;
_9 = (*_12) as i8;
(*_11) = -1361428527_i32;
_21.fld3.2 = [_6,_6,_13,_8];
_19 = !false;
_21.fld3.0 = core::ptr::addr_of!(_7);
_16 = _14 as i8;
_6 = 44314160574971596241631015058251853381_i128 as i16;
_21.fld4 = !_5;
_21.fld0 = [_19,_19,_19,_19,_19,_19,_19];
_20 = _19;
_21.fld1.fld0 = [325061359621593553214902252638600831217_u128,139064991095098534180926011837681217598_u128,335570002139246213731783422370529324105_u128];
_14 = !_3;
_21.fld3.1 = core::ptr::addr_of!(_21.fld4);
_1 = (*_11) as i64;
_12 = core::ptr::addr_of!((*_12));
_4 = 243_u8;
_3 = _14;
_21.fld3.0 = core::ptr::addr_of!(_15);
_17 = !3026172075_u32;
_6 = -_13;
_18.0 = (*_12) as f32;
_21.fld4 = _13;
Goto(bb14)
}
bb14 = {
RET = _19 as i64;
_21.fld3.2 = [_5,_8,_6,_5];
_21.fld3.1 = core::ptr::addr_of!(_8);
_5 = -_21.fld4;
_19 = _4 == _4;
_19 = !_20;
_21.fld3.2 = [_21.fld4,_21.fld4,_21.fld4,_13];
Goto(bb15)
}
bb15 = {
Call(_27, bb16, dump_var(1_usize, 14_usize, Move(_14), 3_usize, Move(_3), 13_usize, Move(_13), 19_usize, Move(_19)))
}
bb16 = {
Call(_27, bb17, dump_var(1_usize, 20_usize, Move(_20), 2_usize, Move(_2), 16_usize, Move(_16), 10_usize, Move(_10)))
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn2(mut _1: i32,mut _2: *const i32,mut _3: i64,mut _4: i8,mut _5: u8,mut _6: i16,mut _7: u8,mut _8: i16,mut _9: u64) -> u16 {
mir! {
type RET = u16;
let _10: f32;
let _11: Adt59;
let _12: u32;
let _13: i8;
let _14: [u128; 3];
let _15: *mut u8;
let _16: *const i128;
let _17: char;
let _18: u32;
let _19: Adt58;
let _20: *mut [bool; 6];
let _21: [u128; 3];
let _22: isize;
let _23: i128;
let _24: Adt56;
let _25: Adt61;
let _26: u128;
let _27: char;
let _28: bool;
let _29: char;
let _30: [u128; 3];
let _31: ();
let _32: ();
{
RET = 4212_u16 << _4;
RET = 44761_u16 ^ 12684_u16;
_8 = _6;
_10 = _9 as f32;
_12 = 1980684436_u32 | 2187368400_u32;
_11.fld2.5 = 22893_u16;
_7 = _5 + _5;
(*_2) = _1 * _1;
(*_2) = '\u{7b918}' as i32;
_11.fld2.4 = (*_2) & (*_2);
_11.fld3.fld0 = [_3,_3,_3,_3];
_13 = 16640202279823737278499107216549363060_i128 as i8;
_11.fld0 = core::ptr::addr_of!(_11.fld2.1);
_11.fld2.1 = !156768945669444597604432364984121314189_i128;
_11.fld2.4 = false as i32;
_11.fld3.fld1 = '\u{94272}';
_11.fld3.fld0 = [_3,_3,_3,_3];
_5 = false as u8;
_5 = _7;
_11.fld3.fld1 = '\u{91e70}';
Goto(bb1)
}
bb1 = {
_11.fld3.fld1 = '\u{b1b37}';
_14 = [180209752682538609005076181689422597248_u128,57444615398461820467784958635853522963_u128,241184144145219577301383697670336355996_u128];
_11.fld1 = core::ptr::addr_of_mut!(_11.fld0);
_14 = [20841344013840272632151554883017583562_u128,9129642571966396756533568134512759633_u128,153522893335423105133527477061252465720_u128];
_14 = [312765851294622630028614153907013440175_u128,274813005101339480727127565419497645254_u128,214832486273337448085930133421659934819_u128];
_4 = -_13;
RET = 12668927121414886224_usize as u16;
_11.fld2.5 = 15449_u16;
RET = !_11.fld2.5;
_2 = core::ptr::addr_of!(_11.fld2.4);
_8 = !_6;
_7 = !_5;
_11.fld1 = core::ptr::addr_of_mut!(_11.fld0);
RET = !_11.fld2.5;
_11.fld6 = _3;
_11.fld6 = _6 as i64;
_2 = core::ptr::addr_of!((*_2));
_1 = _11.fld2.4 ^ (*_2);
_11.fld0 = core::ptr::addr_of!(_11.fld2.1);
_11.fld3.fld0 = [_3,_3,_11.fld6,_11.fld6];
_6 = -_8;
_12 = 3534138738_u32 >> _7;
Goto(bb2)
}
bb2 = {
_11.fld2.0 = 7709574946112216193_usize & 1563169890016221279_usize;
_10 = _5 as f32;
_11.fld3.fld0 = [_3,_11.fld6,_11.fld6,_3];
_11.fld5 = [234129071167127024057964074983316348797_u128,242343290531473071921945855069626537718_u128,143601159511022880478428483351149736391_u128,100652573643325569658816350953798612445_u128,78638374376717706793132149293531972623_u128];
_11.fld3.fld0 = [_11.fld6,_11.fld6,_11.fld6,_11.fld6];
(*_2) = _1 & _1;
_11.fld5 = [97445779135121434846599217106834495093_u128,31857279841324184975419946496325371000_u128,331190077654387274388842336469120047746_u128,264195212322958818647984934852774830736_u128,323614329585266940088416458061903817656_u128];
_16 = core::ptr::addr_of!(_11.fld2.1);
_4 = _13;
_16 = core::ptr::addr_of!((*_16));
_9 = (-9223372036854775808_isize) as u64;
(*_16) = 5634127735809525510536962903677566118_i128;
_11.fld6 = _6 as i64;
_11.fld0 = _16;
_14 = [256539673063744450238969290115042913844_u128,280158423590300042296736646458459070687_u128,178624662241285753990843583884346764768_u128];
match _11.fld2.5 {
0 => bb1,
1 => bb3,
2 => bb4,
15449 => bb6,
_ => bb5
}
}
bb3 = {
_11.fld3.fld1 = '\u{b1b37}';
_14 = [180209752682538609005076181689422597248_u128,57444615398461820467784958635853522963_u128,241184144145219577301383697670336355996_u128];
_11.fld1 = core::ptr::addr_of_mut!(_11.fld0);
_14 = [20841344013840272632151554883017583562_u128,9129642571966396756533568134512759633_u128,153522893335423105133527477061252465720_u128];
_14 = [312765851294622630028614153907013440175_u128,274813005101339480727127565419497645254_u128,214832486273337448085930133421659934819_u128];
_4 = -_13;
RET = 12668927121414886224_usize as u16;
_11.fld2.5 = 15449_u16;
RET = !_11.fld2.5;
_2 = core::ptr::addr_of!(_11.fld2.4);
_8 = !_6;
_7 = !_5;
_11.fld1 = core::ptr::addr_of_mut!(_11.fld0);
RET = !_11.fld2.5;
_11.fld6 = _3;
_11.fld6 = _6 as i64;
_2 = core::ptr::addr_of!((*_2));
_1 = _11.fld2.4 ^ (*_2);
_11.fld0 = core::ptr::addr_of!(_11.fld2.1);
_11.fld3.fld0 = [_3,_3,_11.fld6,_11.fld6];
_6 = -_8;
_12 = 3534138738_u32 >> _7;
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
_10 = (*_2) as f32;
_11.fld2.1 = (-19769033156256055278156766228563896803_i128);
_11.fld2.0 = 7_usize ^ 6_usize;
_15 = core::ptr::addr_of_mut!(_7);
Call(_11.fld4, bb7, fn3(_11.fld3.fld1, _13, _4, _6, _11.fld1, _15, _11.fld3.fld0, _2, (*_16), _3, (*_16)))
}
bb7 = {
_14 = [52983393102549847064629812427168201509_u128,263998544640696792871989672066648986542_u128,244212123709201134118557435497456229709_u128];
_11.fld3.fld1 = '\u{32715}';
_6 = !_8;
_15 = core::ptr::addr_of_mut!(_5);
_3 = _11.fld6 << (*_15);
_8 = _6;
_11.fld5 = [25967238347768770612812801473523701462_u128,200281821062368728501338596788370382565_u128,109150405728495624526992092488619382358_u128,211261569689518620449964167042580034542_u128,168128041300420947915860680692000698135_u128];
_18 = !_12;
_11.fld5 = [113448170285491197827623275859488525848_u128,205461465303605155799305291964197168959_u128,282822253330339080219391350856899159434_u128,276020076056678364229452468817633434043_u128,161883803936528674036387606626128306982_u128];
_13 = _10 as i8;
_6 = _10 as i16;
_4 = _13;
_19.fld3.1 = core::ptr::addr_of!(_6);
(*_2) = -_1;
_5 = !_7;
RET = _11.fld2.5 + _11.fld2.5;
_19.fld0 = [false,false,false,true,false,true,false];
_4 = _10 as i8;
_11.fld0 = _16;
_19.fld3.0 = core::ptr::addr_of!(_11.fld2.5);
_15 = core::ptr::addr_of_mut!((*_15));
Goto(bb8)
}
bb8 = {
_11.fld5 = [264252002785708147704159468916508134819_u128,171053264829655180445014724705056131551_u128,128303593682137983300101402602239020123_u128,102918962948101849942982085315265963090_u128,69134455526456608310198537860455508996_u128];
match (*_16) {
0 => bb5,
320513333764682408185217841203204314653 => bb9,
_ => bb3
}
}
bb9 = {
_5 = _11.fld2.4 as u8;
(*_16) = !(-136850430065901316379433231812493383717_i128);
_11.fld0 = core::ptr::addr_of!((*_16));
_19.fld1.fld0 = _14;
_8 = _11.fld3.fld1 as i16;
(*_15) = _7;
_13 = !_4;
_11.fld0 = core::ptr::addr_of!(_11.fld2.1);
_19.fld4 = !_8;
_11.fld0 = _16;
_11.fld6 = _3 << _13;
_1 = (*_2);
_2 = core::ptr::addr_of!(_11.fld2.4);
_11.fld2.5 = (*_2) as u16;
_19.fld3.0 = core::ptr::addr_of!(_11.fld2.5);
_4 = _9 as i8;
_11.fld6 = _3;
_11.fld2.2 = core::ptr::addr_of_mut!(_22);
_1 = _3 as i32;
_13 = _4;
_13 = _4;
_11.fld3.fld1 = '\u{7e9c8}';
Goto(bb10)
}
bb10 = {
_7 = (*_16) as u8;
_25.fld0 = [_4,_13,_13,_4,_4];
_21 = [262547029876231286083105513862471396458_u128,223512656760648160328621961066197859319_u128,242028038042374581297240486646826616366_u128];
_3 = _11.fld6;
_3 = 301885912348193654450759563964634877043_u128 as i64;
_11.fld2.4 = !_1;
_24.fld1.1 = core::ptr::addr_of!(_8);
_11.fld2.1 = !53750565059803307803226165651947329011_i128;
Goto(bb11)
}
bb11 = {
_19.fld0 = [true,false,false,true,true,false,false];
_10 = _11.fld2.0 as f32;
_25.fld1 = _2;
(*_16) = 148165921108874469575657637101887491748_i128;
_13 = (-1_isize) as i8;
_25.fld3 = _13 >> _1;
_28 = (*_16) <= (*_16);
_11.fld1 = core::ptr::addr_of_mut!(_16);
(*_15) = _7 % 112_u8;
_11.fld0 = core::ptr::addr_of!(_25.fld4);
_24.fld1.1 = _19.fld3.1;
(*_2) = !_1;
_11.fld2.3 = core::ptr::addr_of_mut!(_22);
_19.fld3.2 = [_6,_6,_6,_6];
match (*_16) {
0 => bb1,
1 => bb2,
2 => bb9,
3 => bb12,
148165921108874469575657637101887491748 => bb14,
_ => bb13
}
}
bb12 = {
_10 = (*_2) as f32;
_11.fld2.1 = (-19769033156256055278156766228563896803_i128);
_11.fld2.0 = 7_usize ^ 6_usize;
_15 = core::ptr::addr_of_mut!(_7);
Call(_11.fld4, bb7, fn3(_11.fld3.fld1, _13, _4, _6, _11.fld1, _15, _11.fld3.fld0, _2, (*_16), _3, (*_16)))
}
bb13 = {
_11.fld3.fld1 = '\u{b1b37}';
_14 = [180209752682538609005076181689422597248_u128,57444615398461820467784958635853522963_u128,241184144145219577301383697670336355996_u128];
_11.fld1 = core::ptr::addr_of_mut!(_11.fld0);
_14 = [20841344013840272632151554883017583562_u128,9129642571966396756533568134512759633_u128,153522893335423105133527477061252465720_u128];
_14 = [312765851294622630028614153907013440175_u128,274813005101339480727127565419497645254_u128,214832486273337448085930133421659934819_u128];
_4 = -_13;
RET = 12668927121414886224_usize as u16;
_11.fld2.5 = 15449_u16;
RET = !_11.fld2.5;
_2 = core::ptr::addr_of!(_11.fld2.4);
_8 = !_6;
_7 = !_5;
_11.fld1 = core::ptr::addr_of_mut!(_11.fld0);
RET = !_11.fld2.5;
_11.fld6 = _3;
_11.fld6 = _6 as i64;
_2 = core::ptr::addr_of!((*_2));
_1 = _11.fld2.4 ^ (*_2);
_11.fld0 = core::ptr::addr_of!(_11.fld2.1);
_11.fld3.fld0 = [_3,_3,_11.fld6,_11.fld6];
_6 = -_8;
_12 = 3534138738_u32 >> _7;
Goto(bb2)
}
bb14 = {
_1 = !(*_2);
Goto(bb15)
}
bb15 = {
Call(_31, bb16, dump_var(2_usize, 6_usize, Move(_6), 12_usize, Move(_12), 21_usize, Move(_21), 4_usize, Move(_4)))
}
bb16 = {
Call(_31, bb17, dump_var(2_usize, 8_usize, Move(_8), 18_usize, Move(_18), 9_usize, Move(_9), 32_usize, _32))
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn3(mut _1: char,mut _2: i8,mut _3: i8,mut _4: i16,mut _5: *mut *const i128,mut _6: *mut u8,mut _7: [i64; 4],mut _8: *const i32,mut _9: i128,mut _10: i64,mut _11: i128) -> *mut *const [bool; 7] {
mir! {
type RET = *mut *const [bool; 7];
let _12: u32;
let _13: *mut *const [bool; 7];
let _14: [u16; 8];
let _15: [u32; 2];
let _16: *const [bool; 7];
let _17: f64;
let _18: f32;
let _19: u32;
let _20: u64;
let _21: Adt52;
let _22: char;
let _23: Adt55;
let _24: (*const u16, *const i16, [i16; 4]);
let _25: Adt62;
let _26: [u128; 5];
let _27: i64;
let _28: (u8, f64, *mut *const i128, *mut [bool; 6], [i16; 4]);
let _29: Adt51;
let _30: char;
let _31: bool;
let _32: char;
let _33: ();
let _34: ();
{
_10 = 64554_u16 as i64;
_4 = (-24114_i16) ^ (-22940_i16);
_8 = core::ptr::addr_of!((*_8));
(*_6) = 217_u8 ^ 252_u8;
_10 = 1012470290121426355_i64;
(*_5) = core::ptr::addr_of!(_11);
_1 = '\u{9a2c4}';
_2 = _3 ^ _3;
_2 = _3;
(*_6) = 2066204487_u32 as u8;
Call(_2, bb1, fn4((*_5), (*_8), _11, _5, _11, _11, (*_8), _5, _1, (*_5), _4, _9, (*_5), (*_5)))
}
bb1 = {
_4 = false as i16;
_9 = _11 * _11;
(*_6) = 166_u8 << _9;
(*_8) = (-1412077851_i32);
_11 = _9 + _9;
_4 = 6_usize as i16;
_9 = _11 - _11;
(*_5) = core::ptr::addr_of!(_11);
_12 = 14280037088087041889_u64 as u32;
(*_5) = core::ptr::addr_of!(_11);
_12 = 2453378243_u32 ^ 2031672177_u32;
_10 = _12 as i64;
_5 = core::ptr::addr_of_mut!((*_5));
_1 = '\u{f53ab}';
(*_8) = (-1946208202_i32);
_11 = _12 as i128;
_1 = '\u{d8156}';
Call((*_6), bb2, fn19((*_8), (*_8), _11, _5, _5, _10, _10, _4, _7, _5, _1, _1, _2, (*_8), _2, (*_5)))
}
bb2 = {
_7 = [_10,_10,_10,_10];
_9 = _1 as i128;
_6 = core::ptr::addr_of_mut!((*_6));
_6 = core::ptr::addr_of_mut!((*_6));
(*_8) = 1073004132_i32;
_2 = 4_usize as i8;
(*_5) = core::ptr::addr_of!(_9);
_10 = _11 as i64;
(*_5) = core::ptr::addr_of!(_11);
(*_8) = !(-1518300753_i32);
(*_5) = core::ptr::addr_of!(_11);
_10 = 18359995411548594151_u64 as i64;
_9 = _11;
_2 = !_3;
_11 = _9;
_15 = [_12,_12];
_14 = [33456_u16,42082_u16,27438_u16,19449_u16,31215_u16,45271_u16,686_u16,45446_u16];
Goto(bb3)
}
bb3 = {
_13 = core::ptr::addr_of_mut!(_16);
(*_8) = (-1388417664_i32);
RET = core::ptr::addr_of_mut!((*_13));
Goto(bb4)
}
bb4 = {
(*_5) = core::ptr::addr_of!(_9);
(*_5) = core::ptr::addr_of!(_11);
_9 = !_11;
_4 = -(-17977_i16);
_3 = _2;
(*_8) = 11780706894812671374_usize as i32;
_15 = [_12,_12];
_8 = core::ptr::addr_of!((*_8));
(*_5) = core::ptr::addr_of!(_11);
Goto(bb5)
}
bb5 = {
_13 = core::ptr::addr_of_mut!((*_13));
_22 = _1;
RET = core::ptr::addr_of_mut!((*_13));
_10 = 8591530572795037938_i64;
_3 = (*_8) as i8;
_4 = 18912_i16 << _9;
_21 = Adt52 { fld0: true,fld1: 3831003417400287267_usize,fld2: _14 };
_24.1 = core::ptr::addr_of!(_4);
_20 = !124272022207322045_u64;
(*RET) = core::ptr::addr_of!(_25.fld0.fld0);
_21.fld0 = _21.fld1 != _21.fld1;
(*_8) = (-688268487_i32) ^ (-1177486558_i32);
_6 = core::ptr::addr_of_mut!((*_6));
_25.fld0.fld3.2 = [_4,_4,_4,_4];
_25.fld1 = core::ptr::addr_of!((*RET));
_1 = _22;
(*_5) = core::ptr::addr_of!(_9);
_2 = -_3;
_13 = core::ptr::addr_of_mut!((*RET));
Goto(bb6)
}
bb6 = {
_19 = _12;
_24.2 = [_4,_4,_4,_4];
_25.fld0.fld2 = core::ptr::addr_of!((*_13));
_25.fld2 = !9223372036854775807_isize;
(*_16) = [_21.fld0,_21.fld0,_21.fld0,_21.fld0,_21.fld0,_21.fld0,_21.fld0];
_24.2 = [_4,_4,_4,_4];
(*_6) = !232_u8;
_26 = [110468738759818337471015245772914764786_u128,311039152846212042488543734174675979463_u128,170469327611739880768608051589299022319_u128,252782080448335502601359216864673352547_u128,6495337418225985946351383479230393002_u128];
_18 = _20 as f32;
_17 = (*_6) as f64;
_28.1 = -_17;
_28.4 = [_4,_4,_4,_4];
(*_5) = core::ptr::addr_of!(_11);
_25.fld0.fld1.fld0 = [255401930129642294863889367183457423720_u128,7121372308824241404157655635226577475_u128,92272203025690532672572730845931632688_u128];
_14 = [20788_u16,30611_u16,7208_u16,39096_u16,42724_u16,65513_u16,63174_u16,63056_u16];
_20 = _10 as u64;
(*_5) = core::ptr::addr_of!(_11);
_16 = core::ptr::addr_of!((*_16));
RET = core::ptr::addr_of_mut!((*RET));
(*_13) = core::ptr::addr_of!((*_16));
(*RET) = core::ptr::addr_of!((*_16));
_21.fld1 = 5_usize;
(*_5) = core::ptr::addr_of!(_9);
_25.fld3 = [_4,_4,_4,_4];
_23.fld0 = _25.fld0.fld1.fld0;
Goto(bb7)
}
bb7 = {
Call(_33, bb8, dump_var(3_usize, 15_usize, Move(_15), 1_usize, Move(_1), 22_usize, Move(_22), 19_usize, Move(_19)))
}
bb8 = {
Call(_33, bb9, dump_var(3_usize, 20_usize, Move(_20), 26_usize, Move(_26), 12_usize, Move(_12), 34_usize, _34))
}
bb9 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn4(mut _1: *const i128,mut _2: i32,mut _3: i128,mut _4: *mut *const i128,mut _5: i128,mut _6: i128,mut _7: i32,mut _8: *mut *const i128,mut _9: char,mut _10: *const i128,mut _11: i16,mut _12: i128,mut _13: *const i128,mut _14: *const i128) -> i8 {
mir! {
type RET = i8;
let _15: i128;
let _16: i8;
let _17: *mut bool;
let _18: Adt51;
let _19: bool;
let _20: char;
let _21: [u128; 3];
let _22: u32;
let _23: Adt59;
let _24: u16;
let _25: [i8; 5];
let _26: [u128; 3];
let _27: [u128; 3];
let _28: isize;
let _29: [u128; 3];
let _30: [u128; 3];
let _31: isize;
let _32: f32;
let _33: bool;
let _34: Adt55;
let _35: Adt50;
let _36: f64;
let _37: ([char; 4], [i16; 4], u128, f32);
let _38: f32;
let _39: bool;
let _40: ();
let _41: ();
{
_10 = core::ptr::addr_of!(_12);
_1 = _10;
(*_4) = core::ptr::addr_of!(_5);
(*_14) = -_5;
(*_14) = _5 | (*_1);
_16 = (-128_i8) << _3;
RET = 1292355314_u32 as i8;
_8 = core::ptr::addr_of_mut!((*_4));
(*_4) = core::ptr::addr_of!((*_10));
(*_13) = 9206768571738040187_usize as i128;
_3 = (*_13);
RET = true as i8;
(*_4) = _1;
(*_8) = _13;
(*_1) = (-5812390665800754598_i64) as i128;
(*_8) = _13;
Goto(bb1)
}
bb1 = {
match _5 {
0 => bb2,
320513333764682408185217841203204314653 => bb4,
_ => bb3
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
(*_8) = core::ptr::addr_of!(_15);
Goto(bb5)
}
bb5 = {
_11 = !28730_i16;
(*_10) = (*_14) & (*_13);
(*_8) = _1;
_9 = '\u{d4299}';
(*_4) = _1;
(*_13) = _12;
(*_8) = core::ptr::addr_of!((*_14));
(*_4) = _10;
(*_8) = core::ptr::addr_of!(_3);
(*_8) = core::ptr::addr_of!((*_14));
_1 = core::ptr::addr_of!((*_13));
_10 = core::ptr::addr_of!(_15);
_16 = !(-11_i8);
_10 = (*_8);
(*_10) = _5 + _5;
(*_14) = _12;
_1 = _13;
_4 = core::ptr::addr_of_mut!((*_4));
(*_8) = _1;
_5 = (*_13) & (*_1);
Goto(bb6)
}
bb6 = {
(*_8) = _1;
_1 = core::ptr::addr_of!((*_13));
(*_8) = core::ptr::addr_of!(_12);
(*_14) = _3 >> _5;
_18.fld0 = _11 as u128;
(*_8) = core::ptr::addr_of!(_12);
_19 = _7 <= _7;
_12 = (*_10);
match _6 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
320513333764682408185217841203204314653 => bb7,
_ => bb5
}
}
bb7 = {
(*_1) = !_5;
_5 = _18.fld0 as i128;
_7 = _2 ^ _2;
_13 = core::ptr::addr_of!((*_14));
RET = _11 as i8;
(*_10) = _9 as i128;
RET = _16 & _16;
_5 = (*_1) + _12;
_20 = _9;
_10 = core::ptr::addr_of!((*_1));
_1 = core::ptr::addr_of!((*_10));
_6 = !_12;
_6 = _5 - (*_14);
(*_13) = _18.fld0 as i128;
_11 = 55045_u16 as i16;
_18.fld0 = !83554375422405607521494294046605768885_u128;
_21 = [_18.fld0,_18.fld0,_18.fld0];
(*_14) = _6;
Call(_21, bb8, fn5(_7, (*_13), _8, _12, _1))
}
bb8 = {
_18 = Adt51 { fld0: 31961887429104179046588540090715004731_u128 };
_15 = !_3;
_18.fld0 = !312978533983975452507845901964679848796_u128;
_8 = core::ptr::addr_of_mut!(_13);
_22 = 1651620817_u32;
_23.fld1 = core::ptr::addr_of_mut!(_13);
_23.fld2.0 = !843253307636018963_usize;
_23.fld0 = (*_4);
_23.fld5 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_9 = _20;
_9 = _20;
_12 = !(*_10);
(*_1) = _3 & _12;
_3 = -_12;
_13 = core::ptr::addr_of!((*_1));
_23.fld2.5 = 41081_u16;
_23.fld2.4 = _7;
_23.fld2.1 = (*_13) << (*_10);
_16 = -115_i8;
_2 = _23.fld2.4;
match _23.fld2.5 {
0 => bb1,
1 => bb9,
2 => bb10,
41081 => bb12,
_ => bb11
}
}
bb9 = {
(*_8) = core::ptr::addr_of!(_15);
Goto(bb5)
}
bb10 = {
Return()
}
bb11 = {
_11 = !28730_i16;
(*_10) = (*_14) & (*_13);
(*_8) = _1;
_9 = '\u{d4299}';
(*_4) = _1;
(*_13) = _12;
(*_8) = core::ptr::addr_of!((*_14));
(*_4) = _10;
(*_8) = core::ptr::addr_of!(_3);
(*_8) = core::ptr::addr_of!((*_14));
_1 = core::ptr::addr_of!((*_13));
_10 = core::ptr::addr_of!(_15);
_16 = !(-11_i8);
_10 = (*_8);
(*_10) = _5 + _5;
(*_14) = _12;
_1 = _13;
_4 = core::ptr::addr_of_mut!((*_4));
(*_8) = _1;
_5 = (*_13) & (*_1);
Goto(bb6)
}
bb12 = {
_22 = 1997039994123129167_i64 as u32;
_23.fld3.fld2 = core::ptr::addr_of_mut!(_19);
RET = 30_u8 as i8;
_18.fld0 = !19837397092570307823192264244290886103_u128;
_12 = _23.fld2.1 >> (*_10);
_17 = core::ptr::addr_of_mut!(_19);
RET = -_16;
(*_13) = !_6;
_5 = _23.fld2.1 | _23.fld2.1;
_23.fld2.2 = core::ptr::addr_of_mut!(_28);
_15 = (*_14) * (*_13);
(*_4) = core::ptr::addr_of!((*_1));
_14 = core::ptr::addr_of!(_15);
_19 = (*_1) >= _5;
_14 = core::ptr::addr_of!((*_13));
_29 = [_18.fld0,_18.fld0,_18.fld0];
_7 = _23.fld2.4;
_28 = _23.fld2.5 as isize;
_20 = _9;
_10 = core::ptr::addr_of!((*_14));
_29 = [_18.fld0,_18.fld0,_18.fld0];
(*_17) = false | true;
Goto(bb13)
}
bb13 = {
_26 = _21;
_29 = _26;
_8 = _23.fld1;
_27 = [_18.fld0,_18.fld0,_18.fld0];
_23.fld3.fld0 = [2999127079238028218_i64,(-8703614358177094955_i64),(-349661448370331104_i64),(-477431558399666173_i64)];
_23.fld5 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_26 = [_18.fld0,_18.fld0,_18.fld0];
_17 = core::ptr::addr_of_mut!(_19);
_35.fld0 = [(*_17),_19,_19,(*_17),(*_17),(*_17),(*_17)];
_25 = [_16,_16,_16,_16,_16];
_19 = !false;
_6 = _5;
_3 = _5;
_6 = 16000425278554041903_u64 as i128;
_16 = (-100_i8);
_23.fld2.5 = _16 as u16;
_8 = core::ptr::addr_of_mut!((*_8));
(*_4) = core::ptr::addr_of!((*_13));
_23.fld6 = (-53864029512309917_i64);
(*_8) = core::ptr::addr_of!((*_1));
_34 = Adt55 { fld0: _21 };
_36 = _16 as f64;
_23.fld2.3 = _23.fld2.2;
(*_14) = _3 & _23.fld2.1;
match _16 {
0 => bb11,
1 => bb6,
2 => bb14,
3 => bb15,
4 => bb16,
5 => bb17,
6 => bb18,
340282366920938463463374607431768211356 => bb20,
_ => bb19
}
}
bb14 = {
_11 = !28730_i16;
(*_10) = (*_14) & (*_13);
(*_8) = _1;
_9 = '\u{d4299}';
(*_4) = _1;
(*_13) = _12;
(*_8) = core::ptr::addr_of!((*_14));
(*_4) = _10;
(*_8) = core::ptr::addr_of!(_3);
(*_8) = core::ptr::addr_of!((*_14));
_1 = core::ptr::addr_of!((*_13));
_10 = core::ptr::addr_of!(_15);
_16 = !(-11_i8);
_10 = (*_8);
(*_10) = _5 + _5;
(*_14) = _12;
_1 = _13;
_4 = core::ptr::addr_of_mut!((*_4));
(*_8) = _1;
_5 = (*_13) & (*_1);
Goto(bb6)
}
bb15 = {
_11 = !28730_i16;
(*_10) = (*_14) & (*_13);
(*_8) = _1;
_9 = '\u{d4299}';
(*_4) = _1;
(*_13) = _12;
(*_8) = core::ptr::addr_of!((*_14));
(*_4) = _10;
(*_8) = core::ptr::addr_of!(_3);
(*_8) = core::ptr::addr_of!((*_14));
_1 = core::ptr::addr_of!((*_13));
_10 = core::ptr::addr_of!(_15);
_16 = !(-11_i8);
_10 = (*_8);
(*_10) = _5 + _5;
(*_14) = _12;
_1 = _13;
_4 = core::ptr::addr_of_mut!((*_4));
(*_8) = _1;
_5 = (*_13) & (*_1);
Goto(bb6)
}
bb16 = {
(*_8) = _1;
_1 = core::ptr::addr_of!((*_13));
(*_8) = core::ptr::addr_of!(_12);
(*_14) = _3 >> _5;
_18.fld0 = _11 as u128;
(*_8) = core::ptr::addr_of!(_12);
_19 = _7 <= _7;
_12 = (*_10);
match _6 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
320513333764682408185217841203204314653 => bb7,
_ => bb5
}
}
bb17 = {
(*_8) = core::ptr::addr_of!(_15);
Goto(bb5)
}
bb18 = {
_18 = Adt51 { fld0: 31961887429104179046588540090715004731_u128 };
_15 = !_3;
_18.fld0 = !312978533983975452507845901964679848796_u128;
_8 = core::ptr::addr_of_mut!(_13);
_22 = 1651620817_u32;
_23.fld1 = core::ptr::addr_of_mut!(_13);
_23.fld2.0 = !843253307636018963_usize;
_23.fld0 = (*_4);
_23.fld5 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_9 = _20;
_9 = _20;
_12 = !(*_10);
(*_1) = _3 & _12;
_3 = -_12;
_13 = core::ptr::addr_of!((*_1));
_23.fld2.5 = 41081_u16;
_23.fld2.4 = _7;
_23.fld2.1 = (*_13) << (*_10);
_16 = -115_i8;
_2 = _23.fld2.4;
match _23.fld2.5 {
0 => bb1,
1 => bb9,
2 => bb10,
41081 => bb12,
_ => bb11
}
}
bb19 = {
(*_8) = core::ptr::addr_of!(_15);
Goto(bb5)
}
bb20 = {
_37.3 = _36 as f32;
_4 = _8;
(*_17) = (*_14) >= (*_13);
_37.1 = [_11,_11,_11,_11];
(*_17) = !true;
_21 = [_18.fld0,_18.fld0,_18.fld0];
_23.fld3.fld1 = _9;
_23.fld1 = core::ptr::addr_of_mut!((*_8));
_6 = _9 as i128;
_6 = _3 - (*_1);
_32 = _37.3 + _37.3;
_2 = -_23.fld2.4;
(*_8) = _10;
_24 = _23.fld2.5 / 43313_u16;
Goto(bb21)
}
bb21 = {
Call(_40, bb22, dump_var(4_usize, 15_usize, Move(_15), 7_usize, Move(_7), 19_usize, Move(_19), 28_usize, Move(_28)))
}
bb22 = {
Call(_40, bb23, dump_var(4_usize, 11_usize, Move(_11), 24_usize, Move(_24), 5_usize, Move(_5), 9_usize, Move(_9)))
}
bb23 = {
Call(_40, bb24, dump_var(4_usize, 29_usize, Move(_29), 16_usize, Move(_16), 41_usize, _41, 41_usize, _41))
}
bb24 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn5(mut _1: i32,mut _2: i128,mut _3: *mut *const i128,mut _4: i128,mut _5: *const i128) -> [u128; 3] {
mir! {
type RET = [u128; 3];
let _6: Adt64;
let _7: usize;
let _8: char;
let _9: isize;
let _10: isize;
let _11: Adt58;
let _12: [bool; 6];
let _13: [bool; 6];
let _14: (*const u16, *const i16, [i16; 4]);
let _15: bool;
let _16: isize;
let _17: (f32, u16);
let _18: [i128; 7];
let _19: Adt56;
let _20: ([char; 4], [i16; 4], u128, f32);
let _21: [bool; 6];
let _22: Adt55;
let _23: i16;
let _24: [bool; 7];
let _25: Adt53;
let _26: char;
let _27: u32;
let _28: f64;
let _29: isize;
let _30: ([char; 4], [i16; 4], u128, f32);
let _31: ([char; 4], [i16; 4], u128, f32);
let _32: [u16; 8];
let _33: u8;
let _34: Adt52;
let _35: isize;
let _36: char;
let _37: Adt50;
let _38: i8;
let _39: [u32; 2];
let _40: ();
let _41: ();
{
RET = [303971352536282637232347032078932292676_u128,300015266498789103042170395094239343172_u128,57944313475180764839246317770885610007_u128];
RET = [90843000752314835878682977681617833809_u128,211784338103640142369394160309946112223_u128,134433509746027027335235721415172444870_u128];
_5 = core::ptr::addr_of!(_4);
_5 = core::ptr::addr_of!(_4);
_3 = core::ptr::addr_of_mut!((*_3));
_6.fld0 = [2953525832_u32,2051892354_u32];
(*_3) = _5;
_5 = core::ptr::addr_of!(_4);
_1 = (-8538303036680799712_i64) as i32;
RET = [302701324052315530537831810147348106201_u128,183152166887049246910088668899665651304_u128,157774520775585371088149901599870670765_u128];
_2 = -(*_5);
(*_3) = core::ptr::addr_of!(_4);
Call(_4, bb1, fn6((*_3), (*_3), _3, (*_3)))
}
bb1 = {
(*_5) = _2;
_7 = 0_usize >> _4;
_7 = '\u{cb526}' as usize;
(*_5) = true as i128;
_7 = 10561509298357260917_usize;
_6.fld1 = [(-1_i8),(-113_i8),55_i8,105_i8,31_i8];
RET = [152964084298681226108914444999940675542_u128,104016911745543817138952824710286530206_u128,152806546837635487457981049174773537600_u128];
(*_5) = '\u{4a7a6}' as i128;
(*_3) = _5;
_6.fld1 = [(-70_i8),(-54_i8),(-62_i8),(-83_i8),50_i8];
_6.fld1 = [(-28_i8),37_i8,122_i8,81_i8,(-83_i8)];
_6.fld1 = [(-108_i8),29_i8,105_i8,36_i8,7_i8];
_4 = _1 as i128;
(*_5) = -_2;
(*_3) = core::ptr::addr_of!((*_5));
RET = [214607556083556803162462728229667793508_u128,108969892481681557716912372005063806912_u128,287833686546281348347026221643265844737_u128];
_6.fld0 = [4249108153_u32,2168630308_u32];
_4 = _2 >> _7;
RET = [117265742906457059253426277671358084568_u128,13803415431214081057780793718202159416_u128,74028022719256268731250657189458358794_u128];
_8 = '\u{4d9e0}';
RET = [146579531991069442050756490844709891539_u128,8821440216755919860108663708838956579_u128,169218417557228393231543390053704773044_u128];
(*_3) = core::ptr::addr_of!(_2);
Goto(bb2)
}
bb2 = {
(*_5) = !_2;
RET = [337471090830433409931563315961505962908_u128,272660998813671986078573921644799321131_u128,64673918280577107355448733967528765041_u128];
_10 = (*_5) as isize;
_2 = !(*_5);
(*_5) = false as i128;
_9 = -_10;
Goto(bb3)
}
bb3 = {
_9 = _10;
_6.fld0 = [1661625174_u32,3355429606_u32];
_6.fld0 = [3135423106_u32,962368167_u32];
(*_3) = core::ptr::addr_of!(_4);
_3 = core::ptr::addr_of_mut!(_5);
_6.fld1 = [11_i8,83_i8,(-86_i8),6_i8,31_i8];
_6.fld1 = [(-87_i8),(-106_i8),(-128_i8),8_i8,(-72_i8)];
_2 = (*_5) >> _4;
_7 = 4308928121164736781_i64 as usize;
_11.fld1.fld0 = [300490182614742984482093121936904891995_u128,242950047391092277667874528052001854171_u128,92281123161939567676192405356746847285_u128];
_11.fld1.fld0 = [283933241834627630802731474896173215101_u128,115853832142461730325706578931488798487_u128,34572261704344744935299383593100555104_u128];
_11.fld0 = [true,false,false,false,false,false,true];
_1 = -1969988891_i32;
_10 = -_9;
_6.fld0 = [1570939501_u32,1259096194_u32];
_11.fld3.1 = core::ptr::addr_of!(_11.fld4);
_8 = '\u{897c2}';
_1 = (-177468162_i32) & 1126928051_i32;
RET = [73032292884643129162137418992277597416_u128,66868058012440411952767614872818753955_u128,206135103712950764433071392041558499252_u128];
Goto(bb4)
}
bb4 = {
_2 = (*_5);
_1 = (-1063234892478642726_i64) as i32;
_7 = 13797618347526463344_u64 as usize;
_11.fld4 = (-29349_i16);
_2 = (*_5);
_6.fld1 = [11_i8,39_i8,(-23_i8),(-87_i8),(-10_i8)];
_6.fld1 = [35_i8,(-121_i8),114_i8,16_i8,(-124_i8)];
_11.fld1.fld0 = [29948493286190998830655599687111493436_u128,146192249617658988927998664797401228217_u128,155656818705696974966140874345044263424_u128];
_14.1 = _11.fld3.1;
_10 = _9 * _9;
(*_3) = core::ptr::addr_of!(_2);
RET = _11.fld1.fld0;
_6.fld0 = [2067152388_u32,4208880256_u32];
_10 = -_9;
_11.fld3.2 = [_11.fld4,_11.fld4,_11.fld4,_11.fld4];
(*_5) = 5772353987142946815_u64 as i128;
_4 = 5589562046656478985_i64 as i128;
_9 = _8 as isize;
_6.fld1 = [(-47_i8),109_i8,(-78_i8),(-6_i8),86_i8];
_11.fld5 = core::ptr::addr_of_mut!(_12);
_11.fld1.fld0 = [68869425501836102070759875411344384388_u128,316444299546002127719377789144516151758_u128,137184084394755521458128505433796420175_u128];
_11.fld1.fld0 = [282453637725855970917297907039351064460_u128,34623977361811221560961668342828879120_u128,84989023101229772346760066426479474471_u128];
_11.fld4 = -(-30437_i16);
(*_3) = core::ptr::addr_of!(_2);
RET = _11.fld1.fld0;
_15 = _10 < _10;
_11.fld5 = core::ptr::addr_of_mut!(_12);
_11.fld4 = 1510_i16;
Goto(bb5)
}
bb5 = {
_6.fld0 = [4057379112_u32,4025856099_u32];
_11.fld3.2 = [_11.fld4,_11.fld4,_11.fld4,_11.fld4];
Goto(bb6)
}
bb6 = {
Goto(bb7)
}
bb7 = {
_17.1 = _7 as u16;
_17.0 = 6207217556314585040_i64 as f32;
_11.fld0 = [_15,_15,_15,_15,_15,_15,_15];
_10 = _9;
_1 = (*_5) as i32;
_7 = !7_usize;
_14.1 = _11.fld3.1;
(*_3) = core::ptr::addr_of!(_4);
_4 = _2 * _2;
_9 = -_10;
_14.0 = core::ptr::addr_of!(_17.1);
(*_5) = _2;
_17.1 = (-66_i8) as u16;
_5 = core::ptr::addr_of!(_2);
_19.fld3 = core::ptr::addr_of!(_17.1);
_19.fld1.1 = core::ptr::addr_of!(_11.fld4);
_19.fld1.0 = core::ptr::addr_of!(_17.1);
_5 = core::ptr::addr_of!(_4);
_10 = _9;
(*_3) = core::ptr::addr_of!((*_5));
_1 = 359800507_i32 + 1520517147_i32;
_13 = [_15,_15,_15,_15,_15,_15];
_18 = [_4,(*_5),_2,(*_5),(*_5),(*_5),_2];
RET = [66488311952452474387879102026321404049_u128,330236252180289427721851586712239650180_u128,262555883172272192476079383659227526381_u128];
_16 = -_10;
Goto(bb8)
}
bb8 = {
_14 = (_19.fld1.0, _11.fld3.1, _11.fld3.2);
_11.fld3.1 = _14.1;
_8 = '\u{cf24c}';
_9 = -_16;
_6.fld1 = [125_i8,(-53_i8),77_i8,(-55_i8),(-128_i8)];
_14 = (_19.fld3, _11.fld3.1, _11.fld3.2);
_11.fld5 = core::ptr::addr_of_mut!(_12);
_22.fld0 = _11.fld1.fld0;
_11.fld1.fld0 = _22.fld0;
_12 = _13;
_19.fld0 = (-92_i8) as f64;
_16 = !_9;
_15 = _7 < _7;
_4 = _2;
_19.fld1.1 = _14.1;
(*_5) = _2 + _2;
(*_5) = !_2;
Goto(bb9)
}
bb9 = {
(*_3) = core::ptr::addr_of!((*_5));
RET = [16342447189200565784122225636937572959_u128,44822826081425050647189906050408324541_u128,81787480945805432718435957573419037305_u128];
_11.fld1 = Adt55 { fld0: _22.fld0 };
_20.0 = [_8,_8,_8,_8];
_25.fld5.0 = [121465156727718020764887680140927977822_u128,236758088805422849017957033605642426246_u128,319914755173034496094977903664224865440_u128];
_25.fld2 = [(-120_i8),(-107_i8),100_i8,121_i8,(-61_i8)];
_9 = _10;
_25.fld0 = _8 as i128;
_11.fld3 = (_19.fld3, _19.fld1.1, _14.2);
_6.fld0 = [406704445_u32,2698962743_u32];
_20.1 = [_11.fld4,_11.fld4,_11.fld4,_11.fld4];
(*_5) = 15839668116608111223_u64 as i128;
_25.fld4 = 2865287035_u32 as i16;
_19.fld1 = _11.fld3;
(*_5) = 1511581347_u32 as i128;
_25.fld5.0 = [246714947124420723683553062468193912629_u128,38544722652643783348636565914281592314_u128,197674727059001639857397593064927924526_u128];
(*_5) = _2 | _25.fld0;
_10 = 11795912945725288881869659937740273652_u128 as isize;
_25.fld5.0 = _11.fld1.fld0;
Goto(bb10)
}
bb10 = {
_25.fld0 = (*_5) - _2;
_6.fld0 = [897585450_u32,446283114_u32];
_25.fld1 = core::ptr::addr_of!(_1);
_20.3 = _17.0;
_25.fld5.0 = [282650715431115559832968657507133182085_u128,45655843778433330636128468564086381029_u128,306869768941076957409311747679902699423_u128];
_11.fld1.fld0 = [67862066858829417743370926557937909743_u128,285483984467458494582248093315225595694_u128,171246976975327214062602081468437384355_u128];
_8 = '\u{10a434}';
_13 = _12;
_3 = core::ptr::addr_of_mut!((*_3));
_16 = -_9;
_11.fld0 = [_15,_15,_15,_15,_15,_15,_15];
_19.fld0 = _25.fld4 as f64;
_24 = _11.fld0;
Goto(bb11)
}
bb11 = {
_25.fld2 = _6.fld1;
_17.0 = _20.3;
_32 = [_17.1,_17.1,_17.1,_17.1,_17.1,_17.1,_17.1,_17.1];
Goto(bb12)
}
bb12 = {
_10 = _9;
_20.3 = 97508872563975908596099409190926294460_u128 as f32;
_19.fld0 = 55_u8 as f64;
Goto(bb13)
}
bb13 = {
_28 = 7181397646615442246_i64 as f64;
Goto(bb14)
}
bb14 = {
_30.1 = _14.2;
_35 = _16 * _9;
_22 = Adt55 { fld0: _25.fld5.0 };
_11.fld1.fld0 = [289427540123247011604722719669745284741_u128,170895718329791291811203463034530825040_u128,15590986461768002927888333037106891340_u128];
_27 = !1787214837_u32;
_28 = _19.fld0;
_1 = _20.3 as i32;
_30.2 = 285261670267581348544852525604675019282_u128;
_24 = _11.fld0;
_19.fld1.0 = core::ptr::addr_of!(_17.1);
_20.3 = -_17.0;
_1 = _27 as i32;
_14.2 = [_25.fld4,_11.fld4,_11.fld4,_11.fld4];
_31.1 = [_25.fld4,_25.fld4,_25.fld4,_25.fld4];
_25.fld2 = _6.fld1;
_37.fld1 = [_27,_27];
_12 = _13;
_8 = '\u{1bf2d}';
_3 = core::ptr::addr_of_mut!(_5);
_30.1 = [_25.fld4,_11.fld4,_25.fld4,_25.fld4];
Goto(bb15)
}
bb15 = {
Call(_40, bb16, dump_var(5_usize, 4_usize, Move(_4), 1_usize, Move(_1), 8_usize, Move(_8), 7_usize, Move(_7)))
}
bb16 = {
Call(_40, bb17, dump_var(5_usize, 9_usize, Move(_9), 13_usize, Move(_13), 18_usize, Move(_18), 24_usize, Move(_24)))
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn6(mut _1: *const i128,mut _2: *const i128,mut _3: *mut *const i128,mut _4: *const i128) -> i128 {
mir! {
type RET = i128;
let _5: i64;
let _6: [u128; 5];
let _7: u8;
let _8: u16;
let _9: f32;
let _10: *mut [u16; 8];
let _11: isize;
let _12: [u128; 3];
let _13: u8;
let _14: bool;
let _15: char;
let _16: Adt50;
let _17: isize;
let _18: [u128; 3];
let _19: f64;
let _20: u8;
let _21: Adt51;
let _22: f64;
let _23: f64;
let _24: isize;
let _25: i32;
let _26: i8;
let _27: isize;
let _28: f64;
let _29: usize;
let _30: i128;
let _31: Adt64;
let _32: *const [bool; 7];
let _33: ();
let _34: ();
{
(*_3) = _4;
_1 = (*_3);
RET = 62496223908440834425684403678764244245_i128;
Call(RET, bb1, fn7(_1, _2, _1, _3, _1, _1, (*_3), (*_3), (*_3), (*_3), (*_3), (*_3), (*_3)))
}
bb1 = {
RET = 2428660354_u32 as i128;
_5 = 26809_u16 as i64;
(*_3) = _4;
(*_3) = _1;
_7 = !127_u8;
(*_3) = _2;
_6 = [190328393096719847386573762537182378760_u128,210792403905591788258195139138378101351_u128,157661146069738891267909496089163391312_u128,199228279978944541488996085356695342114_u128,22972413751384257568344971444145723197_u128];
_1 = (*_3);
RET = !(-44872210325716867153452983906642107488_i128);
RET = _5 as i128;
(*_3) = _2;
(*_3) = _1;
_9 = _7 as f32;
_11 = 19_isize & (-9223372036854775808_isize);
_3 = core::ptr::addr_of_mut!((*_3));
RET = 61198152789342558786862829183147498289_i128 - (-16732177670287675119708354878549767554_i128);
_8 = 8097_u16 << _11;
RET = 11459337532001341121161247746680336607_i128;
(*_3) = _4;
(*_3) = _1;
(*_3) = _1;
_1 = _2;
Goto(bb2)
}
bb2 = {
_13 = _7;
RET = 127458496745822675147077630565351282355_i128;
_11 = -87_isize;
_8 = '\u{7f3bd}' as u16;
_11 = 9223372036854775807_isize;
RET = !(-47399299647099918906866891966816724839_i128);
_1 = _4;
_14 = !false;
_7 = _13 - _13;
_5 = 7313208506766201261_i64;
_5 = -(-2003640647799650531_i64);
_4 = _2;
_8 = 40088_u16;
Call(RET, bb3, fn18((*_3), _11, _9, _4, _5))
}
bb3 = {
_9 = _7 as f32;
_17 = _11;
_15 = '\u{a41c1}';
_12 = [323862018116508615456806928487741717323_u128,315653404147897293545834409432574277411_u128,334394934555142755718031467146562165817_u128];
_16.fld1 = [3825516917_u32,1960031638_u32];
_18 = [184720274320883800948633024281529864323_u128,28210710658593194621011316578846553664_u128,175342659220430596101606075401338054624_u128];
RET = !4511522999623952375342975955821465125_i128;
_14 = !false;
(*_3) = _2;
_2 = _4;
Call(_19, bb4, core::intrinsics::transmute(_11))
}
bb4 = {
_13 = _17 as u8;
_14 = _11 < _11;
_16.fld1 = [2083744671_u32,2354318266_u32];
match _11 {
0 => bb1,
1 => bb3,
2 => bb5,
3 => bb6,
4 => bb7,
5 => bb8,
6 => bb9,
9223372036854775807 => bb11,
_ => bb10
}
}
bb5 = {
_9 = _7 as f32;
_17 = _11;
_15 = '\u{a41c1}';
_12 = [323862018116508615456806928487741717323_u128,315653404147897293545834409432574277411_u128,334394934555142755718031467146562165817_u128];
_16.fld1 = [3825516917_u32,1960031638_u32];
_18 = [184720274320883800948633024281529864323_u128,28210710658593194621011316578846553664_u128,175342659220430596101606075401338054624_u128];
RET = !4511522999623952375342975955821465125_i128;
_14 = !false;
(*_3) = _2;
_2 = _4;
Call(_19, bb4, core::intrinsics::transmute(_11))
}
bb6 = {
_13 = _7;
RET = 127458496745822675147077630565351282355_i128;
_11 = -87_isize;
_8 = '\u{7f3bd}' as u16;
_11 = 9223372036854775807_isize;
RET = !(-47399299647099918906866891966816724839_i128);
_1 = _4;
_14 = !false;
_7 = _13 - _13;
_5 = 7313208506766201261_i64;
_5 = -(-2003640647799650531_i64);
_4 = _2;
_8 = 40088_u16;
Call(RET, bb3, fn18((*_3), _11, _9, _4, _5))
}
bb7 = {
RET = 2428660354_u32 as i128;
_5 = 26809_u16 as i64;
(*_3) = _4;
(*_3) = _1;
_7 = !127_u8;
(*_3) = _2;
_6 = [190328393096719847386573762537182378760_u128,210792403905591788258195139138378101351_u128,157661146069738891267909496089163391312_u128,199228279978944541488996085356695342114_u128,22972413751384257568344971444145723197_u128];
_1 = (*_3);
RET = !(-44872210325716867153452983906642107488_i128);
RET = _5 as i128;
(*_3) = _2;
(*_3) = _1;
_9 = _7 as f32;
_11 = 19_isize & (-9223372036854775808_isize);
_3 = core::ptr::addr_of_mut!((*_3));
RET = 61198152789342558786862829183147498289_i128 - (-16732177670287675119708354878549767554_i128);
_8 = 8097_u16 << _11;
RET = 11459337532001341121161247746680336607_i128;
(*_3) = _4;
(*_3) = _1;
(*_3) = _1;
_1 = _2;
Goto(bb2)
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
_6 = [296824498954380411638389241215110359883_u128,137503325706310415095407256052269470138_u128,333506808162899603169134541659316572710_u128,233720477936907888437745204159399429726_u128,303988511386036235255957123166444812359_u128];
_7 = _13 + _13;
_2 = _1;
_9 = 103987668993130551135057538318057263563_u128 as f32;
_22 = _19;
_21.fld0 = 205977979891243545206199627548236768080_u128 / 181236319874885297159250710626320943979_u128;
_2 = (*_3);
_16.fld0 = [_14,_14,_14,_14,_14,_14,_14];
_22 = _8 as f64;
_16.fld0 = [_14,_14,_14,_14,_14,_14,_14];
(*_3) = _1;
_21.fld0 = _8 as u128;
_5 = -(-229664212986464377_i64);
_11 = _17;
_12 = [_21.fld0,_21.fld0,_21.fld0];
_3 = core::ptr::addr_of_mut!(_4);
_16.fld0 = [_14,_14,_14,_14,_14,_14,_14];
_16.fld1 = [644129658_u32,826858945_u32];
Goto(bb12)
}
bb12 = {
_9 = 725_i16 as f32;
_16.fld0 = [_14,_14,_14,_14,_14,_14,_14];
_7 = _13 - _13;
_9 = _17 as f32;
_11 = -_17;
_19 = 4037365860558763118_u64 as f64;
_17 = _21.fld0 as isize;
RET = 47224985347910884477490480872603678884_i128;
_19 = 120_i8 as f64;
_20 = _13 % 181_u8;
_6 = [_21.fld0,_21.fld0,_21.fld0,_21.fld0,_21.fld0];
_2 = _4;
_11 = _17;
RET = (-127634146897991039132679301972601956129_i128);
_20 = !_7;
_22 = _19 / 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004588162719645156_f64;
_6 = [_21.fld0,_21.fld0,_21.fld0,_21.fld0,_21.fld0];
_25 = 13862742937082139364_u64 as i32;
_27 = _11 ^ _17;
_28 = _21.fld0 as f64;
_2 = (*_3);
_5 = !(-3844261079241092494_i64);
Call(_22, bb13, core::intrinsics::fmaf64(_28, _28, _19))
}
bb13 = {
(*_3) = _1;
_24 = _11;
_28 = _19;
Goto(bb14)
}
bb14 = {
_21 = Adt51 { fld0: 305959810357587484859048320070414282256_u128 };
_6 = [_21.fld0,_21.fld0,_21.fld0,_21.fld0,_21.fld0];
_9 = _27 as f32;
_3 = core::ptr::addr_of_mut!(_4);
_18 = _12;
_23 = -_22;
_3 = core::ptr::addr_of_mut!((*_3));
_4 = _1;
_15 = '\u{2349b}';
_23 = _28 + _22;
_22 = _23 - _19;
_28 = _23 + _22;
_21.fld0 = (-10_i8) as u128;
_20 = !_13;
_28 = _19 + _23;
_15 = '\u{fecc2}';
(*_3) = _1;
_22 = _28;
_31.fld1 = [(-45_i8),(-103_i8),(-22_i8),30_i8,(-56_i8)];
_6 = [_21.fld0,_21.fld0,_21.fld0,_21.fld0,_21.fld0];
Goto(bb15)
}
bb15 = {
Call(_33, bb16, dump_var(6_usize, 8_usize, Move(_8), 17_usize, Move(_17), 6_usize, Move(_6), 13_usize, Move(_13)))
}
bb16 = {
Call(_33, bb17, dump_var(6_usize, 12_usize, Move(_12), 20_usize, Move(_20), 27_usize, Move(_27), 34_usize, _34))
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn7(mut _1: *const i128,mut _2: *const i128,mut _3: *const i128,mut _4: *mut *const i128,mut _5: *const i128,mut _6: *const i128,mut _7: *const i128,mut _8: *const i128,mut _9: *const i128,mut _10: *const i128,mut _11: *const i128,mut _12: *const i128,mut _13: *const i128) -> i128 {
mir! {
type RET = i128;
let _14: (f32, u16);
let _15: i32;
let _16: isize;
let _17: isize;
let _18: [u16; 8];
let _19: Adt66;
let _20: bool;
let _21: [bool; 6];
let _22: f32;
let _23: Adt52;
let _24: f32;
let _25: [bool; 6];
let _26: (u8, f64, *mut *const i128, *mut [bool; 6], [i16; 4]);
let _27: Adt55;
let _28: [bool; 7];
let _29: [u32; 2];
let _30: [u16; 8];
let _31: char;
let _32: *mut *const [bool; 7];
let _33: Adt52;
let _34: *const *const [bool; 7];
let _35: *mut [bool; 6];
let _36: usize;
let _37: [char; 4];
let _38: ();
let _39: ();
{
_5 = _6;
_4 = core::ptr::addr_of_mut!(_13);
(*_4) = _8;
(*_4) = _3;
_14.0 = 9223372036854775807_isize as f32;
(*_4) = _5;
_2 = _10;
Goto(bb1)
}
bb1 = {
RET = -(-145414312396498350820383160699976041716_i128);
_11 = _9;
_13 = _1;
_19.fld4 = _12;
_19.fld6.0 = [117807162375365903074092650915560427130_u128,165245053105534229173290907635293569942_u128,201724516555077781691336836225639365057_u128];
_19.fld6.0 = [233056639355019029548465248891724637075_u128,88916917172657955149816071619728135050_u128,158876788421175735357171292740820008470_u128];
_19.fld2.fld1 = [2418907735_u32,3176233834_u32];
_15 = !1696209696_i32;
(*_4) = _8;
_12 = _5;
_19.fld2.fld0 = [true,false,false,true,true,false,false];
_19.fld0 = !true;
_19.fld3 = [29092272808746913497649767434756145994_i128,(-138120630593004963109958877345670090873_i128),67402150381850663378040839144105309770_i128,(-74590024990880563820465114770519808147_i128),69652982932101466904362199700906660270_i128,105649329205684914408363180652422737989_i128,(-135791434671727904136141950578589467654_i128)];
_13 = _12;
_21 = [_19.fld0,_19.fld0,_19.fld0,_19.fld0,_19.fld0,_19.fld0];
_20 = !_19.fld0;
_20 = !_19.fld0;
_22 = _14.0;
_18 = [37907_u16,24347_u16,53458_u16,20894_u16,55059_u16,1121_u16,33820_u16,15977_u16];
(*_4) = _6;
_19.fld3 = [164226389815918885697579045266860982628_i128,70844787367500207344008571890123114847_i128,140350226657502756413570120669688995175_i128,88838687189615815952938791681311785249_i128,(-122993039242570080110320814903464520684_i128),14010735695175130370023765398210064165_i128,(-128871198564498033041281629957898159657_i128)];
_8 = _6;
_23 = Adt52 { fld0: _19.fld0,fld1: 1029330480947740727_usize,fld2: _18 };
_7 = _6;
_11 = _6;
match _23.fld1 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
1029330480947740727 => bb9,
_ => bb8
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
_14 = (_22, 47012_u16);
_18 = [_14.1,_14.1,_14.1,_14.1,_14.1,_14.1,_14.1,_14.1];
(*_4) = _10;
_19.fld1 = '\u{6834e}';
Call(_10, bb10, fn8(_8, _2, _2, _9, _19.fld0, _1, _14.1, _19.fld4, _14.1))
}
bb10 = {
_2 = _8;
_15 = (-629668490_i32) - (-124809456_i32);
match _23.fld1 {
0 => bb1,
1 => bb2,
2 => bb8,
3 => bb4,
4 => bb9,
1029330480947740727 => bb11,
_ => bb7
}
}
bb11 = {
_8 = (*_4);
_19.fld6.0 = [41072180354321432752152004441434970282_u128,308931276170372895540865077728770871965_u128,189385763491247132597705432742776006889_u128];
(*_4) = _5;
_19.fld0 = !_23.fld0;
_24 = _14.0;
_25 = _21;
(*_4) = _19.fld4;
_4 = core::ptr::addr_of_mut!(_12);
_10 = _11;
RET = 21363050212982941900368241764472832596_i128 ^ (-102158572601622059056105738767071228530_i128);
_14.0 = _22 * _24;
_19.fld2.fld1 = [917868358_u32,3073236842_u32];
_19.fld6.0 = [295391679633687634955192628622503969991_u128,47081670062771454733430603285626594794_u128,33741506910789410082661986798647726601_u128];
Goto(bb12)
}
bb12 = {
_19.fld2.fld0 = [_23.fld0,_23.fld0,_19.fld0,_23.fld0,_20,_20,_20];
_19.fld6.0 = [220233696212024464060826102123537241966_u128,86780996295187559050466962586935255085_u128,276873893921223241638776308260477651331_u128];
_10 = _11;
RET = (-5050724279994875237_i64) as i128;
_26.3 = core::ptr::addr_of_mut!(_21);
_24 = -_22;
_8 = _19.fld4;
_1 = _2;
_23.fld1 = 5_usize;
_14.0 = _24 + _22;
_5 = _13;
Goto(bb13)
}
bb13 = {
_9 = _19.fld4;
_14 = (_24, 13971_u16);
_12 = _3;
_19.fld2.fld0 = [_19.fld0,_20,_19.fld0,_23.fld0,_20,_19.fld0,_20];
_26.4 = [(-25678_i16),2172_i16,26849_i16,(-7590_i16)];
_25 = [_23.fld0,_19.fld0,_23.fld0,_19.fld0,_20,_20];
_14.1 = !44670_u16;
_12 = _10;
_30 = [_14.1,_14.1,_14.1,_14.1,_14.1,_14.1,_14.1,_14.1];
_26.1 = 229667498059363213679439344933972808098_u128 as f64;
_14.1 = 63210_u16 ^ 37024_u16;
_23.fld0 = !_19.fld0;
_19.fld0 = _20;
RET = 2361524612_u32 as i128;
_28 = _19.fld2.fld0;
RET = !(-158099911204315199944592765778027662841_i128);
_26.3 = core::ptr::addr_of_mut!(_25);
_26.2 = core::ptr::addr_of_mut!(_12);
_8 = _11;
_16 = 99_isize;
_31 = _19.fld1;
_21 = [_23.fld0,_23.fld0,_19.fld0,_19.fld0,_23.fld0,_19.fld0];
Goto(bb14)
}
bb14 = {
_27.fld0 = _19.fld6.0;
_28 = [_20,_20,_19.fld0,_23.fld0,_19.fld0,_19.fld0,_20];
_33.fld0 = _20;
_16 = -(-9223372036854775808_isize);
_33.fld0 = !_23.fld0;
_20 = _23.fld0;
_19.fld1 = _31;
_19.fld6.0 = [43587393875384989141462131159804327855_u128,175101836614038926353738612909130924996_u128,248123850146506154349682357781964064886_u128];
(*_4) = _11;
_19.fld1 = _31;
_35 = core::ptr::addr_of_mut!(_21);
_6 = _9;
_24 = _14.0 / 0.000000000000000000000000000000000000009200054109111939_f32;
_27.fld0 = [29082837311936646229942911806780791006_u128,303255970492340829692185247689923929577_u128,8514154735716753246888884103952433374_u128];
_36 = !_23.fld1;
_20 = !_19.fld0;
_31 = _19.fld1;
(*_4) = _6;
_19.fld4 = _12;
_16 = (-54_isize);
Goto(bb15)
}
bb15 = {
Call(_38, bb16, dump_var(7_usize, 25_usize, Move(_25), 30_usize, Move(_30), 18_usize, Move(_18), 15_usize, Move(_15)))
}
bb16 = {
Call(_38, bb17, dump_var(7_usize, 36_usize, Move(_36), 39_usize, _39, 39_usize, _39, 39_usize, _39))
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn8(mut _1: *const i128,mut _2: *const i128,mut _3: *const i128,mut _4: *const i128,mut _5: bool,mut _6: *const i128,mut _7: u16,mut _8: *const i128,mut _9: u16) -> *const i128 {
mir! {
type RET = *const i128;
let _10: u32;
let _11: f64;
let _12: Adt54;
let _13: isize;
let _14: [u128; 3];
let _15: *mut isize;
let _16: f64;
let _17: Adt53;
let _18: ([char; 4], [i16; 4], u128, f32);
let _19: Adt64;
let _20: f32;
let _21: Adt52;
let _22: bool;
let _23: bool;
let _24: [i64; 4];
let _25: char;
let _26: (f32, u16);
let _27: Adt66;
let _28: u64;
let _29: [i64; 4];
let _30: f32;
let _31: ();
let _32: ();
{
_4 = _8;
RET = _3;
_11 = (-63270305_i32) as f64;
_5 = _9 >= _7;
_9 = _7 << _7;
RET = _1;
_1 = _8;
_3 = _8;
_5 = false;
_9 = _7;
RET = _3;
_3 = _4;
_3 = _6;
_11 = 22744087769699461789609342039332153681_u128 as f64;
_2 = _4;
_6 = _4;
_12.fld2 = core::ptr::addr_of_mut!(_5);
_13 = 115_isize | (-9223372036854775808_isize);
_9 = _7;
_12.fld0 = [160252815257003361_i64,(-6944450816044093187_i64),7407964177576418543_i64,5858703514066858809_i64];
_5 = false ^ true;
RET = _1;
_2 = _6;
_2 = _6;
_10 = 2893549492_u32;
Goto(bb1)
}
bb1 = {
RET = _2;
_8 = _1;
_3 = _6;
_12.fld1 = '\u{32e9d}';
_14 = [239568944486130358513288824722715049864_u128,211187355300182887498180537046082651906_u128,225838650775707911601549516949828933083_u128];
_12.fld2 = core::ptr::addr_of_mut!(_5);
_1 = _3;
RET = _1;
RET = _4;
_8 = _4;
_12.fld1 = '\u{10caa0}';
_4 = _1;
_1 = _4;
Goto(bb2)
}
bb2 = {
_12.fld0 = [(-1292290310165113012_i64),6356105084426025890_i64,2683610482922462403_i64,(-6070354868997573876_i64)];
_13 = _5 as isize;
match _7 {
0 => bb1,
1 => bb3,
47012 => bb5,
_ => bb4
}
}
bb3 = {
RET = _2;
_8 = _1;
_3 = _6;
_12.fld1 = '\u{32e9d}';
_14 = [239568944486130358513288824722715049864_u128,211187355300182887498180537046082651906_u128,225838650775707911601549516949828933083_u128];
_12.fld2 = core::ptr::addr_of_mut!(_5);
_1 = _3;
RET = _1;
RET = _4;
_8 = _4;
_12.fld1 = '\u{10caa0}';
_4 = _1;
_1 = _4;
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
_12.fld2 = core::ptr::addr_of_mut!(_5);
_10 = (-99897386841914848325703937780730080233_i128) as u32;
_3 = _2;
_1 = _4;
_14 = [282940780657381759965037437408019295811_u128,148058390760651380487192383665943099236_u128,184349581200158371855759519624201563196_u128];
_14 = [302962099169012625266086755004123224656_u128,283222984028293548564804439773625839007_u128,158853796814463828751295193687511653950_u128];
_2 = _1;
_15 = core::ptr::addr_of_mut!(_13);
_7 = _9;
_9 = 11910159959128515492_u64 as u16;
_12.fld2 = core::ptr::addr_of_mut!(_5);
_3 = _8;
_6 = _4;
RET = _8;
(*_15) = !(-9223372036854775808_isize);
_17.fld0 = 68426984485530461658550404990740578854_i128;
_18.0 = [_12.fld1,_12.fld1,_12.fld1,_12.fld1];
_18.2 = 293498700210168209231477198196029817114_u128 >> _7;
(*_15) = 27_isize | (-9223372036854775808_isize);
_16 = _7 as f64;
_7 = _9;
match _17.fld0 {
0 => bb4,
1 => bb6,
68426984485530461658550404990740578854 => bb8,
_ => bb7
}
}
bb6 = {
Return()
}
bb7 = {
RET = _2;
_8 = _1;
_3 = _6;
_12.fld1 = '\u{32e9d}';
_14 = [239568944486130358513288824722715049864_u128,211187355300182887498180537046082651906_u128,225838650775707911601549516949828933083_u128];
_12.fld2 = core::ptr::addr_of_mut!(_5);
_1 = _3;
RET = _1;
RET = _4;
_8 = _4;
_12.fld1 = '\u{10caa0}';
_4 = _1;
_1 = _4;
Goto(bb2)
}
bb8 = {
_12.fld2 = core::ptr::addr_of_mut!(_5);
_7 = !_9;
_12.fld0 = [961540824739556515_i64,(-7164118483808764672_i64),231755755861331278_i64,(-7920481805502911931_i64)];
_15 = core::ptr::addr_of_mut!((*_15));
_17.fld0 = 137009157348268632422525996758903045638_i128 * 131673708049552631602576061451691703220_i128;
_19.fld1 = [100_i8,54_i8,(-81_i8),(-11_i8),(-106_i8)];
_13 = 94_isize & 9223372036854775807_isize;
RET = core::ptr::addr_of!(_17.fld0);
_12.fld0 = [1574636185606700142_i64,9209523626889640404_i64,4099509251992910034_i64,(-2644384956809876403_i64)];
_17.fld5.1 = core::ptr::addr_of_mut!(_10);
_21.fld1 = _10 as usize;
(*RET) = _9 as i128;
_3 = core::ptr::addr_of!((*RET));
_11 = _10 as f64;
_2 = _8;
_17.fld2 = _19.fld1;
_12.fld2 = core::ptr::addr_of_mut!(_21.fld0);
Call(_17.fld5.0, bb9, fn9(_13, _7, _13, _4, _15))
}
bb9 = {
_18.2 = !114276810902612050573935580136972352513_u128;
_20 = 72_u8 as f32;
_17.fld4 = !(-21109_i16);
_21.fld2 = [_9,_7,_7,_7,_7,_7,_7,_7];
(*RET) = (-151008713721780308011876449132093008419_i128);
_2 = core::ptr::addr_of!((*_3));
_5 = !false;
_11 = -_16;
_12.fld2 = core::ptr::addr_of_mut!(_23);
_17.fld5.0 = [_18.2,_18.2,_18.2];
_14 = [_18.2,_18.2,_18.2];
_10 = 162052997_u32;
(*_3) = 91667306829930047684169504880697361980_i128 ^ 109760835787652319438213188974280858933_i128;
_17.fld0 = 55915695980605395185279045125917967301_i128 ^ 153440125620942748069448106890141154600_i128;
_17.fld5.1 = core::ptr::addr_of_mut!(_10);
_4 = core::ptr::addr_of!((*RET));
(*_15) = (-9223372036854775808_isize) >> _21.fld1;
(*_3) = 63047792246292696749659744227727709033_i128;
match (*RET) {
0 => bb6,
1 => bb2,
2 => bb10,
3 => bb11,
63047792246292696749659744227727709033 => bb13,
_ => bb12
}
}
bb10 = {
_12.fld2 = core::ptr::addr_of_mut!(_5);
_7 = !_9;
_12.fld0 = [961540824739556515_i64,(-7164118483808764672_i64),231755755861331278_i64,(-7920481805502911931_i64)];
_15 = core::ptr::addr_of_mut!((*_15));
_17.fld0 = 137009157348268632422525996758903045638_i128 * 131673708049552631602576061451691703220_i128;
_19.fld1 = [100_i8,54_i8,(-81_i8),(-11_i8),(-106_i8)];
_13 = 94_isize & 9223372036854775807_isize;
RET = core::ptr::addr_of!(_17.fld0);
_12.fld0 = [1574636185606700142_i64,9209523626889640404_i64,4099509251992910034_i64,(-2644384956809876403_i64)];
_17.fld5.1 = core::ptr::addr_of_mut!(_10);
_21.fld1 = _10 as usize;
(*RET) = _9 as i128;
_3 = core::ptr::addr_of!((*RET));
_11 = _10 as f64;
_2 = _8;
_17.fld2 = _19.fld1;
_12.fld2 = core::ptr::addr_of_mut!(_21.fld0);
Call(_17.fld5.0, bb9, fn9(_13, _7, _13, _4, _15))
}
bb11 = {
_12.fld0 = [(-1292290310165113012_i64),6356105084426025890_i64,2683610482922462403_i64,(-6070354868997573876_i64)];
_13 = _5 as isize;
match _7 {
0 => bb1,
1 => bb3,
47012 => bb5,
_ => bb4
}
}
bb12 = {
_12.fld2 = core::ptr::addr_of_mut!(_5);
_10 = (-99897386841914848325703937780730080233_i128) as u32;
_3 = _2;
_1 = _4;
_14 = [282940780657381759965037437408019295811_u128,148058390760651380487192383665943099236_u128,184349581200158371855759519624201563196_u128];
_14 = [302962099169012625266086755004123224656_u128,283222984028293548564804439773625839007_u128,158853796814463828751295193687511653950_u128];
_2 = _1;
_15 = core::ptr::addr_of_mut!(_13);
_7 = _9;
_9 = 11910159959128515492_u64 as u16;
_12.fld2 = core::ptr::addr_of_mut!(_5);
_3 = _8;
_6 = _4;
RET = _8;
(*_15) = !(-9223372036854775808_isize);
_17.fld0 = 68426984485530461658550404990740578854_i128;
_18.0 = [_12.fld1,_12.fld1,_12.fld1,_12.fld1];
_18.2 = 293498700210168209231477198196029817114_u128 >> _7;
(*_15) = 27_isize | (-9223372036854775808_isize);
_16 = _7 as f64;
_7 = _9;
match _17.fld0 {
0 => bb4,
1 => bb6,
68426984485530461658550404990740578854 => bb8,
_ => bb7
}
}
bb13 = {
_7 = _9 - _9;
(*_3) = 11836237489600157785064859216484204019_i128;
match (*_3) {
0 => bb6,
1 => bb12,
2 => bb11,
3 => bb4,
4 => bb14,
5 => bb15,
11836237489600157785064859216484204019 => bb17,
_ => bb16
}
}
bb14 = {
_12.fld0 = [(-1292290310165113012_i64),6356105084426025890_i64,2683610482922462403_i64,(-6070354868997573876_i64)];
_13 = _5 as isize;
match _7 {
0 => bb1,
1 => bb3,
47012 => bb5,
_ => bb4
}
}
bb15 = {
RET = _2;
_8 = _1;
_3 = _6;
_12.fld1 = '\u{32e9d}';
_14 = [239568944486130358513288824722715049864_u128,211187355300182887498180537046082651906_u128,225838650775707911601549516949828933083_u128];
_12.fld2 = core::ptr::addr_of_mut!(_5);
_1 = _3;
RET = _1;
RET = _4;
_8 = _4;
_12.fld1 = '\u{10caa0}';
_4 = _1;
_1 = _4;
Goto(bb2)
}
bb16 = {
Return()
}
bb17 = {
_21.fld2 = [_9,_9,_7,_7,_9,_7,_7,_9];
(*_2) = 167140193869946652837254697450770176639_i128 & (-96776208717892022004484283067838075970_i128);
_27.fld0 = _5;
_19.fld1 = [(-125_i8),(-115_i8),(-37_i8),(-16_i8),91_i8];
_17.fld5.0 = [_18.2,_18.2,_18.2];
_15 = core::ptr::addr_of_mut!(_13);
_27.fld6.1 = core::ptr::addr_of_mut!(_10);
_18.0 = [_12.fld1,_12.fld1,_12.fld1,_12.fld1];
_21.fld1 = 2_usize;
_27.fld6 = (_17.fld5.0, _17.fld5.1);
_12.fld1 = '\u{ce565}';
_21.fld2 = [_7,_9,_9,_9,_7,_9,_7,_7];
Goto(bb18)
}
bb18 = {
Call(_31, bb19, dump_var(8_usize, 10_usize, Move(_10), 9_usize, Move(_9), 7_usize, Move(_7), 32_usize, _32))
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn9(mut _1: isize,mut _2: u16,mut _3: isize,mut _4: *const i128,mut _5: *mut isize) -> [u128; 3] {
mir! {
type RET = [u128; 3];
let _6: f64;
let _7: [u128; 3];
let _8: Adt64;
let _9: *const [bool; 7];
let _10: [bool; 6];
let _11: [i16; 4];
let _12: Adt51;
let _13: u8;
let _14: i32;
let _15: Adt52;
let _16: isize;
let _17: [i64; 4];
let _18: (*const u16, *const i16, [i16; 4]);
let _19: [i64; 4];
let _20: f64;
let _21: Adt56;
let _22: *mut isize;
let _23: Adt52;
let _24: [i16; 4];
let _25: [char; 4];
let _26: [u16; 8];
let _27: isize;
let _28: bool;
let _29: f32;
let _30: i128;
let _31: u32;
let _32: isize;
let _33: Adt64;
let _34: ();
let _35: ();
{
_1 = (*_5);
(*_5) = _1 << _1;
RET = [4485150449217350317696529250611017724_u128,26722985259497283386488305647134928436_u128,247243046355628880175004654682114102923_u128];
RET = [249068261761558702072843311249803846509_u128,293788774707313955416976751364492500397_u128,206645897405540545881126414824340766673_u128];
_5 = core::ptr::addr_of_mut!(_1);
_5 = core::ptr::addr_of_mut!((*_5));
_3 = (*_5);
RET = [14122399567691399017053647302394835027_u128,175941234611115559299048333110645227174_u128,287857750731135492134542274585365595285_u128];
_5 = core::ptr::addr_of_mut!(_1);
_5 = core::ptr::addr_of_mut!(_3);
_1 = _3;
RET = [165435250571118279069185088010987044850_u128,211149743506892947099333985395291466179_u128,156849315792364197917972454788194107040_u128];
_8.fld0 = [71631329_u32,1314543144_u32];
_7 = [179833309844021317488795424954235769825_u128,102040594875303340164705725703286404504_u128,200365876206752544192932919609362228583_u128];
_5 = core::ptr::addr_of_mut!(_3);
_3 = -_1;
_7 = [77153541824424214470775784674454354020_u128,304235558593672631556152187029524335556_u128,273961919580084783305803320907111092514_u128];
(*_5) = -_1;
_1 = 224_u8 as isize;
_7 = [98914428886029287396954020243310731891_u128,27473163768223335479369460688293725912_u128,78038125372505814112710153216457606642_u128];
_2 = 5401347614813557720_i64 as u16;
RET = [179366413932151570175675672832612719218_u128,301333982779291174310414527792969071833_u128,76607799242539354039936816979899138320_u128];
Goto(bb1)
}
bb1 = {
_6 = 4699054272425147673_u64 as f64;
_10 = [true,true,true,true,false,false];
(*_5) = _1 >> _1;
(*_5) = !_1;
(*_5) = _1 & _1;
_7 = [180321356968877357580035429312889073055_u128,9113452510323188019616110856314767910_u128,275415855144853815995976749161738140913_u128];
_3 = '\u{101734}' as isize;
_7 = [173236285489324998438598975495680178472_u128,310514866288021786895038211259053698513_u128,290987938383212678459467407760782438284_u128];
_8.fld1 = [(-67_i8),106_i8,(-2_i8),2_i8,(-61_i8)];
_8.fld0 = [3563036030_u32,3247238433_u32];
(*_5) = _1;
_2 = 21700_u16 + 24790_u16;
(*_5) = -_1;
_12 = Adt51 { fld0: 67889252201861130213801984437005608820_u128 };
_13 = !230_u8;
_13 = 58_u8 << (*_5);
RET = [_12.fld0,_12.fld0,_12.fld0];
_6 = (-7153917834238102191_i64) as f64;
_1 = !(*_5);
_5 = core::ptr::addr_of_mut!(_1);
_12 = Adt51 { fld0: 180940451709962781308839690353601681292_u128 };
_2 = 21728_u16 << _13;
_14 = !1550506941_i32;
match _12.fld0 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
180940451709962781308839690353601681292 => bb7,
_ => bb6
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
_8.fld0 = [16954223_u32,3060157768_u32];
_8.fld0 = [260122676_u32,2219751338_u32];
_13 = 210_u8;
RET = _7;
_11 = [(-5384_i16),(-10810_i16),3956_i16,18994_i16];
_5 = core::ptr::addr_of_mut!((*_5));
_15.fld0 = (*_5) < _1;
_10 = [_15.fld0,_15.fld0,_15.fld0,_15.fld0,_15.fld0,_15.fld0];
_7 = [_12.fld0,_12.fld0,_12.fld0];
_15.fld1 = 4_usize | 2_usize;
_15.fld2 = [_2,_2,_2,_2,_2,_2,_2,_2];
_15.fld2 = [_2,_2,_2,_2,_2,_2,_2,_2];
_17 = [8002568047876929321_i64,(-6760663568612397140_i64),2191191575606047970_i64,(-2990331289975550336_i64)];
_14 = 1266824077_i32;
Goto(bb8)
}
bb8 = {
_15.fld2 = [_2,_2,_2,_2,_2,_2,_2,_2];
Call(_16, bb9, fn10(_14, _10, _7, _3, _10, _17, _5, _5, _5, _4, _5, _3, _3, _4))
}
bb9 = {
_16 = _13 as isize;
_15.fld0 = false;
_19 = _17;
_2 = _12.fld0 as u16;
_11 = [1116_i16,(-2107_i16),18017_i16,(-31956_i16)];
_11 = [948_i16,487_i16,(-21687_i16),4644_i16];
Call(_21.fld2, bb10, fn15(_8.fld1, _15.fld1, _5, _19, _14, _5, _5, _16))
}
bb10 = {
_21.fld1.2 = [31348_i16,32297_i16,14437_i16,20819_i16];
_15.fld2 = [_2,_2,_2,_2,_2,_2,_2,_2];
_10 = [_15.fld0,_15.fld0,_15.fld0,_15.fld0,_15.fld0,_15.fld0];
_23.fld0 = _2 != _2;
_16 = 8051691071592458998_i64 as isize;
_22 = core::ptr::addr_of_mut!((*_5));
_18.2 = _21.fld1.2;
_5 = core::ptr::addr_of_mut!((*_5));
_11 = [25233_i16,28037_i16,8209_i16,20813_i16];
_23.fld0 = (*_5) < (*_5);
(*_5) = _13 as isize;
(*_22) = _3 - _16;
_25 = ['\u{10eb5f}','\u{be425}','\u{5c250}','\u{ff6d3}'];
_10 = [_23.fld0,_23.fld0,_15.fld0,_23.fld0,_23.fld0,_23.fld0];
_21.fld2 = core::ptr::addr_of!(_9);
_18.2 = [(-6880_i16),8168_i16,31826_i16,10311_i16];
_24 = _21.fld1.2;
(*_22) = _16 + _16;
_8.fld0 = [3388565817_u32,2099444198_u32];
_27 = (*_22);
RET = _7;
_21.fld2 = core::ptr::addr_of!(_9);
_16 = _1;
_20 = _6 * _6;
_21.fld0 = 657187982_u32 as f64;
Call((*_22), bb11, core::intrinsics::bswap(_3))
}
bb11 = {
(*_22) = _20 as isize;
_11 = [(-15862_i16),1893_i16,(-10974_i16),6058_i16];
_17 = _19;
_19 = [3990994600909875228_i64,2021407532281320500_i64,(-3211681240009767131_i64),(-3276015971267805335_i64)];
RET = _7;
_18.2 = [(-19592_i16),27041_i16,(-613_i16),(-23963_i16)];
_1 = !_16;
_13 = 3624447801888916841_u64 as u8;
_21.fld1.0 = core::ptr::addr_of!(_2);
_23.fld1 = _15.fld1;
RET = [_12.fld0,_12.fld0,_12.fld0];
_28 = _23.fld0 ^ _15.fld0;
_6 = _20 * _21.fld0;
_21.fld3 = _21.fld1.0;
_26 = _15.fld2;
_26 = _15.fld2;
_8.fld1 = [(-72_i8),(-96_i8),(-58_i8),(-15_i8),115_i8];
RET = _7;
Goto(bb12)
}
bb12 = {
(*_22) = _3;
_21.fld1.0 = _21.fld3;
_15 = Adt52 { fld0: _28,fld1: _23.fld1,fld2: _26 };
_23 = Adt52 { fld0: _15.fld0,fld1: _15.fld1,fld2: _26 };
_15.fld2 = [_2,_2,_2,_2,_2,_2,_2,_2];
_11 = _21.fld1.2;
_7 = [_12.fld0,_12.fld0,_12.fld0];
_12 = Adt51 { fld0: 270280199342701700102748595079519566529_u128 };
_18.0 = core::ptr::addr_of!(_2);
_14 = (-2088333707_i32);
_12.fld0 = 88682205690753169474298032866708066945_u128 % 200066189620630786824987584407438824834_u128;
RET = [_12.fld0,_12.fld0,_12.fld0];
_21.fld1.0 = _18.0;
_23.fld2 = _26;
_5 = core::ptr::addr_of_mut!(_16);
_23.fld2 = [_2,_2,_2,_2,_2,_2,_2,_2];
_23.fld2 = _26;
(*_22) = -_16;
_23 = Adt52 { fld0: _28,fld1: _15.fld1,fld2: _26 };
(*_22) = _20 as isize;
_20 = _6 / f64::NAN;
(*_5) = '\u{ba1c9}' as isize;
Goto(bb13)
}
bb13 = {
_19 = [(-2331112566060436368_i64),(-2297416994922469931_i64),7410366663521916760_i64,(-2834742816899462714_i64)];
(*_22) = _16 << _3;
_29 = 467514349_u32 as f32;
_17 = [(-8510236447874255188_i64),7283890141571500755_i64,(-5644473268445513229_i64),6994502224039279876_i64];
(*_5) = _1 | _3;
RET = [_12.fld0,_12.fld0,_12.fld0];
(*_22) = (-5915703629396177324_i64) as isize;
_27 = !(*_5);
_20 = _21.fld0;
_5 = core::ptr::addr_of_mut!((*_22));
_21.fld0 = _20 - _6;
_12 = Adt51 { fld0: 269881526384115969525626314963554710081_u128 };
Call(_30, bb14, core::intrinsics::bswap((-15051210036857857415197918815559241843_i128)))
}
bb14 = {
_23 = Adt52 { fld0: _28,fld1: _15.fld1,fld2: _26 };
Goto(bb15)
}
bb15 = {
Call(_34, bb16, dump_var(9_usize, 24_usize, Move(_24), 25_usize, Move(_25), 30_usize, Move(_30), 10_usize, Move(_10)))
}
bb16 = {
Call(_34, bb17, dump_var(9_usize, 1_usize, Move(_1), 16_usize, Move(_16), 19_usize, Move(_19), 17_usize, Move(_17)))
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn10(mut _1: i32,mut _2: [bool; 6],mut _3: [u128; 3],mut _4: isize,mut _5: [bool; 6],mut _6: [i64; 4],mut _7: *mut isize,mut _8: *mut isize,mut _9: *mut isize,mut _10: *const i128,mut _11: *mut isize,mut _12: isize,mut _13: isize,mut _14: *const i128) -> isize {
mir! {
type RET = isize;
let _15: u16;
let _16: [i64; 4];
let _17: Adt50;
let _18: isize;
let _19: f32;
let _20: f64;
let _21: *mut *const [bool; 7];
let _22: i128;
let _23: *const i32;
let _24: ();
let _25: ();
{
_10 = _14;
_1 = !(-1089063435_i32);
_4 = (*_8);
(*_7) = !_13;
(*_8) = _12 & _4;
RET = '\u{fffca}' as isize;
_8 = core::ptr::addr_of_mut!(_4);
_14 = _10;
_4 = false as isize;
_2 = [false,false,true,true,true,true];
_9 = _7;
_12 = (*_11);
RET = -_12;
(*_7) = 27855_i16 as isize;
Goto(bb1)
}
bb1 = {
(*_7) = _13;
_6 = [9189112587156176867_i64,(-4329985986172679440_i64),4959460245295864503_i64,(-8371283490892893080_i64)];
(*_7) = _4;
Goto(bb2)
}
bb2 = {
(*_11) = _13 >> _1;
_7 = core::ptr::addr_of_mut!((*_11));
(*_11) = _12;
_8 = core::ptr::addr_of_mut!((*_8));
(*_11) = -_12;
(*_7) = _12 | _12;
_9 = core::ptr::addr_of_mut!((*_8));
_9 = core::ptr::addr_of_mut!((*_8));
_5 = [true,true,false,false,false,true];
_3 = [216551714847093134631621278403747701344_u128,78149086892845159133483075040313259498_u128,68749200945697079874025532117764392280_u128];
(*_9) = (*_11);
(*_11) = !(*_8);
_16 = [5692754244509102935_i64,4562156341943382625_i64,6297956765813397428_i64,(-5399690548633730605_i64)];
_1 = !(-789610899_i32);
(*_9) = !(*_7);
_12 = (*_11) * (*_11);
_17.fld0 = [true,true,true,true,true,true,true];
_18 = (-67444363413852748969120325943176631116_i128) as isize;
_3 = [224691271230403233671401080060227674270_u128,243449577254627580272447364483901105755_u128,82528346771652009316507382981002199042_u128];
Call(_22, bb3, fn11(_7, (*_8), _9, _7, (*_9), _18, _9, (*_11), _2, (*_8), _11, _9, _11, (*_11), _13, (*_9)))
}
bb3 = {
_7 = core::ptr::addr_of_mut!((*_8));
(*_7) = 42_i8 as isize;
_10 = core::ptr::addr_of!(_22);
_18 = (*_11) + (*_11);
_16 = [8414509307461347550_i64,2499687426496039859_i64,(-5395781623126703302_i64),(-8085414353907218564_i64)];
_20 = 23583_i16 as f64;
(*_11) = 3520931487915726188_usize as isize;
_19 = 61846_u16 as f32;
RET = _18 << (*_7);
_13 = !_18;
(*_10) = 2892123478_u32 as i128;
_1 = 56252502_i32 - 1825257925_i32;
_3 = [141762229944956936744436272470924235011_u128,38459669305556565571518049678034103134_u128,212647087051128044508062301357068768012_u128];
_15 = 197_u8 as u16;
_3 = [159522127660556362030609223703827171735_u128,339121326131231316854645145752242486250_u128,25186361947925375090794064962157820569_u128];
_16 = [(-3681573246893471296_i64),(-7252761764400666521_i64),(-4417270758480594157_i64),8442667140300222679_i64];
_17.fld1 = [2163337157_u32,866476579_u32];
_17.fld1 = [859748577_u32,3353736391_u32];
Goto(bb4)
}
bb4 = {
Call(_24, bb5, dump_var(10_usize, 22_usize, Move(_22), 18_usize, Move(_18), 4_usize, Move(_4), 12_usize, Move(_12)))
}
bb5 = {
Call(_24, bb6, dump_var(10_usize, 16_usize, Move(_16), 5_usize, Move(_5), 25_usize, _25, 25_usize, _25))
}
bb6 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn11(mut _1: *mut isize,mut _2: isize,mut _3: *mut isize,mut _4: *mut isize,mut _5: isize,mut _6: isize,mut _7: *mut isize,mut _8: isize,mut _9: [bool; 6],mut _10: isize,mut _11: *mut isize,mut _12: *mut isize,mut _13: *mut isize,mut _14: isize,mut _15: isize,mut _16: isize) -> i128 {
mir! {
type RET = i128;
let _17: *const *mut bool;
let _18: bool;
let _19: i16;
let _20: usize;
let _21: bool;
let _22: bool;
let _23: ([u128; 3], *mut u32);
let _24: char;
let _25: (f32, u16);
let _26: Adt62;
let _27: f32;
let _28: i128;
let _29: ([u128; 3], *mut u32);
let _30: isize;
let _31: Adt60;
let _32: u16;
let _33: [u16; 8];
let _34: bool;
let _35: [char; 4];
let _36: [i64; 4];
let _37: Adt64;
let _38: f64;
let _39: Adt66;
let _40: [u16; 8];
let _41: isize;
let _42: (f32, u16);
let _43: i16;
let _44: isize;
let _45: ();
let _46: ();
{
_8 = (*_3);
(*_12) = _16;
_6 = (*_11);
(*_13) = (*_7);
RET = 38265883016790339503253378138615688811_i128;
(*_12) = (*_11);
_5 = 2360763761_u32 as isize;
_5 = 615571047056188498_u64 as isize;
_8 = (*_4) + _5;
_5 = (*_7) ^ (*_3);
(*_1) = 82_i8 as isize;
_3 = _12;
_5 = 331561940473719956604541445722924729222_u128 as isize;
(*_1) = (*_3);
(*_11) = -_5;
_10 = (*_12);
Goto(bb1)
}
bb1 = {
_18 = _8 >= _6;
RET = (-112950958764076133684281365716726159072_i128);
Goto(bb2)
}
bb2 = {
(*_7) = -_6;
RET = (-169018776037825673171721034867573054502_i128);
(*_3) = (*_4) ^ (*_4);
(*_13) = '\u{eb35f}' as isize;
(*_1) = _2 | _15;
_4 = core::ptr::addr_of_mut!(_15);
_21 = _2 != _14;
_20 = 6_usize % 7_usize;
_7 = _13;
_5 = -_15;
(*_11) = !(*_3);
(*_12) = _2 | _10;
_4 = core::ptr::addr_of_mut!((*_7));
(*_4) = 193562811848538181818089647476687191763_u128 as isize;
_19 = (*_3) as i16;
Call((*_7), bb3, fn12(_16, _4))
}
bb3 = {
(*_3) = _5;
(*_13) = 14203763647310196646_u64 as isize;
Goto(bb4)
}
bb4 = {
_12 = _1;
RET = 135697846985870000690257650035982577420_i128 & 153307692301808533866133362480426923048_i128;
(*_13) = !_10;
_1 = core::ptr::addr_of_mut!((*_3));
_15 = -(*_4);
_26.fld2 = -(*_13);
(*_13) = !(*_1);
_23.0 = [97986456309385928888424217258469316944_u128,321084783877332631101743400558991994250_u128,52166297465977818150840062480248492309_u128];
_26.fld3 = [_19,_19,_19,_19];
_26.fld0.fld3.1 = core::ptr::addr_of!(_26.fld0.fld4);
_26.fld0.fld3.0 = core::ptr::addr_of!(_25.1);
(*_13) = 3250128505427061102753670653882228591_i128 as isize;
_8 = (-160525340674646791681901889267273885015_i128) as isize;
_2 = _19 as isize;
_24 = '\u{5a462}';
_25.0 = 1381851578_i32 as f32;
_7 = core::ptr::addr_of_mut!(_26.fld2);
_12 = core::ptr::addr_of_mut!((*_13));
_25.1 = 36079_u16 & 40600_u16;
_27 = _25.0 / (-0.000000000000000000000000000000000000003165555651685191_f32);
(*_4) = _8;
_9 = [_21,_21,_21,_18,_18,_18];
Goto(bb5)
}
bb5 = {
_26.fld0.fld4 = _19 - _19;
_4 = _7;
_26.fld0.fld3.2 = _26.fld3;
_28 = 171166015297223184954901721832954642822_u128 as i128;
_26.fld0.fld1.fld0 = [20541249354303145769193046867694159003_u128,109532529026278801182556780876837143834_u128,96992472313544729586411342188013673637_u128];
Call(_25, bb6, fn13(_26.fld0.fld3.1, _26.fld0.fld3.0, (*_13), _4, _26.fld0.fld3, (*_1), _12, _5, _1, _23.0))
}
bb6 = {
_26.fld0.fld4 = !_19;
match _25.1 {
0 => bb1,
38636 => bb8,
_ => bb7
}
}
bb7 = {
_18 = _8 >= _6;
RET = (-112950958764076133684281365716726159072_i128);
Goto(bb2)
}
bb8 = {
_14 = (*_3) + _26.fld2;
Goto(bb9)
}
bb9 = {
_24 = '\u{386aa}';
_9 = [_21,_18,_21,_18,_21,_21];
(*_12) = (*_4) ^ (*_3);
_8 = (*_3) * (*_3);
_33 = [_25.1,_25.1,_25.1,_25.1,_25.1,_25.1,_25.1,_25.1];
_26.fld0.fld0 = [_18,_18,_18,_21,_21,_18,_18];
_4 = core::ptr::addr_of_mut!((*_13));
Goto(bb10)
}
bb10 = {
(*_11) = !_8;
_10 = -(*_4);
_3 = core::ptr::addr_of_mut!(_16);
_32 = _25.1;
_18 = _21;
_20 = 6359162126407464343_usize | 2_usize;
_24 = '\u{2041}';
_26.fld0.fld5 = core::ptr::addr_of_mut!(_9);
_29.0 = _26.fld0.fld1.fld0;
_26.fld2 = -(*_11);
(*_1) = 8832083474986220167_i64 as isize;
_14 = (*_7) >> (*_13);
_7 = core::ptr::addr_of_mut!(_5);
_27 = -_25.0;
_6 = _14 | _8;
Goto(bb11)
}
bb11 = {
_7 = core::ptr::addr_of_mut!((*_13));
_26.fld0.fld3.0 = core::ptr::addr_of!(_32);
_4 = core::ptr::addr_of_mut!(_6);
_22 = (*_12) >= (*_4);
_25.1 = _32 & _32;
_26.fld0.fld3.0 = core::ptr::addr_of!(_25.1);
_26.fld0.fld5 = core::ptr::addr_of_mut!(_9);
(*_12) = _26.fld2 - _8;
_34 = !_22;
_1 = core::ptr::addr_of_mut!((*_11));
(*_11) = _6 << (*_4);
_4 = core::ptr::addr_of_mut!((*_12));
_22 = (*_1) > _14;
_37.fld1 = [(-114_i8),(-32_i8),46_i8,(-11_i8),44_i8];
_16 = (*_1);
_21 = _34;
_33 = [_25.1,_25.1,_25.1,_25.1,_25.1,_25.1,_25.1,_32];
_4 = _3;
_36 = [(-6220718940469552647_i64),(-7036212693006250390_i64),(-5182776368232820705_i64),8980567438852774285_i64];
Goto(bb12)
}
bb12 = {
_39.fld4 = core::ptr::addr_of!(_28);
_35 = [_24,_24,_24,_24];
_4 = core::ptr::addr_of_mut!(_16);
(*_1) = _8 & (*_3);
_13 = _12;
_31.fld1 = _26.fld0.fld4;
Goto(bb13)
}
bb13 = {
_3 = _4;
_24 = '\u{c0c55}';
_41 = _20 as isize;
_14 = (*_1);
(*_7) = (*_3);
(*_11) = !(*_3);
(*_13) = _14 + _16;
_14 = (*_12) << (*_3);
_21 = _22 | _34;
Goto(bb14)
}
bb14 = {
_20 = !1616601143189728167_usize;
Goto(bb15)
}
bb15 = {
Call(_45, bb16, dump_var(11_usize, 5_usize, Move(_5), 28_usize, Move(_28), 22_usize, Move(_22), 33_usize, Move(_33)))
}
bb16 = {
Call(_45, bb17, dump_var(11_usize, 8_usize, Move(_8), 14_usize, Move(_14), 20_usize, Move(_20), 6_usize, Move(_6)))
}
bb17 = {
Call(_45, bb18, dump_var(11_usize, 35_usize, Move(_35), 2_usize, Move(_2), 24_usize, Move(_24), 46_usize, _46))
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn12(mut _1: isize,mut _2: *mut isize) -> isize {
mir! {
type RET = isize;
let _3: *mut isize;
let _4: char;
let _5: char;
let _6: u16;
let _7: bool;
let _8: Adt52;
let _9: (f32, u16);
let _10: char;
let _11: char;
let _12: [i8; 5];
let _13: u32;
let _14: ([char; 4], [i16; 4], u128, f32);
let _15: u64;
let _16: f64;
let _17: *const u16;
let _18: char;
let _19: ();
let _20: ();
{
_1 = 9223372036854775807_isize >> (-7991782983400459129_i64);
RET = 14268995886481283848_u64 as isize;
_2 = core::ptr::addr_of_mut!(_1);
_5 = '\u{92f77}';
_6 = true as u16;
_1 = 9223372036854775807_isize;
_3 = core::ptr::addr_of_mut!((*_2));
RET = (*_2);
_1 = 9223372036854775807_isize;
RET = (*_3);
_6 = 15992_u16;
RET = (*_2) + (*_3);
match _1 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb5,
5 => bb6,
6 => bb7,
9223372036854775807 => bb9,
_ => bb8
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
RET = (*_3);
_5 = '\u{40761}';
_4 = _5;
RET = (*_2) & (*_3);
(*_2) = (-9223372036854775808_isize) | (-31_isize);
(*_3) = (-9223372036854775808_isize) >> _6;
Goto(bb10)
}
bb10 = {
_1 = (-53_isize);
(*_2) = 9223372036854775807_isize;
(*_3) = (-31_isize);
(*_3) = (-9223372036854775808_isize);
_4 = _5;
_1 = !36_isize;
_2 = core::ptr::addr_of_mut!(_1);
RET = !(*_3);
_7 = false;
_3 = _2;
_3 = core::ptr::addr_of_mut!((*_2));
_7 = !true;
(*_2) = 0_isize;
_5 = _4;
_9.1 = 2_usize as u16;
_2 = _3;
_10 = _4;
_7 = !true;
Call(RET, bb11, core::intrinsics::transmute((*_3)))
}
bb11 = {
_8.fld2 = [_6,_9.1,_9.1,_6,_6,_6,_9.1,_9.1];
RET = !(*_3);
_8.fld0 = _7;
_2 = _3;
_12 = [71_i8,(-66_i8),66_i8,(-23_i8),20_i8];
(*_2) = !9223372036854775807_isize;
RET = _7 as isize;
_11 = _5;
_6 = !_9.1;
_8.fld1 = 3_usize % 11479330388067295300_usize;
_9.0 = 116_u8 as f32;
Goto(bb12)
}
bb12 = {
(*_3) = (-9223372036854775808_isize);
(*_2) = -9223372036854775807_isize;
Goto(bb13)
}
bb13 = {
(*_3) = 52_isize * 61_isize;
_5 = _4;
_1 = (-26_isize) + 9223372036854775807_isize;
_13 = 1447232283_u32 - 972264357_u32;
RET = (*_3) - _1;
_3 = core::ptr::addr_of_mut!((*_3));
_14.1 = [(-9167_i16),(-15337_i16),(-23323_i16),(-19073_i16)];
_9.0 = _1 as f32;
_14.1 = [(-746_i16),24578_i16,23312_i16,(-19421_i16)];
_14.2 = !150729397584553979782304062236733626885_u128;
_14.2 = 207964383128493244839881693334903628963_u128 << _6;
_10 = _4;
_14.0 = [_11,_11,_5,_4];
Goto(bb14)
}
bb14 = {
_15 = 12976860254905775277_u64;
_13 = 928707250_u32;
_16 = 177_u8 as f64;
_13 = 698647031_u32;
_1 = (-45_isize);
_14.0 = [_4,_4,_4,_5];
Goto(bb15)
}
bb15 = {
Call(_19, bb16, dump_var(12_usize, 11_usize, Move(_11), 4_usize, Move(_4), 6_usize, Move(_6), 15_usize, Move(_15)))
}
bb16 = {
Call(_19, bb17, dump_var(12_usize, 7_usize, Move(_7), 20_usize, _20, 20_usize, _20, 20_usize, _20))
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn13(mut _1: *const i16,mut _2: *const u16,mut _3: isize,mut _4: *mut isize,mut _5: (*const u16, *const i16, [i16; 4]),mut _6: isize,mut _7: *mut isize,mut _8: isize,mut _9: *mut isize,mut _10: [u128; 3]) -> (f32, u16) {
mir! {
type RET = (f32, u16);
let _11: Adt64;
let _12: Adt52;
let _13: *const [bool; 7];
let _14: i16;
let _15: u128;
let _16: [u128; 3];
let _17: i32;
let _18: *mut [bool; 6];
let _19: isize;
let _20: Adt62;
let _21: i128;
let _22: f32;
let _23: i8;
let _24: *mut [bool; 6];
let _25: f64;
let _26: [i64; 4];
let _27: [char; 4];
let _28: ([char; 4], [i16; 4], u128, f32);
let _29: *const [bool; 7];
let _30: u8;
let _31: *mut isize;
let _32: char;
let _33: [i64; 4];
let _34: ();
let _35: ();
{
(*_9) = _8 * (*_4);
(*_4) = (*_9) | _6;
(*_7) = 17591066931434688458_u64 as isize;
_5.0 = _2;
_8 = 182_u8 as isize;
RET.1 = !1213_u16;
RET.1 = (-469346620_i32) as u16;
_8 = (*_9);
_4 = core::ptr::addr_of_mut!((*_9));
_1 = core::ptr::addr_of!((*_1));
_12.fld0 = true;
_11.fld1 = [72_i8,(-32_i8),(-19_i8),117_i8,(-40_i8)];
(*_4) = 443337935_i32 as isize;
_1 = core::ptr::addr_of!((*_1));
_11.fld0 = [1903093596_u32,2768627888_u32];
(*_9) = !_8;
_12.fld0 = false & false;
_5.1 = _1;
_9 = _4;
Goto(bb1)
}
bb1 = {
_8 = (*_9) ^ (*_9);
_12.fld2 = [59295_u16,45930_u16,34180_u16,65002_u16,48058_u16,5458_u16,13879_u16,811_u16];
_9 = core::ptr::addr_of_mut!((*_9));
(*_9) = _8 ^ _8;
_14 = 1489612706479217458_i64 as i16;
_12.fld1 = !0_usize;
_7 = _4;
(*_1) = -_14;
_15 = 4255796381935223945072581314252442621_u128 | 20592935907023494135277155420852431752_u128;
_16 = [_15,_15,_15];
_17 = 125_u8 as i32;
RET.1 = 7038_u16;
Goto(bb2)
}
bb2 = {
_10 = [_15,_15,_15];
_16 = [_15,_15,_15];
_1 = _5.1;
RET.0 = 2508689157_u32 as f32;
_16 = [_15,_15,_15];
_12.fld1 = 17701067803299976794_usize;
Goto(bb3)
}
bb3 = {
(*_4) = _8 - _8;
_9 = core::ptr::addr_of_mut!((*_7));
_11.fld1 = [(-67_i8),13_i8,9_i8,(-49_i8),51_i8];
_11.fld0 = [2967937550_u32,1304050867_u32];
_16 = _10;
(*_4) = !_8;
_2 = _5.0;
_12.fld1 = 17492684420020527854_usize / 3_usize;
(*_9) = _8 << _8;
_17 = (-433054971_i32);
_3 = _12.fld1 as isize;
_1 = _5.1;
RET.0 = 167486893755104290296025917087996257579_i128 as f32;
_2 = _5.0;
_10 = [_15,_15,_15];
_15 = !17264459024700514308501630949996841332_u128;
(*_4) = _8;
RET.0 = _12.fld1 as f32;
_1 = core::ptr::addr_of!(_14);
(*_4) = !_8;
_9 = core::ptr::addr_of_mut!(_3);
(*_1) = 11127_i16 >> _8;
_4 = core::ptr::addr_of_mut!(_6);
Call(_6, bb4, core::intrinsics::bswap(_3))
}
bb4 = {
_5.1 = core::ptr::addr_of!(_14);
(*_1) = (-32027_i16);
_9 = core::ptr::addr_of_mut!((*_4));
RET.1 = 58066_u16;
_14 = 13126_i16 & 27907_i16;
_9 = core::ptr::addr_of_mut!((*_4));
Call((*_4), bb5, core::intrinsics::transmute(_12.fld1))
}
bb5 = {
_12.fld0 = true;
(*_1) = (-16060_i16) & (-17018_i16);
_13 = core::ptr::addr_of!(_20.fld0.fld0);
_20.fld0.fld1.fld0 = [_15,_15,_15];
_12.fld0 = _15 >= _15;
_20.fld3 = _5.2;
(*_13) = [_12.fld0,_12.fld0,_12.fld0,_12.fld0,_12.fld0,_12.fld0,_12.fld0];
_21 = -133088088720465736093824207730377332087_i128;
Call(_5.2, bb6, core::intrinsics::transmute((*_4)))
}
bb6 = {
_5.2 = _20.fld3;
_20.fld2 = 99828601_u32 as isize;
_12.fld2 = [63394_u16,30459_u16,39378_u16,508_u16,29084_u16,62851_u16,23157_u16,49777_u16];
_20.fld0.fld3.0 = _5.0;
(*_9) = 16150986215399232220_u64 as isize;
(*_7) = _8 | _8;
_16 = [_15,_15,_15];
(*_4) = (*_7) - (*_7);
_12.fld2 = [39391_u16,22085_u16,33136_u16,23467_u16,59040_u16,28471_u16,55614_u16,6321_u16];
_11.fld1 = [(-104_i8),(-94_i8),6_i8,(-12_i8),61_i8];
(*_7) = !(*_9);
_20.fld0.fld3 = _5;
_8 = !(*_4);
(*_4) = -(*_7);
_20.fld0.fld4 = 31708_u16 as i16;
RET.1 = 48578_u16;
_10 = [_15,_15,_15];
(*_9) = _3 & (*_7);
_12.fld2 = [17107_u16,10752_u16,34304_u16,6528_u16,7573_u16,31550_u16,56605_u16,17485_u16];
(*_9) = _12.fld0 as isize;
_13 = core::ptr::addr_of!((*_13));
_23 = !(-97_i8);
match _17 {
340282366920938463463374607431335156485 => bb8,
_ => bb7
}
}
bb7 = {
_5.1 = core::ptr::addr_of!(_14);
(*_1) = (-32027_i16);
_9 = core::ptr::addr_of_mut!((*_4));
RET.1 = 58066_u16;
_14 = 13126_i16 & 27907_i16;
_9 = core::ptr::addr_of_mut!((*_4));
Call((*_4), bb5, core::intrinsics::transmute(_12.fld1))
}
bb8 = {
_20.fld0.fld4 = (*_1) << _8;
_20.fld0.fld0 = [_12.fld0,_12.fld0,_12.fld0,_12.fld0,_12.fld0,_12.fld0,_12.fld0];
_20.fld0.fld3.0 = _2;
_28.0 = ['\u{e6e63}','\u{62f52}','\u{107a57}','\u{b1cd2}'];
_20.fld0.fld3.2 = [_20.fld0.fld4,_20.fld0.fld4,_20.fld0.fld4,_20.fld0.fld4];
_2 = _20.fld0.fld3.0;
_13 = core::ptr::addr_of!((*_13));
_20.fld0.fld3 = _5;
_12.fld0 = true;
_22 = _15 as f32;
RET = (_22, 56808_u16);
_7 = _4;
_11.fld0 = [787845901_u32,1159266480_u32];
(*_9) = _3 + _8;
_30 = !191_u8;
_20.fld0.fld3.0 = _2;
_13 = core::ptr::addr_of!((*_13));
(*_1) = !_20.fld0.fld4;
_6 = _3 ^ _3;
_28.2 = _15 - _15;
(*_7) = _8;
RET.1 = (-7637270953367812629_i64) as u16;
_20.fld0.fld1.fld0 = _16;
_13 = core::ptr::addr_of!(_20.fld0.fld0);
_29 = core::ptr::addr_of!((*_13));
_20.fld0.fld4 = _28.2 as i16;
Call(_28, bb9, fn14(_10, (*_1), _3, _5, (*_7), (*_7), (*_7), (*_9), _3, (*_9), _20.fld0.fld3.1, _20.fld2, (*_9), _6))
}
bb9 = {
(*_7) = -_8;
_20.fld0.fld0 = [_12.fld0,_12.fld0,_12.fld0,_12.fld0,_12.fld0,_12.fld0,_12.fld0];
_26 = [132045215136873963_i64,(-7151488534392792788_i64),7966841496404120374_i64,(-8644119647821183711_i64)];
(*_9) = _3 + _8;
(*_9) = _28.2 as isize;
_26 = [7615736271275780199_i64,8874167471066337201_i64,(-960326184803621386_i64),(-6579991270588165767_i64)];
match _17 {
0 => bb10,
1 => bb11,
2 => bb12,
3 => bb13,
4 => bb14,
5 => bb15,
6 => bb16,
340282366920938463463374607431335156485 => bb18,
_ => bb17
}
}
bb10 = {
_20.fld0.fld4 = (*_1) << _8;
_20.fld0.fld0 = [_12.fld0,_12.fld0,_12.fld0,_12.fld0,_12.fld0,_12.fld0,_12.fld0];
_20.fld0.fld3.0 = _2;
_28.0 = ['\u{e6e63}','\u{62f52}','\u{107a57}','\u{b1cd2}'];
_20.fld0.fld3.2 = [_20.fld0.fld4,_20.fld0.fld4,_20.fld0.fld4,_20.fld0.fld4];
_2 = _20.fld0.fld3.0;
_13 = core::ptr::addr_of!((*_13));
_20.fld0.fld3 = _5;
_12.fld0 = true;
_22 = _15 as f32;
RET = (_22, 56808_u16);
_7 = _4;
_11.fld0 = [787845901_u32,1159266480_u32];
(*_9) = _3 + _8;
_30 = !191_u8;
_20.fld0.fld3.0 = _2;
_13 = core::ptr::addr_of!((*_13));
(*_1) = !_20.fld0.fld4;
_6 = _3 ^ _3;
_28.2 = _15 - _15;
(*_7) = _8;
RET.1 = (-7637270953367812629_i64) as u16;
_20.fld0.fld1.fld0 = _16;
_13 = core::ptr::addr_of!(_20.fld0.fld0);
_29 = core::ptr::addr_of!((*_13));
_20.fld0.fld4 = _28.2 as i16;
Call(_28, bb9, fn14(_10, (*_1), _3, _5, (*_7), (*_7), (*_7), (*_9), _3, (*_9), _20.fld0.fld3.1, _20.fld2, (*_9), _6))
}
bb11 = {
_5.1 = core::ptr::addr_of!(_14);
(*_1) = (-32027_i16);
_9 = core::ptr::addr_of_mut!((*_4));
RET.1 = 58066_u16;
_14 = 13126_i16 & 27907_i16;
_9 = core::ptr::addr_of_mut!((*_4));
Call((*_4), bb5, core::intrinsics::transmute(_12.fld1))
}
bb12 = {
_5.2 = _20.fld3;
_20.fld2 = 99828601_u32 as isize;
_12.fld2 = [63394_u16,30459_u16,39378_u16,508_u16,29084_u16,62851_u16,23157_u16,49777_u16];
_20.fld0.fld3.0 = _5.0;
(*_9) = 16150986215399232220_u64 as isize;
(*_7) = _8 | _8;
_16 = [_15,_15,_15];
(*_4) = (*_7) - (*_7);
_12.fld2 = [39391_u16,22085_u16,33136_u16,23467_u16,59040_u16,28471_u16,55614_u16,6321_u16];
_11.fld1 = [(-104_i8),(-94_i8),6_i8,(-12_i8),61_i8];
(*_7) = !(*_9);
_20.fld0.fld3 = _5;
_8 = !(*_4);
(*_4) = -(*_7);
_20.fld0.fld4 = 31708_u16 as i16;
RET.1 = 48578_u16;
_10 = [_15,_15,_15];
(*_9) = _3 & (*_7);
_12.fld2 = [17107_u16,10752_u16,34304_u16,6528_u16,7573_u16,31550_u16,56605_u16,17485_u16];
(*_9) = _12.fld0 as isize;
_13 = core::ptr::addr_of!((*_13));
_23 = !(-97_i8);
match _17 {
340282366920938463463374607431335156485 => bb8,
_ => bb7
}
}
bb13 = {
_12.fld0 = true;
(*_1) = (-16060_i16) & (-17018_i16);
_13 = core::ptr::addr_of!(_20.fld0.fld0);
_20.fld0.fld1.fld0 = [_15,_15,_15];
_12.fld0 = _15 >= _15;
_20.fld3 = _5.2;
(*_13) = [_12.fld0,_12.fld0,_12.fld0,_12.fld0,_12.fld0,_12.fld0,_12.fld0];
_21 = -133088088720465736093824207730377332087_i128;
Call(_5.2, bb6, core::intrinsics::transmute((*_4)))
}
bb14 = {
_5.1 = core::ptr::addr_of!(_14);
(*_1) = (-32027_i16);
_9 = core::ptr::addr_of_mut!((*_4));
RET.1 = 58066_u16;
_14 = 13126_i16 & 27907_i16;
_9 = core::ptr::addr_of_mut!((*_4));
Call((*_4), bb5, core::intrinsics::transmute(_12.fld1))
}
bb15 = {
(*_4) = _8 - _8;
_9 = core::ptr::addr_of_mut!((*_7));
_11.fld1 = [(-67_i8),13_i8,9_i8,(-49_i8),51_i8];
_11.fld0 = [2967937550_u32,1304050867_u32];
_16 = _10;
(*_4) = !_8;
_2 = _5.0;
_12.fld1 = 17492684420020527854_usize / 3_usize;
(*_9) = _8 << _8;
_17 = (-433054971_i32);
_3 = _12.fld1 as isize;
_1 = _5.1;
RET.0 = 167486893755104290296025917087996257579_i128 as f32;
_2 = _5.0;
_10 = [_15,_15,_15];
_15 = !17264459024700514308501630949996841332_u128;
(*_4) = _8;
RET.0 = _12.fld1 as f32;
_1 = core::ptr::addr_of!(_14);
(*_4) = !_8;
_9 = core::ptr::addr_of_mut!(_3);
(*_1) = 11127_i16 >> _8;
_4 = core::ptr::addr_of_mut!(_6);
Call(_6, bb4, core::intrinsics::bswap(_3))
}
bb16 = {
_10 = [_15,_15,_15];
_16 = [_15,_15,_15];
_1 = _5.1;
RET.0 = 2508689157_u32 as f32;
_16 = [_15,_15,_15];
_12.fld1 = 17701067803299976794_usize;
Goto(bb3)
}
bb17 = {
_8 = (*_9) ^ (*_9);
_12.fld2 = [59295_u16,45930_u16,34180_u16,65002_u16,48058_u16,5458_u16,13879_u16,811_u16];
_9 = core::ptr::addr_of_mut!((*_9));
(*_9) = _8 ^ _8;
_14 = 1489612706479217458_i64 as i16;
_12.fld1 = !0_usize;
_7 = _4;
(*_1) = -_14;
_15 = 4255796381935223945072581314252442621_u128 | 20592935907023494135277155420852431752_u128;
_16 = [_15,_15,_15];
_17 = 125_u8 as i32;
RET.1 = 7038_u16;
Goto(bb2)
}
bb18 = {
_5 = (_2, _20.fld0.fld3.1, _28.1);
_14 = !_20.fld0.fld4;
(*_1) = _20.fld0.fld4 << _8;
_31 = _7;
(*_4) = _8;
_5.0 = _2;
(*_9) = -_8;
RET = (_28.3, 19097_u16);
RET = (_28.3, 38636_u16);
(*_13) = [_12.fld0,_12.fld0,_12.fld0,_12.fld0,_12.fld0,_12.fld0,_12.fld0];
Goto(bb19)
}
bb19 = {
Call(_34, bb20, dump_var(13_usize, 17_usize, Move(_17), 23_usize, Move(_23), 15_usize, Move(_15), 8_usize, Move(_8)))
}
bb20 = {
Call(_34, bb21, dump_var(13_usize, 14_usize, Move(_14), 16_usize, Move(_16), 35_usize, _35, 35_usize, _35))
}
bb21 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn14(mut _1: [u128; 3],mut _2: i16,mut _3: isize,mut _4: (*const u16, *const i16, [i16; 4]),mut _5: isize,mut _6: isize,mut _7: isize,mut _8: isize,mut _9: isize,mut _10: isize,mut _11: *const i16,mut _12: isize,mut _13: isize,mut _14: isize) -> ([char; 4], [i16; 4], u128, f32) {
mir! {
type RET = ([char; 4], [i16; 4], u128, f32);
let _15: u8;
let _16: isize;
let _17: [i8; 5];
let _18: f64;
let _19: u32;
let _20: ();
let _21: ();
{
RET.2 = !202200366230458002565868549551235010928_u128;
RET.0 = ['\u{d4d2a}','\u{3b1f3}','\u{3e0b7}','\u{a03c9}'];
RET.1 = [_2,(*_11),_2,(*_11)];
Call(_14, bb1, core::intrinsics::transmute(_3))
}
bb1 = {
_7 = 1288661150_i32 as isize;
RET.2 = 7362095802908083432_usize as u128;
_14 = _13 << _10;
_12 = -_13;
RET.3 = 13033226281349999965_usize as f32;
_10 = 3159261134850603023_u64 as isize;
RET.0 = ['\u{ccdb8}','\u{5c1bc}','\u{6a20d}','\u{107a75}'];
_15 = 111_u8;
_17 = [89_i8,48_i8,71_i8,6_i8,(-41_i8)];
_7 = 104_i8 as isize;
_2 = 107267539384599179760164572659391120134_i128 as i16;
_7 = !_5;
RET.2 = 191130724242906925931914535049522234791_u128 - 243681355836743050264164533163861098413_u128;
_13 = 0_usize as isize;
_19 = !1173324231_u32;
_18 = _19 as f64;
_10 = _14 ^ _6;
(*_11) = _2 * _2;
_10 = (-1506852059_i32) as isize;
Goto(bb2)
}
bb2 = {
Call(_20, bb3, dump_var(14_usize, 10_usize, Move(_10), 8_usize, Move(_8), 5_usize, Move(_5), 14_usize, Move(_14)))
}
bb3 = {
Call(_20, bb4, dump_var(14_usize, 17_usize, Move(_17), 13_usize, Move(_13), 6_usize, Move(_6), 21_usize, _21))
}
bb4 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn15(mut _1: [i8; 5],mut _2: usize,mut _3: *mut isize,mut _4: [i64; 4],mut _5: i32,mut _6: *mut isize,mut _7: *mut isize,mut _8: isize) -> *const *const [bool; 7] {
mir! {
type RET = *const *const [bool; 7];
let _9: [u128; 3];
let _10: *const [bool; 7];
let _11: Adt55;
let _12: *const i32;
let _13: char;
let _14: [bool; 7];
let _15: f64;
let _16: isize;
let _17: isize;
let _18: *mut bool;
let _19: *mut bool;
let _20: f64;
let _21: [u16; 8];
let _22: i64;
let _23: Adt51;
let _24: *mut [bool; 6];
let _25: u128;
let _26: i64;
let _27: [u32; 2];
let _28: [bool; 6];
let _29: [i8; 5];
let _30: i128;
let _31: ();
let _32: ();
{
_5 = (-473022591_i32);
_4 = [7365579247081944_i64,7030461583198540725_i64,7542857769794091339_i64,4856412607983667212_i64];
(*_6) = _8;
_3 = core::ptr::addr_of_mut!(_8);
Goto(bb1)
}
bb1 = {
_1 = [(-88_i8),23_i8,85_i8,(-121_i8),65_i8];
_3 = core::ptr::addr_of_mut!((*_3));
(*_3) = (*_7) >> (*_7);
(*_7) = (*_3) | (*_3);
_6 = core::ptr::addr_of_mut!((*_7));
(*_7) = (*_3) >> (*_3);
_3 = _6;
_4 = [6232917634909551397_i64,(-7625268950181033665_i64),(-3683112236443887906_i64),(-4772287213995777824_i64)];
(*_3) = 51085_u16 as isize;
RET = core::ptr::addr_of!(_10);
_3 = _6;
(*_7) = 7712131143121291509_u64 as isize;
_9 = [4888024852781495081712682013868700775_u128,264112992046946451766618895626008310006_u128,282922673446815113764002145417252527150_u128];
_7 = _6;
(*_3) = _8 ^ _8;
Goto(bb2)
}
bb2 = {
_4 = [(-7821636861027784881_i64),4196171345267451624_i64,(-7655926355393491459_i64),3096157952476615824_i64];
_12 = core::ptr::addr_of!(_5);
_3 = _6;
_11 = Adt55 { fld0: _9 };
(*_3) = _8 * _8;
_2 = 17717840685686756213_usize;
_2 = 5_usize | 3096933494043346225_usize;
RET = core::ptr::addr_of!((*RET));
(*_12) = (-18262_i16) as i32;
_1 = [22_i8,(-128_i8),(-29_i8),120_i8,94_i8];
(*_7) = !_8;
_2 = (*_12) as usize;
_11.fld0 = [135510083169172947472912096206053078878_u128,73673426036236399457925952091900246100_u128,334836055980055072046552034440549352102_u128];
(*_6) = -_8;
Call((*RET), bb3, fn16(_11.fld0, (*_6), (*_6), _3, _8, _7, _12))
}
bb3 = {
_11 = Adt55 { fld0: _9 };
_13 = '\u{518cb}';
(*_6) = _8;
(*_12) = !1831598756_i32;
(*_6) = _8 >> _2;
_8 = (*_7);
RET = core::ptr::addr_of!(_10);
_12 = core::ptr::addr_of!((*_12));
_9 = [278263303977534427300902426192497132452_u128,57834146008843637089266042979561755335_u128,318426366966984758509304657770238147911_u128];
_1 = [(-124_i8),27_i8,28_i8,104_i8,(-87_i8)];
_5 = (-1578131968_i32) + 207467240_i32;
(*_3) = _8 | _8;
_7 = core::ptr::addr_of_mut!((*_7));
_5 = 547598625_i32 & (-1660721342_i32);
_1 = [(-110_i8),(-108_i8),(-34_i8),(-94_i8),(-9_i8)];
(*_12) = !1323138940_i32;
_4 = [(-2517267522800299219_i64),328858958897004906_i64,(-3205337360561429811_i64),7130910489836785041_i64];
(*_6) = _8 << _8;
_13 = '\u{10ffbb}';
_8 = _13 as isize;
_11.fld0 = [275200721006497136013940265276190125787_u128,230527079640213292458208357267257014582_u128,295796139093979346581226104157049246732_u128];
Goto(bb4)
}
bb4 = {
_12 = core::ptr::addr_of!((*_12));
_9 = [275153050627786396671561056800193458875_u128,283175181569639334254439616470742805940_u128,35136950760682998832562791260314932947_u128];
_9 = [145398079317675654733496596936208762767_u128,196093804771254177105688838500044458877_u128,294383103015219248149980483087383718790_u128];
RET = core::ptr::addr_of!((*RET));
(*_3) = (*_12) as isize;
(*_7) = _8 * _8;
RET = core::ptr::addr_of!((*RET));
(*_3) = 5864_u16 as isize;
_1 = [81_i8,(-41_i8),(-35_i8),(-126_i8),18_i8];
_11 = Adt55 { fld0: _9 };
(*RET) = core::ptr::addr_of!(_14);
_11 = Adt55 { fld0: _9 };
_2 = 15852346841498216358_usize / 3_usize;
_2 = !7_usize;
_17 = -(*_3);
_11.fld0 = _9;
_16 = (-8864_i16) as isize;
_13 = '\u{3eab}';
_14 = [false,true,false,true,true,false,false];
_3 = core::ptr::addr_of_mut!((*_7));
(*RET) = core::ptr::addr_of!(_14);
_9 = [140856118190644154879453697239334615432_u128,306270635943335602588899590621845951299_u128,34999525468084405976092688334967050279_u128];
_13 = '\u{3559e}';
_12 = core::ptr::addr_of!((*_12));
_15 = _2 as f64;
(*_7) = (-116_i8) as isize;
(*_12) = (-1563014131_i32) ^ 277702570_i32;
RET = core::ptr::addr_of!(_10);
_1 = [117_i8,17_i8,109_i8,49_i8,(-88_i8)];
Goto(bb5)
}
bb5 = {
(*RET) = core::ptr::addr_of!((*_10));
(*_10) = [false,false,false,true,false,false,true];
Call(_8, bb6, core::intrinsics::bswap((*_6)))
}
bb6 = {
(*RET) = core::ptr::addr_of!(_14);
_2 = 3_usize & 6_usize;
_16 = (*_3) ^ (*_3);
RET = core::ptr::addr_of!((*RET));
(*_12) = 195704545_i32;
Goto(bb7)
}
bb7 = {
(*RET) = core::ptr::addr_of!(_14);
_12 = core::ptr::addr_of!((*_12));
(*_12) = (-670576731_i32) ^ 1264742667_i32;
(*_12) = (-806112419_i32);
_5 = (-210719375_i32);
_1 = [(-89_i8),(-81_i8),37_i8,4_i8,(-97_i8)];
(*_6) = _8;
(*_3) = !_16;
_15 = 1151308681_u32 as f64;
_21 = [30602_u16,43740_u16,25537_u16,62735_u16,48642_u16,5211_u16,57324_u16,20964_u16];
_5 = (-329411850_i32) >> (*_6);
RET = core::ptr::addr_of!((*RET));
_16 = 889638538242913164_i64 as isize;
(*_3) = (-3196389188517628122_i64) as isize;
_4 = [(-3857567964870946161_i64),(-8990885010272577711_i64),(-1730729697279914309_i64),2510115855714232158_i64];
Goto(bb8)
}
bb8 = {
_20 = -_15;
_7 = core::ptr::addr_of_mut!(_17);
_7 = core::ptr::addr_of_mut!((*_6));
_3 = _7;
_5 = (-584472697_i32);
_23 = Adt51 { fld0: 217184220483336560869976251637501102466_u128 };
_2 = (*_12) as usize;
(*_10) = [false,false,false,true,true,false,true];
(*RET) = core::ptr::addr_of!((*_10));
_20 = -_15;
_15 = _20;
_11.fld0 = [_23.fld0,_23.fld0,_23.fld0];
_12 = core::ptr::addr_of!((*_12));
_16 = -(*_6);
_5 = _15 as i32;
_16 = _17 << _5;
(*RET) = core::ptr::addr_of!((*_10));
_15 = _20;
(*_3) = _16 | _16;
match _23.fld0 {
0 => bb5,
217184220483336560869976251637501102466 => bb9,
_ => bb6
}
}
bb9 = {
(*_10) = [false,true,true,true,false,true,true];
_14 = [true,false,false,true,false,false,true];
_10 = core::ptr::addr_of!((*_10));
_10 = core::ptr::addr_of!(_14);
_3 = _6;
(*_12) = (-223494194_i32);
(*_10) = [true,true,false,false,false,true,true];
(*_3) = _16;
_2 = 5_usize & 7_usize;
_13 = '\u{81a07}';
_9 = _11.fld0;
_21 = [7758_u16,8996_u16,60636_u16,6839_u16,15002_u16,29748_u16,19360_u16,57434_u16];
_23 = Adt51 { fld0: 301054453463357513762323999291455144215_u128 };
_2 = 3_usize % 6_usize;
_4 = [3602671491645671036_i64,8343825572192180678_i64,(-6409857960696338286_i64),(-3079317934319428170_i64)];
Goto(bb10)
}
bb10 = {
(*_7) = -_16;
_11.fld0 = _9;
(*_7) = _16 - _16;
_5 = 1005808022_i32 + (-1648819926_i32);
(*_6) = !_16;
_3 = core::ptr::addr_of_mut!(_8);
match _23.fld0 {
301054453463357513762323999291455144215 => bb12,
_ => bb11
}
}
bb11 = {
_1 = [(-88_i8),23_i8,85_i8,(-121_i8),65_i8];
_3 = core::ptr::addr_of_mut!((*_3));
(*_3) = (*_7) >> (*_7);
(*_7) = (*_3) | (*_3);
_6 = core::ptr::addr_of_mut!((*_7));
(*_7) = (*_3) >> (*_3);
_3 = _6;
_4 = [6232917634909551397_i64,(-7625268950181033665_i64),(-3683112236443887906_i64),(-4772287213995777824_i64)];
(*_3) = 51085_u16 as isize;
RET = core::ptr::addr_of!(_10);
_3 = _6;
(*_7) = 7712131143121291509_u64 as isize;
_9 = [4888024852781495081712682013868700775_u128,264112992046946451766618895626008310006_u128,282922673446815113764002145417252527150_u128];
_7 = _6;
(*_3) = _8 ^ _8;
Goto(bb2)
}
bb12 = {
_6 = core::ptr::addr_of_mut!(_8);
RET = core::ptr::addr_of!((*RET));
_27 = [2520644745_u32,1805497980_u32];
_13 = '\u{3bc5e}';
_25 = _23.fld0 * _23.fld0;
_2 = 2999418929_u32 as usize;
_23.fld0 = (-46292670657941545952302645666488030196_i128) as u128;
(*_7) = (*_3);
_23.fld0 = _25;
(*_10) = [false,true,true,true,false,false,false];
(*_3) = (*_7) * _17;
_11.fld0 = [_23.fld0,_25,_25];
Goto(bb13)
}
bb13 = {
_14 = [true,true,false,false,false,true,false];
Goto(bb14)
}
bb14 = {
_26 = !6257469918964465792_i64;
_9 = _11.fld0;
RET = core::ptr::addr_of!(_10);
(*_6) = _16;
_7 = _6;
_24 = core::ptr::addr_of_mut!(_28);
_7 = core::ptr::addr_of_mut!(_16);
_29 = _1;
(*_10) = [false,false,false,false,true,true,false];
_8 = 7761693251663483803966782580223243262_i128 as isize;
(*_3) = _16 | _16;
Goto(bb15)
}
bb15 = {
Call(_31, bb16, dump_var(15_usize, 8_usize, Move(_8), 25_usize, Move(_25), 5_usize, Move(_5), 26_usize, Move(_26)))
}
bb16 = {
Call(_31, bb17, dump_var(15_usize, 1_usize, Move(_1), 14_usize, Move(_14), 27_usize, Move(_27), 32_usize, _32))
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn16(mut _1: [u128; 3],mut _2: isize,mut _3: isize,mut _4: *mut isize,mut _5: isize,mut _6: *mut isize,mut _7: *const i32) -> *const [bool; 7] {
mir! {
type RET = *const [bool; 7];
let _8: isize;
let _9: Adt51;
let _10: u16;
let _11: bool;
let _12: Adt64;
let _13: [bool; 7];
let _14: u128;
let _15: *const [bool; 7];
let _16: [u16; 8];
let _17: [u128; 5];
let _18: [u32; 2];
let _19: f64;
let _20: Adt65;
let _21: bool;
let _22: (f32, u16);
let _23: f32;
let _24: ();
let _25: ();
{
_1 = [312000857146474484907593048385891083865_u128,80961391331608415651301947409803143895_u128,264094522696148433855658747831306756080_u128];
_6 = _4;
_3 = (*_4);
(*_6) = _5;
_6 = core::ptr::addr_of_mut!(_5);
(*_7) = true as i32;
_5 = 271734791906692245123589754789811133812_u128 as isize;
(*_6) = _3 << (*_4);
(*_7) = 822832057_i32 >> _3;
(*_6) = _2 ^ _2;
_9.fld0 = !106070295242571792927522292362191655141_u128;
_6 = _4;
_3 = (*_4) - (*_6);
_6 = _4;
_9.fld0 = 141424263028750627246042878430230760690_u128;
_9 = Adt51 { fld0: 136303422473934074006107214702107153016_u128 };
_3 = (-8_i8) as isize;
_4 = _6;
(*_4) = _2 + _2;
_7 = core::ptr::addr_of!((*_7));
(*_4) = _5 >> _5;
_4 = _6;
_3 = (*_4) & (*_4);
Call(_3, bb1, fn17((*_6), (*_6), _4, _4, _9.fld0, _4, _1, (*_7), (*_6), (*_4), _4, _5, _4, (*_6), (*_4)))
}
bb1 = {
_11 = false & false;
_4 = core::ptr::addr_of_mut!((*_4));
(*_6) = _5;
_3 = _11 as isize;
_8 = _3;
(*_6) = 15519856109437317661_u64 as isize;
_3 = (*_4) + _2;
_2 = 227_u8 as isize;
_11 = !false;
(*_6) = _5 * _3;
_2 = (*_4) + (*_4);
_3 = (*_4) << (*_7);
_11 = !false;
match _9.fld0 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
136303422473934074006107214702107153016 => bb9,
_ => bb8
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
_12.fld0 = [2756827564_u32,1566490532_u32];
_5 = 23_i8 as isize;
_7 = core::ptr::addr_of!((*_7));
_14 = (*_7) as u128;
_12.fld1 = [1_i8,114_i8,120_i8,1_i8,(-85_i8)];
_3 = -(*_4);
RET = core::ptr::addr_of!(_13);
(*_4) = !_2;
Goto(bb10)
}
bb10 = {
(*RET) = [_11,_11,_11,_11,_11,_11,_11];
RET = core::ptr::addr_of!(_13);
_15 = core::ptr::addr_of!((*RET));
(*RET) = [_11,_11,_11,_11,_11,_11,_11];
(*_15) = [_11,_11,_11,_11,_11,_11,_11];
_12.fld0 = [2687427607_u32,1851235823_u32];
(*_6) = !_8;
_13 = [_11,_11,_11,_11,_11,_11,_11];
_5 = _3;
_6 = _4;
_8 = 153_u8 as isize;
_16 = [14836_u16,65303_u16,24295_u16,11101_u16,60207_u16,59402_u16,31299_u16,30279_u16];
_14 = _11 as u128;
_15 = core::ptr::addr_of!(_13);
Goto(bb11)
}
bb11 = {
_8 = _5 & _2;
(*RET) = [_11,_11,_11,_11,_11,_11,_11];
(*_15) = [_11,_11,_11,_11,_11,_11,_11];
_9 = Adt51 { fld0: _14 };
(*_7) = 80_i8 as i32;
Goto(bb12)
}
bb12 = {
_8 = (*_6);
Goto(bb13)
}
bb13 = {
_11 = true;
(*RET) = [_11,_11,_11,_11,_11,_11,_11];
(*_6) = _5;
(*_6) = (*_7) as isize;
_9 = Adt51 { fld0: _14 };
(*RET) = [_11,_11,_11,_11,_11,_11,_11];
_6 = core::ptr::addr_of_mut!((*_6));
_12.fld0 = [3023267585_u32,1911005004_u32];
(*RET) = [_11,_11,_11,_11,_11,_11,_11];
_9 = Adt51 { fld0: _14 };
_14 = (-63111700116967759811728473360059784114_i128) as u128;
_15 = core::ptr::addr_of!((*RET));
_20.fld2.fld0.fld3.0 = core::ptr::addr_of!(_10);
_20.fld2.fld2 = _3 << _5;
_17 = [_14,_14,_9.fld0,_9.fld0,_14];
_14 = _9.fld0;
Goto(bb14)
}
bb14 = {
_20.fld6 = core::ptr::addr_of!(_10);
_20.fld0.fld2 = core::ptr::addr_of_mut!(_21);
_20.fld2.fld0.fld2 = core::ptr::addr_of!(_15);
(*_7) = (-1334441792_i32);
Goto(bb15)
}
bb15 = {
Call(_24, bb16, dump_var(16_usize, 11_usize, Move(_11), 5_usize, Move(_5), 14_usize, Move(_14), 8_usize, Move(_8)))
}
bb16 = {
Call(_24, bb17, dump_var(16_usize, 2_usize, Move(_2), 25_usize, _25, 25_usize, _25, 25_usize, _25))
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn17(mut _1: isize,mut _2: isize,mut _3: *mut isize,mut _4: *mut isize,mut _5: u128,mut _6: *mut isize,mut _7: [u128; 3],mut _8: i32,mut _9: isize,mut _10: isize,mut _11: *mut isize,mut _12: isize,mut _13: *mut isize,mut _14: isize,mut _15: isize) -> isize {
mir! {
type RET = isize;
let _16: Adt66;
let _17: [i128; 7];
let _18: bool;
let _19: [u32; 2];
let _20: [u32; 2];
let _21: char;
let _22: isize;
let _23: [i16; 4];
let _24: *mut [u16; 8];
let _25: isize;
let _26: bool;
let _27: Adt55;
let _28: Adt51;
let _29: char;
let _30: [u16; 8];
let _31: ([char; 4], [i16; 4], u128, f32);
let _32: u128;
let _33: *const u16;
let _34: [u128; 5];
let _35: *const i32;
let _36: ();
let _37: ();
{
_13 = core::ptr::addr_of_mut!(_12);
_5 = !282787693182237542116347419440207804112_u128;
_15 = (*_4);
_16.fld2.fld1 = [65282807_u32,3071645472_u32];
(*_3) = _14;
_7 = [_5,_5,_5];
(*_6) = _9;
_5 = !137099242668916521069100605142468688570_u128;
_16.fld6.0 = [_5,_5,_5];
(*_6) = _5 as isize;
_19 = [713743924_u32,3081363287_u32];
_8 = _5 as i32;
_6 = core::ptr::addr_of_mut!((*_11));
_2 = (-6957661933228703950_i64) as isize;
_17 = [(-17414582324734309467596176655201428044_i128),169058019075283867662257428998258360516_i128,(-124532535552562615961914149167940737884_i128),(-139002870282075843308013457870449114_i128),(-108357375071742203748715826964143071518_i128),(-25111025603934281025203736694465220582_i128),(-42855096217547036717263489393746620299_i128)];
RET = (*_6) ^ (*_13);
RET = 4_usize as isize;
Goto(bb1)
}
bb1 = {
_16.fld3 = _17;
_17 = [31222528057921512510827470380896665990_i128,156032494158389007720135823263980207117_i128,(-40699485900995043299907197954791401585_i128),(-120364499936213858746487691917147476696_i128),162271743081757487396020930054177834214_i128,88792044648142253414733032225320156248_i128,141375111994547309426014478912172261181_i128];
_16.fld0 = false | true;
_15 = _10;
_14 = (-153752122630207558544285346158521705438_i128) as isize;
_23 = [32487_i16,(-840_i16),25958_i16,28831_i16];
_4 = _13;
_18 = !_16.fld0;
_20 = _19;
Goto(bb2)
}
bb2 = {
_2 = (*_6);
_13 = core::ptr::addr_of_mut!(_22);
Goto(bb3)
}
bb3 = {
_16.fld1 = '\u{e8bae}';
_27 = Adt55 { fld0: _16.fld6.0 };
_4 = core::ptr::addr_of_mut!(_15);
_24 = core::ptr::addr_of_mut!(_30);
_30 = [46179_u16,3924_u16,42423_u16,32845_u16,21875_u16,28571_u16,64257_u16,37206_u16];
(*_11) = (*_4);
Goto(bb4)
}
bb4 = {
(*_13) = (-12082_i16) as isize;
_12 = !(*_3);
_6 = core::ptr::addr_of_mut!((*_6));
_31.2 = _5;
_21 = _16.fld1;
_18 = _16.fld0;
(*_3) = !_12;
_28 = Adt51 { fld0: _31.2 };
_3 = core::ptr::addr_of_mut!(_9);
Goto(bb5)
}
bb5 = {
(*_24) = [42648_u16,46262_u16,19713_u16,55342_u16,37865_u16,8542_u16,15178_u16,26122_u16];
_10 = (*_11) >> (*_6);
_9 = (*_6) ^ _12;
_31.0 = [_16.fld1,_16.fld1,_21,_21];
(*_11) = (*_4) >> _15;
RET = !_9;
_31.1 = [(-29779_i16),(-30431_i16),29419_i16,8913_i16];
_28 = Adt51 { fld0: _31.2 };
_19 = _20;
_28.fld0 = !_5;
_2 = -_9;
_16.fld2.fld0 = [_16.fld0,_18,_18,_18,_18,_16.fld0,_18];
_25 = (*_4) * _1;
_16.fld6.0 = [_28.fld0,_5,_28.fld0];
_16.fld1 = _21;
Goto(bb6)
}
bb6 = {
Call(_36, bb7, dump_var(17_usize, 8_usize, Move(_8), 14_usize, Move(_14), 12_usize, Move(_12), 21_usize, Move(_21)))
}
bb7 = {
Call(_36, bb8, dump_var(17_usize, 17_usize, Move(_17), 23_usize, Move(_23), 30_usize, Move(_30), 7_usize, Move(_7)))
}
bb8 = {
Call(_36, bb9, dump_var(17_usize, 5_usize, Move(_5), 37_usize, _37, 37_usize, _37, 37_usize, _37))
}
bb9 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn18(mut _1: *const i128,mut _2: isize,mut _3: f32,mut _4: *const i128,mut _5: i64) -> i128 {
mir! {
type RET = i128;
let _6: bool;
let _7: u32;
let _8: isize;
let _9: Adt50;
let _10: bool;
let _11: isize;
let _12: [char; 4];
let _13: u8;
let _14: (f32, u16);
let _15: isize;
let _16: i8;
let _17: ();
let _18: ();
{
RET = 10172137474065981998_u64 as i128;
_3 = 2754715550_u32 as f32;
_3 = 17634600536295920062_usize as f32;
match _2 {
9223372036854775807 => bb2,
_ => bb1
}
}
bb1 = {
Return()
}
bb2 = {
_2 = !(-9223372036854775808_isize);
_6 = !false;
_6 = false;
_1 = _4;
RET = 1414466864666895235984375926042808411_i128;
_6 = !true;
_3 = 6689924965090529560_usize as f32;
_5 = -3668839880226534815_i64;
_2 = (-9223372036854775808_isize);
_5 = 4805018971764914117_i64;
match _2 {
0 => bb1,
340282366920938463454151235394913435648 => bb4,
_ => bb3
}
}
bb3 = {
Return()
}
bb4 = {
RET = (-19615202136044067765983634673494036996_i128);
_4 = _1;
_2 = (-9223372036854775808_isize);
_4 = _1;
_1 = _4;
RET = 31317_i16 as i128;
_7 = 1527780917_u32;
match _2 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb5,
4 => bb6,
340282366920938463454151235394913435648 => bb8,
_ => bb7
}
}
bb5 = {
Return()
}
bb6 = {
_2 = !(-9223372036854775808_isize);
_6 = !false;
_6 = false;
_1 = _4;
RET = 1414466864666895235984375926042808411_i128;
_6 = !true;
_3 = 6689924965090529560_usize as f32;
_5 = -3668839880226534815_i64;
_2 = (-9223372036854775808_isize);
_5 = 4805018971764914117_i64;
match _2 {
0 => bb1,
340282366920938463454151235394913435648 => bb4,
_ => bb3
}
}
bb7 = {
Return()
}
bb8 = {
_4 = _1;
_3 = (-20_i8) as f32;
_3 = (-23622309328963589852562538139632895611_i128) as f32;
_3 = (-6847_i16) as f32;
_2 = 114_isize - (-9223372036854775808_isize);
RET = 7_usize as i128;
_8 = _7 as isize;
_5 = (-1993030272129578045_i64);
RET = (-21316623770422735094503358614582929_i128) * 65192238308330476209533125539238382193_i128;
_3 = 4_usize as f32;
_9.fld0 = [_6,_6,_6,_6,_6,_6,_6];
_4 = _1;
_10 = _6 & _6;
_10 = _6;
_12 = ['\u{3f731}','\u{2e473}','\u{dfd1e}','\u{46988}'];
RET = !80559603994272303920155490657292784637_i128;
_3 = _5 as f32;
_12 = ['\u{30349}','\u{96260}','\u{a14e6}','\u{b843c}'];
_1 = _4;
_4 = _1;
_4 = _1;
_8 = _2;
_11 = _2 << _5;
match _7 {
1527780917 => bb10,
_ => bb9
}
}
bb9 = {
Return()
}
bb10 = {
_9.fld1 = [_7,_7];
_8 = _11;
_10 = _6;
_4 = _1;
_10 = _6;
_6 = _10;
RET = (-163611341844942833210307029659332382808_i128) + (-99694852251047383531638538550481180241_i128);
_4 = _1;
_1 = _4;
_2 = !_11;
match _5 {
0 => bb11,
1 => bb12,
2 => bb13,
3 => bb14,
4 => bb15,
5 => bb16,
340282366920938463461381577159638633411 => bb18,
_ => bb17
}
}
bb11 = {
_2 = !(-9223372036854775808_isize);
_6 = !false;
_6 = false;
_1 = _4;
RET = 1414466864666895235984375926042808411_i128;
_6 = !true;
_3 = 6689924965090529560_usize as f32;
_5 = -3668839880226534815_i64;
_2 = (-9223372036854775808_isize);
_5 = 4805018971764914117_i64;
match _2 {
0 => bb1,
340282366920938463454151235394913435648 => bb4,
_ => bb3
}
}
bb12 = {
_4 = _1;
_3 = (-20_i8) as f32;
_3 = (-23622309328963589852562538139632895611_i128) as f32;
_3 = (-6847_i16) as f32;
_2 = 114_isize - (-9223372036854775808_isize);
RET = 7_usize as i128;
_8 = _7 as isize;
_5 = (-1993030272129578045_i64);
RET = (-21316623770422735094503358614582929_i128) * 65192238308330476209533125539238382193_i128;
_3 = 4_usize as f32;
_9.fld0 = [_6,_6,_6,_6,_6,_6,_6];
_4 = _1;
_10 = _6 & _6;
_10 = _6;
_12 = ['\u{3f731}','\u{2e473}','\u{dfd1e}','\u{46988}'];
RET = !80559603994272303920155490657292784637_i128;
_3 = _5 as f32;
_12 = ['\u{30349}','\u{96260}','\u{a14e6}','\u{b843c}'];
_1 = _4;
_4 = _1;
_4 = _1;
_8 = _2;
_11 = _2 << _5;
match _7 {
1527780917 => bb10,
_ => bb9
}
}
bb13 = {
Return()
}
bb14 = {
Return()
}
bb15 = {
Return()
}
bb16 = {
RET = (-19615202136044067765983634673494036996_i128);
_4 = _1;
_2 = (-9223372036854775808_isize);
_4 = _1;
_1 = _4;
RET = 31317_i16 as i128;
_7 = 1527780917_u32;
match _2 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb5,
4 => bb6,
340282366920938463454151235394913435648 => bb8,
_ => bb7
}
}
bb17 = {
Return()
}
bb18 = {
_6 = _10 > _10;
_12 = ['\u{b3017}','\u{c3d36}','\u{9806c}','\u{ae127}'];
Goto(bb19)
}
bb19 = {
Call(_17, bb20, dump_var(18_usize, 11_usize, Move(_11), 2_usize, Move(_2), 8_usize, Move(_8), 6_usize, Move(_6)))
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn19(mut _1: i32,mut _2: i32,mut _3: i128,mut _4: *mut *const i128,mut _5: *mut *const i128,mut _6: i64,mut _7: i64,mut _8: i16,mut _9: [i64; 4],mut _10: *mut *const i128,mut _11: char,mut _12: char,mut _13: i8,mut _14: i32,mut _15: i8,mut _16: *const i128) -> u8 {
mir! {
type RET = u8;
let _17: bool;
let _18: Adt66;
let _19: Adt54;
let _20: f64;
let _21: Adt55;
let _22: f64;
let _23: Adt64;
let _24: [bool; 7];
let _25: f64;
let _26: [i8; 5];
let _27: *mut u8;
let _28: i64;
let _29: bool;
let _30: isize;
let _31: Adt65;
let _32: (f32, u16);
let _33: [i8; 5];
let _34: [u32; 2];
let _35: i64;
let _36: [char; 4];
let _37: [bool; 6];
let _38: isize;
let _39: Adt64;
let _40: usize;
let _41: [i64; 4];
let _42: [i8; 5];
let _43: u64;
let _44: i128;
let _45: Adt52;
let _46: [i8; 5];
let _47: [u32; 2];
let _48: f32;
let _49: ([char; 4], [i16; 4], u128, f32);
let _50: ();
let _51: ();
{
_5 = _10;
_15 = _13;
(*_16) = _3;
_10 = _4;
_16 = (*_5);
_18.fld0 = _8 > _8;
_1 = (*_16) as i32;
_10 = _5;
(*_5) = core::ptr::addr_of!((*_16));
_18.fld1 = _11;
_4 = _10;
_18.fld6.0 = [206326669918353441076489939031100365763_u128,288659747056008169025502033192257674637_u128,79020263345125713707637825854336247810_u128];
_13 = !_15;
_19.fld2 = core::ptr::addr_of_mut!(_17);
_21.fld0 = _18.fld6.0;
_18.fld0 = true;
_14 = (*_16) as i32;
(*_5) = core::ptr::addr_of!((*_16));
_8 = 19626_i16;
_2 = -_14;
_3 = (*_16);
Goto(bb1)
}
bb1 = {
_22 = _8 as f64;
_18.fld2.fld0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_11 = _18.fld1;
_18.fld4 = core::ptr::addr_of!((*_16));
_18.fld2.fld1 = [171283917_u32,965479021_u32];
_18.fld2.fld0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
(*_5) = core::ptr::addr_of!(_3);
_8 = (-2869_i16) + 6945_i16;
_15 = 98_u8 as i8;
_18.fld2.fld1 = [3950135298_u32,742032238_u32];
Goto(bb2)
}
bb2 = {
(*_5) = core::ptr::addr_of!((*_16));
_6 = _7;
_22 = _6 as f64;
_14 = _2 & _1;
_18.fld3 = [(*_16),(*_16),_3,_3,_3,_3,_3];
_19.fld1 = _12;
_21 = Adt55 { fld0: _18.fld6.0 };
_19.fld0 = _9;
_21.fld0 = _18.fld6.0;
_5 = _4;
RET = !95_u8;
(*_10) = core::ptr::addr_of!((*_16));
_3 = (*_16) * (*_16);
_1 = _14 - _14;
(*_16) = _3;
RET = _7 as u8;
_2 = _7 as i32;
_17 = _14 > _1;
_8 = 29982_i16;
_24 = _18.fld2.fld0;
(*_16) = _3;
_4 = _5;
_12 = _18.fld1;
_29 = !_17;
_29 = !_17;
match _8 {
0 => bb1,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
29982 => bb9,
_ => bb8
}
}
bb3 = {
_22 = _8 as f64;
_18.fld2.fld0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_11 = _18.fld1;
_18.fld4 = core::ptr::addr_of!((*_16));
_18.fld2.fld1 = [171283917_u32,965479021_u32];
_18.fld2.fld0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
(*_5) = core::ptr::addr_of!(_3);
_8 = (-2869_i16) + 6945_i16;
_15 = 98_u8 as i8;
_18.fld2.fld1 = [3950135298_u32,742032238_u32];
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
(*_4) = core::ptr::addr_of!((*_16));
_23.fld1 = [_13,_13,_13,_15,_13];
_17 = _29;
_10 = _4;
_25 = 1316514145878032324_u64 as f64;
(*_16) = _3 | _3;
(*_5) = _18.fld4;
_1 = -_2;
_31.fld2.fld3 = [_8,_8,_8,_8];
_24 = _18.fld2.fld0;
_13 = !_15;
(*_5) = _16;
_2 = -_14;
(*_5) = core::ptr::addr_of!((*_16));
(*_16) = _29 as i128;
_31.fld0.fld1 = _12;
match _8 {
0 => bb3,
1 => bb6,
2 => bb10,
29982 => bb12,
_ => bb11
}
}
bb10 = {
(*_5) = core::ptr::addr_of!((*_16));
_6 = _7;
_22 = _6 as f64;
_14 = _2 & _1;
_18.fld3 = [(*_16),(*_16),_3,_3,_3,_3,_3];
_19.fld1 = _12;
_21 = Adt55 { fld0: _18.fld6.0 };
_19.fld0 = _9;
_21.fld0 = _18.fld6.0;
_5 = _4;
RET = !95_u8;
(*_10) = core::ptr::addr_of!((*_16));
_3 = (*_16) * (*_16);
_1 = _14 - _14;
(*_16) = _3;
RET = _7 as u8;
_2 = _7 as i32;
_17 = _14 > _1;
_8 = 29982_i16;
_24 = _18.fld2.fld0;
(*_16) = _3;
_4 = _5;
_12 = _18.fld1;
_29 = !_17;
_29 = !_17;
match _8 {
0 => bb1,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
29982 => bb9,
_ => bb8
}
}
bb11 = {
Return()
}
bb12 = {
_23.fld0 = [2140365639_u32,1343453788_u32];
_18.fld2 = Adt50 { fld0: _24,fld1: _23.fld0 };
_23.fld1 = [_15,_15,_13,_13,_15];
_31.fld2.fld0.fld4 = 279790289193181668036548656945849128441_u128 as i16;
_31.fld2.fld0.fld1 = Adt55 { fld0: _18.fld6.0 };
_31.fld2.fld0.fld1 = Move(_21);
_19.fld1 = _12;
_31.fld0.fld2 = core::ptr::addr_of_mut!(_29);
_32.1 = _15 as u16;
_28 = _6;
_23.fld0 = _18.fld2.fld1;
_31.fld2.fld0.fld3.0 = core::ptr::addr_of!(_32.1);
_13 = (*_16) as i8;
RET = 201_u8;
_9 = [_7,_28,_6,_28];
_16 = (*_4);
(*_5) = core::ptr::addr_of!(_3);
_31.fld7 = _23.fld1;
_18.fld3 = [(*_16),(*_16),_3,(*_16),(*_16),(*_16),(*_16)];
Goto(bb13)
}
bb13 = {
_11 = _31.fld0.fld1;
_31.fld7 = [_13,_13,_15,_13,_15];
_31.fld0.fld0 = [_7,_7,_7,_28];
_33 = [_13,_13,_15,_13,_13];
_18.fld3 = [(*_16),_3,_3,_3,(*_16),(*_16),(*_16)];
_18.fld3 = [(*_16),(*_16),(*_16),(*_16),(*_16),(*_16),_3];
_31.fld2.fld3 = [_8,_8,_31.fld2.fld0.fld4,_31.fld2.fld0.fld4];
(*_16) = _3 + _3;
_18.fld6.0 = _31.fld2.fld0.fld1.fld0;
_31.fld2.fld0.fld5 = core::ptr::addr_of_mut!(_37);
_31.fld0 = Adt54 { fld0: _9,fld1: _19.fld1,fld2: _19.fld2 };
_34 = [3586664526_u32,3096377807_u32];
_39 = Adt64 { fld0: _18.fld2.fld1,fld1: _31.fld7 };
_31.fld0.fld2 = core::ptr::addr_of_mut!(_29);
_37 = [_17,_29,_29,_29,_17,_17];
_31.fld2.fld0.fld5 = core::ptr::addr_of_mut!(_37);
_31.fld2.fld0.fld5 = core::ptr::addr_of_mut!(_37);
_31.fld2.fld2 = !18_isize;
_23 = Adt64 { fld0: _34,fld1: _39.fld1 };
_31.fld0.fld0 = _9;
_19.fld1 = _31.fld0.fld1;
_25 = _22;
match _8 {
0 => bb14,
1 => bb15,
2 => bb16,
3 => bb17,
4 => bb18,
29982 => bb20,
_ => bb19
}
}
bb14 = {
_23.fld0 = [2140365639_u32,1343453788_u32];
_18.fld2 = Adt50 { fld0: _24,fld1: _23.fld0 };
_23.fld1 = [_15,_15,_13,_13,_15];
_31.fld2.fld0.fld4 = 279790289193181668036548656945849128441_u128 as i16;
_31.fld2.fld0.fld1 = Adt55 { fld0: _18.fld6.0 };
_31.fld2.fld0.fld1 = Move(_21);
_19.fld1 = _12;
_31.fld0.fld2 = core::ptr::addr_of_mut!(_29);
_32.1 = _15 as u16;
_28 = _6;
_23.fld0 = _18.fld2.fld1;
_31.fld2.fld0.fld3.0 = core::ptr::addr_of!(_32.1);
_13 = (*_16) as i8;
RET = 201_u8;
_9 = [_7,_28,_6,_28];
_16 = (*_4);
(*_5) = core::ptr::addr_of!(_3);
_31.fld7 = _23.fld1;
_18.fld3 = [(*_16),(*_16),_3,(*_16),(*_16),(*_16),(*_16)];
Goto(bb13)
}
bb15 = {
_22 = _8 as f64;
_18.fld2.fld0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
_11 = _18.fld1;
_18.fld4 = core::ptr::addr_of!((*_16));
_18.fld2.fld1 = [171283917_u32,965479021_u32];
_18.fld2.fld0 = [_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0,_18.fld0];
(*_5) = core::ptr::addr_of!(_3);
_8 = (-2869_i16) + 6945_i16;
_15 = 98_u8 as i8;
_18.fld2.fld1 = [3950135298_u32,742032238_u32];
Goto(bb2)
}
bb16 = {
(*_5) = core::ptr::addr_of!((*_16));
_6 = _7;
_22 = _6 as f64;
_14 = _2 & _1;
_18.fld3 = [(*_16),(*_16),_3,_3,_3,_3,_3];
_19.fld1 = _12;
_21 = Adt55 { fld0: _18.fld6.0 };
_19.fld0 = _9;
_21.fld0 = _18.fld6.0;
_5 = _4;
RET = !95_u8;
(*_10) = core::ptr::addr_of!((*_16));
_3 = (*_16) * (*_16);
_1 = _14 - _14;
(*_16) = _3;
RET = _7 as u8;
_2 = _7 as i32;
_17 = _14 > _1;
_8 = 29982_i16;
_24 = _18.fld2.fld0;
(*_16) = _3;
_4 = _5;
_12 = _18.fld1;
_29 = !_17;
_29 = !_17;
match _8 {
0 => bb1,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
29982 => bb9,
_ => bb8
}
}
bb17 = {
(*_4) = core::ptr::addr_of!((*_16));
_23.fld1 = [_13,_13,_13,_15,_13];
_17 = _29;
_10 = _4;
_25 = 1316514145878032324_u64 as f64;
(*_16) = _3 | _3;
(*_5) = _18.fld4;
_1 = -_2;
_31.fld2.fld3 = [_8,_8,_8,_8];
_24 = _18.fld2.fld0;
_13 = !_15;
(*_5) = _16;
_2 = -_14;
(*_5) = core::ptr::addr_of!((*_16));
(*_16) = _29 as i128;
_31.fld0.fld1 = _12;
match _8 {
0 => bb3,
1 => bb6,
2 => bb10,
29982 => bb12,
_ => bb11
}
}
bb18 = {
(*_5) = core::ptr::addr_of!((*_16));
_6 = _7;
_22 = _6 as f64;
_14 = _2 & _1;
_18.fld3 = [(*_16),(*_16),_3,_3,_3,_3,_3];
_19.fld1 = _12;
_21 = Adt55 { fld0: _18.fld6.0 };
_19.fld0 = _9;
_21.fld0 = _18.fld6.0;
_5 = _4;
RET = !95_u8;
(*_10) = core::ptr::addr_of!((*_16));
_3 = (*_16) * (*_16);
_1 = _14 - _14;
(*_16) = _3;
RET = _7 as u8;
_2 = _7 as i32;
_17 = _14 > _1;
_8 = 29982_i16;
_24 = _18.fld2.fld0;
(*_16) = _3;
_4 = _5;
_12 = _18.fld1;
_29 = !_17;
_29 = !_17;
match _8 {
0 => bb1,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
29982 => bb9,
_ => bb8
}
}
bb19 = {
Return()
}
bb20 = {
_29 = _17;
_31.fld0.fld0 = [_6,_6,_28,_7];
_31.fld3 = _18.fld4;
_20 = _2 as f64;
_31.fld2.fld0.fld3.2 = [_8,_31.fld2.fld0.fld4,_8,_31.fld2.fld0.fld4];
_41 = [_28,_28,_7,_28];
_1 = !_2;
_40 = !258102974114446194_usize;
_7 = _28 + _6;
_31.fld0.fld1 = _11;
_6 = !_28;
_33 = [_13,_13,_13,_13,_13];
_31.fld7 = [_13,_13,_13,_13,_13];
_42 = [_13,_13,_15,_13,_13];
_7 = !_28;
_42 = _23.fld1;
_31.fld2.fld0.fld3.1 = core::ptr::addr_of!(_8);
(*_10) = _31.fld3;
_35 = !_28;
_46 = [_13,_13,_13,_13,_13];
_12 = _11;
_18.fld0 = !_17;
_45.fld2 = [_32.1,_32.1,_32.1,_32.1,_32.1,_32.1,_32.1,_32.1];
Goto(bb21)
}
bb21 = {
Call(_50, bb22, dump_var(19_usize, 1_usize, Move(_1), 17_usize, Move(_17), 40_usize, Move(_40), 35_usize, Move(_35)))
}
bb22 = {
Call(_50, bb23, dump_var(19_usize, 37_usize, Move(_37), 12_usize, Move(_12), 9_usize, Move(_9), 2_usize, Move(_2)))
}
bb23 = {
Call(_50, bb24, dump_var(19_usize, 6_usize, Move(_6), 13_usize, Move(_13), 15_usize, Move(_15), 33_usize, Move(_33)))
}
bb24 = {
Return()
}

}
}
pub fn main() {
                println!("{:?}", fn0(std::hint::black_box(true), std::hint::black_box('\u{38011}'), std::hint::black_box((-52_isize)), std::hint::black_box(39_i8), std::hint::black_box((-17452_i16)), std::hint::black_box(532488124_i32), std::hint::black_box(2396981837188704869_i64), std::hint::black_box((-112913224518183567684039771191221718698_i128)), std::hint::black_box(5_usize), std::hint::black_box(212_u8), std::hint::black_box(14652_u16), std::hint::black_box(203994544_u32), std::hint::black_box(16016548011313921814_u64), std::hint::black_box(263633018753762472113177410538654844809_u128)));
                
            }
#[derive(Debug)]
pub struct Adt50 {
fld0: [bool; 7],
fld1: [u32; 2],
}
#[derive(Debug,Copy,Clone)]
pub struct Adt51 {
fld0: u128,
}
#[derive(Debug,Copy,Clone)]
pub struct Adt52 {
fld0: bool,
fld1: usize,
fld2: [u16; 8],
}
#[derive(Debug)]
pub struct Adt53 {
fld0: i128,
fld1: *const i32,
fld2: [i8; 5],
fld3: *const *const [bool; 7],
fld4: i16,
fld5: ([u128; 3], *mut u32),
}
#[derive(Debug,Copy,Clone)]
pub struct Adt54 {
fld0: [i64; 4],
fld1: char,
fld2: *mut bool,
}
#[derive(Debug)]
pub struct Adt55 {
fld0: [u128; 3],
}
#[derive(Debug)]
pub struct Adt56 {
fld0: f64,
fld1: (*const u16, *const i16, [i16; 4]),
fld2: *const *const [bool; 7],
fld3: *const u16,
}
#[derive(Debug)]
pub struct Adt57 {
fld0: i16,
fld1: u8,
fld2: Adt53,
fld3: [u128; 5],
}
#[derive(Debug)]
pub struct Adt58 {
fld0: [bool; 7],
fld1: Adt55,
fld2: *const *const [bool; 7],
fld3: (*const u16, *const i16, [i16; 4]),
fld4: i16,
fld5: *mut [bool; 6],
}
#[derive(Debug,Copy,Clone)]
pub struct Adt59 {
fld0: *const i128,
fld1: *mut *const i128,
fld2: (usize, i128, *mut isize, *mut isize, i32, u16),
fld3: Adt54,
fld4: *mut *const [bool; 7],
fld5: [u128; 5],
fld6: i64,
fld7: *mut [u16; 8],
}
#[derive(Debug)]
pub struct Adt60 {
fld0: *const *const [bool; 7],
fld1: i16,
}
#[derive(Debug)]
pub struct Adt61 {
fld0: [i8; 5],
fld1: *const i32,
fld2: *mut [bool; 6],
fld3: i8,
fld4: i128,
}
#[derive(Debug)]
pub struct Adt62 {
fld0: Adt58,
fld1: *const *const [bool; 7],
fld2: isize,
fld3: [i16; 4],
}
#[derive(Debug)]
pub struct Adt63 {
fld0: bool,
fld1: (*const u16, u64, *const i32, f64),
}
#[derive(Debug,Copy,Clone)]
pub struct Adt64 {
fld0: [u32; 2],
fld1: [i8; 5],
}
#[derive(Debug)]
pub struct Adt65 {
fld0: Adt54,
fld1: u128,
fld2: Adt62,
fld3: *const i128,
fld4: *mut u32,
fld5: [u128; 5],
fld6: *const u16,
fld7: [i8; 5],
}
#[derive(Debug)]
pub struct Adt66 {
fld0: bool,
fld1: char,
fld2: Adt50,
fld3: [i128; 7],
fld4: *const i128,
fld5: *mut u8,
fld6: ([u128; 3], *mut u32),
}

