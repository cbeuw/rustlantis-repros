#![recursion_limit = "256"]
    #![feature(custom_mir, core_intrinsics, const_hash)]
    #![allow(unused_parens, unused_assignments, overflowing_literals)]
    extern crate core;
    use core::intrinsics::mir::*;

    use std::fmt::Debug;

    #[inline(never)]
    fn dump_var(
        f: usize,
        var0: usize, val0: impl Debug,
        var1: usize, val1: impl Debug,
        var2: usize, val2: impl Debug,
        var3: usize, val3: impl Debug,
    ) {
        println!("fn{f}:_{var0} = {val0:?}\n_{var1} = {val1:?}\n_{var2} = {val2:?}\n_{var3} = {val3:?}");
    }
    #[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn0(mut _1: u64,mut _2: char,mut _3: u128,mut _4: i8,mut _5: i32) -> ([u64; 6],) {
mir! {
type RET = ([u64; 6],);
let _6: ((isize, i64), ([u64; 6],));
let _7: i64;
let _8: i8;
let _9: [u64; 3];
let _10: char;
let _11: usize;
let _12: char;
let _13: i128;
let _14: f32;
let _15: [i32; 1];
let _16: u64;
let _17: (f32, i8, i16);
let _18: *const isize;
let _19: ((isize, i64), ([u64; 6],));
let _20: *mut char;
let _21: [u64; 3];
let _22: u8;
let _23: ([u64; 6],);
let _24: u8;
let _25: isize;
let _26: [u64; 3];
let _27: f32;
let _28: ();
let _29: ();
{
_1 = 17956037624743070084_u64 - 2753209833343510743_u64;
_1 = 99_i8 as u64;
_6.0.0 = (-40_isize);
_6.0.1 = (-3545832562436356608_i64) + (-5168404056424116291_i64);
_1 = 9930046129200565314_u64;
_6.0 = (74_isize, (-5430775777902136225_i64));
_6.0.0 = (-83_i8) as isize;
_2 = '\u{1000fb}';
_6.0.1 = (-78_i8) as i64;
_5 = !(-753029251_i32);
_5 = (-1666855404_i32) | (-1742611493_i32);
_3 = 337142205179566520777737369025000824976_u128 >> _5;
RET.0 = [_1,_1,_1,_1,_1,_1];
_5 = 1258860569_i32;
_4 = !(-125_i8);
_6.1.0 = [_1,_1,_1,_1,_1,_1];
RET = (_6.1.0,);
_3 = 121870212688151286954429360070289089962_u128 / 130351802531271059323511993397688856198_u128;
_6.0 = ((-9223372036854775808_isize), 6298373537104495025_i64);
_4 = 88_i8 * (-10_i8);
RET = (_6.1.0,);
Call(_1, bb1, fn1(_6, _6.0.1, _6.0, _6.1, _6, _5))
}
bb1 = {
RET.0 = _6.1.0;
RET = _6.1;
RET.0 = [_1,_1,_1,_1,_1,_1];
_6.1.0 = [_1,_1,_1,_1,_1,_1];
_6.1.0 = [_1,_1,_1,_1,_1,_1];
RET = (_6.1.0,);
_6.0 = (9223372036854775807_isize, 7039507894902577492_i64);
_7 = -_6.0.1;
_2 = '\u{afbdd}';
_6.0.0 = -126_isize;
RET.0 = _6.1.0;
_2 = '\u{204d6}';
RET = _6.1;
RET.0 = [_1,_1,_1,_1,_1,_1];
_6.0.1 = _7 * _7;
_4 = (-127_i8) + 7_i8;
RET = (_6.1.0,);
RET.0 = [_1,_1,_1,_1,_1,_1];
Goto(bb2)
}
bb2 = {
RET = (_6.1.0,);
_6.0.1 = -_7;
RET = (_6.1.0,);
RET.0 = [_1,_1,_1,_1,_1,_1];
_2 = '\u{4ef65}';
_4 = (-66_i8);
_3 = 142277152504859554437394357414562594117_u128 ^ 256446748371955944299618429726953025601_u128;
_4 = 124_i8 >> _1;
RET = _6.1;
_6.0.0 = (-8_isize) & (-9223372036854775808_isize);
_5 = (-44316704_i32) & 1030900106_i32;
_1 = 13028169966921949855_u64;
_4 = (-60_i8);
_5 = 1318327577_i32;
_8 = _4;
_6.0.1 = _3 as i64;
_8 = (-38459915062262002665680429197950201171_i128) as i8;
_1 = _5 as u64;
_6.0.1 = !_7;
_8 = _4 | _4;
_4 = _8 - _8;
RET.0 = [_1,_1,_1,_1,_1,_1];
_3 = !242550628525562761917473517189794320560_u128;
RET.0 = [_1,_1,_1,_1,_1,_1];
RET = (_6.1.0,);
_6.1.0 = [_1,_1,_1,_1,_1,_1];
_4 = 49934_u16 as i8;
RET = (_6.1.0,);
match _5 {
0 => bb3,
1 => bb4,
2 => bb5,
1318327577 => bb7,
_ => bb6
}
}
bb3 = {
RET.0 = _6.1.0;
RET = _6.1;
RET.0 = [_1,_1,_1,_1,_1,_1];
_6.1.0 = [_1,_1,_1,_1,_1,_1];
_6.1.0 = [_1,_1,_1,_1,_1,_1];
RET = (_6.1.0,);
_6.0 = (9223372036854775807_isize, 7039507894902577492_i64);
_7 = -_6.0.1;
_2 = '\u{afbdd}';
_6.0.0 = -126_isize;
RET.0 = _6.1.0;
_2 = '\u{204d6}';
RET = _6.1;
RET.0 = [_1,_1,_1,_1,_1,_1];
_6.0.1 = _7 * _7;
_4 = (-127_i8) + 7_i8;
RET = (_6.1.0,);
RET.0 = [_1,_1,_1,_1,_1,_1];
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
_6.1.0 = [_1,_1,_1,_1,_1,_1];
_8 = _4 ^ _4;
_10 = _2;
RET.0 = _6.1.0;
_2 = _10;
RET.0 = _6.1.0;
RET.0 = [_1,_1,_1,_1,_1,_1];
_6.0 = ((-9223372036854775808_isize), _7);
_6.1.0 = [_1,_1,_1,_1,_1,_1];
_4 = _5 as i8;
_11 = !4857738304578030785_usize;
_6.0.1 = -_7;
_1 = !7433534807627481538_u64;
Goto(bb8)
}
bb8 = {
_6.1.0 = [_1,_1,_1,_1,_1,_1];
_3 = 83915701907918159795350252839573237469_u128 | 246189640081628079572431507925467801643_u128;
_5 = (-1170993709_i32) + (-1934941821_i32);
RET = (_6.1.0,);
_9 = [_1,_1,_1];
_1 = 60450_u16 as u64;
_12 = _10;
_12 = _10;
_15 = [_5];
_7 = _6.0.1;
_6.0.0 = _3 as isize;
_14 = 223_u8 as f32;
_4 = _8 >> _5;
_17.1 = 2042296055_u32 as i8;
_6.0 = ((-9223372036854775808_isize), _7);
_17.1 = _1 as i8;
Goto(bb9)
}
bb9 = {
_6.0 = (9223372036854775807_isize, _7);
_17 = (_14, _4, (-18184_i16));
_8 = !_17.1;
RET.0 = [_1,_1,_1,_1,_1,_1];
_15 = [_5];
_18 = core::ptr::addr_of!(_6.0.0);
Goto(bb10)
}
bb10 = {
_7 = _6.0.1 * _6.0.1;
_19.0 = (_6.0.0, _7);
_14 = -_17.0;
_9 = [_1,_1,_1];
Goto(bb11)
}
bb11 = {
_17.1 = _8 << _7;
_22 = 81_u8 << _19.0.1;
_20 = core::ptr::addr_of_mut!(_10);
RET = _6.1;
_23.0 = [_1,_1,_1,_1,_1,_1];
_23.0 = [_1,_1,_1,_1,_1,_1];
match _6.0.0 {
0 => bb12,
1 => bb13,
2 => bb14,
3 => bb15,
4 => bb16,
9223372036854775807 => bb18,
_ => bb17
}
}
bb12 = {
RET.0 = _6.1.0;
RET = _6.1;
RET.0 = [_1,_1,_1,_1,_1,_1];
_6.1.0 = [_1,_1,_1,_1,_1,_1];
_6.1.0 = [_1,_1,_1,_1,_1,_1];
RET = (_6.1.0,);
_6.0 = (9223372036854775807_isize, 7039507894902577492_i64);
_7 = -_6.0.1;
_2 = '\u{afbdd}';
_6.0.0 = -126_isize;
RET.0 = _6.1.0;
_2 = '\u{204d6}';
RET = _6.1;
RET.0 = [_1,_1,_1,_1,_1,_1];
_6.0.1 = _7 * _7;
_4 = (-127_i8) + 7_i8;
RET = (_6.1.0,);
RET.0 = [_1,_1,_1,_1,_1,_1];
Goto(bb2)
}
bb13 = {
RET = (_6.1.0,);
_6.0.1 = -_7;
RET = (_6.1.0,);
RET.0 = [_1,_1,_1,_1,_1,_1];
_2 = '\u{4ef65}';
_4 = (-66_i8);
_3 = 142277152504859554437394357414562594117_u128 ^ 256446748371955944299618429726953025601_u128;
_4 = 124_i8 >> _1;
RET = _6.1;
_6.0.0 = (-8_isize) & (-9223372036854775808_isize);
_5 = (-44316704_i32) & 1030900106_i32;
_1 = 13028169966921949855_u64;
_4 = (-60_i8);
_5 = 1318327577_i32;
_8 = _4;
_6.0.1 = _3 as i64;
_8 = (-38459915062262002665680429197950201171_i128) as i8;
_1 = _5 as u64;
_6.0.1 = !_7;
_8 = _4 | _4;
_4 = _8 - _8;
RET.0 = [_1,_1,_1,_1,_1,_1];
_3 = !242550628525562761917473517189794320560_u128;
RET.0 = [_1,_1,_1,_1,_1,_1];
RET = (_6.1.0,);
_6.1.0 = [_1,_1,_1,_1,_1,_1];
_4 = 49934_u16 as i8;
RET = (_6.1.0,);
match _5 {
0 => bb3,
1 => bb4,
2 => bb5,
1318327577 => bb7,
_ => bb6
}
}
bb14 = {
_6.1.0 = [_1,_1,_1,_1,_1,_1];
_3 = 83915701907918159795350252839573237469_u128 | 246189640081628079572431507925467801643_u128;
_5 = (-1170993709_i32) + (-1934941821_i32);
RET = (_6.1.0,);
_9 = [_1,_1,_1];
_1 = 60450_u16 as u64;
_12 = _10;
_12 = _10;
_15 = [_5];
_7 = _6.0.1;
_6.0.0 = _3 as isize;
_14 = 223_u8 as f32;
_4 = _8 >> _5;
_17.1 = 2042296055_u32 as i8;
_6.0 = ((-9223372036854775808_isize), _7);
_17.1 = _1 as i8;
Goto(bb9)
}
bb15 = {
Return()
}
bb16 = {
Return()
}
bb17 = {
Return()
}
bb18 = {
RET.0 = _6.1.0;
_6.0.0 = _19.0.0 ^ _19.0.0;
_25 = !(*_18);
_19.1 = (_23.0,);
_19.0.1 = _6.0.1 * _6.0.1;
_19.1.0 = [_1,_1,_1,_1,_1,_1];
_17.0 = _14 / 1_f32;
_6.0.0 = _25 >> _6.0.1;
_8 = _17.1;
_6.0.1 = _7 - _7;
_23 = (_6.1.0,);
_9 = [_1,_1,_1];
_24 = !_22;
_13 = _19.0.1 as i128;
RET = (_6.1.0,);
_4 = _8 << _5;
_27 = _17.0;
_23.0 = [_1,_1,_1,_1,_1,_1];
Goto(bb19)
}
bb19 = {
Call(_28, bb20, dump_var(0_usize, 2_usize, Move(_2), 3_usize, Move(_3), 23_usize, Move(_23), 12_usize, Move(_12)))
}
bb20 = {
Call(_28, bb21, dump_var(0_usize, 7_usize, Move(_7), 11_usize, Move(_11), 13_usize, Move(_13), 9_usize, Move(_9)))
}
bb21 = {
Call(_28, bb22, dump_var(0_usize, 19_usize, Move(_19), 29_usize, _29, 29_usize, _29, 29_usize, _29))
}
bb22 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn1(mut _1: ((isize, i64), ([u64; 6],)),mut _2: i64,mut _3: (isize, i64),mut _4: ([u64; 6],),mut _5: ((isize, i64), ([u64; 6],)),mut _6: i32) -> u64 {
mir! {
type RET = u64;
let _7: Adt50;
let _8: Adt60;
let _9: f64;
let _10: isize;
let _11: [u64; 6];
let _12: isize;
let _13: (isize, i64);
let _14: [u16; 7];
let _15: char;
let _16: f64;
let _17: bool;
let _18: [i32; 6];
let _19: [u64; 6];
let _20: isize;
let _21: u8;
let _22: *const [u64; 6];
let _23: f32;
let _24: u32;
let _25: [bool; 7];
let _26: u128;
let _27: isize;
let _28: u8;
let _29: Adt51;
let _30: i8;
let _31: ((f32, i8, i16), bool, usize);
let _32: ();
let _33: ();
{
RET = _1.0.0 as u64;
_1.0.0 = _5.0.0 ^ _3.0;
_6 = !(-2016602586_i32);
_3.1 = _5.0.1 << _3.0;
_3.1 = !_1.0.1;
Goto(bb1)
}
bb1 = {
_1.0.1 = -_5.0.1;
_7.fld0 = (-81993855893186620853031767463699549661_i128) as u64;
RET = _7.fld0 % 5966339523257493858_u64;
_6 = !745217711_i32;
_1.1.0 = [_7.fld0,_7.fld0,_7.fld0,_7.fld0,_7.fld0,_7.fld0];
_7 = Adt50 { fld0: 17936975681397849931_u64 };
_3.0 = -_1.0.0;
_5.1 = _4;
_6 = 88444230766075807159167718329309054927_u128 as i32;
_3 = _1.0;
_3 = _5.0;
_1.0.1 = 152615995418382634678827979424902464766_i128 as i64;
_8.fld0 = 6_usize as f64;
_5.1.0 = [_7.fld0,_7.fld0,_7.fld0,_7.fld0,_7.fld0,_7.fld0];
_7.fld0 = 15949733853229566339_u64 % 16112831247994412199_u64;
_1.1.0 = [_7.fld0,_7.fld0,_7.fld0,_7.fld0,_7.fld0,_7.fld0];
_9 = _8.fld0 + _8.fld0;
RET = _7.fld0 | _7.fld0;
_3.0 = true as isize;
match _5.0.0 {
0 => bb2,
1 => bb3,
340282366920938463454151235394913435648 => bb5,
_ => bb4
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
RET = _7.fld0;
_1.0 = (_5.0.0, _5.0.1);
_5 = (_1.0, _4);
_8 = Adt60 { fld0: _9,fld1: _7.fld0 };
_5.0 = (_1.0.0, _1.0.1);
_5.0.1 = -_1.0.1;
Goto(bb6)
}
bb6 = {
_2 = 1512459634_u32 as i64;
_3.0 = _5.0.0;
_5.0 = (_3.0, _1.0.1);
_1.0.0 = _5.0.0 + _5.0.0;
Call(_1, bb7, fn2(_7.fld0, _2, _3, _2, _3.0))
}
bb7 = {
_12 = -_3.0;
RET = _8.fld1;
_1.1 = _4;
_3.1 = _1.0.1;
_5 = _1;
_4.0 = _5.1.0;
Call(_13.0, bb8, fn5(_2, _7.fld0, _5, _8.fld0))
}
bb8 = {
_2 = -_5.0.1;
_1.0.1 = !_5.0.1;
_5.1 = _4;
_13 = (_3.0, _3.1);
_1.0.1 = !_2;
_5.0 = (_1.0.0, _1.0.1);
_7.fld0 = (-18_i8) as u64;
Goto(bb9)
}
bb9 = {
_8.fld0 = _9 + _9;
_8.fld1 = _7.fld0 >> _1.0.0;
_5.0.1 = _1.0.0 as i64;
_4 = (_1.1.0,);
_5.0 = (_1.0.0, _13.1);
_1.0.1 = !_3.1;
_14 = [59659_u16,43047_u16,62695_u16,64999_u16,8383_u16,35620_u16,6538_u16];
_4 = (_1.1.0,);
_16 = -_8.fld0;
_12 = _13.0 >> _3.0;
_13.1 = (-4_i8) as i64;
_13.0 = '\u{10491b}' as isize;
_11 = [_8.fld1,_8.fld1,_8.fld1,_8.fld1,_8.fld1,_8.fld1];
_4.0 = [_8.fld1,_8.fld1,_7.fld0,_8.fld1,_7.fld0,_8.fld1];
match _3.0 {
0 => bb1,
340282366920938463454151235394913435648 => bb11,
_ => bb10
}
}
bb10 = {
Return()
}
bb11 = {
_5.0.1 = !_3.1;
_3 = (_1.0.0, _13.1);
_3.1 = !_1.0.1;
_3 = _5.0;
_13 = (_1.0.0, _3.1);
_15 = '\u{9c902}';
_1.1 = (_4.0,);
_5.0.1 = -_13.1;
_14 = [55762_u16,25434_u16,42024_u16,9567_u16,65221_u16,18590_u16,61327_u16];
_13.0 = -_5.0.0;
_9 = _16 / 1_f64;
_13.1 = !_3.1;
_5.1.0 = [_8.fld1,_8.fld1,_8.fld1,_7.fld0,_8.fld1,_8.fld1];
Call(_10, bb12, core::intrinsics::transmute(_12))
}
bb12 = {
_17 = !false;
_3.1 = _15 as i64;
_16 = _9 - _9;
_2 = -_1.0.1;
_14 = [51841_u16,11549_u16,24070_u16,40803_u16,4625_u16,14899_u16,25414_u16];
_18 = [_6,_6,_6,_6,_6,_6];
_1 = _5;
RET = _8.fld1;
_9 = -_16;
_18 = [_6,_6,_6,_6,_6,_6];
_3.0 = _5.0.0 >> _8.fld1;
Goto(bb13)
}
bb13 = {
_3.0 = !_1.0.0;
_22 = core::ptr::addr_of!(_5.1.0);
_1 = _5;
_3.0 = -_13.0;
_16 = _9;
_5.0 = _13;
_3 = _1.0;
_6 = (-1210187560_i32);
_5.0.0 = !_10;
_4 = (_11,);
_23 = _9 as f32;
_5.0 = _13;
_1.1 = (_4.0,);
_2 = _13.1 + _5.0.1;
_1.0.1 = _6 as i64;
_13 = (_3.0, _2);
_13 = _3;
_3.1 = _2 - _1.0.1;
_13.0 = -_3.0;
_8.fld0 = _9;
_5 = _1;
(*_22) = [_8.fld1,_8.fld1,_8.fld1,_8.fld1,_7.fld0,_7.fld0];
_24 = !1604964911_u32;
_1.0 = (_13.0, _3.1);
_25 = [_17,_17,_17,_17,_17,_17,_17];
Goto(bb14)
}
bb14 = {
_10 = _1.0.0 << _13.0;
_17 = _8.fld1 <= _8.fld1;
_10 = _6 as isize;
_2 = _1.0.1 >> _6;
_3 = _5.0;
_21 = _7.fld0 as u8;
_4 = (_1.1.0,);
_14 = [49106_u16,17529_u16,14873_u16,31198_u16,44211_u16,6794_u16,2896_u16];
_1.1.0 = [_7.fld0,_8.fld1,_8.fld1,_7.fld0,_7.fld0,_8.fld1];
_7 = Adt50 { fld0: _8.fld1 };
_1.1.0 = [_7.fld0,_8.fld1,_7.fld0,_8.fld1,_8.fld1,_7.fld0];
_4 = ((*_22),);
_23 = _8.fld1 as f32;
_19 = [_8.fld1,_7.fld0,_7.fld0,_7.fld0,_8.fld1,_7.fld0];
_29.fld0.0 = (_23, 97_i8, 22605_i16);
_29.fld0.0.0 = -_23;
_8 = Adt60 { fld0: _9,fld1: _7.fld0 };
_5.1.0 = _11;
_4.0 = [_8.fld1,_8.fld1,_8.fld1,_7.fld0,_8.fld1,_7.fld0];
_13.1 = _2 - _3.1;
_4.0 = (*_22);
_29.fld0.1 = _17 ^ _17;
_28 = _21 ^ _21;
_4 = _1.1;
_31.0 = (_29.fld0.0.0, _29.fld0.0.1, _29.fld0.0.2);
Goto(bb15)
}
bb15 = {
Call(_32, bb16, dump_var(1_usize, 12_usize, Move(_12), 18_usize, Move(_18), 10_usize, Move(_10), 4_usize, Move(_4)))
}
bb16 = {
Call(_32, bb17, dump_var(1_usize, 1_usize, Move(_1), 6_usize, Move(_6), 14_usize, Move(_14), 25_usize, Move(_25)))
}
bb17 = {
Call(_32, bb18, dump_var(1_usize, 3_usize, Move(_3), 33_usize, _33, 33_usize, _33, 33_usize, _33))
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn2(mut _1: u64,mut _2: i64,mut _3: (isize, i64),mut _4: i64,mut _5: isize) -> ((isize, i64), ([u64; 6],)) {
mir! {
type RET = ((isize, i64), ([u64; 6],));
let _6: [i32; 6];
let _7: isize;
let _8: isize;
let _9: [i32; 1];
let _10: f32;
let _11: Adt56;
let _12: ();
let _13: ();
{
RET.0.0 = _5;
RET.1.0 = [_1,_1,_1,_1,_1,_1];
RET.0.1 = false as i64;
_4 = _3.1 | _2;
_4 = !_2;
_2 = -_4;
RET.0.1 = 170_u8 as i64;
RET.1.0 = [_1,_1,_1,_1,_1,_1];
RET.0.1 = _3.1 * _4;
Call(RET.0.0, bb1, fn3(_3, _3.0, _3.0, _5, _3.0, _3.0, _3.1, _3.1, _3.1, _3.1, _3.0))
}
bb1 = {
RET.1.0 = [_1,_1,_1,_1,_1,_1];
_3.0 = _5;
_1 = 4685771611607257927_u64 * 13512585277953343900_u64;
_4 = _2;
_4 = 114663556680271912066420932223054466685_u128 as i64;
RET.0.1 = -_3.1;
RET.0.0 = 59197_u16 as isize;
_2 = _3.1 & _3.1;
RET.0.1 = 11987_u16 as i64;
RET.0.0 = _5 ^ _3.0;
_3 = (_5, _2);
_3.0 = _5 ^ _5;
RET.0 = (_3.0, _3.1);
_4 = 1847312837_i32 as i64;
RET.0 = _3;
_3.0 = _5 & _5;
RET.0 = _3;
RET.1.0 = [_1,_1,_1,_1,_1,_1];
_3.0 = _5;
_6 = [(-394681680_i32),(-1974448821_i32),1321548610_i32,(-1975010139_i32),(-384459354_i32),(-908349357_i32)];
Goto(bb2)
}
bb2 = {
_3 = (_5, _4);
_7 = 49114191042929780637880354424244683214_u128 as isize;
RET.1.0 = [_1,_1,_1,_1,_1,_1];
match _3.0 {
0 => bb3,
1 => bb4,
340282366920938463454151235394913435648 => bb6,
_ => bb5
}
}
bb3 = {
RET.1.0 = [_1,_1,_1,_1,_1,_1];
_3.0 = _5;
_1 = 4685771611607257927_u64 * 13512585277953343900_u64;
_4 = _2;
_4 = 114663556680271912066420932223054466685_u128 as i64;
RET.0.1 = -_3.1;
RET.0.0 = 59197_u16 as isize;
_2 = _3.1 & _3.1;
RET.0.1 = 11987_u16 as i64;
RET.0.0 = _5 ^ _3.0;
_3 = (_5, _2);
_3.0 = _5 ^ _5;
RET.0 = (_3.0, _3.1);
_4 = 1847312837_i32 as i64;
RET.0 = _3;
_3.0 = _5 & _5;
RET.0 = _3;
RET.1.0 = [_1,_1,_1,_1,_1,_1];
_3.0 = _5;
_6 = [(-394681680_i32),(-1974448821_i32),1321548610_i32,(-1975010139_i32),(-384459354_i32),(-908349357_i32)];
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
RET.1.0 = [_1,_1,_1,_1,_1,_1];
Goto(bb7)
}
bb7 = {
RET.1.0 = [_1,_1,_1,_1,_1,_1];
_3 = (_5, _2);
RET.0.1 = (-62_i8) as i64;
_3 = (_5, _2);
match _5 {
0 => bb6,
1 => bb5,
2 => bb8,
3 => bb9,
4 => bb10,
5 => bb11,
6 => bb12,
340282366920938463454151235394913435648 => bb14,
_ => bb13
}
}
bb8 = {
RET.1.0 = [_1,_1,_1,_1,_1,_1];
Goto(bb7)
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
RET.1.0 = [_1,_1,_1,_1,_1,_1];
_3.0 = _5;
_1 = 4685771611607257927_u64 * 13512585277953343900_u64;
_4 = _2;
_4 = 114663556680271912066420932223054466685_u128 as i64;
RET.0.1 = -_3.1;
RET.0.0 = 59197_u16 as isize;
_2 = _3.1 & _3.1;
RET.0.1 = 11987_u16 as i64;
RET.0.0 = _5 ^ _3.0;
_3 = (_5, _2);
_3.0 = _5 ^ _5;
RET.0 = (_3.0, _3.1);
_4 = 1847312837_i32 as i64;
RET.0 = _3;
_3.0 = _5 & _5;
RET.0 = _3;
RET.1.0 = [_1,_1,_1,_1,_1,_1];
_3.0 = _5;
_6 = [(-394681680_i32),(-1974448821_i32),1321548610_i32,(-1975010139_i32),(-384459354_i32),(-908349357_i32)];
Goto(bb2)
}
bb12 = {
_3 = (_5, _4);
_7 = 49114191042929780637880354424244683214_u128 as isize;
RET.1.0 = [_1,_1,_1,_1,_1,_1];
match _3.0 {
0 => bb3,
1 => bb4,
340282366920938463454151235394913435648 => bb6,
_ => bb5
}
}
bb13 = {
RET.1.0 = [_1,_1,_1,_1,_1,_1];
_3.0 = _5;
_1 = 4685771611607257927_u64 * 13512585277953343900_u64;
_4 = _2;
_4 = 114663556680271912066420932223054466685_u128 as i64;
RET.0.1 = -_3.1;
RET.0.0 = 59197_u16 as isize;
_2 = _3.1 & _3.1;
RET.0.1 = 11987_u16 as i64;
RET.0.0 = _5 ^ _3.0;
_3 = (_5, _2);
_3.0 = _5 ^ _5;
RET.0 = (_3.0, _3.1);
_4 = 1847312837_i32 as i64;
RET.0 = _3;
_3.0 = _5 & _5;
RET.0 = _3;
RET.1.0 = [_1,_1,_1,_1,_1,_1];
_3.0 = _5;
_6 = [(-394681680_i32),(-1974448821_i32),1321548610_i32,(-1975010139_i32),(-384459354_i32),(-908349357_i32)];
Goto(bb2)
}
bb14 = {
_11.fld4.fld1.1.0 = [_1,_1,_1,_1,_1,_1];
Goto(bb15)
}
bb15 = {
Call(_12, bb16, dump_var(2_usize, 6_usize, Move(_6), 4_usize, Move(_4), 1_usize, Move(_1), 13_usize, _13))
}
bb16 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn3(mut _1: (isize, i64),mut _2: isize,mut _3: isize,mut _4: isize,mut _5: isize,mut _6: isize,mut _7: i64,mut _8: i64,mut _9: i64,mut _10: i64,mut _11: isize) -> isize {
mir! {
type RET = isize;
let _12: u32;
let _13: i8;
let _14: Adt49;
let _15: Adt63;
let _16: u32;
let _17: u128;
let _18: Adt61;
let _19: *const isize;
let _20: f64;
let _21: usize;
let _22: *mut (f32, i8, i16);
let _23: f64;
let _24: usize;
let _25: isize;
let _26: (usize, *mut i16, [u16; 7], i16);
let _27: Adt58;
let _28: ();
let _29: ();
{
_1.1 = !_8;
_7 = 6175662220968906798_usize as i64;
_11 = 16602_i16 as isize;
match _10 {
0 => bb1,
1 => bb2,
6298373537104495025 => bb4,
_ => bb3
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
_7 = _1.1 >> _10;
RET = (-66837451731722761565726346789926571812_i128) as isize;
_6 = !_4;
_8 = 3345787341_u32 as i64;
Call(RET, bb5, core::intrinsics::bswap(_1.0))
}
bb5 = {
_1 = (_4, _8);
_7 = !_9;
_6 = _1.0 * _3;
_1.0 = -_5;
_2 = -_1.0;
_6 = -_4;
RET = 197976611408814269768190620820767869806_u128 as isize;
_3 = _11;
_8 = (-123_i8) as i64;
_1.0 = _2;
_13 = (-115_i8);
_2 = _4 & _3;
_12 = !2465958067_u32;
_1 = (_6, _7);
_7 = _9 << _2;
_10 = -_1.1;
RET = _4 - _2;
_5 = (-21909_i16) as isize;
_4 = !_5;
_8 = _9;
_13 = -(-105_i8);
_10 = -_7;
_1.1 = 155045810773562993651409280239226405044_u128 as i64;
_11 = 5_usize as isize;
_13 = !34_i8;
_14.fld0.1 = _13 - _13;
_14.fld3.1 = core::ptr::addr_of_mut!(_14.fld0.2);
Goto(bb6)
}
bb6 = {
_14.fld0.0 = _1.0 as f32;
RET = 139714800070127885070913356493969078858_i128 as isize;
_14.fld0.0 = _14.fld0.1 as f32;
_2 = _5 | _1.0;
_14.fld2 = 50451_u16 as i128;
_9 = _14.fld2 as i64;
_12 = !2006094589_u32;
_14.fld3.1 = core::ptr::addr_of_mut!(_14.fld0.2);
_12 = 3506306750_u32;
_14.fld0.2 = _2 as i16;
_15.fld0.fld4.1 = true;
_15.fld0.fld4.0.1 = _14.fld0.1;
_10 = _9;
_15.fld1 = (172_u8, (-1415140291_i32), 148638724193510788375895464139275935046_u128, 28642955183987290585875938356099589473_u128);
_15.fld0.fld0.1 = _14.fld3.1;
Call(_4, bb7, fn4(_15.fld1.1, _15.fld0.fld4.1, _15.fld0.fld0.1, _15.fld1.2, _9, _15.fld1, _5, _15.fld1.3))
}
bb7 = {
_16 = _15.fld1.2 as u32;
_3 = !_5;
_15.fld0.fld0.0 = !_15.fld1.0;
_15.fld0.fld0.0 = _15.fld1.0;
_14.fld2 = !(-140260880698139394112441657161048038100_i128);
_15.fld1.1 = (-1848038461_i32);
_3 = _1.0 ^ _11;
_15.fld0.fld4.0 = (_14.fld0.0, _13, _14.fld0.2);
_1.0 = _2 * _2;
_18.fld0 = core::ptr::addr_of_mut!(_14.fld0.2);
_15.fld0.fld4.0.0 = _14.fld0.0;
_15.fld0.fld3.fld0 = core::ptr::addr_of_mut!(_1.1);
_14.fld0.0 = _15.fld0.fld4.0.0;
_13 = _15.fld1.1 as i8;
_2 = -_1.0;
match _15.fld1.3 {
0 => bb1,
1 => bb2,
2 => bb6,
3 => bb8,
4 => bb9,
5 => bb10,
28642955183987290585875938356099589473 => bb12,
_ => bb11
}
}
bb8 = {
_14.fld0.0 = _1.0 as f32;
RET = 139714800070127885070913356493969078858_i128 as isize;
_14.fld0.0 = _14.fld0.1 as f32;
_2 = _5 | _1.0;
_14.fld2 = 50451_u16 as i128;
_9 = _14.fld2 as i64;
_12 = !2006094589_u32;
_14.fld3.1 = core::ptr::addr_of_mut!(_14.fld0.2);
_12 = 3506306750_u32;
_14.fld0.2 = _2 as i16;
_15.fld0.fld4.1 = true;
_15.fld0.fld4.0.1 = _14.fld0.1;
_10 = _9;
_15.fld1 = (172_u8, (-1415140291_i32), 148638724193510788375895464139275935046_u128, 28642955183987290585875938356099589473_u128);
_15.fld0.fld0.1 = _14.fld3.1;
Call(_4, bb7, fn4(_15.fld1.1, _15.fld0.fld4.1, _15.fld0.fld0.1, _15.fld1.2, _9, _15.fld1, _5, _15.fld1.3))
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
Return()
}
bb12 = {
_14.fld3 = _15.fld0.fld0;
_20 = _1.0 as f64;
_14.fld1.0 = [1947163439066723409_u64,14656194385966752958_u64,7583101031231520567_u64,7700604538105087636_u64,4863118017500022606_u64,5822259890835084558_u64];
_14.fld0 = (_15.fld0.fld4.0.0, _13, _15.fld0.fld4.0.2);
_1 = (_3, _7);
RET = _2;
_18.fld0 = _15.fld0.fld0.1;
_15.fld0.fld4.0.2 = _14.fld2 as i16;
_14.fld2 = 25965263481616697437837415070196767975_i128;
_15.fld0.fld4.0.1 = _13;
_20 = _7 as f64;
_3 = _2;
_16 = _12 % 239248515_u32;
_7 = -_1.1;
_17 = !_15.fld1.2;
_14.fld0.2 = _15.fld0.fld4.0.2;
_15.fld2 = _15.fld0.fld3.fld0;
_15.fld0.fld0.1 = core::ptr::addr_of_mut!(_14.fld0.2);
_2 = _1.0 - _5;
_18.fld0 = core::ptr::addr_of_mut!(_15.fld0.fld4.0.2);
_15.fld0.fld0 = _14.fld3;
_17 = _11 as u128;
_14.fld5 = core::ptr::addr_of_mut!(_10);
_14.fld4 = [_15.fld0.fld4.1,_15.fld0.fld4.1,_15.fld0.fld4.1,_15.fld0.fld4.1,_15.fld0.fld4.1,_15.fld0.fld4.1,_15.fld0.fld4.1];
_15.fld2 = _15.fld0.fld3.fld0;
_15.fld0.fld1 = [11101748218626721062_u64,14443365277052719972_u64,1966091943362264930_u64,17811908611726841268_u64,15548924319773228945_u64,14757047677818201736_u64];
_15.fld0.fld4 = (_14.fld0, false, 5364094427236635862_usize);
Goto(bb13)
}
bb13 = {
_15.fld0.fld4.2 = _20 as usize;
_14.fld0.2 = _15.fld0.fld4.0.2;
_14.fld0 = (_15.fld0.fld4.0.0, _15.fld0.fld4.0.1, _15.fld0.fld4.0.2);
RET = _15.fld0.fld4.2 as isize;
_15.fld0.fld3 = Adt54 { fld0: _14.fld5 };
_6 = _2;
_13 = _15.fld0.fld4.0.1;
match _14.fld3.0 {
0 => bb1,
1 => bb7,
2 => bb8,
3 => bb14,
172 => bb16,
_ => bb15
}
}
bb14 = {
Return()
}
bb15 = {
_14.fld0.0 = _1.0 as f32;
RET = 139714800070127885070913356493969078858_i128 as isize;
_14.fld0.0 = _14.fld0.1 as f32;
_2 = _5 | _1.0;
_14.fld2 = 50451_u16 as i128;
_9 = _14.fld2 as i64;
_12 = !2006094589_u32;
_14.fld3.1 = core::ptr::addr_of_mut!(_14.fld0.2);
_12 = 3506306750_u32;
_14.fld0.2 = _2 as i16;
_15.fld0.fld4.1 = true;
_15.fld0.fld4.0.1 = _14.fld0.1;
_10 = _9;
_15.fld1 = (172_u8, (-1415140291_i32), 148638724193510788375895464139275935046_u128, 28642955183987290585875938356099589473_u128);
_15.fld0.fld0.1 = _14.fld3.1;
Call(_4, bb7, fn4(_15.fld1.1, _15.fld0.fld4.1, _15.fld0.fld0.1, _15.fld1.2, _9, _15.fld1, _5, _15.fld1.3))
}
bb16 = {
RET = _9 as isize;
_15.fld0.fld4.1 = !true;
_24 = _15.fld0.fld0.0 as usize;
_22 = core::ptr::addr_of_mut!(_15.fld0.fld4.0);
_15.fld0.fld1 = [1125733234780824715_u64,17774075019757524734_u64,3795979313554103513_u64,6412161861512272558_u64,2604650599411109623_u64,2595548158605756037_u64];
_15.fld0.fld4.1 = !false;
_15.fld0.fld4.1 = false;
_4 = _15.fld1.0 as isize;
Goto(bb17)
}
bb17 = {
Call(_28, bb18, dump_var(3_usize, 7_usize, Move(_7), 4_usize, Move(_4), 11_usize, Move(_11), 2_usize, Move(_2)))
}
bb18 = {
Call(_28, bb19, dump_var(3_usize, 9_usize, Move(_9), 3_usize, Move(_3), 8_usize, Move(_8), 5_usize, Move(_5)))
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn4(mut _1: i32,mut _2: bool,mut _3: *mut i16,mut _4: u128,mut _5: i64,mut _6: (u8, i32, u128, u128),mut _7: isize,mut _8: u128) -> isize {
mir! {
type RET = isize;
let _9: [u16; 7];
let _10: Adt64;
let _11: Adt53;
let _12: [i32; 6];
let _13: [i32; 1];
let _14: char;
let _15: Adt60;
let _16: isize;
let _17: char;
let _18: isize;
let _19: [i8; 6];
let _20: Adt51;
let _21: ((f32, i8, i16), bool, usize);
let _22: isize;
let _23: i64;
let _24: Adt65;
let _25: *mut char;
let _26: *mut char;
let _27: *const isize;
let _28: ();
let _29: ();
{
_1 = -_6.1;
_5 = 7256877152530285501_i64;
_6 = (0_u8, _1, _4, _4);
_3 = core::ptr::addr_of_mut!((*_3));
_10.fld5 = [_5,_5,_5];
_5 = _2 as i64;
(*_3) = !(-13294_i16);
_8 = !_6.2;
_9 = [8580_u16,44288_u16,64410_u16,22491_u16,18509_u16,4033_u16,49480_u16];
(*_3) = (-15419_i16);
(*_3) = 11223_u16 as i16;
_10.fld5 = [_5,_5,_5];
_10.fld1 = core::ptr::addr_of!(_10.fld4);
_2 = true;
_6.0 = 1755025332475189481_u64 as u8;
RET = _7;
_9 = [38980_u16,48147_u16,9710_u16,39982_u16,43184_u16,26399_u16,16790_u16];
_6.1 = _1;
_1 = (-102_i8) as i32;
_6.1 = _1 << _4;
_6.3 = _6.2;
RET = _8 as isize;
_4 = _5 as u128;
_10.fld4 = [10902480756746368738_u64,5315081145351482740_u64,132873601702904649_u64,635290809106858097_u64,12502378473465733961_u64,8889227000192081384_u64];
_10.fld1 = core::ptr::addr_of!(_10.fld4);
Goto(bb1)
}
bb1 = {
_10.fld3 = (*_3) as f32;
_10.fld0 = [_6.1];
_10.fld2 = -(-150923526754104683999267704433881107026_i128);
_10.fld2 = (-71627721775270426884022814615661185908_i128);
_1 = !_6.1;
RET = _7;
_4 = !_8;
_2 = !true;
Goto(bb2)
}
bb2 = {
_11.fld4 = 2032542040_u32 * 419317386_u32;
_11.fld2 = _8 as isize;
_11.fld3 = [10552218194661296183_u64,5416047858007765247_u64,2880198289939007828_u64];
_10.fld3 = _5 as f32;
_11.fld1.1.0 = [17288713807526970644_u64,6940414262685082151_u64,17290256781675671843_u64,2386109324047628882_u64,6015097319835864120_u64,16984109066920823974_u64];
_6.3 = !_4;
_11.fld3 = [9591396400191215335_u64,4905366667606532598_u64,6223412299773209034_u64];
_6.1 = -_1;
_11.fld1.1.0 = [8836851738025293478_u64,5211021968192647883_u64,11383506515679398157_u64,6153412490617897867_u64,5495248590332159700_u64,7883239602703395174_u64];
_10.fld3 = (*_3) as f32;
_11.fld1.0 = (_7, _5);
_10.fld5 = [_5,_5,_5];
_3 = core::ptr::addr_of_mut!((*_3));
_13 = [_1];
_12 = [_1,_6.1,_1,_6.1,_6.1,_1];
_12 = [_6.1,_1,_1,_6.1,_6.1,_6.1];
_11.fld3 = [8963949099659834800_u64,17859070510428975602_u64,12664687852177990156_u64];
_13 = _10.fld0;
_11.fld1.1 = (_10.fld4,);
_11.fld1.1.0 = _10.fld4;
_6.3 = _4 >> _4;
_6.1 = _11.fld2 as i32;
_1 = _6.1 * _6.1;
match _6.2 {
0 => bb3,
1 => bb4,
148638724193510788375895464139275935046 => bb6,
_ => bb5
}
}
bb3 = {
_10.fld3 = (*_3) as f32;
_10.fld0 = [_6.1];
_10.fld2 = -(-150923526754104683999267704433881107026_i128);
_10.fld2 = (-71627721775270426884022814615661185908_i128);
_1 = !_6.1;
RET = _7;
_4 = !_8;
_2 = !true;
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
_15.fld1 = 6872116544846025076_u64 & 6215235631919590587_u64;
_11.fld1.1 = (_10.fld4,);
_4 = _11.fld1.0.1 as u128;
_16 = _11.fld4 as isize;
(*_3) = 17294_i16;
(*_3) = -6714_i16;
match _6.2 {
0 => bb4,
148638724193510788375895464139275935046 => bb8,
_ => bb7
}
}
bb7 = {
_10.fld3 = (*_3) as f32;
_10.fld0 = [_6.1];
_10.fld2 = -(-150923526754104683999267704433881107026_i128);
_10.fld2 = (-71627721775270426884022814615661185908_i128);
_1 = !_6.1;
RET = _7;
_4 = !_8;
_2 = !true;
Goto(bb2)
}
bb8 = {
_11.fld2 = -_16;
_14 = '\u{a56a3}';
_11.fld0 = -_6.1;
_15.fld1 = 4_usize as u64;
_6.2 = 24202_u16 as u128;
_12 = [_11.fld0,_1,_6.1,_1,_11.fld0,_1];
_10.fld4 = _11.fld1.1.0;
_6.0 = 91_u8;
(*_3) = (-15556_i16) ^ 32653_i16;
_8 = !_6.3;
_14 = '\u{f55fd}';
_15.fld1 = 6850294963904751278_u64;
_1 = _11.fld0 << _6.3;
_6.0 = !74_u8;
_10.fld4 = [_15.fld1,_15.fld1,_15.fld1,_15.fld1,_15.fld1,_15.fld1];
_6.0 = 155_u8 / 175_u8;
_6 = (255_u8, _1, _8, _8);
RET = !_16;
_6.0 = !202_u8;
_10.fld4 = [_15.fld1,_15.fld1,_15.fld1,_15.fld1,_15.fld1,_15.fld1];
_12 = [_6.1,_11.fld0,_6.1,_1,_6.1,_1];
_11.fld4 = 421602307_u32 ^ 2112873253_u32;
_1 = -_6.1;
_15.fld0 = _6.2 as f64;
(*_3) = _11.fld4 as i16;
_11.fld4 = !4229111223_u32;
match _10.fld2 {
0 => bb1,
268654645145668036579351792816107025548 => bb9,
_ => bb6
}
}
bb9 = {
_8 = _6.2;
_5 = _11.fld1.0.1;
_6.3 = _6.2 % 90471758921416293145316151416085546450_u128;
_10.fld4 = [_15.fld1,_15.fld1,_15.fld1,_15.fld1,_15.fld1,_15.fld1];
_2 = !false;
_20.fld0.0.1 = -(-93_i8);
_11.fld1.1.0 = [_15.fld1,_15.fld1,_15.fld1,_15.fld1,_15.fld1,_15.fld1];
_11.fld1.0 = (_11.fld2, _5);
_17 = _14;
_20.fld0.0 = (_10.fld3, 84_i8, (*_3));
_6.0 = 6_u8;
_3 = core::ptr::addr_of_mut!(_20.fld0.0.2);
_12 = [_11.fld0,_1,_1,_1,_6.1,_6.1];
RET = 16471_u16 as isize;
_10.fld5 = [_11.fld1.0.1,_5,_11.fld1.0.1];
_14 = _17;
match _20.fld0.0.1 {
84 => bb11,
_ => bb10
}
}
bb10 = {
_10.fld3 = (*_3) as f32;
_10.fld0 = [_6.1];
_10.fld2 = -(-150923526754104683999267704433881107026_i128);
_10.fld2 = (-71627721775270426884022814615661185908_i128);
_1 = !_6.1;
RET = _7;
_4 = !_8;
_2 = !true;
Goto(bb2)
}
bb11 = {
_11.fld4 = 939058468_u32 * 2154826606_u32;
_5 = -_11.fld1.0.1;
_17 = _14;
_11.fld1.0.1 = !_5;
_15.fld1 = 18004189605844258193_u64 + 17241625926029810636_u64;
_18 = !_7;
_19 = [_20.fld0.0.1,_20.fld0.0.1,_20.fld0.0.1,_20.fld0.0.1,_20.fld0.0.1,_20.fld0.0.1];
_20.fld0.1 = (*_3) <= (*_3);
_20.fld0.0.2 = 10789_i16;
_11.fld0 = _1 << _20.fld0.0.1;
_19 = [_20.fld0.0.1,_20.fld0.0.1,_20.fld0.0.1,_20.fld0.0.1,_20.fld0.0.1,_20.fld0.0.1];
_10.fld1 = core::ptr::addr_of!(_11.fld1.1.0);
_20.fld0.0.0 = -_10.fld3;
RET = !_11.fld2;
_15.fld1 = _6.3 as u64;
_21.0.0 = _20.fld0.0.0 * _20.fld0.0.0;
_15.fld0 = _10.fld2 as f64;
_20.fld0.0.0 = _10.fld3;
_21.0.2 = !(*_3);
_6.2 = _6.3 - _6.3;
_11.fld1.0.1 = _20.fld0.1 as i64;
_19 = [_20.fld0.0.1,_20.fld0.0.1,_20.fld0.0.1,_20.fld0.0.1,_20.fld0.0.1,_20.fld0.0.1];
_22 = _16;
_1 = -_11.fld0;
match _10.fld2 {
0 => bb12,
1 => bb13,
268654645145668036579351792816107025548 => bb15,
_ => bb14
}
}
bb12 = {
_15.fld1 = 6872116544846025076_u64 & 6215235631919590587_u64;
_11.fld1.1 = (_10.fld4,);
_4 = _11.fld1.0.1 as u128;
_16 = _11.fld4 as isize;
(*_3) = 17294_i16;
(*_3) = -6714_i16;
match _6.2 {
0 => bb4,
148638724193510788375895464139275935046 => bb8,
_ => bb7
}
}
bb13 = {
_8 = _6.2;
_5 = _11.fld1.0.1;
_6.3 = _6.2 % 90471758921416293145316151416085546450_u128;
_10.fld4 = [_15.fld1,_15.fld1,_15.fld1,_15.fld1,_15.fld1,_15.fld1];
_2 = !false;
_20.fld0.0.1 = -(-93_i8);
_11.fld1.1.0 = [_15.fld1,_15.fld1,_15.fld1,_15.fld1,_15.fld1,_15.fld1];
_11.fld1.0 = (_11.fld2, _5);
_17 = _14;
_20.fld0.0 = (_10.fld3, 84_i8, (*_3));
_6.0 = 6_u8;
_3 = core::ptr::addr_of_mut!(_20.fld0.0.2);
_12 = [_11.fld0,_1,_1,_1,_6.1,_6.1];
RET = 16471_u16 as isize;
_10.fld5 = [_11.fld1.0.1,_5,_11.fld1.0.1];
_14 = _17;
match _20.fld0.0.1 {
84 => bb11,
_ => bb10
}
}
bb14 = {
_10.fld3 = (*_3) as f32;
_10.fld0 = [_6.1];
_10.fld2 = -(-150923526754104683999267704433881107026_i128);
_10.fld2 = (-71627721775270426884022814615661185908_i128);
_1 = !_6.1;
RET = _7;
_4 = !_8;
_2 = !true;
Goto(bb2)
}
bb15 = {
_24.fld1.fld4 = [_20.fld0.1,_20.fld0.1,_20.fld0.1,_20.fld0.1,_20.fld0.1,_20.fld0.1,_2];
_24.fld3 = !_11.fld4;
_18 = !_11.fld1.0.0;
_11.fld4 = _20.fld0.0.1 as u32;
_25 = core::ptr::addr_of_mut!(_17);
_11.fld1.1.0 = [_15.fld1,_15.fld1,_15.fld1,_15.fld1,_15.fld1,_15.fld1];
_21.2 = 1421862177344601771_usize;
_20.fld0.0.1 = (-71_i8) - 25_i8;
_21.0.1 = _20.fld0.0.1 << _6.2;
Goto(bb16)
}
bb16 = {
Call(_28, bb17, dump_var(4_usize, 16_usize, Move(_16), 9_usize, Move(_9), 14_usize, Move(_14), 12_usize, Move(_12)))
}
bb17 = {
Call(_28, bb18, dump_var(4_usize, 13_usize, Move(_13), 22_usize, Move(_22), 18_usize, Move(_18), 17_usize, Move(_17)))
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn5(mut _1: i64,mut _2: u64,mut _3: ((isize, i64), ([u64; 6],)),mut _4: f64) -> isize {
mir! {
type RET = isize;
let _5: bool;
let _6: [u64; 6];
let _7: Adt51;
let _8: *const [u64; 6];
let _9: Adt53;
let _10: char;
let _11: *const ([u64; 6], (f32, i8, i16), u16);
let _12: f32;
let _13: *const [u64; 6];
let _14: u128;
let _15: *mut *mut i16;
let _16: Adt59;
let _17: i128;
let _18: ((f32, i8, i16), bool, usize);
let _19: [i8; 6];
let _20: ((isize, i64), ([u64; 6],));
let _21: bool;
let _22: Adt60;
let _23: Adt60;
let _24: i32;
let _25: ();
let _26: ();
{
RET = (-17787_i16) as isize;
_3.0.1 = _1 * _1;
RET = !_3.0.0;
_2 = 4679067386108353491_u64 / 12694190474040994567_u64;
_3.0.1 = _3.0.0 as i64;
_3.1.0 = [_2,_2,_2,_2,_2,_2];
RET = _3.0.0 ^ _3.0.0;
RET = (-21771_i16) as isize;
RET = _2 as isize;
RET = !_3.0.0;
_4 = (-84735728142707844850069000523346940998_i128) as f64;
_2 = !17456980009375630669_u64;
_3.0.1 = !_1;
_2 = 4627051672262288071_u64;
_3.1.0 = [_2,_2,_2,_2,_2,_2];
_1 = -_3.0.1;
_6 = [_2,_2,_2,_2,_2,_2];
RET = !_3.0.0;
_3.0.1 = false as i64;
_6 = [_2,_2,_2,_2,_2,_2];
_3.0 = ((-37_isize), _1);
_3.1 = (_6,);
_1 = 428293314_i32 as i64;
RET = _3.0.0;
RET = _3.0.0 * _3.0.0;
_3.0.1 = -_1;
_6 = [_2,_2,_2,_2,_2,_2];
Call(_4, bb1, core::intrinsics::transmute(_1))
}
bb1 = {
_7.fld0.1 = _4 >= _4;
match _3.0.0 {
0 => bb2,
1 => bb3,
2 => bb4,
340282366920938463463374607431768211419 => bb6,
_ => bb5
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
_7.fld0.0.2 = -8135_i16;
_3.1 = (_6,);
_6 = [_2,_2,_2,_2,_2,_2];
_7.fld0.0.1 = !(-77_i8);
_6 = [_2,_2,_2,_2,_2,_2];
_6 = [_2,_2,_2,_2,_2,_2];
RET = _3.0.1 as isize;
RET = !_3.0.0;
_7.fld0.0.1 = -53_i8;
_7.fld0.1 = false;
_7.fld0.0.0 = _7.fld0.0.1 as f32;
match _3.0.0 {
0 => bb5,
340282366920938463463374607431768211419 => bb8,
_ => bb7
}
}
bb7 = {
Return()
}
bb8 = {
_8 = core::ptr::addr_of!(_6);
_7.fld0.2 = 1_usize - 2_usize;
_8 = core::ptr::addr_of!((*_8));
_3.1 = ((*_8),);
_7.fld0.0.1 = !(-46_i8);
_5 = _7.fld0.1 | _7.fld0.1;
_7.fld0.0.0 = _4 as f32;
_7.fld0.2 = 6288568390821961858_usize;
_3.0.1 = _1 & _1;
_4 = 108037066560799645000336208351943009505_u128 as f64;
_5 = !_7.fld0.1;
_3.0.0 = (-9223372036854775808_isize) | 34_isize;
_5 = !_7.fld0.1;
(*_8) = [_2,_2,_2,_2,_2,_2];
(*_8) = [_2,_2,_2,_2,_2,_2];
_2 = 9625757368659402347_u64 | 10168820785394418848_u64;
_6 = [_2,_2,_2,_2,_2,_2];
_9.fld1.0 = _3.0;
_3.1.0 = (*_8);
_3.0.0 = !_9.fld1.0.0;
_9.fld4 = 2143510295_u32;
_9.fld0 = !549263105_i32;
_2 = 4775476805600903407_u64 % 13025773318662866679_u64;
_9.fld1.1.0 = [_2,_2,_2,_2,_2,_2];
_12 = _7.fld0.0.0;
Call(_2, bb9, core::intrinsics::transmute(_9.fld1.0.0))
}
bb9 = {
_9.fld1 = (_3.0, _3.1);
_13 = core::ptr::addr_of!((*_8));
_7.fld0.2 = 7_usize;
_9.fld4 = 1747094543_u32;
_13 = core::ptr::addr_of!(_3.1.0);
_9.fld2 = _5 as isize;
_3.1.0 = [_2,_2,_2,_2,_2,_2];
RET = -_9.fld2;
Call(_1, bb10, fn6(_3.0.0, _13, _7.fld0, _8, _7.fld0.0, _9.fld1.1, _7.fld0.2, _7.fld0.0.0, _13, _9.fld1.0, _9.fld1.0, _5, _9.fld2))
}
bb10 = {
_10 = '\u{4337c}';
_7.fld0.0.2 = 960_i16 * (-20826_i16);
_3.0.0 = _9.fld4 as isize;
_9.fld1.0.1 = _1 * _1;
_7.fld0.0 = (_12, 82_i8, 7379_i16);
_9.fld3 = [_2,_2,_2];
_7.fld0.1 = !_5;
(*_13) = [_2,_2,_2,_2,_2,_2];
_7.fld0.0 = (_12, 115_i8, (-26382_i16));
_6 = [_2,_2,_2,_2,_2,_2];
_13 = _8;
_3 = _9.fld1;
_9.fld1.0.1 = _7.fld0.0.0 as i64;
_14 = 292097376541734540040416582619477052717_u128 >> _3.0.1;
(*_8) = _3.1.0;
_3.1.0 = [_2,_2,_2,_2,_2,_2];
_9.fld1.0.0 = _3.0.0 + _3.0.0;
_3.0.1 = _1 & _9.fld1.0.1;
(*_8) = [_2,_2,_2,_2,_2,_2];
_3 = (_9.fld1.0, _9.fld1.1);
_3.1 = ((*_13),);
_9.fld4 = 3538663320_u32 * 3388941556_u32;
_7.fld0.2 = 4213870922231257302_usize;
_12 = _7.fld0.0.0 / (-0.000000000000000000000000000000000000011535570233632825_f32);
_16.fld4.0.1 = _9.fld4 as i8;
_16.fld4.2 = _7.fld0.2 + _7.fld0.2;
_16.fld2 = core::ptr::addr_of_mut!(_16.fld4.0);
_7.fld0.0.0 = _12;
_9.fld1 = (_3.0, _3.1);
match _7.fld0.0.1 {
0 => bb9,
115 => bb12,
_ => bb11
}
}
bb11 = {
Return()
}
bb12 = {
_16.fld2 = core::ptr::addr_of_mut!(_16.fld4.0);
_3 = _9.fld1;
_17 = (-87371766023197065330984468330946959193_i128) * (-146788801388151431480016569834116101473_i128);
_16.fld4.0 = (_12, _7.fld0.0.1, _7.fld0.0.2);
RET = _3.0.0;
_3 = _9.fld1;
_7.fld0.0.1 = _14 as i8;
_7.fld0.1 = !_5;
_9.fld1.0.1 = -_1;
_16.fld4.0.1 = -_7.fld0.0.1;
_18.2 = _16.fld4.2;
_18.0.2 = _7.fld0.0.2;
Goto(bb13)
}
bb13 = {
_18.1 = !_7.fld0.1;
_3.1.0 = _9.fld1.1.0;
_9.fld1.1 = ((*_8),);
_7.fld0.0.0 = -_16.fld4.0.0;
_19 = [_16.fld4.0.1,_16.fld4.0.1,_7.fld0.0.1,_7.fld0.0.1,_16.fld4.0.1,_7.fld0.0.1];
_4 = _18.2 as f64;
_9.fld0 = _10 as i32;
_20.1 = _3.1;
_18.0.1 = _16.fld4.0.1;
_10 = '\u{88265}';
_17 = !119313157149838554233712371772013818377_i128;
_16.fld1 = [_2,_2,_2,_2,_2,_2];
_3.0.1 = _9.fld1.0.1 + _9.fld1.0.1;
_18 = (_16.fld4.0, _7.fld0.1, _16.fld4.2);
_3.0 = _9.fld1.0;
_7 = Adt51 { fld0: _18 };
match _18.0.2 {
0 => bb14,
340282366920938463463374607431768185074 => bb16,
_ => bb15
}
}
bb14 = {
Return()
}
bb15 = {
_9.fld1 = (_3.0, _3.1);
_13 = core::ptr::addr_of!((*_8));
_7.fld0.2 = 7_usize;
_9.fld4 = 1747094543_u32;
_13 = core::ptr::addr_of!(_3.1.0);
_9.fld2 = _5 as isize;
_3.1.0 = [_2,_2,_2,_2,_2,_2];
RET = -_9.fld2;
Call(_1, bb10, fn6(_3.0.0, _13, _7.fld0, _8, _7.fld0.0, _9.fld1.1, _7.fld0.2, _7.fld0.0.0, _13, _9.fld1.0, _9.fld1.0, _5, _9.fld2))
}
bb16 = {
_16.fld1 = _6;
_18.0.0 = _16.fld4.0.0 * _7.fld0.0.0;
_21 = !_18.1;
_17 = -(-144841923783930377943213895081786828697_i128);
_18.2 = _7.fld0.2 + _16.fld4.2;
_4 = _2 as f64;
_9.fld0 = (-484287342_i32);
_7.fld0.0 = _16.fld4.0;
_9.fld1.1.0 = [_2,_2,_2,_2,_2,_2];
Goto(bb17)
}
bb17 = {
Call(_25, bb18, dump_var(5_usize, 6_usize, Move(_6), 14_usize, Move(_14), 3_usize, Move(_3), 17_usize, Move(_17)))
}
bb18 = {
Call(_25, bb19, dump_var(5_usize, 19_usize, Move(_19), 26_usize, _26, 26_usize, _26, 26_usize, _26))
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn6(mut _1: isize,mut _2: *const [u64; 6],mut _3: ((f32, i8, i16), bool, usize),mut _4: *const [u64; 6],mut _5: (f32, i8, i16),mut _6: ([u64; 6],),mut _7: usize,mut _8: f32,mut _9: *const [u64; 6],mut _10: (isize, i64),mut _11: (isize, i64),mut _12: bool,mut _13: isize) -> i64 {
mir! {
type RET = i64;
let _14: Adt60;
let _15: f32;
let _16: [u64; 3];
let _17: *const char;
let _18: Adt60;
let _19: i8;
let _20: u64;
let _21: Adt58;
let _22: u16;
let _23: *mut (f32, i8, i16);
let _24: i64;
let _25: u32;
let _26: i8;
let _27: (f32, [u64; 6], u16, [u16; 7]);
let _28: ([u64; 6],);
let _29: [u64; 6];
let _30: Adt57;
let _31: i128;
let _32: i8;
let _33: [isize; 7];
let _34: isize;
let _35: Adt53;
let _36: u128;
let _37: isize;
let _38: *const *mut char;
let _39: ([u64; 6],);
let _40: ((f32, i8, i16), bool, usize);
let _41: f32;
let _42: f32;
let _43: ();
let _44: ();
{
_10.0 = _11.0 >> _1;
(*_4) = [1197903690597261387_u64,12997930506573567774_u64,11859329889062699669_u64,17929644804916488355_u64,7190227804501733458_u64,55074150336338266_u64];
_2 = _4;
(*_9) = [16446395119692195702_u64,144015928064803197_u64,11757612615600873506_u64,17517096660588465301_u64,10336197695254548224_u64,1962328687723512325_u64];
_11.1 = 10095917967958997558_u64 as i64;
(*_2) = [7219271850029926943_u64,4186127010601845049_u64,8891004853264924455_u64,2438884344518029294_u64,2173370856537202413_u64,13461513375551551608_u64];
(*_9) = (*_4);
_3.0.0 = _8 + _5.0;
_14.fld1 = 8579394100177116528_u64 - 14299989921405872261_u64;
(*_9) = [_14.fld1,_14.fld1,_14.fld1,_14.fld1,_14.fld1,_14.fld1];
_8 = 1780795121_u32 as f32;
RET = _10.1 << _10.0;
(*_9) = (*_4);
_9 = core::ptr::addr_of!((*_9));
_5.2 = !_3.0.2;
_18.fld1 = _14.fld1 - _14.fld1;
_14.fld0 = 147143391883997004023866375513152437067_i128 as f64;
Call(_12, bb1, fn7(_11.1, _5.1, (*_2), (*_4), _6.0, _5.0, _9, _4, _3.2, _11.0, _11.0, _13, _10.0, Move(_14), _10.0, _5.1))
}
bb1 = {
_3 = (_5, _12, _7);
_5.2 = _3.0.2 << _11.0;
_5.2 = _3.0.2 & _3.0.2;
_15 = _5.0;
Goto(bb2)
}
bb2 = {
_11.1 = 4051484821_u32 as i64;
_5 = (_15, _3.0.1, _3.0.2);
_2 = _9;
_15 = _3.0.0 - _8;
_15 = _8;
_16 = [_18.fld1,_18.fld1,_18.fld1];
_4 = _9;
_6 = ((*_4),);
_21.fld0 = core::ptr::addr_of!(_11.0);
_9 = _2;
_22 = !39516_u16;
_3 = (_5, _12, _7);
_7 = !_3.2;
_21.fld0 = core::ptr::addr_of!(_1);
_3.0.1 = _5.1 >> _11.1;
_5.0 = -_15;
(*_4) = [_18.fld1,_18.fld1,_18.fld1,_18.fld1,_18.fld1,_18.fld1];
_19 = -_3.0.1;
_11.0 = _10.1 as isize;
Goto(bb3)
}
bb3 = {
_23 = core::ptr::addr_of_mut!(_5);
_15 = (*_23).0 / f32::INFINITY;
_3.0.1 = !(*_23).1;
(*_23).2 = 319189708821528819276944122659174463301_u128 as i16;
_23 = core::ptr::addr_of_mut!(_5);
(*_9) = [_18.fld1,_18.fld1,_18.fld1,_18.fld1,_18.fld1,_18.fld1];
match _3.2 {
0 => bb1,
1 => bb2,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
6 => bb8,
7 => bb10,
_ => bb9
}
}
bb4 = {
_11.1 = 4051484821_u32 as i64;
_5 = (_15, _3.0.1, _3.0.2);
_2 = _9;
_15 = _3.0.0 - _8;
_15 = _8;
_16 = [_18.fld1,_18.fld1,_18.fld1];
_4 = _9;
_6 = ((*_4),);
_21.fld0 = core::ptr::addr_of!(_11.0);
_9 = _2;
_22 = !39516_u16;
_3 = (_5, _12, _7);
_7 = !_3.2;
_21.fld0 = core::ptr::addr_of!(_1);
_3.0.1 = _5.1 >> _11.1;
_5.0 = -_15;
(*_4) = [_18.fld1,_18.fld1,_18.fld1,_18.fld1,_18.fld1,_18.fld1];
_19 = -_3.0.1;
_11.0 = _10.1 as isize;
Goto(bb3)
}
bb5 = {
_3 = (_5, _12, _7);
_5.2 = _3.0.2 << _11.0;
_5.2 = _3.0.2 & _3.0.2;
_15 = _5.0;
Goto(bb2)
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_25 = 858216683_u32;
_24 = -_10.1;
_26 = _15 as i8;
_3.2 = 136_u8 as usize;
_5.1 = _26;
(*_23).2 = !_3.0.2;
_5.0 = -_15;
(*_9) = [_18.fld1,_18.fld1,_18.fld1,_18.fld1,_18.fld1,_18.fld1];
_8 = _5.0 / f32::NAN;
(*_23).2 = _3.0.2;
_3.1 = _12;
_11.1 = _3.1 as i64;
_13 = -_10.0;
_30.fld5 = 623563037_i32 - (-1745269394_i32);
_29 = [_18.fld1,_18.fld1,_18.fld1,_18.fld1,_18.fld1,_18.fld1];
_30.fld4 = !(*_23).2;
_30.fld2.0 = _19 as u8;
(*_9) = [_18.fld1,_18.fld1,_18.fld1,_18.fld1,_18.fld1,_18.fld1];
_3.2 = !_7;
(*_9) = [_18.fld1,_18.fld1,_18.fld1,_18.fld1,_18.fld1,_18.fld1];
_30.fld2.0 = 151_u8;
_30.fld6.0 = -(*_23).0;
_13 = _11.0 - _11.0;
Goto(bb11)
}
bb11 = {
_30.fld1.1 = (*_9);
_30.fld1.2 = !_22;
_5 = (_30.fld6.0, _3.0.1, _30.fld4);
_10 = (_13, _11.1);
_8 = _30.fld6.0;
_27.2 = _22;
(*_23).1 = (*_23).2 as i8;
(*_23).0 = _30.fld6.0;
_25 = 887905928_u32;
_18.fld1 = 16665309229848480069_u64;
(*_23) = (_30.fld6.0, _26, _30.fld4);
_11 = _10;
RET = 73284182986831561343052071313323110155_i128 as i64;
_30.fld1.3 = [_27.2,_27.2,_30.fld1.2,_27.2,_30.fld1.2,_22,_27.2];
_7 = _3.2;
_30.fld6 = (_5.0, _3.0.1, _30.fld4);
_24 = _18.fld1 as i64;
_33 = [_13,_10.0,_11.0,_13,_11.0,_1,_1];
_24 = _10.1;
_8 = -(*_23).0;
_30.fld1.1 = [_18.fld1,_18.fld1,_18.fld1,_18.fld1,_18.fld1,_18.fld1];
_21.fld0 = core::ptr::addr_of!(_13);
(*_9) = [_18.fld1,_18.fld1,_18.fld1,_18.fld1,_18.fld1,_18.fld1];
_12 = _3.0.0 <= (*_23).0;
_30.fld6.2 = _5.2 ^ _3.0.2;
match _18.fld1 {
16665309229848480069 => bb13,
_ => bb12
}
}
bb12 = {
Return()
}
bb13 = {
(*_23).2 = -_30.fld6.2;
(*_2) = [_18.fld1,_18.fld1,_18.fld1,_18.fld1,_18.fld1,_18.fld1];
_26 = -_5.1;
_30.fld7 = [_27.2,_30.fld1.2,_27.2,_22,_22,_27.2,_27.2];
_3.0.1 = (*_23).1 | _19;
_27.0 = _30.fld6.0 - (*_23).0;
_3.0.1 = _5.1;
_28.0 = [_18.fld1,_18.fld1,_18.fld1,_18.fld1,_18.fld1,_18.fld1];
_3.2 = _7;
_20 = !_18.fld1;
_18.fld0 = 26989180001742396617645298648552175374_i128 as f64;
_30.fld0.1 = core::ptr::addr_of_mut!(_30.fld4);
_30.fld1.1 = _6.0;
_29 = _30.fld1.1;
_30.fld3 = 38267559896354671824729415416848258042_u128 as i8;
_3 = (_5, _12, _7);
match _18.fld1 {
0 => bb1,
1 => bb9,
2 => bb5,
16665309229848480069 => bb14,
_ => bb10
}
}
bb14 = {
_5.0 = _3.0.0;
_20 = _18.fld1 % 3606876134868819861_u64;
_3 = ((*_23), _12, _7);
_7 = _3.2 >> _11.0;
(*_23).0 = _30.fld6.0 / 0.000000000000000000000000000000000000004959446097670642_f32;
_6.0 = _29;
(*_23).2 = _30.fld1.2 as i16;
_35.fld4 = !_25;
_40.0.0 = _5.0 + _8;
_40.0 = (_15, _26, (*_23).2);
_26 = _40.0.1 >> _19;
_26 = _30.fld5 as i8;
RET = _3.1 as i64;
_31 = _30.fld2.0 as i128;
Goto(bb15)
}
bb15 = {
Call(_43, bb16, dump_var(6_usize, 29_usize, Move(_29), 16_usize, Move(_16), 10_usize, Move(_10), 13_usize, Move(_13)))
}
bb16 = {
Call(_43, bb17, dump_var(6_usize, 7_usize, Move(_7), 26_usize, Move(_26), 28_usize, Move(_28), 6_usize, Move(_6)))
}
bb17 = {
Call(_43, bb18, dump_var(6_usize, 19_usize, Move(_19), 44_usize, _44, 44_usize, _44, 44_usize, _44))
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn7(mut _1: i64,mut _2: i8,mut _3: [u64; 6],mut _4: [u64; 6],mut _5: [u64; 6],mut _6: f32,mut _7: *const [u64; 6],mut _8: *const [u64; 6],mut _9: usize,mut _10: isize,mut _11: isize,mut _12: isize,mut _13: isize,mut _14: Adt60,mut _15: isize,mut _16: i8) -> bool {
mir! {
type RET = bool;
let _17: *const ([u64; 6], (f32, i8, i16), u16);
let _18: [bool; 7];
let _19: isize;
let _20: u8;
let _21: i128;
let _22: [u16; 7];
let _23: f64;
let _24: [u64; 6];
let _25: isize;
let _26: char;
let _27: bool;
let _28: Adt61;
let _29: bool;
let _30: f32;
let _31: i8;
let _32: u8;
let _33: *mut i64;
let _34: [i8; 6];
let _35: Adt64;
let _36: ();
let _37: ();
{
_16 = _2;
_14.fld0 = (-160645387204417828759451767184517553185_i128) as f64;
_11 = _10;
_11 = 2008051637_i32 as isize;
_3 = _4;
_14.fld1 = !17485345097106636684_u64;
_12 = _13 >> _13;
RET = true;
(*_8) = _3;
(*_7) = [_14.fld1,_14.fld1,_14.fld1,_14.fld1,_14.fld1,_14.fld1];
_3 = (*_8);
RET = false;
(*_7) = [_14.fld1,_14.fld1,_14.fld1,_14.fld1,_14.fld1,_14.fld1];
_2 = _16 ^ _16;
_9 = 2_usize;
_3[_9] = !_5[_9];
_4 = [(*_8)[_9],_5[_9],_14.fld1,(*_7)[_9],_5[_9],(*_8)[_9]];
_8 = core::ptr::addr_of!(_5);
(*_8) = (*_7);
(*_8)[_9] = false as u64;
_2 = -_16;
(*_7) = [_3[_9],_3[_9],(*_8)[_9],(*_8)[_9],_14.fld1,_5[_9]];
_19 = _13 + _15;
(*_7)[_9] = '\u{f4c00}' as u64;
(*_8) = [(*_7)[_9],_14.fld1,_3[_9],_4[_9],(*_7)[_9],(*_7)[_9]];
_22[_9] = 9923_u16 - 29044_u16;
match _9 {
0 => bb1,
1 => bb2,
3 => bb4,
4 => bb5,
2 => bb7,
_ => bb6
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
_18[_9] = _22[_9] > _22[_9];
_3[_9] = _5[_9] & (*_7)[_9];
_6 = (-1486323174_i32) as f32;
(*_7)[_9] = (*_8)[_9] / 10138850378414272016_u64;
_12 = !_13;
_11 = 282697349_u32 as isize;
(*_8) = [(*_7)[_9],(*_7)[_9],_3[_9],(*_7)[_9],(*_7)[_9],_14.fld1];
_14.fld1 = _3[_9];
_24 = (*_8);
_14.fld1 = _22[_9] as u64;
_26 = '\u{dc69c}';
_24 = [(*_7)[_9],(*_8)[_9],(*_8)[_9],_5[_9],(*_7)[_9],_5[_9]];
match _9 {
0 => bb4,
1 => bb8,
3 => bb10,
2 => bb12,
_ => bb11
}
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
Return()
}
bb12 = {
_18 = [false,true,true,true,true,false,false];
_16 = _2 | _2;
_12 = !_15;
_5 = [_14.fld1,_3[_9],(*_7)[_9],_4[_9],_24[_9],(*_7)[_9]];
_28.fld1[_9] = !_1;
_3 = _4;
_18 = [false,true,false,true,true,true,false];
_20 = !249_u8;
_11 = -_15;
_28.fld1 = [_1,_1,_1];
_18 = [false,true,true,true,false,true,true];
_21 = 134880593535796499314395323244515834953_i128;
_18[_9] = false;
(*_8)[_9] = _24[_9];
(*_8)[_9] = _22[_9] as u64;
_28.fld1 = [_1,_1,_1];
(*_7) = [_3[_9],_24[_9],(*_8)[_9],(*_8)[_9],_4[_9],_24[_9]];
_12 = _19;
_29 = _18[_9];
_9 = 12152001674798930662_usize;
_31 = _2 + _16;
_15 = -_19;
_19 = _1 as isize;
(*_7) = _3;
_7 = core::ptr::addr_of!(_4);
Call(_16, bb13, fn8(_11, (*_8), _15, _14.fld0, _12))
}
bb13 = {
_8 = _7;
Goto(bb14)
}
bb14 = {
_16 = _6 as i8;
_2 = _13 as i8;
_30 = -_6;
_4 = [_14.fld1,_14.fld1,_14.fld1,_14.fld1,_14.fld1,_14.fld1];
(*_7) = [_14.fld1,_14.fld1,_14.fld1,_14.fld1,_14.fld1,_14.fld1];
_21 = !105550004997920964290051914060593028407_i128;
Goto(bb15)
}
bb15 = {
Call(_36, bb16, dump_var(7_usize, 12_usize, Move(_12), 1_usize, Move(_1), 29_usize, Move(_29), 3_usize, Move(_3)))
}
bb16 = {
Call(_36, bb17, dump_var(7_usize, 9_usize, Move(_9), 24_usize, Move(_24), 15_usize, Move(_15), 5_usize, Move(_5)))
}
bb17 = {
Call(_36, bb18, dump_var(7_usize, 16_usize, Move(_16), 11_usize, Move(_11), 37_usize, _37, 37_usize, _37))
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn8(mut _1: isize,mut _2: [u64; 6],mut _3: isize,mut _4: f64,mut _5: isize) -> i8 {
mir! {
type RET = i8;
let _6: isize;
let _7: bool;
let _8: Adt63;
let _9: [bool; 7];
let _10: [i32; 1];
let _11: u64;
let _12: (usize, *mut i16, [u16; 7], i16);
let _13: *mut *mut i16;
let _14: Adt56;
let _15: isize;
let _16: i128;
let _17: f32;
let _18: Adt65;
let _19: (f32, [u64; 6], u16, [u16; 7]);
let _20: *const [u64; 6];
let _21: [i8; 6];
let _22: [i32; 1];
let _23: Adt56;
let _24: (u8, i32, u128, u128);
let _25: u32;
let _26: u64;
let _27: Adt51;
let _28: ();
let _29: ();
{
_1 = (-38_i8) as isize;
RET = -88_i8;
_2 = [651264259525840867_u64,18419146387693958984_u64,1226185080118909273_u64,3820031900144760671_u64,10696752079632113417_u64,17041633062316135849_u64];
_6 = -_5;
_1 = _6;
_2 = [16201686672871865742_u64,6133360628904702666_u64,13347511553387673606_u64,9386008016250185334_u64,14409243888233789942_u64,5527230766091633590_u64];
_5 = _6;
_8.fld0.fld4.0.2 = -31877_i16;
_8.fld1 = (143_u8, 1374285304_i32, 143349872050930944147024518590669315750_u128, 185919678010336876879586337797339924192_u128);
_8.fld0.fld0.1 = core::ptr::addr_of_mut!(_8.fld0.fld4.0.2);
_8.fld0.fld1 = _2;
_8.fld0.fld4.1 = _8.fld1.0 < _8.fld1.0;
_7 = _8.fld0.fld4.1;
_8.fld0.fld4.2 = 6_usize;
Goto(bb1)
}
bb1 = {
_1 = _6;
_8.fld0.fld2 = core::ptr::addr_of_mut!(_8.fld0.fld4.0);
_9 = [_7,_8.fld0.fld4.1,_8.fld0.fld4.1,_7,_7,_8.fld0.fld4.1,_8.fld0.fld4.1];
RET = !13_i8;
_8.fld0.fld0.1 = core::ptr::addr_of_mut!(_8.fld0.fld4.0.2);
_6 = _3 * _5;
_10 = [_8.fld1.1];
_8.fld0.fld2 = core::ptr::addr_of_mut!(_8.fld0.fld4.0);
_7 = !_8.fld0.fld4.1;
_8.fld0.fld4.0.1 = -(-102_i8);
_11 = '\u{bf73}' as u64;
_8.fld0.fld4.0.0 = _8.fld0.fld4.0.2 as f32;
_8.fld0.fld0.0 = _8.fld1.0 ^ _8.fld1.0;
_8.fld0.fld4.0.2 = (-9932_i16) + (-3832_i16);
match _8.fld0.fld4.2 {
0 => bb2,
6 => bb4,
_ => bb3
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
_11 = _8.fld0.fld4.0.2 as u64;
_3 = _6 | _5;
RET = _8.fld0.fld4.0.1 * _8.fld0.fld4.0.1;
_8.fld1.2 = !_8.fld1.3;
_4 = _8.fld0.fld4.0.1 as f64;
_8.fld0.fld0.1 = core::ptr::addr_of_mut!(_8.fld0.fld4.0.2);
_2 = [_11,_11,_11,_11,_11,_11];
_8.fld1.3 = _8.fld1.2;
_8.fld0.fld2 = core::ptr::addr_of_mut!(_8.fld0.fld4.0);
_8.fld0.fld4.0.2 = _8.fld0.fld4.0.0 as i16;
_8.fld1.2 = _11 as u128;
_12.1 = core::ptr::addr_of_mut!(_8.fld0.fld4.0.2);
Goto(bb5)
}
bb5 = {
_8.fld0.fld2 = core::ptr::addr_of_mut!(_8.fld0.fld4.0);
_12.1 = core::ptr::addr_of_mut!(_8.fld0.fld4.0.2);
_12.2 = [62957_u16,40731_u16,60519_u16,4604_u16,27835_u16,39963_u16,30864_u16];
_8.fld0.fld4.2 = !6067802225814588025_usize;
RET = -_8.fld0.fld4.0.1;
_8.fld1.3 = _8.fld1.2;
Goto(bb6)
}
bb6 = {
_8.fld0.fld0 = (_8.fld1.0, _12.1);
_10 = [_8.fld1.1];
_8.fld1.0 = 14230267875546118530886235595638807739_i128 as u8;
_8.fld2 = core::ptr::addr_of_mut!(_14.fld4.fld1.0.1);
match _8.fld1.1 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb7,
1374285304 => bb9,
_ => bb8
}
}
bb7 = {
Return()
}
bb8 = {
_1 = _6;
_8.fld0.fld2 = core::ptr::addr_of_mut!(_8.fld0.fld4.0);
_9 = [_7,_8.fld0.fld4.1,_8.fld0.fld4.1,_7,_7,_8.fld0.fld4.1,_8.fld0.fld4.1];
RET = !13_i8;
_8.fld0.fld0.1 = core::ptr::addr_of_mut!(_8.fld0.fld4.0.2);
_6 = _3 * _5;
_10 = [_8.fld1.1];
_8.fld0.fld2 = core::ptr::addr_of_mut!(_8.fld0.fld4.0);
_7 = !_8.fld0.fld4.1;
_8.fld0.fld4.0.1 = -(-102_i8);
_11 = '\u{bf73}' as u64;
_8.fld0.fld4.0.0 = _8.fld0.fld4.0.2 as f32;
_8.fld0.fld0.0 = _8.fld1.0 ^ _8.fld1.0;
_8.fld0.fld4.0.2 = (-9932_i16) + (-3832_i16);
match _8.fld0.fld4.2 {
0 => bb2,
6 => bb4,
_ => bb3
}
}
bb9 = {
_8.fld0.fld3.fld0 = core::ptr::addr_of_mut!(_14.fld4.fld1.0.1);
_7 = _8.fld0.fld4.1;
_11 = 11418109061676227700_u64;
_14.fld4.fld1.0.1 = !9203220882142951107_i64;
_6 = _3;
_8.fld0.fld4.0.0 = _8.fld1.1 as f32;
_14.fld4.fld1.1.0 = [_11,_11,_11,_11,_11,_11];
_8.fld0.fld3.fld0 = core::ptr::addr_of_mut!(_14.fld4.fld1.0.1);
_12.3 = _8.fld0.fld4.0.2 | _8.fld0.fld4.0.2;
_10 = [_8.fld1.1];
_8.fld2 = core::ptr::addr_of_mut!(_14.fld4.fld1.0.1);
_14.fld4.fld4 = _4 as u32;
_7 = !_8.fld0.fld4.1;
_12.0 = _8.fld0.fld4.0.1 as usize;
_14.fld3 = _8.fld0.fld3.fld0;
_8.fld0.fld3 = Adt54 { fld0: _14.fld3 };
_8.fld1.0 = _8.fld0.fld0.0 + _8.fld0.fld0.0;
_8.fld0.fld1 = [_11,_11,_11,_11,_11,_11];
_8.fld0.fld4.2 = _12.0;
_14.fld4.fld1.1.0 = [_11,_11,_11,_11,_11,_11];
_8.fld1.3 = _8.fld1.2;
_8.fld0.fld3.fld0 = core::ptr::addr_of_mut!(_14.fld4.fld1.0.1);
_8.fld2 = core::ptr::addr_of_mut!(_14.fld4.fld1.0.1);
_9 = [_8.fld0.fld4.1,_8.fld0.fld4.1,_7,_8.fld0.fld4.1,_7,_8.fld0.fld4.1,_8.fld0.fld4.1];
_14.fld4.fld2 = -_3;
_5 = _14.fld4.fld2 - _3;
match _8.fld0.fld0.0 {
0 => bb1,
1 => bb2,
2 => bb7,
3 => bb4,
143 => bb10,
_ => bb6
}
}
bb10 = {
_15 = _5 * _6;
_8.fld0.fld4.0.1 = -65_i8;
_14.fld4.fld1.0.0 = _14.fld4.fld2 + _15;
_8.fld0.fld0.0 = _8.fld1.0 % 207_u8;
_11 = 16327346923429429819_u64;
_8.fld0.fld0.1 = _12.1;
_14.fld4.fld1.1 = (_2,);
_8.fld0.fld4.0.0 = _12.0 as f32;
_14.fld1 = [_11,_11,_11,_11,_11,_11];
RET = _8.fld0.fld4.0.1;
Goto(bb11)
}
bb11 = {
_8.fld0.fld4.0.1 = -40_i8;
_1 = _5 - _14.fld4.fld2;
_8.fld1 = (_8.fld0.fld0.0, (-1970443218_i32), 183194683029195648362223464786327720047_u128, 285922015604867151350501864986510323779_u128);
_8.fld0.fld1 = [_11,_11,_11,_11,_11,_11];
_14.fld4.fld0 = _8.fld1.1;
_1 = _8.fld0.fld4.0.0 as isize;
_4 = _8.fld1.3 as f64;
_8.fld0.fld3.fld0 = _14.fld3;
_6 = !_15;
_6 = -_14.fld4.fld1.0.0;
_15 = _14.fld4.fld1.0.0 * _14.fld4.fld2;
_18.fld4.1 = _8.fld0.fld4.0.1 & _8.fld0.fld4.0.1;
_14.fld4.fld2 = _15;
_12.2 = [59294_u16,35680_u16,1326_u16,50784_u16,32245_u16,19064_u16,8581_u16];
_18.fld1.fld3.1 = core::ptr::addr_of_mut!(_18.fld4.2);
Goto(bb12)
}
bb12 = {
_14.fld4.fld1.1.0 = _14.fld1;
_8.fld0.fld3 = Adt54 { fld0: _14.fld3 };
_8.fld2 = core::ptr::addr_of_mut!(_14.fld4.fld1.0.1);
_8.fld0.fld0.1 = _12.1;
_18.fld0 = _8.fld1.0 - _8.fld0.fld0.0;
_18.fld0 = _8.fld1.0;
_18.fld4 = (_8.fld0.fld4.0.0, _8.fld0.fld4.0.1, _12.3);
_17 = _8.fld0.fld4.0.2 as f32;
_19.0 = 47229_u16 as f32;
_12.2 = [32993_u16,18005_u16,7167_u16,22896_u16,38509_u16,10081_u16,51385_u16];
_14.fld4.fld4 = '\u{ac264}' as u32;
_14.fld4.fld1.0.1 = 7663465770546747256_i64 >> _15;
_14.fld4.fld4 = !1593055312_u32;
_19.2 = 2330_u16;
_13 = core::ptr::addr_of_mut!(_8.fld0.fld0.1);
_18.fld5 = _4 / 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003542471595597584_f64;
_18.fld1.fld0.2 = !_12.3;
_18.fld1.fld3.0 = _8.fld0.fld0.0 & _8.fld0.fld0.0;
_18.fld1.fld5 = _8.fld0.fld3.fld0;
_18.fld3 = _14.fld4.fld4 - _14.fld4.fld4;
_14.fld2 = [_8.fld1.1,_8.fld1.1,_14.fld4.fld0,_14.fld4.fld0,_8.fld1.1,_14.fld4.fld0];
_8.fld1.3 = _8.fld1.2;
_18.fld1.fld0 = (_19.0, _18.fld4.1, _18.fld4.2);
_14.fld4.fld2 = _15;
RET = _18.fld1.fld0.1 & _18.fld1.fld0.1;
_18.fld1.fld5 = _8.fld0.fld3.fld0;
_8.fld0.fld4.1 = _7;
_18.fld2 = core::ptr::addr_of!(_14.fld4.fld4);
Goto(bb13)
}
bb13 = {
_23.fld1 = [_11,_11,_11,_11,_11,_11];
_23.fld2 = [_14.fld4.fld0,_14.fld4.fld0,_14.fld4.fld0,_14.fld4.fld0,_8.fld1.1,_14.fld4.fld0];
_14.fld1 = [_11,_11,_11,_11,_11,_11];
_17 = _18.fld4.0 + _18.fld4.0;
_18.fld4 = (_18.fld1.fld0.0, _8.fld0.fld4.0.1, _12.3);
Call(_19, bb14, fn9(_18.fld3, _14.fld3, (*_13), (*_13), _23.fld2, _17, _14.fld4.fld2, _8.fld0.fld0, _18.fld4, _14.fld1, _8.fld1.2, _8.fld0.fld2))
}
bb14 = {
_15 = _14.fld4.fld1.0.0 + _5;
_14.fld4.fld3 = [_11,_11,_11];
_18.fld1 = Adt49 { fld0: _18.fld4,fld1: _14.fld4.fld1.1,fld2: (-23150168548062484655682348429666832710_i128),fld3: _8.fld0.fld0,fld4: _9,fld5: _8.fld2 };
_23.fld3 = core::ptr::addr_of_mut!(_14.fld4.fld1.0.1);
RET = _8.fld0.fld4.0.1;
_8.fld1.1 = _14.fld4.fld0;
_18.fld1.fld5 = core::ptr::addr_of_mut!(_23.fld4.fld1.0.1);
_18.fld1.fld5 = _14.fld3;
_3 = !_14.fld4.fld1.0.0;
_8.fld0.fld4.0 = _18.fld1.fld0;
_8.fld0.fld4.1 = _7;
_23.fld0 = -_17;
_14.fld0 = _18.fld4.0;
_18.fld1.fld0.2 = _8.fld1.3 as i16;
_19.1 = _8.fld0.fld1;
_24.1 = _8.fld1.1;
_8.fld0.fld0.0 = _14.fld4.fld1.0.0 as u8;
_23.fld1 = [_11,_11,_11,_11,_11,_11];
_18.fld4 = (_17, _8.fld0.fld4.0.1, _18.fld1.fld0.2);
_23.fld4.fld1.0.1 = _14.fld4.fld1.0.1 >> _6;
_8.fld1.1 = _11 as i32;
_27.fld0.1 = _7;
Goto(bb15)
}
bb15 = {
Call(_28, bb16, dump_var(8_usize, 11_usize, Move(_11), 5_usize, Move(_5), 3_usize, Move(_3), 7_usize, Move(_7)))
}
bb16 = {
Call(_28, bb17, dump_var(8_usize, 1_usize, Move(_1), 29_usize, _29, 29_usize, _29, 29_usize, _29))
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn9(mut _1: u32,mut _2: *mut i64,mut _3: *mut i16,mut _4: *mut i16,mut _5: [i32; 6],mut _6: f32,mut _7: isize,mut _8: (u8, *mut i16),mut _9: (f32, i8, i16),mut _10: [u64; 6],mut _11: u128,mut _12: *mut (f32, i8, i16)) -> (f32, [u64; 6], u16, [u16; 7]) {
mir! {
type RET = (f32, [u64; 6], u16, [u16; 7]);
let _13: u64;
let _14: bool;
let _15: bool;
let _16: f32;
let _17: ((isize, i64), ([u64; 6],));
let _18: f64;
let _19: f32;
let _20: [i8; 6];
let _21: u128;
let _22: ();
let _23: ();
{
_4 = core::ptr::addr_of_mut!(_9.2);
RET.1 = [17788901855679232614_u64,15078196456347366261_u64,6804397120157356707_u64,8524733289352145237_u64,10180544499725905253_u64,18403495721776806943_u64];
(*_12) = (_6, _9.1, (*_4));
(*_12).1 = 3867685140765295167_u64 as i8;
(*_12) = (_6, _9.1, (*_4));
match _11 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
183194683029195648362223464786327720047 => bb6,
_ => bb5
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
_13 = 12254705319319126664_u64 << _7;
(*_12).0 = _9.0;
Goto(bb7)
}
bb7 = {
(*_12) = _9;
Call(RET.2, bb8, fn10((*_12).2, _5))
}
bb8 = {
_10 = [_13,_13,_13,_13,_13,_13];
_11 = !170101805422186590223215535014193701968_u128;
_8.1 = core::ptr::addr_of_mut!((*_3));
RET.0 = 61956268680221332210174642143557867811_i128 as f32;
_15 = false;
(*_12).2 = (*_4) * _9.2;
_2 = core::ptr::addr_of_mut!((*_2));
RET.3 = [45287_u16,15815_u16,18265_u16,51445_u16,47353_u16,32676_u16,55068_u16];
RET.3 = [19539_u16,40115_u16,36849_u16,10923_u16,52115_u16,21713_u16,24382_u16];
(*_12).2 = _9.2 | (*_4);
_17.0 = (_7, (*_2));
_13 = 5785391057497682070_u64;
_17.0 = (_7, (*_2));
(*_12).0 = _9.0;
(*_3) = !(*_4);
_8 = (55_u8, _4);
_16 = -_6;
_17.1 = (_10,);
_18 = 15525073710709784707_usize as f64;
match _8.0 {
0 => bb9,
1 => bb10,
2 => bb11,
55 => bb13,
_ => bb12
}
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
Return()
}
bb12 = {
Return()
}
bb13 = {
_17.1.0 = [_13,_13,_13,_13,_13,_13];
RET.1 = _10;
_14 = (*_2) >= (*_2);
_1 = 1867240492_u32;
Goto(bb14)
}
bb14 = {
Call(_22, bb15, dump_var(9_usize, 5_usize, Move(_5), 15_usize, Move(_15), 7_usize, Move(_7), 1_usize, Move(_1)))
}
bb15 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn10(mut _1: i16,mut _2: [i32; 6]) -> u16 {
mir! {
type RET = u16;
let _3: [u64; 3];
let _4: isize;
let _5: f32;
let _6: Adt50;
let _7: [i64; 3];
let _8: [i32; 6];
let _9: isize;
let _10: Adt62;
let _11: isize;
let _12: (u8, i32, u128, u128);
let _13: isize;
let _14: *const char;
let _15: i32;
let _16: bool;
let _17: bool;
let _18: [i64; 3];
let _19: f64;
let _20: [isize; 7];
let _21: Adt55;
let _22: u128;
let _23: i16;
let _24: Adt61;
let _25: Adt59;
let _26: [i64; 3];
let _27: (u8, i32, u128, u128);
let _28: i32;
let _29: ();
let _30: ();
{
RET = 10624_u16 * 38558_u16;
_1 = (-18314_i16) + 1987_i16;
_3 = [16717333193155981526_u64,14207970320851037307_u64,9651536105258482657_u64];
_2 = [(-1489614280_i32),(-892846652_i32),(-397647876_i32),1865264441_i32,563578233_i32,(-1486740809_i32)];
RET = 256181601916991225344154463752463245378_u128 as u16;
RET = 47226_u16 + 28560_u16;
_3 = [18240021953644590235_u64,18099556111606659561_u64,14663192525512700694_u64];
_4 = 77_isize >> _1;
RET = !321_u16;
_1 = (-19472_i16);
RET = 115282783830961918744336959631875465809_u128 as u16;
_5 = 291736050018214631919438828910865908522_u128 as f32;
Call(RET, bb1, core::intrinsics::transmute(_1))
}
bb1 = {
_2 = [1995448079_i32,2066942981_i32,(-614618996_i32),1689560765_i32,(-1162368455_i32),1965958277_i32];
_4 = 9223372036854775807_isize << _1;
RET = 55103_u16 % 25192_u16;
_4 = (-96057339257599071348768811509253438481_i128) as isize;
_4 = 11359854162362600606_usize as isize;
_5 = 355731676_i32 as f32;
Call(_4, bb2, fn11(_1, _1, _2, _1, _1, _1, _5, _2))
}
bb2 = {
_2 = [1894289953_i32,1011856410_i32,(-1221579770_i32),(-1483489289_i32),109989653_i32,267923576_i32];
_3 = [12173064099389726786_u64,17503744903981041334_u64,16434761097305819787_u64];
RET = !61832_u16;
_6.fld0 = 15472784039637838488_u64 + 9290120058640084599_u64;
RET = !24637_u16;
_7 = [(-2165827042384884437_i64),(-2799779870401167418_i64),8007957329429362822_i64];
_6 = Adt50 { fld0: 13481195069237961984_u64 };
_5 = (-64300424996307194422110662505626949470_i128) as f32;
_3 = [_6.fld0,_6.fld0,_6.fld0];
_4 = (-9223372036854775808_isize);
RET = 8934_u16;
RET = 40277_u16 | 14449_u16;
_6 = Adt50 { fld0: 5790178060028316535_u64 };
_10.fld1.1 = [_6.fld0,_6.fld0,_6.fld0,_6.fld0,_6.fld0,_6.fld0];
_10.fld4.fld3.fld0 = core::ptr::addr_of_mut!(_10.fld0.1);
_10.fld1.0 = _5;
_10.fld2 = !161_u8;
match _1 {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
4 => bb7,
5 => bb8,
340282366920938463463374607431768191984 => bb10,
_ => bb9
}
}
bb3 = {
_2 = [1995448079_i32,2066942981_i32,(-614618996_i32),1689560765_i32,(-1162368455_i32),1965958277_i32];
_4 = 9223372036854775807_isize << _1;
RET = 55103_u16 % 25192_u16;
_4 = (-96057339257599071348768811509253438481_i128) as isize;
_4 = 11359854162362600606_usize as isize;
_5 = 355731676_i32 as f32;
Call(_4, bb2, fn11(_1, _1, _2, _1, _1, _1, _5, _2))
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
_10.fld4.fld4.0 = (_5, (-112_i8), _1);
_6.fld0 = 16950989374884398094_u64;
_10.fld7 = 5_usize;
_11 = _4;
Goto(bb11)
}
bb11 = {
_10.fld1.3 = [13070_u16,38833_u16,52420_u16,40574_u16,17768_u16,15494_u16,57487_u16];
_10.fld4.fld1 = _10.fld1.1;
_10.fld4.fld1 = [_6.fld0,_6.fld0,_6.fld0,_6.fld0,_6.fld0,_6.fld0];
_10.fld4.fld4.1 = !false;
_12.1 = 74997327997823438922752115849698982971_u128 as i32;
_10.fld0 = (_11, (-1908262883954071988_i64));
_9 = _10.fld0.0;
Call(_13, bb12, fn13(_11, _10.fld4.fld4.0, _10.fld0, _9))
}
bb12 = {
_10.fld4.fld4.0.1 = 107_i8;
_6 = Adt50 { fld0: 2213753751728931792_u64 };
_10.fld4.fld4.2 = !_10.fld7;
_10.fld4.fld0.1 = core::ptr::addr_of_mut!(_1);
_12.3 = 158717368662169458018372211376338836498_u128;
_1 = _10.fld4.fld4.0.2 - _10.fld4.fld4.0.2;
_4 = _13 - _13;
_8 = _2;
_2 = [_12.1,_12.1,_12.1,_12.1,_12.1,_12.1];
_12.0 = !_10.fld2;
_12 = (_10.fld2, 441052496_i32, 55212652094673055906873298258398433273_u128, 222087298541355877180858523626291003923_u128);
_1 = !_10.fld4.fld4.0.2;
_10.fld4.fld4.0.1 = _6.fld0 as i8;
_10.fld5 = !_12.1;
_10.fld1.1 = _10.fld4.fld1;
_10.fld6 = _8;
_6 = Adt50 { fld0: 7736394806670077316_u64 };
_10.fld1.2 = 17249_u16 * 4451_u16;
_10.fld4.fld0.1 = core::ptr::addr_of_mut!(_10.fld4.fld4.0.2);
_13 = -_4;
_7 = [_10.fld0.1,_10.fld0.1,_10.fld0.1];
_16 = !_10.fld4.fld4.1;
_10.fld4.fld3.fld0 = core::ptr::addr_of_mut!(_10.fld0.1);
_10.fld4.fld0.0 = !_12.0;
_10.fld1.3 = [_10.fld1.2,_10.fld1.2,_10.fld1.2,_10.fld1.2,_10.fld1.2,_10.fld1.2,_10.fld1.2];
_8 = [_12.1,_10.fld5,_12.1,_12.1,_12.1,_10.fld5];
Call(_10.fld4.fld4, bb13, fn16(_11, _12.2, _4, _10.fld0.0, _6.fld0, _9, _10.fld4.fld0.0, _6.fld0, _10.fld0.1, _6.fld0, _6.fld0, _10.fld0.1))
}
bb13 = {
_17 = _10.fld4.fld4.0.2 > _1;
_10.fld4.fld4.0.0 = -_10.fld1.0;
_10.fld5 = _12.1 ^ _12.1;
_10.fld4.fld4.0.0 = -_10.fld1.0;
_10.fld4.fld4.0.0 = -_5;
_10.fld1.0 = _6.fld0 as f32;
_12 = (_10.fld4.fld0.0, _10.fld5, 332908197990065564442270333836312507755_u128, 85288868230852141039520776370290428616_u128);
_21.fld1.fld4.1 = !_10.fld4.fld4.1;
_21.fld1.fld5.fld0 = _6.fld0 / 14314779557197616492_u64;
_12.1 = _10.fld4.fld4.0.0 as i32;
_10.fld1.1 = [_21.fld1.fld5.fld0,_21.fld1.fld5.fld0,_21.fld1.fld5.fld0,_21.fld1.fld5.fld0,_21.fld1.fld5.fld0,_21.fld1.fld5.fld0];
_10.fld4.fld3.fld0 = core::ptr::addr_of_mut!(_10.fld0.1);
_10.fld1.0 = _5;
_25.fld4.0.2 = _13 as i16;
_21.fld0.0 = (_10.fld4.fld4.0.0, _10.fld4.fld4.0.1, _25.fld4.0.2);
_21.fld1.fld3.fld0.1 = _10.fld4.fld4.0.1;
_25.fld4.1 = _10.fld4.fld4.1;
_24.fld0 = core::ptr::addr_of_mut!(_23);
_25.fld4.0.2 = _21.fld0.0.2;
_25.fld4.0.1 = _21.fld1.fld3.fld0.1;
match _6.fld0 {
0 => bb10,
1 => bb2,
2 => bb5,
3 => bb8,
7736394806670077316 => bb15,
_ => bb14
}
}
bb14 = {
Return()
}
bb15 = {
_25.fld4 = (_21.fld0.0, _10.fld4.fld4.1, _10.fld4.fld4.2);
_21.fld1.fld1 = '\u{e2d9e}';
_21.fld0 = (_10.fld4.fld4.0, _10.fld4.fld4.1, _25.fld4.2);
Goto(bb16)
}
bb16 = {
Call(_29, bb17, dump_var(10_usize, 12_usize, Move(_12), 8_usize, Move(_8), 16_usize, Move(_16), 11_usize, Move(_11)))
}
bb17 = {
Call(_29, bb18, dump_var(10_usize, 2_usize, Move(_2), 4_usize, Move(_4), 30_usize, _30, 30_usize, _30))
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn11(mut _1: i16,mut _2: i16,mut _3: [i32; 6],mut _4: i16,mut _5: i16,mut _6: i16,mut _7: f32,mut _8: [i32; 6]) -> isize {
mir! {
type RET = isize;
let _9: i128;
let _10: (f32, [u64; 6], u16, [u16; 7]);
let _11: i32;
let _12: Adt51;
let _13: [i32; 1];
let _14: char;
let _15: u32;
let _16: Adt54;
let _17: *const [u64; 6];
let _18: u32;
let _19: Adt50;
let _20: isize;
let _21: [u64; 6];
let _22: *mut *mut i64;
let _23: (u8, i32, u128, u128);
let _24: isize;
let _25: Adt58;
let _26: isize;
let _27: i64;
let _28: u32;
let _29: bool;
let _30: i32;
let _31: bool;
let _32: char;
let _33: f32;
let _34: *mut i64;
let _35: bool;
let _36: ([u64; 6], (f32, i8, i16), u16);
let _37: *const *mut char;
let _38: f64;
let _39: f32;
let _40: (usize, *mut i16, [u16; 7], i16);
let _41: ();
let _42: ();
{
RET = '\u{18f}' as isize;
_3 = _8;
_4 = _5 << _1;
_9 = (-16487042728029668649287333848375005821_i128) + 92984213809633345844570105390002395815_i128;
RET = 41_isize;
_4 = _6 << _5;
_6 = (-119_isize) as i16;
_2 = _5;
_5 = -_6;
_2 = _4;
_1 = 1_i8 as i16;
_5 = _2 >> _4;
_1 = _5;
_1 = (-2247394793463723100_i64) as i16;
_3 = _8;
_1 = (-1514942354_i32) as i16;
_3 = [137414305_i32,930485102_i32,(-885319726_i32),1648859301_i32,1914104132_i32,887804270_i32];
_6 = _2 + _5;
_3 = _8;
Goto(bb1)
}
bb1 = {
_10.3 = [57124_u16,11159_u16,49183_u16,29398_u16,29127_u16,24106_u16,47732_u16];
_1 = _6 ^ _6;
_11 = !(-2056709942_i32);
_10.0 = _7 * _7;
_10.1 = [6459752781644191368_u64,2559638297842860310_u64,7958285846734228802_u64,5753214476742213359_u64,10558647979278866487_u64,12713851279406700931_u64];
_12.fld0.0 = (_10.0, 51_i8, _1);
_12.fld0.0.0 = _10.0 * _10.0;
_11 = 1146823640_i32 & (-79471763_i32);
Goto(bb2)
}
bb2 = {
_12.fld0.0.2 = _1;
_12.fld0.2 = true as usize;
_12.fld0.0 = (_10.0, (-4_i8), _1);
_1 = -_2;
_4 = 4834283939683743448_u64 as i16;
RET = true as isize;
_10.0 = _12.fld0.0.0;
_8 = [_11,_11,_11,_11,_11,_11];
_10.2 = !8326_u16;
_7 = -_10.0;
_12.fld0.0.2 = -_5;
_2 = _5 | _1;
_12.fld0.0.0 = 35_u8 as f32;
_9 = -128750205092431732820321455733159100797_i128;
Call(_8, bb3, fn12(_12.fld0.0, _12.fld0.0.1))
}
bb3 = {
_6 = _2;
_12.fld0.1 = !true;
RET = !17_isize;
_12.fld0.1 = true;
_8 = [_11,_11,_11,_11,_11,_11];
_5 = !_2;
RET = (-10_isize) | 9223372036854775807_isize;
_2 = -_6;
_12.fld0.2 = _12.fld0.0.1 as usize;
_14 = '\u{5c441}';
_11 = (-1529391974_i32);
_12.fld0.0.2 = !_6;
_19 = Adt50 { fld0: 1418184744579691588_u64 };
_19.fld0 = 8988619429337275725_u64;
_15 = !2016082118_u32;
_3 = _8;
Goto(bb4)
}
bb4 = {
_11 = _7 as i32;
_12.fld0.0.1 = (-89_i8) | 17_i8;
_4 = _12.fld0.0.1 as i16;
_17 = core::ptr::addr_of!(_10.1);
_12.fld0.0.1 = (-36_i8) + 101_i8;
_12.fld0.2 = 16830841530926628519_usize;
_19.fld0 = (-157750078975537011_i64) as u64;
_21 = [_19.fld0,_19.fld0,_19.fld0,_19.fld0,_19.fld0,_19.fld0];
_12.fld0.2 = _12.fld0.0.1 as usize;
(*_17) = [_19.fld0,_19.fld0,_19.fld0,_19.fld0,_19.fld0,_19.fld0];
_23.2 = !17570053878039753715722867962239086229_u128;
RET = (-9223372036854775808_isize) + 54_isize;
_12.fld0.0.2 = _12.fld0.0.0 as i16;
_14 = '\u{6da71}';
_24 = 9223372036854775807_isize;
_10.0 = _12.fld0.0.0;
_22 = core::ptr::addr_of_mut!(_16.fld0);
_10.2 = _12.fld0.0.1 as u16;
_10.0 = _7;
_23.0 = 212_u8;
_3 = [_11,_11,_11,_11,_11,_11];
_23.3 = _23.2;
_2 = _24 as i16;
Goto(bb5)
}
bb5 = {
_10.2 = 1634_u16 / 23778_u16;
_7 = _23.2 as f32;
_23 = (103_u8, _11, 181472217423386666900269192613267374468_u128, 94009536395788533591629437373016296425_u128);
(*_17) = [_19.fld0,_19.fld0,_19.fld0,_19.fld0,_19.fld0,_19.fld0];
_2 = !_5;
RET = _24 + _24;
(*_22) = core::ptr::addr_of_mut!(_27);
match _23.0 {
0 => bb1,
1 => bb2,
2 => bb4,
103 => bb7,
_ => bb6
}
}
bb6 = {
_6 = _2;
_12.fld0.1 = !true;
RET = !17_isize;
_12.fld0.1 = true;
_8 = [_11,_11,_11,_11,_11,_11];
_5 = !_2;
RET = (-10_isize) | 9223372036854775807_isize;
_2 = -_6;
_12.fld0.2 = _12.fld0.0.1 as usize;
_14 = '\u{5c441}';
_11 = (-1529391974_i32);
_12.fld0.0.2 = !_6;
_19 = Adt50 { fld0: 1418184744579691588_u64 };
_19.fld0 = 8988619429337275725_u64;
_15 = !2016082118_u32;
_3 = _8;
Goto(bb4)
}
bb7 = {
_15 = !3071840692_u32;
_27 = _23.2 as i64;
_23.1 = _27 as i32;
_26 = -_24;
_5 = _6;
match _23.2 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb8,
5 => bb9,
6 => bb10,
181472217423386666900269192613267374468 => bb12,
_ => bb11
}
}
bb8 = {
_10.3 = [57124_u16,11159_u16,49183_u16,29398_u16,29127_u16,24106_u16,47732_u16];
_1 = _6 ^ _6;
_11 = !(-2056709942_i32);
_10.0 = _7 * _7;
_10.1 = [6459752781644191368_u64,2559638297842860310_u64,7958285846734228802_u64,5753214476742213359_u64,10558647979278866487_u64,12713851279406700931_u64];
_12.fld0.0 = (_10.0, 51_i8, _1);
_12.fld0.0.0 = _10.0 * _10.0;
_11 = 1146823640_i32 & (-79471763_i32);
Goto(bb2)
}
bb9 = {
_10.2 = 1634_u16 / 23778_u16;
_7 = _23.2 as f32;
_23 = (103_u8, _11, 181472217423386666900269192613267374468_u128, 94009536395788533591629437373016296425_u128);
(*_17) = [_19.fld0,_19.fld0,_19.fld0,_19.fld0,_19.fld0,_19.fld0];
_2 = !_5;
RET = _24 + _24;
(*_22) = core::ptr::addr_of_mut!(_27);
match _23.0 {
0 => bb1,
1 => bb2,
2 => bb4,
103 => bb7,
_ => bb6
}
}
bb10 = {
_11 = _7 as i32;
_12.fld0.0.1 = (-89_i8) | 17_i8;
_4 = _12.fld0.0.1 as i16;
_17 = core::ptr::addr_of!(_10.1);
_12.fld0.0.1 = (-36_i8) + 101_i8;
_12.fld0.2 = 16830841530926628519_usize;
_19.fld0 = (-157750078975537011_i64) as u64;
_21 = [_19.fld0,_19.fld0,_19.fld0,_19.fld0,_19.fld0,_19.fld0];
_12.fld0.2 = _12.fld0.0.1 as usize;
(*_17) = [_19.fld0,_19.fld0,_19.fld0,_19.fld0,_19.fld0,_19.fld0];
_23.2 = !17570053878039753715722867962239086229_u128;
RET = (-9223372036854775808_isize) + 54_isize;
_12.fld0.0.2 = _12.fld0.0.0 as i16;
_14 = '\u{6da71}';
_24 = 9223372036854775807_isize;
_10.0 = _12.fld0.0.0;
_22 = core::ptr::addr_of_mut!(_16.fld0);
_10.2 = _12.fld0.0.1 as u16;
_10.0 = _7;
_23.0 = 212_u8;
_3 = [_11,_11,_11,_11,_11,_11];
_23.3 = _23.2;
_2 = _24 as i16;
Goto(bb5)
}
bb11 = {
_12.fld0.0.2 = _1;
_12.fld0.2 = true as usize;
_12.fld0.0 = (_10.0, (-4_i8), _1);
_1 = -_2;
_4 = 4834283939683743448_u64 as i16;
RET = true as isize;
_10.0 = _12.fld0.0.0;
_8 = [_11,_11,_11,_11,_11,_11];
_10.2 = !8326_u16;
_7 = -_10.0;
_12.fld0.0.2 = -_5;
_2 = _5 | _1;
_12.fld0.0.0 = 35_u8 as f32;
_9 = -128750205092431732820321455733159100797_i128;
Call(_8, bb3, fn12(_12.fld0.0, _12.fld0.0.1))
}
bb12 = {
_25.fld0 = core::ptr::addr_of!(_24);
_18 = !_15;
(*_17) = [_19.fld0,_19.fld0,_19.fld0,_19.fld0,_19.fld0,_19.fld0];
_21 = [_19.fld0,_19.fld0,_19.fld0,_19.fld0,_19.fld0,_19.fld0];
_22 = core::ptr::addr_of_mut!((*_22));
_2 = _6;
_4 = -_5;
_28 = !_18;
_25.fld0 = core::ptr::addr_of!(_26);
_5 = _4;
RET = _24;
RET = !_26;
_19.fld0 = 16282945030114893955_u64;
_26 = _27 as isize;
_23.3 = !_23.2;
_2 = -_6;
_18 = _12.fld0.2 as u32;
(*_22) = core::ptr::addr_of_mut!(_27);
_12.fld0.1 = !true;
match _23.0 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb13,
4 => bb14,
103 => bb16,
_ => bb15
}
}
bb13 = {
_12.fld0.0.2 = _1;
_12.fld0.2 = true as usize;
_12.fld0.0 = (_10.0, (-4_i8), _1);
_1 = -_2;
_4 = 4834283939683743448_u64 as i16;
RET = true as isize;
_10.0 = _12.fld0.0.0;
_8 = [_11,_11,_11,_11,_11,_11];
_10.2 = !8326_u16;
_7 = -_10.0;
_12.fld0.0.2 = -_5;
_2 = _5 | _1;
_12.fld0.0.0 = 35_u8 as f32;
_9 = -128750205092431732820321455733159100797_i128;
Call(_8, bb3, fn12(_12.fld0.0, _12.fld0.0.1))
}
bb14 = {
_10.3 = [57124_u16,11159_u16,49183_u16,29398_u16,29127_u16,24106_u16,47732_u16];
_1 = _6 ^ _6;
_11 = !(-2056709942_i32);
_10.0 = _7 * _7;
_10.1 = [6459752781644191368_u64,2559638297842860310_u64,7958285846734228802_u64,5753214476742213359_u64,10558647979278866487_u64,12713851279406700931_u64];
_12.fld0.0 = (_10.0, 51_i8, _1);
_12.fld0.0.0 = _10.0 * _10.0;
_11 = 1146823640_i32 & (-79471763_i32);
Goto(bb2)
}
bb15 = {
_10.2 = 1634_u16 / 23778_u16;
_7 = _23.2 as f32;
_23 = (103_u8, _11, 181472217423386666900269192613267374468_u128, 94009536395788533591629437373016296425_u128);
(*_17) = [_19.fld0,_19.fld0,_19.fld0,_19.fld0,_19.fld0,_19.fld0];
_2 = !_5;
RET = _24 + _24;
(*_22) = core::ptr::addr_of_mut!(_27);
match _23.0 {
0 => bb1,
1 => bb2,
2 => bb4,
103 => bb7,
_ => bb6
}
}
bb16 = {
_12.fld0.0.0 = _23.3 as f32;
_1 = !_2;
_23.0 = 91_u8;
_29 = !_12.fld0.1;
_10.3 = [_10.2,_10.2,_10.2,_10.2,_10.2,_10.2,_10.2];
_15 = _28 + _28;
_17 = core::ptr::addr_of!((*_17));
_17 = core::ptr::addr_of!((*_17));
_24 = _26 << _6;
_12.fld0.1 = !_29;
_23.3 = _23.2 | _23.2;
_8 = [_11,_23.1,_23.1,_23.1,_23.1,_11];
_34 = (*_22);
_33 = _10.0;
_16.fld0 = core::ptr::addr_of_mut!((*_34));
_17 = core::ptr::addr_of!(_10.1);
(*_22) = core::ptr::addr_of_mut!(_27);
_36.1.1 = _12.fld0.0.1;
(*_22) = _34;
_29 = _24 >= _26;
Goto(bb17)
}
bb17 = {
Call(_41, bb18, dump_var(11_usize, 3_usize, Move(_3), 24_usize, Move(_24), 5_usize, Move(_5), 8_usize, Move(_8)))
}
bb18 = {
Call(_41, bb19, dump_var(11_usize, 23_usize, Move(_23), 1_usize, Move(_1), 18_usize, Move(_18), 26_usize, Move(_26)))
}
bb19 = {
Call(_41, bb20, dump_var(11_usize, 15_usize, Move(_15), 42_usize, _42, 42_usize, _42, 42_usize, _42))
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn12(mut _1: (f32, i8, i16),mut _2: i8) -> [i32; 6] {
mir! {
type RET = [i32; 6];
let _3: (isize, i64);
let _4: isize;
let _5: Adt60;
let _6: isize;
let _7: Adt49;
let _8: f32;
let _9: isize;
let _10: Adt64;
let _11: Adt51;
let _12: f64;
let _13: *mut i64;
let _14: [i8; 6];
let _15: (isize, i64);
let _16: [i32; 1];
let _17: [i64; 3];
let _18: (u8, *mut i16);
let _19: ((f32, i8, i16), bool, usize);
let _20: ();
let _21: ();
{
_3 = (9223372036854775807_isize, (-5133879638692599142_i64));
_3.1 = 1977378393897229711_u64 as i64;
_1.0 = 9000847565786663895_u64 as f32;
_3 = (9223372036854775807_isize, 8793145159299998166_i64);
_3.0 = (-9223372036854775808_isize);
match _1.1 {
340282366920938463463374607431768211452 => bb2,
_ => bb1
}
}
bb1 = {
Return()
}
bb2 = {
_1.1 = (-58154387800443329906682813589336894754_i128) as i8;
RET = [81630258_i32,2070418581_i32,(-164707772_i32),(-771501094_i32),(-1401138586_i32),(-1905614416_i32)];
RET = [(-215871158_i32),(-834587868_i32),1969465914_i32,(-1899637907_i32),(-1674343141_i32),197194880_i32];
_3.1 = _1.2 as i64;
_1.1 = _2;
RET = [(-2117148720_i32),1303943371_i32,1881836941_i32,58887411_i32,811166082_i32,(-669554479_i32)];
_1.2 = -1359_i16;
_4 = !_3.0;
RET = [1421093292_i32,1882151270_i32,(-776145007_i32),1772102276_i32,1338367613_i32,1994086428_i32];
_1.1 = 212050547388433871969263578205804226484_u128 as i8;
_2 = -_1.1;
_4 = !_3.0;
RET = [1375998225_i32,2070466896_i32,1952044895_i32,325283419_i32,1506652119_i32,1658479789_i32];
_3 = (_4, (-58071552708509891_i64));
RET = [818632211_i32,(-733508930_i32),2087277099_i32,(-751645369_i32),(-820123112_i32),412934812_i32];
_3.0 = _4 - _4;
_3.0 = _3.1 as isize;
_4 = '\u{4dc9}' as isize;
RET = [(-72584703_i32),(-306085608_i32),1503517657_i32,2068325187_i32,1682017261_i32,1644639275_i32];
_1.1 = _2;
_4 = _3.0;
RET = [1765953439_i32,176470610_i32,2136524537_i32,1094061673_i32,(-1487688824_i32),1528425255_i32];
_4 = _3.0;
_1.0 = 1461565624_u32 as f32;
RET = [2015942853_i32,(-1766648700_i32),621066861_i32,(-1426405894_i32),464121263_i32,842709817_i32];
_6 = _3.0 | _3.0;
_2 = _1.1 & _1.1;
match _3.1 {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
4 => bb7,
5 => bb8,
6 => bb9,
340282366920938463463316535879059701565 => bb11,
_ => bb10
}
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
_7.fld3.1 = core::ptr::addr_of_mut!(_1.2);
_1.1 = _2;
_7.fld4 = [false,false,true,false,false,false,false];
_7.fld3.0 = 112_u8 & 108_u8;
_1.0 = 3_usize as f32;
_7.fld3.0 = !53_u8;
_9 = -_6;
RET = [(-420901829_i32),(-975516864_i32),(-345276701_i32),644418980_i32,(-584461900_i32),1480835304_i32];
_7.fld4 = [true,true,false,true,false,true,true];
_1.1 = 46525_u16 as i8;
_5.fld1 = !13880007191451255233_u64;
_1.1 = _2 ^ _2;
_7.fld5 = core::ptr::addr_of_mut!(_3.1);
_6 = _9;
_8 = _1.0;
match _3.1 {
340282366920938463463316535879059701565 => bb12,
_ => bb10
}
}
bb12 = {
_7.fld2 = !157809886460122495131962669405395749480_i128;
_3 = (_9, (-6652264558195988414_i64));
_11.fld0.1 = !true;
_10.fld1 = core::ptr::addr_of!(_7.fld1.0);
_10.fld3 = -_8;
_11.fld0 = (_1, false, 5425324432113906453_usize);
_5.fld1 = 2153941354239208896_u64 - 9455975176559287288_u64;
_12 = _11.fld0.0.1 as f64;
_7.fld5 = core::ptr::addr_of_mut!(_3.1);
_11.fld0.0 = (_10.fld3, _1.1, _1.2);
_11.fld0.1 = _10.fld3 == _8;
_6 = 1576656393_i32 as isize;
_5 = Adt60 { fld0: _12,fld1: 8505056471842027573_u64 };
_7.fld5 = core::ptr::addr_of_mut!(_3.1);
_7.fld2 = (-125017537944029913424351096699176472054_i128);
_13 = _7.fld5;
_10.fld2 = _11.fld0.0.2 as i128;
_1.1 = _11.fld0.2 as i8;
_4 = _7.fld3.0 as isize;
_11.fld0 = (_1, true, 0_usize);
_10.fld4 = [_5.fld1,_5.fld1,_5.fld1,_5.fld1,_5.fld1,_5.fld1];
_10.fld4 = [_5.fld1,_5.fld1,_5.fld1,_5.fld1,_5.fld1,_5.fld1];
_1.2 = _1.0 as i16;
_7.fld1.0 = _10.fld4;
match _7.fld2 {
0 => bb8,
1 => bb9,
215264828976908550039023510732591739402 => bb14,
_ => bb13
}
}
bb13 = {
Return()
}
bb14 = {
_15.1 = _10.fld3 as i64;
_7.fld2 = 7633_u16 as i128;
_7.fld0 = (_8, _11.fld0.0.1, _1.2);
(*_13) = _7.fld0.1 as i64;
(*_13) = _1.2 as i64;
_11.fld0.0.2 = -_1.2;
_14 = [_1.1,_1.1,_1.1,_1.1,_1.1,_1.1];
_7.fld0.2 = _11.fld0.0.2;
_6 = !_3.0;
_17 = [_3.1,(*_13),_15.1];
_18 = (_7.fld3.0, _7.fld3.1);
_14 = [_7.fld0.1,_7.fld0.1,_7.fld0.1,_11.fld0.0.1,_7.fld0.1,_7.fld0.1];
(*_13) = _15.1 & _15.1;
_11.fld0.1 = true;
_1.0 = -_10.fld3;
_10.fld2 = _7.fld0.0 as i128;
_10.fld4 = [_5.fld1,_5.fld1,_5.fld1,_5.fld1,_5.fld1,_5.fld1];
_3.0 = !_6;
_19 = (_1, _11.fld0.1, _11.fld0.2);
_18.0 = _7.fld3.0 << _19.0.1;
_11.fld0.1 = _11.fld0.0.1 < _1.1;
_1.2 = _11.fld0.0.2;
_3.1 = _15.1;
_19 = _11.fld0;
_7.fld0 = _11.fld0.0;
_7.fld3.1 = _18.1;
Goto(bb15)
}
bb15 = {
Call(_20, bb16, dump_var(12_usize, 2_usize, Move(_2), 3_usize, Move(_3), 14_usize, Move(_14), 21_usize, _21))
}
bb16 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn13(mut _1: isize,mut _2: (f32, i8, i16),mut _3: (isize, i64),mut _4: isize) -> isize {
mir! {
type RET = isize;
let _5: (usize, *mut i16, [u16; 7], i16);
let _6: isize;
let _7: [i8; 6];
let _8: *const *mut char;
let _9: u32;
let _10: f64;
let _11: [bool; 7];
let _12: (f32, i8, i16);
let _13: char;
let _14: [i8; 6];
let _15: Adt60;
let _16: isize;
let _17: [i32; 6];
let _18: [u64; 3];
let _19: ((f32, i8, i16), bool, usize);
let _20: bool;
let _21: isize;
let _22: [i32; 6];
let _23: *mut i16;
let _24: [u64; 6];
let _25: f64;
let _26: ([u64; 6], (f32, i8, i16), u16);
let _27: isize;
let _28: Adt51;
let _29: isize;
let _30: [i32; 1];
let _31: f64;
let _32: *mut *mut i64;
let _33: i8;
let _34: isize;
let _35: (f32, i8, i16);
let _36: ();
let _37: ();
{
_1 = _4;
RET = _1;
_2.1 = 50_i8;
_1 = _3.0 ^ _3.0;
_3.0 = _1;
RET = _3.0 ^ _1;
_2.1 = !50_i8;
match _3.1 {
0 => bb1,
1 => bb2,
2 => bb3,
340282366920938463461466344547814139468 => bb5,
_ => bb4
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
RET = (-68638154268436662493486467381170984857_i128) as isize;
_5.1 = core::ptr::addr_of_mut!(_2.2);
_1 = _3.0 * _3.0;
_5.2 = [60528_u16,47341_u16,53094_u16,65028_u16,51134_u16,3938_u16,133_u16];
_2.2 = 11721_i16;
_6 = _2.0 as isize;
_2.1 = -69_i8;
_3.1 = !6324729618297015569_i64;
_5.3 = _3.1 as i16;
_5.0 = 3_usize;
_2.0 = 62_u8 as f32;
_9 = _2.0 as u32;
_5.1 = core::ptr::addr_of_mut!(_5.3);
_3 = (_4, 4440810514326036224_i64);
_3 = (_1, (-3486331889142230180_i64));
_7 = [_2.1,_2.1,_2.1,_2.1,_2.1,_2.1];
_5.3 = _2.2 - _2.2;
_10 = _5.3 as f64;
_2.0 = _2.1 as f32;
_3.0 = _1 ^ _1;
_11 = [false,true,false,true,false,false,true];
_3.0 = _1;
match _5.0 {
0 => bb4,
1 => bb2,
3 => bb6,
_ => bb3
}
}
bb6 = {
_3 = (_1, (-5693262211724801998_i64));
_3.1 = _5.0 as i64;
_12 = (_2.0, _2.1, _2.2);
_13 = '\u{9b19d}';
_3.1 = 8444824912741415190_i64;
_7 = [_12.1,_2.1,_12.1,_2.1,_12.1,_2.1];
_1 = !_4;
_5.2 = [24324_u16,28998_u16,25180_u16,16686_u16,16391_u16,15492_u16,4852_u16];
_12 = (_2.0, _2.1, _5.3);
_7 = [_2.1,_12.1,_2.1,_2.1,_2.1,_12.1];
RET = !_3.0;
_2.2 = _5.3 << _12.2;
_12.0 = _2.0;
_2.1 = _12.1 ^ _12.1;
_2.0 = -_12.0;
_5.1 = core::ptr::addr_of_mut!(_5.3);
_15.fld1 = 6127601138098022143_u64;
_15.fld0 = _10 * _10;
_15.fld0 = 6948_u16 as f64;
_12.2 = _2.2;
_3.1 = 2024734666937064479_i64 | (-20143784071927731_i64);
_14 = [_2.1,_12.1,_12.1,_2.1,_12.1,_2.1];
Goto(bb7)
}
bb7 = {
_13 = '\u{1a2cc}';
_2.1 = -_12.1;
_4 = (-416446847_i32) as isize;
_11 = [true,false,false,true,true,false,false];
_13 = '\u{9687}';
_18 = [_15.fld1,_15.fld1,_15.fld1];
_2.1 = 49297_u16 as i8;
_14 = [_2.1,_12.1,_2.1,_2.1,_2.1,_2.1];
_13 = '\u{4074d}';
_15.fld0 = -_10;
_9 = _6 as u32;
_6 = _3.0 & _3.0;
_16 = _6 >> _6;
_2 = (_12.0, _12.1, _12.2);
_3.1 = -8153935903585001000_i64;
_19.0.2 = !_5.3;
_13 = '\u{45401}';
_17 = [1623808179_i32,344913304_i32,(-1065322435_i32),(-1205655595_i32),1022815207_i32,(-294429265_i32)];
_19.0 = (_2.0, _12.1, _5.3);
_10 = -_15.fld0;
_23 = _5.1;
_4 = _16;
_19.1 = !true;
_19.0.2 = _12.2;
Call(_19, bb8, fn14(_3.1, _18, Move(_15), _4, _23, _16, _13, _1, _12.1))
}
bb8 = {
_12.2 = !(*_23);
_2.0 = _19.0.0 + _19.0.0;
Goto(bb9)
}
bb9 = {
_11 = [_19.1,_19.1,_19.1,_19.1,_19.1,_19.1,_19.1];
_9 = 2443838758_u32;
_3.1 = (-4301140955406879518_i64) & 296882419756806757_i64;
_25 = _12.2 as f64;
_1 = _4;
_26.0 = [11378816921148321652_u64,2772345324304190647_u64,14598252307983638191_u64,3283435436896890137_u64,15382402491927848280_u64,16835935047468626978_u64];
_22 = [1387171495_i32,1715151674_i32,2082979258_i32,1015336738_i32,1285052305_i32,1979453234_i32];
_5.2 = [49380_u16,16550_u16,49977_u16,5615_u16,30482_u16,41348_u16,42392_u16];
_19.0.2 = 314144154548679962693057518544940087413_u128 as i16;
_2.2 = (*_23);
_20 = !_19.1;
_26.1 = _2;
_3.1 = 4791453305434282741_i64 - (-5771066523039265336_i64);
_12.2 = -(*_23);
_26.1.0 = _2.0;
_5.1 = core::ptr::addr_of_mut!(_19.0.2);
match _19.2 {
0 => bb8,
1 => bb2,
2 => bb3,
3 => bb10,
4 => bb11,
5 => bb12,
9081717570024057789 => bb14,
_ => bb13
}
}
bb10 = {
Return()
}
bb11 = {
Return()
}
bb12 = {
Return()
}
bb13 = {
RET = (-68638154268436662493486467381170984857_i128) as isize;
_5.1 = core::ptr::addr_of_mut!(_2.2);
_1 = _3.0 * _3.0;
_5.2 = [60528_u16,47341_u16,53094_u16,65028_u16,51134_u16,3938_u16,133_u16];
_2.2 = 11721_i16;
_6 = _2.0 as isize;
_2.1 = -69_i8;
_3.1 = !6324729618297015569_i64;
_5.3 = _3.1 as i16;
_5.0 = 3_usize;
_2.0 = 62_u8 as f32;
_9 = _2.0 as u32;
_5.1 = core::ptr::addr_of_mut!(_5.3);
_3 = (_4, 4440810514326036224_i64);
_3 = (_1, (-3486331889142230180_i64));
_7 = [_2.1,_2.1,_2.1,_2.1,_2.1,_2.1];
_5.3 = _2.2 - _2.2;
_10 = _5.3 as f64;
_2.0 = _2.1 as f32;
_3.0 = _1 ^ _1;
_11 = [false,true,false,true,false,false,true];
_3.0 = _1;
match _5.0 {
0 => bb4,
1 => bb2,
3 => bb6,
_ => bb3
}
}
bb14 = {
_28.fld0.0.2 = 4254848294729715907_u64 as i16;
_24 = [10474648932003655457_u64,7556818955166897041_u64,1331540251872815856_u64,16452817373436788650_u64,8718509982421778162_u64,3292571270869713652_u64];
_28.fld0 = (_26.1, _19.1, _5.0);
_7 = [_26.1.1,_28.fld0.0.1,_19.0.1,_12.1,_19.0.1,_19.0.1];
_5.2 = [25511_u16,49572_u16,64151_u16,46190_u16,54672_u16,7857_u16,19869_u16];
_9 = 3841929445_u32;
_5.2 = [5750_u16,41882_u16,55158_u16,10972_u16,57123_u16,13818_u16,53211_u16];
_34 = _3.0 & _1;
_12 = _2;
_5.2 = [4866_u16,49437_u16,63960_u16,15511_u16,51678_u16,37860_u16,13697_u16];
_5.1 = core::ptr::addr_of_mut!((*_23));
_18 = [4742678761560612529_u64,9737687302269132131_u64,2078066759323644605_u64];
_3.0 = (*_23) as isize;
_12.0 = _26.1.0;
_26.1.0 = _2.0 - _2.0;
_12.1 = _19.0.1;
_6 = -_34;
_19.0.2 = _10 as i16;
_2.0 = _28.fld0.0.0;
_2.1 = _19.0.1;
_28.fld0.0 = _12;
_13 = '\u{330b4}';
_30 = [(-1750437656_i32)];
_26.0 = [991948985629900011_u64,16237815230451958994_u64,5135737364064906819_u64,17540280012156838287_u64,11244053502764453967_u64,17357543610705349655_u64];
_35 = (_19.0.0, _28.fld0.0.1, (*_23));
Goto(bb15)
}
bb15 = {
Call(_36, bb16, dump_var(13_usize, 7_usize, Move(_7), 22_usize, Move(_22), 24_usize, Move(_24), 9_usize, Move(_9)))
}
bb16 = {
Call(_36, bb17, dump_var(13_usize, 4_usize, Move(_4), 18_usize, Move(_18), 14_usize, Move(_14), 34_usize, Move(_34)))
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn14(mut _1: i64,mut _2: [u64; 3],mut _3: Adt60,mut _4: isize,mut _5: *mut i16,mut _6: isize,mut _7: char,mut _8: isize,mut _9: i8) -> ((f32, i8, i16), bool, usize) {
mir! {
type RET = ((f32, i8, i16), bool, usize);
let _10: Adt61;
let _11: f64;
let _12: f32;
let _13: u8;
let _14: ([u64; 6],);
let _15: ();
let _16: ();
{
_3.fld1 = !14806249745557576323_u64;
RET.0.2 = -(*_5);
RET.0.0 = 116845300048469770608822800275678800224_i128 as f32;
_7 = '\u{a953e}';
_1 = (-67115880628073763144825111833877375430_i128) as i64;
RET.0.0 = (*_5) as f32;
RET.2 = 7_usize & 892754211395285250_usize;
RET.0.0 = (-123178363497048928222326817894155506767_i128) as f32;
_8 = 9953054973479852422_usize as isize;
_8 = _4 << (*_5);
Call(RET.0.2, bb1, core::intrinsics::bswap((*_5)))
}
bb1 = {
_5 = core::ptr::addr_of_mut!((*_5));
RET.1 = !true;
RET.2 = 9081717570024057789_usize;
_2 = [_3.fld1,_3.fld1,_3.fld1];
Call(_10.fld0, bb2, fn15((*_5), _2, _6, _8, Move(_3), _2, _8, _7, _8))
}
bb2 = {
RET.0.1 = _9;
Goto(bb3)
}
bb3 = {
_4 = _6 | _6;
Call(RET.0.2, bb4, core::intrinsics::bswap((*_5)))
}
bb4 = {
_5 = _10.fld0;
RET.0.1 = _9 - _9;
_10.fld1 = [_1,_1,_1];
_2 = [6295189933406196281_u64,18219508041284982572_u64,6240750493329529969_u64];
_10.fld1 = [_1,_1,_1];
_6 = _4 << _4;
RET.0.0 = _6 as f32;
_5 = _10.fld0;
RET.1 = true & true;
_14.0 = [13047134061754587613_u64,11971546479143425672_u64,16033622034875111085_u64,11280218701781132129_u64,585829199598749762_u64,17108898485335853078_u64];
Goto(bb5)
}
bb5 = {
Call(_15, bb6, dump_var(14_usize, 9_usize, Move(_9), 2_usize, Move(_2), 1_usize, Move(_1), 8_usize, Move(_8)))
}
bb6 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn15(mut _1: i16,mut _2: [u64; 3],mut _3: isize,mut _4: isize,mut _5: Adt60,mut _6: [u64; 3],mut _7: isize,mut _8: char,mut _9: isize) -> *mut i16 {
mir! {
type RET = *mut i16;
let _10: *mut (f32, i8, i16);
let _11: (u8, *mut i16);
let _12: *const [u64; 6];
let _13: (f32, i8, i16);
let _14: char;
let _15: bool;
let _16: ([u64; 6], (f32, i8, i16), u16);
let _17: f64;
let _18: char;
let _19: ();
let _20: ();
{
_8 = '\u{638cf}';
_1 = (-22468_i16);
_5.fld0 = 959277800_i32 as f64;
RET = core::ptr::addr_of_mut!(_1);
_5.fld1 = (-45005290274057008771154345413747328113_i128) as u64;
_3 = _9;
(*RET) = (-713_i16) ^ (-27276_i16);
_11.0 = 34727_u16 as u8;
_7 = !_9;
_9 = 120_i8 as isize;
(*RET) = !(-27893_i16);
_5.fld1 = 3255466187930209736_u64;
_6 = [_5.fld1,_5.fld1,_5.fld1];
_7 = _3 - _4;
_11.1 = core::ptr::addr_of_mut!((*RET));
_7 = _3 ^ _3;
_8 = '\u{78c90}';
_6 = [_5.fld1,_5.fld1,_5.fld1];
_3 = _4;
_7 = !_4;
Goto(bb1)
}
bb1 = {
_1 = 21152_i16 >> _3;
RET = _11.1;
_7 = _3 >> _4;
_10 = core::ptr::addr_of_mut!(_13);
_5.fld0 = 105_i8 as f64;
(*_10).2 = _5.fld0 as i16;
_13.2 = !_1;
_4 = _8 as isize;
_13.2 = _7 as i16;
_2 = [_5.fld1,_5.fld1,_5.fld1];
_2 = [_5.fld1,_5.fld1,_5.fld1];
(*_10).0 = 43306444750144442332015117438891770928_i128 as f32;
_16.1.1 = 110_i8;
(*_10).1 = 34569_u16 as i8;
_16.1 = (*_10);
RET = core::ptr::addr_of_mut!(_1);
_15 = !true;
RET = core::ptr::addr_of_mut!(_1);
_13 = _16.1;
(*_10).0 = 5_usize as f32;
_4 = -_3;
_14 = _8;
_2 = [_5.fld1,_5.fld1,_5.fld1];
_3 = _4;
_3 = 7654342410028848858_i64 as isize;
Goto(bb2)
}
bb2 = {
Call(_19, bb3, dump_var(15_usize, 15_usize, Move(_15), 8_usize, Move(_8), 2_usize, Move(_2), 6_usize, Move(_6)))
}
bb3 = {
Call(_19, bb4, dump_var(15_usize, 7_usize, Move(_7), 20_usize, _20, 20_usize, _20, 20_usize, _20))
}
bb4 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn16(mut _1: isize,mut _2: u128,mut _3: isize,mut _4: isize,mut _5: u64,mut _6: isize,mut _7: u8,mut _8: u64,mut _9: i64,mut _10: u64,mut _11: u64,mut _12: i64) -> ((f32, i8, i16), bool, usize) {
mir! {
type RET = ((f32, i8, i16), bool, usize);
let _13: isize;
let _14: ((isize, i64), ([u64; 6],));
let _15: [bool; 7];
let _16: bool;
let _17: *mut i16;
let _18: isize;
let _19: isize;
let _20: u8;
let _21: [u16; 7];
let _22: [bool; 7];
let _23: i64;
let _24: (f32, i8, i16);
let _25: (usize, *mut i16, [u16; 7], i16);
let _26: ((isize, i64), ([u64; 6],));
let _27: isize;
let _28: *mut i16;
let _29: [u16; 7];
let _30: *mut char;
let _31: ();
let _32: ();
{
_1 = _10 as isize;
_5 = (-16_i8) as u64;
RET.1 = !true;
_11 = _10;
_12 = _9;
RET.0.0 = 3045146917_u32 as f32;
_10 = _12 as u64;
_3 = -_4;
_10 = _5;
RET.0.2 = 24991_i16;
RET.0.1 = 63_i8;
RET.0.0 = _7 as f32;
_6 = _4;
_12 = !_9;
RET.0.0 = _7 as f32;
_13 = _3;
_7 = '\u{669d2}' as u8;
_2 = !31345397603415594359736946964060462791_u128;
_7 = 168_u8 & 103_u8;
_8 = 3216120029_u32 as u64;
RET.0.2 = true as i16;
RET.2 = 3_usize ^ 12773564927588055020_usize;
RET.1 = _9 >= _12;
_8 = _10;
_11 = 16545_u16 as u64;
_7 = 194_u8 | 16_u8;
Call(RET.2, bb1, core::intrinsics::transmute(_6))
}
bb1 = {
_9 = _12;
_8 = _7 as u64;
RET.1 = _11 >= _5;
_7 = _4 as u8;
RET.0.2 = _6 as i16;
_14.0.0 = _3;
_6 = !_3;
RET.0.0 = _9 as f32;
_11 = (-60_i8) as u64;
_14.0 = (_6, _12);
Goto(bb2)
}
bb2 = {
RET.1 = true;
RET.0.2 = 22375_i16;
RET.1 = !true;
_4 = _14.0.0;
_14.1.0 = [_11,_8,_10,_8,_10,_8];
_11 = _8 / 9000770067368674379_u64;
_1 = _14.0.0;
Call(_8, bb3, fn17(_7, _4, _9, _2, _1, _5, _2, _6, _4))
}
bb3 = {
_9 = 1212_u16 as i64;
_11 = _8;
_18 = !_1;
RET.0.2 = 31020_i16 + (-25728_i16);
RET.0.0 = _2 as f32;
_14.0.0 = _6;
_14.0.0 = _18;
_14.0.0 = 58603_u16 as isize;
RET.0.2 = !20306_i16;
_12 = _14.0.1 & _9;
_14.0.1 = -_12;
_13 = _1;
_14.1.0 = [_8,_11,_11,_5,_10,_11];
_13 = _4;
Goto(bb4)
}
bb4 = {
RET.1 = !false;
RET.2 = 17519288749321989058_usize + 15935045824605417232_usize;
_16 = false;
_5 = _11 >> _14.0.1;
_5 = _8;
_7 = '\u{a791f}' as u8;
RET.2 = 9239666335330647859_usize;
_16 = !true;
_2 = 2277582111_u32 as u128;
_19 = _4;
RET.2 = 11136512720151828623_usize - 6_usize;
_14.1.0 = [_10,_5,_10,_5,_5,_5];
_19 = !_18;
RET.0.1 = _7 as i8;
_15 = [_16,_16,_16,_16,_16,_16,_16];
_13 = _16 as isize;
_21 = [59659_u16,34860_u16,25031_u16,22016_u16,28588_u16,657_u16,50473_u16];
_18 = _3 & _6;
Goto(bb5)
}
bb5 = {
_9 = _14.0.1 >> _12;
_22 = [_16,_16,_16,_16,_16,_16,_16];
_1 = (-68_i8) as isize;
_14.0.1 = (-73_i8) as i64;
RET.0.2 = !(-22195_i16);
_3 = (-1365562344_i32) as isize;
_3 = _6 - _13;
_14.1.0 = [_5,_11,_10,_8,_11,_5];
_10 = _11 + _5;
_11 = !_5;
RET.0.2 = !(-13821_i16);
RET.1 = !_16;
_3 = _19;
_19 = -_1;
_22 = [_16,_16,_16,_16,_16,_16,_16];
_11 = _5 & _5;
_15 = _22;
RET.0.2 = 3598_i16 * 21972_i16;
RET.0.1 = 164216835_u32 as i8;
_3 = _13;
_16 = !true;
_1 = !_4;
_16 = _9 > _12;
Goto(bb6)
}
bb6 = {
RET.0.1 = -9_i8;
_26.1 = _14.1;
_18 = '\u{e5570}' as isize;
RET.0.2 = 24896_i16 ^ 18117_i16;
_25.2 = [2652_u16,21383_u16,30656_u16,28044_u16,10626_u16,23076_u16,2247_u16];
_14.0 = (_19, _9);
_26.0 = _14.0;
_11 = _8 ^ _10;
_20 = _11 as u8;
_3 = (-58703593183922420730216064704439833624_i128) as isize;
_17 = core::ptr::addr_of_mut!(_25.3);
Goto(bb7)
}
bb7 = {
_14.0.1 = _26.0.1 - _26.0.1;
_22 = [_16,_16,_16,_16,_16,_16,_16];
_14.1.0 = [_11,_11,_5,_10,_8,_11];
_24.2 = 52039650694571845894890064802842704581_i128 as i16;
_7 = 4875_u16 as u8;
_20 = _7 - _7;
_12 = _26.0.1;
RET.1 = _9 != _14.0.1;
RET.2 = '\u{d1b43}' as usize;
_11 = !_8;
(*_17) = _24.2 | _24.2;
_13 = _14.0.0 ^ _3;
RET.2 = 3_usize * 15987568364272520375_usize;
_23 = 164307024152494669926880748630809881204_i128 as i64;
_13 = _1;
_12 = !_14.0.1;
_20 = _7;
Goto(bb8)
}
bb8 = {
Call(_31, bb9, dump_var(16_usize, 14_usize, Move(_14), 19_usize, Move(_19), 5_usize, Move(_5), 9_usize, Move(_9)))
}
bb9 = {
Call(_31, bb10, dump_var(16_usize, 26_usize, Move(_26), 15_usize, Move(_15), 7_usize, Move(_7), 11_usize, Move(_11)))
}
bb10 = {
Call(_31, bb11, dump_var(16_usize, 23_usize, Move(_23), 22_usize, Move(_22), 12_usize, Move(_12), 32_usize, _32))
}
bb11 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn17(mut _1: u8,mut _2: isize,mut _3: i64,mut _4: u128,mut _5: isize,mut _6: u64,mut _7: u128,mut _8: isize,mut _9: isize) -> u64 {
mir! {
type RET = u64;
let _10: *mut (f32, i8, i16);
let _11: i32;
let _12: i32;
let _13: bool;
let _14: (u8, i32, u128, u128);
let _15: Adt57;
let _16: usize;
let _17: isize;
let _18: Adt50;
let _19: Adt51;
let _20: ([u64; 6],);
let _21: Adt51;
let _22: f32;
let _23: i32;
let _24: char;
let _25: [bool; 7];
let _26: [u64; 6];
let _27: [i32; 1];
let _28: u32;
let _29: (u8, i32, u128, u128);
let _30: i16;
let _31: Adt50;
let _32: i128;
let _33: Adt61;
let _34: [bool; 7];
let _35: [bool; 7];
let _36: i64;
let _37: u64;
let _38: u128;
let _39: ();
let _40: ();
{
_6 = !4305876050623075847_u64;
_5 = 28021_u16 as isize;
RET = _6 % 7684447938010270690_u64;
_9 = _8 * _5;
_5 = _2 ^ _8;
Goto(bb1)
}
bb1 = {
_7 = _4;
_7 = !_4;
_3 = 33409_u16 as i64;
_9 = !_2;
_9 = _3 as isize;
_7 = _4;
_12 = (-1927472980_i32);
_4 = _7 % 51332142824600205655454173450116479559_u128;
_7 = _3 as u128;
_3 = 8665397185497336086_i64 - 6898282768331684354_i64;
_4 = true as u128;
_2 = _5 << _3;
RET = !_6;
RET = !_6;
match _12 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
340282366920938463463374607429840738476 => bb8,
_ => bb7
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_2 = _8 + _5;
_2 = _3 as isize;
_1 = !12_u8;
RET = _6;
_7 = _4;
_4 = !_7;
_9 = !_5;
RET = _6 ^ _6;
_12 = 1927967380_i32;
_7 = _4;
_5 = _2 & _9;
_3 = 4_usize as i64;
_1 = 25_u8 << _5;
_12 = (-1645957205_i32);
RET = _6 / 14553207446571136882_u64;
_6 = true as u64;
_5 = !_2;
_12 = 11832058498727525150_usize as i32;
_11 = _12;
_8 = _3 as isize;
_13 = false;
_5 = _2;
_6 = !5209719823588300874_u64;
_15.fld6.0 = 64461_u16 as f32;
Call(_15.fld2.2, bb9, core::intrinsics::bswap(_4))
}
bb9 = {
_15.fld1.2 = !3291_u16;
_15.fld2 = (_1, _12, _4, _7);
_15.fld0.1 = core::ptr::addr_of_mut!(_15.fld4);
_15.fld1.0 = _15.fld6.0 / (-0.000000000000000000000000000000000000007799466103108534_f32);
_13 = !true;
_15.fld6.0 = -_15.fld1.0;
_15.fld1.3 = [_15.fld1.2,_15.fld1.2,_15.fld1.2,_15.fld1.2,_15.fld1.2,_15.fld1.2,_15.fld1.2];
_15.fld0.0 = '\u{e6dfa}' as u8;
_16 = !0_usize;
_15.fld4 = _16 as i16;
_15.fld6.1 = 113251405465009957943027956352653422374_i128 as i8;
_15.fld2.1 = _11;
_15.fld5 = _12;
_10 = core::ptr::addr_of_mut!(_19.fld0.0);
(*_10).0 = _15.fld6.0 / (-0.000000000000000000000000000000000000001957237005374866_f32);
_9 = _8;
(*_10).2 = _15.fld1.2 as i16;
_12 = _15.fld5 + _11;
_7 = _6 as u128;
_20.0 = [_6,_6,_6,_6,_6,_6];
_15.fld7 = [_15.fld1.2,_15.fld1.2,_15.fld1.2,_15.fld1.2,_15.fld1.2,_15.fld1.2,_15.fld1.2];
_15.fld1.0 = -(*_10).0;
Goto(bb10)
}
bb10 = {
_14.3 = _15.fld2.3 + _15.fld2.3;
_24 = '\u{2fc3b}';
_21.fld0.1 = _13 | _13;
_21.fld0.0.0 = _19.fld0.0.0 / (-0.000000000000000000000000000000000000003951342173346118_f32);
_14.0 = !_1;
_21.fld0.0.2 = _19.fld0.0.2;
_15.fld6.2 = _15.fld4;
Goto(bb11)
}
bb11 = {
_15.fld4 = _19.fld0.0.2;
(*_10) = (_15.fld6.0, _15.fld6.1, _21.fld0.0.2);
_19.fld0.0.0 = _19.fld0.0.2 as f32;
_7 = _15.fld2.2 & _14.3;
_23 = _12;
_12 = _15.fld2.1;
_8 = _9;
_21.fld0.0 = (_15.fld1.0, _19.fld0.0.1, (*_10).2);
_15.fld1.1 = [_6,_6,_6,_6,_6,_6];
_14.1 = !_23;
_7 = !_14.3;
_9 = !_8;
_19.fld0 = (_15.fld6, _21.fld0.1, _16);
Goto(bb12)
}
bb12 = {
_14 = (_15.fld2.0, _23, _7, _7);
_15.fld2.0 = _21.fld0.1 as u8;
_18.fld0 = !_6;
_18.fld0 = _6;
_15.fld1.2 = 59111_u16;
_15.fld1 = (_21.fld0.0.0, _20.0, 46317_u16, _15.fld7);
_15.fld0.0 = _15.fld2.0;
_15.fld2 = _14;
_29.0 = !_14.0;
_29.3 = _11 as u128;
_16 = _19.fld0.2 & _19.fld0.2;
_19.fld0.0.2 = _15.fld6.2;
_30 = (*_10).0 as i16;
_31 = Adt50 { fld0: _6 };
(*_10).0 = -_21.fld0.0.0;
(*_10).2 = _21.fld0.0.2 & _30;
_15.fld4 = -_19.fld0.0.2;
_17 = _2 << _15.fld5;
Goto(bb13)
}
bb13 = {
_19.fld0.0.0 = -_15.fld1.0;
(*_10) = (_21.fld0.0.0, _21.fld0.0.1, _15.fld4);
_21.fld0 = _19.fld0;
_20.0 = [_31.fld0,_6,_31.fld0,_6,_6,_31.fld0];
(*_10) = (_15.fld6.0, _15.fld6.1, _21.fld0.0.2);
_29.2 = _21.fld0.0.2 as u128;
Goto(bb14)
}
bb14 = {
_31 = Adt50 { fld0: _6 };
_1 = 892070659_u32 as u8;
_34 = [_21.fld0.1,_13,_19.fld0.1,_19.fld0.1,_13,_13,_21.fld0.1];
_27 = [_15.fld5];
_29 = _15.fld2;
_2 = _8;
_21.fld0.0.0 = _15.fld4 as f32;
_14 = (_15.fld2.0, _15.fld2.1, _29.2, _15.fld2.3);
Goto(bb15)
}
bb15 = {
Call(_39, bb16, dump_var(17_usize, 4_usize, Move(_4), 3_usize, Move(_3), 8_usize, Move(_8), 5_usize, Move(_5)))
}
bb16 = {
Call(_39, bb17, dump_var(17_usize, 14_usize, Move(_14), 27_usize, Move(_27), 24_usize, Move(_24), 6_usize, Move(_6)))
}
bb17 = {
Call(_39, bb18, dump_var(17_usize, 12_usize, Move(_12), 23_usize, Move(_23), 17_usize, Move(_17), 40_usize, _40))
}
bb18 = {
Return()
}

}
}
pub fn main() {
                fn0(std::hint::black_box(4119677018146842801_u64), std::hint::black_box('\u{4d49e}'), std::hint::black_box(40462501470708843093982360072430148218_u128), std::hint::black_box((-116_i8)), std::hint::black_box((-899900888_i32)));
                
            }
#[derive(Debug,Copy,Clone)]
pub struct Adt49 {
fld0: (f32, i8, i16),
fld1: ([u64; 6],),
fld2: i128,
fld3: (u8, *mut i16),
fld4: [bool; 7],
fld5: *mut i64,
}
#[derive(Debug,Copy,Clone)]
pub struct Adt50 {
fld0: u64,
}
#[derive(Debug,Copy,Clone)]
pub struct Adt51 {
fld0: ((f32, i8, i16), bool, usize),
}
#[derive(Debug)]
pub struct Adt52 {
fld0: [u64; 3],
fld1: char,
fld2: u8,
fld3: Adt49,
fld4: ((f32, i8, i16), bool, usize),
fld5: Adt50,
fld6: [u16; 7],
}
#[derive(Debug,Copy,Clone)]
pub struct Adt53 {
fld0: i32,
fld1: ((isize, i64), ([u64; 6],)),
fld2: isize,
fld3: [u64; 3],
fld4: u32,
}
#[derive(Debug)]
pub struct Adt54 {
fld0: *mut i64,
}
#[derive(Debug)]
pub struct Adt55 {
fld0: ((f32, i8, i16), bool, usize),
fld1: Adt52,
fld2: isize,
fld3: ([u64; 6], (f32, i8, i16), u16),
fld4: *const *mut char,
}
#[derive(Debug)]
pub struct Adt56 {
fld0: f32,
fld1: [u64; 6],
fld2: [i32; 6],
fld3: *mut i64,
fld4: Adt53,
}
#[derive(Debug,Copy,Clone)]
pub struct Adt57 {
fld0: (u8, *mut i16),
fld1: (f32, [u64; 6], u16, [u16; 7]),
fld2: (u8, i32, u128, u128),
fld3: i8,
fld4: i16,
fld5: i32,
fld6: (f32, i8, i16),
fld7: [u16; 7],
}
#[derive(Debug,Copy,Clone)]
pub struct Adt58 {
fld0: *const isize,
}
#[derive(Debug)]
pub struct Adt59 {
fld0: (u8, *mut i16),
fld1: [u64; 6],
fld2: *mut (f32, i8, i16),
fld3: Adt54,
fld4: ((f32, i8, i16), bool, usize),
}
#[derive(Debug)]
pub struct Adt60 {
fld0: f64,
fld1: u64,
}
#[derive(Debug,Copy,Clone)]
pub struct Adt61 {
fld0: *mut i16,
fld1: [i64; 3],
}
#[derive(Debug)]
pub struct Adt62 {
fld0: (isize, i64),
fld1: (f32, [u64; 6], u16, [u16; 7]),
fld2: u8,
fld3: *const char,
fld4: Adt59,
fld5: i32,
fld6: [i32; 6],
fld7: usize,
}
#[derive(Debug)]
pub struct Adt63 {
fld0: Adt59,
fld1: (u8, i32, u128, u128),
fld2: *mut i64,
}
#[derive(Debug)]
pub struct Adt64 {
fld0: [i32; 1],
fld1: *const [u64; 6],
fld2: i128,
fld3: f32,
fld4: [u64; 6],
fld5: [i64; 3],
}
#[derive(Debug,Copy,Clone)]
pub struct Adt65 {
fld0: u8,
fld1: Adt49,
fld2: *const u32,
fld3: u32,
fld4: (f32, i8, i16),
fld5: f64,
}

